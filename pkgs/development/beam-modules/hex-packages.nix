/* hex-packages.nix is an auto-generated file -- DO NOT EDIT! */

/* Unbuildable packages:


*/
{ stdenv, pkgs, callPackage, overrides ? (self: super: {}) }:

let
  packages = self: rec {
    a_message_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "a_message";
            version = "1.0.0";
            src = fetchHex {
              pkg = "a_message";
              version = "1.0.0";
              sha256 =
                "ec687e0e71e08cc2dc9546dd726877008f580b5aaa13b2a66f1639b246989b2c";
            };

            meta = {
              description = ''\"A message\" struct w/ four required keys: from,
                            to, subject, body'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/amorphid/a_message";
            };
          } // packageOverrides)
      ) {};

    a_message = a_message_1_0_0;

    aatree_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "aatree";
            version = "0.1.0";
            src = fetchHex {
              pkg = "aatree";
              version = "0.1.0";
              sha256 =
                "ad20d61126e5440dd7443773c74564d1280daffb7265c154d89aa6d71aec80dd";
            };

            meta = {
              description = ''AA Tree in Pure Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/rickyhan/aatree";
            };
          } // packageOverrides)
      ) {};

    aatree = aatree_0_1_0;

    abacus_0_3_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "abacus";
            version = "0.3.2";
            src = fetchHex {
              pkg = "abacus";
              version = "0.3.2";
              sha256 =
                "010abfae56d31dcf6a33dc8747aaee02fe5a0acb99b40b29b4e86a4965c711ae";
            };

            meta = {
              longDescription = ''Mathematical expression parser and evaluator
                                in Elixir. Tags: math, parse, parser, eval'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/narrowtux/abacus";
            };
          } // packageOverrides)
      ) {};

    abacus = abacus_0_3_2;

    abacus_sm_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "abacus_sm";
            version = "1.0.0";
            src = fetchHex {
              pkg = "abacus_sm";
              version = "1.0.0";
              sha256 =
                "e62629984798c9d6169607bf8d1e16d8c710f75a9651628128e35d03b86f5c2b";
            };

            meta = {
              longDescription = ''Abacus is a module for transforming other
                                modules into metric systems. These modules
                                (metric systems) make it possible to use
                                functions to create values enclosed in a metric
                                system and functions to manipulate these
                                values.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/xvw/abacus";
            };
          } // packageOverrides)
      ) {};

    abacus_sm = abacus_sm_1_0_0;

    abnf_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "abnf";
            version = "0.0.1";
            src = fetchHex {
              pkg = "abnf";
              version = "0.0.1";
              sha256 =
                "81e263f061ba677bda3e0d7f8884730eb51c14d7bc6526647c46cce659f1b054";
            };

            meta = {
              description = ''ABNF parser for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/vanstee/abnf";
            };
          } // packageOverrides)
      ) {};

    abnf = abnf_0_0_1;

    absinthe_1_1_7 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "absinthe";
            version = "1.1.7";
            src = fetchHex {
              pkg = "absinthe";
              version = "1.1.7";
              sha256 =
                "fea86d98249f623f4f34f33df3c1c6bf64a9fec802dfdad62738c27d4c37fc5b";
            };

            meta = {
              description = ''GraphQL for Elixir'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/absinthe-graphql/absinthe";
            };
          } // packageOverrides)
      ) {};

    absinthe_1_3_0_rc_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "absinthe";
            version = "1.3.0-rc.0";
            src = fetchHex {
              pkg = "absinthe";
              version = "1.3.0-rc.0";
              sha256 =
                "037a996caa2fed7637e206368c99709fe6054bba7e32f4f602075096f2bf288b";
            };

            meta = {
              description = ''GraphQL for Elixir'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/absinthe-graphql/absinthe";
            };
          } // packageOverrides)
      ) {};

    absinthe_1_3_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "absinthe";
            version = "1.3.1";
            src = fetchHex {
              pkg = "absinthe";
              version = "1.3.1";
              sha256 =
                "aee397de5a5d1446d4d47a670054a3aad0445b68fb81d88330c89a696a4849b4";
            };

            meta = {
              description = ''GraphQL for Elixir'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/absinthe-graphql/absinthe";
            };
          } // packageOverrides)
      ) {};

    absinthe = absinthe_1_3_1;

    absinthe_ecto_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          absinthe_1_3_1,
          ecto_2_1_4
        }:
          buildMix ({
            name = "absinthe_ecto";
            version = "0.1.0";
            src = fetchHex {
              pkg = "absinthe_ecto";
              version = "0.1.0";
              sha256 =
                "d99ab00215c280a530f02bef6140774257e8524753a6d2b2a125b8dc693d7ecd";
            };
            beamDeps  = [ absinthe_1_3_1 ecto_2_1_4 ];

            meta = {
              description = ''GraphQL helpers for Absinthe'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/absinthe-graphql/absinthe_ecto";
            };
          } // packageOverrides)
      ) {};

    absinthe_ecto = absinthe_ecto_0_1_0;

    absinthe_plug_1_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          absinthe_1_1_7,
          plug_1_3_5
        }:
          buildMix ({
            name = "absinthe_plug";
            version = "1.0.0";
            src = fetchHex {
              pkg = "absinthe_plug";
              version = "1.0.0";
              sha256 =
                "08459823fe1fd4f0325a8bf0c937a4520583a5a26d73b193040ab30a1dfc0b33";
            };
            beamDeps  = [ absinthe_1_1_7 plug_1_3_5 ];

            meta = {
              description = ''Plug support for Absinthe, the GraphQL toolkit
                            for Elixir'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/absinthe-graphql/absinthe_plug";
            };
          } // packageOverrides)
      ) {};

    absinthe_plug_1_3_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          absinthe_1_3_1,
          plug_1_1_7
        }:
          buildMix ({
            name = "absinthe_plug";
            version = "1.3.1";
            src = fetchHex {
              pkg = "absinthe_plug";
              version = "1.3.1";
              sha256 =
                "5ce2c66c49bd017eb713b7953bc7c2c731f420d479725631e3d60dd047af4b5e";
            };
            beamDeps  = [ absinthe_1_3_1 plug_1_1_7 ];

            meta = {
              description = ''Plug support for Absinthe, the GraphQL toolkit
                            for Elixir'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/absinthe-graphql/absinthe_plug";
            };
          } // packageOverrides)
      ) {};

    absinthe_plug = absinthe_plug_1_3_1;

    absinthe_plug_cn_1_3_0_rc_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          absinthe_1_3_1,
          plug_1_1_7
        }:
          buildMix ({
            name = "absinthe_plug_cn";
            version = "1.3.0-rc.1";
            src = fetchHex {
              pkg = "absinthe_plug_cn";
              version = "1.3.0-rc.1";
              sha256 =
                "6105e3434dfd3b762e20a5729d632cc9711d691a23f9cd7924d9781c45732ea6";
            };
            beamDeps  = [ absinthe_1_3_1 plug_1_1_7 ];

            meta = {
              description = ''Plug support for Absinthe, the GraphQL toolkit
                            for Elixir'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/absinthe-graphql/absinthe_plug";
            };
          } // packageOverrides)
      ) {};

    absinthe_plug_cn = absinthe_plug_cn_1_3_0_rc_1;

    absinthe_relay_1_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          absinthe_1_3_1,
          ecto_1_0_1
        }:
          buildMix ({
            name = "absinthe_relay";
            version = "1.3.0";
            src = fetchHex {
              pkg = "absinthe_relay";
              version = "1.3.0";
              sha256 =
                "5c097920aaad94a66b29f9762f042faa69683ac2c5e0af0e36d6be994db5b572";
            };
            beamDeps  = [ absinthe_1_3_1 ecto_1_0_1 ];

            meta = {
              description = ''Relay framework support for Absinthe'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/absinthe-graphql/absinthe_relay";
            };
          } // packageOverrides)
      ) {};

    absinthe_relay = absinthe_relay_1_3_0;

    absinthe_relay_oxo_1_2_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          absinthe_1_3_0_rc_0,
          ecto_1_0_1
        }:
          buildMix ({
            name = "absinthe_relay_oxo";
            version = "1.2.1";
            src = fetchHex {
              pkg = "absinthe_relay_oxo";
              version = "1.2.1";
              sha256 =
                "174ce908f8a79e7d3fd1690fdae6484985e30451a92fcc20dee6be5cb237a81b";
            };
            beamDeps  = [ absinthe_1_3_0_rc_0 ecto_1_0_1 ];

            meta = {
              description = ''Relay framework support for Absinthe'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/absinthe-graphql/absinthe_relay";
            };
          } // packageOverrides)
      ) {};

    absinthe_relay_oxo = absinthe_relay_oxo_1_2_1;

    accent_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, plug_1_3_5 }:
          buildMix ({
            name = "accent";
            version = "0.1.1";
            src = fetchHex {
              pkg = "accent";
              version = "0.1.1";
              sha256 =
                "d2f713fc65c61c21e9372657a00260ec78d16809cbda184607ee52aca43a5a73";
            };
            beamDeps  = [ plug_1_3_5 ];

            meta = {
              description = ''Plug for converting JSON API keys to different
                            cases'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sticksnleaves/accent";
            };
          } // packageOverrides)
      ) {};

    accent = accent_0_1_1;

    accept_0_3_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "accept";
            version = "0.3.0";
            src = fetchHex {
              pkg = "accept";
              version = "0.3.0";
              sha256 =
                "3bf5e702fb0e1cedda86b11fb5cc56ecaef48f0575c7598a2e92773419a5bdeb";
            };

            buildPlugins  = [ coveralls ];


            meta = {
              description = ''Accept header(s) for Erlang/Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/deadtrickster/accept";
            };
          } // packageOverrides)
      ) {};

    accept_0_3_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "accept";
            version = "0.3.3";
            src = fetchHex {
              pkg = "accept";
              version = "0.3.3";
              sha256 =
                "9df23358b4d0c62d058fb84281aae5e7a850dcc923d4907d12b938b189e20208";
            };

            meta = {
              description = ''Accept header(s) for Erlang/Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/deadtrickster/accept";
            };
          } // packageOverrides)
      ) {};

    accept = accept_0_3_3;

    acceptor_pool_1_0_0_rc_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "acceptor_pool";
            version = "1.0.0-rc.0";
            src = fetchHex {
              pkg = "acceptor_pool";
              version = "1.0.0-rc.0";
              sha256 =
                "8552d92e7bc2252c4f2e6a440c8307c447e96a89d9739c093a8a913fed3914c4";
            };

            meta = {
              description = ''A tcp acceptor pool library'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/fishcakez/acceptor_pool";
            };
          } // packageOverrides)
      ) {};

    acceptor_pool = acceptor_pool_1_0_0_rc_0;

    access_token_extractor_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_0_4,
          plug_1_3_5
        }:
          buildMix ({
            name = "access_token_extractor";
            version = "0.1.1";
            src = fetchHex {
              pkg = "access_token_extractor";
              version = "0.1.1";
              sha256 =
                "40f76799f8fbb5b03230b31d4d55c5a169e7c3ad82d776a9d87fe0c65c85396d";
            };
            beamDeps  = [ cowboy_1_0_4 plug_1_3_5 ];

            meta = {
              longDescription = ''Simple Plug to extract access_token from
                                request and add it to private map in Plug.Conn
                                struct.'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/rohanpujaris/access_token_extractor";
            };
          } // packageOverrides)
      ) {};

    access_token_extractor = access_token_extractor_0_1_1;

    accesslog_parser_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "accesslog_parser";
            version = "0.1.0";
            src = fetchHex {
              pkg = "accesslog_parser";
              version = "0.1.0";
              sha256 =
                "4732f65a7cb8c047e0d93ba389a87e7cab0689c42ab51a210286d14afcfb2355";
            };

            meta = {
              description = ''Access Log Parser'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/elixytics/accesslog_parser";
            };
          } // packageOverrides)
      ) {};

    accesslog_parser = accesslog_parser_0_1_0;

    account_kit_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_1_0_2
        }:
          buildMix ({
            name = "account_kit";
            version = "0.1.0";
            src = fetchHex {
              pkg = "account_kit";
              version = "0.1.0";
              sha256 =
                "52c7a72b473c66be1de6605e1e51ed73faaa95a0997cb253bdba3abfae246457";
            };
            beamDeps  = [ httpoison_0_11_2 poison_1_0_2 ];

            meta = {
              description = ''Facebook Account Kit api client'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/bleacherreport/account_kit";
            };
          } // packageOverrides)
      ) {};

    account_kit = account_kit_0_1_0;

    accounting_0_5_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          oauther_1_1_0,
          poison_1_0_2
        }:
          buildMix ({
            name = "accounting";
            version = "0.5.0";
            src = fetchHex {
              pkg = "accounting";
              version = "0.5.0";
              sha256 =
                "d5c5da4925b23dfb814619d21c6e5e2192ff99894be3782651a3677d4f7b3c15";
            };
            beamDeps  = [ httpoison_0_11_2 oauther_1_1_0 poison_1_0_2 ];

            meta = {
              description = ''Accounting.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/verypossible/accounting";
            };
          } // packageOverrides)
      ) {};

    accounting = accounting_0_5_0;

    ace_0_7_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ace";
            version = "0.7.0";
            src = fetchHex {
              pkg = "ace";
              version = "0.7.0";
              sha256 =
                "7a4fa419fce977e7bc50e1502172c75858e975e206648947fef0b9461aa5da49";
            };

            meta = {
              longDescription = ''Easy TCP and TLS(ssl) servers. For a HTTP
                                webserver see
                                https://hex.pm/packages/ace_http.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/crowdhailer/ace";
            };
          } // packageOverrides)
      ) {};

    ace_0_9_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ace";
            version = "0.9.0";
            src = fetchHex {
              pkg = "ace";
              version = "0.9.0";
              sha256 =
                "6b297cde08ac4b221cfca0548b0bf3e2b66da9aa1af5034b8f01db07b06984bf";
            };

            meta = {
              longDescription = ''Easy TCP and TLS(ssl) servers. For a HTTP
                                webserver see
                                https://hex.pm/packages/ace_http.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/crowdhailer/ace";
            };
          } // packageOverrides)
      ) {};

    ace = ace_0_9_0;

    ace_http_0_4_5 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ace_0_9_0,
          http_status_0_2_1,
          raxx_0_11_1
        }:
          buildMix ({
            name = "ace_http";
            version = "0.4.5";
            src = fetchHex {
              pkg = "ace_http";
              version = "0.4.5";
              sha256 =
                "5e42ce12621887c2ee7e09def2bb19f29bd8729b639de11989778b8a8e304de6";
            };
            beamDeps  = [ ace_0_9_0 http_status_0_2_1 raxx_0_11_1 ];

            meta = {
              description = ''HTTP and HTTPS webservers built with the Ace
                            connection manager'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/CrowdHailer/Ace/tree/master/extensions/http(s)";
            };
          } // packageOverrides)
      ) {};

    ace_http = ace_http_0_4_5;

    acme_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_7_1,
          jose_1_8_4,
          poison_3_1_0
        }:
          buildMix ({
            name = "acme";
            version = "0.3.0";
            src = fetchHex {
              pkg = "acme";
              version = "0.3.0";
              sha256 =
                "ee7c010c286b299a1e0096f15891b78591bc4c70553a1b188849a62f76e7d4bc";
            };
            beamDeps  = [ hackney_1_7_1 jose_1_8_4 poison_3_1_0 ];

            meta = {
              description = ''Acme (Let`s Encrypt) Client for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sikanhe/acme";
            };
          } // packageOverrides)
      ) {};

    acme = acme_0_3_0;

    acs_ex_0_3_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          cwmp_ex_0_2_2,
          gproc_0_6_1,
          httpoison_0_11_2,
          plug_1_3_5,
          poison_2_2_0,
          poolboy_1_5_1,
          prometheus_ex_1_1_1,
          uuid_1_1_7
        }:
          buildMix ({
            name = "acs_ex";
            version = "0.3.4";
            src = fetchHex {
              pkg = "acs_ex";
              version = "0.3.4";
              sha256 =
                "d768f402c83ba7557732d04d6e680d8748cb4d26395101fa6a9501951c3c71e4";
            };
            beamDeps  = [
                          cowboy_1_1_2
                          cwmp_ex_0_2_2
                          gproc_0_6_1
                          httpoison_0_11_2
                          plug_1_3_5
                          poison_2_2_0
                          poolboy_1_5_1
                          prometheus_ex_1_1_1
                          uuid_1_1_7
                        ];

            meta = {
              description = ''An ACS server based on the cwmp_ex module'';
              license = stdenv.lib.licenses.artistic1;
              homepage = "https://github.com/Fullrate/acs_ex";
            };
          } // packageOverrides)
      ) {};

    acs_ex = acs_ex_0_3_4;

    active_0_9_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "active";
            version = "0.9.0";
            src = fetchHex {
              pkg = "active";
              version = "0.9.0";
              sha256 =
                "3ec6a0eda29137866674ddd56d44f6b0383fa3ec4480121639d2ef61b443ec28";
            };

            meta = {
              description = ''Erlang active reloader'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/synrc/active";
            };
          } // packageOverrides)
      ) {};

    active = active_0_9_0;

    adam7_0_4_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, apex_0_3_7 }:
          buildMix ({
            name = "adam7";
            version = "0.4.0";
            src = fetchHex {
              pkg = "adam7";
              version = "0.4.0";
              sha256 =
                "8b540817f2fa92ba4b198d42d1ee4af348ed1edf8bd02d69691e0d8bdbecdcee";
            };
            beamDeps  = [ apex_0_3_7 ];

            meta = {
              longDescription = ''Adam7 interlacing library for Elixir.
                                Primarily used for interlacing and
                                de-interlacing image data for PNGs.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/SenecaSystems/imagineer";
            };
          } // packageOverrides)
      ) {};

    adam7 = adam7_0_4_0;

    adap_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "adap";
            version = "0.0.1";
            src = fetchHex {
              pkg = "adap";
              version = "0.0.1";
              sha256 =
                "10679369764e2aa68560008c1f8bea40d5c715389e27e10b35b1ceda3fedadbb";
            };

            meta = {
              longDescription = '' Create a data stream across your information
                                systems to query, augment and transform data
                                according to Elixir matching rules. '';
              license = stdenv.lib.licenses.mit;
              homepage = "http://github.com/awetzel/adap";
            };
          } // packageOverrides)
      ) {};

    adap = adap_0_0_1;

    adapt_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          poison_2_2_0,
          porcelain_2_0_3
        }:
          buildMix ({
            name = "adapt";
            version = "0.1.0";
            src = fetchHex {
              pkg = "adapt";
              version = "0.1.0";
              sha256 =
                "ede602cf413a5947f1e01dc0ecbc4dc0a157dd04d9b21ca1a5ed33dafbbc40e0";
            };
            beamDeps  = [ poison_2_2_0 porcelain_2_0_3 ];

            meta = {
              longDescription = ''A wrapper of the Adapt Python Project. It
                                allows the processing of user input to extract
                                intentions in a machine readable way.'';
              license = stdenv.lib.licenses.gpl3;
              homepage = "https://github.com/bka9/elixir-adapt";
            };
          } // packageOverrides)
      ) {};

    adapt = adapt_0_1_0;

    addict_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          comeonin_2_6_0,
          cowboy_1_1_2,
          ecto_2_1_4,
          mailgun_0_1_2,
          phoenix_1_3_0_rc_2
        }:
          buildMix ({
            name = "addict";
            version = "0.3.0";
            src = fetchHex {
              pkg = "addict";
              version = "0.3.0";
              sha256 =
                "862df8d722cbf916df586439d0b5d6c6bc19c118fd8c0990c0807d90b536c2cd";
            };
            beamDeps  = [
                          comeonin_2_6_0
                          cowboy_1_1_2
                          ecto_2_1_4
                          mailgun_0_1_2
                          phoenix_1_3_0_rc_2
                        ];

            meta = {
              longDescription = ''Addict allows you to manage users on your
                                Phoenix app easily. Register, login, logout,
                                recover password and password updating is
                                available off-the-shelf.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/trenpixster/addict";
            };
          } // packageOverrides)
      ) {};

    addict = addict_0_3_0;

    addressBook_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "addressBook";
            version = "0.1.1";
            src = fetchHex {
              pkg = "addressBook";
              version = "0.1.1";
              sha256 =
                "35525566e6449015641058e1b4f85a237008207db5c0d7f0adfc7c72fb827a45";
            };

            meta = {
              description = ''Simple package for managing address book.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/maxiwoj/AddressBook";
            };
          } // packageOverrides)
      ) {};

    addressBook = addressBook_0_1_1;

    address_us_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "address_us";
            version = "0.2.1";
            src = fetchHex {
              pkg = "address_us";
              version = "0.2.1";
              sha256 =
                "faedb743763a63a61da7d02076cb0b09eb540175a89048ea006a97302d9ebc23";
            };

            meta = {
              description = ''Library for parsing US Addresses into their
                            individual parts.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/smashedtoatoms/address_us";
            };
          } // packageOverrides)
      ) {};

    address_us = address_us_0_2_1;

    admiral_stats_parser_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          poison_3_1_0,
          timex_3_1_15
        }:
          buildMix ({
            name = "admiral_stats_parser";
            version = "0.1.0";
            src = fetchHex {
              pkg = "admiral_stats_parser";
              version = "0.1.0";
              sha256 =
                "026fa8f5d17b2edd5f8ba739a77f50b9184d00a6cf3678ef2622d58d262624d1";
            };
            beamDeps  = [ poison_3_1_0 timex_3_1_15 ];

            meta = {
              longDescription = ''Parser for admiral stats JSON data exported
                                from kancolle-arcade.net (Elixir version)'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/muziyoshiz/admiral_stats_parser_ex";
            };
          } // packageOverrides)
      ) {};

    admiral_stats_parser = admiral_stats_parser_0_1_0;

    ads_client_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ads_client";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ads_client";
              version = "0.1.0";
              sha256 =
                "2ca312f9f620222003028602d7a4515343e840fa3e477cc4fd0c5ab0aa96552d";
            };

            meta = {
              description = ''a simple ams/ads implementation'';
              license = stdenv.lib.licenses.free;
            };
          } // packageOverrides)
      ) {};

    ads_client = ads_client_0_1_0;

    ads_server_0_1_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ads_client_0_1_0,
          distillery_1_4_0,
          gproc_0_6_1,
          jsx_2_8_2,
          ranch_1_3_2
        }:
          buildMix ({
            name = "ads_server";
            version = "0.1.4";
            src = fetchHex {
              pkg = "ads_server";
              version = "0.1.4";
              sha256 =
                "4dc5d0869b45c130c493a3b322c4fc4183ca0e71a95add9e5af6b3d10efbc7a5";
            };
            beamDeps  = [
                          ads_client_0_1_0
                          distillery_1_4_0
                          gproc_0_6_1
                          jsx_2_8_2
                          ranch_1_3_2
                        ];

            meta = {
              description = ''a ads server implementation in elixir'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/binder-lukas/elixir_ads_server";
            };
          } // packageOverrides)
      ) {};

    ads_server = ads_server_0_1_4;

    adt_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "adt";
            version = "0.0.2";
            src = fetchHex {
              pkg = "adt";
              version = "0.0.2";
              sha256 =
                "a5b310b1ed8093b0f786ca4facdd0c9ff073acf3e47db6a9771005b77e0d7259";
            };

            meta = {
              description = ''A light ADT module for Elixir.'';

            };
          } // packageOverrides)
      ) {};

    adt = adt_0_0_2;

    aeacus_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, comeonin_1_6_0 }:
          buildMix ({
            name = "aeacus";
            version = "0.3.0";
            src = fetchHex {
              pkg = "aeacus";
              version = "0.3.0";
              sha256 =
                "3cc138cfc7c508cfd85afddd0881632dde2e663d222c9e3749fae8c80ebb2c0b";
            };
            beamDeps  = [ comeonin_1_6_0 ];

            meta = {
              longDescription = ''A simple, secure, and highly configurable
                                Elixir identity [username | email | id |
                                etc.]/password authentication module; Compatible
                                with Ecto.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/zmoshansky/aeacus";
            };
          } // packageOverrides)
      ) {};

    aeacus = aeacus_0_3_0;

    aerfoirt_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_9_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "aerfoirt";
            version = "0.0.2";
            src = fetchHex {
              pkg = "aerfoirt";
              version = "0.0.2";
              sha256 =
                "796b77822b4da16d859c6dac6b0fc7203c913d29438f4e4454a8f45bcac440f8";
            };
            beamDeps  = [ httpoison_0_9_2 poison_2_2_0 ];

            meta = {
              description = ''Aerfoirt is a library for airport data.'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    aerfoirt = aerfoirt_0_0_2;

    aes_ctr_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "aes_ctr";
            version = "0.2.0";
            src = fetchHex {
              pkg = "aes_ctr";
              version = "0.2.0";
              sha256 =
                "1f1f87ea9b73de61286fa6864132c945314c650dcec2c456facb7c7cc1d78db0";
            };

            meta = {
              description = ''AES cipher in CTR mode.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/anoskov/aes-ctr-ex";
            };
          } // packageOverrides)
      ) {};

    aes_ctr = aes_ctr_0_2_0;

    aescmac_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "aescmac";
            version = "0.0.1";
            src = fetchHex {
              pkg = "aescmac";
              version = "0.0.1";
              sha256 =
                "8ded8ed61cb3a6a1185274836eb689005c423acb87240c1399879ab601146693";
            };

            meta = {
              description = ''AES CMAC (rfc 4493) in Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kleinernik/elixir-aes-cmac";
            };
          } // packageOverrides)
      ) {};

    aescmac = aescmac_0_0_1;

    affine_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, matrix_0_3_2 }:
          buildMix ({
            name = "affine";
            version = "0.1.0";
            src = fetchHex {
              pkg = "affine";
              version = "0.1.0";
              sha256 =
                "6edcb7db8cd24bec96727d1e62b7d4b08c0482b204fabda2ea529d9b550e07ff";
            };
            beamDeps  = [ matrix_0_3_2 ];

            meta = {
              description = ''Affine Transform Library'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/bengtson/affine";
            };
          } // packageOverrides)
      ) {};

    affine = affine_0_1_0;

    agala_1_0_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          gproc_0_6_1,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "agala";
            version = "1.0.3";
            src = fetchHex {
              pkg = "agala";
              version = "1.0.3";
              sha256 =
                "4c8370ab2117b08cd0fddec1496b4a695a9090068cb47c65de92ac1879f62e18";
            };
            beamDeps  = [ gproc_0_6_1 httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''Full featured Telegram bot framework.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/virviil/agala";
            };
          } // packageOverrides)
      ) {};

    agala = agala_1_0_3;

    agent_0_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "agent";
            version = "0.1.0";
            src = fetchHex {
              pkg = "agent";
              version = "0.1.0";
              sha256 =
                "cee374035f2b99bf1f8ad0c2d129a5af32753e489c2df9389426ef4bc0bc5b2f";
            };

            meta = {
              description = ''Simple Agent Implementation (Elixir Agent
                            equivalent)'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/savonarola/agent";
            };
          } // packageOverrides)
      ) {};

    agent = agent_0_1_0;

    agentex_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          amnesia_0_2_7,
          gen_stage_0_12_0,
          json_0_3_3,
          poolboy_1_5_1
        }:
          buildMix ({
            name = "agentex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "agentex";
              version = "0.1.0";
              sha256 =
                "52b3c7e7226fe7cfd90b9667429ab03ec301a449dfcb3288f2b6a6c9c2e398c3";
            };
            beamDeps  = [
                          amnesia_0_2_7
                          gen_stage_0_12_0
                          json_0_3_3
                          poolboy_1_5_1
                        ];

            meta = {
              longDescription = ''Distributed `Agent` implementation, providing
                                multi-node agents on top of Mnesia.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/am-kantox/agentex";
            };
          } // packageOverrides)
      ) {};

    agentex = agentex_0_1_0;

    aggregate_0_0_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "aggregate";
            version = "0.0.5";
            src = fetchHex {
              pkg = "aggregate";
              version = "0.0.5";
              sha256 =
                "477730a79a0453fe2589c0f72b812edfbed244ca0497892eb839c4733a351f6f";
            };

            meta = {
              description = ''Aggregate from DDD. Perfect fit with Extreme
                            project'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/burmajam/gen_aggregate";
            };
          } // packageOverrides)
      ) {};

    aggregate = aggregate_0_0_5;

    ago_times_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ecto_2_1_4 }:
          buildMix ({
            name = "ago_times";
            version = "0.1.1";
            src = fetchHex {
              pkg = "ago_times";
              version = "0.1.1";
              sha256 =
                "cfe0d1b11aa9c92a2b2ff11c9dc75f0ef5e1ada206b33426b8b98e136f0973e1";
            };
            beamDeps  = [ ecto_2_1_4 ];

            meta = {
              description = ''A library to easily create \"ago\" times.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/vfsoraki/ago-times";
            };
          } // packageOverrides)
      ) {};

    ago_times = ago_times_0_1_1;

    ahab_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ahab";
            version = "0.1.1";
            src = fetchHex {
              pkg = "ahab";
              version = "0.1.1";
              sha256 =
                "c981c2f62dccd15a055083f9bc088aa0e4a029625ef9aa45104c4ba0ead12bd2";
            };

            meta = {
              description = ''A lightweight, low latency TCP acceptor pool for
                            Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/jquadrin/ahab";
            };
          } // packageOverrides)
      ) {};

    ahab = ahab_0_1_1;

    aho_corasick_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "aho_corasick";
            version = "0.0.1";
            src = fetchHex {
              pkg = "aho_corasick";
              version = "0.0.1";
              sha256 =
                "c4ed4600688d6246a2abde2313fe1c686b153a09be0b622a44b6e669098adf95";
            };

            meta = {
              longDescription = ''Aho-Corasick algorithm, implemented in Elixir
                                using Erlang`s :digraph for the graph
                                structure'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jeffgran/aho_corasick.ex";
            };
          } // packageOverrides)
      ) {};

    aho_corasick = aho_corasick_0_0_1;

    ailuropoda_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, gb2260_0_6_1 }:
          buildMix ({
            name = "ailuropoda";
            version = "0.2.0";
            src = fetchHex {
              pkg = "ailuropoda";
              version = "0.2.0";
              sha256 =
                "d2edb0ecf70c49ac5c06db378a04de6a9ae2dcf4891a34d8d136b628ca9e3e74";
            };
            beamDeps  = [ gb2260_0_6_1 ];

            meta = {
              description = ''Ailuropoda is Chinese Personal ID Card Validator
                            for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ritou/elixir-ailuropoda";
            };
          } // packageOverrides)
      ) {};

    ailuropoda = ailuropoda_0_2_0;

    airbax_0_0_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_8_6,
          poison_1_0_2
        }:
          buildMix ({
            name = "airbax";
            version = "0.0.4";
            src = fetchHex {
              pkg = "airbax";
              version = "0.0.4";
              sha256 =
                "61fccc30a314ed050254beab0ecfcd2a0c65ba8023202ef89a6c1eab2f94e044";
            };
            beamDeps  = [ hackney_1_8_6 poison_1_0_2 ];

            meta = {
              description = ''Exception tracking from Elixir to Airbrake'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/adjust/airbax";
            };
          } // packageOverrides)
      ) {};

    airbax = airbax_0_0_4;

    airbrake_0_5_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "airbrake";
            version = "0.5.1";
            src = fetchHex {
              pkg = "airbrake";
              version = "0.5.1";
              sha256 =
                "8c8f96ae4f1b09ff6afd2406218f84a37ec0ef9879c32842d1166170ca402e30";
            };
            beamDeps  = [ httpoison_0_11_2 poison_2_2_0 ];

            meta = {
              longDescription = ''The first Elixir notifier to the
                                Airbrake/Errbit. System-wide error reporting
                                enriched with the information from Plug and
                                Phoenix channels.'';
              license = stdenv.lib.licenses.lpgl3;
              homepage = "https://github.com/romul/airbrake-elixir";
            };
          } // packageOverrides)
      ) {};

    airbrake = airbrake_0_5_1;

    airbrake_plug_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, airbrake_0_5_1 }:
          buildMix ({
            name = "airbrake_plug";
            version = "0.1.1";
            src = fetchHex {
              pkg = "airbrake_plug";
              version = "0.1.1";
              sha256 =
                "2560f8b830e94b09788952165cd3053b47106d4afebf547dc370d7f307e804b9";
            };
            beamDeps  = [ airbrake_0_5_1 ];

            meta = {
              description = ''Airbrake reporter for Elixir`s Plug'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/romul/airbrake_plug";
            };
          } // packageOverrides)
      ) {};

    airbrake_plug = airbrake_plug_0_1_1;

    airbrakex_0_1_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_1_0_2
        }:
          buildMix ({
            name = "airbrakex";
            version = "0.1.3";
            src = fetchHex {
              pkg = "airbrakex";
              version = "0.1.3";
              sha256 =
                "bd21ec5f8ea39986719ff3c75d298913b936a2f33ba474799c264b11b627cfd2";
            };
            beamDeps  = [ httpoison_0_11_2 poison_1_0_2 ];

            meta = {
              description = ''Airbrake Elixir Notifier'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/fazibear/airbrakex";
            };
          } // packageOverrides)
      ) {};

    airbrakex = airbrakex_0_1_3;

    airbrakify_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          plug_1_3_5,
          poison_3_1_0
        }:
          buildMix ({
            name = "airbrakify";
            version = "0.0.2";
            src = fetchHex {
              pkg = "airbrakify";
              version = "0.0.2";
              sha256 =
                "8b88178f12eb1e9e100b0247c14dedb48cc4607b0f823bd475045599c0444b92";
            };
            beamDeps  = [ httpoison_0_11_2 plug_1_3_5 poison_3_1_0 ];

            meta = {
              longDescription = ''A simple Airbrake/Errbit library for
                                Elixir/Phoenix projects. Currently only supports
                                error/exception notifications via a Plug.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Diamond/airbrakify";
            };
          } // packageOverrides)
      ) {};

    airbrakify = airbrakify_0_0_2;

    airports_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, csv_1_4_4 }:
          buildMix ({
            name = "airports";
            version = "0.1.0";
            src = fetchHex {
              pkg = "airports";
              version = "0.1.0";
              sha256 =
                "3399542a4e00553e759f802bb7b64bbeb5d994dd2df833d2055ebe26d3227a32";
            };
            beamDeps  = [ csv_1_4_4 ];

            meta = {
              longDescription = ''Airports is a collection of all known
                                airports. Data source is
                                https://openflights.org/data.html'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nerds-and-company/airports";
            };
          } // packageOverrides)
      ) {};

    airports = airports_0_1_0;

    alambic_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "alambic";
            version = "0.1.0";
            src = fetchHex {
              pkg = "alambic";
              version = "0.1.0";
              sha256 =
                "04dc4cc88d56539ec4006a84668186501be9be4c369f145af6a606bb63d97ce0";
            };

            meta = {
              longDescription = ''A collection of small elixir utilities.
                                Semaphore: quick way of limiting access to a
                                resource CountDown: quick way of counting fan
                                in/out events'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/sdanzan/alambic";
            };
          } // packageOverrides)
      ) {};

    alambic = alambic_0_1_0;

    alarm_clock_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, calendar_0_17_2 }:
          buildMix ({
            name = "alarm_clock";
            version = "0.1.0";
            src = fetchHex {
              pkg = "alarm_clock";
              version = "0.1.0";
              sha256 =
                "6bc73f056e04dce4bb6403ee8f1227ddb0f3563f374716fa8f29f83b06fdd7ed";
            };
            beamDeps  = [ calendar_0_17_2 ];

            meta = {
              longDescription = '':timer.send_after/3 persistable. Allows
                                scheduling message delivery to specified process
                                in miliseconds or at specified
                                Calendar.DateTime. AlarmClock will make sure
                                that messages are delivered using retry
                                mechanism and after it`s own crash, since all
                                messages can be persisted.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/burmajam/alarm_clock";
            };
          } // packageOverrides)
      ) {};

    alarm_clock = alarm_clock_0_1_0;

    alarm_clock_pg_0_0_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          alarm_clock_0_1_0,
          calecto_0_16_2,
          ecto_1_0_1,
          postgrex_1_0_0_rc_1
        }:
          buildMix ({
            name = "alarm_clock_pg";
            version = "0.0.4";
            src = fetchHex {
              pkg = "alarm_clock_pg";
              version = "0.0.4";
              sha256 =
                "3288617c1ff7525fe8b7ac0c914494a19e514394aa2a1b8463250249987e777a";
            };
            beamDeps  = [
                          alarm_clock_0_1_0
                          calecto_0_16_2
                          ecto_1_0_1
                          postgrex_1_0_0_rc_1
                        ];

            meta = {
              description = ''Postgres adapter for :alarm_clock'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/burmajam/alarm_clock_pg";
            };
          } // packageOverrides)
      ) {};

    alarm_clock_pg = alarm_clock_pg_0_0_4;

    alchemic_avatar_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "alchemic_avatar";
            version = "0.1.2";
            src = fetchHex {
              pkg = "alchemic_avatar";
              version = "0.1.2";
              sha256 =
                "329ae15eb6a304d6d425f86e6890f1d5c3901475b3fbc9eb07ad03f1394144b4";
            };

            meta = {
              description = ''Creating letter avatar from user`s name(or any
                            other strong / character).'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zhangsoledad/alchemic_avatar";
            };
          } // packageOverrides)
      ) {};

    alchemic_avatar = alchemic_avatar_0_1_2;

    alchemic_pinyin_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "alchemic_pinyin";
            version = "0.1.2";
            src = fetchHex {
              pkg = "alchemic_pinyin";
              version = "0.1.2";
              sha256 =
                "1fbd8300984699370b4a97ab10b64023494d2f9755eddf0abe1dcd9a5f2498c6";
            };

            meta = {
              description = ''中文汉字转拼音.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zhangsoledad/alchemic_pinyin";
            };
          } // packageOverrides)
      ) {};

    alchemic_pinyin = alchemic_pinyin_0_1_2;

    alchemist_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "alchemist";
            version = "0.0.2";
            src = fetchHex {
              pkg = "alchemist";
              version = "0.0.2";
              sha256 =
                "095ad9b47258b2d482b782a5794ed800df1c4024abbc126f347738be72a1aa51";
            };

            meta = {
              description = ''Carefully refactor critical paths'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/jkakar/alchemist";
            };
          } // packageOverrides)
      ) {};

    alchemist = alchemist_0_0_2;

    alchemy_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, uuid_1_1_7 }:
          buildMix ({
            name = "alchemy";
            version = "0.0.1";
            src = fetchHex {
              pkg = "alchemy";
              version = "0.0.1";
              sha256 =
                "109ce3f83d596a6ab9a947f472516f87da7b0df823fe2d91e27bc6594a305c3d";
            };
            beamDeps  = [ uuid_1_1_7 ];

            meta = {
              description = ''Perform experiments in production'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/keathley/alchemy";
            };
          } // packageOverrides)
      ) {};

    alchemy = alchemy_0_0_1;

    ale_axp209_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, elixir_ale_0_5_7 }:
          buildMix ({
            name = "ale_axp209";
            version = "0.2.0";
            src = fetchHex {
              pkg = "ale_axp209";
              version = "0.2.0";
              sha256 =
                "bcfcb4c9a52c620949c1eb2655c34f105ad326b324656b3bffcf8ab9655dda8e";
            };
            beamDeps  = [ elixir_ale_0_5_7 ];

            meta = {
              description = ''AXP209 PMIC interface for Elixir (C.H.I.P. Power
                            Management IC)'';
              license = stdenv.lib.licenses.unlicense;
              homepage = "https://github.com/tht/ale_axp209";
            };
          } // packageOverrides)
      ) {};

    ale_axp209 = ale_axp209_0_2_0;

    alembic_3_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_4,
          poison_1_0_2
        }:
          buildMix ({
            name = "alembic";
            version = "3.3.0";
            src = fetchHex {
              pkg = "alembic";
              version = "3.3.0";
              sha256 =
                "2f440003fcd7713bc67158a7d67ae8bd0619ccf5570a5d0050ca658995ed5065";
            };
            beamDeps  = [ ecto_2_1_4 poison_1_0_2 ];

            meta = {
              longDescription = ''A JSONAPI 1.0 library fully-tested against
                                all jsonapi.org examples. The library generates
                                JSONAPI errors documents whenever it encounters
                                a malformed JSONAPI document, so that servers
                                don`t need to worry about JSONAPI format
                                errors.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/C-S-D/alembic";
            };
          } // packageOverrides)
      ) {};

    alembic = alembic_3_3_0;

    aleppo_0_9_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "aleppo";
            version = "0.9.0";
            src = fetchHex {
              pkg = "aleppo";
              version = "0.9.0";
              sha256 =
                "2f360631d64da53f40621714e157fd33805a95d0160d5c62fcfb3e132986ce71";
            };

            meta = {
              description = ''Aleppo: ALternative Erlang Pre-ProcessOr'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/ErlyORM/aleppo";
            };
          } // packageOverrides)
      ) {};

    aleppo = aleppo_0_9_0;

    alexa_0_1_15 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_2_2_0 }:
          buildMix ({
            name = "alexa";
            version = "0.1.15";
            src = fetchHex {
              pkg = "alexa";
              version = "0.1.15";
              sha256 =
                "1e9ff2601f6158f84791c72110daec33873985c47de01a3c61a3db0c9a5dcba8";
            };
            beamDeps  = [ poison_2_2_0 ];

            meta = {
              description = ''Framework for implementing an Amazon Alexa
                            Skill.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/col/alexa";
            };
          } // packageOverrides)
      ) {};

    alexa = alexa_0_1_15;

    alexa_plug_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, plug_1_2_0_rc_0 }:
          buildMix ({
            name = "alexa_plug";
            version = "0.2.0";
            src = fetchHex {
              pkg = "alexa_plug";
              version = "0.2.0";
              sha256 =
                "a78f6fa5e3ba33ce0943f4cb96d6cfcc9b36637a4575314469c8a0d45fff40d0";
            };
            beamDeps  = [ plug_1_2_0_rc_0 ];

            meta = {
              longDescription = ''A simple set of plugs and utilities for
                                interfacing with the Amazon Echo and the Alexa
                                Skills Kit.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jordantdavis/alexa_plug";
            };
          } // packageOverrides)
      ) {};

    alexa_plug = alexa_plug_0_2_0;

    alexa_request_verifier_0_1_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          con_cache_0_12_0,
          phoenix_1_3_0_rc_2
        }:
          buildMix ({
            name = "alexa_request_verifier";
            version = "0.1.4";
            src = fetchHex {
              pkg = "alexa_request_verifier";
              version = "0.1.4";
              sha256 =
                "a085bd903094b0eeea0852dd981b9aaf602ba7524bd912a5012a1bb0be9957b7";
            };
            beamDeps  = [ con_cache_0_12_0 phoenix_1_3_0_rc_2 ];

            meta = {
              longDescription = ''Alexa Request Verifier is a library that
                                handles all of the certificate and request
                                verification for Alexa Requests for certified
                                skills. (See the Alexa Skills Documentation for
                                more information).'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/grahac/alexa_request_verifier";
            };
          } // packageOverrides)
      ) {};

    alexa_request_verifier = alexa_request_verifier_0_1_4;

    alexa_verifier_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_9_2,
          plug_1_2_0_rc_0,
          porcelain_2_0_3,
          timex_3_0_5
        }:
          buildMix ({
            name = "alexa_verifier";
            version = "0.1.0";
            src = fetchHex {
              pkg = "alexa_verifier";
              version = "0.1.0";
              sha256 =
                "69f1ce5b1a713782cb9a00f9b31903746cd8e902ad6a4dd3d3cfea4ce195717e";
            };
            beamDeps  = [
                          httpoison_0_9_2
                          plug_1_2_0_rc_0
                          porcelain_2_0_3
                          timex_3_0_5
                        ];

            meta = {
              description = ''A Plug to verify signatures for Amazon Alexa
                            requests'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/col/alexa_verifier";
            };
          } // packageOverrides)
      ) {};

    alexa_verifier = alexa_verifier_0_1_0;

    alexa_web_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          alexa_0_1_15,
          cowboy_1_1_2,
          plug_1_3_5
        }:
          buildMix ({
            name = "alexa_web";
            version = "0.0.2";
            src = fetchHex {
              pkg = "alexa_web";
              version = "0.0.2";
              sha256 =
                "e60a7fa60eb52bbb91e445cf0ee3781e0e2a148855befa638b274e6720421126";
            };
            beamDeps  = [ alexa_0_1_15 cowboy_1_1_2 plug_1_3_5 ];

            meta = {
              description = ''A web endpoint for deploying one or a collection
                            of Amazon Alexa Skills'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/col/alexa_web";
            };
          } // packageOverrides)
      ) {};

    alexa_web = alexa_web_0_0_2;

    alfred_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_3_1_0 }:
          buildMix ({
            name = "alfred";
            version = "0.1.2";
            src = fetchHex {
              pkg = "alfred";
              version = "0.1.2";
              sha256 =
                "5b5eb23aa4db878be4856e4ea307becb1b4d935f2480c9100b05002ba332f24e";
            };
            beamDeps  = [ poison_3_1_0 ];

            meta = {
              description = ''Library for integrating with Alfred:
                            http://www.alfredapp.com'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lee-dohm/alfred.ex";
            };
          } // packageOverrides)
      ) {};

    alfred = alfred_0_1_2;

    algae_0_12_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, quark_2_2_0 }:
          buildMix ({
            name = "algae";
            version = "0.12.1";
            src = fetchHex {
              pkg = "algae";
              version = "0.12.1";
              sha256 =
                "6055eaeff4164a33e0a5b606950b4242a48b4816e3815dfefaa0c5d5997d7148";
            };
            beamDeps  = [ quark_2_2_0 ];

            meta = {
              description = ''Bootstrapped algebraic data types for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/expede/algae";
            };
          } // packageOverrides)
      ) {};

    algae = algae_0_12_1;

    algolia_0_6_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_6_6,
          poison_1_0_2
        }:
          buildMix ({
            name = "algolia";
            version = "0.6.0";
            src = fetchHex {
              pkg = "algolia";
              version = "0.6.0";
              sha256 =
                "0475ef4332db2d70528ea9ce78f5f2a8a7c350739df299d57aa9eabc0da17a28";
            };
            beamDeps  = [ hackney_1_6_6 poison_1_0_2 ];

            meta = {
              description = ''Elixir implementation of Algolia Search API'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/sikanhe/algolia-elixir";
            };
          } // packageOverrides)
      ) {};

    algolia = algolia_0_6_0;

    alice_0_3_6 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          poison_2_2_0,
          poolboy_1_5_1,
          redix_0_3_6,
          slack_0_7_1
        }:
          buildMix ({
            name = "alice";
            version = "0.3.6";
            src = fetchHex {
              pkg = "alice";
              version = "0.3.6";
              sha256 =
                "f5c549f6983a5cc5f13320728315d101c8117f939df29e51c10ed3ff26809d54";
            };
            beamDeps  = [ poison_2_2_0 poolboy_1_5_1 redix_0_3_6 slack_0_7_1
                      ];

            meta = {
              description = ''A Slack bot'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/adamzaninovich/alice";
            };
          } // packageOverrides)
      ) {};

    alice = alice_0_3_6;

    alice_against_humanity_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, alice_0_3_6 }:
          buildMix ({
            name = "alice_against_humanity";
            version = "0.1.2";
            src = fetchHex {
              pkg = "alice_against_humanity";
              version = "0.1.2";
              sha256 =
                "aac5f049b59d0eaaea2383e1fc8fec28125b9a29ffda7fbe214d829738ad3935";
            };
            beamDeps  = [ alice_0_3_6 ];

            meta = {
              description = ''A handler for the Alice Slack bot. Play Cards
                            Against Humanity with Alice.'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/adamzaninovich/alice_against_humanity";
            };
          } // packageOverrides)
      ) {};

    alice_against_humanity = alice_against_humanity_0_1_2;

    alice_doge_me_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, alice_0_3_6 }:
          buildMix ({
            name = "alice_doge_me";
            version = "0.1.1";
            src = fetchHex {
              pkg = "alice_doge_me";
              version = "0.1.1";
              sha256 =
                "cabb1d05ab0887c46e7e88803d5bc9234158629daae60677f04cb6512d7e920d";
            };
            beamDeps  = [ alice_0_3_6 ];

            meta = {
              description = ''This handler will allow Alice to create Doge
                            images with user input.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/alice-bot/alice_doge_me/";
            };
          } // packageOverrides)
      ) {};

    alice_doge_me = alice_doge_me_0_1_1;

    alice_google_images_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, alice_0_3_6 }:
          buildMix ({
            name = "alice_google_images";
            version = "0.1.3";
            src = fetchHex {
              pkg = "alice_google_images";
              version = "0.1.3";
              sha256 =
                "04b4e23c44a67c032c1ac8e2da4ca0fca03ec20cf207b4cb40eba0cb17e975e8";
            };
            beamDeps  = [ alice_0_3_6 ];

            meta = {
              description = ''A handler for the Alice Slack bot. Get random
                            images from Google'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/adamzaninovich/alice_google_images";
            };
          } // packageOverrides)
      ) {};

    alice_google_images = alice_google_images_0_1_3;

    alice_karma_0_3_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, alice_0_3_6 }:
          buildMix ({
            name = "alice_karma";
            version = "0.3.1";
            src = fetchHex {
              pkg = "alice_karma";
              version = "0.3.1";
              sha256 =
                "e516d481c660e2b80f8e5277b285da52bbb304fcfb6c4eb8a46d0c12adc91577";
            };
            beamDeps  = [ alice_0_3_6 ];

            meta = {
              longDescription = ''A handler for the Alice Slack bot. Allows
                                Alice to keep track of karma points for
                                arbitrary terms.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/adamzaninovich/alice_karma";
            };
          } // packageOverrides)
      ) {};

    alice_karma = alice_karma_0_3_1;

    alice_personable_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, alice_0_3_6 }:
          buildMix ({
            name = "alice_personable";
            version = "0.0.2";
            src = fetchHex {
              pkg = "alice_personable";
              version = "0.0.2";
              sha256 =
                "fb80938b27c3ae374b3d0bf284de9902d65e85dd8da2d4c80238a03b819b8aad";
            };
            beamDeps  = [ alice_0_3_6 ];

            meta = {
              description = ''A plugin for the Alice chat bot to make her seem
                            a bit more human.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mattr-/alice_personable";
            };
          } // packageOverrides)
      ) {};

    alice_personable = alice_personable_0_0_2;

    alice_reddit_0_0_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          alice_0_3_6,
          readit_0_0_4
        }:
          buildMix ({
            name = "alice_reddit";
            version = "0.0.4";
            src = fetchHex {
              pkg = "alice_reddit";
              version = "0.0.4";
              sha256 =
                "0da0b9cf0baf4d88a53d8fc40d91e106d74c1eee191afe7e4a0155c01ff6bcc9";
            };
            beamDeps  = [ alice_0_3_6 readit_0_0_4 ];

            meta = {
              description = ''Alice does Reddit'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/adamzaninovich/alice_reddit";
            };
          } // packageOverrides)
      ) {};

    alice_reddit = alice_reddit_0_0_4;

    alice_shizzle_0_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          alice_0_3_6,
          gizoogle_0_0_2
        }:
          buildMix ({
            name = "alice_shizzle";
            version = "0.1.2";
            src = fetchHex {
              pkg = "alice_shizzle";
              version = "0.1.2";
              sha256 =
                "c98481d59c004f905958b9412bff1d288a649cf373afb4fea307222af2597c19";
            };
            beamDeps  = [ alice_0_3_6 gizoogle_0_0_2 ];

            meta = {
              longDescription = ''A handlez fo` tha Alice Slack bot fo` realz.
                                Uses Gizoogle ta allow you ta drop a rhyme like
                                a thug n` retrieve links fo` translated sitez'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/notdevinclark/alice_shizzle";
            };
          } // packageOverrides)
      ) {};

    alice_shizzle = alice_shizzle_0_1_2;

    alice_tielurs_heart_rate_0_0_6 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          alice_0_3_6,
          httpoison_0_11_2,
          timex_3_0_5
        }:
          buildMix ({
            name = "alice_tielurs_heart_rate";
            version = "0.0.6";
            src = fetchHex {
              pkg = "alice_tielurs_heart_rate";
              version = "0.0.6";
              sha256 =
                "16b6839941ce82d091e9e29d5e6e2c404b03bb29eb5c40fbeefecb45cbe0d649";
            };
            beamDeps  = [ alice_0_3_6 httpoison_0_11_2 timex_3_0_5 ];

            meta = {
              description = ''A handler for the Alice Slack bot. Allows Alice
                            to check Tielur`s heart rate'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tielur/alice_tielurs_heart_rate";
            };
          } // packageOverrides)
      ) {};

    alice_tielurs_heart_rate = alice_tielurs_heart_rate_0_0_6;

    alice_xkcd_0_0_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          alice_0_3_6,
          xkcd_0_0_2
        }:
          buildMix ({
            name = "alice_xkcd";
            version = "0.0.4";
            src = fetchHex {
              pkg = "alice_xkcd";
              version = "0.0.4";
              sha256 =
                "530752d7c1504457ba402576e6fd9f3c60663994d4ff0cd8e831782c2add5aa6";
            };
            beamDeps  = [ alice_0_3_6 xkcd_0_0_2 ];

            meta = {
              longDescription = ''A handler for the Alice Slack bot. Retrieves
                                latest, specific and random XKCD comics.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/notdevinclark/alice_xkcd";
            };
          } // packageOverrides)
      ) {};

    alice_xkcd = alice_xkcd_0_0_4;

    alipay_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_9_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "alipay";
            version = "0.0.2";
            src = fetchHex {
              pkg = "alipay";
              version = "0.0.2";
              sha256 =
                "5e6d77d8dcabfb5f1c8710e8d27d52dfaa2e4132d676b3114872830538b1b104";
            };
            beamDeps  = [ httpoison_0_9_2 poison_3_1_0 ];

            meta = {
              description = ''This is Alipay Elixir SDK.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/davidqhr/elixir-alipay";
            };
          } // packageOverrides)
      ) {};

    alipay = alipay_0_0_2;

    aliqin_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_8_6,
          httpoison_0_11_2,
          poison_3_1_0,
          timex_3_1_15
        }:
          buildMix ({
            name = "aliqin";
            version = "0.1.1";
            src = fetchHex {
              pkg = "aliqin";
              version = "0.1.1";
              sha256 =
                "429e8268d47b231e1e4fee759a8408f5f03cb616ff1b5f46af63df548c6baa57";
            };
            beamDeps  = [
                          hackney_1_8_6
                          httpoison_0_11_2
                          poison_3_1_0
                          timex_3_1_15
                        ];

            meta = {
              description = ''Aliqin For Elixir SDK, 阿里大于'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gialib/aliqin-elixir";
            };
          } // packageOverrides)
      ) {};

    aliqin = aliqin_0_1_1;

    allowed_hosts_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_0_4,
          plug_1_3_5
        }:
          buildMix ({
            name = "allowed_hosts";
            version = "0.1.0";
            src = fetchHex {
              pkg = "allowed_hosts";
              version = "0.1.0";
              sha256 =
                "8b444b6a721037f7fa23edb0133bd818c277ed91c03e0af2e81f2627821723c8";
            };
            beamDeps  = [ cowboy_1_0_4 plug_1_3_5 ];

            meta = {
              description = ''Elixir plug to protect your APIs from Host header
                            attacks.'';
              license = stdenv.lib.licenses.mit;
              homepage = "http://github.com/imanhodjaev/allowed_hosts";
            };
          } // packageOverrides)
      ) {};

    allowed_hosts = allowed_hosts_0_1_0;

    alphabetify_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "alphabetify";
            version = "0.1.0";
            src = fetchHex {
              pkg = "alphabetify";
              version = "0.1.0";
              sha256 =
                "784d75e25b326385eb03df7ca4886fe97596ea78a631723c24bf9a0504d58aa0";
            };

            meta = {
              longDescription = ''Create an alphabetical hash. Taking an
                                existing alphabetic hash (of any length), will
                                return the next hash in sequence. If all
                                characters in hash are rolled over, will append
                                a new char (increase the length by 1.) eg.
                                `ZZZZ` -> `AAAAA` eg. `AAAZ` -> `AABA`'';
              license = stdenv.lib.licenses.gpl3;
              homepage = "https://github.com/supersimple/alphabetify-ex";
            };
          } // packageOverrides)
      ) {};

    alphabetify = alphabetify_0_1_0;

    alphanumeric_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "alphanumeric";
            version = "0.1.0";
            src = fetchHex {
              pkg = "alphanumeric";
              version = "0.1.0";
              sha256 =
                "6f1908d53dd07c927415f734f161521c4c7dc7fa40c98b62117fd70edf3e459c";
            };

            meta = {
              description = ''Convert 62 decimal number tools. Integer to
                            String and String to Integer.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hirocaster/alphanumeric";
            };
          } // packageOverrides)
      ) {};

    alphanumeric = alphanumeric_0_1_0;

    alphonse_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, cipher_1_0_4 }:
          buildMix ({
            name = "alphonse";
            version = "0.1.0";
            src = fetchHex {
              pkg = "alphonse";
              version = "0.1.0";
              sha256 =
                "01666afde723be7d84fcd2e55741c90fd8bc78a407001677deb0717f685b8d21";
            };
            beamDeps  = [ cipher_1_0_4 ];

            meta = {
              description = ''A module wrapper to encrypt and decrypt files
                            with aes-128-cbc'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/chrisenytc/alphonse";
            };
          } // packageOverrides)
      ) {};

    alphonse = alphonse_0_1_0;

    alternate_0_1_5 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          gettext_0_13_1,
          phoenix_1_3_0_rc_2
        }:
          buildMix ({
            name = "alternate";
            version = "0.1.5";
            src = fetchHex {
              pkg = "alternate";
              version = "0.1.5";
              sha256 =
                "99be56d898725ac23f1524dab55ce0184066e4f5fd656a91a3e68b4f57fd091d";
            };
            beamDeps  = [ gettext_0_13_1 phoenix_1_3_0_rc_2 ];

            meta = {
              description = ''A library to serve your Phoenix app in differnt
                            locales'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/boudra/alternate";
            };
          } // packageOverrides)
      ) {};

    alternate = alternate_0_1_5;

    altworx_utils_0_0_5 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "altworx_utils";
            version = "0.0.5";
            src = fetchHex {
              pkg = "altworx_utils";
              version = "0.0.5";
              sha256 =
                "0d1aef130470e2b64ff9b7875274d5f838acf6a12a7c39ac74ea8b8b2fd35fae";
            };

            meta = {
              description = ''A collection of common utility functions for
                            various situations.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/altworx/altworx_utils.git";
            };
          } // packageOverrides)
      ) {};

    altworx_utils = altworx_utils_0_0_5;

    amazon_books_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          aws_sign_url_0_1_0,
          httpoison_0_11_2,
          sweet_xml_0_6_5
        }:
          buildMix ({
            name = "amazon_books";
            version = "0.2.0";
            src = fetchHex {
              pkg = "amazon_books";
              version = "0.2.0";
              sha256 =
                "69af66eb40e513cc8741543b902c7e6f97d3defc8cd440dccf8bd003ebcd72e1";
            };
            beamDeps  = [ aws_sign_url_0_1_0 httpoison_0_11_2 sweet_xml_0_6_5
                      ];

            meta = {
              description = ''Fetch book information from Amazon API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nithinbekal/amazon_books";
            };
          } // packageOverrides)
      ) {};

    amazon_books = amazon_books_0_2_0;

    amazon_product_advertising_client_0_2_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          sweet_xml_0_6_5,
          timex_3_1_15
        }:
          buildMix ({
            name = "amazon_product_advertising_client";
            version = "0.2.1";
            src = fetchHex {
              pkg = "amazon_product_advertising_client";
              version = "0.2.1";
              sha256 =
                "590f21676225f55862e7cb476ab76499869258bee9bb662d3a0d787826c53913";
            };
            beamDeps  = [ httpoison_0_11_2 sweet_xml_0_6_5 timex_3_1_15 ];

            meta = {
              description = ''An Amazon Product Advertising API client for
                            Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/zachgarwood/elixir-amazon-product-advertising-client";
            };
          } // packageOverrides)
      ) {};

    amazon_product_advertising_client =
      amazon_product_advertising_client_0_2_1;

    amlapio_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "amlapio";
            version = "0.2.0";
            src = fetchHex {
              pkg = "amlapio";
              version = "0.2.0";
              sha256 =
                "f916d333b924e6d645447de98d5fb220512a9e32574a31affc8c2c7d3c617c5b";
            };

            meta = {
              longDescription = ''Amlapio: Adding a Map API to a GenServer or
                                Module with Agent-held State A use macro to add
                                a Map API (e.g. get, put, pop, etc) to a
                                GenServer`s state or a module`s state held in an
                                Agent.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ianrumford/amlapio";
            };
          } // packageOverrides)
      ) {};

    amlapio = amlapio_0_2_0;

    amnesia_0_2_7 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, exquisite_0_1_8 }:
          buildMix ({
            name = "amnesia";
            version = "0.2.7";
            src = fetchHex {
              pkg = "amnesia";
              version = "0.2.7";
              sha256 =
                "c2b86204ef8d5cfacadc7b42782c92f620610c84731c34fcbb3280dd8a11e33d";
            };
            beamDeps  = [ exquisite_0_1_8 ];

            meta = {
              description = ''mnesia wrapper for Elixir'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/meh/amnesia";
            };
          } // packageOverrides)
      ) {};

    amnesia = amnesia_0_2_7;

    amp_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          earmark_1_2_2,
          excoveralls_0_6_5
        }:
          buildMix ({
            name = "amp";
            version = "0.1.0";
            src = fetchHex {
              pkg = "amp";
              version = "0.1.0";
              sha256 =
                "d3ba87273091263b173337924553d621a8d8e30c72826dc2890f9fa1a06b1f86";
            };
            beamDeps  = [ earmark_1_2_2 excoveralls_0_6_5 ];

            meta = {
              longDescription = ''Amp is an Elixir Markdown to AMP HTML
                                converter. For more information on AMP HTML see:
                                https://www.ampproject.org/learn/overview/'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dwyl/amp-elixir";
            };
          } // packageOverrides)
      ) {};

    amp = amp_0_1_0;

    ampex_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_8_3,
          sweet_xml_0_6_5
        }:
          buildMix ({
            name = "ampex";
            version = "0.1.1";
            src = fetchHex {
              pkg = "ampex";
              version = "0.1.1";
              sha256 =
                "ea9ca07c6ab7c137f577edc40dd6057dba9f1142f8281bf04e874d4523da7074";
            };
            beamDeps  = [ httpoison_0_8_3 sweet_xml_0_6_5 ];

            meta = {
              description = ''Elixir Library for interacting with Amazon
                            Product Advertising API'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/tgeselle/ampex";
            };
          } // packageOverrides)
      ) {};

    ampex = ampex_0_1_1;

    amqp_0_0_6 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, amqp_client_3_6_8
        }:
          buildMix ({
            name = "amqp";
            version = "0.0.6";
            src = fetchHex {
              pkg = "amqp";
              version = "0.0.6";
              sha256 =
                "47cbabaafcc5667eafcb0274d8b043f17472d38e0dab39817234f107f1ddc40c";
            };
            beamDeps  = [ amqp_client_3_6_8 ];

            meta = {
              description = ''Idiomatic Elixir client for RabbitMQ.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pma/amqp";
            };
          } // packageOverrides)
      ) {};

    amqp_0_1_1 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, amqp_client_3_6_8
        }:
          buildMix ({
            name = "amqp";
            version = "0.1.1";
            src = fetchHex {
              pkg = "amqp";
              version = "0.1.1";
              sha256 =
                "64cf314b8953cef7c809cce8f21cb8574f1ca29226b007bbaab7ac9079c96912";
            };
            beamDeps  = [ amqp_client_3_6_8 ];

            meta = {
              description = ''Idiomatic Elixir client for RabbitMQ.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pma/amqp";
            };
          } // packageOverrides)
      ) {};

    amqp_0_1_4 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, amqp_client_3_6_10
        }:
          buildMix ({
            name = "amqp";
            version = "0.1.4";
            src = fetchHex {
              pkg = "amqp";
              version = "0.1.4";
              sha256 =
                "a75d9b9283f306627b1d72a1ae326bb8c2910c5cd8198fa036e575b74b340ef4";
            };
            beamDeps  = [ amqp_client_3_6_10 ];

            meta = {
              description = ''Idiomatic Elixir client for RabbitMQ.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pma/amqp";
            };
          } // packageOverrides)
      ) {};

    amqp_0_2_0_pre_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          amqp_client_3_6_10,
          rabbit_common_3_6_10
        }:
          buildMix ({
            name = "amqp";
            version = "0.2.0-pre.2";
            src = fetchHex {
              pkg = "amqp";
              version = "0.2.0-pre.2";
              sha256 =
                "f051b9778f99d3e0fa31e79deea9ea0eacbb241079ce5dbfc7e811a95ad3d269";
            };
            beamDeps  = [ amqp_client_3_6_10 rabbit_common_3_6_10 ];

            meta = {
              description = ''Idiomatic Elixir client for RabbitMQ.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pma/amqp";
            };
          } // packageOverrides)
      ) {};

    amqp_0_2_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          amqp_client_3_6_10,
          rabbit_common_3_6_10
        }:
          buildMix ({
            name = "amqp";
            version = "0.2.2";
            src = fetchHex {
              pkg = "amqp";
              version = "0.2.2";
              sha256 =
                "ed6ef3d6950a2fd162062e75d5bfd85009ca6abb051cb7c03be356d282d1dac0";
            };
            beamDeps  = [ amqp_client_3_6_10 rabbit_common_3_6_10 ];

            meta = {
              description = ''Idiomatic Elixir client for RabbitMQ.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pma/amqp";
            };
          } // packageOverrides)
      ) {};

    amqp = amqp_0_2_2;

    amqp19_0_1_5 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          conduit_amqp_client_3_6_2
        }:
          buildMix ({
            name = "amqp19";
            version = "0.1.5";
            src = fetchHex {
              pkg = "amqp19";
              version = "0.1.5";
              sha256 =
                "f46291d4ebb1d3656e6bf9cfddf54ea2eee5e3a58c60b3139e9efbb8df828aa7";
            };
            beamDeps  = [ conduit_amqp_client_3_6_2 ];

            meta = {
              description = ''Idiomatic Elixir client for RabbitMQ.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pma/amqp";
            };
          } // packageOverrides)
      ) {};

    amqp19 = amqp19_0_1_5;

    amqp_client_3_6_10 = callPackage
      (
        {
          buildErlangMk,
          packageOverrides ? {},
          fetchHex,
          rabbit_common_3_6_10
        }:
          buildErlangMk ({
            name = "amqp_client";
            version = "3.6.10";
            src = fetchHex {
              pkg = "amqp_client";
              version = "3.6.10";
              sha256 =
                "f9fca32babb674d93b8a99a41d5fcc78212f4cb470a34e8ff8d958cd9ed9bc9e";
            };
            beamDeps  = [ rabbit_common_3_6_10 ];

            meta = {
              description = ''RabbitMQ AMQP Client'';
              license = stdenv.lib.licenses.mpl11;
              homepage = "http://www.rabbitmq.com/";
            };
          } // packageOverrides)
      ) {};

    amqp_client = amqp_client_3_6_10;

    amqp_client_3_6_8 = callPackage
      (
        {
          buildErlangMk,
          packageOverrides ? {},
          fetchHex,
          rabbit_common_3_6_8
        }:
          buildErlangMk ({
            name = "amqp_client";
            version = "3.6.8";
            src = fetchHex {
              pkg = "amqp_client";
              version = "3.6.8";
              sha256 =
                "87f71513f52e4149423891a1fb665ccf407d9ed87e2fe309d62f86a2fc3fe041";
            };
            beamDeps  = [ rabbit_common_3_6_8 ];

            meta = {
              description = ''RabbitMQ AMQP Client'';
              license = stdenv.lib.licenses.mpl11;
              homepage = "http://www.rabbitmq.com/";
            };
          } // packageOverrides)
      ) {};

    amqp_rpc_0_0_8 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          amqp_0_2_0_pre_2,
          fuse_2_4_0,
          poison_2_2_0
        }:
          buildMix ({
            name = "amqp_rpc";
            version = "0.0.8";
            src = fetchHex {
              pkg = "amqp_rpc";
              version = "0.0.8";
              sha256 =
                "0300f1a8434558fe506944765aa83f81eb95d01eaa061ccf05a816c15a6c8293";
            };
            beamDeps  = [ amqp_0_2_0_pre_2 fuse_2_4_0 poison_2_2_0 ];

            meta = {
              description = ''AMQP RPC Client/Server templates'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/deadtrickster/amqp_rpc";
            };
          } // packageOverrides)
      ) {};

    amqp_rpc = amqp_rpc_0_0_8;

    amrita_0_4_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "amrita";
            version = "0.4.0";
            src = fetchHex {
              pkg = "amrita";
              version = "0.4.0";
              sha256 =
                "8d3e642e665f9634aa44463ed6964ccf05e251c81ef92aaa9eacce2e9be959ad";
            };

            meta = {
              description = ''A polite, well mannered and thoroughly upstanding
                            testing framework for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "http://amrita.io";
            };
          } // packageOverrides)
      ) {};

    amrita = amrita_0_4_0;

    anagram_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "anagram";
            version = "1.0.0";
            src = fetchHex {
              pkg = "anagram";
              version = "1.0.0";
              sha256 =
                "8c41013b8b586728adbf821fe809c277e30f99323138b8e8ccff2311317c8fac";
            };

            meta = {
              longDescription = ''Find anagrams of words and \"words that can
                                be made with a set of letters\" (sort of a sub
                                anagram)'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ewildgoose/elixir-anagram";
            };
          } // packageOverrides)
      ) {};

    anagram = anagram_1_0_0;

    analysis_prep_0_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          combination_0_0_3,
          csv_1_4_4,
          gen_stage_0_12_0,
          ratio_1_2_1,
          statistics_0_4_1
        }:
          buildMix ({
            name = "analysis_prep";
            version = "0.1.2";
            src = fetchHex {
              pkg = "analysis_prep";
              version = "0.1.2";
              sha256 =
                "de8c72961967ccba5879adcd38a0268f7c0d2269e621afb8965e9a295542d875";
            };
            beamDeps  = [
                          combination_0_0_3
                          csv_1_4_4
                          gen_stage_0_12_0
                          ratio_1_2_1
                          statistics_0_4_1
                        ];

            meta = {
              description = ''Analysis preparation for data series for machine
                            learning and other analysis.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/davidrichards/analysis_prep";
            };
          } // packageOverrides)
      ) {};

    analysis_prep = analysis_prep_0_1_2;

    analyze_0_0_6 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          credo_0_8_1,
          dialyxir_0_5_0,
          ex_doc_0_16_1,
          excoveralls_0_7_0,
          hackney_1_8_6,
          inch_ex_0_5_6
        }:
          buildMix ({
            name = "analyze";
            version = "0.0.6";
            src = fetchHex {
              pkg = "analyze";
              version = "0.0.6";
              sha256 =
                "97e1a0df19e6c74bf3c83430265df98835539acf414528c9d4a00d3bd40147fe";
            };
            beamDeps  = [
                          credo_0_8_1
                          dialyxir_0_5_0
                          ex_doc_0_16_1
                          excoveralls_0_7_0
                          hackney_1_8_6
                          inch_ex_0_5_6
                        ];

            meta = {
              description = ''Mix task to analyze and report Elixir code.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/IanLuites/analyze";
            };
          } // packageOverrides)
      ) {};

    analyze = analyze_0_0_6;

    anansi_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "anansi";
            version = "0.0.3";
            src = fetchHex {
              pkg = "anansi";
              version = "0.0.3";
              sha256 =
                "c8f1269524a8b9f2ba588c4cf86bb9b895c0ee87038cb4cb1ef3207e31b836c9";
            };

            meta = {
              description = ''Command the terminal from a high-level with ANSI
                            control codes.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/christhekeele/anansi";
            };
          } // packageOverrides)
      ) {};

    anansi = anansi_0_0_3;

    anaphora_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "anaphora";
            version = "0.1.2";
            src = fetchHex {
              pkg = "anaphora";
              version = "0.1.2";
              sha256 =
                "fb60a214b2be57d7a08aa8237cd7afb009b637563d64ed5e6ec486e36c484001";
            };

            meta = {
              description = ''The anaphoric macro collection for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sviridov/anaphora-elixir";
            };
          } // packageOverrides)
      ) {};

    anaphora = anaphora_0_1_2;

    anchor_0_3_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, shackle_0_5_0 }:
          buildRebar3 ({
            name = "anchor";
            version = "0.3.1";
            src = fetchHex {
              pkg = "anchor";
              version = "0.3.1";
              sha256 =
                "8f807ebc3dbd224623525891273c0998652578427a80fafff6286f4fc042df4f";
            };

            beamDeps  = [ shackle_0_5_0 ];

            meta = {
              description = ''High-Performance Erlang Memcached Client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lpgauth/anchor";
            };
          } // packageOverrides)
      ) {};

    anchor = anchor_0_3_1;

    angellist_0_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, httpoison_0_11_2 }:
          buildMix ({
            name = "angellist";
            version = "0.0.0";
            src = fetchHex {
              pkg = "angellist";
              version = "0.0.0";
              sha256 =
                "1da13996faaa7c6f2071899650759908004e2ccb0372709e05c0b36a5ed47ba1";
            };
            beamDeps  = [ httpoison_0_11_2 ];

            meta = {
              description = ''AngelList for Alchemists.'';
              license = stdenv.lib.licenses.publicDomain;
              homepage = "https://github.com/mtwilliams/angellist";
            };
          } // packageOverrides)
      ) {};

    angellist = angellist_0_0_0;

    anilixir_1_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_1_5_2
        }:
          buildMix ({
            name = "anilixir";
            version = "1.0.0";
            src = fetchHex {
              pkg = "anilixir";
              version = "1.0.0";
              sha256 =
                "ee5c6dfa7e5250d8ec5c9b04910e3202788ceeba231cb3ff8b22e479cc64f1c3";
            };
            beamDeps  = [ httpoison_0_11_2 poison_1_5_2 ];

            meta = {
              description = ''Anilist API client for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sotojuan/anilixir";
            };
          } // packageOverrides)
      ) {};

    anilixir = anilixir_1_0_0;

    ankh_0_3_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, hpack_1_0_3 }:
          buildMix ({
            name = "ankh";
            version = "0.3.1";
            src = fetchHex {
              pkg = "ankh";
              version = "0.3.1";
              sha256 =
                "a1ad6d6b2a58f535a1c4ec85c4cefa013f7c75aad9f92d4eb0c64147a257a596";
            };
            beamDeps  = [ hpack_1_0_3 ];

            meta = {
              description = ''Pure Elixir HTTP/2 implementation'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lucacorti/ankh";
            };
          } // packageOverrides)
      ) {};

    ankh = ankh_0_3_1;

    annon_ktl_0_2_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0,
          progress_bar_1_6_1,
          table_0_0_5,
          yamerl_0_4_0,
          yaml_elixir_1_3_0,
          yaml_encoder_0_0_2
        }:
          buildMix ({
            name = "annon_ktl";
            version = "0.2.2";
            src = fetchHex {
              pkg = "annon_ktl";
              version = "0.2.2";
              sha256 =
                "25cd91238077bb44c0d21438d2c532cf2ffa217c1d7b887336fc513a94a48640";
            };
            beamDeps  = [
                          httpoison_0_11_2
                          poison_3_1_0
                          progress_bar_1_6_1
                          table_0_0_5
                          yamerl_0_4_0
                          yaml_elixir_1_3_0
                          yaml_encoder_0_0_2
                        ];

            meta = {
              description = ''annonktl is an escript that controls the Annon
                            API Gateway cluster.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/Nebo15/annon_ktl";
            };
          } // packageOverrides)
      ) {};

    annon_ktl = annon_ktl_0_2_2;

    annotatable_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "annotatable";
            version = "0.1.2";
            src = fetchHex {
              pkg = "annotatable";
              version = "0.1.2";
              sha256 =
                "908ce0150bea70dbf201b57b62ea00a1134018265b1a13a20a59fb9f45c3a416";
            };

            meta = {
              description = ''A few sentences (a paragraph) describing the
                            project.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/chrisjowen/annotatable";
            };
          } // packageOverrides)
      ) {};

    annotatable = annotatable_0_1_2;

    annotations_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "annotations";
            version = "0.1.0";
            src = fetchHex {
              pkg = "annotations";
              version = "0.1.0";
              sha256 =
                "ea2f63b3c28b59610399f464637171d0e5e47fcbfe1893400f40a13d57bc7b0f";
            };

            meta = {
              description = ''String Annotation Package'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/openapi-ro/annotations";
            };
          } // packageOverrides)
      ) {};

    annotations = annotations_0_1_0;

    ansi_to_html_0_2_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, phoenix_html_2_9_3
        }:
          buildMix ({
            name = "ansi_to_html";
            version = "0.2.0";
            src = fetchHex {
              pkg = "ansi_to_html";
              version = "0.2.0";
              sha256 =
                "81f13f4d815daef47c329dcfe8f121fbc7e76a9c2cc04e635eece6d2157ac8e5";
            };
            beamDeps  = [ phoenix_html_2_9_3 ];

            meta = {
              description = ''Small library to convert ANSI Styling codes to
                            HTML.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/stephlow/ansi_to_html";
            };
          } // packageOverrides)
      ) {};

    ansi_to_html = ansi_to_html_0_2_0;

    anubis_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "anubis";
            version = "0.1.0";
            src = fetchHex {
              pkg = "anubis";
              version = "0.1.0";
              sha256 =
                "38329609a08261ba50b8ef2cfffa3bc4926b5412f8683a9322e59cf953779aab";
            };

            meta = {
              description = '' Anubis is a framework for building command line
                            applications. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bennyhallett/anubis";
            };
          } // packageOverrides)
      ) {};

    anubis_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "anubis";
            version = "0.3.0";
            src = fetchHex {
              pkg = "anubis";
              version = "0.3.0";
              sha256 =
                "556039ca0e045116e3a2f71b15e7d884122e6b7596fede05d022d28412df5ae2";
            };

            meta = {
              description = '' Anubis is a framework for building command line
                            applications. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bennyhallett/anubis";
            };
          } // packageOverrides)
      ) {};

    anubis = anubis_0_3_0;

    anybar_0_4_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "anybar";
            version = "0.4.0";
            src = fetchHex {
              pkg = "anybar";
              version = "0.4.0";
              sha256 =
                "5f4ab0d21b01bd642ed511b9b8a19f7c752a718e1bfcc2e8dd2ed5f1a64c735a";
            };

            meta = {
              description = ''Elixir interface to AnyBar app'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/buccolo/anybar";
            };
          } // packageOverrides)
      ) {};

    anybar = anybar_0_4_0;

    apache_passwd_md5_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "apache_passwd_md5";
            version = "1.0.0";
            src = fetchHex {
              pkg = "apache_passwd_md5";
              version = "1.0.0";
              sha256 =
                "2ffc49fe46aadcd21248aacb4a9c723c8d8a0304747f8cf8e6089e97404f59f1";
            };

            meta = {
              longDescription = ''Provides Apache/APR style password hashing.
                                Useful for generating or authenticating against
                                MD5 htpasswd passwords. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kevinmontuori/Apache.PasswdMD5";
            };
          } // packageOverrides)
      ) {};

    apache_passwd_md5 = apache_passwd_md5_1_0_0;

    apartmentex_0_2_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_4,
          mariaex_0_8_2,
          postgrex_1_0_0_rc_1
        }:
          buildMix ({
            name = "apartmentex";
            version = "0.2.3";
            src = fetchHex {
              pkg = "apartmentex";
              version = "0.2.3";
              sha256 =
                "442176a0eed1b65b921ed3e1bde766fcfe11cba2596f879d47dfa0c1ab71868e";
            };
            beamDeps  = [ ecto_2_1_4 mariaex_0_8_2 postgrex_1_0_0_rc_1 ];

            meta = {
              description = ''SaaS Library for Ecto applications using Postgres
                            or Mysql'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Dania02525/apartmentex";
            };
          } // packageOverrides)
      ) {};

    apartmentex = apartmentex_0_2_3;

    apex_0_3_7 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "apex";
            version = "0.3.7";
            src = fetchHex {
              pkg = "apex";
              version = "0.3.7";
              sha256 =
                "a1c8313e9c909ff2489f004b3514430293b1aafb81569b93a1822d486f56080d";
            };

            meta = {
              description = ''Elixir clone of Ruby`s awesome_print gem'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bjro/apex";
            };
          } // packageOverrides)
      ) {};

    apex_0_5_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "apex";
            version = "0.5.2";
            src = fetchHex {
              pkg = "apex";
              version = "0.5.2";
              sha256 =
                "222c65076ea71e108a5e9d5a0f04a7a4e44f2858089139a3701e6155e5d52c32";
            };

            meta = {
              description = ''Elixir clone of Ruby`s awesome_print gem'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bjro/apex";
            };
          } // packageOverrides)
      ) {};

    apex_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "apex";
            version = "1.0.0";
            src = fetchHex {
              pkg = "apex";
              version = "1.0.0";
              sha256 =
                "64bc3f7e3a9f528b188650d5e975be9427c681000ea0174dbb8e284f02d04de1";
            };

            meta = {
              description = ''Elixir clone of Ruby`s awesome_print gem'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bjro/apex";
            };
          } // packageOverrides)
      ) {};

    apex = apex_1_0_0;

    api_controller_0_2_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, phoenix_1_3_0_rc_2
        }:
          buildMix ({
            name = "api_controller";
            version = "0.2.0";
            src = fetchHex {
              pkg = "api_controller";
              version = "0.2.0";
              sha256 =
                "fc009206b655c65af04c9a5ddc9f0d88c7eddc5021698dd17ea038c291125b27";
            };
            beamDeps  = [ phoenix_1_3_0_rc_2 ];

            meta = {
              description = ''Base API Controller for Phoenix'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ccsteam/ex-api-controller";
            };
          } // packageOverrides)
      ) {};

    api_controller = api_controller_0_2_0;

    apix_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "apix";
            version = "0.1.1";
            src = fetchHex {
              pkg = "apix";
              version = "0.1.1";
              sha256 =
                "70bdaaa625f8dac506b5af4f437d362589b0ec7f86fa77bd9daabbbc7676323e";
            };

            meta = {
              longDescription = ''Simple convention and DSL for transformation
                                of elixir functions to a documented and ready
                                for validation API.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/liveforeverx/apix";
            };
          } // packageOverrides)
      ) {};

    apix = apix_0_1_1;

    apns_0_9_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          connection_1_0_4,
          poison_1_0_2,
          poolboy_1_5_1
        }:
          buildMix ({
            name = "apns";
            version = "0.9.4";
            src = fetchHex {
              pkg = "apns";
              version = "0.9.4";
              sha256 =
                "9f284a6da0038fca3623a8e8a33919f8e3cda27c6c6667a1fd09932625d84b2b";
            };
            beamDeps  = [ connection_1_0_4 poison_1_0_2 poolboy_1_5_1 ];

            meta = {
              description = ''APNS (Apple Push Notification Service) library
                            for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/chvanikoff/apns4ex";
            };
          } // packageOverrides)
      ) {};

    apns = apns_0_9_4;

    apns4erl_2_1_0 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          base64url_0_0_1,
          chatterbox_0_4_2,
          jsx_2_8_1
        }:
          buildRebar3 ({
            name = "apns4erl";
            version = "2.1.0";
            src = fetchHex {
              pkg = "apns4erl";
              version = "2.1.0";
              sha256 =
                "33cd956c945f4952082f9dc3f67f30a5853da96215b3152e809608ca193c72e1";
            };

            beamDeps  = [ base64url_0_0_1 chatterbox_0_4_2 jsx_2_8_1 ];

            meta = {
              longDescription = ''APNs provider for Apple Push Notification
                                services (APNs) in Erlang. It supports the HTTP2
                                API.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/inaka/apns4erl";
            };
          } // packageOverrides)
      ) {};

    apns4erl = apns4erl_2_1_0;

    apocryphal_0_2_8 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ex_json_schema_0_5_5,
          httpoison_0_9_2,
          poison_2_2_0,
          yaml_elixir_1_3_0
        }:
          buildMix ({
            name = "apocryphal";
            version = "0.2.8";
            src = fetchHex {
              pkg = "apocryphal";
              version = "0.2.8";
              sha256 =
                "b7dde2a20be64eec551492193aad9273f18fddea82871df4a461dd1b2a1f25f0";
            };
            beamDeps  = [
                          ex_json_schema_0_5_5
                          httpoison_0_9_2
                          poison_2_2_0
                          yaml_elixir_1_3_0
                        ];

            meta = {
              description = ''Swagger based document driven development for
                            ExUnit'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/coryodaniel/apocryphal";
            };
          } // packageOverrides)
      ) {};

    apocryphal = apocryphal_0_2_8;

    apostle_0_0_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_7_5,
          poison_1_4_0
        }:
          buildMix ({
            name = "apostle";
            version = "0.0.3";
            src = fetchHex {
              pkg = "apostle";
              version = "0.0.3";
              sha256 =
                "3bb6b358236bbf730df69fa775f230355235a7e24dae73a9f17e4237c3fdb583";
            };
            beamDeps  = [ httpoison_0_7_5 poison_1_4_0 ];

            meta = {
              description = ''Elixir client for Apostle.io.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jamesotron/apostle-elixir";
            };
          } // packageOverrides)
      ) {};

    apostle = apostle_0_0_3;

    app_config_0_1_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "app_config";
            version = "0.1.4";
            src = fetchHex {
              pkg = "app_config";
              version = "0.1.4";
              sha256 =
                "6fa0d5df70fd11baeec5febbdd836472442a301bf919757ad105f8b6efc47a5d";
            };

            meta = {
              description = ''Elixir configuration module that simplifies
                            access to environment variables'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/jcomellas/app_config";
            };
          } // packageOverrides)
      ) {};

    app_config = app_config_0_1_4;

    apportion_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_2_2_0 }:
          buildMix ({
            name = "apportion";
            version = "0.0.1";
            src = fetchHex {
              pkg = "apportion";
              version = "0.0.1";
              sha256 =
                "86914319ddd9c06a28c5274b4dfd05722018e59c92e12e44c9306e61a937c6b1";
            };
            beamDeps  = [ poison_2_2_0 ];

            meta = {
              description = ''Elixir implementation for apportionment'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/garyf/apportion_ex";
            };
          } // packageOverrides)
      ) {};

    apportion = apportion_0_0_1;

    approximate_histogram_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "approximate_histogram";
            version = "0.1.1";
            src = fetchHex {
              pkg = "approximate_histogram";
              version = "0.1.1";
              sha256 =
                "6cce003d09656efbfe80b4a50f19e6c1f8eaf1424f08e4a96036b340fc67019d";
            };

            meta = {
              description = ''Approximate Histograms'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cschneid/approximate_histogram";
            };
          } // packageOverrides)
      ) {};

    approximate_histogram = approximate_histogram_0_1_1;

    appsignal_1_2_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          decorator_1_2_1,
          httpoison_0_11_2,
          phoenix_1_3_0_rc_2
        }:
          buildMix ({
            name = "appsignal";
            version = "1.2.2";
            src = fetchHex {
              pkg = "appsignal";
              version = "1.2.2";
              sha256 =
                "6a5d44081e3c418a735844e0ea95052a93a1f65004f7ba5aab0a57c6446924b0";
            };
            beamDeps  = [ decorator_1_2_1 httpoison_0_11_2 phoenix_1_3_0_rc_2
                      ];

            meta = {
              longDescription = ''Collects error and performance data from your
                                Elixir applications and sends it to AppSignal'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/appsignal/appsignal-elixir";
            };
          } // packageOverrides)
      ) {};

    appsignal = appsignal_1_2_2;

    appstore_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "appstore";
            version = "0.1.0";
            src = fetchHex {
              pkg = "appstore";
              version = "0.1.0";
              sha256 =
                "5e07883874a980286c355003e04f0342dc14fb4977fa791673669adaed91ba7c";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''Itune App Store crawler and scraper'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/icaroponce/appstore";
            };
          } // packageOverrides)
      ) {};

    appstore = appstore_0_1_0;

    ar2ecto_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ar2ecto";
            version = "0.1.2";
            src = fetchHex {
              pkg = "ar2ecto";
              version = "0.1.2";
              sha256 =
                "a32322d39f1c0cff335b05b5c2252e531091565c3cf754811087edd2e115a718";
            };

            meta = {
              description = ''Ar2ecto is a set of mix tasks to help you migrate
                            from ActiveRecord to Ecto.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/aforward/ar2ecto";
            };
          } // packageOverrides)
      ) {};

    ar2ecto = ar2ecto_0_1_2;

    arangoex_0_0_10 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_1_0_2
        }:
          buildMix ({
            name = "arangoex";
            version = "0.0.10";
            src = fetchHex {
              pkg = "arangoex";
              version = "0.0.10";
              sha256 =
                "f9a4f830a449e333f1be91a01276924a8d6dc99f29a05cad2d75d69605743944";
            };
            beamDeps  = [ httpoison_0_11_2 poison_1_0_2 ];

            meta = {
              description = ''An Elixir driver for ArangoDB.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/austinsmorris/arangoex";
            };
          } // packageOverrides)
      ) {};

    arangoex = arangoex_0_0_10;

    arbor_1_0_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_4,
          postgrex_1_0_0_rc_1
        }:
          buildMix ({
            name = "arbor";
            version = "1.0.4";
            src = fetchHex {
              pkg = "arbor";
              version = "1.0.4";
              sha256 =
                "d0c2a6cf101a566f72aafb3703326cadf00fc0f82841b6a541f67a5bdfafa59e";
            };
            beamDeps  = [ ecto_2_1_4 postgrex_1_0_0_rc_1 ];

            meta = {
              description = ''Ecto adjacency list and tree traversal'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/coryodaniel/arbor";
            };
          } // packageOverrides)
      ) {};

    arbor = arbor_1_0_4;

    arc_0_6_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ex_aws_1_0_0,
          httpoison_0_11_2,
          poison_1_0_2,
          sweet_xml_0_6_5
        }:
          buildMix ({
            name = "arc";
            version = "0.6.0";
            src = fetchHex {
              pkg = "arc";
              version = "0.6.0";
              sha256 =
                "8beda3ab585aeebf8b990adf55459248ec3f92e7fad3a4e939963523fbc08d84";
            };
            beamDeps  = [
                          ex_aws_1_0_0
                          httpoison_0_11_2
                          poison_1_0_2
                          sweet_xml_0_6_5
                        ];

            meta = {
              description = ''Flexible file upload and attachment library for
                            Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/stavro/arc";
            };
          } // packageOverrides)
      ) {};

    arc_manta_0_0_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          arc_0_6_0,
          calendar_0_14_2,
          httpoison_0_11_2,
          poison_1_0_2
        }:
          buildMix ({
            name = "arc_manta";
            version = "0.0.3";
            src = fetchHex {
              pkg = "arc_manta";
              version = "0.0.3";
              sha256 =
                "3434d1ea295f57cf41a8f59b2337ecffce39ca52cfa27161834c5c9d6c1cf3a0";
            };
            beamDeps  = [
                          arc_0_6_0
                          calendar_0_14_2
                          httpoison_0_11_2
                          poison_1_0_2
                        ];

            meta = {
              description = ''Provides Joyent Manta storage backend for Arc.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/onyxrev/arc_manta";
            };
          } // packageOverrides)
      ) {};

    arc_manta = arc_manta_0_0_3;

    arcgis_geocode_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "arcgis_geocode";
            version = "0.2.0";
            src = fetchHex {
              pkg = "arcgis_geocode";
              version = "0.2.0";
              sha256 =
                "99cef05a2b0b5722449b623d1b2f2467e7171aa83245fafbcf8e8e4ac492be6e";
            };
            beamDeps  = [ httpoison_0_11_2 poison_2_2_0 ];

            meta = {
              description = ''An Elixir client library for interacting with the
                            ArcGIS geocoding APIs'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rynam0/arcgis_geocode";
            };
          } // packageOverrides)
      ) {};

    arcgis_geocode = arcgis_geocode_0_2_0;

    archytax_0_1_2 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, nerves_uart_0_1_2
        }:
          buildMix ({
            name = "archytax";
            version = "0.1.2";
            src = fetchHex {
              pkg = "archytax";
              version = "0.1.2";
              sha256 =
                "3cb4e708e38c1132ed6335fb9b5b51f2882e958b619cc9aae40522020a6f14b9";
            };
            beamDeps  = [ nerves_uart_0_1_2 ];

            meta = {
              description = ''An implementation of the Firmata protocol for
                            elixir.'';
              license = stdenv.lib.licenses.gpl3;
              homepage = "https://github.com/hanselmw/archytax";
            };
          } // packageOverrides)
      ) {};

    archytax = archytax_0_1_2;

    argent_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "argent";
            version = "0.0.1";
            src = fetchHex {
              pkg = "argent";
              version = "0.0.1";
              sha256 =
                "dde0920308efca2c8dd9681057e5196f625b53ed8dff86a27242807c3653d645";
            };

            meta = {
              description = ''A currency management library for elixir.'';

            };
          } // packageOverrides)
      ) {};

    argent = argent_0_0_1;

    argon2_elixir_0_12_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, elixir_make_0_4_0
        }:
          buildMix ({
            name = "argon2_elixir";
            version = "0.12.0";
            src = fetchHex {
              pkg = "argon2_elixir";
              version = "0.12.0";
              sha256 =
                "55d9cb2152abfede4e2b6c14bb2d5da0bc829eb3694f851ac0fa08e5602c1da5";
            };
            beamDeps  = [ elixir_make_0_4_0 ];

            meta = {
              description = ''Argon2 password hashing algorithm for Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/riverrun/argon2_elixir";
            };
          } // packageOverrides)
      ) {};

    argon2_elixir = argon2_elixir_0_12_0;

    argument_parser_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "argument_parser";
            version = "0.1.3";
            src = fetchHex {
              pkg = "argument_parser";
              version = "0.1.3";
              sha256 =
                "2c56a6c9dfa9790aabdb8f9268ac501404376ffb13396ff515e66f1ebf64817d";
            };

            meta = {
              description = ''More powerful argument parser for creating nice
                            scripts'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/jisaacstone/ex_argument_parser";
            };
          } // packageOverrides)
      ) {};

    argument_parser = argument_parser_0_1_3;

    array_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "array";
            version = "1.0.1";
            src = fetchHex {
              pkg = "array";
              version = "1.0.1";
              sha256 =
                "626ac1383566dadee3a10357cd6d192151c6d604ee3266809daf0da6b5e33bbb";
            };

            meta = {
              description = ''An elixir wrapper library for Erlang`s array.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/takscape/elixir-array";
            };
          } // packageOverrides)
      ) {};

    array = array_1_0_1;

    array_vector_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "array_vector";
            version = "0.1.1";
            src = fetchHex {
              pkg = "array_vector";
              version = "0.1.1";
              sha256 =
                "6386e45941af17732bdcdd2951d9c39127528c5175e8624bb15b692a41641a1b";
            };

            meta = {
              description = ''An array-backed vector providing fast random
                            access'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ckampfe/vector";
            };
          } // packageOverrides)
      ) {};

    array_vector = array_vector_0_1_1;

    artifact_0_4_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          plug_1_2_0_rc_0,
          poolboy_1_5_1,
          porcelain_2_0_3
        }:
          buildMix ({
            name = "artifact";
            version = "0.4.0";
            src = fetchHex {
              pkg = "artifact";
              version = "0.4.0";
              sha256 =
                "6c66a3c745418e1f1207940c3815828d1a0f022d8186e5da593599d1f460197f";
            };
            beamDeps  = [ plug_1_2_0_rc_0 poolboy_1_5_1 porcelain_2_0_3 ];

            meta = {
              description = ''File upload and on-the-fly processing for
                            Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/doomspork/artifact";
            };
          } // packageOverrides)
      ) {};

    artifact = artifact_0_4_0;

    artifactory_0_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "artifactory";
            version = "0.0.0";
            src = fetchHex {
              pkg = "artifactory";
              version = "0.0.0";
              sha256 =
                "e281ae8c68f34884edd0bf3cf66ad5c151be0849e81382539a0041c9af70e5a2";
            };

            meta = {
              description = ''A Elixir client for Artifactory`s REST API'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/amorphid/artifactory-elixir";
            };
          } // packageOverrides)
      ) {};

    artifactory = artifactory_0_0_0;

    artsy_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_6_1,
          httpoison_0_9_2,
          poison_2_2_0,
          uuid_1_1_7
        }:
          buildMix ({
            name = "artsy";
            version = "0.1.1";
            src = fetchHex {
              pkg = "artsy";
              version = "0.1.1";
              sha256 =
                "5447d6e31974c884b57936efdfc1f8d7dbe8316b990f34f7c779679edb4baa96";
            };
            beamDeps  = [
                          hackney_1_6_1 httpoison_0_9_2 poison_2_2_0 uuid_1_1_7
                        ];

            meta = {
              description = ''Wrapper to use Artsy API to get artworks.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ImpossibilityLabs/artsy";
            };
          } // packageOverrides)
      ) {};

    artsy = artsy_0_1_1;

    aruspex_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exyz_1_0_0,
          zipper_tree_0_1_1
        }:
          buildMix ({
            name = "aruspex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "aruspex";
              version = "0.1.0";
              sha256 =
                "2effd16e1081a7af2e5ade9c58cdf4c4d90e2095749ccf733332be2924a6d771";
            };
            beamDeps  = [ exyz_1_0_0 zipper_tree_0_1_1 ];

            meta = {
              description = ''A configurable constraint solver with an API
                            based on JSR 331.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://www.github.com/dkendal/aruspex";
            };
          } // packageOverrides)
      ) {};

    aruspex = aruspex_0_1_0;

    as_nested_set_3_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ecto_2_1_0_rc_5 }:
          buildMix ({
            name = "as_nested_set";
            version = "3.1.1";
            src = fetchHex {
              pkg = "as_nested_set";
              version = "3.1.1";
              sha256 =
                "7f404b172986abebada12b23110c9a9282ef48551b8dfce3bb3d034932584e08";
            };
            beamDeps  = [ ecto_2_1_0_rc_5 ];

            meta = {
              description = ''An ecto based Nested set model implementation'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/secretworry/as_nested_set";
            };
          } // packageOverrides)
      ) {};

    as_nested_set = as_nested_set_3_1_1;

    asanaficator_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exjsx_3_2_1,
          httpoison_0_6_2
        }:
          buildMix ({
            name = "asanaficator";
            version = "0.0.1";
            src = fetchHex {
              pkg = "asanaficator";
              version = "0.0.1";
              sha256 =
                "891ca378a0b83d7018c10073ab14f35930186098d777e24550fff84a9683bfa3";
            };
            beamDeps  = [ exjsx_3_2_1 httpoison_0_6_2 ];

            meta = {
              description = ''Simple Elixir wrapper for the Asana API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/trenpixster/asanaficator";
            };
          } // packageOverrides)
      ) {};

    asanaficator = asanaficator_0_0_1;

    ashes_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ashes";
            version = "0.0.3";
            src = fetchHex {
              pkg = "ashes";
              version = "0.0.3";
              sha256 =
                "2178ab8c0fa1cf53b6d6152773ae79ca6100c80861d59e55e5fa06c5979b042b";
            };

            meta = {
              description = ''A code generation tool for the phoenix web
                            framework'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nickgartmann/ashes";
            };
          } // packageOverrides)
      ) {};

    ashes = ashes_0_0_3;

    asn_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "asn";
            version = "0.2.1";
            src = fetchHex {
              pkg = "asn";
              version = "0.2.1";
              sha256 =
                "f414cc808669a573dee08e6133daf151646835b88f1a0c0c7b0316c93fe50a8c";
            };

            meta = {
              description = ''IP-to-AS-to-ASname lookup for Elixir.'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/ephe-meral/asn";
            };
          } // packageOverrides)
      ) {};

    asn = asn_0_2_1;

    assembla_api_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_1_5_2
        }:
          buildMix ({
            name = "assembla_api";
            version = "0.1.0";
            src = fetchHex {
              pkg = "assembla_api";
              version = "0.1.0";
              sha256 =
                "b4a3898de536e4820702c0f119993fd2804e91e2525d1e7eba57d8744983ef24";
            };
            beamDeps  = [ httpoison_0_11_2 poison_1_5_2 ];

            meta = {
              description = ''Assembla API client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Assembla/ex_assembla_api";
            };
          } // packageOverrides)
      ) {};

    assembla_api = assembla_api_0_1_0;

    assembly_line_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, gproc_0_6_1 }:
          buildMix ({
            name = "assembly_line";
            version = "1.0.0";
            src = fetchHex {
              pkg = "assembly_line";
              version = "1.0.0";
              sha256 =
                "3b687890bf750cd893e8a73c261710c1014ba4d5b2247f695f7730b2a84a5473";
            };
            beamDeps  = [ gproc_0_6_1 ];

            meta = {
              description = ''A light-weight job queue (think DAG) manager.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/LeakyBucket/assembly_line";
            };
          } // packageOverrides)
      ) {};

    assembly_line = assembly_line_1_0_0;

    assert_diff_0_0_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "assert_diff";
            version = "0.0.5";
            src = fetchHex {
              pkg = "assert_diff";
              version = "0.0.5";
              sha256 =
                "ad53a2819c33d39ad2f71404a964625691e9d6bf3d63dbc28442acda71109426";
            };

            meta = {
              description = ''assert_diff which fallbacks to git diff'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ske77/assert_diff";
            };
          } // packageOverrides)
      ) {};

    assert_diff = assert_diff_0_0_5;

    assert_functional_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "assert_functional";
            version = "0.1.0";
            src = fetchHex {
              pkg = "assert_functional";
              version = "0.1.0";
              sha256 =
                "9ac763e0c27e2b628bde05465166538e6fdc1cc502364001aa7e5577d89f78be";
            };

            meta = {
              description = ''Functional and composable assertions.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jfrolich/assert_functional";
            };
          } // packageOverrides)
      ) {};

    assert_functional = assert_functional_0_1_0;

    assert_url_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "assert_url";
            version = "0.1.0";
            src = fetchHex {
              pkg = "assert_url";
              version = "0.1.0";
              sha256 =
                "ca6257bcc093a37d6471ab650856cf1f6bd8ffadd422bfd8751cdde606fd31b0";
            };

            meta = {
              description = ''Collection of functions to test URLs'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    assert_url = assert_url_0_1_0;

    ast_walk_0_2_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "ast_walk";
            version = "0.2.0";
            src = fetchHex {
              pkg = "ast_walk";
              version = "0.2.0";
              sha256 =
                "90b46f713a4070fff58285f5ae1b3eb18eec7dc9285f879f09aac46e9b509aa3";
            };

            meta = {
              longDescription = ''An Erlang library to walk the Erlang AST with
                                the ability to mutate it and keep state during
                                transversal'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/marianoguerra/ast_walk";
            };
          } // packageOverrides)
      ) {};

    ast_walk = ast_walk_0_2_0;

    atadura_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "atadura";
            version = "0.1.0";
            src = fetchHex {
              pkg = "atadura";
              version = "0.1.0";
              sha256 =
                "cdbe7eeb35b56b04b764c5823bc61d726706ea58823ccad677068def27de4270";
            };

            meta = {
              description = ''Helper tiny module to provide easy binding
                            support as `bind_quoted` does.'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/am-kantox/atadura";
            };
          } // packageOverrides)
      ) {};

    atadura = atadura_0_1_0;

    atlas_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "atlas";
            version = "0.2.0";
            src = fetchHex {
              pkg = "atlas";
              version = "0.2.0";
              sha256 =
                "1c887e4a6224f3189a92e4e4684a2623161a70c7fbd0fd7db79233d5d2f6facf";
            };

            meta = {
              description = ''Object Relational Mapper for Elixir '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/chrismccord/atlas";
            };
          } // packageOverrides)
      ) {};

    atlas = atlas_0_2_0;

    atmo_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "atmo";
            version = "0.1.0";
            src = fetchHex {
              pkg = "atmo";
              version = "0.1.0";
              sha256 =
                "31821e2cb74d91076d9440f80bef93e6a0163333c3645a742862cecdeaacdaaf";
            };

            meta = {
              longDescription = ''A single, flexible interface for reading
                                configuration from environment variables or
                                `Mix.Config` with parsing and defaults.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/vinli/atmo_ex";
            };
          } // packageOverrides)
      ) {};

    atmo = atmo_0_1_0;

    atomic_map_0_9_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "atomic_map";
            version = "0.9.2";
            src = fetchHex {
              pkg = "atomic_map";
              version = "0.9.2";
              sha256 =
                "6657d8efb814841a930c3a99a7c5dacf769fac1160b5c81aaef97f8433565ba0";
            };

            meta = {
              longDescription = ''A small utility to convert deep Elixir maps
                                with mixed string/atom keys to atom-only keyed
                                maps'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ruby2elixir/atomic_map";
            };
          } // packageOverrides)
      ) {};

    atomic_map = atomic_map_0_9_2;

    attribute_server_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "attribute_server";
            version = "0.1.0";
            src = fetchHex {
              pkg = "attribute_server";
              version = "0.1.0";
              sha256 =
                "6f5214a8122f0568eae0f54449f00aef5cedfc9222e3734695f7fb2b5b33bc85";
            };

            meta = {
              description = ''genserver for globally storing attributes'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/MishaConway/elixir-attribute-server";
            };
          } // packageOverrides)
      ) {};

    attribute_server = attribute_server_0_1_0;

    auth0_ex_0_1_6 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_1_0_2
        }:
          buildMix ({
            name = "auth0_ex";
            version = "0.1.6";
            src = fetchHex {
              pkg = "auth0_ex";
              version = "0.1.6";
              sha256 =
                "ca9835746b213cb21352922755e4d4771e7c2ad4f7e83e5bb8607ac0794f7427";
            };
            beamDeps  = [ httpoison_0_11_2 poison_1_0_2 ];

            meta = {
              description = ''An elixir client library for Auth0'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/techgaun/auth0_ex";
            };
          } // packageOverrides)
      ) {};

    auth0_ex = auth0_ex_0_1_6;

    auth_test_support_0_0_6 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, plug_1_3_5 }:
          buildMix ({
            name = "auth_test_support";
            version = "0.0.6";
            src = fetchHex {
              pkg = "auth_test_support";
              version = "0.0.6";
              sha256 =
                "930596c61d237fbf74b86d87819f0a7df8da8ef79051294a1982ded403cb2401";
            };
            beamDeps  = [ plug_1_3_5 ];

            meta = {
              description = ''Authentication and authorization test support
                            functions'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/DockYard/auth_test_support";
            };
          } // packageOverrides)
      ) {};

    auth_test_support = auth_test_support_0_0_6;

    authable_0_8_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          comeonin_3_0_2,
          ecto_2_1_4,
          plug_1_1_7,
          poison_1_0_2,
          postgrex_1_0_0_rc_1,
          secure_random_0_5_1
        }:
          buildMix ({
            name = "authable";
            version = "0.8.0";
            src = fetchHex {
              pkg = "authable";
              version = "0.8.0";
              sha256 =
                "1307effe4e939d5a14240c4d79111e13bc9dc0b3a808ede94e21ee485328ea89";
            };
            beamDeps  = [
                          comeonin_3_0_2
                          ecto_2_1_4
                          plug_1_1_7
                          poison_1_0_2
                          postgrex_1_0_0_rc_1
                          secure_random_0_5_1
                        ];

            meta = {
              longDescription = ''OAuth2 Provider implementation modules and
                                helpers using `ecto` and `postgress` for any
                                `elixir` application.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mustafaturan/authable";
            };
          } // packageOverrides)
      ) {};

    authable = authable_0_8_0;

    authentic_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "authentic";
            version = "0.0.1";
            src = fetchHex {
              pkg = "authentic";
              version = "0.0.1";
              sha256 =
                "2fba6e1efde9fef4866d17499907811a3957ded8c07866c7b34474f0f0d59e29";
            };

            meta = {
              description = ''Auth for Phoenix'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    authentic = authentic_0_0_1;

    authorize_0_3_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "authorize";
            version = "0.3.1";
            src = fetchHex {
              pkg = "authorize";
              version = "0.3.1";
              sha256 =
                "9f59b90eff470f165ecbd2457e9160adaf457b3396e07bb4e4b8c8ad42af7ada";
            };

            meta = {
              description = ''Rule based authorization for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jfrolich/authorize";
            };
          } // packageOverrides)
      ) {};

    authorize = authorize_0_3_1;

    authsense_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          comeonin_3_0_2,
          ecto_2_1_4,
          plug_1_3_5
        }:
          buildMix ({
            name = "authsense";
            version = "0.3.0";
            src = fetchHex {
              pkg = "authsense";
              version = "0.3.0";
              sha256 =
                "b8785f1fb98df89daf2a32824baf10b63ffc393237383878f165d58e35f34117";
            };
            beamDeps  = [ comeonin_3_0_2 ecto_2_1_4 plug_1_3_5 ];

            meta = {
              description = ''Sensible helpers for authentication for
                            Phoenix/Ecto.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rstacruz/authsense";
            };
          } // packageOverrides)
      ) {};

    authsense = authsense_0_3_0;

    authy_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "authy";
            version = "0.1.1";
            src = fetchHex {
              pkg = "authy";
              version = "0.1.1";
              sha256 =
                "92d6a69cf09c9c71262b994dea2850de866852ce94cf9230ad4f944ee486524b";
            };

            meta = {
              description = ''[DEPRECATED] Please use bodyguard instead.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/schrockwell/bodyguard";
            };
          } // packageOverrides)
      ) {};

    authy = authy_0_1_1;

    auto_doc_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          plug_1_3_5,
          poison_1_5_2
        }:
          buildMix ({
            name = "auto_doc";
            version = "0.0.2";
            src = fetchHex {
              pkg = "auto_doc";
              version = "0.0.2";
              sha256 =
                "9c4b30c526e59f63173fe2f0d0c360ac678f1e7a11adcf209dfc843a3e63e6f7";
            };
            beamDeps  = [ plug_1_3_5 poison_1_5_2 ];

            meta = {
              description = ''A package that will create REST API docs based on
                            your ExUnit tests.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/meatherly/auto_doc";
            };
          } // packageOverrides)
      ) {};

    auto_doc = auto_doc_0_0_2;

    auto_linker_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "auto_linker";
            version = "0.1.1";
            src = fetchHex {
              pkg = "auto_linker";
              version = "0.1.1";
              sha256 =
                "f355c3826ede5ad1097cb1f6096dc51f320c19263f9a59c70068f8c3667aa3f1";
            };

            meta = {
              description = ''AutoLinker is a basic package for turning website
                            names into links.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/smpallen99/auto_linker";
            };
          } // packageOverrides)
      ) {};

    auto_linker = auto_linker_0_1_1;

    auto_process_registry_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "auto_process_registry";
            version = "0.1.0";
            src = fetchHex {
              pkg = "auto_process_registry";
              version = "0.1.0";
              sha256 =
                "c616713637ab1a23260a7b47838021208a3c905bc9083600399aab45fb100ef8";
            };

            meta = {
              description = ''A simple process registry that can instantiate
                            new processes on the fly'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/cdegroot/auto_process_registry";
            };
          } // packageOverrides)
      ) {};

    auto_process_registry = auto_process_registry_0_1_0;

    autobots_license_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_0_4,
          plug_1_3_5
        }:
          buildMix ({
            name = "autobots_license";
            version = "0.1.0";
            src = fetchHex {
              pkg = "autobots_license";
              version = "0.1.0";
              sha256 =
                "7cfa258ce5eff01018dfd6faf509b430d03770fb733c1b10217b9e52770014b3";
            };
            beamDeps  = [ cowboy_1_0_4 plug_1_3_5 ];

            meta = {    };
          } // packageOverrides)
      ) {};

    autobots_license = autobots_license_0_1_0;

    autocompletex_0_1_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_0_4,
          plug_1_3_5,
          poison_3_1_0,
          redix_0_6_1
        }:
          buildMix ({
            name = "autocompletex";
            version = "0.1.3";
            src = fetchHex {
              pkg = "autocompletex";
              version = "0.1.3";
              sha256 =
                "60674047069b8ef7f9cd51084912b6ec9441292f0d509fc0d3176e2314f1a407";
            };
            beamDeps  = [ cowboy_1_0_4 plug_1_3_5 poison_3_1_0 redix_0_6_1 ];

            meta = {
              longDescription = ''Autocompletex is a low-latency plug and play
                                autocomplete tool using Redis sorted set.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/rickyhan/autocompletex";
            };
          } // packageOverrides)
      ) {};

    autocompletex = autocompletex_0_1_3;

    avex_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "avex";
            version = "0.2.0";
            src = fetchHex {
              pkg = "avex";
              version = "0.2.0";
              sha256 =
                "e63970026cc566e9aa9c24c261f43843a7553835d2009b16e838217644ded815";
            };

            meta = {
              description = ''Awesome validations for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jonhkr/avex";
            };
          } // packageOverrides)
      ) {};

    avex = avex_0_2_0;

    avocado_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "avocado";
            version = "0.0.1";
            src = fetchHex {
              pkg = "avocado";
              version = "0.0.1";
              sha256 =
                "53f6bd4e5b84d300e7419c102dc77350703aec67674899240917eb8cdf48c307";
            };

            meta = {
              description = ''A graph domain library for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/austinsmorris/avocado";
            };
          } // packageOverrides)
      ) {};

    avocado = avocado_0_0_1;

    avro_rpc_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ex_avro_0_1_0 }:
          buildMix ({
            name = "avro_rpc";
            version = "0.1.0";
            src = fetchHex {
              pkg = "avro_rpc";
              version = "0.1.0";
              sha256 =
                "d166c497b9ff9195e113ea86e2fe929c645232339d30c219e6b517a22cd81dcb";
            };
            beamDeps  = [ ex_avro_0_1_0 ];

            meta = {
              description = ''An Elixir package for making `AvroRPC` calls over
                            TCP.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cafreeman/avro_rpc";
            };
          } // packageOverrides)
      ) {};

    avro_rpc = avro_rpc_0_1_0;

    avrolixr_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_3_1_0 }:
          buildMix ({
            name = "avrolixr";
            version = "0.3.0";
            src = fetchHex {
              pkg = "avrolixr";
              version = "0.3.0";
              sha256 =
                "d9bbbd84e7b1d520242bb87137294094f91db160dbcbf3863cfaec094d3ef8b5";
            };
            beamDeps  = [ poison_3_1_0 ];

            meta = {
              description = ''An Elixir wrapper for the `erlavro` Avro
                            package.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/avvo/avrolixr";
            };
          } // packageOverrides)
      ) {};

    avrolixr = avrolixr_0_3_0;

    aws_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_9_2,
          poison_1_0_2,
          timex_3_0_5
        }:
          buildMix ({
            name = "aws";
            version = "0.2.0";
            src = fetchHex {
              pkg = "aws";
              version = "0.2.0";
              sha256 =
                "097573a291e77d3ae4e9646d28e40be596a6ff278b9382017327466370a6d0ea";
            };
            beamDeps  = [ httpoison_0_9_2 poison_1_0_2 timex_3_0_5 ];

            meta = {
              description = ''AWS clients for Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/jkakar/aws-elixir";
            };
          } // packageOverrides)
      ) {};

    aws_0_5_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0,
          timex_3_1_15
        }:
          buildMix ({
            name = "aws";
            version = "0.5.0";
            src = fetchHex {
              pkg = "aws";
              version = "0.5.0";
              sha256 =
                "01a3dc8a76c58d2c3bef30b129d992022478deca9e492078b90867a415285bb2";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 timex_3_1_15 ];

            meta = {
              description = ''AWS clients for Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/jkakar/aws-elixir";
            };
          } // packageOverrides)
      ) {};

    aws = aws_0_5_0;

    aws_auth_0_6_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "aws_auth";
            version = "0.6.4";
            src = fetchHex {
              pkg = "aws_auth";
              version = "0.6.4";
              sha256 =
                "b05602dd955b4582cb93fa48ac49fc1b9fac020df9c1899dc9ec9df19fd0ddcd";
            };

            meta = {
              description = ''AWS Signature Version 4 Signing Library'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/bryanjos/aws_auth";
            };
          } // packageOverrides)
      ) {};

    aws_auth = aws_auth_0_6_4;

    aws_cli_0_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, erlexec_1_1_0 }:
          buildRebar3 ({
            name = "aws_cli";
            version = "0.1.0";
            src = fetchHex {
              pkg = "aws_cli";
              version = "0.1.0";
              sha256 =
                "14fd91c4752a5eb5b2c781c4843589824b35750d7785b57e0460ba6d96bfe8c1";
            };

            beamDeps  = [ erlexec_1_1_0 ];

            meta = {
              description = ''AWS cli wrapper for Erlang'';

              homepage = "https://github.com/fyler/aws_cli";
            };
          } // packageOverrides)
      ) {};

    aws_cli = aws_cli_0_1_0;

    aws_erlang_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          erlware_commons_0_18_0,
          hackney_1_4_8,
          jsx_2_8_0
        }:
          buildMix ({
            name = "aws_erlang";
            version = "0.1.1";
            src = fetchHex {
              pkg = "aws_erlang";
              version = "0.1.1";
              sha256 =
                "5a0f27869ec106eac25fa66aa39f226a2eee3f6b3ab02879e4fa60bab7937709";
            };
            beamDeps  = [ erlware_commons_0_18_0 hackney_1_4_8 jsx_2_8_0 ];

            meta = {
              description = ''aws clients for erlang'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/jkakar/aws-erlang";
            };
          } // packageOverrides)
      ) {};

    aws_erlang = aws_erlang_0_1_1;

    aws_http_0_2_4 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          barrel_jiffy_0_14_4,
          lhttpc_1_3_0
        }:
          buildRebar3 ({
            name = "aws_http";
            version = "0.2.4";
            src = fetchHex {
              pkg = "aws_http";
              version = "0.2.4";
              sha256 =
                "96065da0d348a8e47e01531cfa720615e15a21c1bd4e5c82decf56026cde128f";
            };

            beamDeps  = [ barrel_jiffy_0_14_4 lhttpc_1_3_0 ];

            meta = {
              description = ''Amazon AWS HTTP helpers'';

              homepage = "https://github.com/anha0825/erl_aws_http";
            };
          } // packageOverrides)
      ) {};

    aws_http = aws_http_0_2_4;

    aws_sign_url_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "aws_sign_url";
            version = "0.1.0";
            src = fetchHex {
              pkg = "aws_sign_url";
              version = "0.1.0";
              sha256 =
                "09bf67c86d8d2147dfd081be4179962606b2cce8e7b6229dd670e3a114baa391";
            };

            meta = {
              description = ''Provides a function to sign Amazon REST API
                            request URLs'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nithinbekal/aws-sign-url";
            };
          } // packageOverrides)
      ) {};

    aws_sign_url = aws_sign_url_0_1_0;

    axe_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "axe";
            version = "0.1.0";
            src = fetchHex {
              pkg = "axe";
              version = "0.1.0";
              sha256 =
                "daaf8ae2f6948398cbf19e59a726cf83a9483e4141068bed9ee6713dc560e942";
            };

            meta = {
              description = ''The access sigil'';
              license = stdenv.lib.licenses.mpl20;
            };
          } // packageOverrides)
      ) {};

    axe = axe_0_1_0;

    azalea_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_0_4,
          ecto_2_1_4,
          httpoison_0_9_2,
          plug_1_2_5,
          poison_2_2_0
        }:
          buildMix ({
            name = "azalea";
            version = "0.0.1";
            src = fetchHex {
              pkg = "azalea";
              version = "0.0.1";
              sha256 =
                "3f941a567f48eeb787104f8f1931c187b1fd8ab9dfb758089bb2b165f96a9efe";
            };
            beamDeps  = [
                          cowboy_1_0_4
                          ecto_2_1_4
                          httpoison_0_9_2
                          plug_1_2_5
                          poison_2_2_0
                        ];

            meta = {
              description = ''Azalea is aim to make upload file in Phoenix
                            easy.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/h1u2i3/azalea";
            };
          } // packageOverrides)
      ) {};

    azalea = azalea_0_0_1;

    azure_push_client_1_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_9_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "azure_push_client";
            version = "1.0.0";
            src = fetchHex {
              pkg = "azure_push_client";
              version = "1.0.0";
              sha256 =
                "d2005f332636949e2b5177681ef32ae4ad001c7dabb91ba589e7ffdcbed6303b";
            };
            beamDeps  = [ httpoison_0_9_2 poison_2_2_0 ];

            meta = {
              description = ''Azure Push Client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/chaione/azure_push_client";
            };
          } // packageOverrides)
      ) {};

    azure_push_client = azure_push_client_1_0_0;

    b2_0_0_6 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_8_3,
          poison_1_5_2
        }:
          buildMix ({
            name = "b2";
            version = "0.0.6";
            src = fetchHex {
              pkg = "b2";
              version = "0.0.6";
              sha256 =
                "f8b33d1ec36576dfbca3f2f4c5fad1a9a227207d1ef63b3a388778e8fad3333a";
            };
            beamDeps  = [ httpoison_0_8_3 poison_1_5_2 ];

            meta = {
              description = ''Elixir B2 cloud API wrapper'';

            };
          } // packageOverrides)
      ) {};

    b2 = b2_0_0_6;

    b2_client_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_9_2,
          poison_1_0_2
        }:
          buildMix ({
            name = "b2_client";
            version = "0.0.2";
            src = fetchHex {
              pkg = "b2_client";
              version = "0.0.2";
              sha256 =
                "7cadf79c58ab108c35df320ab949219ef0f3b885a4ee7d9f459984d0952a9bac";
            };
            beamDeps  = [ httpoison_0_9_2 poison_1_0_2 ];

            meta = {
              description = ''A Backblaze B2 library for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/keichan34/b2_client";
            };
          } // packageOverrides)
      ) {};

    b2_client = b2_client_0_0_2;

    b64fast_0_2_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "b64fast";
            version = "0.2.1";
            src = fetchHex {
              pkg = "b64fast";
              version = "0.2.1";
              sha256 =
                "8ec983eb80674c4b15c6616660d2e7e7d763afaf8a8179027e517b4c23098bf3";
            };
            compilePorts = true;

            meta = {
              longDescription = ''This NIF complements Erlang with a fast and
                                optimized way of encoding and decoding bulk
                                Base64 data. Compliant with RFC4648 - The
                                Base16, Base32, and Base64 Data Encodings.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zuckschwerdt/b64fast";
            };
          } // packageOverrides)
      ) {};

    b64fast = b64fast_0_2_1;

    backoff_1_1_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "backoff";
            version = "1.1.3";
            src = fetchHex {
              pkg = "backoff";
              version = "1.1.3";
              sha256 =
                "30cead738d20e4c8d36cd37857dd5e23aeba57cb868bf64766d47d371422bdff";
            };

            buildPlugins  = [ rebar3_proper ];


            meta = {
              description = ''Exponential backoffs library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ferd/backoff";
            };
          } // packageOverrides)
      ) {};

    backoff = backoff_1_1_3;

    backports_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "backports";
            version = "0.2.0";
            src = fetchHex {
              pkg = "backports";
              version = "0.2.0";
              sha256 =
                "4de05a3296a84fbac33195afd8c30873345a1042a813d37674740f66bbadb70c";
            };

            meta = {
              description = ''Precompiler to make new code work with old Elixir
                            versions'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/leifg/backports";
            };
          } // packageOverrides)
      ) {};

    backports = backports_0_2_0;

    backtrex_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "backtrex";
            version = "0.1.2";
            src = fetchHex {
              pkg = "backtrex";
              version = "0.1.2";
              sha256 =
                "05513edbf4caa1fa37bcccd68487bf1a2a660875ad77b5d0e77a1d420d644b96";
            };

            meta = {
              description = ''Backtracking behaviour to solve discrete problems
                            by brute force.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/jmitchell/backtrex";
            };
          } // packageOverrides)
      ) {};

    backtrex = backtrex_0_1_2;

    backy_0_0_15 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          poison_2_2_0,
          postgrex_1_0_0_rc_1
        }:
          buildMix ({
            name = "backy";
            version = "0.0.15";
            src = fetchHex {
              pkg = "backy";
              version = "0.0.15";
              sha256 =
                "04f1810374ce1640b90acf0e4ede4df4ad2e10fe4d25f6be2a933197894b0df0";
            };
            beamDeps  = [ poison_2_2_0 postgrex_1_0_0_rc_1 ];

            meta = {
              description = ''A simple background job queue backed by
                            postgresql.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kuon/backy";
            };
          } // packageOverrides)
      ) {};

    backy = backy_0_0_15;

    bag_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "bag";
            version = "0.1.0";
            src = fetchHex {
              pkg = "bag";
              version = "0.1.0";
              sha256 =
                "2192c6ae21379a6bd152f399671548206d408a398119c5289c835050c5fb97c5";
            };

            meta = {
              description = ''A collection of structured data bags, in the form
                            of structs.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/amorphid/bag-elixir";
            };
          } // packageOverrides)
      ) {};

    bag = bag_0_1_0;

    balalaika_bear_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "balalaika_bear";
            version = "0.1.1";
            src = fetchHex {
              pkg = "balalaika_bear";
              version = "0.1.1";
              sha256 =
                "66ab735933e84de84d6d66ab1fdc526f216995fd5aa7affa3127ceb7325f9cf0";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''VK API wrapper for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ayrat555/balalaika_bear";
            };
          } // packageOverrides)
      ) {};

    balalaika_bear = balalaika_bear_0_1_1;

    balanced_3_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_2_2_1,
          poison_1_2_1
        }:
          buildMix ({
            name = "balanced";
            version = "3.1.0";
            src = fetchHex {
              pkg = "balanced";
              version = "3.1.0";
              sha256 =
                "f86f199d76ac66407fbb82fb927e999ec4119a617500965b824ceb4071fcd2d2";
            };
            beamDeps  = [ httpotion_2_2_1 poison_1_2_1 ];

            meta = {
              description = ''Balanced API for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bryanjos/balanced-elixir";
            };
          } // packageOverrides)
      ) {};

    balanced = balanced_3_1_0;

    bamboo_0_4_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          plug_1_3_5,
          poison_3_1_0
        }:
          buildMix ({
            name = "bamboo";
            version = "0.4.2";
            src = fetchHex {
              pkg = "bamboo";
              version = "0.4.2";
              sha256 =
                "38a3f7c0342412aa7cf729af40976928b562b60b6e4e5f0e25f912a0e8f92f4e";
            };
            beamDeps  = [ httpoison_0_11_2 plug_1_3_5 poison_3_1_0 ];

            meta = {
              longDescription = ''Straightforward, powerful, and adapter based
                                Elixir email library. Works with Mandrill,
                                Mailgun, SendGrid, SparkPost, Postmark,
                                in-memory, and test.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/paulcsmith/bamboo";
            };
          } // packageOverrides)
      ) {};

    bamboo_0_7_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          plug_1_3_5,
          poison_3_1_0
        }:
          buildMix ({
            name = "bamboo";
            version = "0.7.0";
            src = fetchHex {
              pkg = "bamboo";
              version = "0.7.0";
              sha256 =
                "7b46bcf1042df82460f9d866d8b655775e9d6877f5871aebeaa3144f51afdb70";
            };
            beamDeps  = [ httpoison_0_11_2 plug_1_3_5 poison_3_1_0 ];

            meta = {
              longDescription = ''Straightforward, powerful, and adapter based
                                Elixir email library. Works with Mandrill,
                                Mailgun, SendGrid, SparkPost, Postmark,
                                in-memory, and test.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/paulcsmith/bamboo";
            };
          } // packageOverrides)
      ) {};

    bamboo_0_8_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_8_6,
          plug_1_3_5,
          poison_3_1_0
        }:
          buildMix ({
            name = "bamboo";
            version = "0.8.0";
            src = fetchHex {
              pkg = "bamboo";
              version = "0.8.0";
              sha256 =
                "855f00da717b91853d549c8c84b411785aec30c0ef31f45bccd723f4fbbdb6b5";
            };
            beamDeps  = [ hackney_1_8_6 plug_1_3_5 poison_3_1_0 ];

            meta = {
              longDescription = ''Straightforward, powerful, and adapter based
                                Elixir email library. Works with Mandrill,
                                Mailgun, SendGrid, SparkPost, Postmark,
                                in-memory, and test.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/paulcsmith/bamboo";
            };
          } // packageOverrides)
      ) {};

    bamboo_1_0_0_rc_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_8_6,
          plug_1_3_5,
          poison_3_1_0
        }:
          buildMix ({
            name = "bamboo";
            version = "1.0.0-rc.1";
            src = fetchHex {
              pkg = "bamboo";
              version = "1.0.0-rc.1";
              sha256 =
                "836e5bb41b043b1dd8a8380544ca26ff7258db1ca0413b2ed80a6dd41ddd0672";
            };
            beamDeps  = [ hackney_1_8_6 plug_1_3_5 poison_3_1_0 ];

            meta = {
              longDescription = ''Straightforward, powerful, and adapter based
                                Elixir email library. Works with Mandrill,
                                Mailgun, SendGrid, SparkPost, Postmark,
                                in-memory, and test.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/paulcsmith/bamboo";
            };
          } // packageOverrides)
      ) {};

    bamboo = bamboo_1_0_0_rc_1;

    bamboo_espec_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          bamboo_1_0_0_rc_1,
          espec_1_4_0
        }:
          buildMix ({
            name = "bamboo_espec";
            version = "0.1.0";
            src = fetchHex {
              pkg = "bamboo_espec";
              version = "0.1.0";
              sha256 =
                "0e5f46b0ddeaca8e2199cbbb64d8d0a4bdb19c74c2b759754d0fb9df62e75c86";
            };
            beamDeps  = [ bamboo_1_0_0_rc_1 espec_1_4_0 ];

            meta = {
              description = ''Bamboo assertions for ESpec'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/facto/bamboo_espec";
            };
          } // packageOverrides)
      ) {};

    bamboo_espec = bamboo_espec_0_1_0;

    bamboo_mailjet_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, bamboo_0_7_0 }:
          buildMix ({
            name = "bamboo_mailjet";
            version = "0.0.1";
            src = fetchHex {
              pkg = "bamboo_mailjet";
              version = "0.0.1";
              sha256 =
                "16d9c5b0b72c8e3794573b49fe10edf1343a5aebb23d5f8a394057b8904dc501";
            };
            beamDeps  = [ bamboo_0_7_0 ];

            meta = {
              description = ''A Mailjet adapter for Bamboo'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/moxide/bamboo_mailjet";
            };
          } // packageOverrides)
      ) {};

    bamboo_mailjet = bamboo_mailjet_0_0_1;

    bamboo_postageapp_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          bamboo_1_0_0_rc_1,
          hackney_1_8_6,
          plug_1_3_5,
          poison_3_1_0
        }:
          buildMix ({
            name = "bamboo_postageapp";
            version = "0.0.1";
            src = fetchHex {
              pkg = "bamboo_postageapp";
              version = "0.0.1";
              sha256 =
                "bbc72265a63eaf2784fd1bd2ff447b22412ba02e9db1b144041113e6c2570be7";
            };
            beamDeps  = [
                          bamboo_1_0_0_rc_1
                          hackney_1_8_6
                          plug_1_3_5
                          poison_3_1_0
                        ];

            meta = {
              description = ''A Bamboo adapter for PostageApp'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/GBH/bamboo_postageapp";
            };
          } // packageOverrides)
      ) {};

    bamboo_postageapp = bamboo_postageapp_0_0_1;

    bamboo_postmark_0_4_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          bamboo_1_0_0_rc_1,
          hackney_1_8_6,
          plug_1_3_5,
          poison_3_1_0
        }:
          buildMix ({
            name = "bamboo_postmark";
            version = "0.4.1";
            src = fetchHex {
              pkg = "bamboo_postmark";
              version = "0.4.1";
              sha256 =
                "9863dbacb5acd3ac68dab69f7c6d313ce5c3f0b683bba4985384a57e7838dd93";
            };
            beamDeps  = [
                          bamboo_1_0_0_rc_1
                          hackney_1_8_6
                          plug_1_3_5
                          poison_3_1_0
                        ];

            meta = {
              description = ''A Bamboo adapter for Postmark'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pablo-co/bamboo_postmark";
            };
          } // packageOverrides)
      ) {};

    bamboo_postmark = bamboo_postmark_0_4_1;

    bamboo_sendcloud_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          bamboo_1_0_0_rc_1,
          hackney_1_8_6,
          plug_1_3_5,
          poison_3_1_0
        }:
          buildMix ({
            name = "bamboo_sendcloud";
            version = "0.2.0";
            src = fetchHex {
              pkg = "bamboo_sendcloud";
              version = "0.2.0";
              sha256 =
                "37e35b408394f1be2f3cefb3fd3064527e92bfd8e6e5a546aaad705f105b405a";
            };
            beamDeps  = [
                          bamboo_1_0_0_rc_1
                          hackney_1_8_6
                          plug_1_3_5
                          poison_3_1_0
                        ];

            meta = {
              description = ''A Bamboo adapter for Sendcloud'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/linjunpop/bamboo_sendcloud";
            };
          } // packageOverrides)
      ) {};

    bamboo_sendcloud = bamboo_sendcloud_0_2_0;

    bamboo_sendgrid_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          bamboo_0_4_2,
          httpoison_0_11_2,
          poison_1_5_2
        }:
          buildMix ({
            name = "bamboo_sendgrid";
            version = "0.1.0";
            src = fetchHex {
              pkg = "bamboo_sendgrid";
              version = "0.1.0";
              sha256 =
                "ee44ac3f096777064c4cf02df238276338914295f5b17caf38192789a590825c";
            };
            beamDeps  = [ bamboo_0_4_2 httpoison_0_11_2 poison_1_5_2 ];

            meta = {
              description = ''A SendGrid adapter for Bamboo.'';
              license = stdenv.lib.licenses.publicDomain;
            };
          } // packageOverrides)
      ) {};

    bamboo_sendgrid = bamboo_sendgrid_0_1_0;

    bamboo_sendinblue_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, bamboo_0_8_0 }:
          buildMix ({
            name = "bamboo_sendinblue";
            version = "0.1.0";
            src = fetchHex {
              pkg = "bamboo_sendinblue";
              version = "0.1.0";
              sha256 =
                "0df2b3acca05c20b9d1e4452d85f5a4ad547cee9d77bfbafc4ffc4c8e63cba6a";
            };
            beamDeps  = [ bamboo_0_8_0 ];

            meta = {
              description = ''A Bamboo adapter for SendinBlue'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/biospank/bamboo_sendinblue";
            };
          } // packageOverrides)
      ) {};

    bamboo_sendinblue = bamboo_sendinblue_0_1_0;

    bamboo_smtp_1_2_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          bamboo_0_7_0,
          gen_smtp_0_11_0
        }:
          buildMix ({
            name = "bamboo_smtp";
            version = "1.2.1";
            src = fetchHex {
              pkg = "bamboo_smtp";
              version = "1.2.1";
              sha256 =
                "7fc183e9045b0faee3960ac3b5e9d35cd10100733f3936064b248327bb3d42b9";
            };
            beamDeps  = [ bamboo_0_7_0 gen_smtp_0_11_0 ];

            meta = {
              description = ''A Bamboo adapter for SMTP'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/fewlinesco/bamboo_smtp";
            };
          } // packageOverrides)
      ) {};

    bamboo_smtp_1_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          bamboo_0_8_0,
          gen_smtp_0_11_0
        }:
          buildMix ({
            name = "bamboo_smtp";
            version = "1.3.0";
            src = fetchHex {
              pkg = "bamboo_smtp";
              version = "1.3.0";
              sha256 =
                "ea9ef6a72616b9a1bb3f57fee0d233057130e1386f4d87d0acfeb3e9cee88b33";
            };
            beamDeps  = [ bamboo_0_8_0 gen_smtp_0_11_0 ];

            meta = {
              description = ''A Bamboo adapter for SMTP'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/fewlinesco/bamboo_smtp";
            };
          } // packageOverrides)
      ) {};

    bamboo_smtp = bamboo_smtp_1_3_0;

    bamboo_sparkpost_0_5_1 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, bamboo_1_0_0_rc_1
        }:
          buildMix ({
            name = "bamboo_sparkpost";
            version = "0.5.1";
            src = fetchHex {
              pkg = "bamboo_sparkpost";
              version = "0.5.1";
              sha256 =
                "dc4165282d13fe431b78dbf04db5e280bc4fef9f87d3b0e20e78e008c8c6b3de";
            };
            beamDeps  = [ bamboo_1_0_0_rc_1 ];

            meta = {
              description = ''A Bamboo adapter for the SparkPost email
                            service'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/andrewtimberlake/bamboo_sparkpost";
            };
          } // packageOverrides)
      ) {};

    bamboo_sparkpost = bamboo_sparkpost_0_5_1;

    bandwidth_1_2_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_7_5,
          poison_1_4_0
        }:
          buildMix ({
            name = "bandwidth";
            version = "1.2.1";
            src = fetchHex {
              pkg = "bandwidth";
              version = "1.2.1";
              sha256 =
                "cfc31517bd160cc9a2e6c55b664eccadc001fc650bd8ea9f01418feb8e7194b5";
            };
            beamDeps  = [ httpoison_0_7_5 poison_1_4_0 ];

            meta = {
              description = ''An Elixir client library for the Bandwidth
                            Application Platform'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/wtcross/elixir-bandwidth";
            };
          } // packageOverrides)
      ) {};

    bandwidth = bandwidth_1_2_1;

    bang_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "bang";
            version = "0.1.1";
            src = fetchHex {
              pkg = "bang";
              version = "0.1.1";
              sha256 =
                "089fa32034cfe6eccbcd9f6cb8fb2d154f9089e4adbc679000ea75d7c5f08443";
            };

            meta = {
              longDescription = ''Bang simply adds dynamic bang! functions to
                                your existing module functions with
                                after-callback.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mustafaturan/bang";
            };
          } // packageOverrides)
      ) {};

    bang = bang_0_1_1;

    bank_0_2_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, bucs_1_0_10 }:
          buildMix ({
            name = "bank";
            version = "0.2.2";
            src = fetchHex {
              pkg = "bank";
              version = "0.2.2";
              sha256 =
                "e1166c8fd1d6969dfaebf71b7403d60bef1160ce93fc09cfa0c71e12c94daf50";
            };
            beamDeps  = [ bucs_1_0_10 ];

            meta = {
              description = ''Erlang/Elixir module to manipulate bank data'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/botsunit/bank";
            };
          } // packageOverrides)
      ) {};

    bank = bank_0_2_2;

    bank_card_info_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_3_0_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "bank_card_info";
            version = "0.0.1";
            src = fetchHex {
              pkg = "bank_card_info";
              version = "0.0.1";
              sha256 =
                "e0350e8e9bb740f1f06fa000f4cd9f4e44e0ff8c38f1b47df511881e354c85d4";
            };
            beamDeps  = [ httpotion_3_0_2 poison_3_1_0 ];

            meta = {
              description = ''Get brand, card type and country by first digits
                            of a bank card.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/vredniy/elixir-bank-card-info";
            };
          } // packageOverrides)
      ) {};

    bank_card_info = bank_card_info_0_0_1;

    bankster_0_2_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "bankster";
            version = "0.2.2";
            src = fetchHex {
              pkg = "bankster";
              version = "0.2.2";
              sha256 =
                "000df06a7701e11f1b9cba4595873f8c7d8e55afde22153fd3d6d19e55bc29f7";
            };

            meta = {
              description = ''Bankster is an IBAN and BIC validation tool for
                            Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/railsmechanic/bankster";
            };
          } // packageOverrides)
      ) {};

    bankster = bankster_0_2_2;

    banner_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "banner";
            version = "0.1.0";
            src = fetchHex {
              pkg = "banner";
              version = "0.1.0";
              sha256 =
                "309a752cd592bd8dda3526865d050b1e20a953baed8b7480d0489001688f7a0f";
            };

            meta = {
              description = ''It is Elixir sysvbanner port from
                            https://github.com/uffejakobsen/sysvbanner.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/winebarrel/elixir-sysvbanner";
            };
          } // packageOverrides)
      ) {};

    banner = banner_0_1_0;

    barenboim_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poolboy_1_5_1 }:
          buildMix ({
            name = "barenboim";
            version = "0.3.0";
            src = fetchHex {
              pkg = "barenboim";
              version = "0.3.0";
              sha256 =
                "9e5c49a5bd50df11d2419da8c52aa0fbb557d6f2967b72c3830ff9803c8e797c";
            };
            beamDeps  = [ poolboy_1_5_1 ];

            meta = {
              description = ''Barenboim helps you with data streaming
                            dependencies in concurrent flows'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mendrugory/barenboim";
            };
          } // packageOverrides)
      ) {};

    barenboim = barenboim_0_3_0;

    barista_0_2_2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "barista";
            version = "0.2.2";
            src = fetchHex {
              pkg = "barista";
              version = "0.2.2";
              sha256 =
                "cd850faac569fcc803d2459544de9e2eebf4a095f9a6aefe451bead13af62415";
            };

            meta = {
              description = ''Hot lmugs of LFE for your simple HTTP needs'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/lfex/barista";
            };
          } // packageOverrides)
      ) {};

    barista = barista_0_2_2;

    barlix_0_3_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, png_0_1_1 }:
          buildMix ({
            name = "barlix";
            version = "0.3.2";
            src = fetchHex {
              pkg = "barlix";
              version = "0.3.2";
              sha256 =
                "07a6d6281824b99a37bad34a3b4cbb38864c14d310f4afa56866a6d2605fd6ce";
            };
            beamDeps  = [ png_0_1_1 ];

            meta = {
              description = ''Barcode generator'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ananthakumaran/barlix";
            };
          } // packageOverrides)
      ) {};

    barlix = barlix_0_3_2;

    barracuda_0_4_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_9_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "barracuda";
            version = "0.4.0";
            src = fetchHex {
              pkg = "barracuda";
              version = "0.4.0";
              sha256 =
                "320af10dd93045336c2a9df580c162bb1dfdf216a6f49296e9b493dba7696e2c";
            };
            beamDeps  = [ httpoison_0_9_2 poison_2_2_0 ];

            meta = {
              description = ''Library that allows generation of HTTP clients in
                            a declarative manner.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ashneyderman/barracuda";
            };
          } // packageOverrides)
      ) {};

    barracuda = barracuda_0_4_0;

    barrel_ibrowse_4_3_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "barrel_ibrowse";
            version = "4.3.1";
            src = fetchHex {
              pkg = "barrel_ibrowse";
              version = "4.3.1";
              sha256 =
                "3775418fa5031c99cf46bc665be4898cf7df72530c69c3355c8377646899512d";
            };

            meta = {
              description = ''Erlang HTTP client application'';
              license = with stdenv.lib.licenses; [ bsd3 free ];
              homepage = "https://github.com/barrel-db/ibrowse";
            };
          } // packageOverrides)
      ) {};

    barrel_ibrowse = barrel_ibrowse_4_3_1;

    barrel_jiffy_0_14_4 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "barrel_jiffy";
            version = "0.14.4";
            src = fetchHex {
              pkg = "barrel_jiffy";
              version = "0.14.4";
              sha256 =
                "3b730d6a18e988b8411f449bbb5df3637eb7bea864302924581b2391dd6b6e71";
            };
            compilePorts = true;

            meta = {
              description = ''JSON Decoder/Encoder.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/barrel-db/jiffy";
            };
          } // packageOverrides)
      ) {};

    barrel_jiffy_0_14_5 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "barrel_jiffy";
            version = "0.14.5";
            src = fetchHex {
              pkg = "barrel_jiffy";
              version = "0.14.5";
              sha256 =
                "8a874c6dbcf439a7d7b300b4463f47e088fd54e2b715ef7261e21807ee421f47";
            };
            compilePorts = true;

            meta = {
              description = ''JSON Decoder/Encoder.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/barrel-db/jiffy";
            };
          } // packageOverrides)
      ) {};

    barrel_jiffy = barrel_jiffy_0_14_5;

    barrel_oauth_1_6_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "barrel_oauth";
            version = "1.6.0";
            src = fetchHex {
              pkg = "barrel_oauth";
              version = "1.6.0";
              sha256 =
                "b2a800b771d45f32a9a55d416054b3bdfab3a925b62e8000f2c08b719390d4dd";
            };

            meta = {
              description = ''An Erlang OAuth 1.0 implementation'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/barrel-db/erlang-oauth";
            };
          } // packageOverrides)
      ) {};

    barrel_oauth = barrel_oauth_1_6_0;

    barrel_unofficial_2_15_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "barrel_unofficial";
            version = "2.15.0";
            src = fetchHex {
              pkg = "barrel_unofficial";
              version = "2.15.0";
              sha256 =
                "be52e600bf8f2377f017734c31b60eb8bf85722c61a6e4977a9a77703812a1a1";
            };

            meta = {
              description = ''MochiMedia Web Server'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mochi/mochiweb";
            };
          } // packageOverrides)
      ) {};

    barrel_unofficial = barrel_unofficial_2_15_0;

    base16_1_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "base16";
            version = "1.0.0";
            src = fetchHex {
              pkg = "base16";
              version = "1.0.0";
              sha256 =
                "02afd0827e61a7b07093873e063575ca3a2b07520567c7f8cec7c5d42f052d76";
            };

            meta = {
              description = ''Base16 encoding and decoding'';
              license = with stdenv.lib.licenses; [ bsd3 free ];
              homepage = "https://github.com/goj/base16";
            };
          } // packageOverrides)
      ) {};

    base16 = base16_1_0_0;

    base36_1_0_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, custom_base_0_2_1
        }:
          buildMix ({
            name = "base36";
            version = "1.0.0";
            src = fetchHex {
              pkg = "base36";
              version = "1.0.0";
              sha256 =
                "6022d73272ebd0a6f600248da05b47576b94f064c6444dd0401df67e717c189e";
            };
            beamDeps  = [ custom_base_0_2_1 ];

            meta = {
              description = ''Base36 encoder/decoder.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nscyclone/base36";
            };
          } // packageOverrides)
      ) {};

    base36 = base36_1_0_0;

    base58_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "base58";
            version = "0.1.0";
            src = fetchHex {
              pkg = "base58";
              version = "0.1.0";
              sha256 =
                "e9746b7fa618f15d22e3098e06b35083977aff8fe0594628baae282769a2ceff";
            };

            meta = {
              description = ''Base58 encoding/decoding for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jrdnull/base58";
            };
          } // packageOverrides)
      ) {};

    base58 = base58_0_1_0;

    base58check_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "base58check";
            version = "0.1.0";
            src = fetchHex {
              pkg = "base58check";
              version = "0.1.0";
              sha256 =
                "29617beb2aaffe27ef40d7232a60beb5ad208667df4f2b619552367698cd4ca4";
            };

            meta = {
              description = ''Elixir implementation of Base58Check encoding
                            meant for Bitcoin '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gjaldon/base58check";
            };
          } // packageOverrides)
      ) {};

    base58check = base58check_0_1_0;

    base62_1_2_1 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, custom_base_0_2_1
        }:
          buildMix ({
            name = "base62";
            version = "1.2.1";
            src = fetchHex {
              pkg = "base62";
              version = "1.2.1";
              sha256 =
                "3b29948de2013d3f93aa898c884a9dff847e7aec75d9d6d8c1dc4c61c2716c42";
            };
            beamDeps  = [ custom_base_0_2_1 ];

            meta = {
              description = ''Base62 encoder/decoder in pure Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/igas/base62";
            };
          } // packageOverrides)
      ) {};

    base62 = base62_1_2_1;

    base62_uuid_1_2_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          base62_1_2_1,
          uuid_1_1_7
        }:
          buildMix ({
            name = "base62_uuid";
            version = "1.2.3";
            src = fetchHex {
              pkg = "base62_uuid";
              version = "1.2.3";
              sha256 =
                "7a12947d7d15249984abad098f902f04a9eae6cd5abc096df307e205551c394b";
            };
            beamDeps  = [ base62_1_2_1 uuid_1_1_7 ];

            meta = {
              description = ''A library for creating Base62-encoded UUIDs'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/usecanvas/base62_uuid";
            };
          } // packageOverrides)
      ) {};

    base62_uuid = base62_uuid_1_2_3;

    base64url_0_0_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "base64url";
            version = "0.0.1";
            src = fetchHex {
              pkg = "base64url";
              version = "0.0.1";
              sha256 =
                "fab09b20e3f5db886725544cbcf875b8e73ec93363954eb8a1a9ed834aa8c1f9";
            };

            meta = {
              description = ''URL safe base64-compatible codec'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dvv/base64url";
            };
          } // packageOverrides)
      ) {};

    base64url = base64url_0_0_1;

    basehangul_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, iconv_1_0_5 }:
          buildMix ({
            name = "basehangul";
            version = "0.2.1";
            src = fetchHex {
              pkg = "basehangul";
              version = "0.2.1";
              sha256 =
                "ce7e3150c79afcf1560c5c7d2f3046c1115c3aed0959d5840cf5fd14b7d4d729";
            };
            beamDeps  = [ iconv_1_0_5 ];

            meta = {
              description = ''Elixir implementation of BaseHangul.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/Dalgona/basehangul";
            };
          } // packageOverrides)
      ) {};

    basehangul = basehangul_0_2_1;

    basex_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "basex";
            version = "1.0.1";
            src = fetchHex {
              pkg = "basex";
              version = "1.0.1";
              sha256 =
                "a6956531a441f78340fe427d326c7fa171ebe432a3522076573aaa55f378e3b8";
            };

            meta = {
              description = ''BaseX - arbitrary alphabet encoding'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mwmiller/basex_ex";
            };
          } // packageOverrides)
      ) {};

    basex = basex_1_0_1;

    basho_exometer_core_1_0_2 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          folsom_0_8_3,
          lager_3_2_4,
          parse_trans_3_0_0,
          setup_1_8_1
        }:
          buildRebar3 ({
            name = "basho_exometer_core";
            version = "1.0.2";
            src = fetchHex {
              pkg = "basho_exometer_core";
              version = "1.0.2";
              sha256 =
                "9929d310ebda2b2f5186d1673e16d22f289c8b6b95d9a14aefdc3aca66481d91";
            };

            beamDeps  = [
                          folsom_0_8_3 lager_3_2_4 parse_trans_3_0_0 setup_1_8_1
                        ];

            meta = {
              description = ''Code instrumentation and metrics collection
                            package.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/basho/exometer_core";
            };
          } // packageOverrides)
      ) {};

    basho_exometer_core = basho_exometer_core_1_0_2;

    basho_folsom_0_7_5 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, bear_0_8_3 }:
          buildRebar3 ({
            name = "basho_folsom";
            version = "0.7.5";
            src = fetchHex {
              pkg = "basho_folsom";
              version = "0.7.5";
              sha256 =
                "1ba55ede42f7527fc7a1e74e28389839e8ce2edca5af7e2f210346f8230eaca8";
            };

            beamDeps  = [ bear_0_8_3 ];

            meta = {
              description = ''Folsom metrics library'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/project-fifo/folsom";
            };
          } // packageOverrides)
      ) {};

    basho_folsom = basho_folsom_0_7_5;

    basho_hamcrest_0_4_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "basho_hamcrest";
            version = "0.4.0";
            src = fetchHex {
              pkg = "basho_hamcrest";
              version = "0.4.0";
              sha256 =
                "ece694e61d78d52d9de337710b8d0ad80add93eab1d84cb7335a648ceffe0f89";
            };

            meta = {
              description = ''Erlang port of Hamcrest'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/basho/hamcrest-erlang";
            };
          } // packageOverrides)
      ) {};

    basho_hamcrest_0_4_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "basho_hamcrest";
            version = "0.4.1";
            src = fetchHex {
              pkg = "basho_hamcrest";
              version = "0.4.1";
              sha256 =
                "26974025bc61bc09ef5b13be5dce5035ca11bf37bf4a865e9d86c455c942298f";
            };

            meta = {
              description = ''Erlang port of Hamcrest'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/basho/hamcrest-erlang";
            };
          } // packageOverrides)
      ) {};

    basho_hamcrest = basho_hamcrest_0_4_1;

    basho_poolboy_0_8_1_p3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "basho_poolboy";
            version = "0.8.1-p3";
            src = fetchHex {
              pkg = "basho_poolboy";
              version = "0.8.1-p3";
              sha256 =
                "8e2ead104eaa80bbfcf5c688774f4ddab73733cab79230e78d097c7ba880c42d";
            };

            meta = {
              description = ''A hunky Erlang worker pool factory'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/project-fif/poolboy";
            };
          } // packageOverrides)
      ) {};

    basho_poolboy_0_8_2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "basho_poolboy";
            version = "0.8.2";
            src = fetchHex {
              pkg = "basho_poolboy";
              version = "0.8.2";
              sha256 =
                "871b60ea391bbe129fd02dbd7a116798d7ee7a20e887e060e868222af36f2b6d";
            };

            meta = {
              description = ''A hunky Erlang worker pool factory'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/project-fif/poolboy";
            };
          } // packageOverrides)
      ) {};

    basho_poolboy = basho_poolboy_0_8_2;

    basho_stats_1_0_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "basho_stats";
            version = "1.0.3";
            src = fetchHex {
              pkg = "basho_stats";
              version = "1.0.3";
              sha256 =
                "d739e733b1c8afcaa467289fca50221753fc8cde6e7b53a79b67f98a2a261f5a";
            };

            meta = {
              description = ''Basic Erlang statistics library'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/basho/basho_stats";
            };
          } // packageOverrides)
      ) {};

    basho_stats = basho_stats_1_0_3;

    basic_auth_2_1_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          plug_1_1_7
        }:
          buildMix ({
            name = "basic_auth";
            version = "2.1.3";
            src = fetchHex {
              pkg = "basic_auth";
              version = "2.1.3";
              sha256 =
                "bcd84542943f6935c1af805306c73b0c6119a4ff255dc180e88547140ec51a93";
            };
            beamDeps  = [ cowboy_1_1_2 plug_1_1_7 ];

            meta = {
              description = ''Basic Authentication Plug'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cultivatehq/basic_auth";
            };
          } // packageOverrides)
      ) {};

    basic_auth = basic_auth_2_1_3;

    bastion_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          absinthe_1_3_0_rc_0,
          plug_1_3_5
        }:
          buildMix ({
            name = "bastion";
            version = "0.1.1";
            src = fetchHex {
              pkg = "bastion";
              version = "0.1.1";
              sha256 =
                "f87c14fe37fa3446092380296fb0dc1b4077d361de868b49ac998f6afa974fcb";
            };
            beamDeps  = [ absinthe_1_3_0_rc_0 plug_1_3_5 ];

            meta = {
              longDescription = ''Bastion provides scope authorization for
                                Absinthe GraphQL Schemas on a per-field
                                basis.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/urbint/bastion";
            };
          } // packageOverrides)
      ) {};

    bastion = bastion_0_1_1;

    batch_please_0_3_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_3_1_0 }:
          buildMix ({
            name = "batch_please";
            version = "0.3.2";
            src = fetchHex {
              pkg = "batch_please";
              version = "0.3.2";
              sha256 =
                "86af6c80ab54312c383d7e87bc61d866a1582b3acb9148f1be8dd26b59eb23a5";
            };
            beamDeps  = [ poison_3_1_0 ];

            meta = {
              description = ''A library for collecting and processing batches
                            of data'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/appcues/batch_please";
            };
          } // packageOverrides)
      ) {};

    batch_please = batch_please_0_3_2;

    batcher_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "batcher";
            version = "0.0.1";
            src = fetchHex {
              pkg = "batcher";
              version = "0.0.1";
              sha256 =
                "738a930f809603dc21e6612c1df38cbc452887ddf34670d20f05e136231f3671";
            };

            meta = {
              longDescription = ''Process a backlog of items after it has grown
                                to a certain size or a defined time has
                                passed'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/behe/batcher";
            };
          } // packageOverrides)
      ) {};

    batcher = batcher_0_0_1;

    battlenet_0_0_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_8_3,
          poison_1_5_2
        }:
          buildMix ({
            name = "battlenet";
            version = "0.0.3";
            src = fetchHex {
              pkg = "battlenet";
              version = "0.0.3";
              sha256 =
                "89bd6d2aaecc4e7c7afba9c4c8b8a3ee0dd1784c9f5ec5e190a690fb4903f165";
            };
            beamDeps  = [ httpoison_0_8_3 poison_1_5_2 ];

            meta = {
              description = ''Elixir library for the Battle.net API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/danielgrieve/battlenet";
            };
          } // packageOverrides)
      ) {};

    battlenet = battlenet_0_0_3;

    battlenetex_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_9_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "battlenetex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "battlenetex";
              version = "0.1.0";
              sha256 =
                "17afa8a9c1fbb57438107f46354970dfe444633090472314b798d96d0492ee48";
            };
            beamDeps  = [ httpoison_0_9_2 poison_2_2_0 ];

            meta = {
              description = ''Battlenet is an Elixir library that exposes
                            Blizzard`s Community Platform API.'';
              license = stdenv.lib.licenses.gpl3;
              homepage = "http://github.com/bryansray/battlenet";
            };
          } // packageOverrides)
      ) {};

    battlenetex = battlenetex_0_1_0;

    baud_0_4_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, modbus_0_3_4 }:
          buildMix ({
            name = "baud";
            version = "0.4.1";
            src = fetchHex {
              pkg = "baud";
              version = "0.4.1";
              sha256 =
                "2953a6bf0709ce369a0035c00141b820bc341b0b309d3ec8737e4383b3ce88a5";
            };
            beamDeps  = [ modbus_0_3_4 ];

            meta = {
              description = ''Elixir Serial Port with Modbus RTU.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/samuelventura/baud/";
            };
          } // packageOverrides)
      ) {};

    baud_0_5_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          modbus_0_3_7,
          sniff_0_1_0
        }:
          buildMix ({
            name = "baud";
            version = "0.5.0";
            src = fetchHex {
              pkg = "baud";
              version = "0.5.0";
              sha256 =
                "804383f9720d2010617d827c93499a8ef29452cd744620ac5d1ea08738955893";
            };
            beamDeps  = [ modbus_0_3_7 sniff_0_1_0 ];

            meta = {
              description = ''Elixir Serial Port with Modbus RTU.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/samuelventura/baud/";
            };
          } // packageOverrides)
      ) {};

    baud = baud_0_5_0;

    bauer_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          floki_0_9_0,
          httpoison_0_9_2
        }:
          buildMix ({
            name = "bauer";
            version = "0.1.0";
            src = fetchHex {
              pkg = "bauer";
              version = "0.1.0";
              sha256 =
                "39e3e16e1ab04342415a50efde5ba0d75bcc354b28f5557869afdb08f9a33704";
            };
            beamDeps  = [ floki_0_9_0 httpoison_0_9_2 ];

            meta = {
              description = ''Functional web browsing'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/leejarvis/bauer";
            };
          } // packageOverrides)
      ) {};

    bauer = bauer_0_1_0;

    bbmustache_1_0_4 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "bbmustache";
            version = "1.0.4";
            src = fetchHex {
              pkg = "bbmustache";
              version = "1.0.4";
              sha256 =
                "03b0d47db66e86df993896dce7578d7e4aae5f84636809b45fa8a3e34ee59b12";
            };

            meta = {
              description = ''Binary pattern match Based Mustache template
                            engine for Erlang/OTP'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/soranoba/bbmustache";
            };
          } // packageOverrides)
      ) {};

    bbmustache_1_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "bbmustache";
            version = "1.1.0";
            src = fetchHex {
              pkg = "bbmustache";
              version = "1.1.0";
              sha256 =
                "aa22469836bb8a9928ad741bdd2038d49116228bfbe0c2d6c792e1bdd4b256d9";
            };

            meta = {
              description = ''Binary pattern match Based Mustache template
                            engine for Erlang/OTP'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/soranoba/bbmustache";
            };
          } // packageOverrides)
      ) {};

    bbmustache_1_4_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "bbmustache";
            version = "1.4.0";
            src = fetchHex {
              pkg = "bbmustache";
              version = "1.4.0";
              sha256 =
                "fe81d16d19be23499efcef967459b7e5d7d06bf53625387285bb671fca2087ab";
            };

            meta = {
              description = ''Binary pattern match Based Mustache template
                            engine for Erlang/OTP'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/soranoba/bbmustache";
            };
          } // packageOverrides)
      ) {};

    bbmustache = bbmustache_1_4_0;

    bbsmq_0_0_6 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          amqp_0_1_4,
          exprotobuf_1_0_2,
          httpoison_0_8_3,
          poison_2_2_0,
          uuid_1_1_7
        }:
          buildMix ({
            name = "bbsmq";
            version = "0.0.6";
            src = fetchHex {
              pkg = "bbsmq";
              version = "0.0.6";
              sha256 =
                "d3cb2597805a52ccd4fd798c9ec7c3ab078c2e1728e6fefafbc6a35046df9dbe";
            };
            beamDeps  = [
                          amqp_0_1_4
                          exprotobuf_1_0_2
                          httpoison_0_8_3
                          poison_2_2_0
                          uuid_1_1_7
                        ];

            meta = {
              description = ''Translate CloudFoundry BBS events and endpoints
                            into rabbitmq messages.'';

            };
          } // packageOverrides)
      ) {};

    bbsmq = bbsmq_0_0_6;

    bcrypt_0_5_0_p3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "bcrypt";
            version = "0.5.0-p3";
            src = fetchHex {
              pkg = "bcrypt";
              version = "0.5.0-p3";
              sha256 =
                "34fb33e9726ddde9768df73a69b40a20ef517b9b755459f5c746270f6ff881b2";
            };
            compilePorts = true;

            meta = {
              description = ''An Erlang wrapper (NIF or port program) for the
                            OpenBSD password scheme, bcrypt.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/smarkets/erlang-bcrypt";
            };
          } // packageOverrides)
      ) {};

    bcrypt_0_5_0_p3a = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "bcrypt";
            version = "0.5.0-p3a";
            src = fetchHex {
              pkg = "bcrypt";
              version = "0.5.0-p3a";
              sha256 =
                "492decdc633399b356a3bbfe8279c10a49b1040fc082c8cbf2d30b41ff88f310";
            };
            compilePorts = true;
            buildPlugins  = [ pc ];


            meta = {
              description = ''An Erlang wrapper (NIF or port program) for the
                            OpenBSD password scheme, bcrypt.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/smarkets/erlang-bcrypt";
            };
          } // packageOverrides)
      ) {};

    bcrypt = bcrypt_0_5_0_p3a;

    beacon_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "beacon";
            version = "1.0.0";
            src = fetchHex {
              pkg = "beacon";
              version = "1.0.0";
              sha256 =
                "bfda4e87784928646b278e571963bdd93a3fb1c457ed1127f641e9ef36b52b1b";
            };

            meta = {
              description = ''A Process that periodically reaches a target at a
                            fixed interval.'';
              license = stdenv.lib.licenses.gpl3;
            };
          } // packageOverrides)
      ) {};

    beacon = beacon_1_0_0;

    beagle_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, hound_1_0_3 }:
          buildMix ({
            name = "beagle";
            version = "0.1.0";
            src = fetchHex {
              pkg = "beagle";
              version = "0.1.0";
              sha256 =
                "94fb9971f6f38be1dbf392ce71755e2002c60f6fff640b8ab8d353b7248a19be";
            };
            beamDeps  = [ hound_1_0_3 ];

            meta = {
              description = ''Add-ons for Hound, the integration testing and
                            browser automation library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mrblueblue/beagle";
            };
          } // packageOverrides)
      ) {};

    beagle = beagle_0_1_0;

    beaker_1_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          bureaucrat_0_1_4,
          ecto_2_1_4,
          phoenix_1_3_0_rc_2
        }:
          buildMix ({
            name = "beaker";
            version = "1.3.0";
            src = fetchHex {
              pkg = "beaker";
              version = "1.3.0";
              sha256 =
                "ebb5a902ca77459ba9c0fb5473cda9af0f8ad5e4ea2fb307fc75e1445dbeb6bf";
            };
            beamDeps  = [ bureaucrat_0_1_4 ecto_2_1_4 phoenix_1_3_0_rc_2 ];

            meta = {
              longDescription = ''Measure your Elixir! A metrics library that
                                will help Elixirists keep track of their
                                application`s performance, as well as any custom
                                statistics they like.'';

              homepage = "http://github.com/hahuang65/beaker";
            };
          } // packageOverrides)
      ) {};

    beaker = beaker_1_3_0;

    beam_analyzer_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "beam_analyzer";
            version = "0.0.3";
            src = fetchHex {
              pkg = "beam_analyzer";
              version = "0.0.3";
              sha256 =
                "acfb7b4d92c1147401f2de8e0fe5ad33236814a57fdcfbcb184e9292e43c7d27";
            };

            meta = {
              description = ''Get information about Erlang/Elixir modules and
                            BEAM files'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/joeyates/beam_analyzer";
            };
          } // packageOverrides)
      ) {};

    beam_analyzer = beam_analyzer_0_0_3;

    beam_homunculus_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "beam_homunculus";
            version = "0.1.0";
            src = fetchHex {
              pkg = "beam_homunculus";
              version = "0.1.0";
              sha256 =
                "6e4d0e669b31d16c2c41ce03704e536eeb47b94b302a1c2836e3be91fe122bf7";
            };

            meta = {
              description = ''A bot framework for ErlangVM(beam)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/niku/beam_homunculus";
            };
          } // packageOverrides)
      ) {};

    beam_homunculus = beam_homunculus_0_1_0;

    beam_olympics_1_2_3 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          eper_0_94_0,
          epocxy_1_1_0,
          sumo_db_0_7_1
        }:
          buildRebar3 ({
            name = "beam_olympics";
            version = "1.2.3";
            src = fetchHex {
              pkg = "beam_olympics";
              version = "1.2.3";
              sha256 =
                "8a71dd99389d77643c620262b3f895bd3f67b6307fe97aa3dd2b9105cbd3387e";
            };

            beamDeps  = [ eper_0_94_0 epocxy_1_1_0 sumo_db_0_7_1 ];

            meta = {
              description = ''Let`s find the best beamer!'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/inaka/beam_olympics";
            };
          } // packageOverrides)
      ) {};

    beam_olympics = beam_olympics_1_2_3;

    beanstalk_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exjsx_3_2_1,
          httpoison_0_9_2
        }:
          buildMix ({
            name = "beanstalk";
            version = "0.1.0";
            src = fetchHex {
              pkg = "beanstalk";
              version = "0.1.0";
              sha256 =
                "febf05332f0d827e48118597a462dbf48faaf43c4e8275c3b6b3e317fa5e0f37";
            };
            beamDeps  = [ exjsx_3_2_1 httpoison_0_9_2 ];

            meta = {
              description = ''An HTTP client for the Beanstalk API written in
                            Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jayhealey/beanstalk-elixir";
            };
          } // packageOverrides)
      ) {};

    beanstalk = beanstalk_0_1_0;

    beanstream_0_2_5 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_9_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "beanstream";
            version = "0.2.5";
            src = fetchHex {
              pkg = "beanstream";
              version = "0.2.5";
              sha256 =
                "4586ee5e9ebd6065fb82d35bae625868f8e148324ac0913b1d2241361f798918";
            };
            beamDeps  = [ httpoison_0_9_2 poison_2_2_0 ];

            meta = {
              description = ''Unofficial Elixir client for processing payments
                            through Beanstream.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/SoundPays/beanstream-elixir";
            };
          } // packageOverrides)
      ) {};

    beanstream = beanstream_0_2_5;

    bear_0_8_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "bear";
            version = "0.8.3";
            src = fetchHex {
              pkg = "bear";
              version = "0.8.3";
              sha256 =
                "0a04ce4702e00e0a43c0fcdd63e38c9c7d64dceb32b27ffed261709e7c3861ad";
            };

            meta = {
              description = ''A set of statistics functions for erlang'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/project-folsom/bear";
            };
          } // packageOverrides)
      ) {};

    bear = bear_0_8_3;

    beersearch_0_0_8 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          floki_0_10_1,
          httpotion_3_0_2
        }:
          buildMix ({
            name = "beersearch";
            version = "0.0.8";
            src = fetchHex {
              pkg = "beersearch";
              version = "0.0.8";
              sha256 =
                "53ae14ba5c4c38fb07e01f7db2ea15e5ce793d34e45cc15b74965962fd5f4470";
            };
            beamDeps  = [ floki_0_10_1 httpotion_3_0_2 ];

            meta = {
              description = ''A simple Elixir module that searches for beers on
                            Untappd.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nicksergeant/elixir-beersearch";
            };
          } // packageOverrides)
      ) {};

    beersearch = beersearch_0_0_8;

    bees_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_8_3,
          jsx_2_8_2,
          plug_1_3_5,
          poison_2_2_0
        }:
          buildMix ({
            name = "bees";
            version = "0.1.0";
            src = fetchHex {
              pkg = "bees";
              version = "0.1.0";
              sha256 =
                "6dec24c601d14669599e844c86d485fefe373c433a277ee33e49395d5821d829";
            };
            beamDeps  = [ httpoison_0_8_3 jsx_2_8_2 plug_1_3_5 poison_2_2_0
                      ];

            meta = {
              description = ''Foursquare API client for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/danieltomlinson/bees";
            };
          } // packageOverrides)
      ) {};

    bees = bees_0_1_0;

    belixir_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "belixir";
            version = "0.2.0";
            src = fetchHex {
              pkg = "belixir";
              version = "0.2.0";
              sha256 =
                "1d4cea63bf593f8ccdbad32270158704d65aa6f88ee2df48422aced2566465e3";
            };

            meta = {
              longDescription = ''Benchmark ips tool for elixir-lang. Runs
                                given codes in given seconds and compares
                                them.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/meinac/belixir";
            };
          } // packageOverrides)
      ) {};

    belixir = belixir_0_2_0;

    belvedere_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "belvedere";
            version = "0.0.1";
            src = fetchHex {
              pkg = "belvedere";
              version = "0.0.1";
              sha256 =
                "b222f5c3ab855655b7950681542e2c3941c52533bd8b6cbb08be60f91427113e";
            };

            meta = {
              description = ''An example Elixir project with CircleCI, Docker,
                            Dialyzer integration.'';
              license = stdenv.lib.licenses.mit;
              homepage = "http://nirvana.io";
            };
          } // packageOverrides)
      ) {};

    belvedere = belvedere_0_0_1;

    benchee_0_9_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, deep_merge_0_1_1 }:
          buildMix ({
            name = "benchee";
            version = "0.9.0";
            src = fetchHex {
              pkg = "benchee";
              version = "0.9.0";
              sha256 =
                "bd0732ca4af9dcbd92bb21f6fa28880ff1bca9cd4d074bc2e400c691a8d15576";
            };
            beamDeps  = [ deep_merge_0_1_1 ];

            meta = {
              longDescription = ''Versatile (micro) benchmarking that is
                                extensible. Get statistics such as: average,
                                iterations per second, standard deviation and
                                the median.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/PragTob/benchee";
            };
          } // packageOverrides)
      ) {};

    benchee = benchee_0_9_0;

    benchee_csv_0_6_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          benchee_0_9_0,
          csv_1_4_4
        }:
          buildMix ({
            name = "benchee_csv";
            version = "0.6.0";
            src = fetchHex {
              pkg = "benchee_csv";
              version = "0.6.0";
              sha256 =
                "e3840334430ba230f482768485afc97cf9550932548f4e3b9cc1d96794715c92";
            };
            beamDeps  = [ benchee_0_9_0 csv_1_4_4 ];

            meta = {
              description = ''Get CSV from your benchee benchmarks to them into
                            graphs or whatever!'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/PragTob/benchee_csv";
            };
          } // packageOverrides)
      ) {};

    benchee_csv = benchee_csv_0_6_0;

    benchee_html_0_3_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          benchee_0_9_0,
          benchee_json_0_3_1
        }:
          buildMix ({
            name = "benchee_html";
            version = "0.3.1";
            src = fetchHex {
              pkg = "benchee_html";
              version = "0.3.1";
              sha256 =
                "6b1c9e5ac42e932afc160cc50ec7e96350c6daf1b91f8d443c7d7ec35229d0c5";
            };
            beamDeps  = [ benchee_0_9_0 benchee_json_0_3_1 ];

            meta = {
              longDescription = ''HTML formatter with pretty graphs for the
                                (micro) benchmarking library benchee. Also
                                allows export as PNG image!'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/PragTob/benchee_html";
            };
          } // packageOverrides)
      ) {};

    benchee_html = benchee_html_0_3_1;

    benchee_json_0_3_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          benchee_0_9_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "benchee_json";
            version = "0.3.1";
            src = fetchHex {
              pkg = "benchee_json";
              version = "0.3.1";
              sha256 =
                "a07b37c71382a49b5ee86af39285e57f85cb7992402d002c92485161e0e3448e";
            };
            beamDeps  = [ benchee_0_9_0 poison_3_1_0 ];

            meta = {
              description = ''JSON formatter for the (micro) benchmarking
                            library benchee.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/PragTob/benchee_json";
            };
          } // packageOverrides)
      ) {};

    benchee_json = benchee_json_0_3_1;

    benchfella_0_3_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "benchfella";
            version = "0.3.4";
            src = fetchHex {
              pkg = "benchfella";
              version = "0.3.4";
              sha256 =
                "23616f774db00fc896ce249380f2c0053161d5803775c7284a156bc58a5a3146";
            };

            meta = {
              description = ''Microbenchmarking tool for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/alco/benchfella";
            };
          } // packageOverrides)
      ) {};

    benchfella = benchfella_0_3_4;

    benchmark_ips_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "benchmark_ips";
            version = "0.2.0";
            src = fetchHex {
              pkg = "benchmark_ips";
              version = "0.2.0";
              sha256 =
                "7c55c4317dae5b8dae6a655e25a7aa491acd076e36efb9c9852a789a3592b703";
            };

            meta = {
              description = ''A tool to run benchmarks to determine iteration
                            per second.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mxhold/benchmark_ips";
            };
          } // packageOverrides)
      ) {};

    benchmark_ips = benchmark_ips_0_2_0;

    benchwarmer_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "benchwarmer";
            version = "0.0.2";
            src = fetchHex {
              pkg = "benchwarmer";
              version = "0.0.2";
              sha256 =
                "8b98b39c1c50df624f9c2d13ca953eeed465eed6feda975da26b479df2b4c9f5";
            };

            meta = {
              longDescription = ''Benchwarmer is an Elixir micro-benchmarking
                                utility that runs a function (or list of
                                functions) repeatedly against a dataset for a
                                period of time, and then reports on the average
                                time each operation took to complete, allowing
                                for easy comparison. '';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/mroth/benchwarmer";
            };
          } // packageOverrides)
      ) {};

    benchwarmer = benchwarmer_0_0_2;

    bencode_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, eqc_ex_1_2_4 }:
          buildMix ({
            name = "bencode";
            version = "0.3.0";
            src = fetchHex {
              pkg = "bencode";
              version = "0.3.0";
              sha256 =
                "98d397fd0a13ba47bfb51927fede25c780539d38946e6d53c6b83c998636a002";
            };
            beamDeps  = [ eqc_ex_1_2_4 ];

            meta = {
              longDescription = ''A complete and correct Bencode encoder and
                                decoder written in pure Elixir. The decoder will
                                return the info hash with along with the decoded
                                data, and the encoder is implemented as a
                                protocol, allowing any data structure to be
                                bcode encoded.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/gausby/bencode";
            };
          } // packageOverrides)
      ) {};

    bencode_0_3_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, eqc_ex_1_2_4 }:
          buildMix ({
            name = "bencode";
            version = "0.3.2";
            src = fetchHex {
              pkg = "bencode";
              version = "0.3.2";
              sha256 =
                "6abf5adace62d6e105b17d50faa8bdce84dea18c947ecb0bb81b6b2a3582dae7";
            };
            beamDeps  = [ eqc_ex_1_2_4 ];

            meta = {
              longDescription = ''A complete and correct Bencode encoder and
                                decoder written in pure Elixir. The decoder will
                                return the info hash with along with the decoded
                                data, and the encoder is implemented as a
                                protocol, allowing any data structure to be
                                bcode encoded.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/gausby/bencode";
            };
          } // packageOverrides)
      ) {};

    bencode = bencode_0_3_2;

    bencoder_0_0_7 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "bencoder";
            version = "0.0.7";
            src = fetchHex {
              pkg = "bencoder";
              version = "0.0.7";
              sha256 =
                "1fd5478490f0ef03e5afee0c0392226efe07a76c9f537697176bc46bc46500b8";
            };

            meta = {
              description = ''a library to handle bencode in elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/alehander42/bencoder";
            };
          } // packageOverrides)
      ) {};

    bencoder = bencoder_0_0_7;

    bencodex_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "bencodex";
            version = "1.0.0";
            src = fetchHex {
              pkg = "bencodex";
              version = "1.0.0";
              sha256 =
                "a70c319eed907d4d0520bf2ed6eedc77cbf1312274b144341dc4ecc74136124d";
            };

            meta = {
              description = ''Encoder and decoder for the bencode format'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/patrickgombert/bencodex";
            };
          } // packageOverrides)
      ) {};

    bencodex = bencodex_1_0_0;

    bendy_0_1_7 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "bendy";
            version = "0.1.7";
            src = fetchHex {
              pkg = "bendy";
              version = "0.1.7";
              sha256 =
                "fe7e5221dc50de6715c2f4209aa9a7ba0186f0b58fb74f986242cf7d80b61e94";
            };

            meta = {
              description = ''A small bencode library.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Zanadar/benlixir";
            };
          } // packageOverrides)
      ) {};

    bendy = bendy_0_1_7;

    bento_0_9_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_2_2_0 }:
          buildMix ({
            name = "bento";
            version = "0.9.2";
            src = fetchHex {
              pkg = "bento";
              version = "0.9.2";
              sha256 =
                "8be4312c4eacf57ef0c319f5ddd0b31872b510dc8ca02c64206ee648ec0f91d1";
            };
            beamDeps  = [ poison_2_2_0 ];

            meta = {
              description = ''An incredibly fast, pure Elixir Bencoding
                            library.'';
              license = stdenv.lib.licenses.mpl20;
              homepage = "https://github.com/folz/bento";
            };
          } // packageOverrides)
      ) {};

    bento = bento_0_9_2;

    benx_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "benx";
            version = "0.1.2";
            src = fetchHex {
              pkg = "benx";
              version = "0.1.2";
              sha256 =
                "7cc5faba0e36655e0bfa05c211c7161d7ca36007d723094a5a3205010da206a2";
            };

            meta = {
              description = ''A fast parser for the Bencoding spec.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sschneider1207/benx";
            };
          } // packageOverrides)
      ) {};

    benx = benx_0_1_2;

    bert_0_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "bert";
            version = "0.1.0";
            src = fetchHex {
              pkg = "bert";
              version = "0.1.0";
              sha256 =
                "2a561521ec3529b248658a3e2d3d4bfe6729b0ab8291c701bf15ef413eda1506";
            };

            meta = {
              description = ''BERT Encoder/Decoder'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/yuce/bert.erl";
            };
          } // packageOverrides)
      ) {};

    bert = bert_0_1_0;

    bertex_1_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "bertex";
            version = "1.2.0";
            src = fetchHex {
              pkg = "bertex";
              version = "1.2.0";
              sha256 =
                "5e6db198c106dbfbd6e419201ec15facd71fac320f24e3e85a856d624ac4096a";
            };

            meta = {
              description = '' Elixir BERT encoder/decoder '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/edgurgel/bertex";
            };
          } // packageOverrides)
      ) {};

    bertex = bertex_1_2_0;

    bf_1_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, optimus_0_1_3 }:
          buildMix ({
            name = "bf";
            version = "1.2.0";
            src = fetchHex {
              pkg = "bf";
              version = "1.2.0";
              sha256 =
                "52f5762dbcc48e38035424d1d3d9c45e4272e2cf9a06e9f322370b78379ea113";
            };
            beamDeps  = [ optimus_0_1_3 ];

            meta = {
              longDescription = ''bf is a simple Brainfuck interpreter written
                                in Elixir. It uses leex and yecc for lexing and
                                parsing.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lukad/bf";
            };
          } // packageOverrides)
      ) {};

    bf = bf_1_2_0;

    bgg_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_8_3,
          quinn_0_0_4
        }:
          buildMix ({
            name = "bgg";
            version = "0.1.0";
            src = fetchHex {
              pkg = "bgg";
              version = "0.1.0";
              sha256 =
                "d26593e7ebb23f76e6c0e73a9a1acb6a45ec25ea53b6ee716a2291f07c5f1fb6";
            };
            beamDeps  = [ httpoison_0_8_3 quinn_0_0_4 ];

            meta = {
              description = ''A BoardGameGeek API wrapper in Elixir
                            http://boardgamegeek.com/xmlapi/'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/peralmq/bgg-elixir";
            };
          } // packageOverrides)
      ) {};

    bgg = bgg_0_1_0;

    bh_0_0_14 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, phoenix_html_2_9_3
        }:
          buildMix ({
            name = "bh";
            version = "0.0.14";
            src = fetchHex {
              pkg = "bh";
              version = "0.0.14";
              sha256 =
                "29e4c32b1d1f328ce5ec7ee3054395f72ca6973e2df0d48e0853da7683056668";
            };
            beamDeps  = [ phoenix_html_2_9_3 ];

            meta = {
              description = ''Twitter Bootstrap 4 and Bootstrap 3 helpers for
                            Phoenix.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kovpack/bh";
            };
          } // packageOverrides)
      ) {};

    bh = bh_0_0_14;

    bheap_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "bheap";
            version = "1.0.0";
            src = fetchHex {
              pkg = "bheap";
              version = "1.0.0";
              sha256 =
                "ce2a32df30e742485d95d6925bfd4f88b891180b2518debef32b60d0f81980da";
            };

            meta = {
              description = ''Binomial heap in Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sotojuan/bheap";
            };
          } // packageOverrides)
      ) {};

    bheap = bheap_1_0_0;

    bibtex_elixir_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "bibtex_elixir";
            version = "0.0.1";
            src = fetchHex {
              pkg = "bibtex_elixir";
              version = "0.0.1";
              sha256 =
                "49719ec673915de22d71fd9c323e70dbd200920793c49b664316771c32fc7735";
            };

            meta = {
              description = ''A pure Elixir BibTeX parser inspired by
                            Poison.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jackweinbender/bibtex-elixir";
            };
          } // packageOverrides)
      ) {};

    bibtex_elixir = bibtex_elixir_0_0_1;

    big_query_0_0_9 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          jose_1_8_4,
          poison_3_1_0
        }:
          buildMix ({
            name = "big_query";
            version = "0.0.9";
            src = fetchHex {
              pkg = "big_query";
              version = "0.0.9";
              sha256 =
                "317c32e084584f945d6f4bc57fb41012bb5742f391aaf7a32c256fc997b1a410";
            };
            beamDeps  = [ httpoison_0_11_2 jose_1_8_4 poison_3_1_0 ];

            meta = {
              description = ''A Google BigQuery API client.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/companykitchen/big_query";
            };
          } // packageOverrides)
      ) {};

    big_query = big_query_0_0_9;

    bigflake_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, base62_1_2_1 }:
          buildMix ({
            name = "bigflake";
            version = "0.3.0";
            src = fetchHex {
              pkg = "bigflake";
              version = "0.3.0";
              sha256 =
                "18505f0ca3a7b77fe267840b9172ec5000e118587cb36d148d73c5e642c400a5";
            };
            beamDeps  = [ base62_1_2_1 ];

            meta = {
              description = ''128-bit, k-ordered, conflict-free IDs Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/stevedomin/bigflake";
            };
          } // packageOverrides)
      ) {};

    bigflake = bigflake_0_3_0;

    billiards_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "billiards";
            version = "0.0.1";
            src = fetchHex {
              pkg = "billiards";
              version = "0.0.1";
              sha256 =
                "5b8d8eab12e35c0c7eff5be02a4adf0a7aa4cf10688a5faeec9b10f2c2f04046";
            };
             meta = {    };
          } // packageOverrides)
      ) {};

    billiards = billiards_0_0_1;

    bin_format_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "bin_format";
            version = "0.0.1";
            src = fetchHex {
              pkg = "bin_format";
              version = "0.0.1";
              sha256 =
                "f73b9d1691499964d248b4a19b56284b2c51652015a63b77c2688b92cb55d66a";
            };

            meta = {
              longDescription = ''Automatically generate the boilerplate to
                                convert between binaries and Elixir structs.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/willpenington/bin_format";
            };
          } // packageOverrides)
      ) {};

    bin_format = bin_format_0_0_1;

    binary_0_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "binary";
            version = "0.0.4";
            src = fetchHex {
              pkg = "binary";
              version = "0.0.4";
              sha256 =
                "a2faf5d5c22caec3efacf95370d8b050c003f48e03c221c37e0d1e2dd515b970";
            };

            meta = {
              description = ''Toolkit for handling binaries in Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/comboy/elixir-binary";
            };
          } // packageOverrides)
      ) {};

    binary = binary_0_0_4;

    binder_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ex_doc_0_16_1 }:
          buildMix ({
            name = "binder";
            version = "0.1.0";
            src = fetchHex {
              pkg = "binder";
              version = "0.1.0";
              sha256 =
                "a4a0a72a462d8dacd02031f5ebf50eb58afb16230aba77e6660cb966c1f585d9";
            };
            beamDeps  = [ ex_doc_0_16_1 ];

            meta = {
              description = ''Either and Maybe monadic interface around the
                            standard return types'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/shterrett/binder";
            };
          } // packageOverrides)
      ) {};

    binder = binder_0_1_0;

    bing_translator_1_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          floki_0_17_2,
          httpoison_0_11_2,
          xml_builder_0_1_1
        }:
          buildMix ({
            name = "bing_translator";
            version = "1.0.1";
            src = fetchHex {
              pkg = "bing_translator";
              version = "1.0.1";
              sha256 =
                "eb6540200eaeceffc51ecadd62b2059a812acb9e5d3b706c31bc11cd2a8b3530";
            };
            beamDeps  = [ floki_0_17_2 httpoison_0_11_2 xml_builder_0_1_1 ];

            meta = {
              longDescription = ''Translate strings using the Bing HTTP API.
                                Requires that you have a Client ID and Secret.
                                See README.md for information.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ikeikeikeike/bing_translator";
            };
          } // packageOverrides)
      ) {};

    bing_translator = bing_translator_1_0_1;

    binpp_1_1_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "binpp";
            version = "1.1.1";
            src = fetchHex {
              pkg = "binpp";
              version = "1.1.1";
              sha256 =
                "2ef9fb04a1c7a79644c84e8402e1dc5a7f2bf2b182c211329465f3f188e923fa";
            };

            meta = {
              description = ''Erlang Binary Pretty Printer'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/jtendo/binpp";
            };
          } // packageOverrides)
      ) {};

    binpp = binpp_1_1_1;

    binstructor_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "binstructor";
            version = "0.0.1";
            src = fetchHex {
              pkg = "binstructor";
              version = "0.0.1";
              sha256 =
                "ab6e619628d4308a47744dcf9dd0c9ff48f4a5cc5e00ce6bb3852d92e654ba74";
            };

            meta = {
              longDescription = ''Automatically generate the boilerplate to
                                convert between binaries and Elixir structs.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/willpenington/binstructor";
            };
          } // packageOverrides)
      ) {};

    binstructor = binstructor_0_0_1;

    biometrics_facade_1_3_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_3_0_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "biometrics_facade";
            version = "1.3.1";
            src = fetchHex {
              pkg = "biometrics_facade";
              version = "1.3.1";
              sha256 =
                "ddf508a0be9d6b98fab402078de3ce7d23476c3063c0cc82987c1aaff3f6f709";
            };
            beamDeps  = [ httpotion_3_0_2 poison_2_2_0 ];

            meta = {
              description = ''An API facade for a private biometrics
                            service.'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    biometrics_facade = biometrics_facade_1_3_1;

    birbnest_0_1_2 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, plug_1_3_5, uuid_1_1_7
        }:
          buildMix ({
            name = "birbnest";
            version = "0.1.2";
            src = fetchHex {
              pkg = "birbnest";
              version = "0.1.2";
              sha256 =
                "ab8951e74a437c17abd00df68bfb11f4c35b65f74667b18912edcf95074575ed";
            };
            beamDeps  = [ plug_1_3_5 uuid_1_1_7 ];

            meta = {
              longDescription = ''Store your baby birbs` important information
                                in your own nest! A Plug.Conn.Store
                                implementation using Agent.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mayppong/birbnest";
            };
          } // packageOverrides)
      ) {};

    birbnest = birbnest_0_1_2;

    bit_field_set_1_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "bit_field_set";
            version = "1.2.1";
            src = fetchHex {
              pkg = "bit_field_set";
              version = "1.2.1";
              sha256 =
                "2ce12469f0c68b84c3c1cf52e96f2b95f9a2d73c522d095690c907db9d6ebeee";
            };

            meta = {
              longDescription = ''Store and manipulate a set of bit flags,
                                mostly used for syncing the state between peers
                                in a peer to peer network, such as
                                BitTorrent.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/gausby/bit_field_set";
            };
          } // packageOverrides)
      ) {};

    bit_field_set = bit_field_set_1_2_1;

    bitbucket_api_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_5_0,
          jsex_2_0_0,
          jsx_2_8_2
        }:
          buildMix ({
            name = "bitbucket_api";
            version = "0.0.2";
            src = fetchHex {
              pkg = "bitbucket_api";
              version = "0.0.2";
              sha256 =
                "25fbdda8ed1813f0ade92b4f28b3290b3efd6be63ff25c84ab9e24b512464245";
            };
            beamDeps  = [ httpoison_0_5_0 jsex_2_0_0 jsx_2_8_2 ];

            meta = {
              description = ''Create hooks for Bitbucket. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Blackrush/bitbucket_api";
            };
          } // packageOverrides)
      ) {};

    bitbucket_api = bitbucket_api_0_0_2;

    bitcask_2_0_2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "bitcask";
            version = "2.0.2";
            src = fetchHex {
              pkg = "bitcask";
              version = "2.0.2";
              sha256 =
                "666bd79d17faabd62a626ed6fc98176b818266f7bb9639d76244f003ed5b2fe2";
            };
            compilePorts = true;
            buildPlugins  = [ pc ];


            meta = {
              description = ''Bitcask key value store'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/basho/bitcask";
            };
          } // packageOverrides)
      ) {};

    bitcask = bitcask_2_0_2;

    bitcoin_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          binary_0_0_4,
          reagent_0_1_14
        }:
          buildMix ({
            name = "bitcoin";
            version = "0.0.2";
            src = fetchHex {
              pkg = "bitcoin";
              version = "0.0.2";
              sha256 =
                "a4f22e7ff0da6446c5dc01d608b3e2ffad7e568ae045942d0b684b455a92d87e";
            };
            beamDeps  = [ binary_0_0_4 reagent_0_1_14 ];

            meta = {
              description = ''Bitcoin tools and full node implementation'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/comboy/bitcoin-elixir";
            };
          } // packageOverrides)
      ) {};

    bitcoin = bitcoin_0_0_2;

    bitcoin_de_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "bitcoin_de";
            version = "0.2.0";
            src = fetchHex {
              pkg = "bitcoin_de";
              version = "0.2.0";
              sha256 =
                "f479ce2e092ae030ccbbee4645ef5f96bd2da82c1ac53c3edc2aeeaf7c27ecc5";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''Elixir API wrapper for www.bitcoin.de an online
                            bitcoin marketplace.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/balugege/bitcoin-de-elixir";
            };
          } // packageOverrides)
      ) {};

    bitcoin_de = bitcoin_de_0_2_0;

    bitfield_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "bitfield";
            version = "1.0.0";
            src = fetchHex {
              pkg = "bitfield";
              version = "1.0.0";
              sha256 =
                "0f1ca3f3e9f8661cc2686561717c326309541f95e4f82f7b7d927e150f5f7b5a";
            };

            meta = {
              description = ''Simple bitfields for erlang/elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/camshaft/bitfield.erl";
            };
          } // packageOverrides)
      ) {};

    bitfield = bitfield_1_0_0;

    bitmap_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "bitmap";
            version = "1.0.0";
            src = fetchHex {
              pkg = "bitmap";
              version = "1.0.0";
              sha256 =
                "c33ca1dd28d6979e61f3517140ef71e80f8ded4029debabbb6482ef650384b34";
            };

            meta = {
              longDescription = ''Package to help you create and work with
                                bitmaps
                                (https://en.wikipedia.org/wiki/Bitmap)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hashd/bitmap-elixir";
            };
          } // packageOverrides)
      ) {};

    bitmap = bitmap_1_0_0;

    bitmex_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          poison_3_1_0,
          websocket_client_1_2_1
        }:
          buildMix ({
            name = "bitmex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "bitmex";
              version = "0.1.0";
              sha256 =
                "6ea52cd2a6eb702bf4720829fda0247860d9ca76e5916f7ed765b070e29a5b19";
            };
            beamDeps  = [ poison_3_1_0 websocket_client_1_2_1 ];

            meta = {
              description = ''A BitMEX client'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    bitmex = bitmex_0_1_0;

    bitpay_0_2_5 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exjsx_3_1_0,
          httpotion_2_2_1,
          uuid_0_1_5
        }:
          buildMix ({
            name = "bitpay";
            version = "0.2.5";
            src = fetchHex {
              pkg = "bitpay";
              version = "0.2.5";
              sha256 =
                "25a0b2dbf6619ddc0db4cf1ee03b3d097adac47dc47c65b71a2661eba0f2e3a2";
            };
            beamDeps  = [ exjsx_3_1_0 httpotion_2_2_1 uuid_0_1_5 ];

            meta = {
              longDescription = ''Library to allow elixir apps to easily use
                                the BitPay REST API to authenticate, generate
                                invoices, and retrieve invoices. Includes
                                Utilities for using Erlangs library for Elliptic
                                Curve Keys.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bitpay/elixir-client";
            };
          } // packageOverrides)
      ) {};

    bitpay = bitpay_0_2_5;

    bitstamp_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "bitstamp";
            version = "0.2.0";
            src = fetchHex {
              pkg = "bitstamp";
              version = "0.2.0";
              sha256 =
                "3018aa1220be79347f216f2223f450cbe9964a5640fc631a8b60bbb321b9b7e7";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''Elixir API wrapper for bitstamp.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/balugege/bitstamp_elixir";
            };
          } // packageOverrides)
      ) {};

    bitstamp = bitstamp_0_2_0;

    blackbook_0_3_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          comeonin_1_6_0,
          earmark_1_2_2,
          ecto_2_0_0_rc_6,
          postgrex_1_0_0_rc_1,
          secure_random_0_5_1,
          timex_3_0_5,
          timex_ecto_3_0_0
        }:
          buildMix ({
            name = "blackbook";
            version = "0.3.1";
            src = fetchHex {
              pkg = "blackbook";
              version = "0.3.1";
              sha256 =
                "deecf1248ec5ef7911e3b440a968d8cb2dae54d50e36bf80173a2593f0e4ecde";
            };
            beamDeps  = [
                          comeonin_1_6_0
                          earmark_1_2_2
                          ecto_2_0_0_rc_6
                          postgrex_1_0_0_rc_1
                          secure_random_0_5_1
                          timex_3_0_5
                          timex_ecto_3_0_0
                        ];

            meta = {    };
          } // packageOverrides)
      ) {};

    blackbook = blackbook_0_3_1;

    blacksmith_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, faker_0_8_0 }:
          buildMix ({
            name = "blacksmith";
            version = "0.2.1";
            src = fetchHex {
              pkg = "blacksmith";
              version = "0.2.1";
              sha256 =
                "9d8b6e283de72424ebcd6a5245dc0331612556fa12bcfabb577f3308bc6407cf";
            };
            beamDeps  = [ faker_0_8_0 ];

            meta = {
              description = ''Elixir fake data generation for testing and
                            development'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/batate/blacksmith";
            };
          } // packageOverrides)
      ) {};

    blacksmith = blacksmith_0_2_1;

    blaguth_1_2_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          plug_1_3_5
        }:
          buildMix ({
            name = "blaguth";
            version = "1.2.1";
            src = fetchHex {
              pkg = "blaguth";
              version = "1.2.1";
              sha256 =
                "2900dc5b7c6f7810bdf5e0ede8749632997811ae5b72ada34f59699b4310a65a";
            };
            beamDeps  = [ cowboy_1_1_2 plug_1_3_5 ];

            meta = {
              description = ''Basic Access Authentication in Plug
                            applications.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/lexmag/blaguth";
            };
          } // packageOverrides)
      ) {};

    blaguth = blaguth_1_2_1;

    blake2_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "blake2";
            version = "1.0.0";
            src = fetchHex {
              pkg = "blake2";
              version = "1.0.0";
              sha256 =
                "9c136789019ceec34d19d95e8b9300ff293b56aa61761f6e038ede6d2d02d5ef";
            };

            meta = {
              description = ''BLAKE2 hash functions'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mwmiller/blake2_ex";
            };
          } // packageOverrides)
      ) {};

    blake2 = blake2_1_0_0;

    blanket_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "blanket";
            version = "1.0.0";
            src = fetchHex {
              pkg = "blanket";
              version = "1.0.0";
              sha256 =
                "1bd9d7b49bb30a3e787d0d6415db6c27525c959c210f22aa7c721dc7678b8b2b";
            };

            meta = {
              description = ''Don`t loose your ETS tables with Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/niahoo/blanket";
            };
          } // packageOverrides)
      ) {};

    blanket = blanket_1_0_0;

    blast_furnace_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "blast_furnace";
            version = "0.0.1";
            src = fetchHex {
              pkg = "blast_furnace";
              version = "0.0.1";
              sha256 =
                "361bff3352803779f481ce56662228825c74ef45d34d05c79df5f56a37a2adb2";
            };

            meta = {
              description = ''Elixir port of invaluable blast furnace
                            functionality'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/markryall/blast_furnace_exs";
            };
          } // packageOverrides)
      ) {};

    blast_furnace = blast_furnace_0_0_1;

    blazay_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, httpoison_0_11_2 }:
          buildMix ({
            name = "blazay";
            version = "0.1.0";
            src = fetchHex {
              pkg = "blazay";
              version = "0.1.0";
              sha256 =
                "201bb9ca310ccd57ff7e95fb641324e4b7d7f2e6cb6fe6a57f1f073f073bd317";
            };
            beamDeps  = [ httpoison_0_11_2 ];

            meta = {
              longDescription = ''Blazay is for integrating into projects that
                                need to do large file uploads to B2 service. It
                                integrates tightly with Backblaze B2.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/artellectual/blazay";
            };
          } // packageOverrides)
      ) {};

    blazay = blazay_0_1_0;

    blaze_cloud_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_8_3,
          poison_2_0_1
        }:
          buildMix ({
            name = "blaze_cloud";
            version = "0.0.1";
            src = fetchHex {
              pkg = "blaze_cloud";
              version = "0.0.1";
              sha256 =
                "c5a26f194691d7c40a008c5aded034ca0a43d4fa6a9173952333479cf2661b2b";
            };
            beamDeps  = [ httpoison_0_8_3 poison_2_0_1 ];

            meta = {
              description = ''Elixir Library for Backblaze B2 Cloud Storage.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/PerishableDave/blaze_cloud";
            };
          } // packageOverrides)
      ) {};

    blaze_cloud = blaze_cloud_0_0_1;

    blazon_0_2_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "blazon";
            version = "0.2.3";
            src = fetchHex {
              pkg = "blazon";
              version = "0.2.3";
              sha256 =
                "576ba30d9be9b765542ee560afdd0ccbbf095ff33edec32a1e2b0d29aa8f13ea";
            };

            meta = {
              description = ''Declarative abstract serializers.'';
              license = stdenv.lib.licenses.publicDomain;
              homepage = "https://github.com/mtwilliams/blazon";
            };
          } // packageOverrides)
      ) {};

    blazon = blazon_0_2_3;

    block_timer_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "block_timer";
            version = "0.0.1";
            src = fetchHex {
              pkg = "block_timer";
              version = "0.0.1";
              sha256 =
                "1dec7d6590de5b5d2cecd101ea4b276180b7d428e8b36863c424223dd0a97782";
            };

            meta = {
              description = ''Macros to use :timer.apply_after and
                            :timer.apply_interval with a block'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/adamkittelson/block_timer";
            };
          } // packageOverrides)
      ) {};

    block_timer = block_timer_0_0_1;

    blockchain_info_0_0_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "blockchain_info";
            version = "0.0.3";
            src = fetchHex {
              pkg = "blockchain_info";
              version = "0.0.3";
              sha256 =
                "252f25c345eb35b2e1e6fa50b788bd07dc66a50cf0a840978227282bece4b8cc";
            };
            beamDeps  = [ httpoison_0_11_2 poison_2_2_0 ];

            meta = {
              longDescription = ''WIP BlockchainInfo API wrapper for Elixir.
                                Provides access to bitcoin blockchain data.'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/cyberpunk-ventures/blockchain_info_ex";
            };
          } // packageOverrides)
      ) {};

    blockchain_info = blockchain_info_0_0_3;

    blockchain_parser_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "blockchain_parser";
            version = "0.0.1";
            src = fetchHex {
              pkg = "blockchain_parser";
              version = "0.0.1";
              sha256 =
                "94ddd590e4e5b3145efd6042ec7c0c80cb5c5885148600c48218d11408123897";
            };

            meta = {
              description = ''A Bitcoin blockchain parser written in elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/natonnelier/blockchain_parser";
            };
          } // packageOverrides)
      ) {};

    blockchain_parser = blockchain_parser_0_0_1;

    blocking_queue_1_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "blocking_queue";
            version = "1.3.0";
            src = fetchHex {
              pkg = "blocking_queue";
              version = "1.3.0";
              sha256 =
                "10f2b942a29f83c3bfef6285096d7f42028201c89f317c731e708b528a7fc17d";
            };

            meta = {
              longDescription = ''BlockingQueue is a simple queue implemented
                                as a GenServer. It has a fixed maximum length
                                established when it is created.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/joekain/BlockingQueue";
            };
          } // packageOverrides)
      ) {};

    blocking_queue = blocking_queue_1_3_0;

    blogit_0_7_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          calendar_0_16_1,
          earmark_1_2_2,
          git_cli_0_2_3,
          yaml_elixir_1_3_0
        }:
          buildMix ({
            name = "blogit";
            version = "0.7.3";
            src = fetchHex {
              pkg = "blogit";
              version = "0.7.3";
              sha256 =
                "697d2adb0f958318dddde49b908e647818c58d8e7e107645309d43ee4fd2f89d";
            };
            beamDeps  = [
                          calendar_0_16_1
                          earmark_1_2_2
                          git_cli_0_2_3
                          yaml_elixir_1_3_0
                        ];

            meta = {
              longDescription = ''Blogit is an OTP application for generating
                                blog posts from a git repository containing
                                markdown files.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/meddle0x53/blogit";
            };
          } // packageOverrides)
      ) {};

    blogit = blogit_0_7_3;

    bloodhound_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_8_3,
          poison_1_5_2
        }:
          buildMix ({
            name = "bloodhound";
            version = "0.1.1";
            src = fetchHex {
              pkg = "bloodhound";
              version = "0.1.1";
              sha256 =
                "6aaab638fe90fc3714b650b659df774c7cdb12d098fee3910952e0a0f8fcd6ec";
            };
            beamDeps  = [ httpoison_0_8_3 poison_1_5_2 ];

            meta = {
              description = ''An ElasticSearch library for Elixir that can be
                            easily integrated with Ecto'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ianwalter/bloodhound";
            };
          } // packageOverrides)
      ) {};

    bloodhound = bloodhound_0_1_1;

    bloom_filter_1_0_1 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, fnv_0_3_2, math_0_2_0
        }:
          buildMix ({
            name = "bloom_filter";
            version = "1.0.1";
            src = fetchHex {
              pkg = "bloom_filter";
              version = "1.0.1";
              sha256 =
                "324d819a3901c0318e9cea51cc4a5555cc15ad6243c7150676e6e1b76d7aa081";
            };
            beamDeps  = [ fnv_0_3_2 math_0_2_0 ];

            meta = {
              longDescription = ''Bloom Filter implementation in Elixir. Bloom
                                filters are probabilistic data structures
                                designed to efficiently tell you whether an
                                element is present in a set.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Leventhan/bloom_filter";
            };
          } // packageOverrides)
      ) {};

    bloom_filter = bloom_filter_1_0_1;

    bloomex_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "bloomex";
            version = "1.0.1";
            src = fetchHex {
              pkg = "bloomex";
              version = "1.0.1";
              sha256 =
                "2d8424142550f226043e4e6fc05c10552022dfb8f5fe3e5f131252c8da45f6e9";
            };

            meta = {
              description = ''Bloomex is a pure Elixir implementation of
                            Scalable Bloom Filters.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gmcabrita/bloomex";
            };
          } // packageOverrides)
      ) {};

    bloomex = bloomex_1_0_1;

    blue_bird_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          phoenix_1_3_0_rc_2,
          plug_1_3_5,
          poison_3_1_0
        }:
          buildMix ({
            name = "blue_bird";
            version = "0.3.0";
            src = fetchHex {
              pkg = "blue_bird";
              version = "0.3.0";
              sha256 =
                "f5d064e84698c44f64b0655ccbc7e7b1fc331de22a7840bc22fecb9994a903a9";
            };
            beamDeps  = [ phoenix_1_3_0_rc_2 plug_1_3_5 poison_3_1_0 ];

            meta = {
              longDescription = ''BlueBird generates API documentation from
                                annotations in controllers actions and tests
                                cases.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/KittyHeaven/blue_bird";
            };
          } // packageOverrides)
      ) {};

    blue_bird = blue_bird_0_3_0;

    bluepay_0_4_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_3_0_2,
          uuid_1_1_7
        }:
          buildMix ({
            name = "bluepay";
            version = "0.4.0";
            src = fetchHex {
              pkg = "bluepay";
              version = "0.4.0";
              sha256 =
                "df23040485e8ff98b095bd5e7b782ea08572215af6533e62806663f11c999e95";
            };
            beamDeps  = [ httpotion_3_0_2 uuid_1_1_7 ];

            meta = {
              description = ''Unofficial Elixir client for processing payments
                            through Bluepay.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/SoundPays/bluepay-elixir";
            };
          } // packageOverrides)
      ) {};

    bluepay = bluepay_0_4_0;

    blume_0_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "blume";
            version = "0.1.0";
            src = fetchHex {
              pkg = "blume";
              version = "0.1.0";
              sha256 =
                "8a87a43607d9dab1e3138052c18355bc1fc2a98bbcc4cb1657494c395aca0fd6";
            };

            meta = {
              description = ''Pure erlang bloom Filters'';
              license = stdenv.lib.licenses.free;
            };
          } // packageOverrides)
      ) {};

    blume = blume_0_1_0;

    bmark_1_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "bmark";
            version = "1.0.3";
            src = fetchHex {
              pkg = "bmark";
              version = "1.0.3";
              sha256 =
                "243b04d2e2431d01d93f442896d5e6ee52396782c161ef0a0e4f51a353393d93";
            };

            meta = {
              longDescription = ''A benchmarking tool for Elixir with a focus
                                on comparing results with confidence.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/joekain/bmark";
            };
          } // packageOverrides)
      ) {};

    bmark = bmark_1_0_3;

    bmfont_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, tonic_0_0_2 }:
          buildMix ({
            name = "bmfont";
            version = "0.0.2";
            src = fetchHex {
              pkg = "bmfont";
              version = "0.0.2";
              sha256 =
                "91e0f9c6e2838fec23feebde190c19f760914dc86add3e873232e66d6ef2ced3";
            };
            beamDeps  = [ tonic_0_0_2 ];

            meta = {
              description = ''A BMFont file format parser'';
              license = stdenv.lib.licenses.bsd2;
              homepage = "https://github.com/ScrimpyCat/BMFontEx";
            };
          } // packageOverrides)
      ) {};

    bmfont = bmfont_0_0_2;

    bno055_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          elixir_ale_0_7_0,
          gproc_0_6_1
        }:
          buildMix ({
            name = "bno055";
            version = "0.0.1";
            src = fetchHex {
              pkg = "bno055";
              version = "0.0.1";
              sha256 =
                "07f97909748be55dc7e3f31b9fbf708c5b43e9ba229f82b674aaa0ad57f35ef6";
            };
            beamDeps  = [ elixir_ale_0_7_0 gproc_0_6_1 ];

            meta = {
              longDescription = ''OTP application for reading the BNO-055
                                absolute orientation sensor. Euler angles are
                                read at 20hz and published to a configured local
                                `gproc` property.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/TattdCodeMonkey/bno055";
            };
          } // packageOverrides)
      ) {};

    bno055 = bno055_0_0_1;

    bodyguard_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, plug_1_3_5 }:
          buildMix ({
            name = "bodyguard";
            version = "1.0.0";
            src = fetchHex {
              pkg = "bodyguard";
              version = "1.0.0";
              sha256 =
                "45fb709c9eba6d297724be9f3826c35e4453dc55044d3aa1dad9c6f62a9be0cc";
            };
            beamDeps  = [ plug_1_3_5 ];

            meta = {
              longDescription = ''Bodyguard is a simple, flexibile
                                authorization library with a focus on Phoenix
                                1.3+ apps.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/schrockwell/bodyguard";
            };
          } // packageOverrides)
      ) {};

    bodyguard = bodyguard_1_0_0;

    bokun_0_0_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          poison_2_2_0,
          tesla_0_5_2,
          timex_3_1_15
        }:
          buildMix ({
            name = "bokun";
            version = "0.0.4";
            src = fetchHex {
              pkg = "bokun";
              version = "0.0.4";
              sha256 =
                "e58d388144d088b2b2d9f7f5d24693df0a2f10e133305b77bc383e97cef5f21e";
            };
            beamDeps  = [ poison_2_2_0 tesla_0_5_2 timex_3_1_15 ];

            meta = {
              longDescription = ''A Bokun wrapper for Elixir Requires an active
                                account with Bokun (http://bokun.io/).'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Libertrip/Bokun";
            };
          } // packageOverrides)
      ) {};

    bokun = bokun_0_0_4;

    boltun_1_0_2 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, postgrex_1_0_0_rc_1
        }:
          buildMix ({
            name = "boltun";
            version = "1.0.2";
            src = fetchHex {
              pkg = "boltun";
              version = "1.0.2";
              sha256 =
                "fa42a4a6d80342bc7e1d9a5442324cbd1edda2d0304dbf8c0628af905351760e";
            };
            beamDeps  = [ postgrex_1_0_0_rc_1 ];

            meta = {
              longDescription = ''Transforms notifications from the Postgres
                                LISTEN/NOTIFY mechanism into callback
                                execution'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/bitgamma/boltun";
            };
          } // packageOverrides)
      ) {};

    boltun = boltun_1_0_2;

    bookingsync_api_client_v3_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_2_2_2,
          json_0_3_3
        }:
          buildMix ({
            name = "bookingsync_api_client_v3";
            version = "0.0.1";
            src = fetchHex {
              pkg = "bookingsync_api_client_v3";
              version = "0.0.1";
              sha256 =
                "7f0625828f7c38dd37f5ea0f2054b5b902851dbc9679bd354bb928a1f66c5db0";
            };
            beamDeps  = [ httpotion_2_2_2 json_0_3_3 ];

            meta = {
              longDescription = ''Elixir BookingSync
                                (https://www.bookingsync.com) API v3 client.
                                Find more at:
                                http://developers.bookingsync.com'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/Azdaroth/ex_bookingsync_api_client_v3";
            };
          } // packageOverrides)
      ) {};

    bookingsync_api_client_v3 = bookingsync_api_client_v3_0_0_1;

    booter_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "booter";
            version = "0.1.0";
            src = fetchHex {
              pkg = "booter";
              version = "0.1.0";
              sha256 =
                "bb14263b5d5dc74c3f4086f764153a0d09b2b05a9cda6f4b121cc7789159a80e";
            };

            meta = {
              description = ''Boot an Elixir application step by step'';
              license = stdenv.lib.licenses.mpl11;
              homepage = "https://github.com/eraserewind/booter";
            };
          } // packageOverrides)
      ) {};

    booter = booter_0_1_0;

    bootform_0_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_4,
          phoenix_1_3_0_rc_2,
          phoenix_html_2_9_3
        }:
          buildMix ({
            name = "bootform";
            version = "0.1.2";
            src = fetchHex {
              pkg = "bootform";
              version = "0.1.2";
              sha256 =
                "ed027ba9462bbc6ff2636a4c5fe522771729bd26d791fee73b303700ee294ff8";
            };
            beamDeps  = [ ecto_2_1_4 phoenix_1_3_0_rc_2 phoenix_html_2_9_3 ];

            meta = {
              description = ''Create bootstrap 4 friendly forms with ease.
                            Build on tope of Phoenix.Form'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/Grafikart/elixir-bootform";
            };
          } // packageOverrides)
      ) {};

    bootform = bootform_0_1_2;

    bootstrap_0_0_2 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex }:
          buildErlangMk ({
            name = "bootstrap";
            version = "0.0.2";
            src = fetchHex {
              pkg = "bootstrap";
              version = "0.0.2";
              sha256 =
                "6224fc68260414956c94da44a08f6f0e0e06a22896c21ccc818ce9c7f0fc4245";
            };

            meta = {
              description = ''A simple, yet powerful cluster bootstrapping
                            application.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/schlagert/bootstrap";
            };
          } // packageOverrides)
      ) {};

    bootstrap = bootstrap_0_0_2;

    bot_framework_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_9_2,
          joken_1_5_0,
          jose_1_8_4,
          poison_2_2_0
        }:
          buildMix ({
            name = "bot_framework";
            version = "0.2.0";
            src = fetchHex {
              pkg = "bot_framework";
              version = "0.2.0";
              sha256 =
                "f5b4480eedd4b87fcf8661bb69b00c5e40b78f2aecbf1699f3aeb6f84b470482";
            };
            beamDeps  = [ httpoison_0_9_2 joken_1_5_0 jose_1_8_4 poison_2_2_0
                      ];

            meta = {
              description = ''Microsoft Bot Framework Client in Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/yuyabee/bot_framework";
            };
          } // packageOverrides)
      ) {};

    bot_framework = bot_framework_0_2_0;

    botan_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "botan";
            version = "0.2.0";
            src = fetchHex {
              pkg = "botan";
              version = "0.2.0";
              sha256 =
                "e34d70e935e4a61b1e634f44566dc467529e039dfccdbb9ce8e9580a108ac264";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''Elixir wrapper for Botan.io'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mendab1e/exBotan";
            };
          } // packageOverrides)
      ) {};

    botan = botan_0_2_0;

    bottler_0_5_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, sshex_1_1_0 }:
          buildMix ({
            name = "bottler";
            version = "0.5.0";
            src = fetchHex {
              pkg = "bottler";
              version = "0.5.0";
              sha256 =
                "a76b2ddfc98ef943ceb6730dd09fb3d085cb9dcc8feb8c739abbe0dcc77d8ffe";
            };
            beamDeps  = [ sshex_1_1_0 ];

            meta = {
              longDescription = ''Help you bottle, ship and serve your Elixir
                                apps. Bottler is a collection of tools that aims
                                to help you generate releases, ship them to your
                                servers, install them there, and get them live
                                on production.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/elpulgardelpanda/bottler";
            };
          } // packageOverrides)
      ) {};

    bottler = bottler_0_5_0;

    bouncer_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          phoenix_1_3_0_rc_2,
          plug_1_3_5,
          poison_1_0_2,
          poolboy_1_5_1,
          redix_0_6_1
        }:
          buildMix ({
            name = "bouncer";
            version = "0.3.0";
            src = fetchHex {
              pkg = "bouncer";
              version = "0.3.0";
              sha256 =
                "44703943250b05f761948b812d3de6f6ef2eb6529cd60ca0c8634e2672b3b762";
            };
            beamDeps  = [
                          phoenix_1_3_0_rc_2
                          plug_1_3_5
                          poison_1_0_2
                          poolboy_1_5_1
                          redix_0_6_1
                        ];

            meta = {
              description = ''Token-based authorization and session management
                            for Phoenix (Elixir)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ianwalter/bouncer";
            };
          } // packageOverrides)
      ) {};

    bouncer = bouncer_0_3_0;

    bourne_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ecto_2_1_4 }:
          buildMix ({
            name = "bourne";
            version = "1.0.1";
            src = fetchHex {
              pkg = "bourne";
              version = "1.0.1";
              sha256 =
                "fe4b2ac09344d5d5d30b7ad4459159747e03f3bbb69a69612fc493cccbbc4dd2";
            };
            beamDeps  = [ ecto_2_1_4 ];

            meta = {
              description = ''Better streaming for Ecto.'';
              license = stdenv.lib.licenses.publicDomain;
              homepage = "https://github.com/mtwilliams/bourne";
            };
          } // packageOverrides)
      ) {};

    bourne = bourne_1_0_1;

    bowfish_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "bowfish";
            version = "0.1.0";
            src = fetchHex {
              pkg = "bowfish";
              version = "0.1.0";
              sha256 =
                "fcf3cccddd5d39adf5c5aceae924854d500f99bb45af97e118695db1cb633f67";
            };

            meta = {
              longDescription = ''A fun, positional pipe operator macro >>> for
                                when piping to the first arg just won`t cut
                                it.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/coconaut/bowfish";
            };
          } // packageOverrides)
      ) {};

    bowfish = bowfish_0_1_0;

    bpe_2_4_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "bpe";
            version = "2.4.0";
            src = fetchHex {
              pkg = "bpe";
              version = "2.4.0";
              sha256 =
                "ad18ed5b28e8757944a2c5aa01084852694a34ba3b2d5d9d09b834363142ab5f";
            };

            meta = {
              description = ''BPE Process Engine'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/synrc/bpe";
            };
          } // packageOverrides)
      ) {};

    bpe = bpe_2_4_0;

    brady_0_0_7 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          floki_0_17_2,
          phoenix_1_3_0_rc_2
        }:
          buildMix ({
            name = "brady";
            version = "0.0.7";
            src = fetchHex {
              pkg = "brady";
              version = "0.0.7";
              sha256 =
                "73cab15f86230e4054ca563f0a9ae69cbe95f4c93bf918ecdb49f75a8219bcbd";
            };
            beamDeps  = [ floki_0_17_2 phoenix_1_3_0_rc_2 ];

            meta = {
              description = ''Template helpers for Phoenix applications'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/thoughtbot/brady";
            };
          } // packageOverrides)
      ) {};

    brady = brady_0_0_7;

    brainfux_0_2_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "brainfux";
            version = "0.2.5";
            src = fetchHex {
              pkg = "brainfux";
              version = "0.2.5";
              sha256 =
                "8ab9d0767669e5afddc11c08ba47c1a0c9878604b754175098a5b8ced05c4144";
            };

            meta = {
              description = ''Brainfux enables you to define brainfuck function
                            in elixir.'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/SekiT/brainfux";
            };
          } // packageOverrides)
      ) {};

    brainfux = brainfux_0_2_5;

    braintree_0_7_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, hackney_1_8_6 }:
          buildMix ({
            name = "braintree";
            version = "0.7.0";
            src = fetchHex {
              pkg = "braintree";
              version = "0.7.0";
              sha256 =
                "9fd53820cb37e44e3f5eb35a616cf0384c359cd9d7ac08c7be40678bd2f27c4b";
            };
            beamDeps  = [ hackney_1_8_6 ];

            meta = {
              description = ''Native Braintree client library for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sorentwo/braintree-elixir";
            };
          } // packageOverrides)
      ) {};

    braintree = braintree_0_7_0;

    braise_0_3_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_1_3_1 }:
          buildMix ({
            name = "braise";
            version = "0.3.4";
            src = fetchHex {
              pkg = "braise";
              version = "0.3.4";
              sha256 =
                "10325449af9365e886b2731a7709efded8e3443253c10c9af7a50fcfe5597707";
            };
            beamDeps  = [ poison_1_3_1 ];

            meta = {
              description = ''A library that converts JSON Schema into ember
                            models/adapters.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/IoraHealth/braise";
            };
          } // packageOverrides)
      ) {};

    braise = braise_0_3_4;

    brando_villain_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "brando_villain";
            version = "0.1.1";
            src = fetchHex {
              pkg = "brando_villain";
              version = "0.1.1";
              sha256 =
                "d0aac919270633a147ad844bd55a8167c7dd2cd2efa877f09a2211637595936e";
            };

            meta = {
              description = ''Package for including Villain in Brando projects
                            through NPM.'';
              license = stdenv.lib.licenses.free;
            };
          } // packageOverrides)
      ) {};

    brando_villain = brando_villain_0_1_1;

    brcpfcnpj_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "brcpfcnpj";
            version = "0.1.0";
            src = fetchHex {
              pkg = "brcpfcnpj";
              version = "0.1.0";
              sha256 =
                "19ba4d572c93c70d571a36d6ada2fca4d03330d8f96c6b7d8e4c47fa9f809c90";
            };

            meta = {
              longDescription = ''Valida Cpf/Cnpj e Formatar em String caso
                                necessario Number format and Validate, to the
                                documents brazilians (CPF/CNPJ)'';
              license = stdenv.lib.licenses.unlicense;
              homepage = "https://github.com/williamgueiros/Brcpfcnpj";
            };
          } // packageOverrides)
      ) {};

    brcpfcnpj = brcpfcnpj_0_1_0;

    breadcrumble_1_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, plug_1_3_5 }:
          buildMix ({
            name = "breadcrumble";
            version = "1.0.3";
            src = fetchHex {
              pkg = "breadcrumble";
              version = "1.0.3";
              sha256 =
                "f1d3ec0d3bf74670c58d4ff6c1d10cad0757c003b56ba9f77e3d76a05ac68be3";
            };
            beamDeps  = [ plug_1_3_5 ];

            meta = {
              description = ''Elixir port of Breadcrumble library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ma2gedev/breadcrumble_ex";
            };
          } // packageOverrides)
      ) {};

    breadcrumble = breadcrumble_1_0_3;

    breaker_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, httpotion_3_0_2 }:
          buildMix ({
            name = "breaker";
            version = "1.0.0";
            src = fetchHex {
              pkg = "breaker";
              version = "1.0.0";
              sha256 =
                "f56ef1ebb80072be41a4864a19a4261ec7a815a612bb823de2def4945681aa73";
            };
            beamDeps  = [ httpotion_3_0_2 ];

            meta = {
              description = ''A circuit breaker for HTTP requests to external
                            services in Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/awochna/breaker";
            };
          } // packageOverrides)
      ) {};

    breaker = breaker_1_0_0;

    brewery_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ex_doc_0_15_1 }:
          buildMix ({
            name = "brewery";
            version = "0.1.1";
            src = fetchHex {
              pkg = "brewery";
              version = "0.1.1";
              sha256 =
                "165b0af03a9e3699627b81eb60cecca3b718f53dcebc3c1d0f8df37cc7c5e8a3";
            };
            beamDeps  = [ ex_doc_0_15_1 ];

            meta = {
              description = ''Compiling Elixir code into standalone
                            executables'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jamen/brewery";
            };
          } // packageOverrides)
      ) {};

    brewery = brewery_0_1_1;

    briefly_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "briefly";
            version = "0.3.0";
            src = fetchHex {
              pkg = "briefly";
              version = "0.3.0";
              sha256 =
                "c6ebf8fc3dcd4950dd10c03e953fb4f553a8bcf0ff4c8c40d71542434cd7e046";
            };

            meta = {
              description = ''Simple, robust temporary file support'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/CargoSense/briefly";
            };
          } // packageOverrides)
      ) {};

    briefly = briefly_0_3_0;

    brighterx_0_0_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_9_2,
          poison_1_0_2
        }:
          buildMix ({
            name = "brighterx";
            version = "0.0.4";
            src = fetchHex {
              pkg = "brighterx";
              version = "0.0.4";
              sha256 =
                "73efee8d9dcd5c33ca8aa772daf8489ca2a049f3c50b5d4298aebeb52525070c";
            };
            beamDeps  = [ httpoison_0_9_2 poison_1_0_2 ];

            meta = {
              description = ''A simple brighterlink api implementation'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Brightergy/brighterx";
            };
          } // packageOverrides)
      ) {};

    brighterx = brighterx_0_0_4;

    bristow_0_2_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "bristow";
            version = "0.2.2";
            src = fetchHex {
              pkg = "bristow";
              version = "0.2.2";
              sha256 =
                "13dcfc7dd9c47796edfd0fe1e95c22cd509beee4ce64ab8d7cf487fbfc415a11";
            };

            meta = {
              description = ''Create function`s alias'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/botsunit/bristow";
            };
          } // packageOverrides)
      ) {};

    bristow = bristow_0_2_2;

    brod_2_3_7 = callPackage
      (
        {
          buildErlangMk,
          packageOverrides ? {},
          fetchHex,
          kafka_protocol_0_9_1,
          supervisor3_1_1_5
        }:
          buildErlangMk ({
            name = "brod";
            version = "2.3.7";
            src = fetchHex {
              pkg = "brod";
              version = "2.3.7";
              sha256 =
                "37eb43de957678b4cfa679c77133487e719d38446ab67f34b066d6e1e9883621";
            };
            beamDeps  = [ kafka_protocol_0_9_1 supervisor3_1_1_5 ];

            meta = {
              description = ''Apache Kafka Erlang client library'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/klarna/brod";
            };
          } // packageOverrides)
      ) {};

    brod_2_5_0 = callPackage
      (
        {
          buildErlangMk,
          packageOverrides ? {},
          fetchHex,
          kafka_protocol_0_9_2,
          supervisor3_1_1_5
        }:
          buildErlangMk ({
            name = "brod";
            version = "2.5.0";
            src = fetchHex {
              pkg = "brod";
              version = "2.5.0";
              sha256 =
                "e1a8eeaeedabb8a091f592a285420fe657b2cbc2d5604878d8ef11a2605c866b";
            };
            beamDeps  = [ kafka_protocol_0_9_2 supervisor3_1_1_5 ];

            meta = {
              description = ''Apache Kafka Erlang client library'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/klarna/brod";
            };
          } // packageOverrides)
      ) {};

    brod = brod_2_5_0;

    brotli_0_1_4 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "brotli";
            version = "0.1.4";
            src = fetchHex {
              pkg = "brotli";
              version = "0.1.4";
              sha256 =
                "710b575b3eb418938cdf94da019dbedfe37a751cb8be67f00815d92eb86c6fc2";
            };
            compilePorts = true;

            meta = {
              description = ''brotli compression library wrapper for Erlang'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/yjh0502/erl-brotli";
            };
          } // packageOverrides)
      ) {};

    brotli = brotli_0_1_4;

    browser_0_3_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, plug_1_3_5 }:
          buildMix ({
            name = "browser";
            version = "0.3.1";
            src = fetchHex {
              pkg = "browser";
              version = "0.3.1";
              sha256 =
                "e9ced0175695de15f8511992f53d4be47878950fdea0b94ca0958a846869506e";
            };
            beamDeps  = [ plug_1_3_5 ];

            meta = {
              description = ''Browser detection library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tuvistavie/elixir-browser";
            };
          } // packageOverrides)
      ) {};

    browser = browser_0_3_1;

    browser_lang_0_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "browser_lang";
            version = "0.1.0";
            src = fetchHex {
              pkg = "browser_lang";
              version = "0.1.0";
              sha256 =
                "26d82ea1f457218b63ef457dba8c215e664c5bb87eb1fedacb453776d2eeb4e2";
            };

            meta = {
              description = ''Http language and locale headers parse
                            functions.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/h8/browser_lang";
            };
          } // packageOverrides)
      ) {};

    browser_lang = browser_lang_0_1_0;

    brucke_1_9_4 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          brod_2_3_7,
          cowboy_1_1_2,
          graphiter_1_0_5,
          jsone_1_4_3,
          lager_3_2_4,
          yamerl_0_4_0
        }:
          buildRebar3 ({
            name = "brucke";
            version = "1.9.4";
            src = fetchHex {
              pkg = "brucke";
              version = "1.9.4";
              sha256 =
                "8036c006fe6cf205845caa1e9af24f125b167b022b95dedef7daf8f2d8f31279";
            };

            beamDeps  = [
                          brod_2_3_7
                          cowboy_1_1_2
                          graphiter_1_0_5
                          jsone_1_4_3
                          lager_3_2_4
                          yamerl_0_4_0
                        ];

            meta = {
              description = ''Inter-cluster bridge of kafka topics'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/klarna/brucke";
            };
          } // packageOverrides)
      ) {};

    brucke = brucke_1_9_4;

    brunhilde_1_5_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "brunhilde";
            version = "1.5.0";
            src = fetchHex {
              pkg = "brunhilde";
              version = "1.5.0";
              sha256 =
                "a48cfdc59312efb36993ced6ab7d4888f1225712d0d75da6ef5235fca1fc54e8";
            };

            meta = {
              description = ''Brunhilde is a minimal HTTP server.'';
              license = stdenv.lib.licenses.free;
            };
          } // packageOverrides)
      ) {};

    brunhilde = brunhilde_1_5_0;

    brute_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "brute";
            version = "0.1.0";
            src = fetchHex {
              pkg = "brute";
              version = "0.1.0";
              sha256 =
                "22cbdb0c8ef1796626554824dbf3177b7670961f4c41a85bf3786eacb2755868";
            };

            meta = {
              longDescription = ''Brute is a package that generates various
                                combinations for a provided character-set.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/uri/brute";
            };
          } // packageOverrides)
      ) {};

    brute = brute_0_1_0;

    bson_0_4_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "bson";
            version = "0.4.4";
            src = fetchHex {
              pkg = "bson";
              version = "0.4.4";
              sha256 =
                "69cbda1d27fd0f500f306c99e609593132c66b521b92a21ce6f21fea88dc3d27";
            };

            meta = {
              description = ''BSON implementation for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/checkiz/elixir-bson";
            };
          } // packageOverrides)
      ) {};

    bson = bson_0_4_4;

    bsoneach_0_4_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "bsoneach";
            version = "0.4.1";
            src = fetchHex {
              pkg = "bsoneach";
              version = "0.4.1";
              sha256 =
                "f2fa746808e41198375c364af5d77f48af0cd0444fd81e42ad907a557a05573b";
            };

            meta = {
              description = ''Applies a function to each document in a BSON
                            file.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Nebo15/bsoneach";
            };
          } // packageOverrides)
      ) {};

    bsoneach = bsoneach_0_4_1;

    bstr_0_3_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "bstr";
            version = "0.3.0";
            src = fetchHex {
              pkg = "bstr";
              version = "0.3.0";
              sha256 =
                "0fb4e05619663d48dabcd21023915741277ba392f2a5710dde7ab6034760284d";
            };

            meta = {
              description = ''Erlang library that uses binaries as strings'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/jcomellas/bstr";
            };
          } // packageOverrides)
      ) {};

    bstr = bstr_0_3_0;

    bucs_1_0_10 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "bucs";
            version = "1.0.10";
            src = fetchHex {
              pkg = "bucs";
              version = "1.0.10";
              sha256 =
                "aa85c07aaa452c03178e67d1224c01773e3743ba37365ab1a73a1a740863c8c6";
            };

            meta = {
              description = ''Bots Unit Commons'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/botsunit/bucs";
            };
          } // packageOverrides)
      ) {};

    bucs = bucs_1_0_10;

    buffer_0_3_11 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "buffer";
            version = "0.3.11";
            src = fetchHex {
              pkg = "buffer";
              version = "0.3.11";
              sha256 =
                "a05546eb387d468eeef4b374d4683bb0a34f95f0a36f9be19a04fec888890667";
            };

            meta = {
              description = ''Provide read and write buffers for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/adrienmo/buffer";
            };
          } // packageOverrides)
      ) {};

    buffer = buffer_0_3_11;

    bufu_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_3_0_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "bufu";
            version = "0.1.0";
            src = fetchHex {
              pkg = "bufu";
              version = "0.1.0";
              sha256 =
                "a5ecb1e789c2fc2bbabad7bd42dd6934120b14fd260b055e25da90b63c16165c";
            };
            beamDeps  = [ httpotion_3_0_2 poison_2_2_0 ];

            meta = {
              description = ''Giant Bomb API client library.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/paulfri/bufu";
            };
          } // packageOverrides)
      ) {};

    bufu = bufu_0_1_0;

    bugsnag_1_5_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_1_0_2
        }:
          buildMix ({
            name = "bugsnag";
            version = "1.5.0";
            src = fetchHex {
              pkg = "bugsnag";
              version = "1.5.0";
              sha256 =
                "78dc76b7480299c0ee45bce262c964dd3fd2a1f7c4b7e050114251b79b7eecce";
            };
            beamDeps  = [ httpoison_0_11_2 poison_1_0_2 ];

            meta = {
              description = ''An Elixir interface to the Bugsnag API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jarednorman/bugsnag-elixir";
            };
          } // packageOverrides)
      ) {};

    bugsnag = bugsnag_1_5_0;

    bugsnag_elixir_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_3_1_0 }:
          buildMix ({
            name = "bugsnag_elixir";
            version = "0.1.0";
            src = fetchHex {
              pkg = "bugsnag_elixir";
              version = "0.1.0";
              sha256 =
                "145b6d0eaa3c2a7c9ad3e04d6a4ad4c34eb36b14b12da69e1c922290060388d9";
            };
            beamDeps  = [ poison_3_1_0 ];

            meta = {
              description = ''Error reporter for Bugsnag API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lukkor/bugsnag-elixir";
            };
          } // packageOverrides)
      ) {};

    bugsnag_elixir = bugsnag_elixir_0_1_0;

    bugsnag_erl_1_1_4 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          jsone_1_3_2,
          lager_3_2_4
        }:
          buildRebar3 ({
            name = "bugsnag_erl";
            version = "1.1.4";
            src = fetchHex {
              pkg = "bugsnag_erl";
              version = "1.1.4";
              sha256 =
                "14c5baf41b90ed7ea5b815af616676f9e7035adee63f112874c4985c6b010fc2";
            };

            beamDeps  = [ jsone_1_3_2 lager_3_2_4 ];

            meta = {
              description = ''Bugsnag notifier'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/project-fifo/bugsnag-erlang";
            };
          } // packageOverrides)
      ) {};

    bugsnag_erl = bugsnag_erl_1_1_4;

    bugsnex_0_3_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          plug_1_3_5,
          poison_3_1_0
        }:
          buildMix ({
            name = "bugsnex";
            version = "0.3.1";
            src = fetchHex {
              pkg = "bugsnex";
              version = "0.3.1";
              sha256 =
                "b92477b674d3d871dcac599e95496db4c508f8348bfe85fab9b7d2839b39438a";
            };
            beamDeps  = [ httpoison_0_11_2 plug_1_3_5 poison_3_1_0 ];

            meta = {
              description = ''Elixir client for Bugsnag with helpers for Plug
                            and Phoenix'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/liefery/bugsnex";
            };
          } // packageOverrides)
      ) {};

    bugsnex = bugsnex_0_3_1;

    build_client_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "build_client";
            version = "0.0.1";
            src = fetchHex {
              pkg = "build_client";
              version = "0.0.1";
              sha256 =
                "ee28ca64db404b76316fa578f30888b7725cbde91d6f89fa7dfc384a32b9c095";
            };

            meta = {
              description = ''AX Deployment Client'';

              homepage = "https://github.com/dapdizzy/build_client";
            };
          } // packageOverrides)
      ) {};

    build_client = build_client_0_0_1;

    bump_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "bump";
            version = "0.1.0";
            src = fetchHex {
              pkg = "bump";
              version = "0.1.0";
              sha256 =
                "068b418026a90382f9809ffe0504579f7ccea981f794ff6257ba2a0925b91360";
            };

            meta = {
              description = ''A library for writing BMP files from binary data.
                            '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/evanfarrar/ex_bump";
            };
          } // packageOverrides)
      ) {};

    bump = bump_0_1_0;

    bundler_0_6_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "bundler";
            version = "0.6.0";
            src = fetchHex {
              pkg = "bundler";
              version = "0.6.0";
              sha256 =
                "c3c8c78c50b487c69b3895e3266314c314878fd733f59d1fda10fe09dca632fa";
            };

            meta = {
              longDescription = ''Build releases of your Mix projects with
                                ease! WARNING: This package is an experimental
                                replacement for exrm, use at your own risk!'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bitwalker/bundler";
            };
          } // packageOverrides)
      ) {};

    bundler = bundler_0_6_0;

    bunq_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "bunq";
            version = "0.0.1";
            src = fetchHex {
              pkg = "bunq";
              version = "0.0.1";
              sha256 =
                "4b7f06a7b252bd3c8e40128be6763b8f8f1036161e81f4c3365245a4b3da249c";
            };

            meta = {
              description = ''Placeholder package'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    bunq = bunq_0_0_1;

    bunt_0_1_6 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "bunt";
            version = "0.1.6";
            src = fetchHex {
              pkg = "bunt";
              version = "0.1.6";
              sha256 =
                "4fb7b2f7b04af13cf210b132f8d10db52d4a57d36cb974e8025d7fdb12ca97fc";
            };

            meta = {
              description = ''256 color ANSI coloring in the terminal'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rrrene/bunt";
            };
          } // packageOverrides)
      ) {};

    bunt_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "bunt";
            version = "0.2.0";
            src = fetchHex {
              pkg = "bunt";
              version = "0.2.0";
              sha256 =
                "7af5c7e09fe1d40f76c8e4f9dd2be7cebd83909f31fee7cd0e9eadc567da8353";
            };

            meta = {
              description = ''256 color ANSI coloring in the terminal'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rrrene/bunt";
            };
          } // packageOverrides)
      ) {};

    bunt = bunt_0_2_0;

    bunyan_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          plug_1_3_5,
          poison_3_1_0
        }:
          buildMix ({
            name = "bunyan";
            version = "0.1.0";
            src = fetchHex {
              pkg = "bunyan";
              version = "0.1.0";
              sha256 =
                "0dc4d85058a37e1a67c5927da1270a0d33cbbb9461b83c6cc9714b18c9d5f358";
            };
            beamDeps  = [ plug_1_3_5 poison_3_1_0 ];

            meta = {
              longDescription = ''A JSON logger for Elixir that provides a plug
                                logger, error logger, and manual logging by
                                wrapping the standard Elixir Logger.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/bencoppock/bunyan";
            };
          } // packageOverrides)
      ) {};

    bunyan = bunyan_0_1_0;

    buoy_0_1_2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, shackle_0_5_1 }:
          buildRebar3 ({
            name = "buoy";
            version = "0.1.2";
            src = fetchHex {
              pkg = "buoy";
              version = "0.1.2";
              sha256 =
                "b070bb79e7b0299dfd1ce8734068ccc0832d4fabc28a5676e9a70f333c6070df";
            };

            beamDeps  = [ shackle_0_5_1 ];

            meta = {
              description = ''High Performance Erlang HTTP 1.1 Client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lpgauth/buoy";
            };
          } // packageOverrides)
      ) {};

    buoy = buoy_0_1_2;

    bupe_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "bupe";
            version = "0.3.0";
            src = fetchHex {
              pkg = "bupe";
              version = "0.3.0";
              sha256 =
                "138e9eb64bf82d2b0878e6b0aac9b69a6f5eba972812614f508c827958064f6a";
            };

            meta = {
              description = ''EPUB Generator and Parser'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/milmazz/bupe";
            };
          } // packageOverrides)
      ) {};

    bupe = bupe_0_3_0;

    bureaucrat_0_1_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, plug_1_1_7 }:
          buildMix ({
            name = "bureaucrat";
            version = "0.1.4";
            src = fetchHex {
              pkg = "bureaucrat";
              version = "0.1.4";
              sha256 =
                "61548091017640cc114c5e4fe309c7f3fdf8fcdd8ec013759cffbc20d4df91cd";
            };
            beamDeps  = [ plug_1_1_7 ];

            meta = {
              description = ''Generate Phoenix API documentation from tests'';
              license = stdenv.lib.licenses.unlicense;
              homepage = "https://github.com/api-hogs/bureaucrat";
            };
          } // packageOverrides)
      ) {};

    bureaucrat_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          phoenix_1_3_0_rc_2,
          plug_1_3_5,
          poison_1_0_2
        }:
          buildMix ({
            name = "bureaucrat";
            version = "0.2.0";
            src = fetchHex {
              pkg = "bureaucrat";
              version = "0.2.0";
              sha256 =
                "87d7585b52af80de28f260dbc71542d4d4cf5a965b650f6d07ae8db13deb3106";
            };
            beamDeps  = [ phoenix_1_3_0_rc_2 plug_1_3_5 poison_1_0_2 ];

            meta = {
              description = ''Generate Phoenix API documentation from tests'';
              license = stdenv.lib.licenses.unlicense;
              homepage = "https://github.com/api-hogs/bureaucrat";
            };
          } // packageOverrides)
      ) {};

    bureaucrat = bureaucrat_0_2_0;

    bus_0_1_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "bus";
            version = "0.1.4";
            src = fetchHex {
              pkg = "bus";
              version = "0.1.4";
              sha256 =
                "c3251e42c530021d2df7f11bef2b46d93f294646ccff45734959e0f0ee693e85";
            };

            meta = {
              longDescription = ''Bus is Mqtt client written in elixir. It aims
                                to be dafecto mqtt client for elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/i-m-v-j/Bus";
            };
          } // packageOverrides)
      ) {};

    bus = bus_0_1_4;

    bus_bar_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "bus_bar";
            version = "0.0.3";
            src = fetchHex {
              pkg = "bus_bar";
              version = "0.0.3";
              sha256 =
                "aaaf06a223ec1d6f092d0bf8fab31668fcb6f750a1f407427a25220067c72d57";
            };

            meta = {
              description = ''A simple event bus.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/JonRowe/busbar";
            };
          } // packageOverrides)
      ) {};

    bus_bar = bus_bar_0_0_3;

    bus_car_0_2_11 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          bus_car_dsl_0_1_4,
          gen_util_0_1_0,
          httpoison_0_5_0,
          poison_1_0_2,
          slogger_0_1_6
        }:
          buildMix ({
            name = "bus_car";
            version = "0.2.11";
            src = fetchHex {
              pkg = "bus_car";
              version = "0.2.11";
              sha256 =
                "2b15fb712f22a2ad237a03bcb4fc0a7c8fcae7b3062b3f6c64d260e421de3752";
            };
            beamDeps  = [
                          bus_car_dsl_0_1_4
                          gen_util_0_1_0
                          httpoison_0_5_0
                          poison_1_0_2
                          slogger_0_1_6
                        ];

            meta = {
              description = ''A super simple Elasticsearch tool with its own
                            DSL and Ecto-like use.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/elbow-jason/bus_car";
            };
          } // packageOverrides)
      ) {};

    bus_car = bus_car_0_2_11;

    bus_car_dsl_0_1_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "bus_car_dsl";
            version = "0.1.4";
            src = fetchHex {
              pkg = "bus_car_dsl";
              version = "0.1.4";
              sha256 =
                "0e0fdcf1eba7c4a670b150177e9c34290276b8b9ac5c2ff33615e68d09bd8414";
            };

            meta = {
              longDescription = ''A Domain Specific Language for composing
                                ElasticSearch queries without all the
                                nesting.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/elbow-jason/bus_car_dsl";
            };
          } // packageOverrides)
      ) {};

    bus_car_dsl = bus_car_dsl_0_1_4;

    butler_0_6_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_7_5,
          poison_1_5_2
        }:
          buildMix ({
            name = "butler";
            version = "0.6.2";
            src = fetchHex {
              pkg = "butler";
              version = "0.6.2";
              sha256 =
                "28d681c4986c6711bf72c645084a83ea108a35039cedf5d03d6779d86cb7db19";
            };
            beamDeps  = [ httpoison_0_7_5 poison_1_5_2 ];

            meta = {
              description = ''A simple elixir robot to help you get things
                            done'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/keathley/butler";
            };
          } // packageOverrides)
      ) {};

    butler_0_7_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_7_5,
          poison_1_5_2
        }:
          buildMix ({
            name = "butler";
            version = "0.7.1";
            src = fetchHex {
              pkg = "butler";
              version = "0.7.1";
              sha256 =
                "fdc4226c0347ea94e6b535c7d352c098720bdfad280357dad9b4d8bd3c346bd7";
            };
            beamDeps  = [ httpoison_0_7_5 poison_1_5_2 ];

            meta = {
              description = ''A simple elixir robot to help you get things
                            done'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/keathley/butler";
            };
          } // packageOverrides)
      ) {};

    butler = butler_0_7_1;

    butler_cage_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, butler_0_7_1 }:
          buildMix ({
            name = "butler_cage";
            version = "0.0.2";
            src = fetchHex {
              pkg = "butler_cage";
              version = "0.0.2";
              sha256 =
                "22c5d1d0cbe6c19fffae260b02717a984ee5632c34492ee4254972ca4ab8e059";
            };
            beamDeps  = [ butler_0_7_1 ];

            meta = {
              description = ''A Butler plugin for showing silly photos of Nick
                            Cage.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/keathley/butler_cage";
            };
          } // packageOverrides)
      ) {};

    butler_cage = butler_cage_0_0_2;

    butler_cowsay_0_2_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          butler_0_6_2,
          cowsay_0_0_1
        }:
          buildMix ({
            name = "butler_cowsay";
            version = "0.2.1";
            src = fetchHex {
              pkg = "butler_cowsay";
              version = "0.2.1";
              sha256 =
                "d5b6ef82ebd387666c8b8d4fd93df3d11ff2ed7a129ae3aa7d7faac9ae803195";
            };
            beamDeps  = [ butler_0_6_2 cowsay_0_0_1 ];

            meta = {
              description = ''ButlerCowsay plugin for Butler SlackBot'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bbrock25/butler_cowsay";
            };
          } // packageOverrides)
      ) {};

    butler_cowsay = butler_cowsay_0_2_1;

    butler_new_0_4_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "butler_new";
            version = "0.4.3";
            src = fetchHex {
              pkg = "butler_new";
              version = "0.4.3";
              sha256 =
                "ef68a4957dde207e7663c3947d8ec93d8e24c9872619bd66b47d52abfb2b3d90";
            };
             meta = {    };
          } // packageOverrides)
      ) {};

    butler_new = butler_new_0_4_3;

    butler_tableflip_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, butler_0_7_1 }:
          buildMix ({
            name = "butler_tableflip";
            version = "0.0.3";
            src = fetchHex {
              pkg = "butler_tableflip";
              version = "0.0.3";
              sha256 =
                "327840e6a07b8a3f2cc461920aea0a1cf39898b6fc0e1484e94867810dfea444";
            };
            beamDeps  = [ butler_0_7_1 ];

            meta = {
              description = ''Butler Plugin for flipping tables.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/keathley/butler_tableflip";
            };
          } // packageOverrides)
      ) {};

    butler_tableflip = butler_tableflip_0_0_3;

    bypass_0_6_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          plug_1_3_5
        }:
          buildMix ({
            name = "bypass";
            version = "0.6.0";
            src = fetchHex {
              pkg = "bypass";
              version = "0.6.0";
              sha256 =
                "a1044ec945fc316ef0db01800b3d6973f79d338274524e65553d924835367f2f";
            };
            beamDeps  = [ cowboy_1_1_2 plug_1_3_5 ];

            meta = {
              longDescription = ''Bypass provides a quick way to create a
                                custom plug that can be put in place instead of
                                an actual HTTP server to return prebaked
                                responses to client requests. This is helpful
                                when you want to create a mock HTTP server and
                                test how your HTTP client handles different
                                types of server responses.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pspdfkit-labs/bypass";
            };
          } // packageOverrides)
      ) {};

    bypass = bypass_0_6_0;

    cabbage_0_3_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, gherkin_1_4_0 }:
          buildMix ({
            name = "cabbage";
            version = "0.3.1";
            src = fetchHex {
              pkg = "cabbage";
              version = "0.3.1";
              sha256 =
                "412ced5976aaa896402b82e7009d0320fe01cfc649a025f028c6949e7f839c6e";
            };
            beamDeps  = [ gherkin_1_4_0 ];

            meta = {
              description = ''Story BDD tool for executing elixir in ExUnit'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cabbage-ex/cabbage";
            };
          } // packageOverrides)
      ) {};

    cabbage = cabbage_0_3_1;

    cache_tab_1_0_8 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, p1_utils_1_0_9
        }:
          buildRebar3 ({
            name = "cache_tab";
            version = "1.0.8";
            src = fetchHex {
              pkg = "cache_tab";
              version = "1.0.8";
              sha256 =
                "29d0305095c85df7a05c3be11cd59a0273572eee5df4b5dcd16c494e8384b1f5";
            };

            beamDeps  = [ p1_utils_1_0_9 ];

            meta = {
              description = ''In-memory cache Erlang / Elixir library'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/processone/cache_tab";
            };
          } // packageOverrides)
      ) {};

    cache_tab = cache_tab_1_0_8;

    cachex_2_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, eternal_1_1_4 }:
          buildMix ({
            name = "cachex";
            version = "2.1.0";
            src = fetchHex {
              pkg = "cachex";
              version = "2.1.0";
              sha256 =
                "20de7299ff4383bab07f06b0b228762041454935d1e25ca5cc2088876a5a2044";
            };
            beamDeps  = [ eternal_1_1_4 ];

            meta = {
              description = ''Powerful in-memory key/value storage for
                            Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zackehh/cachex";
            };
          } // packageOverrides)
      ) {};

    cachex = cachex_2_1_0;

    calcinator_3_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          alembic_3_3_0,
          ja_serializer_0_12_0,
          phoenix_1_3_0_rc_2,
          uuid_1_1_7
        }:
          buildMix ({
            name = "calcinator";
            version = "3.0.0";
            src = fetchHex {
              pkg = "calcinator";
              version = "3.0.0";
              sha256 =
                "f26215fc8e675f5ace74b08222d66fdf4e19bf1a7e903aa84b6dc8a324ac2cc1";
            };
            beamDeps  = [
                          alembic_3_3_0
                          ja_serializer_0_12_0
                          phoenix_1_3_0_rc_2
                          uuid_1_1_7
                        ];

            meta = {
              description = ''Process JSONAPI requests in transport and backing
                            store neutral way.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/C-S-D/calcinator";
            };
          } // packageOverrides)
      ) {};

    calcinator = calcinator_3_0_0;

    calecto_0_16_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          calendar_0_17_2,
          ecto_1_0_1
        }:
          buildMix ({
            name = "calecto";
            version = "0.16.2";
            src = fetchHex {
              pkg = "calecto";
              version = "0.16.2";
              sha256 =
                "03a8b922557741bc9a8cefbb1d8918955f2daebb56fe91669f27946cc6af31ee";
            };
            beamDeps  = [ calendar_0_17_2 ecto_1_0_1 ];

            meta = {
              longDescription = ''Library for using Calendar with Ecto. This
                                lets you save Calendar types in Ecto and work
                                with date-times in multiple timezones.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lau/calecto";
            };
          } // packageOverrides)
      ) {};

    calecto = calecto_0_16_2;

    calendar_0_12_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, tzdata_0_5_3 }:
          buildMix ({
            name = "calendar";
            version = "0.12.4";
            src = fetchHex {
              pkg = "calendar";
              version = "0.12.4";
              sha256 =
                "1df7cc23b7dfa3228498fff3bd298495d8431433be94db62a60e93ffa455a060";
            };
            beamDeps  = [ tzdata_0_5_3 ];

            meta = {
              longDescription = ''Calendar is a datetime library for Elixir.
                                Timezone support via its sister package
                                `tzdata`. Safe parsing and formatting of
                                standard formats (ISO, RFC, etc.), strftime
                                formatting. Interoperability with erlang style
                                datetime tuples. Extendable through
                                protocols.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lau/calendar";
            };
          } // packageOverrides)
      ) {};

    calendar_0_13_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, tzdata_0_5_3 }:
          buildMix ({
            name = "calendar";
            version = "0.13.2";
            src = fetchHex {
              pkg = "calendar";
              version = "0.13.2";
              sha256 =
                "5be3a69db1a177ed39d24d582ac7be3dab59ee8aeae41ee17c36a263a9818460";
            };
            beamDeps  = [ tzdata_0_5_3 ];

            meta = {
              longDescription = ''Calendar is a datetime library for Elixir.
                                Timezone support via its sister package
                                `tzdata`. Safe parsing and formatting of
                                standard formats (ISO, RFC, etc.), strftime
                                formatting. Interoperability with erlang style
                                datetime tuples. Extendable through
                                protocols.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lau/calendar";
            };
          } // packageOverrides)
      ) {};

    calendar_0_14_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, tzdata_0_5_3 }:
          buildMix ({
            name = "calendar";
            version = "0.14.2";
            src = fetchHex {
              pkg = "calendar";
              version = "0.14.2";
              sha256 =
                "8b76c5bcfbe77b454c4e38696ea0fb77d52fc212e377a4299884073012960f27";
            };
            beamDeps  = [ tzdata_0_5_3 ];

            meta = {
              longDescription = ''Calendar is a datetime library for Elixir.
                                Timezone support via its sister package
                                `tzdata`. Safe parsing and formatting of
                                standard formats (ISO, RFC, etc.), strftime
                                formatting. Interoperability with erlang style
                                datetime tuples. Extendable through
                                protocols.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lau/calendar";
            };
          } // packageOverrides)
      ) {};

    calendar_0_16_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, tzdata_0_5_3 }:
          buildMix ({
            name = "calendar";
            version = "0.16.1";
            src = fetchHex {
              pkg = "calendar";
              version = "0.16.1";
              sha256 =
                "892dbf756e0716d93fe4d155cb9d079c16afc78d00f189cba89e19960c5ca042";
            };
            beamDeps  = [ tzdata_0_5_3 ];

            meta = {
              longDescription = ''Calendar is a datetime library for Elixir.
                                Timezone support via its sister package
                                `tzdata`. Safe parsing and formatting of
                                standard formats (ISO, RFC, etc.), strftime
                                formatting. Interoperability with erlang style
                                datetime tuples. Extendable through
                                protocols.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lau/calendar";
            };
          } // packageOverrides)
      ) {};

    calendar_0_17_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, tzdata_0_5_3 }:
          buildMix ({
            name = "calendar";
            version = "0.17.2";
            src = fetchHex {
              pkg = "calendar";
              version = "0.17.2";
              sha256 =
                "cec2256dd32da34d829f01c5b2f7f0a0972a41122855a386403cba2091693e13";
            };
            beamDeps  = [ tzdata_0_5_3 ];

            meta = {
              longDescription = ''Calendar is a datetime library for Elixir.
                                Timezone support via its sister package
                                `tzdata`. Safe parsing and formatting of
                                standard formats (ISO, RFC, etc.), strftime
                                formatting. Interoperability with erlang style
                                datetime tuples. Extendable through
                                protocols.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lau/calendar";
            };
          } // packageOverrides)
      ) {};

    calendar = calendar_0_17_2;

    calendar_0_6_9 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, tzdata_0_5_3 }:
          buildMix ({
            name = "calendar";
            version = "0.6.9";
            src = fetchHex {
              pkg = "calendar";
              version = "0.6.9";
              sha256 =
                "c86f709f986c4ddb158d3c18798b10c8ed38fd4773b7c6c7495c05b54dbb603c";
            };
            beamDeps  = [ tzdata_0_5_3 ];

            meta = {
              longDescription = ''Calendar is a datetime library for Elixir.
                                Timezone support via its sister package
                                `tzdata`. Safe parsing and formatting of
                                standard formats (ISO, RFC, etc.), strftime
                                formatting. Interoperability with erlang style
                                datetime tuples. Extendable through
                                protocols.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lau/calendar";
            };
          } // packageOverrides)
      ) {};

    calendar_translations_0_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, calendar_0_17_2 }:
          buildMix ({
            name = "calendar_translations";
            version = "0.0.4";
            src = fetchHex {
              pkg = "calendar_translations";
              version = "0.0.4";
              sha256 =
                "633ebc35359ac7e1fdb6e01b7d82e69c1931e233d1a99978cca49e4a35f9cf78";
            };
            beamDeps  = [ calendar_0_17_2 ];

            meta = {
              description = ''Translations for the Calendar library.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/padde/calendar_translations";
            };
          } // packageOverrides)
      ) {};

    calendar_translations = calendar_translations_0_0_4;

    calibex_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, timex_3_1_15 }:
          buildMix ({
            name = "calibex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "calibex";
              version = "0.1.0";
              sha256 =
                "0a166e5666b102f462957a9f37a3714c01d07844ba66611f100dff3f832f5252";
            };
            beamDeps  = [ timex_3_1_15 ];

            meta = {
              longDescription = ''Calibex is an ICal Elixir library which focus
                                in bijective coding/decoding in order to allow
                                ICal transformation, ICal email request and
                                responses, and easy non-standard fields
                                inclusion.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kbrw/calibex";
            };
          } // packageOverrides)
      ) {};

    calibex = calibex_0_1_0;

    callbackex_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "callbackex";
            version = "0.1.1";
            src = fetchHex {
              pkg = "callbackex";
              version = "0.1.1";
              sha256 =
                "770b38c8a16faa0263b1438486cdfc4dcd68a6bb9b95978440128bda254a3eb5";
            };

            meta = {
              description = ''Define and execute callbacks with ease in
                            Elixir'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/secretworry/callbackex";
            };
          } // packageOverrides)
      ) {};

    callbackex = callbackex_0_1_1;

    calliope_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "calliope";
            version = "0.3.0";
            src = fetchHex {
              pkg = "calliope";
              version = "0.3.0";
              sha256 =
                "0a0ccf87616459c36ff1f1551701da38485eb601500e74cffd7e42fe9862f74d";
            };

            meta = {
              description = ''An Elixir library for parsing haml templates.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/nurugger07/calliope";
            };
          } // packageOverrides)
      ) {};

    calliope_0_4_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "calliope";
            version = "0.4.2";
            src = fetchHex {
              pkg = "calliope";
              version = "0.4.2";
              sha256 =
                "3e355b0057ce52e402172e3f37f739765450b9c7ec18bf84c56c12007363283c";
            };

            meta = {
              description = ''An Elixir library for parsing haml templates.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/nurugger07/calliope";
            };
          } // packageOverrides)
      ) {};

    calliope = calliope_0_4_2;

    campminder_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_8_6,
          httpoison_0_8_3,
          poison_2_1_0,
          timex_3_0_5
        }:
          buildMix ({
            name = "campminder";
            version = "0.1.0";
            src = fetchHex {
              pkg = "campminder";
              version = "0.1.0";
              sha256 =
                "bd54e1c20b5cf566f28a827bcc0e32adb4aaf86206f4d9f90415adee2e9e5189";
            };
            beamDeps  = [
                          hackney_1_8_6 httpoison_0_8_3 poison_2_1_0 timex_3_0_5
                        ];

            meta = {
              description = ''A CampMinder API library for Elixir.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/GimliLongBow/campminder-elixir";
            };
          } // packageOverrides)
      ) {};

    campminder = campminder_0_1_0;

    can_0_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "can";
            version = "0.0.4";
            src = fetchHex {
              pkg = "can";
              version = "0.0.4";
              sha256 =
                "50457015f14f7a5c6c15807aed19cda7624829b724906331e3c874846acec494";
            };

            meta = {
              description = ''Simplified authorization for Phoenix'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/127labs/can";
            };
          } // packageOverrides)
      ) {};

    can = can_0_0_4;

    canada_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "canada";
            version = "1.0.1";
            src = fetchHex {
              pkg = "canada";
              version = "1.0.1";
              sha256 =
                "91225a74b790a603c27e5d8632feb30dc60ecfb7c3691ce4f32c8e7691dd5b7f";
            };

            meta = {
              description = ''A DSL for declarative permissions'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jarednorman/canada";
            };
          } // packageOverrides)
      ) {};

    canada = canada_1_0_1;

    canary_1_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          canada_1_0_1,
          ecto_2_1_4,
          plug_1_3_5
        }:
          buildMix ({
            name = "canary";
            version = "1.1.1";
            src = fetchHex {
              pkg = "canary";
              version = "1.1.1";
              sha256 =
                "f348d9848693c830a65b707bba9e4dfdd6434e8c356a8d4477e4535afb0d653b";
            };
            beamDeps  = [ canada_1_0_1 ecto_2_1_4 plug_1_3_5 ];

            meta = {
              longDescription = ''An authorization library to restrict what
                                resources the current user is allowed to access,
                                and load those resources for you.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cpjk/canary";
            };
          } // packageOverrides)
      ) {};

    canary = canary_1_1_1;

    canvas_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, wx_utils_0_0_2 }:
          buildMix ({
            name = "canvas";
            version = "0.0.1";
            src = fetchHex {
              pkg = "canvas";
              version = "0.0.1";
              sha256 =
                "79701ec91af3f427c6c28522ca19fcc930fd955bd48458d6d316e19b7b0cd2be";
            };
            beamDeps  = [ wx_utils_0_0_2 ];

            meta = {
              description = ''A library for building simple GUI canvases to
                            draw on.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/JEG2/canvas";
            };
          } // packageOverrides)
      ) {};

    canvas = canvas_0_0_1;

    canvas_native_1_1_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_2_2_0 }:
          buildMix ({
            name = "canvas_native";
            version = "1.1.4";
            src = fetchHex {
              pkg = "canvas_native";
              version = "1.1.4";
              sha256 =
                "5cacfe28ef8c09a3444a196a38ec4c2541de7096ebcb4c6268939819632c93a2";
            };
            beamDeps  = [ poison_2_2_0 ];

            meta = {
              longDescription = ''CanvasNative is a format used to describe
                                documents on the canvas platform. This library
                                provides modules for parsing and formatting the
                                CanvasNative format.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/usecanvas/canvas-native-ex";
            };
          } // packageOverrides)
      ) {};

    canvas_native = canvas_native_1_1_4;

    captcha_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "captcha";
            version = "0.1.0";
            src = fetchHex {
              pkg = "captcha";
              version = "0.1.0";
              sha256 =
                "40a18e1ce2ed9464cbd2c938f35534f8a5b1a0b6bf5a6682c4ceb92ecba762eb";
            };

            meta = {
              longDescription = ''This is a Elixir lib for generating captcha.
                                No dependencies. It drawing captcha image with C
                                code. No ImageMagick, No RMagick.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/davidqhr/elixir-captcha";
            };
          } // packageOverrides)
      ) {};

    captcha = captcha_0_1_0;

    capture_child_io_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "capture_child_io";
            version = "0.1.0";
            src = fetchHex {
              pkg = "capture_child_io";
              version = "0.1.0";
              sha256 =
                "95824da786ca5962b547c33b5e1b13269bc8fe6c322a31543d8ce874b625454e";
            };

            meta = {
              description = ''Capture child processes` :stdio in tests'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/joeyates/capture_child_io";
            };
          } // packageOverrides)
      ) {};

    capture_child_io = capture_child_io_0_1_0;

    carafe_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, distillery_1_3_5 }:
          buildMix ({
            name = "carafe";
            version = "0.1.1";
            src = fetchHex {
              pkg = "carafe";
              version = "0.1.1";
              sha256 =
                "2de4862e49063adaf73298a33b726250aa70ef6891dce7e15447ac4a12a323ef";
            };
            beamDeps  = [ distillery_1_3_5 ];

            meta = {
              description = ''Deployment for Elixir applications, using
                            capistrano'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/schnittchen/carafe";
            };
          } // packageOverrides)
      ) {};

    carafe = carafe_0_1_1;

    caramelize_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ecto_2_1_4 }:
          buildMix ({
            name = "caramelize";
            version = "0.1.2";
            src = fetchHex {
              pkg = "caramelize";
              version = "0.1.2";
              sha256 =
                "075d071cb3b2ddbb63d6d78881d624c0742662f1a7de940535f27c907fdab389";
            };
            beamDeps  = [ ecto_2_1_4 ];

            meta = {
              description = ''An Elixir library that converts maps from
                            `snake_case` to `camelCase`.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/SRVentures/caramelize";
            };
          } // packageOverrides)
      ) {};

    caramelize = caramelize_0_1_2;

    carbon_0_1_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          comeonin_2_6_0,
          gettext_0_13_1,
          phoenix_1_3_0_rc_2,
          phoenix_ecto_3_2_3,
          phoenix_html_2_9_3,
          swoosh_0_8_1
        }:
          buildMix ({
            name = "carbon";
            version = "0.1.3";
            src = fetchHex {
              pkg = "carbon";
              version = "0.1.3";
              sha256 =
                "44dcc42706e0ab2b082fc3568ce3606cccc87bffe067a188511be05ee887f7b8";
            };
            beamDeps  = [
                          comeonin_2_6_0
                          gettext_0_13_1
                          phoenix_1_3_0_rc_2
                          phoenix_ecto_3_2_3
                          phoenix_html_2_9_3
                          swoosh_0_8_1
                        ];

            meta = {
              description = ''User library for phoenix and elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "http://github.com/elixirdrops/carbon";
            };
          } // packageOverrides)
      ) {};

    carbon = carbon_0_1_3;

    cards_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ex_doc_0_16_1 }:
          buildMix ({
            name = "cards";
            version = "0.1.0";
            src = fetchHex {
              pkg = "cards";
              version = "0.1.0";
              sha256 =
                "cc636f1266326d9187add200f1a5e9a7b8c27ce74bee183870a0b4af2180e626";
            };
            beamDeps  = [ ex_doc_0_16_1 ];

            meta = {
              longDescription = ''My first elixir code for developing cards
                                module that include functions that create and
                                handle deck cards'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/msalahz/elixir-cards";
            };
          } // packageOverrides)
      ) {};

    cards = cards_0_1_0;

    carrier_1_0_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_7_5,
          poison_1_5_2
        }:
          buildMix ({
            name = "carrier";
            version = "1.0.4";
            src = fetchHex {
              pkg = "carrier";
              version = "1.0.4";
              sha256 =
                "9ea767fa6dfc35b1b5ebcdf3d737ea741589100573406969cea7579bbb51c0de";
            };
            beamDeps  = [ httpoison_0_7_5 poison_1_5_2 ];

            meta = {
              description = ''Elixir library for interacting with
                            SmartyStreets'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mylanconnolly/carrier";
            };
          } // packageOverrides)
      ) {};

    carrier = carrier_1_0_4;

    carselector_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "carselector";
            version = "0.1.1";
            src = fetchHex {
              pkg = "carselector";
              version = "0.1.1";
              sha256 =
                "769cc086ad289aaa9434be911e0d1b743253a433fe3b34a2b9916a14f626e40f";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''A client for the CarSelector API'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/fewlinesco/carselector_client-elixir";
            };
          } // packageOverrides)
      ) {};

    carselector = carselector_0_1_1;

    cartel_0_7_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_3_0_2,
          poison_2_2_0,
          poolboy_1_5_1
        }:
          buildMix ({
            name = "cartel";
            version = "0.7.0";
            src = fetchHex {
              pkg = "cartel";
              version = "0.7.0";
              sha256 =
                "bf036940ff5195d7d87412afaf4e9c6def4737c66fee34790389aa5e3ebf766b";
            };
            beamDeps  = [ httpotion_3_0_2 poison_2_2_0 poolboy_1_5_1 ];

            meta = {
              description = ''Multi platform, multi app push notifications'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lucacorti/cartel";
            };
          } // packageOverrides)
      ) {};

    cartel = cartel_0_7_0;

    cartographer_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "cartographer";
            version = "0.0.1";
            src = fetchHex {
              pkg = "cartographer";
              version = "0.0.1";
              sha256 =
                "8f070615ca221b94a22e846303a3b9cc7ae31c2dea5c3d8f39a116f0d8c4b18f";
            };

            meta = {
              description = ''Geohash algorithm implementation in Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/afronski/cartographer";
            };
          } // packageOverrides)
      ) {};

    cartographer = cartographer_0_0_1;

    cashier_0_4_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          gen_stage_0_11_0,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "cashier";
            version = "0.4.0";
            src = fetchHex {
              pkg = "cashier";
              version = "0.4.0";
              sha256 =
                "def98d081c745d87065c022a4b600110205dcd84d23f2b080cffa779d24191f3";
            };
            beamDeps  = [ gen_stage_0_11_0 httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              longDescription = ''Cashier is an Elixir library that aims to be
                                an easy to use payment gateway, whilst offering
                                the fault tolerance and scalability benefits of
                                being built on top of Erlang/OTP'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/swelham/cashier";
            };
          } // packageOverrides)
      ) {};

    cashier = cashier_0_4_0;

    cassandra_1_0_0_beta = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          connection_1_0_4,
          uuid_1_1_7
        }:
          buildMix ({
            name = "cassandra";
            version = "1.0.0-beta";
            src = fetchHex {
              pkg = "cassandra";
              version = "1.0.0-beta";
              sha256 =
                "cd39e11d39edcf3c183fb8ac38c68e099691f6d6faaf1429f7b8d48624733b37";
            };
            beamDeps  = [ connection_1_0_4 uuid_1_1_7 ];

            meta = {
              description = ''A pure Elixir driver for Apache Cassandra'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/cafebazaar/elixir-cassandra";
            };
          } // packageOverrides)
      ) {};

    cassandra_1_0_0_beta_5 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          db_connection_1_1_2,
          elixir_make_0_4_0,
          poolboy_1_5_1,
          uuid_1_1_7
        }:
          buildMix ({
            name = "cassandra";
            version = "1.0.0-beta.5";
            src = fetchHex {
              pkg = "cassandra";
              version = "1.0.0-beta.5";
              sha256 =
                "3834f12a1711808685f4b7dae3b6cc7d3ff62203c53eee79fe5e4f1f3c7dfd8b";
            };
            beamDeps  = [
                          db_connection_1_1_2
                          elixir_make_0_4_0
                          poolboy_1_5_1
                          uuid_1_1_7
                        ];

            meta = {
              description = ''A pure Elixir driver for Apache Cassandra'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/cafebazaar/elixir-cassandra";
            };
          } // packageOverrides)
      ) {};

    cassandra = cassandra_1_0_0_beta_5;

    cassandra_ecto_0_5_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cassandrex_0_1_0,
          ecto_2_1_4
        }:
          buildMix ({
            name = "cassandra_ecto";
            version = "0.5.1";
            src = fetchHex {
              pkg = "cassandra_ecto";
              version = "0.5.1";
              sha256 =
                "dda183aef227871d86f49d33e2ee0960a8f1519a1f7518a73622bb8858de7d57";
            };
            beamDeps  = [ cassandrex_0_1_0 ecto_2_1_4 ];

            meta = {
              description = ''Ecto integration for Apache Cassandra.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/vintikzzz/cassandra_ecto";
            };
          } // packageOverrides)
      ) {};

    cassandra_ecto = cassandra_ecto_0_5_1;

    cassandrex_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "cassandrex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "cassandrex";
              version = "0.1.0";
              sha256 =
                "d81ef97a525bc25fbde538f0deb1c66868bb111aa67762ff8683996ab1a2b1e5";
            };

            meta = {
              description = ''Cassandra driver for Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/vintikzzz/cassandrex";
            };
          } // packageOverrides)
      ) {};

    cassandrex = cassandrex_0_1_0;

    cassette_1_3_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exml_0_1_1,
          httpoison_0_11_2
        }:
          buildMix ({
            name = "cassette";
            version = "1.3.2";
            src = fetchHex {
              pkg = "cassette";
              version = "1.3.2";
              sha256 =
                "5f3730f7a495db90a0edc3a7fb1a4a6a1299dfe0f21276fdd2b6a6e7bb385384";
            };
            beamDeps  = [ exml_0_1_1 httpoison_0_11_2 ];

            meta = {
              description = ''A CAS client and validation library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/locaweb/elixir-cassette";
            };
          } // packageOverrides)
      ) {};

    cassette = cassette_1_3_2;

    cassette_plug_1_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cassette_1_3_2,
          plug_1_3_5
        }:
          buildMix ({
            name = "cassette_plug";
            version = "1.1.2";
            src = fetchHex {
              pkg = "cassette_plug";
              version = "1.1.2";
              sha256 =
                "b2fe42440da110ad8aa90d17b46b91badbcadb9f3a229bea16d38ebdb1807c21";
            };
            beamDeps  = [ cassette_1_3_2 plug_1_3_5 ];

            meta = {
              description = ''An auth Plug using Cassette'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/locaweb/cassette-plug";
            };
          } // packageOverrides)
      ) {};

    cassette_plug = cassette_plug_1_1_2;

    cassius_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "cassius";
            version = "0.0.1";
            src = fetchHex {
              pkg = "cassius";
              version = "0.0.1";
              sha256 =
                "3fe26f2b1fceed3c553871dcf954955063e01ab2e2de41d8322e58bd03348c17";
            };

            meta = {
              description = ''Monitor linux file system events'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jquadrin/cassius";
            };
          } // packageOverrides)
      ) {};

    cassius = cassius_0_0_1;

    catalyst_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "catalyst";
            version = "0.1.0";
            src = fetchHex {
              pkg = "catalyst";
              version = "0.1.0";
              sha256 =
                "1434f57519a675bf050ec077b3a1fbcce7994f8b0b50530d1efff8582e335287";
            };

            meta = {
              description = ''Elixir webdav client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/slavone/catalyst";
            };
          } // packageOverrides)
      ) {};

    catalyst = catalyst_0_1_0;

    cauldron_0_1_10 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          datastructures_0_2_8,
          httprot_0_2_2,
          reagent_0_1_14
        }:
          buildMix ({
            name = "cauldron";
            version = "0.1.10";
            src = fetchHex {
              pkg = "cauldron";
              version = "0.1.10";
              sha256 =
                "35cb8c37d5574553b6d3fecc0bfa573d03df9eac7a585127a6506a13dcbaa00b";
            };
            beamDeps  = [ datastructures_0_2_8 httprot_0_2_2 reagent_0_1_14
                      ];

            meta = {
              description = ''Web server library written in Elixir'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/meh/cauldron";
            };
          } // packageOverrides)
      ) {};

    cauldron = cauldron_0_1_10;

    caylir_0_4_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_8_6,
          poison_3_1_0,
          poolboy_1_5_1
        }:
          buildMix ({
            name = "caylir";
            version = "0.4.0";
            src = fetchHex {
              pkg = "caylir";
              version = "0.4.0";
              sha256 =
                "35acf5622db2fbd941eae4233ff78fb50464f5b617e9da5d06c81b55afe79e31";
            };
            beamDeps  = [ hackney_1_8_6 poison_3_1_0 poolboy_1_5_1 ];

            meta = {
              description = ''Cayley driver for Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/mneudert/caylir";
            };
          } // packageOverrides)
      ) {};

    caylir = caylir_0_4_0;

    ccc_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ccc";
            version = "0.0.2";
            src = fetchHex {
              pkg = "ccc";
              version = "0.0.2";
              sha256 =
                "cb976cf81c8497a271d3c6a4b20be4d0e569d5a0db3a60a227e1e8a13ee6abf7";
            };

            meta = {
              description = ''Character Code Converter'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Joe-noh/ccc";
            };
          } // packageOverrides)
      ) {};

    ccc = ccc_0_0_2;

    ccs_sdk_1_0_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_8_3,
          poison_2_2_0
        }:
          buildMix ({
            name = "ccs_sdk";
            version = "1.0.3";
            src = fetchHex {
              pkg = "ccs_sdk";
              version = "1.0.3";
              sha256 =
                "6b62715af4ef7ee6560cfe9cf3f7ebab2062d5913d0bdb856e0f6330b110563c";
            };
            beamDeps  = [ httpoison_0_8_3 poison_2_2_0 ];

            meta = {
              description = ''Internal SDK for ccs project'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    ccs_sdk = ccs_sdk_1_0_3;

    ccs_service_client_1_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_8_3,
          poison_2_2_0
        }:
          buildMix ({
            name = "ccs_service_client";
            version = "1.0.0";
            src = fetchHex {
              pkg = "ccs_service_client";
              version = "1.0.0";
              sha256 =
                "5620c7264e1049ecaf2b4f2a89b13ed85bf2f42af478e37d521034c1b8242a19";
            };
            beamDeps  = [ httpoison_0_8_3 poison_2_2_0 ];

            meta = {
              description = ''Internal SDK for ccs project'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    ccs_service_client = ccs_service_client_1_0_0;

    cdn_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          calendar_0_16_1,
          ex_aws_1_0_0,
          httpoison_0_9_2,
          mime_1_1_0,
          sweet_xml_0_6_5
        }:
          buildMix ({
            name = "cdn";
            version = "0.1.0";
            src = fetchHex {
              pkg = "cdn";
              version = "0.1.0";
              sha256 =
                "87ea398fc087b041fd292a058883b990c4c10d395273b90a4a9e716617d7d1ee";
            };
            beamDeps  = [
                          calendar_0_16_1
                          ex_aws_1_0_0
                          httpoison_0_9_2
                          mime_1_1_0
                          sweet_xml_0_6_5
                        ];

            meta = {
              description = ''Content Delivery Network Package for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/shufo/cdn";
            };
          } // packageOverrides)
      ) {};

    cdn = cdn_0_1_0;

    census_0_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_9_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "census";
            version = "0.1.2";
            src = fetchHex {
              pkg = "census";
              version = "0.1.2";
              sha256 =
                "fa3ac9d6d1f7e5348b2fa441357cd0c4b1ccf4855b81e22cfbca860d0811989f";
            };
            beamDeps  = [ httpoison_0_9_2 poison_2_2_0 ];

            meta = {
              description = ''Elixir library for interacting with
                            api.census.gov'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/rockwood/census";
            };
          } // packageOverrides)
      ) {};

    census = census_0_1_2;

    cep_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          codepagex_0_1_4,
          httpoison_0_8_3,
          poison_2_2_0,
          poolboy_1_5_1,
          sweet_xml_0_6_5
        }:
          buildMix ({
            name = "cep";
            version = "0.0.1";
            src = fetchHex {
              pkg = "cep";
              version = "0.0.1";
              sha256 =
                "f76e67e1d989fc2edbfbd265f79e4a33a0aa7f9ff06934a1f2d49903df72b79f";
            };
            beamDeps  = [
                          codepagex_0_1_4
                          httpoison_0_8_3
                          poison_2_2_0
                          poolboy_1_5_1
                          sweet_xml_0_6_5
                        ];

            meta = {
              longDescription = ''A package to query Brazilian CEP codes. Has
                                support for multiple source APIs (Correios,
                                ViaCep, Postmon, etc). It can query one specific
                                source or query until one source returns a valid
                                result.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/douglascamata/cep";
            };
          } // packageOverrides)
      ) {};

    cep = cep_0_0_1;

    certifi_0_1_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "certifi";
            version = "0.1.1";
            src = fetchHex {
              pkg = "certifi";
              version = "0.1.1";
              sha256 =
                "e6d1dda48fad1b1c5b454c8402e2ac375ae12bf85a9910decaf791f330a7de29";
            };

            meta = {
              description = ''An OTP library'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/certifi/erlang-certifi";
            };
          } // packageOverrides)
      ) {};

    certifi_0_3_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "certifi";
            version = "0.3.0";
            src = fetchHex {
              pkg = "certifi";
              version = "0.3.0";
              sha256 =
                "42ae85fe91c038a634a5fb8d0c77f4fc581914c508f087c7138e9366a1517f6a";
            };

            meta = {
              description = ''An OTP library'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/certifi/erlang-certifi";
            };
          } // packageOverrides)
      ) {};

    certifi_0_4_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "certifi";
            version = "0.4.0";
            src = fetchHex {
              pkg = "certifi";
              version = "0.4.0";
              sha256 =
                "1cc233bee2d6990e7b0ff4c5824d7f401edda8a3cfad04d3328e35ad97de7611";
            };

            meta = {
              description = ''An OTP library'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/certifi/erlang-certifi";
            };
          } // packageOverrides)
      ) {};

    certifi_0_7_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "certifi";
            version = "0.7.0";
            src = fetchHex {
              pkg = "certifi";
              version = "0.7.0";
              sha256 =
                "f7182e85b4ece9d1371c46699793dd3dee8f2c55be3f6967a6b84b8c02bab7d2";
            };

            meta = {
              description = ''An OTP library'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/certifi/erlang-certifi";
            };
          } // packageOverrides)
      ) {};

    certifi_1_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "certifi";
            version = "1.0.0";
            src = fetchHex {
              pkg = "certifi";
              version = "1.0.0";
              sha256 =
                "44a5aa4261490a7d7fa6909ab4bcf14bff928a4fef49e80fc1e7a8fdb7b45f79";
            };

            meta = {
              description = ''An OTP library'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/certifi/erlang-certifi";
            };
          } // packageOverrides)
      ) {};

    certifi_1_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "certifi";
            version = "1.1.0";
            src = fetchHex {
              pkg = "certifi";
              version = "1.1.0";
              sha256 =
                "766db7fae3104ac598216658a8e851fc61df89761ca841952a24a5a70613257c";
            };

            meta = {
              description = ''An OTP library'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/certifi/erlang-certifi";
            };
          } // packageOverrides)
      ) {};

    certifi_1_2_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "certifi";
            version = "1.2.1";
            src = fetchHex {
              pkg = "certifi";
              version = "1.2.1";
              sha256 =
                "54afd282e544833fbafbe2e845333132b5f092aee19dfae3a8fd970f67e0f2e6";
            };

            meta = {
              description = ''An OTP library'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/certifi/erlang-certifi";
            };
          } // packageOverrides)
      ) {};

    certifi = certifi_1_2_1;

    cesso_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "cesso";
            version = "0.1.3";
            src = fetchHex {
              pkg = "cesso";
              version = "0.1.3";
              sha256 =
                "54ba81e0d1358095e00305e48cd3917bc9ee06905bdaab7bc60c7ae3489a6ba7";
            };

            meta = {
              description = ''CSV handling library for Elixir.'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/meh/cesso";
            };
          } // packageOverrides)
      ) {};

    cesso = cesso_0_1_3;

    cet_0_3_4 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          bbmustache_1_1_0,
          bstr_0_3_0,
          cowboy_1_0_4,
          gen_smtp_0_11_0,
          jsx_2_8_0,
          lager_3_2_1
        }:
          buildRebar3 ({
            name = "cet";
            version = "0.3.4";
            src = fetchHex {
              pkg = "cet";
              version = "0.3.4";
              sha256 =
                "f0c234df84e5ceec0828280870adc0d4e3d191da013b1c877d6051688de697ed";
            };

            beamDeps  = [
                          bbmustache_1_1_0
                          bstr_0_3_0
                          cowboy_1_0_4
                          gen_smtp_0_11_0
                          jsx_2_8_0
                          lager_3_2_1
                        ];

            meta = {
              description = ''Cielo24 Erlang Tools'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/Cielo24/cet";
            };
          } // packageOverrides)
      ) {};

    cet = cet_0_3_4;

    cf_0_1_2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "cf";
            version = "0.1.2";
            src = fetchHex {
              pkg = "cf";
              version = "0.1.2";
              sha256 =
                "c86f56bca74dd3616057b28574d920973fe665ecb064aa458dc6a2447f3f4924";
            };

            meta = {
              description = ''Terminal colour helper'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/project-fifo/cf";
            };
          } // packageOverrides)
      ) {};

    cf_0_2_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "cf";
            version = "0.2.1";
            src = fetchHex {
              pkg = "cf";
              version = "0.2.1";
              sha256 =
                "baee9aa7ec2dfa3cb4486b67211177caa293f876780f0b313b45718edef6a0a5";
            };

            meta = {
              description = ''Terminal colour helper'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/project-fifo/cf";
            };
          } // packageOverrides)
      ) {};

    cf_0_2_2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "cf";
            version = "0.2.2";
            src = fetchHex {
              pkg = "cf";
              version = "0.2.2";
              sha256 =
                "48283b3019bc7fad56e7b23028a5da4d3e6cd598a553ab2a99a2153bf5f19b21";
            };

            meta = {
              description = ''Terminal colour helper'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/project-fifo/cf";
            };
          } // packageOverrides)
      ) {};

    cf = cf_0_2_2;

    cgroups_1_7_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "cgroups";
            version = "1.7.1";
            src = fetchHex {
              pkg = "cgroups";
              version = "1.7.1";
              sha256 =
                "7a89a5816d85c63441ee788e940f2a1ac136c435b3e6c9b531c9418044e871fd";
            };

            meta = {
              description = ''Erlang native cgroups interface'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/okeuday/cgroups";
            };
          } // packageOverrides)
      ) {};

    cgroups = cgroups_1_7_1;

    chacha20_0_3_6 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "chacha20";
            version = "0.3.6";
            src = fetchHex {
              pkg = "chacha20";
              version = "0.3.6";
              sha256 =
                "40bc6b1f4816661c07a3244d46d74640f108f69eb61f96d2dd22dcba0e7fca38";
            };

            meta = {
              description = ''Chacha20 symmetric stream cipher'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mwmiller/chacha20_ex";
            };
          } // packageOverrides)
      ) {};

    chacha20_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "chacha20";
            version = "1.0.0";
            src = fetchHex {
              pkg = "chacha20";
              version = "1.0.0";
              sha256 =
                "a2310244d824ee0b6c5eb2c961fbca701afba0d38a919430951f500fde7e50af";
            };

            meta = {
              description = ''Chacha20 symmetric stream cipher'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mwmiller/chacha20_ex";
            };
          } // packageOverrides)
      ) {};

    chacha20 = chacha20_1_0_0;

    changeset_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, defmemo_0_1_1 }:
          buildMix ({
            name = "changeset";
            version = "1.0.0";
            src = fetchHex {
              pkg = "changeset";
              version = "1.0.0";
              sha256 =
                "34cc4c986bfba93d4a2a85910bef05b53a6538485b520fb89fe9f6b8cbe067e7";
            };
            beamDeps  = [ defmemo_0_1_1 ];

            meta = {
              description = ''A package for calculating between-list edit
                            distances.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/erwald/elixir-changeset";
            };
          } // packageOverrides)
      ) {};

    changeset = changeset_1_0_0;

    changeset_merger_0_3_5 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_4,
          slugger_0_1_0,
          timex_3_1_15
        }:
          buildMix ({
            name = "changeset_merger";
            version = "0.3.5";
            src = fetchHex {
              pkg = "changeset_merger";
              version = "0.3.5";
              sha256 =
                "31c5b6af754b3533143f29a7037acd5d05fad50713caaccdec40c21ea263f761";
            };
            beamDeps  = [ ecto_2_1_4 slugger_0_1_0 timex_3_1_15 ];

            meta = {
              description = ''A library for common Ecto changeset
                            transformations.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/aforward/changeset_merger";
            };
          } // packageOverrides)
      ) {};

    changeset_merger = changeset_merger_0_3_5;

    changex_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "changex";
            version = "0.1.1";
            src = fetchHex {
              pkg = "changex";
              version = "0.1.1";
              sha256 =
                "e087a4c3cc8eb3e94eba6050c5b1cc24dba3427eb4e4e15cebdb4000582c9851";
            };

            meta = {
              description = ''Automatically generate a CHANGELOG.md file based
                            on git commit history. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Gazler/changex";
            };
          } // packageOverrides)
      ) {};

    changex = changex_0_1_1;

    channels_0_0_6 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, amqp_0_1_4 }:
          buildMix ({
            name = "channels";
            version = "0.0.6";
            src = fetchHex {
              pkg = "channels";
              version = "0.0.6";
              sha256 =
                "de9f6f9918bb4d30c96fafd42b3cbdd0ee6282a4f7e4dbb6142170b36b319b48";
            };
            beamDeps  = [ amqp_0_1_4 ];

            meta = {
              description = ''An application to manage AMQP consumers and
                            publishers.'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/jcabotc/channels";
            };
          } // packageOverrides)
      ) {};

    channels = channels_0_0_6;

    chaos_spawn_0_8_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exactor_2_2_3,
          timex_3_0_8
        }:
          buildMix ({
            name = "chaos_spawn";
            version = "0.8.1";
            src = fetchHex {
              pkg = "chaos_spawn";
              version = "0.8.1";
              sha256 =
                "e0ec5e93c0d8cfe888653f502c295ac237e534bcd768d5ca62707e025a472210";
            };
            beamDeps  = [ exactor_2_2_3 timex_3_0_8 ];

            meta = {
              longDescription = ''Providing tools to randomly kill proceses.
                                With the goal of creating robust supevision
                                trees.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/meadsteve/chaos-spawn";
            };
          } // packageOverrides)
      ) {};

    chaos_spawn = chaos_spawn_0_8_1;

    charlotte_0_4_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_0_4,
          env_conf_0_3_0,
          jazz_0_2_1,
          uuid_0_1_5
        }:
          buildMix ({
            name = "charlotte";
            version = "0.4.0";
            src = fetchHex {
              pkg = "charlotte";
              version = "0.4.0";
              sha256 =
                "2c0eb1335922bec0c6bc5e8f3dc4d84192657b708c2558742f676ed430f0950f";
            };
            beamDeps  = [ cowboy_1_0_4 env_conf_0_3_0 jazz_0_2_1 uuid_0_1_5
                      ];

            meta = {
              longDescription = '' Charlotte is a Web Framework. It takes a
                                little from Rails and a little from Sinatra and
                                does a few things it`s own way. The goal is to
                                be light weight, fun and get out of your way.
                                defmodule Controller do use
                                Charlotte.Handlers.HTTP def routes do [
                                {\"/path\", :path}, {\"/path/:part\",
                                :path_with_part} ] end def path(\"GET\",
                                _params, conn) do render [message: \"hello from
                                path\"], conn end def path(verb, _params, conn)
                                do respond 405, {\"Allowed\", \"GET\"},
                                \"#{verb} not allowed\", conn end end '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/LeakyBucket/charlotte.git";
            };
          } // packageOverrides)
      ) {};

    charlotte = charlotte_0_4_0;

    charm_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "charm";
            version = "0.0.1";
            src = fetchHex {
              pkg = "charm";
              version = "0.0.1";
              sha256 =
                "97a05c37c76b2efa5e8bd3c47333e9ebfe4f7c8777540900fcbec70c287bffa7";
            };

            meta = {
              description = ''Use ansi terminal characters to write colors and
                            cursor positions.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tomgco/elixir-charm";
            };
          } // packageOverrides)
      ) {};

    charm = charm_0_0_1;

    chartkick_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          poison_1_5_2,
          uuid_1_1_7
        }:
          buildMix ({
            name = "chartkick";
            version = "0.0.2";
            src = fetchHex {
              pkg = "chartkick";
              version = "0.0.2";
              sha256 =
                "6a4f4170b162117f3be9d0a9d98b63b58da8ec2cea4e29155d14441a0b12ac6c";
            };
            beamDeps  = [ poison_1_5_2 uuid_1_1_7 ];

            meta = {    };
          } // packageOverrides)
      ) {};

    chartkick = chartkick_0_0_2;

    chartreuse_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "chartreuse";
            version = "0.1.0";
            src = fetchHex {
              pkg = "chartreuse";
              version = "0.1.0";
              sha256 =
                "040d0c0d68215c0fcd695fbf74beb80b952d9bd8928c2f99503265feb7f42406";
            };

            meta = {
              description = ''string, list, map, etc. extensions for elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/MishaConway/chartreuse";
            };
          } // packageOverrides)
      ) {};

    chartreuse = chartreuse_0_1_0;

    chase_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_9_2,
          sweet_xml_0_6_5,
          xml_builder_0_0_9
        }:
          buildMix ({
            name = "chase";
            version = "0.1.0";
            src = fetchHex {
              pkg = "chase";
              version = "0.1.0";
              sha256 =
                "035366c147673c59849530abb24f2440455253d3e7245607b13030ddf2199021";
            };
            beamDeps  = [ httpoison_0_9_2 sweet_xml_0_6_5 xml_builder_0_0_9
                      ];

            meta = {
              description = ''Unofficial Elixir client for processing payments
                            through Chase Orbital.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/SoundPays/chase-elixir";
            };
          } // packageOverrides)
      ) {};

    chase = chase_0_1_0;

    chash_0_1_2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "chash";
            version = "0.1.2";
            src = fetchHex {
              pkg = "chash";
              version = "0.1.2";
              sha256 =
                "4dd80889da8fcf3953062508790ca54f149fe553fcd37a4d95438fb5efa3addf";
            };

            meta = {
              description = ''Riaks CHash implementation'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/project-fifo/chash";
            };
          } // packageOverrides)
      ) {};

    chash = chash_0_1_2;

    chatter_0_0_15 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exactor_2_2_3,
          ranch_1_4_0,
          snappy_1_1_1
        }:
          buildMix ({
            name = "chatter";
            version = "0.0.15";
            src = fetchHex {
              pkg = "chatter";
              version = "0.0.15";
              sha256 =
                "17607e0797a4a4ec2f59b62b4f2a4fd404216fec6395b381a6c432aa51ba23f0";
            };
            beamDeps  = [ exactor_2_2_3 ranch_1_4_0 snappy_1_1_1 ];

            meta = {
              longDescription = ''Chatter is extracted from the ScaleSmall
                                project as a standalone piece. This may be used
                                independently to broadcast messages to a set of
                                nodes. It uses a mixture of UDP multicast and
                                TCP to deliver messages and tries to minimize
                                network traffic while doing so.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dbeck/chatter_ex/";
            };
          } // packageOverrides)
      ) {};

    chatter = chatter_0_0_15;

    chatterbox_0_4_2 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          hpack_erl_0_2_3,
          lager_3_2_4
        }:
          buildRebar3 ({
            name = "chatterbox";
            version = "0.4.2";
            src = fetchHex {
              pkg = "chatterbox";
              version = "0.4.2";
              sha256 =
                "445a279c15af71fbca6c21c97026d57a4c2813e6f0c143fdff14e9d5bb2d527c";
            };

            beamDeps  = [ hpack_erl_0_2_3 lager_3_2_4 ];

            meta = {
              description = ''chatterbox library for http2'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/joedevivo/chatterbox";
            };
          } // packageOverrides)
      ) {};

    chatterbox = chatterbox_0_4_2;

    chatty_0_5_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "chatty";
            version = "0.5.0";
            src = fetchHex {
              pkg = "chatty";
              version = "0.5.0";
              sha256 =
                "38760fea220d1f19a18d4400c464decae2689b653564f84ff211a4372653b2fb";
            };

            meta = {
              description = ''A basic IRC client that is most useful for
                            writing a bot.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/alco/chatty";
            };
          } // packageOverrides)
      ) {};

    chatty = chatty_0_5_0;

    checksum_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "checksum";
            version = "0.1.0";
            src = fetchHex {
              pkg = "checksum";
              version = "0.1.0";
              sha256 =
                "465d6ceb61f32bfed35d2be3fdad3e2432a653e93fe530efc0516c748f9088e4";
            };

            meta = {
              description = ''Checksum library allows checksum calculations,
                            like CRC....'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/danseid/checksum";
            };
          } // packageOverrides)
      ) {};

    checksum = checksum_0_1_0;

    chemist_0_4_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "chemist";
            version = "0.4.0";
            src = fetchHex {
              pkg = "chemist";
              version = "0.4.0";
              sha256 =
                "af6e045a06cd70e78def5d936e2168e3465b0444d933cb856fb9f80861b76605";
            };
            beamDeps  = [ httpoison_0_11_2 poison_2_2_0 ];

            meta = {
              description = ''Chemist is an Elixir wrapper for the Riot API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jscheel42/chemist";
            };
          } // packageOverrides)
      ) {};

    chemist = chemist_0_4_0;

    chemistry_0_1_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "chemistry";
            version = "0.1.4";
            src = fetchHex {
              pkg = "chemistry";
              version = "0.1.4";
              sha256 =
                "2f8c2fcaad4e20c9478c8eb7384bc6c15c53f0b95c0c19349192c7291722380f";
            };

            meta = {
              description = ''Chemistry is a Testing Framework for your Elixir
                            projects.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/genericlady/chemistry";
            };
          } // packageOverrides)
      ) {};

    chemistry = chemistry_0_1_4;

    chicken_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "chicken";
            version = "0.1.0";
            src = fetchHex {
              pkg = "chicken";
              version = "0.1.0";
              sha256 =
                "e649d554b150ae0b500e91d3ac95c8810d1ac0097f997916b1ec7d24a738f511";
            };

            meta = {
              description = ''Needed for a chicken soup sandwich.'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    chicken = chicken_0_1_0;

    chicken_soup_sandwich_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, chicken_0_1_0 }:
          buildMix ({
            name = "chicken_soup_sandwich";
            version = "0.1.0";
            src = fetchHex {
              pkg = "chicken_soup_sandwich";
              version = "0.1.0";
              sha256 =
                "29760865b5e8497957f46a8d4f0658c8cd3e159161ad5f6e4f2ccfaa120d2cec";
            };
            beamDeps  = [ chicken_0_1_0 ];

            meta = {
              description = ''A chicken soup sandwich.'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    chicken_soup_sandwich = chicken_soup_sandwich_0_1_0;

    chinese_translation_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, httpoison_0_11_2 }:
          buildMix ({
            name = "chinese_translation";
            version = "0.1.0";
            src = fetchHex {
              pkg = "chinese_translation";
              version = "0.1.0";
              sha256 =
                "d5e4f59421bad59e465322ce7a8f366179e5f6a732d7e06435e8a7c01f42e7ab";
            };
            beamDeps  = [ httpoison_0_11_2 ];

            meta = {
              longDescription = ''ChineseTranslation provides traditional
                                chinese <-> simplified chinese translation, as
                                well as pinyin translation and slugify for
                                chinese phrases/characters. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tyrchen/chinese_translation";
            };
          } // packageOverrides)
      ) {};

    chinese_translation = chinese_translation_0_1_0;

    chromecast_0_1_5 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exprotobuf_1_1_0,
          poison_2_2_0
        }:
          buildMix ({
            name = "chromecast";
            version = "0.1.5";
            src = fetchHex {
              pkg = "chromecast";
              version = "0.1.5";
              sha256 =
                "61021ed7b0ee3b19aeaba800d65c1f418b4e41b245a9877ee80cbbc05edb4837";
            };
            beamDeps  = [ exprotobuf_1_1_0 poison_2_2_0 ];

            meta = {
              description = ''A library for controlling and monitoring a
                            Chromecast'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/NationalAssociationOfRealtors/chromecast";
            };
          } // packageOverrides)
      ) {};

    chromecast = chromecast_0_1_5;

    chronic_2_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, calendar_0_17_2 }:
          buildMix ({
            name = "chronic";
            version = "2.0.2";
            src = fetchHex {
              pkg = "chronic";
              version = "2.0.2";
              sha256 =
                "a2397d4192594ddd1422abeba197745124ce0a549a11a90e4ba240cdaf44f235";
            };
            beamDeps  = [ calendar_0_17_2 ];

            meta = {
              description = ''Natural language datetime parser.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/radar/chronic";
            };
          } // packageOverrides)
      ) {};

    chronic = chronic_2_0_2;

    chronos_0_3_9 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "chronos";
            version = "0.3.9";
            src = fetchHex {
              pkg = "chronos";
              version = "0.3.9";
              sha256 =
                "973e1273088677a12afc1a72aad78fe5070fb0ad6f9b1c648d79dd251292dee4";
            };

            meta = {
              longDescription = ''An Elixir library for handling dates. It can
                                be used to quickly determine a date. In a human
                                readable format.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/nurugger07/chronos";
            };
          } // packageOverrides)
      ) {};

    chronos_1_5_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "chronos";
            version = "1.5.1";
            src = fetchHex {
              pkg = "chronos";
              version = "1.5.1";
              sha256 =
                "015d881b1d095b53f626dc32f8db05e5faca8635b199d3cc2022a057c469904b";
            };

            meta = {
              longDescription = ''An Elixir library for handling dates. It can
                                be used to quickly determine a date. In a human
                                readable format.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/nurugger07/chronos";
            };
          } // packageOverrides)
      ) {};

    chronos_1_7_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "chronos";
            version = "1.7.0";
            src = fetchHex {
              pkg = "chronos";
              version = "1.7.0";
              sha256 =
                "984c50bd4bbf1418c67796c80f006d9f545fce951c16522d4f7417af87d1deb7";
            };

            meta = {
              longDescription = ''An Elixir library for handling dates. It can
                                be used to quickly determine a date. In a human
                                readable format.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/nurugger07/chronos";
            };
          } // packageOverrides)
      ) {};

    chronos = chronos_1_7_0;

    chumak_1_2_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "chumak";
            version = "1.2.0";
            src = fetchHex {
              pkg = "chumak";
              version = "1.2.0";
              sha256 =
                "33c9676b7600adf169e3b578331addd9af35f317eaa79313f5d44b853496baec";
            };

            meta = {
              description = ''Erlang implementation of ZeroMQ Transport
                            Protocol (ZMTP)'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/chovencorp/chumak";
            };
          } // packageOverrides)
      ) {};

    chumak = chumak_1_2_0;

    chunky_svg_0_0_4 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, xml_builder_0_0_9
        }:
          buildMix ({
            name = "chunky_svg";
            version = "0.0.4";
            src = fetchHex {
              pkg = "chunky_svg";
              version = "0.0.4";
              sha256 =
                "c8d7212148d72b03b6ed102410017a2cf77987a09fb889320fc381d383e68c75";
            };
            beamDeps  = [ xml_builder_0_0_9 ];

            meta = {
              description = '' A library for drawing things with SVG '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mmmries/chunky_svg";
            };
          } // packageOverrides)
      ) {};

    chunky_svg = chunky_svg_0_0_4;

    cider_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "cider";
            version = "0.1.0";
            src = fetchHex {
              pkg = "cider";
              version = "0.1.0";
              sha256 =
                "78c85befa88ef47c6b33680dcdf10b29bd31e33c4fc7319a33165bf3e78fd698";
            };

            meta = {
              description = ''CIDR library for Elixer.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/IanLuites/cider";
            };
          } // packageOverrides)
      ) {};

    cider = cider_0_1_0;

    cidr_1_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "cidr";
            version = "1.1.0";
            src = fetchHex {
              pkg = "cidr";
              version = "1.1.0";
              sha256 =
                "155c26559b27be49a446e13a9e12bf50d62bf9231c548e7743263e75fa61dc91";
            };

            meta = {
              description = ''Classless Inter-Domain Routing (CIDR) for
                            Elixir'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/c-rack/cidr-elixir";
            };
          } // packageOverrides)
      ) {};

    cidr = cidr_1_1_0;

    cipher_1_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_2_2_0 }:
          buildMix ({
            name = "cipher";
            version = "1.0.4";
            src = fetchHex {
              pkg = "cipher";
              version = "1.0.4";
              sha256 =
                "6d438c6c409e498a617b10c38959527b908e6c88d072ae07317a024ce0c72152";
            };
            beamDeps  = [ poison_2_2_0 ];

            meta = {
              description = ''Elixir crypto library to encrypt/decrypt
                            arbitrary binaries.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rubencaro/cipher";
            };
          } // packageOverrides)
      ) {};

    cipher_1_3_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          plug_1_3_5,
          poison_1_0_2
        }:
          buildMix ({
            name = "cipher";
            version = "1.3.1";
            src = fetchHex {
              pkg = "cipher";
              version = "1.3.1";
              sha256 =
                "5d1e142b7adf5b697138cdb2a74cc042cb64a1b98f22228e18976544c198c36e";
            };
            beamDeps  = [ plug_1_3_5 poison_1_0_2 ];

            meta = {
              description = ''Elixir crypto library to encrypt/decrypt
                            arbitrary binaries.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rubencaro/cipher";
            };
          } // packageOverrides)
      ) {};

    cipher = cipher_1_3_1;

    cipher_suites_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "cipher_suites";
            version = "0.1.0";
            src = fetchHex {
              pkg = "cipher_suites";
              version = "0.1.0";
              sha256 =
                "e82f33da55a5068014eab57ae39c28cf1345ff55f120fe65fc50733850323b4d";
            };

            meta = {
              longDescription = ''Select and sort the cipher suites for an
                                Erlang/Elixir application using the widely used
                                OpenSSL syntax.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/voltone/cipher_suites";
            };
          } // packageOverrides)
      ) {};

    cipher_suites = cipher_suites_0_1_0;

    circlex_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          anybar_0_4_0,
          ex_cli_0_1_2,
          httpoison_0_10_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "circlex";
            version = "0.3.0";
            src = fetchHex {
              pkg = "circlex";
              version = "0.3.0";
              sha256 =
                "2359fe12315a29602e1eea02c2127e9f23e6e002615f23c05d3fe0e41384d666";
            };
            beamDeps  = [
                          anybar_0_4_0
                          ex_cli_0_1_2
                          httpoison_0_10_0
                          poison_3_1_0
                        ];

            meta = {
              description = ''Monitors CircleCI builds'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/buccolo/circlex";
            };
          } // packageOverrides)
      ) {};

    circlex = circlex_0_3_0;

    cirru_parser_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "cirru_parser";
            version = "0.0.1";
            src = fetchHex {
              pkg = "cirru_parser";
              version = "0.0.1";
              sha256 =
                "259f533ee97805c50eb12fa8472b5553eaca5bfd58216d54a734dfa1c4d0c678";
            };

            meta = {
              description = ''Cirru Parser in Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Cirru/parser.ex";
            };
          } // packageOverrides)
      ) {};

    cirru_parser = cirru_parser_0_0_1;

    ckan_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_2_2_1,
          poison_1_5_2
        }:
          buildMix ({
            name = "ckan";
            version = "0.0.2";
            src = fetchHex {
              pkg = "ckan";
              version = "0.0.2";
              sha256 =
                "471a58f1d38df7a6ff36af9a1e9d4c6cb9d310c5acb2db95ff3184717d7762a0";
            };
            beamDeps  = [ httpotion_2_2_1 poison_1_5_2 ];

            meta = {
              description = ''A small library for interacting with CKAN
                            (ckan.org) instances'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/rossjones/ckan_ex";
            };
          } // packageOverrides)
      ) {};

    ckan = ckan_0_0_2;

    classnames_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "classnames";
            version = "0.1.0";
            src = fetchHex {
              pkg = "classnames";
              version = "0.1.0";
              sha256 =
                "7a72389132b89d5799e9c1132e15162d944140d92eaa0fa4cf77f50cfae5175e";
            };

            meta = {
              description = ''A simple utility for conditionally joining class
                            names'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rzane/classnames";
            };
          } // packageOverrides)
      ) {};

    classnames = classnames_0_1_0;

    cldr_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "cldr";
            version = "0.0.1";
            src = fetchHex {
              pkg = "cldr";
              version = "0.0.1";
              sha256 =
                "12e38f1ac12957606db8bd63314d98e40db007ff413de8f2ec94e0520a078201";
            };

            meta = {
              description = ''cldr is a library to use information from CLDR
                            data. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/magicienap/cldr";
            };
          } // packageOverrides)
      ) {};

    cldr = cldr_0_0_1;

    cldrex_0_0_7 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          poison_2_2_0,
          sweet_xml_0_6_5
        }:
          buildMix ({
            name = "cldrex";
            version = "0.0.7";
            src = fetchHex {
              pkg = "cldrex";
              version = "0.0.7";
              sha256 =
                "1d4f566f87fa0aa783edabdbba04b7c1dc99daa0521f611897bba5773fc2ff84";
            };
            beamDeps  = [ poison_2_2_0 sweet_xml_0_6_5 ];

            meta = {
              description = ''Provide common localization data and formatting
                            attributes from the CLDR.'';
              license = stdenv.lib.licenses.gpl3;
              homepage = "https://github.com/craig-day/cldrex";
            };
          } // packageOverrides)
      ) {};

    cldrex = cldrex_0_0_7;

    cleverbot_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, httpoison_0_5_0 }:
          buildMix ({
            name = "cleverbot";
            version = "0.0.1";
            src = fetchHex {
              pkg = "cleverbot";
              version = "0.0.1";
              sha256 =
                "2a6f1bedbfd03fa0bbceff1134976d720e349cd7551cd5033eadf79f6cea4622";
            };
            beamDeps  = [ httpoison_0_5_0 ];

            meta = {
              description = ''A Cleverbot API wrapper.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/BlakeWilliams/Elixir-Cleverbot";
            };
          } // packageOverrides)
      ) {};

    cleverbot = cleverbot_0_0_1;

    cli_spinners_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "cli_spinners";
            version = "0.1.0";
            src = fetchHex {
              pkg = "cli_spinners";
              version = "0.1.0";
              sha256 =
                "3b8ccad722e518309d8b92230960ca4775a761164514f78a89c4f04d5a25c97f";
            };

            meta = {
              longDescription = ''This module compirises of the loading
                                animations for the CLI- command line interface.
                                This comprises of 60+ loading animaations. This
                                is highly useful ind command line applications
                                for loading animations.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/blackode/cli_spinners";
            };
          } // packageOverrides)
      ) {};

    cli_spinners = cli_spinners_0_1_0;

    clicksign_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          bypass_0_6_0,
          cowboy_1_1_2,
          exjsx_3_2_1,
          httpoison_0_8_3,
          plug_1_3_5
        }:
          buildMix ({
            name = "clicksign";
            version = "0.0.2";
            src = fetchHex {
              pkg = "clicksign";
              version = "0.0.2";
              sha256 =
                "e6e9335c86298d5d5af6c18b85f3533554eca74d6129e1aea7dae17849b48ed2";
            };
            beamDeps  = [
                          bypass_0_6_0
                          cowboy_1_1_2
                          exjsx_3_2_1
                          httpoison_0_8_3
                          plug_1_3_5
                        ];

            meta = {
              description = ''Clicksign client'';

            };
          } // packageOverrides)
      ) {};

    clicksign = clicksign_0_0_2;

    clint_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_0_4,
          plug_1_1_7
        }:
          buildMix ({
            name = "clint";
            version = "0.0.1";
            src = fetchHex {
              pkg = "clint";
              version = "0.0.1";
              sha256 =
                "41c6781b5f4b986bce14c3578d39c497bcb8427f1d36d8cde5fcaa6e03cae2b1";
            };
            beamDeps  = [ cowboy_1_0_4 plug_1_1_7 ];

            meta = {
              description = ''An Elixir web micro-framework, inspired by
                            Sinatra'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lpil/clint";
            };
          } // packageOverrides)
      ) {};

    clint = clint_0_0_1;

    clique_0_3_9 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, cuttlefish_2_0_11
        }:
          buildRebar3 ({
            name = "clique";
            version = "0.3.9";
            src = fetchHex {
              pkg = "clique";
              version = "0.3.9";
              sha256 =
                "47e2c41310b794f4dd24f12ac1a1da5d7f5daef3dca7f4f8ea93382478ae0b40";
            };

            beamDeps  = [ cuttlefish_2_0_11 ];

            meta = {
              description = ''A CLI library for erlang'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/basho/clique";
            };
          } // packageOverrides)
      ) {};

    clique_3_0_1 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, cuttlefish_2_0_7
        }:
          buildRebar3 ({
            name = "clique";
            version = "3.0.1";
            src = fetchHex {
              pkg = "clique";
              version = "3.0.1";
              sha256 =
                "f26bd1d293a88223b9dc21dc5a2643e64823f3e8e178536fb66e97c4ff4a2ac2";
            };

            beamDeps  = [ cuttlefish_2_0_7 ];

            meta = {
              description = ''A CLI library for erlang'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/basho/clique";
            };
          } // packageOverrides)
      ) {};

    clique = clique_3_0_1;

    cloak_0_3_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_4,
          poison_3_1_0
        }:
          buildMix ({
            name = "cloak";
            version = "0.3.1";
            src = fetchHex {
              pkg = "cloak";
              version = "0.3.1";
              sha256 =
                "34796f6832d7c808998e8f2eb26ec55213aa598ea6564eee65b92fd89e0e71d0";
            };
            beamDeps  = [ ecto_2_1_4 poison_3_1_0 ];

            meta = {
              description = ''Encrypted fields for Ecto.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/danielberkompas/cloak";
            };
          } // packageOverrides)
      ) {};

    cloak = cloak_0_3_1;

    clope_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, uuid_1_1_7 }:
          buildMix ({
            name = "clope";
            version = "0.1.2";
            src = fetchHex {
              pkg = "clope";
              version = "0.1.2";
              sha256 =
                "00d98ac6f7489d9ced1dbed20badef26ef161686e9c21fa8cd5825fd8457b94f";
            };
            beamDeps  = [ uuid_1_1_7 ];

            meta = {
              description = ''CLOPE: A Fast and Effective Clustering Algorithm
                            for Transactional Data'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ayrat555/clope";
            };
          } // packageOverrides)
      ) {};

    clope = clope_0_1_2;

    close_enough_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "close_enough";
            version = "0.0.1";
            src = fetchHex {
              pkg = "close_enough";
              version = "0.0.1";
              sha256 =
                "cbd73a651bffc50259035a311e5a03cb01176667b76aece059778dda9bd72079";
            };

            meta = {
              description = ''Forget typos in function names name, CloseEnough
                            handles them.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sivsushruth/close_enough";
            };
          } // packageOverrides)
      ) {};

    close_enough = close_enough_0_0_1;

    cloud_vision_1_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          goth_0_2_1,
          httpoison_0_9_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "cloud_vision";
            version = "1.0.0";
            src = fetchHex {
              pkg = "cloud_vision";
              version = "1.0.0";
              sha256 =
                "9195aba564ec6e3ae49fd23547490377e49b5f7335e6d59c0043ad7fb9b37b9f";
            };
            beamDeps  = [ goth_0_2_1 httpoison_0_9_2 poison_2_2_0 ];

            meta = {
              description = ''Google Cloud Vision API Client in Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/yuyabee/cloud_vision";
            };
          } // packageOverrides)
      ) {};

    cloud_vision = cloud_vision_1_0_0;

    cloud_watch_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, aws_0_2_0 }:
          buildMix ({
            name = "cloud_watch";
            version = "0.1.0";
            src = fetchHex {
              pkg = "cloud_watch";
              version = "0.1.0";
              sha256 =
                "b6fc5348e51e4b4bff92fe5c6a923d31b8f6273020a41a13afd54c66680e1c41";
            };
            beamDeps  = [ aws_0_2_0 ];

            meta = {
              description = ''Amazon CloudWatch-logger backend for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lboekhorst/cloud_watch";
            };
          } // packageOverrides)
      ) {};

    cloud_watch = cloud_watch_0_1_0;

    cloudex_0_1_17 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0,
          timex_3_1_15,
          tzdata_0_5_12
        }:
          buildMix ({
            name = "cloudex";
            version = "0.1.17";
            src = fetchHex {
              pkg = "cloudex";
              version = "0.1.17";
              sha256 =
                "e7867574d3c7e0f28fb7f7f3b16f3d13f0b350c8ccd3e6d3b48a0138f930987b";
            };
            beamDeps  = [
                          httpoison_0_11_2
                          poison_3_1_0
                          timex_3_1_15
                          tzdata_0_5_12
                        ];

            meta = {
              longDescription = ''A library that helps with uploading image
                                files and urls to cloudinary. Also provides an
                                helper to generate transformations and
                                cloudinary urls pointing to your images'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/smeevil/cloudex";
            };
          } // packageOverrides)
      ) {};

    cloudex = cloudex_0_1_17;

    cloudi_core_1_5_3_rc1 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          cpg_1_5_4,
          erlang_term_1_5_4,
          key2value_1_5_4,
          keys1value_1_5_4,
          msgpack_0_6_0,
          nodefinder_1_7_0,
          pqueue_1_5_4,
          quickrand_1_5_4,
          reltool_util_1_5_4,
          supool_1_5_4,
          syslog_1_0_2,
          trie_1_5_4,
          uuid_erl_1_5_4,
          varpool_1_5_4
        }:
          buildRebar3 ({
            name = "cloudi_core";
            version = "1.5.3-rc1";
            src = fetchHex {
              pkg = "cloudi_core";
              version = "1.5.3-rc1";
              sha256 =
                "49322aac24f0d173ab1ec7e06749a00a44f79af93a7cf3bf253ce7f48da3c1bb";
            };

            beamDeps  = [
                          cpg_1_5_4
                          erlang_term_1_5_4
                          key2value_1_5_4
                          keys1value_1_5_4
                          msgpack_0_6_0
                          nodefinder_1_7_0
                          pqueue_1_5_4
                          quickrand_1_5_4
                          reltool_util_1_5_4
                          supool_1_5_4
                          syslog_1_0_2
                          trie_1_5_4
                          uuid_erl_1_5_4
                          varpool_1_5_4
                        ];

            meta = {
              description = ''Erlang/Elixir Cloud Framework'';
              license = stdenv.lib.licenses.mit;
              homepage = "http://cloudi.org";
            };
          } // packageOverrides)
      ) {};

    cloudi_core_1_5_4 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          cpg_1_5_4,
          erlang_term_1_5_4,
          key2value_1_5_4,
          keys1value_1_5_4,
          msgpack_0_6_0,
          nodefinder_1_7_0,
          pqueue_1_5_4,
          quickrand_1_5_4,
          reltool_util_1_5_4,
          supool_1_5_4,
          syslog_1_0_2,
          trie_1_5_4,
          uuid_erl_1_5_4,
          varpool_1_5_4
        }:
          buildRebar3 ({
            name = "cloudi_core";
            version = "1.5.4";
            src = fetchHex {
              pkg = "cloudi_core";
              version = "1.5.4";
              sha256 =
                "3512ecaef9d83de38fbde0de9e5f7bbaebdb9d4d0c5b71ee6aca1b60dbba551f";
            };

            beamDeps  = [
                          cpg_1_5_4
                          erlang_term_1_5_4
                          key2value_1_5_4
                          keys1value_1_5_4
                          msgpack_0_6_0
                          nodefinder_1_7_0
                          pqueue_1_5_4
                          quickrand_1_5_4
                          reltool_util_1_5_4
                          supool_1_5_4
                          syslog_1_0_2
                          trie_1_5_4
                          uuid_erl_1_5_4
                          varpool_1_5_4
                        ];

            meta = {
              description = ''Erlang/Elixir Cloud Framework'';
              license = stdenv.lib.licenses.mit;
              homepage = "http://cloudi.org";
            };
          } // packageOverrides)
      ) {};

    cloudi_core_1_6_0 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          cpg_1_6_0,
          erlang_term_1_6_0,
          key2value_1_6_0,
          keys1value_1_6_0,
          msgpack_0_6_0,
          nodefinder_1_7_0,
          pqueue_1_6_0,
          quickrand_1_6_0,
          reltool_util_1_6_0,
          supool_1_6_0,
          syslog_socket_1_6_0,
          trie_1_6_0,
          uuid_erl_1_6_0,
          varpool_1_6_0
        }:
          buildRebar3 ({
            name = "cloudi_core";
            version = "1.6.0";
            src = fetchHex {
              pkg = "cloudi_core";
              version = "1.6.0";
              sha256 =
                "39c6add887c214aa03e5467b089b14d647e8bfad6a668223b705e0ffdea64ede";
            };

            beamDeps  = [
                          cpg_1_6_0
                          erlang_term_1_6_0
                          key2value_1_6_0
                          keys1value_1_6_0
                          msgpack_0_6_0
                          nodefinder_1_7_0
                          pqueue_1_6_0
                          quickrand_1_6_0
                          reltool_util_1_6_0
                          supool_1_6_0
                          syslog_socket_1_6_0
                          trie_1_6_0
                          uuid_erl_1_6_0
                          varpool_1_6_0
                        ];

            meta = {
              description = ''Erlang/Elixir Cloud Framework'';
              license = stdenv.lib.licenses.mit;
              homepage = "http://cloudi.org";
            };
          } // packageOverrides)
      ) {};

    cloudi_core_1_7_1 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          cpg_1_7_1,
          erlang_term_1_7_1,
          key2value_1_7_1,
          keys1value_1_7_1,
          msgpack_0_7_0,
          nodefinder_1_7_1,
          pqueue_1_7_1,
          quickrand_1_7_1,
          reltool_util_1_7_1,
          supool_1_7_1,
          syslog_socket_1_7_1,
          trie_1_7_1,
          uuid_erl_1_7_1,
          varpool_1_7_1
        }:
          buildRebar3 ({
            name = "cloudi_core";
            version = "1.7.1";
            src = fetchHex {
              pkg = "cloudi_core";
              version = "1.7.1";
              sha256 =
                "9fd0c98470986711223e5993419dabf5e07a3984c9f9dab31867a65abff74444";
            };

            beamDeps  = [
                          cpg_1_7_1
                          erlang_term_1_7_1
                          key2value_1_7_1
                          keys1value_1_7_1
                          msgpack_0_7_0
                          nodefinder_1_7_1
                          pqueue_1_7_1
                          quickrand_1_7_1
                          reltool_util_1_7_1
                          supool_1_7_1
                          syslog_socket_1_7_1
                          trie_1_7_1
                          uuid_erl_1_7_1
                          varpool_1_7_1
                        ];

            meta = {
              description = ''Erlang/Elixir Cloud Framework'';
              license = stdenv.lib.licenses.mit;
              homepage = "http://cloudi.org";
            };
          } // packageOverrides)
      ) {};

    cloudi_core = cloudi_core_1_7_1;

    cloudi_service_api_requests_1_7_1 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          cloudi_core_1_7_1,
          jsx_2_8_2,
          trie_1_7_1
        }:
          buildRebar3 ({
            name = "cloudi_service_api_requests";
            version = "1.7.1";
            src = fetchHex {
              pkg = "cloudi_service_api_requests";
              version = "1.7.1";
              sha256 =
                "89ed63efa677810c4cadc753fb619998faffd20a229469bba24f27965329944e";
            };

            beamDeps  = [ cloudi_core_1_7_1 jsx_2_8_2 trie_1_7_1 ];

            meta = {
              description = ''Erlang/Elixir Cloud Framework API requests
                            (JSON-RPC/Erlang-term support)'';
              license = stdenv.lib.licenses.mit;
              homepage = "http://cloudi.org";
            };
          } // packageOverrides)
      ) {};

    cloudi_service_api_requests = cloudi_service_api_requests_1_7_1;

    cloudi_service_db_1_5_1 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          cloudi_core_1_5_4,
          trie_1_5_4,
          uuid_erl_1_5_4
        }:
          buildRebar3 ({
            name = "cloudi_service_db";
            version = "1.5.1";
            src = fetchHex {
              pkg = "cloudi_service_db";
              version = "1.5.1";
              sha256 =
                "067fccc8ca006722021b873995245f498a86582540bf738f6648bdceebd187e9";
            };

            beamDeps  = [ cloudi_core_1_5_4 trie_1_5_4 uuid_erl_1_5_4 ];

            meta = {
              description = ''Erlang/Elixir Cloud Framework Database
                            (in-memory/testing/generic)'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "http://cloudi.org";
            };
          } // packageOverrides)
      ) {};

    cloudi_service_db = cloudi_service_db_1_5_1;

    cloudi_service_db_cassandra_1_3_3 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          cloudi_core_1_5_3_rc1
        }:
          buildRebar3 ({
            name = "cloudi_service_db_cassandra";
            version = "1.3.3";
            src = fetchHex {
              pkg = "cloudi_service_db_cassandra";
              version = "1.3.3";
              sha256 =
                "78c9f924df50466fc3d27ffdd38dd235562be2ba4da5c298c569b3eee2bc10ef";
            };

            beamDeps  = [ cloudi_core_1_5_3_rc1 ];

            meta = {
              description = ''Erlang/Elixir Cloud Framework Cassandra
                            Service'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "http://cloudi.org";
            };
          } // packageOverrides)
      ) {};

    cloudi_service_db_cassandra = cloudi_service_db_cassandra_1_3_3;

    cloudi_service_db_cassandra_cql_1_5_1 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, cloudi_core_1_5_4
        }:
          buildRebar3 ({
            name = "cloudi_service_db_cassandra_cql";
            version = "1.5.1";
            src = fetchHex {
              pkg = "cloudi_service_db_cassandra_cql";
              version = "1.5.1";
              sha256 =
                "09173e571262745de51bb0b53732d909d846c80079ce33b976df7d61584f9ba8";
            };

            beamDeps  = [ cloudi_core_1_5_4 ];

            meta = {
              description = ''Erlang/Elixir Cloud Framework Cassandra CQL
                            Service'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "http://cloudi.org";
            };
          } // packageOverrides)
      ) {};

    cloudi_service_db_cassandra_cql =
      cloudi_service_db_cassandra_cql_1_5_1;

    cloudi_service_db_couchdb_1_5_1 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, cloudi_core_1_5_4
        }:
          buildRebar3 ({
            name = "cloudi_service_db_couchdb";
            version = "1.5.1";
            src = fetchHex {
              pkg = "cloudi_service_db_couchdb";
              version = "1.5.1";
              sha256 =
                "c6e97aadacf625549c99a96435e35d0dc971a7d0e7cf5283769e3d7e8ee36812";
            };

            beamDeps  = [ cloudi_core_1_5_4 ];

            meta = {
              description = ''Erlang/Elixir Cloud Framework CouchDB Service'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "http://cloudi.org";
            };
          } // packageOverrides)
      ) {};

    cloudi_service_db_couchdb = cloudi_service_db_couchdb_1_5_1;

    cloudi_service_db_elasticsearch_1_3_3 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          cloudi_core_1_5_3_rc1
        }:
          buildRebar3 ({
            name = "cloudi_service_db_elasticsearch";
            version = "1.3.3";
            src = fetchHex {
              pkg = "cloudi_service_db_elasticsearch";
              version = "1.3.3";
              sha256 =
                "2e4f6c8488ce879235f0548cb15cae6f3bcbb3c0b20e51ab3faad6769220ee12";
            };

            beamDeps  = [ cloudi_core_1_5_3_rc1 ];

            meta = {
              description = ''Erlang/Elixir Cloud Framework elasticsearch
                            Service'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "http://cloudi.org";
            };
          } // packageOverrides)
      ) {};

    cloudi_service_db_elasticsearch =
      cloudi_service_db_elasticsearch_1_3_3;

    cloudi_service_db_http_elli_1_6_0 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          cloudi_core_1_6_0,
          cowlib_1_0_2,
          elli_1_0_5,
          trie_1_6_0,
          uuid_erl_1_6_0
        }:
          buildRebar3 ({
            name = "cloudi_service_db_http_elli";
            version = "1.6.0";
            src = fetchHex {
              pkg = "cloudi_service_db_http_elli";
              version = "1.6.0";
              sha256 =
                "33cec0021e0921b8e4aab2b978c458d9b80b6b3373bc50f0ce451ac1842f3fbd";
            };

            beamDeps  = [
                          cloudi_core_1_6_0
                          cowlib_1_0_2
                          elli_1_0_5
                          trie_1_6_0
                          uuid_erl_1_6_0
                        ];

            meta = {
              description = ''Erlang/Elixir Cloud Framework elli HTTP
                            Service'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "http://cloudi.org";
            };
          } // packageOverrides)
      ) {};

    cloudi_service_db_http_elli = cloudi_service_db_http_elli_1_6_0;

    cloudi_service_db_memcached_1_5_1 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, cloudi_core_1_5_4
        }:
          buildRebar3 ({
            name = "cloudi_service_db_memcached";
            version = "1.5.1";
            src = fetchHex {
              pkg = "cloudi_service_db_memcached";
              version = "1.5.1";
              sha256 =
                "edcd28714e02d1b875c0c3a754fe230d5247b7b5e10194a74ee4d425fdca0839";
            };

            beamDeps  = [ cloudi_core_1_5_4 ];

            meta = {
              description = ''Erlang/Elixir Cloud Framework memcached
                            Service'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "http://cloudi.org";
            };
          } // packageOverrides)
      ) {};

    cloudi_service_db_memcached = cloudi_service_db_memcached_1_5_1;

    cloudi_service_db_mysql_1_5_4 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, cloudi_core_1_5_4
        }:
          buildRebar3 ({
            name = "cloudi_service_db_mysql";
            version = "1.5.4";
            src = fetchHex {
              pkg = "cloudi_service_db_mysql";
              version = "1.5.4";
              sha256 =
                "ed68ff10a9423d6476eb239c8997be2d9775acd230929b7cf5c4d3ee29db61e1";
            };

            beamDeps  = [ cloudi_core_1_5_4 ];

            meta = {
              description = ''Erlang/Elixir Cloud Framework MySQL Service'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "http://cloudi.org";
            };
          } // packageOverrides)
      ) {};

    cloudi_service_db_mysql = cloudi_service_db_mysql_1_5_4;

    cloudi_service_db_pgsql_1_5_4 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, cloudi_core_1_5_4
        }:
          buildRebar3 ({
            name = "cloudi_service_db_pgsql";
            version = "1.5.4";
            src = fetchHex {
              pkg = "cloudi_service_db_pgsql";
              version = "1.5.4";
              sha256 =
                "6394f57b79a402ac09cf11ec7b31c9d491ff7eb3d24554f57ccb52fded4a725f";
            };

            beamDeps  = [ cloudi_core_1_5_4 ];

            meta = {
              description = ''Erlang/Elixir Cloud Framework PostgreSQL
                            Service'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "http://cloudi.org";
            };
          } // packageOverrides)
      ) {};

    cloudi_service_db_pgsql = cloudi_service_db_pgsql_1_5_4;

    cloudi_service_db_riak_1_3_3 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          cloudi_core_1_5_3_rc1
        }:
          buildRebar3 ({
            name = "cloudi_service_db_riak";
            version = "1.3.3";
            src = fetchHex {
              pkg = "cloudi_service_db_riak";
              version = "1.3.3";
              sha256 =
                "902b6cb52a077fa47579631c07ca5ee414001b7388aac324b668c902a75de459";
            };

            beamDeps  = [ cloudi_core_1_5_3_rc1 ];

            meta = {
              description = ''Erlang/Elixir Cloud Framework Riak Service'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "http://cloudi.org";
            };
          } // packageOverrides)
      ) {};

    cloudi_service_db_riak = cloudi_service_db_riak_1_3_3;

    cloudi_service_db_tokyotyrant_1_5_0 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, cloudi_core_1_5_4
        }:
          buildRebar3 ({
            name = "cloudi_service_db_tokyotyrant";
            version = "1.5.0";
            src = fetchHex {
              pkg = "cloudi_service_db_tokyotyrant";
              version = "1.5.0";
              sha256 =
                "553893dfed554b3988e80f6dbc2aa301255941646fe82df57d4bca00ffeb9d1a";
            };

            beamDeps  = [ cloudi_core_1_5_4 ];

            meta = {
              description = ''Erlang/Elixir Cloud Framework Tokyo Tyrant
                            Service'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "http://cloudi.org";
            };
          } // packageOverrides)
      ) {};

    cloudi_service_db_tokyotyrant =
      cloudi_service_db_tokyotyrant_1_5_0;

    cloudi_service_filesystem_1_7_1 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          cloudi_core_1_7_1,
          cowlib_1_0_2
        }:
          buildRebar3 ({
            name = "cloudi_service_filesystem";
            version = "1.7.1";
            src = fetchHex {
              pkg = "cloudi_service_filesystem";
              version = "1.7.1";
              sha256 =
                "e9921f53f3e62c149f078dc3979d813d51e4c8cb7f8024c633535fe954883fb2";
            };

            beamDeps  = [ cloudi_core_1_7_1 cowlib_1_0_2 ];

            meta = {
              description = ''Erlang/Elixir Cloud Framework Filesystem
                            Service'';
              license = stdenv.lib.licenses.mit;
              homepage = "http://cloudi.org";
            };
          } // packageOverrides)
      ) {};

    cloudi_service_filesystem = cloudi_service_filesystem_1_7_1;

    cloudi_service_http_client_1_7_1 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          cloudi_core_1_7_1,
          trie_1_7_1,
          uuid_erl_1_7_1
        }:
          buildRebar3 ({
            name = "cloudi_service_http_client";
            version = "1.7.1";
            src = fetchHex {
              pkg = "cloudi_service_http_client";
              version = "1.7.1";
              sha256 =
                "bf3fc90a4315045e54a9fcccd8a2427f35458931f5852af3a1c7071e05c75182";
            };

            beamDeps  = [ cloudi_core_1_7_1 trie_1_7_1 uuid_erl_1_7_1 ];

            meta = {
              description = ''Erlang/Elixir Cloud Framework HTTP client
                            Service'';
              license = stdenv.lib.licenses.mit;
              homepage = "http://cloudi.org";
            };
          } // packageOverrides)
      ) {};

    cloudi_service_http_client = cloudi_service_http_client_1_7_1;

    cloudi_service_http_cowboy_1_7_1 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          cloudi_core_1_7_1,
          cowboy_1_0_4
        }:
          buildRebar3 ({
            name = "cloudi_service_http_cowboy";
            version = "1.7.1";
            src = fetchHex {
              pkg = "cloudi_service_http_cowboy";
              version = "1.7.1";
              sha256 =
                "1473eabaede5ab996e697d2f234eb47f68eef10742fb39b3098186d990103d55";
            };

            beamDeps  = [ cloudi_core_1_7_1 cowboy_1_0_4 ];

            meta = {
              description = ''Erlang/Elixir Cloud Framework cowboy HTTP/HTTPS
                            Service'';
              license = stdenv.lib.licenses.mit;
              homepage = "http://cloudi.org";
            };
          } // packageOverrides)
      ) {};

    cloudi_service_http_cowboy = cloudi_service_http_cowboy_1_7_1;

    cloudi_service_http_elli_1_7_1 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          cloudi_core_1_7_1,
          cowlib_1_0_2,
          elli_1_0_5,
          trie_1_7_1,
          uuid_erl_1_7_1
        }:
          buildRebar3 ({
            name = "cloudi_service_http_elli";
            version = "1.7.1";
            src = fetchHex {
              pkg = "cloudi_service_http_elli";
              version = "1.7.1";
              sha256 =
                "cf0f2d99e16cad08dacfd1c37ede0ea6ca50a536eaeb2874b63bdd2474dc26f5";
            };

            beamDeps  = [
                          cloudi_core_1_7_1
                          cowlib_1_0_2
                          elli_1_0_5
                          trie_1_7_1
                          uuid_erl_1_7_1
                        ];

            meta = {
              description = ''Erlang/Elixir Cloud Framework elli HTTP
                            Service'';
              license = stdenv.lib.licenses.mit;
              homepage = "http://cloudi.org";
            };
          } // packageOverrides)
      ) {};

    cloudi_service_http_elli = cloudi_service_http_elli_1_7_1;

    cloudi_service_http_rest_1_7_1 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          cloudi_core_1_7_1,
          trie_1_7_1
        }:
          buildRebar3 ({
            name = "cloudi_service_http_rest";
            version = "1.7.1";
            src = fetchHex {
              pkg = "cloudi_service_http_rest";
              version = "1.7.1";
              sha256 =
                "840035957b1ceba200a062c4e049314abda91da7e6096ff81ad2e1f1513f11b7";
            };

            beamDeps  = [ cloudi_core_1_7_1 trie_1_7_1 ];

            meta = {
              description = ''REST HTTP CloudI Service'';
              license = stdenv.lib.licenses.mit;
              homepage = "http://cloudi.org";
            };
          } // packageOverrides)
      ) {};

    cloudi_service_http_rest = cloudi_service_http_rest_1_7_1;

    cloudi_service_map_reduce_1_7_1 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, cloudi_core_1_7_1
        }:
          buildRebar3 ({
            name = "cloudi_service_map_reduce";
            version = "1.7.1";
            src = fetchHex {
              pkg = "cloudi_service_map_reduce";
              version = "1.7.1";
              sha256 =
                "b4879d9ccdbf50da157ef81654481c875373b5dd565e5e22646cb1fbdd05c24a";
            };

            beamDeps  = [ cloudi_core_1_7_1 ];

            meta = {
              description = ''Erlang/Elixir Cloud Framework Map/Reduce
                            Service'';
              license = stdenv.lib.licenses.mit;
              homepage = "http://cloudi.org";
            };
          } // packageOverrides)
      ) {};

    cloudi_service_map_reduce = cloudi_service_map_reduce_1_7_1;

    cloudi_service_monitoring_1_5_4 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          cloudi_core_1_5_4,
          folsom_0_8_3,
          key2value_1_5_4
        }:
          buildRebar3 ({
            name = "cloudi_service_monitoring";
            version = "1.5.4";
            src = fetchHex {
              pkg = "cloudi_service_monitoring";
              version = "1.5.4";
              sha256 =
                "56e023c2e326fe6d19012b1fc22275145f9440cecb1921c66e4d2c9e627fde89";
            };

            beamDeps  = [ cloudi_core_1_5_4 folsom_0_8_3 key2value_1_5_4 ];

            meta = {
              description = ''CloudI Monitoring Service'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "http://cloudi.org";
            };
          } // packageOverrides)
      ) {};

    cloudi_service_monitoring = cloudi_service_monitoring_1_5_4;

    cloudi_service_oauth1_1_5_4 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          cloudi_core_1_5_4,
          cloudi_service_db_pgsql_1_5_4,
          cowlib_1_0_2,
          jsx_2_8_2
        }:
          buildRebar3 ({
            name = "cloudi_service_oauth1";
            version = "1.5.4";
            src = fetchHex {
              pkg = "cloudi_service_oauth1";
              version = "1.5.4";
              sha256 =
                "89c593dd58e13cd713128a5c8be6568601178512f1dda5b01d205a4cd0778992";
            };

            beamDeps  = [
                          cloudi_core_1_5_4
                          cloudi_service_db_pgsql_1_5_4
                          cowlib_1_0_2
                          jsx_2_8_2
                        ];

            meta = {
              description = ''Erlang/Elixir Cloud Framework OAuth v1.0
                            Service'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "http://cloudi.org";
            };
          } // packageOverrides)
      ) {};

    cloudi_service_oauth1 = cloudi_service_oauth1_1_5_4;

    cloudi_service_queue_1_7_1 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, cloudi_core_1_7_1
        }:
          buildRebar3 ({
            name = "cloudi_service_queue";
            version = "1.7.1";
            src = fetchHex {
              pkg = "cloudi_service_queue";
              version = "1.7.1";
              sha256 =
                "ca0dded274303d4411429d6d7ceb024432b5400341b65c435da7570fbb9a5458";
            };

            beamDeps  = [ cloudi_core_1_7_1 ];

            meta = {
              description = ''Erlang/Elixir Cloud Framework Persistent Queue
                            Service'';
              license = stdenv.lib.licenses.mit;
              homepage = "http://cloudi.org";
            };
          } // packageOverrides)
      ) {};

    cloudi_service_queue = cloudi_service_queue_1_7_1;

    cloudi_service_quorum_1_7_1 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          cloudi_core_1_7_1,
          proper_1_2_0
        }:
          buildRebar3 ({
            name = "cloudi_service_quorum";
            version = "1.7.1";
            src = fetchHex {
              pkg = "cloudi_service_quorum";
              version = "1.7.1";
              sha256 =
                "9026d255cb1a56cfc900e679bbddb083cd6618d893480831dfa6b5b536f98775";
            };

            beamDeps  = [ cloudi_core_1_7_1 proper_1_2_0 ];

            meta = {
              description = ''Erlang/Elixir Cloud Framework Quorum Service'';
              license = stdenv.lib.licenses.mit;
              homepage = "http://cloudi.org";
            };
          } // packageOverrides)
      ) {};

    cloudi_service_quorum = cloudi_service_quorum_1_7_1;

    cloudi_service_router_1_7_1 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, cloudi_core_1_7_1
        }:
          buildRebar3 ({
            name = "cloudi_service_router";
            version = "1.7.1";
            src = fetchHex {
              pkg = "cloudi_service_router";
              version = "1.7.1";
              sha256 =
                "d37e0511088562bc60f53a1d4b3c39da10fdfe85db5c84675498fabaa84bc928";
            };

            beamDeps  = [ cloudi_core_1_7_1 ];

            meta = {
              description = ''Erlang/Elixir Cloud Framework Router Service'';
              license = stdenv.lib.licenses.mit;
              homepage = "http://cloudi.org";
            };
          } // packageOverrides)
      ) {};

    cloudi_service_router = cloudi_service_router_1_7_1;

    cloudi_service_tcp_1_7_1 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, cloudi_core_1_7_1
        }:
          buildRebar3 ({
            name = "cloudi_service_tcp";
            version = "1.7.1";
            src = fetchHex {
              pkg = "cloudi_service_tcp";
              version = "1.7.1";
              sha256 =
                "74e486f43d96ad8ed57dcfc026c44db821b664ca9680fe988700bf7b9c87a62e";
            };

            beamDeps  = [ cloudi_core_1_7_1 ];

            meta = {
              description = ''Erlang/Elixir Cloud Framework TCP Service'';
              license = stdenv.lib.licenses.mit;
              homepage = "http://cloudi.org";
            };
          } // packageOverrides)
      ) {};

    cloudi_service_tcp = cloudi_service_tcp_1_7_1;

    cloudi_service_timers_1_5_1 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, cloudi_core_1_5_4
        }:
          buildRebar3 ({
            name = "cloudi_service_timers";
            version = "1.5.1";
            src = fetchHex {
              pkg = "cloudi_service_timers";
              version = "1.5.1";
              sha256 =
                "c576fe4725493fd3303945398b0984f339a8b52877bead4deb282e7d0f4bbc64";
            };

            beamDeps  = [ cloudi_core_1_5_4 ];

            meta = {
              description = ''Erlang/Elixir Cloud Framework Timers Service'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "http://cloudi.org";
            };
          } // packageOverrides)
      ) {};

    cloudi_service_timers = cloudi_service_timers_1_5_1;

    cloudi_service_udp_1_7_1 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, cloudi_core_1_7_1
        }:
          buildRebar3 ({
            name = "cloudi_service_udp";
            version = "1.7.1";
            src = fetchHex {
              pkg = "cloudi_service_udp";
              version = "1.7.1";
              sha256 =
                "da5997ed2d9a1af31321b7c31c50f357475791c9b45cc94135499d8634ab9bf1";
            };

            beamDeps  = [ cloudi_core_1_7_1 ];

            meta = {
              description = ''Erlang/Elixir Cloud Framework UDP Service'';
              license = stdenv.lib.licenses.mit;
              homepage = "http://cloudi.org";
            };
          } // packageOverrides)
      ) {};

    cloudi_service_udp = cloudi_service_udp_1_7_1;

    cloudi_service_validate_1_7_1 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, cloudi_core_1_7_1
        }:
          buildRebar3 ({
            name = "cloudi_service_validate";
            version = "1.7.1";
            src = fetchHex {
              pkg = "cloudi_service_validate";
              version = "1.7.1";
              sha256 =
                "d76877c5b6faa31c0adcd0cebc749d01d946106cf27208e291eb81333a38f782";
            };

            beamDeps  = [ cloudi_core_1_7_1 ];

            meta = {
              description = ''Erlang/Elixir Cloud Framework Validate Service'';
              license = stdenv.lib.licenses.mit;
              homepage = "http://cloudi.org";
            };
          } // packageOverrides)
      ) {};

    cloudi_service_validate = cloudi_service_validate_1_7_1;

    cloudi_service_zeromq_1_5_4 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, cloudi_core_1_5_4
        }:
          buildRebar3 ({
            name = "cloudi_service_zeromq";
            version = "1.5.4";
            src = fetchHex {
              pkg = "cloudi_service_zeromq";
              version = "1.5.4";
              sha256 =
                "3449d5e32173dd794e428602cee65f76af4b6acd5ad54c2b7da6b7dd14946b79";
            };

            beamDeps  = [ cloudi_core_1_5_4 ];

            meta = {
              description = ''Erlang/Elixir Cloud Framework ZeroMQ Service'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "http://cloudi.org";
            };
          } // packageOverrides)
      ) {};

    cloudi_service_zeromq = cloudi_service_zeromq_1_5_4;

    cloudinary_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_1_4_0
        }:
          buildMix ({
            name = "cloudinary";
            version = "0.0.2";
            src = fetchHex {
              pkg = "cloudinary";
              version = "0.0.2";
              sha256 =
                "9e32b21717b193f90a526203725811b96294d7c88391e5ad4a57bf178678cc4c";
            };
            beamDeps  = [ httpoison_0_11_2 poison_1_4_0 ];

            meta = {
              description = ''Library to upload to Cloudinary'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    cloudinary = cloudinary_0_0_2;

    cloudinaryex_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_8_3,
          poison_1_5_2,
          timex_3_0_5
        }:
          buildMix ({
            name = "cloudinaryex";
            version = "0.0.2";
            src = fetchHex {
              pkg = "cloudinaryex";
              version = "0.0.2";
              sha256 =
                "31518baacfcca428e30ee8f1c411d76568344e7032ed93cf34535e279c8472fc";
            };
            beamDeps  = [ httpoison_0_8_3 poison_1_5_2 timex_3_0_5 ];

            meta = {
              description = ''A library for connecting with Cloudinary in
                            Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/micahwedemeyer/cloudinaryex";
            };
          } // packageOverrides)
      ) {};

    cloudinaryex = cloudinaryex_0_0_2;

    cloudini_1_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          poison_2_2_0,
          quintana_0_2_1
        }:
          buildMix ({
            name = "cloudini";
            version = "1.1.0";
            src = fetchHex {
              pkg = "cloudini";
              version = "1.1.0";
              sha256 =
                "51be7b0a940f71dec094104f930f906b99237d4c30a47c04e8b772572a1c8a26";
            };
            beamDeps  = [ poison_2_2_0 quintana_0_2_1 ];

            meta = {
              description = ''Cloudinary client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/socialpaymentsbv/cloudini";
            };
          } // packageOverrides)
      ) {};

    cloudini = cloudini_1_1_0;

    clox_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, timex_3_0_5 }:
          buildMix ({
            name = "clox";
            version = "0.2.0";
            src = fetchHex {
              pkg = "clox";
              version = "0.2.0";
              sha256 =
                "425917db05c8655d8f3690261b5e9c73e8ee8c69ff2a41fab6424e9e2b1b23ca";
            };
            beamDeps  = [ timex_3_0_5 ];

            meta = {
              description = ''time series date keys'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/camshaft/clox";
            };
          } // packageOverrides)
      ) {};

    clox = clox_0_2_0;

    clusterable_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          libcluster_2_1_1,
          peerage_1_0_2
        }:
          buildMix ({
            name = "clusterable";
            version = "0.1.1";
            src = fetchHex {
              pkg = "clusterable";
              version = "0.1.1";
              sha256 =
                "d1b5ad9623e3f237663d3a6dae1d0e4a316b62521aabf1fa0ce2cb36950d8bf1";
            };
            beamDeps  = [ libcluster_2_1_1 peerage_1_0_2 ];

            meta = {
              description = ''Clusterable prepares a node to be clustered'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/princemaple/clusterable";
            };
          } // packageOverrides)
      ) {};

    clusterable = clusterable_0_1_1;

    cmark_0_7_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "cmark";
            version = "0.7.0";
            src = fetchHex {
              pkg = "cmark";
              version = "0.7.0";
              sha256 =
                "deffa0b66cba126433efb54c068354bcf7c1fd8ba0f579741ab1d3cb26e0f942";
            };

            meta = {
              longDescription = ''Elixir NIF for cmark (C), a parser library
                                following the CommonMark spec, a compatible
                                implementation of Markdown.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/asaaki/cmark.ex";
            };
          } // packageOverrides)
      ) {};

    cmark = cmark_0_7_0;

    cobertura_cover_0_9_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "cobertura_cover";
            version = "0.9.0";
            src = fetchHex {
              pkg = "cobertura_cover";
              version = "0.9.0";
              sha256 =
                "870bc4658cacc5c80d13f1206b688925234d2dc4e00278e8a3e72fbbd6bea0b1";
            };

            meta = {
              longDescription = ''A plugin for `mix test --cover` that writes a
                                `coverage.xml` file compatible with Jenkins`
                                Cobertura plugin. '';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/PSPDFKit-labs/cobertura_cover";
            };
          } // packageOverrides)
      ) {};

    cobertura_cover = cobertura_cover_0_9_0;

    codec_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "codec";
            version = "0.1.0";
            src = fetchHex {
              pkg = "codec";
              version = "0.1.0";
              sha256 =
                "e76f5f11ff485d508057a0f8cfca30360a83db970c8280053cf91f2449b480b6";
            };

            meta = {
              longDescription = ''facilitates the development of layered binary
                                protocols while mostly sticking with the Elixir
                                bit field syntax.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/carusso/codec";
            };
          } // packageOverrides)
      ) {};

    codec = codec_0_1_0;

    codecom_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ex_doc_0_15_1 }:
          buildMix ({
            name = "codecom";
            version = "0.0.1";
            src = fetchHex {
              pkg = "codecom";
              version = "0.0.1";
              sha256 =
                "96d1f2fbe9687cfaa8ff4d943758f42b506b9c2c26fd6e9951cc64161baaffd9";
            };
            beamDeps  = [ ex_doc_0_15_1 ];

            meta = {
              longDescription = ''Codecom is a small tool written in elixir
                                designed for code comparisons and directory
                                structure and hierarchy comparisons. Its main
                                objective is to get findings through git
                                repositories in order to reveal code theft. It
                                is targeted at academic applications and
                                learning purposes.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/fran-bravo/codecom";
            };
          } // packageOverrides)
      ) {};

    codecom = codecom_0_0_1;

    codelation_messenger_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          plug_1_3_5,
          poison_3_1_0
        }:
          buildMix ({
            name = "codelation_messenger";
            version = "0.1.0";
            src = fetchHex {
              pkg = "codelation_messenger";
              version = "0.1.0";
              sha256 =
                "4f6ca72fdfc4c4461875d0bd55f3520e084f47efb186f7fd24c2a37586f45ab1";
            };
            beamDeps  = [ httpoison_0_11_2 plug_1_3_5 poison_3_1_0 ];

            meta = {
              longDescription = ''Simple HTTP/HTTPS message handler for running
                                tasks from other apps. Used in combination to
                                the Ruby Gem Codelation Messenger. This allows
                                for both async and sync message sending between
                                the apps for use on Heroku.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/codelation/elixir-messenger";
            };
          } // packageOverrides)
      ) {};

    codelation_messenger = codelation_messenger_0_1_0;

    codepagex_0_1_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "codepagex";
            version = "0.1.4";
            src = fetchHex {
              pkg = "codepagex";
              version = "0.1.4";
              sha256 =
                "21710d98fb2bc03a4d44365b66aba569c3a9267437cfafd09ca27ed92a99c75e";
            };

            meta = {
              longDescription = ''Codepagex is an elixir library to convert
                                between string encodings to and from utf-8. Like
                                iconv, but written in pure Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/tallakt/codepagex";
            };
          } // packageOverrides)
      ) {};

    codepagex = codepagex_0_1_4;

    coffee_rotor_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, rotor_0_2_2 }:
          buildMix ({
            name = "coffee_rotor";
            version = "0.2.1";
            src = fetchHex {
              pkg = "coffee_rotor";
              version = "0.2.1";
              sha256 =
                "cb2f786c1abf109ed4d86ec175c02cb09adb1f1ee52d7a4ef0c9e65979d4f365";
            };
            beamDeps  = [ rotor_0_2_2 ];

            meta = {
              description = ''A [rotor](https://github.com/HashNuke/rotor) to
                            compile CoffeeScript files '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/HashNuke/coffee_rotor";
            };
          } // packageOverrides)
      ) {};

    coffee_rotor = coffee_rotor_0_2_1;

    cognixir_0_4_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_3_0_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "cognixir";
            version = "0.4.0";
            src = fetchHex {
              pkg = "cognixir";
              version = "0.4.0";
              sha256 =
                "51503199ad514ceaf4b4939c6de00fd817fdecd1e191d3453426293749458a3d";
            };
            beamDeps  = [ httpotion_3_0_2 poison_3_1_0 ];

            meta = {
              longDescription = ''Elixir Client for Microsoft Cognitive
                                Services. With this library you can access the
                                cognitive services api and add machine
                                intelligence to your elixir application!'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/BrummbQ/cognixir";
            };
          } // packageOverrides)
      ) {};

    cognixir = cognixir_0_4_0;

    coherence_0_3_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          comeonin_2_6_0,
          ecto_2_1_4,
          gettext_0_13_1,
          phoenix_1_3_0_rc_2,
          phoenix_html_2_9_3,
          phoenix_swoosh_0_1_3,
          phoenix_timex_1_0_1,
          timex_ecto_3_0_0,
          uuid_1_1_7
        }:
          buildMix ({
            name = "coherence";
            version = "0.3.1";
            src = fetchHex {
              pkg = "coherence";
              version = "0.3.1";
              sha256 =
                "58e3570f232669f1c66fff46fd4ddcb519df772f8eedcbd3661d27eb949d8433";
            };
            beamDeps  = [
                          comeonin_2_6_0
                          ecto_2_1_4
                          gettext_0_13_1
                          phoenix_1_3_0_rc_2
                          phoenix_html_2_9_3
                          phoenix_swoosh_0_1_3
                          phoenix_timex_1_0_1
                          timex_ecto_3_0_0
                          uuid_1_1_7
                        ];

            meta = {
              longDescription = ''A full featured, configurable authentication
                                and user management system for Phoenix.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/smpallen99/coherence";
            };
          } // packageOverrides)
      ) {};

    coherence = coherence_0_3_1;

    coinbase_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          dotenv_2_0_0,
          httpoison_0_6_2,
          inflex_1_0_0,
          poison_1_3_1,
          timex_3_0_5
        }:
          buildMix ({
            name = "coinbase";
            version = "0.0.1";
            src = fetchHex {
              pkg = "coinbase";
              version = "0.0.1";
              sha256 =
                "c7d59d239f219623765a596dc61a678a527d19fd0110db1ea09ab937d0df9bcc";
            };
            beamDeps  = [
                          dotenv_2_0_0
                          httpoison_0_6_2
                          inflex_1_0_0
                          poison_1_3_1
                          timex_3_0_5
                        ];

            meta = {
              description = ''Coinbase API for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gregpardo/coinbase-elixir";
            };
          } // packageOverrides)
      ) {};

    coinbase = coinbase_0_0_1;

    coincap_io_0_0_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exconstructor_1_1_0,
          httpoison_0_11_2,
          poison_2_2_0,
          vex_0_6_0
        }:
          buildMix ({
            name = "coincap_io";
            version = "0.0.4";
            src = fetchHex {
              pkg = "coincap_io";
              version = "0.0.4";
              sha256 =
                "ca55b86e76a95b3db4122798b2c5e8123a1f3ea9b9358624eb48c65cbff211a3";
            };
            beamDeps  = [
                          exconstructor_1_1_0
                          httpoison_0_11_2
                          poison_2_2_0
                          vex_0_6_0
                        ];

            meta = {
              longDescription = ''WIP, unstable Elixir API wrapper for
                                coincap.io. Provides access to market
                                capitalization data of bitcoin, altcoins and
                                cryptotokens.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cyberpunk-ventures/coincap_io_ex";
            };
          } // packageOverrides)
      ) {};

    coincap_io = coincap_io_0_0_4;

    coinmarketcap_api_1_2_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "coinmarketcap_api";
            version = "1.2.2";
            src = fetchHex {
              pkg = "coinmarketcap_api";
              version = "1.2.2";
              sha256 =
                "6f21f87ff51f960022d8132c4000aa1a07147f6d2842f3fa88386e806e96b177";
            };
            beamDeps  = [ httpoison_0_11_2 poison_2_2_0 ];

            meta = {
              longDescription = ''Coinmarketcap.com API wrapper for
                                Elixir/Erlang. Provides access to ticker and
                                historical data for cryptocurrencies like
                                Ethereum, Bitcoin, Monero, etc.'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/cyberpunk-ventures/coinmarketcap_api_ex";
            };
          } // packageOverrides)
      ) {};

    coinmarketcap_api = coinmarketcap_api_1_2_2;

    colixir_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "colixir";
            version = "0.0.1";
            src = fetchHex {
              pkg = "colixir";
              version = "0.0.1";
              sha256 =
                "38dc49351419c6fcfdb76bbc785e07c3acf83cc29f632719dd601ecadbfb73b8";
            };

            meta = {
              description = ''Colixir creates colorized text for terminal
                            output'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/mondok/colixir";
            };
          } // packageOverrides)
      ) {};

    colixir = colixir_0_0_1;

    collidex_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, graphmath_1_0_3 }:
          buildMix ({
            name = "collidex";
            version = "0.2.0";
            src = fetchHex {
              pkg = "collidex";
              version = "0.2.0";
              sha256 =
                "842a6deeceef2196a6f6f000d6d4f59fd080d17334c0f99a78e529c8a9f3476d";
            };
            beamDeps  = [ graphmath_1_0_3 ];

            meta = {
              longDescription = ''A 2-D collision detection library implemented
                                in pure Elixir. Supports circles, polygons, and
                                grid-aligned rectangles.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/idahoev/collidex";
            };
          } // packageOverrides)
      ) {};

    collidex = collidex_0_2_0;

    collision_0_3_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "collision";
            version = "0.3.1";
            src = fetchHex {
              pkg = "collision";
              version = "0.3.1";
              sha256 =
                "e20c2ba89772bf35aeed1b7f9bd8f41e3456fdd2ed95b0f04a67db4fc3e2b666";
            };

            meta = {
              longDescription = ''A library for creating, manipulating, and
                                detecting and resolving collisions between
                                polygons.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/tpoulsen/collision";
            };
          } // packageOverrides)
      ) {};

    collision = collision_0_3_1;

    color_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "color";
            version = "0.1.0";
            src = fetchHex {
              pkg = "color";
              version = "0.1.0";
              sha256 =
                "c864b4d5f83050f810f311dff674c5486f87c028d8cd495612a0f97829afe6ff";
            };

            meta = {
              longDescription = ''Color is a Elixir library to provide basic
                                RGB, CMYK, HSL, and other colourspace
                                manipulation support to applications that
                                require it'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/fertapric/color";
            };
          } // packageOverrides)
      ) {};

    color = color_0_1_0;

    color_stream_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "color_stream";
            version = "0.0.2";
            src = fetchHex {
              pkg = "color_stream";
              version = "0.0.2";
              sha256 =
                "b1181f32b310311016006f4f8d52b3418d1af6f06e71903daabafdcaa602a29d";
            };

            meta = {
              description = ''Generate random colors that are fairly spaced out
                            and look nice.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/code-lever/color-stream-elixir";
            };
          } // packageOverrides)
      ) {};

    color_stream = color_stream_0_0_2;

    color_utils_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "color_utils";
            version = "0.2.0";
            src = fetchHex {
              pkg = "color_utils";
              version = "0.2.0";
              sha256 =
                "bf16a1a9de7d837a68ede139c6e06bc9d57f9eccedff302f730105bd80d98647";
            };

            meta = {
              description = ''A Color Util library for Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/barakyo/color_utils";
            };
          } // packageOverrides)
      ) {};

    color_utils = color_utils_0_2_0;

    colorful_0_6_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "colorful";
            version = "0.6.0";
            src = fetchHex {
              pkg = "colorful";
              version = "0.6.0";
              sha256 =
                "6b00225f137efdde7901d3ddc7626a3b33031c20ea145097b2442680e72adc3d";
            };

            meta = {
              description = ''Modules which manage colors'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Joe-noh/colorful";
            };
          } // packageOverrides)
      ) {};

    colorful = colorful_0_6_0;

    colorify_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "colorify";
            version = "0.1.0";
            src = fetchHex {
              pkg = "colorify";
              version = "0.1.0";
              sha256 =
                "af501f91ed2b3ba7cd6e7a5c2940b44d3f9ca78a455dd7d0e8641cd100714f64";
            };

            meta = {
              description = ''Converts a binary to hex color for HTML & CSS
                            usage.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/murtza/colorify";
            };
          } // packageOverrides)
      ) {};

    colorify = colorify_0_1_0;

    colorize_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "colorize";
            version = "0.2.0";
            src = fetchHex {
              pkg = "colorize";
              version = "0.2.0";
              sha256 =
                "d43757bae49d6da310d641cf7ec809bdc0b6a9eb40fb7ac4c57c1dbbb7d4e32e";
            };

            meta = {
              description = ''Colorize your text in the console'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/shiroyasha/colorize";
            };
          } // packageOverrides)
      ) {};

    colorize = colorize_0_2_0;

    colors_1_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "colors";
            version = "1.1.1";
            src = fetchHex {
              pkg = "colors";
              version = "1.1.1";
              sha256 =
                "f1c06de5d0c23dc112318d7339083a8cc4c0fc944fd2cbf38b8474adcf77419a";
            };

            meta = {
              description = ''a colors util'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/lidashuang/colors";
            };
          } // packageOverrides)
      ) {};

    colors = colors_1_1_1;

    combination_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "combination";
            version = "0.0.3";
            src = fetchHex {
              pkg = "combination";
              version = "0.0.3";
              sha256 =
                "72b099f463df42ef7dc6371d250c7070b57b6c5902853f69deb894f79eda18ca";
            };

            meta = {
              description = ''Elixir library computing simple combination and
                            permutation on Enumerables.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/seantanly/elixir-combination";
            };
          } // packageOverrides)
      ) {};

    combination = combination_0_0_3;

    combine_0_9_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "combine";
            version = "0.9.5";
            src = fetchHex {
              pkg = "combine";
              version = "0.9.5";
              sha256 =
                "f972c533095495eaced5a5e656131b7d7e0fe2bb282b0e5a706f936cff942777";
            };

            meta = {
              description = ''A parser combinator library for Elixir
                            projects.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bitwalker/combine";
            };
          } // packageOverrides)
      ) {};

    combine_0_9_6 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "combine";
            version = "0.9.6";
            src = fetchHex {
              pkg = "combine";
              version = "0.9.6";
              sha256 =
                "0b450698443dc9ab84cee85976752b4af1009cdf0f01da9ee8ef2550dc67c47f";
            };

            meta = {
              description = ''A parser combinator library for Elixir
                            projects.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bitwalker/combine";
            };
          } // packageOverrides)
      ) {};

    combine = combine_0_9_6;

    comeonin_1_6_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, comeonin_i18n_0_1_3
        }:
          buildMix ({
            name = "comeonin";
            version = "1.6.0";
            src = fetchHex {
              pkg = "comeonin";
              version = "1.6.0";
              sha256 =
                "40dd0da2c33696d19515888fd86b9ffdcad92d49e9a6b3b13df98e824897a1b1";
            };
            beamDeps  = [ comeonin_i18n_0_1_3 ];

            meta = {
              description = ''Password hashing library for Elixir.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/riverrun/comeonin";
            };
          } // packageOverrides)
      ) {};

    comeonin_2_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "comeonin";
            version = "2.0.3";
            src = fetchHex {
              pkg = "comeonin";
              version = "2.0.3";
              sha256 =
                "a9a6f87107ebf6898adeca7130adb1b9e421c1be7e8b30b13ac1e0354ea15198";
            };

            meta = {
              description = ''Password hashing library for Elixir.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/riverrun/comeonin";
            };
          } // packageOverrides)
      ) {};

    comeonin_2_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "comeonin";
            version = "2.1.1";
            src = fetchHex {
              pkg = "comeonin";
              version = "2.1.1";
              sha256 =
                "7f85774ae5d453f664d0e7809cc1ab32ff22855d16ff6a2edd68c6d36cb1a1aa";
            };

            meta = {
              description = ''Password hashing library for Elixir.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/riverrun/comeonin";
            };
          } // packageOverrides)
      ) {};

    comeonin_2_6_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "comeonin";
            version = "2.6.0";
            src = fetchHex {
              pkg = "comeonin";
              version = "2.6.0";
              sha256 =
                "bc72f049a1c61048427f557821fc06e273abf09f6829377541475d7b36ac8ac6";
            };

            meta = {
              description = ''Password hashing library for Elixir.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/riverrun/comeonin";
            };
          } // packageOverrides)
      ) {};

    comeonin_3_0_2 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, elixir_make_0_4_0
        }:
          buildMix ({
            name = "comeonin";
            version = "3.0.2";
            src = fetchHex {
              pkg = "comeonin";
              version = "3.0.2";
              sha256 =
                "e881744c724b550b1261e70c385e597b9bef83111d6d87b103b00e26cf0bf10a";
            };
            beamDeps  = [ elixir_make_0_4_0 ];

            meta = {
              description = ''Password hashing library for Elixir.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/riverrun/comeonin";
            };
          } // packageOverrides)
      ) {};

    comeonin = comeonin_3_0_2;

    comeonin_ecto_password_2_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          comeonin_3_0_2,
          ecto_2_1_4
        }:
          buildMix ({
            name = "comeonin_ecto_password";
            version = "2.1.0";
            src = fetchHex {
              pkg = "comeonin_ecto_password";
              version = "2.1.0";
              sha256 =
                "939b2d4a23417227f809b9ab4309d0f7594f941461468ed02d3eba5dc3290250";
            };
            beamDeps  = [ comeonin_3_0_2 ecto_2_1_4 ];

            meta = {
              description = ''Ecto custom type for storing encrypted password
                            using Comeonin'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/vic/comeonin_ecto_password";
            };
          } // packageOverrides)
      ) {};

    comeonin_ecto_password = comeonin_ecto_password_2_1_0;

    comeonin_i18n_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, gettext_0_13_1 }:
          buildMix ({
            name = "comeonin_i18n";
            version = "0.1.3";
            src = fetchHex {
              pkg = "comeonin_i18n";
              version = "0.1.3";
              sha256 =
                "4b45ca5af3cbf20bf7d3f7e874629041a2a921ad5a62ca9b94546a1e559023a6";
            };
            beamDeps  = [ gettext_0_13_1 ];

            meta = {
              description = ''Internationalization support for the Comeonin
                            password hashing library.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/elixircnx/comeonin_i18n";
            };
          } // packageOverrides)
      ) {};

    comeonin_i18n = comeonin_i18n_0_1_3;

    commanded_0_11_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          poison_3_1_0,
          uuid_1_1_7
        }:
          buildMix ({
            name = "commanded";
            version = "0.11.0";
            src = fetchHex {
              pkg = "commanded";
              version = "0.11.0";
              sha256 =
                "a7329f9303c154391a6337df8bddaaa5488d468b10585befa0c939fdd37f2c41";
            };
            beamDeps  = [ poison_3_1_0 uuid_1_1_7 ];

            meta = {
              description = ''Command handling middleware for CQRS
                            applications'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/slashdotdash/commanded";
            };
          } // packageOverrides)
      ) {};

    commanded = commanded_0_11_0;

    commanded_ecto_projections_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          commanded_0_11_0,
          ecto_2_1_4
        }:
          buildMix ({
            name = "commanded_ecto_projections";
            version = "0.2.0";
            src = fetchHex {
              pkg = "commanded_ecto_projections";
              version = "0.2.0";
              sha256 =
                "9e7cef20a84a404b5561116be2aeb02ec23e3becc7e8911a6624328e75a26d54";
            };
            beamDeps  = [ commanded_0_11_0 ecto_2_1_4 ];

            meta = {
              description = ''Read model projections for Commanded using
                            Ecto'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/slashdotdash/commanded-ecto-projections";
            };
          } // packageOverrides)
      ) {};

    commanded_ecto_projections = commanded_ecto_projections_0_2_0;

    commanded_eventstore_adapter_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          commanded_0_11_0,
          eventstore_0_9_0
        }:
          buildMix ({
            name = "commanded_eventstore_adapter";
            version = "0.1.0";
            src = fetchHex {
              pkg = "commanded_eventstore_adapter";
              version = "0.1.0";
              sha256 =
                "03fbb6e16474b7370a79e04802824ab87b286292d1465ea9e75255376edf87f5";
            };
            beamDeps  = [ commanded_0_11_0 eventstore_0_9_0 ];

            meta = {
              description = ''EventStore adapter for Commanded'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/slashdotdash/commanded-eventstore-adapter";
            };
          } // packageOverrides)
      ) {};

    commanded_eventstore_adapter =
      commanded_eventstore_adapter_0_1_0;

    commanded_extreme_adapter_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          commanded_0_11_0,
          extreme_0_9_2
        }:
          buildMix ({
            name = "commanded_extreme_adapter";
            version = "0.1.0";
            src = fetchHex {
              pkg = "commanded_extreme_adapter";
              version = "0.1.0";
              sha256 =
                "02101b642e30ce751e3579e69ae35d45fca623f9cb3f601733c543e3b3972255";
            };
            beamDeps  = [ commanded_0_11_0 extreme_0_9_2 ];

            meta = {
              description = ''Extreme event store adapter for Commanded'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/slashdotdash/commanded-extreme-adapter";
            };
          } // packageOverrides)
      ) {};

    commanded_extreme_adapter = commanded_extreme_adapter_0_1_0;

    commander_1_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "commander";
            version = "1.1.0";
            src = fetchHex {
              pkg = "commander";
              version = "1.1.0";
              sha256 =
                "ef598cd33bcd316b13ec268c0e4526863aea5d48320ad75f533a0e212dc0c4c5";
            };

            meta = {
              description = ''A macro library to help create telegram bot'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/carlo-colombo/commander";
            };
          } // packageOverrides)
      ) {};

    commander = commander_1_1_0;

    commando_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "commando";
            version = "0.1.0";
            src = fetchHex {
              pkg = "commando";
              version = "0.1.0";
              sha256 =
                "c310d3a491ea7f793966c99b65fb4080bcfc5f16a9ed731c99bf8c9a752f2e8b";
            };

            meta = {
              longDescription = ''Elixir command line options parser with
                                descriptions, help messages, default values, and
                                other useful features'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/svetob/commando";
            };
          } // packageOverrides)
      ) {};

    commando = commando_0_1_0;

    commerce_billing_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ex_doc_0_16_1,
          httpoison_0_11_2,
          jazz_0_2_1,
          mock_0_2_1
        }:
          buildMix ({
            name = "commerce_billing";
            version = "0.0.2";
            src = fetchHex {
              pkg = "commerce_billing";
              version = "0.0.2";
              sha256 =
                "6bb751f496011b974cb8d536b079eb7dfaeee4be827e4cf2fe0585e10f26bd04";
            };
            beamDeps  = [
                          ex_doc_0_16_1 httpoison_0_11_2 jazz_0_2_1 mock_0_2_1
                        ];

            meta = {
              description = ''Credit card processing library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/joshnuss/commerce_billing";
            };
          } // packageOverrides)
      ) {};

    commerce_billing = commerce_billing_0_0_2;

    common_device_detector_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          con_cache_0_12_0,
          plug_1_3_5,
          ua_inspector_0_14_0
        }:
          buildMix ({
            name = "common_device_detector";
            version = "0.3.0";
            src = fetchHex {
              pkg = "common_device_detector";
              version = "0.3.0";
              sha256 =
                "d802c7ac1713eae58ef4c40432b38974d909d476d42324dd0f3ba2b943287aab";
            };
            beamDeps  = [ con_cache_0_12_0 plug_1_3_5 ua_inspector_0_14_0 ];

            meta = {
              description = ''Detect devices that desktop, mobile, smartphone
                            and tabled form User Agent.'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/ikeikeikeike/common_device_detector";
            };
          } // packageOverrides)
      ) {};

    common_device_detector = common_device_detector_0_3_0;

    compass_0_0_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_4,
          orientex_0_0_13
        }:
          buildMix ({
            name = "compass";
            version = "0.0.3";
            src = fetchHex {
              pkg = "compass";
              version = "0.0.3";
              sha256 =
                "027379858eab03b153fe22294944679165d7c91714d57b1de525007340cea99c";
            };
            beamDeps  = [ ecto_2_1_4 orientex_0_0_13 ];

            meta = {
              description = ''An abstraction for Orientex.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/austinsmorris/compass";
            };
          } // packageOverrides)
      ) {};

    compass = compass_0_0_3;

    compassIO_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, chronos_1_5_1 }:
          buildMix ({
            name = "compassIO";
            version = "0.0.1";
            src = fetchHex {
              pkg = "compassIO";
              version = "0.0.1";
              sha256 =
                "980a602623dd1caca67501bfab32a0b8b6bfb1c48550682ea29d254f335ccb6b";
            };
            beamDeps  = [ chronos_1_5_1 ];

            meta = {
              description = ''Read (and eventually write) compass .DAT
                            files.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/tobyprivett/compassIO";
            };
          } // packageOverrides)
      ) {};

    compassIO = compassIO_0_0_1;

    compiler_cache_1_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "compiler_cache";
            version = "1.1.0";
            src = fetchHex {
              pkg = "compiler_cache";
              version = "1.1.0";
              sha256 =
                "86127383f400300c774d41ec26fb227152d8747a21f35866a6190fda62c760ca";
            };

            meta = {
              description = ''LRU cache for compiling expressions into
                            functions'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/arjan/compiler_cache";
            };
          } // packageOverrides)
      ) {};

    compiler_cache = compiler_cache_1_1_0;

    compiletime_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "compiletime";
            version = "0.2.0";
            src = fetchHex {
              pkg = "compiletime";
              version = "0.2.0";
              sha256 =
                "36cf66a457160724a7b9e4e03037e6b1454af974b69aa992be1aac7c66003c87";
            };

            meta = {
              description = ''A collection of helpful compiletime tools'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/amorphid/compile";
            };
          } // packageOverrides)
      ) {};

    compiletime = compiletime_0_2_0;

    complex_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          earmark_0_2_1,
          exprintf_0_2_1
        }:
          buildMix ({
            name = "complex";
            version = "0.2.0";
            src = fetchHex {
              pkg = "complex";
              version = "0.2.0";
              sha256 =
                "6db6a2850ed907c4d9e062591110dc70c35c3818ccf609f1268052a3f4bf10b0";
            };
            beamDeps  = [ earmark_0_2_1 exprintf_0_2_1 ];

            meta = {
              description = ''Complex is a library for types and mathematical
                            functions for complex numbers.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/twist-vector/elixir-complex.git";
            };
          } // packageOverrides)
      ) {};

    complex = complex_0_2_0;

    complex_math_0_2_0_rc1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "complex_math";
            version = "0.2.0-rc1";
            src = fetchHex {
              pkg = "complex_math";
              version = "0.2.0-rc1";
              sha256 =
                "73d3dda9f0f7684ac2ad6577b4c42c5068eed737ca4fa16c0d8fa1c2392e62bf";
            };

            meta = {
              description = ''LFE support for numbers both real and imagined'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/lfex/complex";
            };
          } // packageOverrides)
      ) {};

    complex_math = complex_math_0_2_0_rc1;

    complex_num_1_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, numbers_3_0_0 }:
          buildMix ({
            name = "complex_num";
            version = "1.0.3";
            src = fetchHex {
              pkg = "complex_num";
              version = "1.0.3";
              sha256 =
                "f75d9825bae2f2db9853de9300e269750b4ff0528744dc7d152bc4e11c03030a";
            };
            beamDeps  = [ numbers_3_0_0 ];

            meta = {
              longDescription = ''ComplexNum allows you to do math with Complex
                                Numbers. Both Cartesian and Polar form are
                                supported.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Qqwy/elixir_complex_num/";
            };
          } // packageOverrides)
      ) {};

    complex_num = complex_num_1_0_3;

    comredis_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_3_1_0 }:
          buildMix ({
            name = "comredis";
            version = "1.0.1";
            src = fetchHex {
              pkg = "comredis";
              version = "1.0.1";
              sha256 =
                "03aa3a9235f39c666854027b88915b9f256c357ce6e0a493da54d6dec7b3a207";
            };
            beamDeps  = [ poison_3_1_0 ];

            meta = {
              description = ''Comredis is your comrade for Redis command
                            generation in Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/iurifq/comredis";
            };
          } // packageOverrides)
      ) {};

    comredis = comredis_1_0_1;

    con_cache_0_11_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, exactor_2_2_3 }:
          buildMix ({
            name = "con_cache";
            version = "0.11.1";
            src = fetchHex {
              pkg = "con_cache";
              version = "0.11.1";
              sha256 =
                "0e444e1884db44e9904fb00a50f6c06a6288c69577e5555e1fcb61ff156a5ad9";
            };
            beamDeps  = [ exactor_2_2_3 ];

            meta = {
              longDescription = ''ETS based key-value storage with support for
                                row-level isolated writes, TTL auto-purge, and
                                modification callbacks.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sasa1977/con_cache";
            };
          } // packageOverrides)
      ) {};

    con_cache_0_12_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, exactor_2_2_3 }:
          buildMix ({
            name = "con_cache";
            version = "0.12.0";
            src = fetchHex {
              pkg = "con_cache";
              version = "0.12.0";
              sha256 =
                "6a9b326a00164b9809d5c44b636f76ec2734212c04889cc1b747f2bc43c0cc78";
            };
            beamDeps  = [ exactor_2_2_3 ];

            meta = {
              longDescription = ''ETS based key-value storage with support for
                                row-level isolated writes, TTL auto-purge, and
                                modification callbacks.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sasa1977/con_cache";
            };
          } // packageOverrides)
      ) {};

    con_cache = con_cache_0_12_0;

    concerto_0_1_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "concerto";
            version = "0.1.5";
            src = fetchHex {
              pkg = "concerto";
              version = "0.1.5";
              sha256 =
                "1d8a12ab5eee72c0c07df44ef6dccab499159c96b426b2db76a7de0f6455f7af";
            };

            meta = {
              description = ''file-based routing library for elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/exstruct/concerto";
            };
          } // packageOverrides)
      ) {};

    concerto = concerto_0_1_5;

    concerto_plug_0_1_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          concerto_0_1_5,
          plug_1_3_5
        }:
          buildMix ({
            name = "concerto_plug";
            version = "0.1.3";
            src = fetchHex {
              pkg = "concerto_plug";
              version = "0.1.3";
              sha256 =
                "fc4a6d847a765e73c0b1c8f3755e5a04a6a1eeafe7e19bd4ce511af263e6bf06";
            };
            beamDeps  = [ concerto_0_1_5 plug_1_3_5 ];

            meta = {
              description = ''Plug integration for Concerto'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/exstruct/concerto_plug";
            };
          } // packageOverrides)
      ) {};

    concerto_plug = concerto_plug_0_1_3;

    concha_0_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "concha";
            version = "0.1.0";
            src = fetchHex {
              pkg = "concha";
              version = "0.1.0";
              sha256 =
                "81d6c3f77254cac8d4a75ab69351ba0d0d3931070f70268d7189d3d4237a3342";
            };

            meta = {
              description = ''A consistent hashing library.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/carlosgaldino/concha";
            };
          } // packageOverrides)
      ) {};

    concha = concha_0_1_0;

    concierge_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          comeonin_2_6_0,
          ecto_1_1_9,
          guardian_0_10_1,
          phoenix_1_2_0_rc_1
        }:
          buildMix ({
            name = "concierge";
            version = "0.0.1";
            src = fetchHex {
              pkg = "concierge";
              version = "0.0.1";
              sha256 =
                "ad677f869d21df0a8b1daa6174a407351e74c866d9d1038f85a40b4d798cf800";
            };
            beamDeps  = [
                          comeonin_2_6_0
                          ecto_1_1_9
                          guardian_0_10_1
                          phoenix_1_2_0_rc_1
                        ];

            meta = {
              description = ''Swiss army knife authentication framework for
                            Elixir projects.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/progress-engine/concierge.ex";
            };
          } // packageOverrides)
      ) {};

    concierge = concierge_0_0_1;

    conductor_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, plug_1_3_5 }:
          buildMix ({
            name = "conductor";
            version = "0.2.0";
            src = fetchHex {
              pkg = "conductor";
              version = "0.2.0";
              sha256 =
                "b5feb36a43eed6966a3387e510be1c22e2f9cb3e6a5b2df7defd73409bb07134";
            };
            beamDeps  = [ plug_1_3_5 ];

            meta = {
              description = ''Simple package for api authorization.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/amatalai/conductor";
            };
          } // packageOverrides)
      ) {};

    conductor = conductor_0_2_0;

    conduit_0_8_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          poison_2_2_0,
          timex_3_1_15,
          uuid_1_1_7
        }:
          buildMix ({
            name = "conduit";
            version = "0.8.1";
            src = fetchHex {
              pkg = "conduit";
              version = "0.8.1";
              sha256 =
                "c45b1e6b5890ccdb25d7cf3613b7b03d91ace11b9d12a93ed1784c8bf817c633";
            };
            beamDeps  = [ poison_2_2_0 timex_3_1_15 uuid_1_1_7 ];

            meta = {
              description = ''Message queue framework, with support for
                            middleware and multiple adapters.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/conduitframework/conduit";
            };
          } // packageOverrides)
      ) {};

    conduit = conduit_0_8_1;

    conduit_amqp_0_4_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          amqp_0_2_2,
          conduit_0_8_1,
          connection_1_0_4,
          poolboy_1_5_1
        }:
          buildMix ({
            name = "conduit_amqp";
            version = "0.4.1";
            src = fetchHex {
              pkg = "conduit_amqp";
              version = "0.4.1";
              sha256 =
                "46061d025cc8e15d8f55e5fe74942ab4ad4cfa206176cd42a7c131f2f1b0b3aa";
            };
            beamDeps  = [
                          amqp_0_2_2
                          conduit_0_8_1
                          connection_1_0_4
                          poolboy_1_5_1
                        ];

            meta = {
              description = ''AMQP adapter for Conduit.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/conduitframework/conduit_amqp";
            };
          } // packageOverrides)
      ) {};

    conduit_amqp = conduit_amqp_0_4_1;

    conduit_amqp_client_3_6_2 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, rabbit_common_3_5_6
        }:
          buildRebar3 ({
            name = "conduit_amqp_client";
            version = "3.6.2";
            src = fetchHex {
              pkg = "conduit_amqp_client";
              version = "3.6.2";
              sha256 =
                "ee8f1b12197ca267b134baa058d770af693fe6a1574925d329fb929438920893";
            };

            beamDeps  = [ rabbit_common_3_5_6 ];

            meta = {
              description = ''RabbitMQ AMQP Client'';
              license = stdenv.lib.licenses.free;
            };
          } // packageOverrides)
      ) {};

    conduit_amqp_client = conduit_amqp_client_3_6_2;

    conduit_appsignal_0_6_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          appsignal_1_2_2,
          conduit_0_8_1
        }:
          buildMix ({
            name = "conduit_appsignal";
            version = "0.6.0";
            src = fetchHex {
              pkg = "conduit_appsignal";
              version = "0.6.0";
              sha256 =
                "bec70be8f86dc64821acc9db434443183f1bd0b5af6f46147dca415713d3ab5f";
            };
            beamDeps  = [ appsignal_1_2_2 conduit_0_8_1 ];

            meta = {
              description = ''A plug to add Appsignal instrumentation to your
                            conduit pipelines.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/conduitframework/conduit_appsignal";
            };
          } // packageOverrides)
      ) {};

    conduit_appsignal = conduit_appsignal_0_6_0;

    conduit_rabbit_common_2_7_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "conduit_rabbit_common";
            version = "2.7.1";
            src = fetchHex {
              pkg = "conduit_rabbit_common";
              version = "2.7.1";
              sha256 =
                "aa530774308e48d869e3ff250416684578d3386ebb31b5cf187e2aff034c3a87";
            };

            meta = {
              description = ''RabbitMQ Common Libraries'';
              license = stdenv.lib.licenses.free;
            };
          } // packageOverrides)
      ) {};

    conduit_rabbit_common = conduit_rabbit_common_2_7_1;

    conejo_0_3_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          amqp_0_2_2,
          confex_2_0_1
        }:
          buildMix ({
            name = "conejo";
            version = "0.3.1";
            src = fetchHex {
              pkg = "conejo";
              version = "0.3.1";
              sha256 =
                "8c5eb62ba78268658d4d06c8f3819fc64ec332f603a71ae28cf2b6638208ed18";
            };
            beamDeps  = [ amqp_0_2_2 confex_2_0_1 ];

            meta = {
              longDescription = ''Conejo is an OTP application/library which
                                will help you to define your AMQP/RabbitMQ
                                publishers and consumers in an easier way.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mendrugory/conejo";
            };
          } // packageOverrides)
      ) {};

    conejo = conejo_0_3_1;

    conekta_1_0_6 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "conekta";
            version = "1.0.6";
            src = fetchHex {
              pkg = "conekta";
              version = "1.0.6";
              sha256 =
                "ca590d27ce960c26a3ed69d38da0fba454e630981dd6fc626c4438a76dfcd8ec";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''Elixir library for Conekta api calls'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/echavezNS/conekta-elixir.git";
            };
          } // packageOverrides)
      ) {};

    conekta = conekta_1_0_6;

    coney_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          amqp_0_2_2,
          poison_1_0_2
        }:
          buildMix ({
            name = "coney";
            version = "0.2.0";
            src = fetchHex {
              pkg = "coney";
              version = "0.2.0";
              sha256 =
                "c2049499267e0378f7f390a1db68c7596856df32d4cbb431b3d9f7d57b050c09";
            };
            beamDeps  = [ amqp_0_2_2 poison_1_0_2 ];

            meta = {
              description = ''Consumer server for RabbitMQ.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/llxff/coney";
            };
          } // packageOverrides)
      ) {};

    coney = coney_0_2_0;

    conferl_0_0_1 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex }:
          buildErlangMk ({
            name = "conferl";
            version = "0.0.1";
            src = fetchHex {
              pkg = "conferl";
              version = "0.0.1";
              sha256 =
                "402ff3b66ff98ada2b537e2d9d329f4f6f32230c39d7a3be150cf72b7525f801";
            };

            meta = {
              description = ''Auto-Conference Service in Erlang (similar to
                            Disqus)'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/inaka/conferl";
            };
          } // packageOverrides)
      ) {};

    conferl = conferl_0_0_1;

    confex_1_5_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "confex";
            version = "1.5.0";
            src = fetchHex {
              pkg = "confex";
              version = "1.5.0";
              sha256 =
                "1919eae7c7ab7eb8a533059b7a6b16447ec58b43062c73bf4bd0dc8204ea1019";
            };

            meta = {
              longDescription = ''Helper module that provides a nice way to
                                read configuration at runtime from environment
                                variables or via adapter-supported interface.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/Nebo15/confex";
            };
          } // packageOverrides)
      ) {};

    confex_2_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "confex";
            version = "2.0.0";
            src = fetchHex {
              pkg = "confex";
              version = "2.0.0";
              sha256 =
                "f8ab0291831fc53af59ea893f0b58533162be200c8fb66e822252fe080bd598e";
            };

            meta = {
              longDescription = ''Helper module that provides a nice way to
                                read configuration at runtime from environment
                                variables or via adapter-supported interface.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/Nebo15/confex";
            };
          } // packageOverrides)
      ) {};

    confex_2_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "confex";
            version = "2.0.1";
            src = fetchHex {
              pkg = "confex";
              version = "2.0.1";
              sha256 =
                "6ba4d880d3a7f4eb68553b8cd197bd2d9dcdb82ceaa8d1d515109e5c927dfe47";
            };

            meta = {
              longDescription = ''Helper module that provides a nice way to
                                read configuration at runtime from environment
                                variables or via adapter-supported interface.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/Nebo15/confex";
            };
          } // packageOverrides)
      ) {};

    confex = confex_2_0_1;

    config_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "config";
            version = "0.1.0";
            src = fetchHex {
              pkg = "config";
              version = "0.1.0";
              sha256 =
                "7ef9d010ee924763035dabe401c20306c152cf3c812d60fefb3e800a9e9d66c8";
            };

            meta = {
              longDescription = ''Provides convenient way to load application
                                configuration from config files and environment
                                variables.'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    config = config_0_1_0;

    config_ext_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "config_ext";
            version = "0.3.0";
            src = fetchHex {
              pkg = "config_ext";
              version = "0.3.0";
              sha256 =
                "0427a67d0f88191a3254f223318bf18397e37d3e9df1c6a6844615f67494729d";
            };

            meta = {
              longDescription = ''A bunch of common elixir config helpers to
                                load config from environment variables or by
                                executing a function.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/driv3r/config_ext";
            };
          } // packageOverrides)
      ) {};

    config_ext = config_ext_0_3_0;

    config_values_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "config_values";
            version = "1.0.0";
            src = fetchHex {
              pkg = "config_values";
              version = "1.0.0";
              sha256 =
                "cdbd33fd68cf7fa4fe88dfc1f73e5d26f69d86132650dfba9a636dc75f6cb26c";
            };

            meta = {
              description = ''Interpolated configuration values'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hassox/config_values";
            };
          } // packageOverrides)
      ) {};

    config_values = config_values_1_0_0;

    configparser_ex_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "configparser_ex";
            version = "0.2.1";
            src = fetchHex {
              pkg = "configparser_ex";
              version = "0.2.1";
              sha256 =
                "3319861498f5e711058b1b3b54f88275af85e1bf9493bd0b904393d5971f117e";
            };

            meta = {
              description = ''A module that parses INI-like files. Not unlike
                            the Python configparser package.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/easco/configparser_ex";
            };
          } // packageOverrides)
      ) {};

    configparser_ex_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "configparser_ex";
            version = "1.0.0";
            src = fetchHex {
              pkg = "configparser_ex";
              version = "1.0.0";
              sha256 =
                "4ddda70210be22a252703f59e09a9b3fad60d6617367e19580e02547dcf216c0";
            };

            meta = {
              description = ''A module that parses INI-like files. Not unlike
                            the Python configparser package.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/easco/configparser_ex";
            };
          } // packageOverrides)
      ) {};

    configparser_ex = configparser_ex_1_0_0;

    configure_it_out_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "configure_it_out";
            version = "0.3.0";
            src = fetchHex {
              pkg = "configure_it_out";
              version = "0.3.0";
              sha256 =
                "90243e0534074416570efa639313dbe1a553db039d8fdbc715afe12283b4cdf5";
            };

            meta = {
              longDescription = ''A collection of helpful tools for helping you
                                understand your Elixir application`s
                                configuration settings.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/amorphid/configure_it_out";
            };
          } // packageOverrides)
      ) {};

    configure_it_out = configure_it_out_0_3_0;

    conform_0_13_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "conform";
            version = "0.13.0";
            src = fetchHex {
              pkg = "conform";
              version = "0.13.0";
              sha256 =
                "72bc5f0e55d15f8387892b664c30e969e3584e8da15d6b5d45caac4d84ee1165";
            };

            meta = {
              description = ''Easy, powerful, and extendable configuration
                            tooling for releases.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bitwalker/conform";
            };
          } // packageOverrides)
      ) {};

    conform_0_16_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, neotoma_1_7_3 }:
          buildMix ({
            name = "conform";
            version = "0.16.0";
            src = fetchHex {
              pkg = "conform";
              version = "0.16.0";
              sha256 =
                "4d510e428fe05d7b505cefca66359bb4700aa7b68189624f5ba4cd1c22b5bf1a";
            };
            beamDeps  = [ neotoma_1_7_3 ];

            meta = {
              description = ''Easy, powerful, and extendable configuration
                            tooling for releases.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bitwalker/conform";
            };
          } // packageOverrides)
      ) {};

    conform_1_0_0_rc8 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, neotoma_1_7_3 }:
          buildMix ({
            name = "conform";
            version = "1.0.0-rc8";
            src = fetchHex {
              pkg = "conform";
              version = "1.0.0-rc8";
              sha256 =
                "0177ab7eaf0f66372df9aadd1d4e198e205b76f561be0e26f6a52ca6adcadf80";
            };
            beamDeps  = [ neotoma_1_7_3 ];

            meta = {
              description = ''Easy, powerful, and extendable configuration
                            tooling for releases.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bitwalker/conform";
            };
          } // packageOverrides)
      ) {};

    conform_2_3_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, neotoma_1_7_3 }:
          buildMix ({
            name = "conform";
            version = "2.3.3";
            src = fetchHex {
              pkg = "conform";
              version = "2.3.3";
              sha256 =
                "58c0ad6d168e68517f16365c0b10eb46685101ed7137aa76239101f51c9c8679";
            };
            beamDeps  = [ neotoma_1_7_3 ];

            meta = {
              description = ''Easy, powerful, and extendable configuration
                            tooling for releases.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bitwalker/conform";
            };
          } // packageOverrides)
      ) {};

    conform = conform_2_3_3;

    conform_exrm_1_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          conform_2_3_3,
          exrm_1_0_8
        }:
          buildMix ({
            name = "conform_exrm";
            version = "1.0.0";
            src = fetchHex {
              pkg = "conform_exrm";
              version = "1.0.0";
              sha256 =
                "acf8eb831b0f8573a92694da4d3b513f551b8d854a8c4670c560379ae5c0f2fd";
            };
            beamDeps  = [ conform_2_3_3 exrm_1_0_8 ];

            meta = {
              description = ''Conform plugin for ExRM'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bitwalker/conform_exrm";
            };
          } // packageOverrides)
      ) {};

    conform_exrm = conform_exrm_1_0_0;

    conjunction_1_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "conjunction";
            version = "1.0.2";
            src = fetchHex {
              pkg = "conjunction";
              version = "1.0.2";
              sha256 =
                "1314060876aa584b62a8f985e71c8f22c1e5f6d8d4250b26451c4fb79c2b1f1f";
            };

            meta = {
              description = ''Combine a list of strings with a conjunction'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dustinspecker/conjunction";
            };
          } // packageOverrides)
      ) {};

    conjunction = conjunction_1_0_2;

    connection_1_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "connection";
            version = "1.0.4";
            src = fetchHex {
              pkg = "connection";
              version = "1.0.4";
              sha256 =
                "4a0850c9be22a43af9920a71ab17c051f5f7d45c209e40269a1938832510e4d9";
            };

            meta = {
              description = ''Connection behaviour for connection processes'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/fishcakez/connection";
            };
          } // packageOverrides)
      ) {};

    connection = connection_1_0_4;

    conqueuer_0_5_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          inflex_1_8_1,
          poolboy_1_5_1
        }:
          buildMix ({
            name = "conqueuer";
            version = "0.5.1";
            src = fetchHex {
              pkg = "conqueuer";
              version = "0.5.1";
              sha256 =
                "7370e2a0201f73ced6b202877b4dcb6872e1b6bbb0c024b1edee3a058dd653ab";
            };
            beamDeps  = [ inflex_1_8_1 poolboy_1_5_1 ];

            meta = {
              description = ''An Elixir in memory work queue.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/midas/conqueuer";
            };
          } // packageOverrides)
      ) {};

    conqueuer = conqueuer_0_5_1;

    console_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "console";
            version = "0.0.1";
            src = fetchHex {
              pkg = "console";
              version = "0.0.1";
              sha256 =
                "55e0635d7fdde35a04694e646a01b161c142b4d814a97ed8a373fd42af35c955";
            };

            meta = {

              homepage = "https://github.com/matteosister/console";
            };
          } // packageOverrides)
      ) {};

    console = console_0_0_1;

    console_tree_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "console_tree";
            version = "0.0.1";
            src = fetchHex {
              pkg = "console_tree";
              version = "0.0.1";
              sha256 =
                "c7dea20c14fd8bc6697a68f2917def38d20c772eb4b5715b18197672e7ddc0eb";
            };

            meta = {
              longDescription = ''A simple library to print a text
                                representation of a tree structure, intended for
                                use in a terminal environment.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ciaran/console_tree";
            };
          } // packageOverrides)
      ) {};

    console_tree = console_tree_0_0_1;

    consolex_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          exjsx_3_2_1
        }:
          buildMix ({
            name = "consolex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "consolex";
              version = "0.1.0";
              sha256 =
                "d258becb7d14295e4df337ca1f5466de55c54d0be2761b9a93003814427c0ec1";
            };
            beamDeps  = [ cowboy_1_1_2 exjsx_3_2_1 ];

            meta = {
              description = ''An IEx web console'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sivsushruth/consolex";
            };
          } // packageOverrides)
      ) {};

    consolex = consolex_0_1_0;

    const_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "const";
            version = "0.1.0";
            src = fetchHex {
              pkg = "const";
              version = "0.1.0";
              sha256 =
                "a33d67c278b83b1f143ed6af33fc1824789bb0519184bcf1d76795ed536e202f";
            };

            meta = {
              description = ''A simple helper to define constants'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/bitgamma/const";
            };
          } // packageOverrides)
      ) {};

    const = const_0_1_0;

    constants_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "constants";
            version = "0.1.0";
            src = fetchHex {
              pkg = "constants";
              version = "0.1.0";
              sha256 =
                "f2dc3e64173259411f7e91f598ea1c3dc8e7805da642715a238cccee84b1d7b4";
            };

            meta = {
              description = ''A library to help your easily define
                            constants.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/vfsoraki/constants";
            };
          } // packageOverrides)
      ) {};

    constants = constants_0_1_0;

    consul_1_0_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exjsx_3_2_1,
          httpoison_0_6_2
        }:
          buildMix ({
            name = "consul";
            version = "1.0.3";
            src = fetchHex {
              pkg = "consul";
              version = "1.0.3";
              sha256 =
                "80d5836e4cbe686bff535634e719e0892455b03e77bcde149fb221c80fdb1a52";
            };
            beamDeps  = [ exjsx_3_2_1 httpoison_0_6_2 ];

            meta = {
              description = ''An Elixir client for Consul`s HTTP API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/undeadlabs/consul-ex";
            };
          } // packageOverrides)
      ) {};

    consul_1_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exjsx_3_2_1,
          httpoison_0_11_2
        }:
          buildMix ({
            name = "consul";
            version = "1.1.0";
            src = fetchHex {
              pkg = "consul";
              version = "1.1.0";
              sha256 =
                "2ad4ad12329a78da4c247c835f9c64739bd1bb9ad1921929d9dae71bd062d574";
            };
            beamDeps  = [ exjsx_3_2_1 httpoison_0_11_2 ];

            meta = {
              description = ''An Elixir client for Consul`s HTTP API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/undeadlabs/consul-ex";
            };
          } // packageOverrides)
      ) {};

    consul = consul_1_1_0;

    consul_client_0_1_6 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_10_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "consul_client";
            version = "0.1.6";
            src = fetchHex {
              pkg = "consul_client";
              version = "0.1.6";
              sha256 =
                "025d1356a2209c5c03d53dd77f7efda197c29ce18b09a74ae69e9304b6db7cad";
            };
            beamDeps  = [ httpoison_0_10_0 poison_3_1_0 ];

            meta = {
              description = ''100% API Complete Consul Client written in
                            Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/toady00/consul";
            };
          } // packageOverrides)
      ) {};

    consul_client = consul_client_0_1_6;

    containers_0_6_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "containers";
            version = "0.6.0";
            src = fetchHex {
              pkg = "containers";
              version = "0.6.0";
              sha256 =
                "ffe5063d124276dd9b32dacf6dd277c6903f4ce229ae1f337d5e963e93e2117e";
            };

            meta = {
              longDescription = ''Functional container like data structures for
                                better runtime safety and polymorphism'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mattludwigs/containers";
            };
          } // packageOverrides)
      ) {};

    containers = containers_0_6_0;

    contentful_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "contentful";
            version = "0.1.1";
            src = fetchHex {
              pkg = "contentful";
              version = "0.1.1";
              sha256 =
                "78301adfc4e0f8fbc3531e70c95ddf1353f5dfc57d19b6c5b9f4d25d0df8e49e";
            };
            beamDeps  = [ httpoison_0_11_2 poison_2_2_0 ];

            meta = {
              description = ''Contentful Content Delivery API SDK'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/contentful-labs/contentful.ex";
            };
          } // packageOverrides)
      ) {};

    contentful = contentful_0_1_1;

    context_0_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "context";
            version = "0.1.0";
            src = fetchHex {
              pkg = "context";
              version = "0.1.0";
              sha256 =
                "83ae89cc655107eaf45c87e45d62e2c4a3232729e313e4df4107e5589397aa89";
            };

            meta = {
              description = ''Erlang Standard Context'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kivra/context";
            };
          } // packageOverrides)
      ) {};

    context = context_0_1_0;

    contextEX_0_3_6 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "contextEX";
            version = "0.3.6";
            src = fetchHex {
              pkg = "contextEX";
              version = "0.3.6";
              sha256 =
                "5b3e2182a3ccdb7258d2b877767f37792520c2e0ad2f40f4238015001cbc94cb";
            };

            meta = {
              description = ''Context-oriented Programming with Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mi-nakano/contextEX";
            };
          } // packageOverrides)
      ) {};

    contextEX = contextEX_0_3_6;

    contracts_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "contracts";
            version = "0.1.0";
            src = fetchHex {
              pkg = "contracts";
              version = "0.1.0";
              sha256 =
                "057f06b938a8b8e9028a2dd4e8c4071ec342a2cb624071fa5d0b198734924806";
            };

            meta = {
              description = ''Design by Contracts for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ruby2elixir/elixir-contracts";
            };
          } // packageOverrides)
      ) {};

    contracts = contracts_0_1_0;

    control_0_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "control";
            version = "0.0.4";
            src = fetchHex {
              pkg = "control";
              version = "0.0.4";
              sha256 =
                "c806da1d82614a27f876aea5d222edb1cdb52d883553ada03f1ff79c09c024d9";
            };

            meta = {
              description = ''An exploratory look into functors, applicatives,
                            and monads for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/slogsdon/elixir-control";
            };
          } // packageOverrides)
      ) {};

    control = control_0_0_4;

    convertat_1_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "convertat";
            version = "1.1.0";
            src = fetchHex {
              pkg = "convertat";
              version = "1.1.0";
              sha256 =
                "603229c43df6769f2166c78c5c3f31316390bf6e19fa8e15f02026170ab51a79";
            };

            meta = {
              description = ''Provides functions for converting from and to
                            arbitrary bases. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/whatyouhide/convertat";
            };
          } // packageOverrides)
      ) {};

    convertat = convertat_1_1_0;

    convoy_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, stemmer_1_0_1 }:
          buildMix ({
            name = "convoy";
            version = "0.1.0";
            src = fetchHex {
              pkg = "convoy";
              version = "0.1.0";
              sha256 =
                "b045d6279cc1f6254e2a1dbdd2d4c5036533b6df723b44238c245bea9076e03f";
            };
            beamDeps  = [ stemmer_1_0_1 ];

            meta = {
              longDescription = ''Convoy is bot engine. You can operate with
                                rules like match, contains, starts_with, stem,
                                catch_all. Re-define Convoy.Rules.init_rules to
                                create your own rule set. See examples in the
                                tests.'';
              license = with stdenv.lib.licenses; [ free free ];
            };
          } // packageOverrides)
      ) {};

    convoy = convoy_0_1_0;

    cookie_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "cookie";
            version = "0.1.0";
            src = fetchHex {
              pkg = "cookie";
              version = "0.1.0";
              sha256 =
                "82cf5ef656c707f4811137defe6b0a9303a36c837bc2bd97fb05a52c046ee2eb";
            };

            meta = {
              description = ''HTTP state management with cookies.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/CrowdHailer/raxx/tree/master/cookie";
            };
          } // packageOverrides)
      ) {};

    cookie = cookie_0_1_0;

    cookie_jar_0_2_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          httpotion_3_0_2
        }:
          buildMix ({
            name = "cookie_jar";
            version = "0.2.4";
            src = fetchHex {
              pkg = "cookie_jar";
              version = "0.2.4";
              sha256 =
                "ecdb5b6b1e3b4fb836bd94e9b0f58c34d7e1132cf70042ed099cd950ab38da55";
            };
            beamDeps  = [ httpoison_0_11_2 httpotion_3_0_2 ];

            meta = {
              description = ''CookieJar stores your cookies and applies them to
                            future requests'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/princemaple/cookie_jar";
            };
          } // packageOverrides)
      ) {};

    cookie_jar = cookie_jar_0_2_4;

    cookie_store_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "cookie_store";
            version = "0.1.0";
            src = fetchHex {
              pkg = "cookie_store";
              version = "0.1.0";
              sha256 =
                "ff4cd2315bc9641602ffc931ab9450add3fd8d3086526f0739bfb6b5f221ac3c";
            };

            meta = {
              description = ''Library for parsing of HTTP cookies and
                            persistent storage'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/arjan/cookie_store";
            };
          } // packageOverrides)
      ) {};

    cookie_store = cookie_store_0_1_0;

    coordinate_transformer_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "coordinate_transformer";
            version = "0.0.1";
            src = fetchHex {
              pkg = "coordinate_transformer";
              version = "0.0.1";
              sha256 =
                "7759821a70c34e4e138da807c00a1de6ba8917addb457a27ceb32c666034008e";
            };

            meta = {
              longDescription = ''A small library of composable to manipulate
                                3-D cartesian coordinates using transformation
                                matrices and matrix multiplication.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ckeyes88/coordinate_transformer";
            };
          } // packageOverrides)
      ) {};

    coordinate_transformer = coordinate_transformer_0_0_1;

    core_0_14_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "core";
            version = "0.14.1";
            src = fetchHex {
              pkg = "core";
              version = "0.14.1";
              sha256 =
                "142c14544ce688b4527abeadfb3bf249678caaec1a3f3d11cb4927695f19ff33";
            };

            meta = {
              description = ''Library for selective receive OTP processes'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/fishcakez/core";
            };
          } // packageOverrides)
      ) {};

    core = core_0_14_1;

    core_data_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, floki_0_9_0 }:
          buildMix ({
            name = "core_data";
            version = "0.1.0";
            src = fetchHex {
              pkg = "core_data";
              version = "0.1.0";
              sha256 =
                "09b308a42f0697053c68f253e7f687c0f6b5f96bb1b114a7b1852c5b6804122e";
            };
            beamDeps  = [ floki_0_9_0 ];

            meta = {
              description = ''iOS Core Data parser'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/evolet-project/core_data";
            };
          } // packageOverrides)
      ) {};

    core_data = core_data_0_1_0;

    corenlp_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "corenlp";
            version = "0.1.0";
            src = fetchHex {
              pkg = "corenlp";
              version = "0.1.0";
              sha256 =
                "d238cc1f7a7ac6176506f61a10953909189b4af926cd12b6dfe3e9e9147fc08b";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              longDescription = ''This package provides a client interface to a
                                Stanford CoreNLP Server for natural language
                                processing (NLP) of textual content.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/arpieb/corenlp";
            };
          } // packageOverrides)
      ) {};

    corenlp = corenlp_0_1_0;

    cors_plug_1_1_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_0_4,
          plug_1_3_5
        }:
          buildMix ({
            name = "cors_plug";
            version = "1.1.4";
            src = fetchHex {
              pkg = "cors_plug";
              version = "1.1.4";
              sha256 =
                "0c58cb70deb7c6bd37a83c0788cfdddcedc69c2aff1acd8f8748de29e1048b6e";
            };
            beamDeps  = [ cowboy_1_0_4 plug_1_3_5 ];

            meta = {
              longDescription = ''An elixir plug that adds CORS headers to
                                requests and responds to preflight requests
                                (OPTIONS)'';
              license = stdenv.lib.licenses.asl20;
              homepage = "http://github.com/mschae/cors_plug";
            };
          } // packageOverrides)
      ) {};

    cors_plug_1_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, plug_1_3_5 }:
          buildMix ({
            name = "cors_plug";
            version = "1.3.0";
            src = fetchHex {
              pkg = "cors_plug";
              version = "1.3.0";
              sha256 =
                "59a4c6cff550b0e1af3b8f137c6d4fc3efd27bd01a427e7b9ee550104e7d323f";
            };
            beamDeps  = [ plug_1_3_5 ];

            meta = {
              longDescription = ''An elixir plug that adds CORS headers to
                                requests and responds to preflight requests
                                (OPTIONS)'';
              license = stdenv.lib.licenses.asl20;
              homepage = "http://github.com/mschae/cors_plug";
            };
          } // packageOverrides)
      ) {};

    cors_plug = cors_plug_1_3_0;

    corsica_1_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          plug_1_3_5
        }:
          buildMix ({
            name = "corsica";
            version = "1.0.0";
            src = fetchHex {
              pkg = "corsica";
              version = "1.0.0";
              sha256 =
                "c7035ba0e21ffff5b6489a0533b932c7274f23ca2a5d94432c4bae64df98d976";
            };
            beamDeps  = [ cowboy_1_1_2 plug_1_3_5 ];

            meta = {
              description = ''Plug-based swiss-army knife for CORS requests.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/whatyouhide/corsica";
            };
          } // packageOverrides)
      ) {};

    corsica = corsica_1_0_0;

    couch_factory_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "couch_factory";
            version = "0.2.0";
            src = fetchHex {
              pkg = "couch_factory";
              version = "0.2.0";
              sha256 =
                "eb685417e43670d5cea2e928ae2176bd6696e2fad69ca439428591e8cff6523c";
            };

            meta = {
              description = ''Factory Girl implementation with CouchDb
                            persistence.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/javierg/couch_factory";
            };
          } // packageOverrides)
      ) {};

    couch_factory = couch_factory_0_2_0;

    couchbeam_1_4_2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "couchbeam";
            version = "1.4.2";
            src = fetchHex {
              pkg = "couchbeam";
              version = "1.4.2";
              sha256 =
                "6690172144f0eb8617d7ca3d7a918ab23f4e7ca85804375e1aa652280ba48c21";
            };

            meta = {
              description = ''Erlang CouchDB client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/benoitc/couchbeam";
            };
          } // packageOverrides)
      ) {};

    couchbeam = couchbeam_1_4_2;

    couchbeam_amuino_1_4_3_amuino_5 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          hackney_1_6_5,
          jsx_2_8_0
        }:
          buildRebar3 ({
            name = "couchbeam_amuino";
            version = "1.4.3-amuino.5";
            src = fetchHex {
              pkg = "couchbeam_amuino";
              version = "1.4.3-amuino.5";
              sha256 =
                "d08c505ff06acc6e26e5bd243fa259ebe1583d7e5edf3952591731fc8e8c8173";
            };

            beamDeps  = [ hackney_1_6_5 jsx_2_8_0 ];

            meta = {
              description = ''Erlang CouchDB client + fixes'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/amuino/couchbeam";
            };
          } // packageOverrides)
      ) {};

    couchbeam_amuino = couchbeam_amuino_1_4_3_amuino_5;

    couchdb_adapter_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_8_6,
          oauther_1_1_0,
          poison_3_1_0,
          tesla_0_7_1
        }:
          buildMix ({
            name = "couchdb_adapter";
            version = "0.1.0";
            src = fetchHex {
              pkg = "couchdb_adapter";
              version = "0.1.0";
              sha256 =
                "a7a733ed897c373bed196afcd54337c08bac297494c26ef49e2b85a3e5fb7633";
            };
            beamDeps  = [
                          hackney_1_8_6 oauther_1_1_0 poison_3_1_0 tesla_0_7_1
                        ];

            meta = {
              description = ''Not usable yet WIP! CouchDB RESP API client for
                            Elixir and Phoenix.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/sbezugliy/couchdb_adapter";
            };
          } // packageOverrides)
      ) {};

    couchdb_adapter = couchdb_adapter_0_1_0;

    couchdb_auth_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_8_6,
          oauther_1_1_0,
          poison_3_1_0,
          tesla_0_7_1
        }:
          buildMix ({
            name = "couchdb_auth";
            version = "0.1.0";
            src = fetchHex {
              pkg = "couchdb_auth";
              version = "0.1.0";
              sha256 =
                "5326c5129e7040fc009cfa631f4d145142d32fd9d3959f5dae5c164f173625ef";
            };
            beamDeps  = [
                          hackney_1_8_6 oauther_1_1_0 poison_3_1_0 tesla_0_7_1
                        ];

            meta = {
              description = ''CouchDB HTTP authorization package'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/sbezugliy/couchdb_auth";
            };
          } // packageOverrides)
      ) {};

    couchdb_auth = couchdb_auth_0_1_0;

    couchdb_client_0_2_5 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          earmark_1_2_2,
          ex_doc_0_16_1,
          httpoison_0_7_5,
          poison_1_5_2
        }:
          buildMix ({
            name = "couchdb_client";
            version = "0.2.5";
            src = fetchHex {
              pkg = "couchdb_client";
              version = "0.2.5";
              sha256 =
                "243c2fde196762dd6b664d3a91d111ac70336b22d91ca9aafc7c778e61ccb496";
            };
            beamDeps  = [
                          earmark_1_2_2
                          ex_doc_0_16_1
                          httpoison_0_7_5
                          poison_1_5_2
                        ];

            meta = {
              description = ''A partial yet functional CouchDB client, with
                            attachment support.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gutschilla/elixir-couchdb-client";
            };
          } // packageOverrides)
      ) {};

    couchdb_client = couchdb_client_0_2_5;

    couchdb_connector_0_5_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_5_0,
          poison_1_0_2
        }:
          buildMix ({
            name = "couchdb_connector";
            version = "0.5.0";
            src = fetchHex {
              pkg = "couchdb_connector";
              version = "0.5.0";
              sha256 =
                "b8d3fdf7ca9f74a44a083143c3ca8f8bc13b0e10904f597af4c1421d79d03b7c";
            };
            beamDeps  = [ httpoison_0_5_0 poison_1_0_2 ];

            meta = {
              description = ''A connector for CouchDB with support for views
                            and authentication.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/locolupo/couchdb_connector";
            };
          } // packageOverrides)
      ) {};

    couchdb_connector = couchdb_connector_0_5_0;

    count_buffer_0_1_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, pool_ring_0_1_5 }:
          buildMix ({
            name = "count_buffer";
            version = "0.1.5";
            src = fetchHex {
              pkg = "count_buffer";
              version = "0.1.5";
              sha256 =
                "6e78dc0458dac8dae9d41d7857c7185b3164cecd9992a1407265ebfa3455544e";
            };
            beamDeps  = [ pool_ring_0_1_5 ];

            meta = {
              description = ''buffer a large set of counters and flush
                            periodically'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/camshaft/count_buffer";
            };
          } // packageOverrides)
      ) {};

    count_buffer = count_buffer_0_1_5;

    countries_1_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, yamerl_0_4_0 }:
          buildMix ({
            name = "countries";
            version = "1.3.0";
            src = fetchHex {
              pkg = "countries";
              version = "1.3.0";
              sha256 =
                "a837eb0573f23b7721827a9cd0085172bf871d373cf8036bab8f8adb4bbfd239";
            };
            beamDeps  = [ yamerl_0_4_0 ];

            meta = {
              longDescription = ''Countries is a collection of all sorts of
                                useful information for every country in the [ISO
                                3166](https://de.wikipedia.org/wiki/ISO_3166)
                                standard.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/SebastianSzturo/countries";
            };
          } // packageOverrides)
      ) {};

    countries = countries_1_3_0;

    countries_erlang_0_5_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "countries_erlang";
            version = "0.5.0";
            src = fetchHex {
              pkg = "countries_erlang";
              version = "0.5.0";
              sha256 =
                "c892b65b7f0e1d353a8afcb51cd4fd1a35424bcda5ef54bfcb8a2d8bc2be66b5";
            };

            meta = {
              longDescription = ''Fast case-insensitive validation and
                                conversion between ISO Alpha-2, Alpha-3, and
                                Numeric Country Codes.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/amokhtar/countries_erlang";
            };
          } // packageOverrides)
      ) {};

    countries_erlang = countries_erlang_0_5_0;

    countriex_0_4_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "countriex";
            version = "0.4.1";
            src = fetchHex {
              pkg = "countriex";
              version = "0.4.1";
              sha256 =
                "80b2e18b2e901224758868dd768f0eecc0d3a1db09a2d7364f43556990a239cb";
            };

            meta = {
              longDescription = ''All sorts of useful information about every
                                country. A pure elixir port of the ruby
                                Countries gem'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/navinpeiris/countriex";
            };
          } // packageOverrides)
      ) {};

    countriex = countriex_0_4_1;

    courier_0_0_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          gen_smtp_0_9_0,
          mail_0_0_4
        }:
          buildMix ({
            name = "courier";
            version = "0.0.3";
            src = fetchHex {
              pkg = "courier";
              version = "0.0.3";
              sha256 =
                "8c8c560da7011c8846ed5ee60af867124ff043a7d37773156b6d8a08390b73fc";
            };
            beamDeps  = [ gen_smtp_0_9_0 mail_0_0_4 ];

            meta = {
              description = ''Adapter based email delivery'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/DockYard/courier";
            };
          } // packageOverrides)
      ) {};

    courier_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          gen_smtp_0_11_0,
          mail_0_1_1,
          poolboy_1_5_1
        }:
          buildMix ({
            name = "courier";
            version = "0.1.0";
            src = fetchHex {
              pkg = "courier";
              version = "0.1.0";
              sha256 =
                "e2cd9174da5676da0e46388d06b6e18f3eaa24465b152c36cf53c48cd295a3ec";
            };
            beamDeps  = [ gen_smtp_0_11_0 mail_0_1_1 poolboy_1_5_1 ];

            meta = {
              description = ''Adapter based email delivery'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/DockYard/courier";
            };
          } // packageOverrides)
      ) {};

    courier = courier_0_1_0;

    courier_web_0_0_8 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          courier_0_0_3,
          ja_serializer_0_12_0,
          plug_1_3_5,
          poison_3_1_0,
          uuid_1_1_7
        }:
          buildMix ({
            name = "courier_web";
            version = "0.0.8";
            src = fetchHex {
              pkg = "courier_web";
              version = "0.0.8";
              sha256 =
                "c4161f218d487901bc1e63ce1840c73de34d84d8c53eda12f09cea4a8fa2758b";
            };
            beamDeps  = [
                          courier_0_0_3
                          ja_serializer_0_12_0
                          plug_1_3_5
                          poison_3_1_0
                          uuid_1_1_7
                        ];

            meta = {
              description = ''Web client adapter for Courier'';

            };
          } // packageOverrides)
      ) {};

    courier_web = courier_web_0_0_8;

    cover_my_relief_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_10_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "cover_my_relief";
            version = "0.1.1";
            src = fetchHex {
              pkg = "cover_my_relief";
              version = "0.1.1";
              sha256 =
                "e835bd56de202c6a71d4b42d2ddb6edcab142fb484bec6a11100459cdc37e813";
            };
            beamDeps  = [ httpoison_0_10_0 poison_3_1_0 ];

            meta = {
              description = ''Cover My Relief is an Elixir client to the
                            CoverMyMeds API.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/justinrolston/cover_my_relief";
            };
          } // packageOverrides)
      ) {};

    cover_my_relief = cover_my_relief_0_1_1;

    coveralls_1_4_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "coveralls";
            version = "1.4.0";
            src = fetchHex {
              pkg = "coveralls";
              version = "1.4.0";
              sha256 =
                "3122aad48e24adac5fb03a971aa5cb7ad2737f4ccbacc3e708c668a804854f5c";
            };

            meta = {
              description = ''Coveralls for Erlang'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/markusn/coveralls-erl";
            };
          } // packageOverrides)
      ) {};

    coveralls = coveralls_1_4_0;

    coverex_1_4_13 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_8_6,
          poison_1_0_2
        }:
          buildMix ({
            name = "coverex";
            version = "1.4.13";
            src = fetchHex {
              pkg = "coverex";
              version = "1.4.13";
              sha256 =
                "6e66a00b3a5cc33062cc1bc7c762a74d98ff5207e0c6390529e3794dc497d5eb";
            };
            beamDeps  = [ hackney_1_8_6 poison_1_0_2 ];

            meta = {
              longDescription = ''Coverex is an Elixir Coverage tool used by
                                mix. It provides tables with overviews of module
                                and function coverage data, includings links to
                                annotated source code files and supports
                                coveralls.io.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/alfert/coverex";
            };
          } // packageOverrides)
      ) {};

    coverex = coverex_1_4_13;

    covfefe_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "covfefe";
            version = "0.0.1";
            src = fetchHex {
              pkg = "covfefe";
              version = "0.0.1";
              sha256 =
                "f1cb489c0c2ac5f22e3a17030270df424966379697618d4536c550d826f4af4c";
            };

            meta = {
              description = ''fault tolerant covfefe elixir port.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/m13m/covfefe";
            };
          } // packageOverrides)
      ) {};

    covfefe = covfefe_0_0_1;

    cowbell_1_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "cowbell";
            version = "1.0.0";
            src = fetchHex {
              pkg = "cowbell";
              version = "1.0.0";
              sha256 =
                "3cf21266a8a80c607f332953db3cf3bb5997537f5ce2929a502242f850d7e455";
            };

            meta = {
              description = ''A node connection manager.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ostinelli/cowbell";
            };
          } // packageOverrides)
      ) {};

    cowbell = cowbell_1_0_0;

    cowboy_1_0_2 = callPackage
      (
        {
          buildErlangMk,
          packageOverrides ? {},
          fetchHex,
          cowlib_1_0_2,
          ranch_1_4_0
        }:
          buildErlangMk ({
            name = "cowboy";
            version = "1.0.2";
            src = fetchHex {
              pkg = "cowboy";
              version = "1.0.2";
              sha256 =
                "aeba3815a73985ce872cb480814771c15b8dac15894fb9ee4c135800ae883fd3";
            };
            beamDeps  = [ cowlib_1_0_2 ranch_1_4_0 ];

            meta = {
              description = ''Small, fast, modular HTTP server.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/ninenines/cowboy";
            };
          } // packageOverrides)
      ) {};

    cowboy_1_0_4 = callPackage
      (
        {
          buildErlangMk,
          packageOverrides ? {},
          fetchHex,
          cowlib_1_0_2,
          ranch_1_4_0
        }:
          buildErlangMk ({
            name = "cowboy";
            version = "1.0.4";
            src = fetchHex {
              pkg = "cowboy";
              version = "1.0.4";
              sha256 =
                "6a0edee96885fae3a8dd0ac1f333538a42e807db638a9453064ccfdaa6b9fdac";
            };
            beamDeps  = [ cowlib_1_0_2 ranch_1_4_0 ];

            meta = {
              description = ''Small, fast, modular HTTP server.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/ninenines/cowboy";
            };
          } // packageOverrides)
      ) {};

    cowboy_1_1_2 = callPackage
      (
        {
          buildErlangMk,
          packageOverrides ? {},
          fetchHex,
          cowlib_1_0_2,
          ranch_1_3_2
        }:
          buildErlangMk ({
            name = "cowboy";
            version = "1.1.2";
            src = fetchHex {
              pkg = "cowboy";
              version = "1.1.2";
              sha256 =
                "f4763bbe08233eceed6f24bc4fcc8d71c17cfeafa6439157c57349aa1bb4f17c";
            };
            beamDeps  = [ cowlib_1_0_2 ranch_1_3_2 ];

            meta = {
              description = ''Small, fast, modular HTTP server.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/ninenines/cowboy";
            };
          } // packageOverrides)
      ) {};

    cowboy = cowboy_1_1_2;

    cowboy_oauth_0_2_14 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_0_4,
          erlydtl2_0_11_1,
          jsx_1_4_5,
          jsxd_0_1_10,
          lager_2_1_1,
          libsnarl_0_3_40,
          oauth2_erlang_0_6_1
        }:
          buildRebar3 ({
            name = "cowboy_oauth";
            version = "0.2.14";
            src = fetchHex {
              pkg = "cowboy_oauth";
              version = "0.2.14";
              sha256 =
                "fc6b3da2a53d8527a08f6427745c85eb3b2da1e90de1a3fe290d4193ac4e5b09";
            };

            beamDeps  = [
                          cowboy_1_0_4
                          erlydtl2_0_11_1
                          jsx_1_4_5
                          jsxd_0_1_10
                          lager_2_1_1
                          libsnarl_0_3_40
                          oauth2_erlang_0_6_1
                        ];

            meta = {
              description = ''OAuth2 endpoints for cowboy and snarl.'';
              license = stdenv.lib.licenses.cddl;
              homepage = "https://github.com/project-fifo/cowboy_oauth";
            };
          } // packageOverrides)
      ) {};

    cowboy_oauth = cowboy_oauth_0_2_14;

    cowboy_routes_tree_0_2_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "cowboy_routes_tree";
            version = "0.2.0";
            src = fetchHex {
              pkg = "cowboy_routes_tree";
              version = "0.2.0";
              sha256 =
                "2fc220d1cbe298e62eeb33d85f2cce145461aa9a40c8a3e30113aae0917f7486";
            };

            meta = {
              description = ''Organize cowboy routes in trees.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/deadtrickster/cowboy_routes_tree";
            };
          } // packageOverrides)
      ) {};

    cowboy_routes_tree = cowboy_routes_tree_0_2_0;

    cowboy_session_1_0_0 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          gproc_0_6_1,
          uuid_erl_1_5_2
        }:
          buildRebar3 ({
            name = "cowboy_session";
            version = "1.0.0";
            src = fetchHex {
              pkg = "cowboy_session";
              version = "1.0.0";
              sha256 =
                "2cbe1e30ad3ffc9765cf9711357cae79fb32e0697698f10d025724b96bc5ddf4";
            };

            beamDeps  = [ gproc_0_6_1 uuid_erl_1_5_2 ];

            meta = {
              description = ''Cowboy session management'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/chvanikoff/cowboy_session.git";
            };
          } // packageOverrides)
      ) {};

    cowboy_session = cowboy_session_1_0_0;

    cowboy_swagger_1_1_0 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          jiffy_0_14_7,
          trails_0_2_0
        }:
          buildRebar3 ({
            name = "cowboy_swagger";
            version = "1.1.0";
            src = fetchHex {
              pkg = "cowboy_swagger";
              version = "1.1.0";
              sha256 =
                "abc27528f1ccafb2ced0298cf0c7abf670260edd59bb16d72846ddb617426513";
            };

            beamDeps  = [ jiffy_0_14_7 trails_0_2_0 ];

            meta = {
              description = ''Swagger for Cowboy Erlang projects'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/inaka/cowboy-swagger";
            };
          } // packageOverrides)
      ) {};

    cowboy_swagger_1_2_2 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          jsx_2_8_1,
          trails_0_2_1
        }:
          buildRebar3 ({
            name = "cowboy_swagger";
            version = "1.2.2";
            src = fetchHex {
              pkg = "cowboy_swagger";
              version = "1.2.2";
              sha256 =
                "1c3fc9ec7ea437898571d12063325c6dd47e4ba00fa5f7a4a6bfce62f6aa9682";
            };

            beamDeps  = [ jsx_2_8_1 trails_0_2_1 ];

            meta = {
              description = ''Swagger for Cowboy Erlang projects'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/inaka/cowboy-swagger";
            };
          } // packageOverrides)
      ) {};

    cowboy_swagger = cowboy_swagger_1_2_2;

    cowgirl_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "cowgirl";
            version = "0.0.1";
            src = fetchHex {
              pkg = "cowgirl";
              version = "0.0.1";
              sha256 =
                "3b06ca6bb82fa3674ddad182cc479d9ab1538b83a4cf616c666e0d6f873c44e5";
            };

            meta = {
              description = ''Small, fast, modular HTTP server written in
                            Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/larrylv/cowgirl";
            };
          } // packageOverrides)
      ) {};

    cowgirl = cowgirl_0_0_1;

    cowlib_1_0_0 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex }:
          buildErlangMk ({
            name = "cowlib";
            version = "1.0.0";
            src = fetchHex {
              pkg = "cowlib";
              version = "1.0.0";
              sha256 =
                "4dacd60356177ec8cf93dbff399de17435b613f3318202614d3d5acbccee1474";
            };

            meta = {
              description = ''Support library for manipulating Web
                            protocols.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/ninenines/cowlib";
            };
          } // packageOverrides)
      ) {};

    cowlib_1_0_2 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex }:
          buildErlangMk ({
            name = "cowlib";
            version = "1.0.2";
            src = fetchHex {
              pkg = "cowlib";
              version = "1.0.2";
              sha256 =
                "db622da03aa039e6366ab953e31186cc8190d32905e33788a1acb22744e6abd2";
            };

            meta = {
              description = ''Support library for manipulating Web
                            protocols.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/ninenines/cowlib";
            };
          } // packageOverrides)
      ) {};

    cowlib_1_3_0 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex }:
          buildErlangMk ({
            name = "cowlib";
            version = "1.3.0";
            src = fetchHex {
              pkg = "cowlib";
              version = "1.3.0";
              sha256 =
                "2b1ac020ec92e7a59cb7322779870c2d3adc7c904ecb3b9fa406f04dc9816b73";
            };

            meta = {
              description = ''Support library for manipulating Web
                            protocols.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/ninenines/cowlib";
            };
          } // packageOverrides)
      ) {};

    cowlib = cowlib_1_3_0;

    cowsay_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "cowsay";
            version = "0.0.1";
            src = fetchHex {
              pkg = "cowsay";
              version = "0.0.1";
              sha256 =
                "9f8a6634710974787751279b22ef5d7cb3c6a74db42636540ae5db37c4632e2a";
            };

            meta = {
              description = ''A cow-friend who will speak your mind'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bbrock25/cowsay";
            };
          } // packageOverrides)
      ) {};

    cowsay = cowsay_0_0_1;

    cpg_1_5_4 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          quickrand_1_5_4,
          reltool_util_1_5_4,
          trie_1_5_4
        }:
          buildRebar3 ({
            name = "cpg";
            version = "1.5.4";
            src = fetchHex {
              pkg = "cpg";
              version = "1.5.4";
              sha256 =
                "cb2181e9192702b97d46117321c87eb3a4cf5eceb2b07af3bdc2a539987593bd";
            };

            beamDeps  = [ quickrand_1_5_4 reltool_util_1_5_4 trie_1_5_4 ];

            meta = {
              description = ''CloudI Process Groups'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/okeuday/cpg";
            };
          } // packageOverrides)
      ) {};

    cpg_1_6_0 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          quickrand_1_6_0,
          reltool_util_1_6_0,
          trie_1_6_0
        }:
          buildRebar3 ({
            name = "cpg";
            version = "1.6.0";
            src = fetchHex {
              pkg = "cpg";
              version = "1.6.0";
              sha256 =
                "84ad9685d3cfa5f0d9c77806e3fba29211c5b233400356165fc6e4911281922a";
            };

            beamDeps  = [ quickrand_1_6_0 reltool_util_1_6_0 trie_1_6_0 ];

            meta = {
              description = ''CloudI Process Groups'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/okeuday/cpg";
            };
          } // packageOverrides)
      ) {};

    cpg_1_7_1 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          quickrand_1_7_1,
          reltool_util_1_7_1,
          trie_1_7_1
        }:
          buildRebar3 ({
            name = "cpg";
            version = "1.7.1";
            src = fetchHex {
              pkg = "cpg";
              version = "1.7.1";
              sha256 =
                "8986646f0eb505d9ed2e7a2b350bd2447d41720f038bc640ae4aa849eb34974d";
            };

            beamDeps  = [ quickrand_1_7_1 reltool_util_1_7_1 trie_1_7_1 ];

            meta = {
              description = ''CloudI Process Groups'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/okeuday/cpg";
            };
          } // packageOverrides)
      ) {};

    cpg = cpg_1_7_1;

    cps_0_4_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "cps";
            version = "0.4.0";
            src = fetchHex {
              pkg = "cps";
              version = "0.4.0";
              sha256 =
                "8d7111b3ff7267bf79023221932d915f6b6bc88f3b8eff61357e8384a33f1a2c";
            };

            meta = {
              description = ''CPS Feed Server 0.4 for KVS'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/synrc/cps";
            };
          } // packageOverrides)
      ) {};

    cps = cps_0_4_0;

    cqex_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "cqex";
            version = "0.2.0";
            src = fetchHex {
              pkg = "cqex";
              version = "0.2.0";
              sha256 =
                "2180cb8083d38765bd3912f128b603826686300aef6f61adf9dc89fde3bb5429";
            };

            meta = {
              description = ''Idiomatic Elixir client for Cassandra.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/matehat/cqex";
            };
          } // packageOverrides)
      ) {};

    cqex = cqex_0_2_0;

    cqrex_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          ecto_2_0_0_rc_6,
          exrm_1_0_8,
          phoenix_1_3_0_rc_2,
          poison_1_5_2,
          postgrex_1_0_0_rc_1,
          sqlite_ecto_1_0_2
        }:
          buildMix ({
            name = "cqrex";
            version = "0.0.1";
            src = fetchHex {
              pkg = "cqrex";
              version = "0.0.1";
              sha256 =
                "d95a7560be11145890a1f52c584f2c3687faa3af300495a1dc4ead40fdce59cc";
            };
            beamDeps  = [
                          cowboy_1_1_2
                          ecto_2_0_0_rc_6
                          exrm_1_0_8
                          phoenix_1_3_0_rc_2
                          poison_1_5_2
                          postgrex_1_0_0_rc_1
                          sqlite_ecto_1_0_2
                        ];

            meta = {
              description = ''A CQRS implementation in Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/thebookofeveryone/cqrex";
            };
          } // packageOverrides)
      ) {};

    cqrex = cqrex_0_0_1;

    cqrs_0_0_7 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cqrs_commands_0_0_6,
          cqrs_events_0_0_4
        }:
          buildMix ({
            name = "cqrs";
            version = "0.0.7";
            src = fetchHex {
              pkg = "cqrs";
              version = "0.0.7";
              sha256 =
                "feb8f5b6e8bb0a7bbc622ad6b0b518e218d3adfad6ef55b16d531c992240c41f";
            };
            beamDeps  = [ cqrs_commands_0_0_6 cqrs_events_0_0_4 ];

            meta = {
              description = ''This is not production ready yet but I want your
                            feedback.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/amberbit/cqrs_commands";
            };
          } // packageOverrides)
      ) {};

    cqrs = cqrs_0_0_7;

    cqrs_commands_0_0_6 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exconstructor_1_0_2,
          plug_1_2_0_rc_0,
          poison_2_0_1,
          uuid_1_1_7,
          vex_0_5_5
        }:
          buildMix ({
            name = "cqrs_commands";
            version = "0.0.6";
            src = fetchHex {
              pkg = "cqrs_commands";
              version = "0.0.6";
              sha256 =
                "3bc8419a057daf10db5a0a8895d7b917948e6e901f3e8286163f829b2f5652f3";
            };
            beamDeps  = [
                          exconstructor_1_0_2
                          plug_1_2_0_rc_0
                          poison_2_0_1
                          uuid_1_1_7
                          vex_0_5_5
                        ];

            meta = {
              description = ''This is not production ready yet but I want your
                            feedback.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/amberbit/cqrs_commands";
            };
          } // packageOverrides)
      ) {};

    cqrs_commands = cqrs_commands_0_0_6;

    cqrs_events_0_0_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          moebius_2_0_3,
          poison_2_0_1,
          syn_1_6_1
        }:
          buildMix ({
            name = "cqrs_events";
            version = "0.0.4";
            src = fetchHex {
              pkg = "cqrs_events";
              version = "0.0.4";
              sha256 =
                "21c5ee4b8b814abf7ced3c88069511dd1a9a5c1c16a17c175228bfe5a9e4b7f8";
            };
            beamDeps  = [ moebius_2_0_3 poison_2_0_1 syn_1_6_1 ];

            meta = {
              description = ''This is not production ready yet but I want your
                            feedback.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/amberbit/cqrs_commands";
            };
          } // packageOverrides)
      ) {};

    cqrs_events = cqrs_events_0_0_4;

    craterl_0_2_3 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          hackney_1_3_1,
          jsx_2_7_1
        }:
          buildRebar3 ({
            name = "craterl";
            version = "0.2.3";
            src = fetchHex {
              pkg = "craterl";
              version = "0.2.3";
              sha256 =
                "bbbfa254fa5834d144f9061fff03035eca9a50b5e7581ce342c495b91af02929";
            };

            beamDeps  = [ hackney_1_3_1 jsx_2_7_1 ];

            meta = {
              description = ''erlang client for crate'';

            };
          } // packageOverrides)
      ) {};

    craterl = craterl_0_2_3;

    crawler_0_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          floki_0_9_0,
          httpoison_0_9_2
        }:
          buildMix ({
            name = "crawler";
            version = "0.0.0";
            src = fetchHex {
              pkg = "crawler";
              version = "0.0.0";
              sha256 =
                "920848238737302a441dd99fde20709deea4a3b095411471ba09faf13e0f8bf9";
            };
            beamDeps  = [ floki_0_9_0 httpoison_0_9_2 ];

            meta = {
              description = ''A high performance web crawler in Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/fredwu/crawler";
            };
          } // packageOverrides)
      ) {};

    crawler = crawler_0_0_0;

    crawlie_0_6_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          flow_0_11_1,
          gen_stage_0_11_0,
          httpoison_0_10_0,
          pqueue_1_7_1
        }:
          buildMix ({
            name = "crawlie";
            version = "0.6.0";
            src = fetchHex {
              pkg = "crawlie";
              version = "0.6.0";
              sha256 =
                "ceca54f010fb766a6b9cc2abb2a0d08a5bcf2cc3c05dbf1cad49406658cea7c1";
            };
            beamDeps  = [
                          flow_0_11_1
                          gen_stage_0_11_0
                          httpoison_0_10_0
                          pqueue_1_7_1
                        ];

            meta = {
              description = ''A simple Elixir web crawler library powered by
                            GenStage.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nietaki/crawlie";
            };
          } // packageOverrides)
      ) {};

    crawlie = crawlie_0_6_0;

    crazy_pants_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "crazy_pants";
            version = "0.0.1";
            src = fetchHex {
              pkg = "crazy_pants";
              version = "0.0.1";
              sha256 =
                "46e50adccb0d858e5a540c834d4e358ffa43ed9cdcac20ae36569fc7eaffa532";
            };

            meta = {
              description = ''These pretzels are making me thirsty'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/whodat/crazy_pants";
            };
          } // packageOverrides)
      ) {};

    crazy_pants = crazy_pants_0_0_1;

    crc_0_5_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "crc";
            version = "0.5.2";
            src = fetchHex {
              pkg = "crc";
              version = "0.5.2";
              sha256 =
                "625a85314772d106a81231a5648d80f4dfb8046dfdbbbb14afdb273eb3d87b6a";
            };

            meta = {
              description = ''A library used to calculate CRC checksums for
                            binary data'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/TattdCodeMonkey/crc";
            };
          } // packageOverrides)
      ) {};

    crc = crc_0_5_2;

    credit_card_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "credit_card";
            version = "1.0.0";
            src = fetchHex {
              pkg = "credit_card";
              version = "1.0.0";
              sha256 =
                "c7dee15035f4ff925f08bc806c4bd1817209c64d8ba089d0731808ee35e97ba0";
            };

            meta = {
              description = ''A library for validating credit card numbers'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/abakhi/credit_card";
            };
          } // packageOverrides)
      ) {};

    credit_card = credit_card_1_0_0;

    credo_0_8_0_rc7 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, bunt_0_2_0 }:
          buildMix ({
            name = "credo";
            version = "0.8.0-rc7";
            src = fetchHex {
              pkg = "credo";
              version = "0.8.0-rc7";
              sha256 =
                "ecbebfb89ab692f398856180a7b7763cb2438f1ecf3d2d00e524c0e1b5e8977f";
            };
            beamDeps  = [ bunt_0_2_0 ];

            meta = {
              description = ''A static code analysis tool with a focus on code
                            consistency and teaching.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rrrene/credo";
            };
          } // packageOverrides)
      ) {};

    credo_0_8_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, bunt_0_2_0 }:
          buildMix ({
            name = "credo";
            version = "0.8.1";
            src = fetchHex {
              pkg = "credo";
              version = "0.8.1";
              sha256 =
                "27b5502c571a6877a9e8ed0bef599cd266b1ac5a2c5151c1534ad1235fc7a84a";
            };
            beamDeps  = [ bunt_0_2_0 ];

            meta = {
              description = ''A static code analysis tool with a focus on code
                            consistency and teaching.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rrrene/credo";
            };
          } // packageOverrides)
      ) {};

    credo = credo_0_8_1;

    crest_0_0_1_dev = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_3_0_2,
          jiffy_0_14_11
        }:
          buildMix ({
            name = "crest";
            version = "0.0.1-dev";
            src = fetchHex {
              pkg = "crest";
              version = "0.0.1-dev";
              sha256 =
                "70ce81d56dac79776b7bf2d6dbd2b7f8ca8619756483b39f987052813a654bbf";
            };
            beamDeps  = [ httpotion_3_0_2 jiffy_0_14_11 ];

            meta = {
              description = ''A client for EVE Online`s CREST API'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/EVE-Tools/crest";
            };
          } // packageOverrides)
      ) {};

    crest = crest_0_0_1_dev;

    croma_0_6_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "croma";
            version = "0.6.2";
            src = fetchHex {
              pkg = "croma";
              version = "0.6.2";
              sha256 =
                "69d07b891a67b1033c1fc6702fe1f34df3d03d8382a9b6db99af05143ca9a030";
            };

            meta = {
              description = ''Elixir macro utilities'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    croma = croma_0_6_2;

    cronex_0_4_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "cronex";
            version = "0.4.0";
            src = fetchHex {
              pkg = "cronex";
              version = "0.4.0";
              sha256 =
                "3c906b6f8dff2e8d6df2433e1ef596f9ba20fb50f738464fc0a6f0006e1e7ce2";
            };

            meta = {
              description = ''A cron like system built in Elixir, that you can
                            mount in your supervision tree'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jbernardo95/cronex";
            };
          } // packageOverrides)
      ) {};

    cronex = cronex_0_4_0;

    cronider_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "cronider";
            version = "0.1.0";
            src = fetchHex {
              pkg = "cronider";
              version = "0.1.0";
              sha256 =
                "2bbbb518217ac8cbe646ea1ccfe4b21edb1c3caa841489a4034bf310e15e1a6d";
            };

            meta = {
              description = ''Crontab intervals with time collision
                            detection'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/virviil/cronider";
            };
          } // packageOverrides)
      ) {};

    cronider = cronider_0_1_0;

    cronitor_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "cronitor";
            version = "1.0.0";
            src = fetchHex {
              pkg = "cronitor";
              version = "1.0.0";
              sha256 =
                "d1353c83d1949b60e824ed934be02e7a4cc536fb5b7c912618b0052e0e01d490";
            };

            meta = {
              description = ''An extremely simple wrapper for the cronitor.io
                            ping endpoints.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/jordan0day/cronitor";
            };
          } // packageOverrides)
      ) {};

    cronitor = cronitor_1_0_0;

    crontab_1_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ecto_1_0_1 }:
          buildMix ({
            name = "crontab";
            version = "1.1.0";
            src = fetchHex {
              pkg = "crontab";
              version = "1.1.0";
              sha256 =
                "5309c7391e72707404a4eedfe952cab9044ec3f5b5f553fba8f42e8dd50d6153";
            };
            beamDeps  = [ ecto_1_0_1 ];

            meta = {
              longDescription = ''Parse Cron Format Strings, Write Cron Format
                                Strings and Calculate Execution Dates.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jshmrtn/crontab";
            };
          } // packageOverrides)
      ) {};

    crontab = crontab_1_1_0;

    crudex_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, plug_auth_1_1_0 }:
          buildMix ({
            name = "crudex";
            version = "0.0.2";
            src = fetchHex {
              pkg = "crudex";
              version = "0.0.2";
              sha256 =
                "2ccf07c728dbb328b9f869a87465c8ba647931ec68f563c4ddea99ec76fa4364";
            };
            beamDeps  = [ plug_auth_1_1_0 ];

            meta = {
              description = ''A glue keeping Phoenix and Ecto together'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/briksoftware/crudex";
            };
          } // packageOverrides)
      ) {};

    crudex = crudex_0_0_2;

    crumb_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          earmark_1_2_2,
          ecto_2_1_4,
          phoenix_1_2_0_rc_1,
          poison_2_2_0
        }:
          buildMix ({
            name = "crumb";
            version = "0.0.2";
            src = fetchHex {
              pkg = "crumb";
              version = "0.0.2";
              sha256 =
                "54c99ca8a1193b66b2a4a45a21d0674b14fbfcac467ec8380f57b052f0a550ff";
            };
            beamDeps  = [
                          earmark_1_2_2
                          ecto_2_1_4
                          phoenix_1_2_0_rc_1
                          poison_2_2_0
                        ];

            meta = {
              description = ''Following the change crumbs'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/renanoronfle/crumb";
            };
          } // packageOverrides)
      ) {};

    crumb = crumb_0_0_2;

    crunchbase_0_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "crunchbase";
            version = "0.0.0";
            src = fetchHex {
              pkg = "crunchbase";
              version = "0.0.0";
              sha256 =
                "08537212ea26aeeccacf472dbda6339fc3eafd0fd8ccb2f134b4e935e8601885";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''CrunchBase for Alchemists.'';
              license = stdenv.lib.licenses.publicDomain;
              homepage = "https://github.com/meetwalter/crunchbase";
            };
          } // packageOverrides)
      ) {};

    crunchbase = crunchbase_0_0_0;

    crutches_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "crutches";
            version = "1.0.0";
            src = fetchHex {
              pkg = "crutches";
              version = "1.0.0";
              sha256 =
                "cfd97962a22fe30820e6ca6d0671c763232a7edf149aa11bd62ee77dff0ffff0";
            };

            meta = {
              description = ''An Elixir toolbelt freely inspired from Ruby`s
                            ActiveSupport'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mykewould/crutches";
            };
          } // packageOverrides)
      ) {};

    crutches = crutches_1_0_0;

    cryptex_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "cryptex";
            version = "0.0.1";
            src = fetchHex {
              pkg = "cryptex";
              version = "0.0.1";
              sha256 =
                "19d709c6ffbda3c74ec811190d168170db0435720cbe788c0233bea4afee1d16";
            };

            meta = {
              description = ''An Elixir library for encrypting/decrypting,
                            signing/verifying data. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/scrogson/cryptex";
            };
          } // packageOverrides)
      ) {};

    cryptex = cryptex_0_0_1;

    crypto_ext_0_1_4 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "crypto_ext";
            version = "0.1.4";
            src = fetchHex {
              pkg = "crypto_ext";
              version = "0.1.4";
              sha256 =
                "734f03cb40124a2d7317ea633e42bec9271b14009ba47ea043feb3f53225b9af";
            };
            compilePorts = true;

            meta = {
              description = ''Crypto lib extension to support AES 128 ECB
                            cipher'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/adrienmo/crypto_ext";
            };
          } // packageOverrides)
      ) {};

    crypto_ext = crypto_ext_0_1_4;

    crypto_quotation_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_3_0_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "crypto_quotation";
            version = "0.0.1";
            src = fetchHex {
              pkg = "crypto_quotation";
              version = "0.0.1";
              sha256 =
                "398f504074309cbf44d58a9472c368e5a279cf7ab8d3afe5995be9eb820ec4fc";
            };
            beamDeps  = [ httpotion_3_0_2 poison_2_2_0 ];

            meta = {
              description = ''Get quotation of crypto currencies'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/CryptoClub/crypto_quotation";
            };
          } // packageOverrides)
      ) {};

    crypto_quotation = crypto_quotation_0_0_1;

    crypto_rsassa_pss_1_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "crypto_rsassa_pss";
            version = "1.0.0";
            src = fetchHex {
              pkg = "crypto_rsassa_pss";
              version = "1.0.0";
              sha256 =
                "d8f48874dbef940a8954126249499714e702d8ae0a8f23230a6c2f4a92833313";
            };

            meta = {
              description = ''RSASSA-PSS Public Key Cryptographic Signature
                            Algorithm for Erlang'';
              license = stdenv.lib.licenses.mpl20;
              homepage =
                "https://github.com/potatosalad/erlang-crypto_rsassa_pss";
            };
          } // packageOverrides)
      ) {};

    crypto_rsassa_pss = crypto_rsassa_pss_1_0_0;

    cspex_1_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "cspex";
            version = "1.1.0";
            src = fetchHex {
              pkg = "cspex";
              version = "1.1.0";
              sha256 =
                "1eb6d83e0f4c43c68fe14ede5bb711654a6a653e94aa39d75ad67cf53ba79df1";
            };

            meta = {
              description = ''A library that brings all the CSP joy to the
                            Elixir land.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/vidalraphael/cspex";
            };
          } // packageOverrides)
      ) {};

    cspex = cspex_1_1_0;

    css_colors_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ecto_2_1_4 }:
          buildMix ({
            name = "css_colors";
            version = "0.2.0";
            src = fetchHex {
              pkg = "css_colors";
              version = "0.2.0";
              sha256 =
                "42e153b910470f4dc5964e0b2e59eab0f2444ac3e0b1a30aa7ee9cbb71db4af2";
            };
            beamDeps  = [ ecto_2_1_4 ];

            meta = {
              description = ''Library for parsing, writing and manipulation
                            (css) colors.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/alvinlindstam/css_colors";
            };
          } // packageOverrides)
      ) {};

    css_colors = css_colors_0_2_0;

    csv_1_4_4 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, parallel_stream_1_0_5
        }:
          buildMix ({
            name = "csv";
            version = "1.4.4";
            src = fetchHex {
              pkg = "csv";
              version = "1.4.4";
              sha256 =
                "12c0d07bcf00b41a9b3da1e9cf52eb05c04cb9ed1714b1ae2209d0d41b19af3c";
            };
            beamDeps  = [ parallel_stream_1_0_5 ];

            meta = {
              description = ''CSV Decoding and Encoding for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/beatrichartz/csv";
            };
          } // packageOverrides)
      ) {};

    csv_2_0_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, parallel_stream_1_0_5
        }:
          buildMix ({
            name = "csv";
            version = "2.0.0";
            src = fetchHex {
              pkg = "csv";
              version = "2.0.0";
              sha256 =
                "89adb329444874809641cc2f645aec2bd38dfd841e7fe4c1b3bca2e6f91a1af3";
            };
            beamDeps  = [ parallel_stream_1_0_5 ];

            meta = {
              description = ''CSV Decoding and Encoding for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/beatrichartz/csv";
            };
          } // packageOverrides)
      ) {};

    csv = csv_2_0_0;

    csv_2_0_0_rc_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, parallel_stream_1_0_5
        }:
          buildMix ({
            name = "csv";
            version = "2.0.0-rc.0";
            src = fetchHex {
              pkg = "csv";
              version = "2.0.0-rc.0";
              sha256 =
                "24aaa5213dad31402ae37b979e0b5bb77e98d2dbbea326ed91a1000c91c41113";
            };
            beamDeps  = [ parallel_stream_1_0_5 ];

            meta = {
              description = ''CSV Decoding and Encoding for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/beatrichartz/csv";
            };
          } // packageOverrides)
      ) {};

    csv_reader_1_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "csv_reader";
            version = "1.0.0";
            src = fetchHex {
              pkg = "csv_reader";
              version = "1.0.0";
              sha256 =
                "e959fd58d4cdea9290f7d9497e37e11d96eb79a4f171f932a90bba78eb9b04f2";
            };
            compilePorts = true;

            meta = {
              description = ''CSV Reader'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/puzza007/csv_reader";
            };
          } // packageOverrides)
      ) {};

    csv_reader = csv_reader_1_0_0;

    csvlixir_2_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "csvlixir";
            version = "2.0.4";
            src = fetchHex {
              pkg = "csvlixir";
              version = "2.0.4";
              sha256 =
                "2a890aab96f45de234a50ae18d2a9fcb1ee36804d808591b459f8128f2098e42";
            };

            meta = {
              longDescription = ''CSVLixir is a CSV reader/writer for Elixir.
                                Reading from files returns a stream of lists.
                                Reading from strings returns a list of lists.
                                The writer transforms a (possibly lazy) list of
                                lists into a stream of CSV strings. It can also
                                take a single list and return a single CSV
                                string.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/jimm/csvlixir";
            };
          } // packageOverrides)
      ) {};

    csvlixir = csvlixir_2_0_4;

    csvto_0_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          csv_1_4_4,
          decimal_1_3_1,
          timex_3_1_15
        }:
          buildMix ({
            name = "csvto";
            version = "0.1.2";
            src = fetchHex {
              pkg = "csvto";
              version = "0.1.2";
              sha256 =
                "ab66050520e2f482ee9e333d3c118a3a1b2b1d9424a3dcab0f7cef626aa6b17d";
            };
            beamDeps  = [ csv_1_4_4 decimal_1_3_1 timex_3_1_15 ];

            meta = {
              description = ''Convert csv file to elixir maps with ease'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/secretworry/csvto";
            };
          } // packageOverrides)
      ) {};

    csvto = csvto_0_1_2;

    cth_readable_1_2_6 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, cf_0_2_1 }:
          buildRebar3 ({
            name = "cth_readable";
            version = "1.2.6";
            src = fetchHex {
              pkg = "cth_readable";
              version = "1.2.6";
              sha256 =
                "217bbf0553d1adc91fd0fdc7ecc98ce590f3c4621bae60c6dd1119f85c03cefe";
            };

            beamDeps  = [ cf_0_2_1 ];

            meta = {
              description = ''Common Test hooks for more readable logs'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/ferd/cth_readable";
            };
          } // packageOverrides)
      ) {};

    cth_readable = cth_readable_1_2_6;

    cuckoo_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, murmur_1_0_0 }:
          buildMix ({
            name = "cuckoo";
            version = "1.0.1";
            src = fetchHex {
              pkg = "cuckoo";
              version = "1.0.1";
              sha256 =
                "523d2b8fa27c8f18a9a243e785da110e57d916d42d4320c0c725dd6d7cb1d923";
            };
            beamDeps  = [ murmur_1_0_0 ];

            meta = {
              description = ''Cuckoo is a pure Elixir implementation of Cuckoo
                            Filters.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gmcabrita/cuckoo";
            };
          } // packageOverrides)
      ) {};

    cuckoo = cuckoo_1_0_1;

    cucumberl_0_0_10 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "cucumberl";
            version = "0.0.10";
            src = fetchHex {
              pkg = "cucumberl";
              version = "0.0.10";
              sha256 =
                "53bd73d016602c8c46883dbcc5a57ee814fe4708b14e4406d566b5ca9d119110";
            };

            meta = {
              longDescription = ''A pure-erlang, open-source, implementation of
                                Cucumber (http://cukes.info). This provides a
                                subset of the Cucumber feature definition
                                language.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ericbmerritt/cucumberl";
            };
          } // packageOverrides)
      ) {};

    cucumberl = cucumberl_0_0_10;

    cuid_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "cuid";
            version = "0.1.0";
            src = fetchHex {
              pkg = "cuid";
              version = "0.1.0";
              sha256 =
                "80cd46bd323e05b706c60008368e631b559307b554c0acc54292ab2c73a3340b";
            };

            meta = {
              description = ''Generate collision-resistant ids, in Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/duailibe/cuid";
            };
          } // packageOverrides)
      ) {};

    cuid = cuid_0_1_0;

    curator_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_4,
          guardian_0_14_4,
          phoenix_1_3_0_rc_2,
          plug_1_3_5,
          timex_3_1_15,
          timex_ecto_3_1_1
        }:
          buildMix ({
            name = "curator";
            version = "0.1.0";
            src = fetchHex {
              pkg = "curator";
              version = "0.1.0";
              sha256 =
                "0c39cffb593686a25b53b666fc7b5d88e29e52331a58f4e25cbeef6a93262a04";
            };
            beamDeps  = [
                          ecto_2_1_4
                          guardian_0_14_4
                          phoenix_1_3_0_rc_2
                          plug_1_3_5
                          timex_3_1_15
                          timex_ecto_3_1_1
                        ];

            meta = {
              description = ''An Authentication and User Lifecycle Framework
                            for Phoenix'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/curator-ex/curator";
            };
          } // packageOverrides)
      ) {};

    curator = curator_0_1_0;

    curator_confirmable_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          curator_0_1_0,
          ecto_2_1_4,
          plug_1_3_5,
          postgrex_1_0_0_rc_1,
          timex_3_1_15,
          timex_ecto_3_1_1
        }:
          buildMix ({
            name = "curator_confirmable";
            version = "0.1.0";
            src = fetchHex {
              pkg = "curator_confirmable";
              version = "0.1.0";
              sha256 =
                "59bf4860598de61ea0d6e95e635da67b81d4d4c5614298c3845d16b83657e338";
            };
            beamDeps  = [
                          curator_0_1_0
                          ecto_2_1_4
                          plug_1_3_5
                          postgrex_1_0_0_rc_1
                          timex_3_1_15
                          timex_ecto_3_1_1
                        ];

            meta = {
              description = ''An email confirmation workflow for Curator'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/curator-ex/curator_confirmable";
            };
          } // packageOverrides)
      ) {};

    curator_confirmable = curator_confirmable_0_1_0;

    curator_database_authenticatable_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          comeonin_3_0_2,
          curator_0_1_0,
          ecto_2_1_4,
          postgrex_1_0_0_rc_1
        }:
          buildMix ({
            name = "curator_database_authenticatable";
            version = "0.1.0";
            src = fetchHex {
              pkg = "curator_database_authenticatable";
              version = "0.1.0";
              sha256 =
                "6a219815140a5f6afde0c231c856b42ed3b919ecf86b68d968ad168e88053847";
            };
            beamDeps  = [
                          comeonin_3_0_2
                          curator_0_1_0
                          ecto_2_1_4
                          postgrex_1_0_0_rc_1
                        ];

            meta = {
              description = ''Support password based sign-in by comparing the
                            password to a hashed password'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/curator-ex/curator_database_authenticatable";
            };
          } // packageOverrides)
      ) {};

    curator_database_authenticatable =
      curator_database_authenticatable_0_1_0;

    curator_registerable_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          curator_0_1_0,
          ecto_2_1_4,
          postgrex_1_0_0_rc_1
        }:
          buildMix ({
            name = "curator_registerable";
            version = "0.1.0";
            src = fetchHex {
              pkg = "curator_registerable";
              version = "0.1.0";
              sha256 =
                "43f5948bffe3440dcd3930b8b9410c99f3a881b22fa31b48ad809155b0f3e6ad";
            };
            beamDeps  = [ curator_0_1_0 ecto_2_1_4 postgrex_1_0_0_rc_1 ];

            meta = {
              description = ''A Generator to support user registration'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/curator-ex/curator_registerable";
            };
          } // packageOverrides)
      ) {};

    curator_registerable = curator_registerable_0_1_0;

    curator_session_keeper_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          plug_1_3_5,
          poison_3_1_0
        }:
          buildMix ({
            name = "curator_session_keeper";
            version = "0.1.0";
            src = fetchHex {
              pkg = "curator_session_keeper";
              version = "0.1.0";
              sha256 =
                "2c5da84eb495b59d518d04c3b163cd3f9ac94254fe2409c2d7644255463d3c1a";
            };
            beamDeps  = [ plug_1_3_5 poison_3_1_0 ];

            meta = {
              description = ''Elixir Lightweight Authentication framework'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/curator-ex/curator_session_keeper";
            };
          } // packageOverrides)
      ) {};

    curator_session_keeper = curator_session_keeper_0_1_0;

    cure_0_5_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "cure";
            version = "0.5.0";
            src = fetchHex {
              pkg = "cure";
              version = "0.5.0";
              sha256 =
                "f052e29304fdd81e29973251d43f8980bf9c66cfdea623d485c2ad7e4561ffc5";
            };

            meta = {
              longDescription = ''Interfaces Elixir with C/C++ code in a
                                user-friendly way! Based on Erlang-ports.
                                Provides a few Mix-tasks to kickstart the
                                development process.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/luc-tielen/Cure.git";
            };
          } // packageOverrides)
      ) {};

    cure = cure_0_5_0;

    curl2httpoison_0_2_6 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "curl2httpoison";
            version = "0.2.6";
            src = fetchHex {
              pkg = "curl2httpoison";
              version = "0.2.6";
              sha256 =
                "d22fda1a85db812e9f6e0c8770f004cb7942f463bc59b07ad272c01330a7bfca";
            };

            meta = {
              description = ''Curl2HTTPoison transform your curl request to
                            HTTPPoison request code'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/edgurgel/httpoison";
            };
          } // packageOverrides)
      ) {};

    curl2httpoison = curl2httpoison_0_2_6;

    curltime_1_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "curltime";
            version = "1.0.4";
            src = fetchHex {
              pkg = "curltime";
              version = "1.0.4";
              sha256 =
                "79de7c8db086bfcb1f9f636d7553726a843b86e9ba4f6216bb7459c2e1b0e943";
            };

            meta = {
              longDescription = ''curltime is an Elixir package that allows you
                                to easily get website response times.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sergiotapia/curltime";
            };
          } // packageOverrides)
      ) {};

    curltime = curltime_1_0_4;

    currencies_0_5_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "currencies";
            version = "0.5.1";
            src = fetchHex {
              pkg = "currencies";
              version = "0.5.1";
              sha256 =
                "e0bd3fb081810db1170177e79f5ba75b9e2bc174b199bf2c32e5d82862388f55";
            };

            meta = {
              longDescription = ''Currencies is a collection of all sorts of
                                useful information for every currency in the ISO
                                4217 standard.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/JakeStaTeresa/Currencies";
            };
          } // packageOverrides)
      ) {};

    currencies = currencies_0_5_1;

    currency_conversion_0_3_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_3_0_2,
          money_1_2_1,
          poison_3_1_0
        }:
          buildMix ({
            name = "currency_conversion";
            version = "0.3.1";
            src = fetchHex {
              pkg = "currency_conversion";
              version = "0.3.1";
              sha256 =
                "17c9794bdaf51bbf4e6ea8d5b77e83c8a98cea7103b30f103499f4b37df6b290";
            };
            beamDeps  = [ httpotion_3_0_2 money_1_2_1 poison_3_1_0 ];

            meta = {
              description = ''Convert Money Amounts between currencies.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jshmrtn/currency-conversion";
            };
          } // packageOverrides)
      ) {};

    currency_conversion = currency_conversion_0_3_1;

    currency_formatter_0_4_8 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_3_1_0 }:
          buildMix ({
            name = "currency_formatter";
            version = "0.4.8";
            src = fetchHex {
              pkg = "currency_formatter";
              version = "0.4.8";
              sha256 =
                "9452542b50b97befb5dd07eb6a216b3fd1c2c22c47c549ae9ce42669dcb7b10c";
            };
            beamDeps  = [ poison_3_1_0 ];

            meta = {
              longDescription = ''A library to help with formatting a number to
                                a currency using iso standards and other
                                convenience functions related to formatting
                                currencies'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/smeevil/currency_formatter";
            };
          } // packageOverrides)
      ) {};

    currency_formatter = currency_formatter_0_4_8;

    current_streak_ex_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          floki_0_17_2,
          httpoison_0_11_2
        }:
          buildMix ({
            name = "current_streak_ex";
            version = "0.1.1";
            src = fetchHex {
              pkg = "current_streak_ex";
              version = "0.1.1";
              sha256 =
                "1c62bcd7bdd69818dc05f0602e03a5aca6b21554206cb6634bedb807ee27d5a7";
            };
            beamDeps  = [ floki_0_17_2 httpoison_0_11_2 ];

            meta = {
              description = ''Get github current streak which support only
                            public repositories.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/KazuCocoa/current_streak_ex";
            };
          } // packageOverrides)
      ) {};

    current_streak_ex = current_streak_ex_0_1_1;

    current_user_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "current_user";
            version = "0.0.1";
            src = fetchHex {
              pkg = "current_user";
              version = "0.0.1";
              sha256 =
                "8a400d8cbd02da89bccf67a357733b682e0d6d4c421b7230405ac16b1988809c";
            };

            meta = {
              description = ''Configurable user authentication for Phoenix'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/halogenandtoast/current_user";
            };
          } // packageOverrides)
      ) {};

    current_user = current_user_0_0_1;

    currently_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "currently";
            version = "0.0.3";
            src = fetchHex {
              pkg = "currently";
              version = "0.0.3";
              sha256 =
                "50d7f8e0c6eb1dd4f434cd50c7447eb8f9e3d4c413161948df7363c41bf90ec1";
            };

            meta = {
              description = ''Currently is a tool to display cards currently
                            assigns on Trello '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/chatgris/currently";
            };
          } // packageOverrides)
      ) {};

    currently = currently_0_0_3;

    curry_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "curry";
            version = "0.0.1";
            src = fetchHex {
              pkg = "curry";
              version = "0.0.1";
              sha256 =
                "e8f56fee1cb82ae2616c36021d4dd8c2b4169490e224dea84f63feb47475d6f0";
            };

            meta = {
              description = ''A simple currying macro allowing to define
                            curried functions in Elixir modules.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/niahoo/elixir-curry";
            };
          } // packageOverrides)
      ) {};

    curry = curry_0_0_1;

    currying_1_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "currying";
            version = "1.0.2";
            src = fetchHex {
              pkg = "currying";
              version = "1.0.2";
              sha256 =
                "970906b371807f78f451292d4ad8b14ff413223e79a31c296be7948c56d13d4f";
            };

            meta = {
              longDescription = ''The Currying library allows you to partially
                                apply (or `curry`) any Elixir function, in a
                                very transparent way. It also optionally
                                implements the infix operator `~>` as a synomym
                                for currying.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/qqwy/elixir_currying";
            };
          } // packageOverrides)
      ) {};

    currying = currying_1_0_2;

    curtail_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "curtail";
            version = "0.1.1";
            src = fetchHex {
              pkg = "curtail";
              version = "0.1.1";
              sha256 =
                "6321e76b4901ecc9574e978d669b5e16922f0e5ad622a3498c49c01e20b45ac1";
            };

            meta = {
              description = ''HTML-safe string truncation.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/seankay/curtail";
            };
          } // packageOverrides)
      ) {};

    curtail = curtail_0_1_1;

    curtains_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, plug_1_1_7 }:
          buildMix ({
            name = "curtains";
            version = "0.0.1";
            src = fetchHex {
              pkg = "curtains";
              version = "0.0.1";
              sha256 =
                "d547bd024049630fd072994a759befaab908fa69f5e200b2b584e12f12e9842f";
            };
            beamDeps  = [ plug_1_1_7 ];

            meta = {
              longDescription = ''Curtains is a Elixir package that \"takes
                                over\" your Elixir website by returning content
                                of a specified file (if it exists). This makes
                                it perfect for \"Under construction\" and
                                \"Maintenance\" pages. At it`s heart, it`s just
                                a Plug.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/fteem/curtains";
            };
          } // packageOverrides)
      ) {};

    curtains = curtains_0_0_1;

    curve25519_0_1_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "curve25519";
            version = "0.1.4";
            src = fetchHex {
              pkg = "curve25519";
              version = "0.1.4";
              sha256 =
                "3460590592da61d5d0c309e2ec469290963129bfb6ee6e5f692ae8e0334161b3";
            };

            meta = {
              description = ''Curve25519 Diffie-Hellman functions'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mwmiller/curve25519_ex";
            };
          } // packageOverrides)
      ) {};

    curve25519_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "curve25519";
            version = "1.0.0";
            src = fetchHex {
              pkg = "curve25519";
              version = "1.0.0";
              sha256 =
                "9af725f1ffffc9f834479112122e0101db8de800f7e132907878175ffccc1793";
            };

            meta = {
              description = ''Curve25519 Diffie-Hellman functions'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mwmiller/curve25519_ex";
            };
          } // packageOverrides)
      ) {};

    curve25519 = curve25519_1_0_0;

    curve448_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "curve448";
            version = "1.0.0";
            src = fetchHex {
              pkg = "curve448";
              version = "1.0.0";
              sha256 =
                "9a63375552e1e38dcc340492eb5260ad5eb156053a71bd3ff0e475f9cd476a5c";
            };

            meta = {
              description = ''Curve448 Diffie-Hellman functions'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mwmiller/curve448_ex";
            };
          } // packageOverrides)
      ) {};

    curve448 = curve448_1_0_0;

    cushion_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, httpotion_2_2_1 }:
          buildMix ({
            name = "cushion";
            version = "0.0.3";
            src = fetchHex {
              pkg = "cushion";
              version = "0.0.3";
              sha256 =
                "1371ab210bd3b7ef7381dbe3f53fedb8afbbb0c562f45d614e4849373919482b";
            };
            beamDeps  = [ httpotion_2_2_1 ];

            meta = {
              longDescription = ''A really simple Buffer API client for sending
                                updates. Right now it only supports sending text
                                updates, but hopefully will support more in the
                                future.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ryanbillingsley/cushion";
            };
          } // packageOverrides)
      ) {};

    cushion = cushion_0_0_3;

    custom_base_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "custom_base";
            version = "0.2.1";
            src = fetchHex {
              pkg = "custom_base";
              version = "0.2.1";
              sha256 =
                "8df019facc5ec9603e94f7270f1ac73ddf339f56ade76a721eaa57c1493ba463";
            };

            meta = {
              description = ''Allow you to make custom base conversion in
                            Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/igas/custom_base";
            };
          } // packageOverrides)
      ) {};

    custom_base = custom_base_0_2_1;

    customerio_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "customerio";
            version = "0.1.1";
            src = fetchHex {
              pkg = "customerio";
              version = "0.1.1";
              sha256 =
                "966bffa964973c073c47bd65a67aa19a3c212f51dbf626f743e521ba84a9eb40";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''An Elixir client for the Customer.io event
                            API.'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    customerio = customerio_0_1_1;

    customized_hdr_histogram_0_3_2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "customized_hdr_histogram";
            version = "0.3.2";
            src = fetchHex {
              pkg = "customized_hdr_histogram";
              version = "0.3.2";
              sha256 =
                "b93d89e42c1109c040b2d552723bf5e098a0d03e9626669729854408610aeab2";
            };
            compilePorts = true;

            meta = {
              description = ''High Dynamic Range Histogram Erlang/OTP
                            library'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/afronski/hdr_histogram_erl";
            };
          } // packageOverrides)
      ) {};

    customized_hdr_histogram = customized_hdr_histogram_0_3_2;

    cuttlefish_2_0_11 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          getopt_0_8_2,
          lager_3_2_4
        }:
          buildRebar3 ({
            name = "cuttlefish";
            version = "2.0.11";
            src = fetchHex {
              pkg = "cuttlefish";
              version = "2.0.11";
              sha256 =
                "0d8ace9bbf2346917ce32a99e41d6203944e49e0c907c02fe9231dfb2f89fc68";
            };

            beamDeps  = [ getopt_0_8_2 lager_3_2_4 ];

            meta = {
              description = ''cuttlefish configuration abstraction'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/tsloughter/cuttlefish";
            };
          } // packageOverrides)
      ) {};

    cuttlefish = cuttlefish_2_0_11;

    cuttlefish_2_0_7 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          getopt_0_8_2,
          lager_3_0_2
        }:
          buildRebar3 ({
            name = "cuttlefish";
            version = "2.0.7";
            src = fetchHex {
              pkg = "cuttlefish";
              version = "2.0.7";
              sha256 =
                "57589747ba40a75c53872002cd251a2933102457cdcc99b8ed72823ba1288869";
            };

            beamDeps  = [ getopt_0_8_2 lager_3_0_2 ];

            meta = {
              description = ''cuttlefish configuration abstraction'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/tsloughter/cuttlefish";
            };
          } // packageOverrides)
      ) {};

    cwmp_ex_0_2_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          erlsom_1_4_1,
          poison_2_2_0,
          xml_builder_0_0_9
        }:
          buildMix ({
            name = "cwmp_ex";
            version = "0.2.2";
            src = fetchHex {
              pkg = "cwmp_ex";
              version = "0.2.2";
              sha256 =
                "98d390146ce19445b9e534c76f2a8104b4acb69458df3057e2e430cea7676690";
            };
            beamDeps  = [ erlsom_1_4_1 poison_2_2_0 xml_builder_0_0_9 ];

            meta = {
              description = ''A module that implements the CWMP protocol'';
              license = stdenv.lib.licenses.artistic1;
              homepage = "https://github.com/Fullrate/cwmp_ex";
            };
          } // packageOverrides)
      ) {};

    cwmp_ex = cwmp_ex_0_2_2;

    cypher_query_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "cypher_query";
            version = "0.0.1";
            src = fetchHex {
              pkg = "cypher_query";
              version = "0.0.1";
              sha256 =
                "068bee4f13275d3448a4676bf113d5b2e414b47a9f84bb6e1614a009104c3f30";
            };

            meta = {
              description = ''A dumb string-based query builder for neo4j
                            Cypher queries'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/collin/cypher_query";
            };
          } // packageOverrides)
      ) {};

    cypher_query = cypher_query_0_0_1;

    damm_0_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "damm";
            version = "0.1.0";
            src = fetchHex {
              pkg = "damm";
              version = "0.1.0";
              sha256 =
                "2d2d0adbf0ffe5888d0aaee784a25b3bb9b99acf33b6de350aee9f58c588cbd5";
            };

            meta = {
              description = ''Damm algorithm implementation'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mururu/damm";
            };
          } // packageOverrides)
      ) {};

    damm = damm_0_1_0;

    darkskyx_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, httpoison_0_5_0 }:
          buildMix ({
            name = "darkskyx";
            version = "0.1.3";
            src = fetchHex {
              pkg = "darkskyx";
              version = "0.1.3";
              sha256 =
                "4092b86e306265ec93c2174c8d47128ba4532c69a81599f3aab0ce3b02dcc38e";
            };
            beamDeps  = [ httpoison_0_5_0 ];

            meta = {
              description = ''A Darksky.net weather api client for Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/techgaun/darkskyx";
            };
          } // packageOverrides)
      ) {};

    darkskyx = darkskyx_0_1_3;

    data_crypter_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "data_crypter";
            version = "0.1.0";
            src = fetchHex {
              pkg = "data_crypter";
              version = "0.1.0";
              sha256 =
                "e5246635eead395c1d19664e268b7657aa92fcd2bbd5591831aaa37e3a310928";
            };

            meta = {
              description = ''AES 128/256 GCM encrypt/decrypt wrapper for
                            Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hirocaster/data_crypter";
            };
          } // packageOverrides)
      ) {};

    data_crypter = data_crypter_0_1_0;

    data_leaf_walker_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "data_leaf_walker";
            version = "0.1.0";
            src = fetchHex {
              pkg = "data_leaf_walker";
              version = "0.1.0";
              sha256 =
                "9d3a8688c3751765453f04e8f60f3826757396dce66baf7e2cf7335c9c373bbd";
            };

            meta = {
              longDescription = ''Traverse and map values of deeply nested data
                                structures: Provides a `map_deeply/2` function
                                for Maps and Lists and Keyword Lists'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gutschilla/elixir-map-deeply";
            };
          } // packageOverrides)
      ) {};

    data_leaf_walker = data_leaf_walker_0_1_0;

    data_morph_0_0_6 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, csv_1_4_4 }:
          buildMix ({
            name = "data_morph";
            version = "0.0.6";
            src = fetchHex {
              pkg = "data_morph";
              version = "0.0.6";
              sha256 =
                "7d895104bee7a75253bae39346885bc4ca55df838633ca040f4be137a9a53d02";
            };
            beamDeps  = [ csv_1_4_4 ];

            meta = {
              description = ''Create Elixir structs, maps with atom keys, and
                            keyword lists from CSV/TSV data.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/robmckinnon/data_morph";
            };
          } // packageOverrides)
      ) {};

    data_morph = data_morph_0_0_6;

    data_pool_1_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, e_queue_1_0_1 }:
          buildMix ({
            name = "data_pool";
            version = "1.0.2";
            src = fetchHex {
              pkg = "data_pool";
              version = "1.0.2";
              sha256 =
                "92af4af2eb5ad1bbabcefa750c55b9664c0d4395f00cb68c08a56a8adcfcb3f9";
            };
            beamDeps  = [ e_queue_1_0_1 ];

            meta = {
              longDescription = ''Utility to buffer items into a queue that
                                follow a simple block pattern on calls to push
                                and pop when the queue at a max size or
                                empty.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/benfalk/data_pool";
            };
          } // packageOverrides)
      ) {};

    data_pool = data_pool_1_0_2;

    database_url_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "database_url";
            version = "0.1.0";
            src = fetchHex {
              pkg = "database_url";
              version = "0.1.0";
              sha256 =
                "273c8c926761d5716fee17c8a8494583d729a4419e30479a292eb6cea3d9a756";
            };

            meta = {
              description = ''Parse database URL and renturn keyword list for
                            use with Ecto.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/s-m-i-t-a/database_url";
            };
          } // packageOverrides)
      ) {};

    database_url = database_url_0_1_0;

    dataframe_0_3_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          csv_1_4_4,
          explot_0_1_0,
          timex_3_0_8
        }:
          buildMix ({
            name = "dataframe";
            version = "0.3.1";
            src = fetchHex {
              pkg = "dataframe";
              version = "0.3.1";
              sha256 =
                "b2e60034cd78a762f1ec3d283906784f4ea32d1f7634ddcc44e7cf2c6a34a4d5";
            };
            beamDeps  = [ csv_1_4_4 explot_0_1_0 timex_3_0_8 ];

            meta = {
              description = ''Implementation of R`s data.frame() or Python`s
                            Pandas for Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/jordipolo/dataframe";
            };
          } // packageOverrides)
      ) {};

    dataframe = dataframe_0_3_1;

    datasets_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ex_doc_0_16_1,
          math_0_2_0,
          statistics_0_4_1
        }:
          buildMix ({
            name = "datasets";
            version = "0.1.0";
            src = fetchHex {
              pkg = "datasets";
              version = "0.1.0";
              sha256 =
                "6de8652c7deaf1ed73f369c582f2889d4c6f9ca3de20256e41573d82dd78cb2e";
            };
            beamDeps  = [ ex_doc_0_16_1 math_0_2_0 statistics_0_4_1 ];

            meta = {
              description = ''Generate sample data similar to sklearn.datasets
                            for python'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/markkurt/sampledata";
            };
          } // packageOverrides)
      ) {};

    datasets = datasets_0_1_0;

    datastructures_0_2_8 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "datastructures";
            version = "0.2.8";
            src = fetchHex {
              pkg = "datastructures";
              version = "0.2.8";
              sha256 =
                "fc351f7ac756383a5179b87fb16fb143be79235b7942dee97cf0315e8ace45fe";
            };

            meta = {
              description = ''Elixir protocols and implementations for various
                            data structures.'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/meh/elixir-datastructures";
            };
          } // packageOverrides)
      ) {};

    datastructures = datastructures_0_2_8;

    datatrans_helper_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          config_ext_0_3_0,
          money_1_2_1
        }:
          buildMix ({
            name = "datatrans_helper";
            version = "0.2.0";
            src = fetchHex {
              pkg = "datatrans_helper";
              version = "0.2.0";
              sha256 =
                "0a4707f9e89ce4176ad564fd6db9d6b42696d1497fc7da502e68512424924dd5";
            };
            beamDeps  = [ config_ext_0_3_0 money_1_2_1 ];

            meta = {
              description = ''Small Helper Function to sign Datatrans Request
                            Parameters.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jshmrtn/datatrans-helper";
            };
          } // packageOverrides)
      ) {};

    datatrans_helper = datatrans_helper_0_2_0;

    date_params_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, calendar_0_16_1 }:
          buildMix ({
            name = "date_params";
            version = "0.1.0";
            src = fetchHex {
              pkg = "date_params";
              version = "0.1.0";
              sha256 =
                "205139b80b8a08df504adf4bdec1b1d75c341d8e75a5f1b55b7b19f61f44967e";
            };
            beamDeps  = [ calendar_0_16_1 ];

            meta = {
              longDescription = ''A simple library which converts the values of
                                maps from various string representations of
                                dates and times into native Elixir 1.3 dates.
                                This is useful as a plug for converting user
                                input into something that can reliably be sent
                                to Ecto for saving to a database.'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    date_params = date_params_0_1_0;

    datomex_0_0_5 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          erldn_1_0_5,
          ex_doc_0_15_1,
          httpoison_0_11_2,
          poison_1_5_2
        }:
          buildMix ({
            name = "datomex";
            version = "0.0.5";
            src = fetchHex {
              pkg = "datomex";
              version = "0.0.5";
              sha256 =
                "bb2a5171a5d7783e40776db7fe7a6bff73ff69a4da4205c83b39c26ff73488c0";
            };
            beamDeps  = [
                          erldn_1_0_5
                          ex_doc_0_15_1
                          httpoison_0_11_2
                          poison_1_5_2
                        ];

            meta = {
              description = ''Low level Elixir driver for the Datomic Database.
                            '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/edubkendo/datomex";
            };
          } // packageOverrides)
      ) {};

    datomex = datomex_0_0_5;

    datomic_gen_server_2_2_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, exdn_2_1_2 }:
          buildMix ({
            name = "datomic_gen_server";
            version = "2.2.5";
            src = fetchHex {
              pkg = "datomic_gen_server";
              version = "2.2.5";
              sha256 =
                "6c0205b5cae05c145f933fca5acd1140e17f7bb05b477050aa66f5be634b1d42";
            };
            beamDeps  = [ exdn_2_1_2 ];

            meta = {
              longDescription = ''An Elixir GenServer that communicates with a
                                Clojure Datomic peer running in the JVM, using
                                clojure-erlastic.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/psfblair/datomic_gen_server";
            };
          } // packageOverrides)
      ) {};

    datomic_gen_server = datomic_gen_server_2_2_5;

    dayron_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          crutches_1_0_0,
          httpoison_0_8_3,
          poison_1_0_2
        }:
          buildMix ({
            name = "dayron";
            version = "0.1.1";
            src = fetchHex {
              pkg = "dayron";
              version = "0.1.1";
              sha256 =
                "3302315a89dc9fe10aef950a0a9617583ef42858224f8a089cad9a7d5e28cb57";
            };
            beamDeps  = [ crutches_1_0_0 httpoison_0_8_3 poison_1_0_2 ];

            meta = {
              longDescription = ''Dayron is a flexible library to interact with
                                RESTful APIs and map resources to Elixir data
                                structures.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/inaka/Dayron";
            };
          } // packageOverrides)
      ) {};

    dayron = dayron_0_1_1;

    db_0_9_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "db";
            version = "0.9.0";
            src = fetchHex {
              pkg = "db";
              version = "0.9.0";
              sha256 =
                "23d0307bc227782b1c0c86bb5b66130312cf3eb4363f3f39d5b1fc84140b3a91";
            };

            meta = {
              description = ''Banking Database'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/spawnproc/db";
            };
          } // packageOverrides)
      ) {};

    db = db_0_9_0;

    db2kafka_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ex_statsd_0_5_3,
          kafka_ex_0_6_4,
          mariaex_0_7_9,
          murmur_1_0_0,
          poison_2_2_0,
          poolboy_1_5_1
        }:
          buildMix ({
            name = "db2kafka";
            version = "0.2.0";
            src = fetchHex {
              pkg = "db2kafka";
              version = "0.2.0";
              sha256 =
                "4f5832a4008ccff301415dc672b287f8d462ee3b4e2babea1c96fc2941f47ce6";
            };
            beamDeps  = [
                          ex_statsd_0_5_3
                          kafka_ex_0_6_4
                          mariaex_0_7_9
                          murmur_1_0_0
                          poison_2_2_0
                          poolboy_1_5_1
                        ];

            meta = {
              description = ''A MySQL to Kafka data pump'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/PagerDuty/db2kafka";
            };
          } // packageOverrides)
      ) {};

    db2kafka = db2kafka_0_2_0;

    db_connection_1_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          connection_1_0_4,
          poolboy_1_5_1,
          sbroker_1_0_0
        }:
          buildMix ({
            name = "db_connection";
            version = "1.0.0";
            src = fetchHex {
              pkg = "db_connection";
              version = "1.0.0";
              sha256 =
                "ee19a9e07f6d6356652f12b8bf675e24b75a143dd98ca3a022e00c2f5b782290";
            };
            beamDeps  = [ connection_1_0_4 poolboy_1_5_1 sbroker_1_0_0 ];

            meta = {
              description = ''Database connection behaviour for database
                            transactions and connection pooling'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/elixir-ecto/db_connection";
            };
          } // packageOverrides)
      ) {};

    db_connection_1_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          connection_1_0_4,
          poolboy_1_5_1,
          sbroker_1_0_0
        }:
          buildMix ({
            name = "db_connection";
            version = "1.1.2";
            src = fetchHex {
              pkg = "db_connection";
              version = "1.1.2";
              sha256 =
                "550e5ec2a759a5cac03255c5b8e666784300ba4663046898776b30669d00d6a7";
            };
            beamDeps  = [ connection_1_0_4 poolboy_1_5_1 sbroker_1_0_0 ];

            meta = {
              description = ''Database connection behaviour for database
                            transactions and connection pooling'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/elixir-ecto/db_connection";
            };
          } // packageOverrides)
      ) {};

    db_connection = db_connection_1_1_2;

    dbg_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "dbg";
            version = "1.0.1";
            src = fetchHex {
              pkg = "dbg";
              version = "1.0.1";
              sha256 =
                "866159f496a1ad9b959501f16db3d1338bb6cef029a75a67ca5615d25b38345f";
            };

            meta = {
              description = ''Distributed tracing'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/fishcakez/dbg";
            };
          } // packageOverrides)
      ) {};

    dbg = dbg_1_0_1;

    dbschema_0_2_2 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          epgpool_1_1_0,
          erlando_3_1_1,
          lager_3_2_1
        }:
          buildRebar3 ({
            name = "dbschema";
            version = "0.2.2";
            src = fetchHex {
              pkg = "dbschema";
              version = "0.2.2";
              sha256 =
                "b9341a59416e9c89038483802f73ecd92263d4727c23e527e6b34de36188a97d";
            };

            beamDeps  = [ epgpool_1_1_0 erlando_3_1_1 lager_3_2_1 ];

            meta = {
              description = ''Database postgresql migrations util'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/egobrain/dbschema";
            };
          } // packageOverrides)
      ) {};

    dbschema = dbschema_0_2_2;

    dbus_0_7_0 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex }:
          buildErlangMk ({
            name = "dbus";
            version = "0.7.0";
            src = fetchHex {
              pkg = "dbus";
              version = "0.7.0";
              sha256 =
                "b4c84734c34876cfd0dd831742f198c313ea901dd673f311db1afb244145077d";
            };

            meta = {
              description = ''A native erlang implementation of D-Bus'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/lizenn/erlang-dbus";
            };
          } // packageOverrides)
      ) {};

    dbus = dbus_0_7_0;

    dbux_1_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, connection_1_0_4 }:
          buildMix ({
            name = "dbux";
            version = "1.0.3";
            src = fetchHex {
              pkg = "dbux";
              version = "1.0.3";
              sha256 =
                "79d01f620dd32ec4ed11423e0724bf7d8a46353e56f8d28cbdbf499a352caa1e";
            };
            beamDeps  = [ connection_1_0_4 ];

            meta = {
              description = ''Bindings for the D-Bus IPC protocol.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mspanc/dbux";
            };
          } // packageOverrides)
      ) {};

    dbux = dbux_1_0_3;

    ddb_client_0_2_2 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          dproto_0_2_8,
          mmath_0_2_17,
          snappyer_1_2_1
        }:
          buildRebar3 ({
            name = "ddb_client";
            version = "0.2.2";
            src = fetchHex {
              pkg = "ddb_client";
              version = "0.2.2";
              sha256 =
                "ba2cca35ec8586bd1570378cfce1bffa9cceba479268b2d2e2d7841a736fc937";
            };

            beamDeps  = [ dproto_0_2_8 mmath_0_2_17 snappyer_1_2_1 ];

            meta = {
              description = ''DalmatinerDB client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dalmatinerdb/ddb_client";
            };
          } // packageOverrides)
      ) {};

    ddb_client_0_5_5 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          dproto_0_5_2,
          mmath_0_2_17
        }:
          buildRebar3 ({
            name = "ddb_client";
            version = "0.5.5";
            src = fetchHex {
              pkg = "ddb_client";
              version = "0.5.5";
              sha256 =
                "5ac39683854af01a1b5e02c450b56ea8454b40c485cb0f516ff1c640c893a228";
            };

            beamDeps  = [ dproto_0_5_2 mmath_0_2_17 ];

            meta = {
              description = ''DalmatinerDB client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dalmatinerdb/ddb_client";
            };
          } // packageOverrides)
      ) {};

    ddb_client = ddb_client_0_5_5;

    ddb_connection_0_1_22 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          ddb_client_0_2_2,
          poolboy_1_5_1
        }:
          buildRebar3 ({
            name = "ddb_connection";
            version = "0.1.22";
            src = fetchHex {
              pkg = "ddb_connection";
              version = "0.1.22";
              sha256 =
                "11e2b0bee10ea4d7aa224fe1016c848063ecdd2cf92c40be3eeaeb455c8a8ae9";
            };

            beamDeps  = [ ddb_client_0_2_2 poolboy_1_5_1 ];

            meta = {
              description = ''DDB client connection'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    ddb_connection_0_2_2 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          ddb_client_0_5_5,
          otters_0_2_8,
          poolboy_1_5_1
        }:
          buildRebar3 ({
            name = "ddb_connection";
            version = "0.2.2";
            src = fetchHex {
              pkg = "ddb_connection";
              version = "0.2.2";
              sha256 =
                "687f7e85a93e54fda078aad5f86c9b941e525c2fc0aa2ba19be36368e803819a";
            };

            beamDeps  = [ ddb_client_0_5_5 otters_0_2_8 poolboy_1_5_1 ];

            meta = {
              description = ''DDB client connection'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    ddb_connection_0_4_2 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          ddb_client_0_5_5,
          otters_0_2_8,
          poolboy_1_5_1
        }:
          buildRebar3 ({
            name = "ddb_connection";
            version = "0.4.2";
            src = fetchHex {
              pkg = "ddb_connection";
              version = "0.4.2";
              sha256 =
                "0c9b1a467e1dc3e116540330113151c836d23cd33d802ee0d68f67c9bec4e029";
            };

            beamDeps  = [ ddb_client_0_5_5 otters_0_2_8 poolboy_1_5_1 ];

            meta = {
              description = ''DDB client connection'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    ddb_connection = ddb_connection_0_4_2;

    dealer_0_8_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_1_5_2
        }:
          buildMix ({
            name = "dealer";
            version = "0.8.0";
            src = fetchHex {
              pkg = "dealer";
              version = "0.8.0";
              sha256 =
                "c8c72d38e1cff6a181a6b6f627fb6fd5998279827519e598eb28bcef2be721ee";
            };
            beamDeps  = [ httpoison_0_11_2 poison_1_5_2 ];

            meta = {
              description = ''An API Client for Stockfighter.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/larrylv/dealer";
            };
          } // packageOverrides)
      ) {};

    dealer = dealer_0_8_0;

    debounce_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "debounce";
            version = "0.1.1";
            src = fetchHex {
              pkg = "debounce";
              version = "0.1.1";
              sha256 =
                "c38963005087b751680f7805f800497e2ccdff9a4666551e071ef5438f32ca55";
            };

            meta = {
              description = ''A process-based debouncer for Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/michalmuskala/debounce";
            };
          } // packageOverrides)
      ) {};

    debounce = debounce_0_1_1;

    decimal_1_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "decimal";
            version = "1.3.0";
            src = fetchHex {
              pkg = "decimal";
              version = "1.3.0";
              sha256 =
                "b542d210c520307f3cddedab90678389eec0a266b7f0be00233a37d1c9c331b2";
            };

            meta = {
              description = ''Arbitrary precision decimal arithmetic.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ericmj/decimal";
            };
          } // packageOverrides)
      ) {};

    decimal_1_3_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "decimal";
            version = "1.3.1";
            src = fetchHex {
              pkg = "decimal";
              version = "1.3.1";
              sha256 =
                "94f7e657875648bc9ac747726eaae05c11cebff2dd01b2f807c7ab822a857786";
            };

            meta = {
              description = ''Arbitrary precision decimal arithmetic.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ericmj/decimal";
            };
          } // packageOverrides)
      ) {};

    decimal = decimal_1_3_1;

    decimal_arithmetic_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, decimal_1_3_1 }:
          buildMix ({
            name = "decimal_arithmetic";
            version = "0.1.1";
            src = fetchHex {
              pkg = "decimal_arithmetic";
              version = "0.1.1";
              sha256 =
                "b9c5dc722cc770aa5b905418d56e23eaa16e64659da0ccb552341a75068e0cfe";
            };
            beamDeps  = [ decimal_1_3_1 ];

            meta = {
              description = ''Extended arithmetic for Decimal library.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jacek-adamek/decimal_arithmetic";
            };
          } // packageOverrides)
      ) {};

    decimal_arithmetic = decimal_arithmetic_0_1_1;

    decimal_env_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, decimal_1_3_1 }:
          buildMix ({
            name = "decimal_env";
            version = "0.3.0";
            src = fetchHex {
              pkg = "decimal_env";
              version = "0.3.0";
              sha256 =
                "343f692917d79349807ce0adedb8d00406c5ac57402536eefca4eda86cbb0abd";
            };
            beamDeps  = [ decimal_1_3_1 ];

            meta = {
              description = ''Provides macros to use Decimals with the regular
                            Elixir operators'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gmtprime/decimal_env";
            };
          } // packageOverrides)
      ) {};

    decimal_env = decimal_env_0_3_0;

    decks_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "decks";
            version = "0.0.2";
            src = fetchHex {
              pkg = "decks";
              version = "0.0.2";
              sha256 =
                "3d01790def23bccd30c34c3a839572f2bc19ea0b9e0a569115feb2d64d78bf50";
            };

            meta = {
              description = ''Implements standard card decks for Elixir-based
                            card games.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jamesotron/elixir_decks";
            };
          } // packageOverrides)
      ) {};

    decks = decks_0_0_2;

    decoction_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "decoction";
            version = "0.0.1";
            src = fetchHex {
              pkg = "decoction";
              version = "0.0.1";
              sha256 =
                "cdf7ad35cdf87962e153bb56d9c68f8dd061469d58cae8923cbdcd2980d7adc0";
            };

            meta = {
              description = ''Decoction is a static site generator written in
                            Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/aarvay/decoction";
            };
          } // packageOverrides)
      ) {};

    decoction = decoction_0_0_1;

    decompilerl_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "decompilerl";
            version = "0.0.1";
            src = fetchHex {
              pkg = "decompilerl";
              version = "0.0.1";
              sha256 =
                "655989269692375f7f25ebe4f2a1f6d3a665085f08e2f4b9155164ee9d7799cc";
            };

            meta = {
              description = ''Decompile Elixir modules to Erlang abstract
                            code'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/aerosol/decompilerl";
            };
          } // packageOverrides)
      ) {};

    decompilerl = decompilerl_0_0_1;

    decoratex_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ecto_2_1_4 }:
          buildMix ({
            name = "decoratex";
            version = "1.0.1";
            src = fetchHex {
              pkg = "decoratex";
              version = "1.0.1";
              sha256 =
                "d8a618b7e533ea131c22eac214052c2e4939ec0f9c5d137731f4266eabf2aacc";
            };
            beamDeps  = [ ecto_2_1_4 ];

            meta = {
              longDescription = ''Decoratex provides an easy way to add
                                calculated data to your Ecto model structs.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/acutario/decoratex";
            };
          } // packageOverrides)
      ) {};

    decoratex = decoratex_1_0_1;

    decorator_1_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "decorator";
            version = "1.2.1";
            src = fetchHex {
              pkg = "decorator";
              version = "1.2.1";
              sha256 =
                "221297066758aacb7c5945b4aa70a2c5b0abe6f9ab78c6d50c375f02e355cfc7";
            };

            meta = {
              description = ''Function decorators for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/arjan/decorator";
            };
          } // packageOverrides)
      ) {};

    decorator = decorator_1_2_1;

    decorators_0_1_0 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, parse_trans_2_9_0
        }:
          buildRebar3 ({
            name = "decorators";
            version = "0.1.0";
            src = fetchHex {
              pkg = "decorators";
              version = "0.1.0";
              sha256 =
                "6a8f521232611f44ae09d0c7b40495018e2ea16b9b19a15a499f50ba347794f4";
            };

            beamDeps  = [ parse_trans_2_9_0 ];

            meta = {
              description = ''Function decorators for Erlang.'';

              homepage =
                "https://github.com/chrisavl/erlang_decorators/tree/master";
            };
          } // packageOverrides)
      ) {};

    decorators = decorators_0_1_0;

    deep_clean_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "deep_clean";
            version = "0.1.1";
            src = fetchHex {
              pkg = "deep_clean";
              version = "0.1.1";
              sha256 =
                "fb6444e8092f7d52d963b5e472e0c02ec6ac937bf59870f25e283fad98ec658c";
            };

            meta = {
              description = ''Exclude elements from deep nested maps or list'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ottojimb/deep_clean";
            };
          } // packageOverrides)
      ) {};

    deep_clean = deep_clean_0_1_1;

    deep_merge_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "deep_merge";
            version = "0.1.1";
            src = fetchHex {
              pkg = "deep_merge";
              version = "0.1.1";
              sha256 =
                "7dd57812332d76067deb9611b93cc98ac74cbb3b09480eef80c7e3c5a0813ecf";
            };

            meta = {
              longDescription = ''Deep (recursive) merging for maps, keyword
                                lists and whatever else you may want via
                                implementing a simple protocol.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/PragTob/deep_merge";
            };
          } // packageOverrides)
      ) {};

    deep_merge = deep_merge_0_1_1;

    default_args_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "default_args";
            version = "0.1.1";
            src = fetchHex {
              pkg = "default_args";
              version = "0.1.1";
              sha256 =
                "0a4c9c4de71fd4d3d37b47251cfad73667e26762f5f6011f794052b56fe3a322";
            };

            meta = {
              description = ''Compile time check for function defaults'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/leighshepperson/default_args";
            };
          } // packageOverrides)
      ) {};

    default_args = default_args_0_1_1;

    deferred_config_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "deferred_config";
            version = "0.1.1";
            src = fetchHex {
              pkg = "deferred_config";
              version = "0.1.1";
              sha256 =
                "2eb5311037feb4a6a5dbe3ecc5c98af7ea849730e5dbd9aee0f45c5dbccc3922";
            };

            meta = {
              longDescription = ''Seamless runtime config with one line of
                                code. No special accessors or mappings. Full
                                support for `{:system...} tuple` and `{m,f,a}`
                                runtime config patterns.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mrluc/deferred_config";
            };
          } // packageOverrides)
      ) {};

    deferred_config = deferred_config_0_1_1;

    defmap_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "defmap";
            version = "0.2.0";
            src = fetchHex {
              pkg = "defmap";
              version = "0.2.0";
              sha256 =
                "d7c38e2edb3766a4669f0222acf44192dfe34d21c691029b418c8dd18f32c816";
            };

            meta = {
              description = ''Embed your map into a module for easier/faster
                            lookup'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/minhajuddin/defmap";
            };
          } // packageOverrides)
      ) {};

    defmap = defmap_0_2_0;

    defmemo_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "defmemo";
            version = "0.1.1";
            src = fetchHex {
              pkg = "defmemo";
              version = "0.1.1";
              sha256 =
                "8fefc49ff64b06fdb1ee15292419c16919a7a3c6b8e5cac6afd7a13919715e0f";
            };

            meta = {
              description = '' A memoization macro (defmemo) for elixir using a
                            genserver backing store. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/os6sense/DefMemo";
            };
          } // packageOverrides)
      ) {};

    defmemo = defmemo_0_1_1;

    defql_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          db_connection_1_1_2,
          ecto_2_1_4,
          poolboy_1_5_1,
          postgrex_1_0_0_rc_1
        }:
          buildMix ({
            name = "defql";
            version = "0.1.1";
            src = fetchHex {
              pkg = "defql";
              version = "0.1.1";
              sha256 =
                "24c545e2ae82c1fc9ed656726c2d6909b03cc75bb545dfd760811de9d818989b";
            };
            beamDeps  = [
                          db_connection_1_1_2
                          ecto_2_1_4
                          poolboy_1_5_1
                          postgrex_1_0_0_rc_1
                        ];

            meta = {
              description = ''Create elixir functions with SQL as a body.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/fazibear/defql";
            };
          } // packageOverrides)
      ) {};

    defql = defql_0_1_1;

    defunit_0_4_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "defunit";
            version = "0.4.0";
            src = fetchHex {
              pkg = "defunit";
              version = "0.4.0";
              sha256 =
                "24ad6790202eba6ef734e9cd5e53cb96d839646d40a46ec7a32d53dcd9ff43b3";
            };

            meta = {
              longDescription = ''DefUnit provides macros that allow you to
                                quickly create a module that defines a set of
                                core units (SI, FPS, currency, whatever) for its
                                users. The macros create documentation
                                attributes, conversion operators and type specs
                                that allow Dialyzer to detect incompatible unit
                                assignments at compile time.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/robinhilliard/defunit.git";
            };
          } // packageOverrides)
      ) {};

    defunit = defunit_0_4_0;

    delayed_otp_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "delayed_otp";
            version = "0.0.3";
            src = fetchHex {
              pkg = "delayed_otp";
              version = "0.0.3";
              sha256 =
                "8f46dd741f7ce50bc66a80bc6152a272256fcb9594b26c4ca282db3c98eaa03f";
            };

            meta = {
              longDescription = ''Delay death of supervisor children or
                                gen_server : for instance Erlang supervisor with
                                exponential backoff restart strategy.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/awetzel/delayed_otp";
            };
          } // packageOverrides)
      ) {};

    delayed_otp = delayed_otp_0_0_3;

    delegate_behaviour_0_1_6 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "delegate_behaviour";
            version = "0.1.6";
            src = fetchHex {
              pkg = "delegate_behaviour";
              version = "0.1.6";
              sha256 =
                "2cd343e9fa0d9359cf331302e085a67727f01551d4ef9252aea037953934186b";
            };

            meta = {
              description = ''Macros to define modules that delegate to
                            concrete implementations of behaviours'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    delegate_behaviour = delegate_behaviour_0_1_6;

    delorean_1_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "delorean";
            version = "1.3.0";
            src = fetchHex {
              pkg = "delorean";
              version = "1.3.0";
              sha256 =
                "fb92b7b7ce2d0bd575ec45080ab88953fb567eb7883ed5a86fa3d85bae04d09d";
            };

            meta = {
              longDescription = ''A simple helper module to provide the ability
                                to tranform dates in a pipeline for increased
                                simplicity and readability.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/willamin/delorean";
            };
          } // packageOverrides)
      ) {};

    delorean = delorean_1_3_0;

    deltek_0_0_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          html_entities_0_3_0,
          sweet_xml_0_6_5
        }:
          buildMix ({
            name = "deltek";
            version = "0.0.4";
            src = fetchHex {
              pkg = "deltek";
              version = "0.0.4";
              sha256 =
                "274eecc6aba76e19e30e5850746ee81241ac8cc334d9729588b2ba770ac53988";
            };
            beamDeps  = [ html_entities_0_3_0 sweet_xml_0_6_5 ];

            meta = {
              description = ''An Elixir wrapper for the SOAP Deltek API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lucidstack/elixir-deltek";
            };
          } // packageOverrides)
      ) {};

    deltek = deltek_0_0_4;

    demacro_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "demacro";
            version = "0.0.1";
            src = fetchHex {
              pkg = "demacro";
              version = "0.0.1";
              sha256 =
                "e2a83d48f6b3e03764baf2e149dd5420e632d0d4daa77c5226697a3755a89d16";
            };
             meta = {    };
          } // packageOverrides)
      ) {};

    demacro = demacro_0_0_1;

    denrei_0_2_5 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          lager_3_0_1,
          ranch_1_1_0
        }:
          buildRebar3 ({
            name = "denrei";
            version = "0.2.5";
            src = fetchHex {
              pkg = "denrei";
              version = "0.2.5";
              sha256 =
                "750daf6d8a644d0129f8fadbf16c824473bc86976127d3d8daa60eb737ba7c9f";
            };

            beamDeps  = [ lager_3_0_1 ranch_1_1_0 ];

            meta = {
              description = ''Denrei - a lightweight Erlang messaging
                            system.'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    denrei = denrei_0_2_5;

    depcache_1_3_0 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex }:
          buildErlangMk ({
            name = "depcache";
            version = "1.3.0";
            src = fetchHex {
              pkg = "depcache";
              version = "1.3.0";
              sha256 =
                "5b8be3435e0b565ebeed24523207149db44d77643f3aad3a663c3aabfc982654";
            };

            meta = {
              description = ''In-memory cache with cache key dependencies'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/zotonic/depcache";
            };
          } // packageOverrides)
      ) {};

    depcache = depcache_1_3_0;

    depo_1_5_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, esqlite_0_2_3 }:
          buildMix ({
            name = "depo";
            version = "1.5.1";
            src = fetchHex {
              pkg = "depo";
              version = "1.5.1";
              sha256 =
                "358de7418314c8af9b29a69fc32dbc7990a0da44daeb42025c5a75efde0ed883";
            };
            beamDeps  = [ esqlite_0_2_3 ];

            meta = {
              longDescription = ''Depo provides lightweight storage and
                                querying capabilities in Elixir by providing a
                                minimal and polished API that builds on the
                                unique advantages of SQLite.'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    depo = depo_1_5_1;

    deppie_1_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "deppie";
            version = "1.1.0";
            src = fetchHex {
              pkg = "deppie";
              version = "1.1.0";
              sha256 =
                "705f8ca00df055333604356627f6590db6c64b29313672abe22a39bf44947852";
            };

            meta = {
              description = ''Elixir`s coolest deprecation logger'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zackehh/deppie";
            };
          } // packageOverrides)
      ) {};

    deppie = deppie_1_1_0;

    deque_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "deque";
            version = "1.0.0";
            src = fetchHex {
              pkg = "deque";
              version = "1.0.0";
              sha256 =
                "b48126a90d6eeab4594b4b315aefe968ae65605609930bb10a94832d21844911";
            };

            meta = {
              description = ''Fast bounded deque using two rotating lists.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hammerandchisel/deque";
            };
          } // packageOverrides)
      ) {};

    deque = deque_1_0_0;

    descriptive_statistics_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "descriptive_statistics";
            version = "0.0.2";
            src = fetchHex {
              pkg = "descriptive_statistics";
              version = "0.0.2";
              sha256 =
                "254d75c74d5470165553562fd7bfbc432325feecaa106ab15151f581e59ed550";
            };

            meta = {
              longDescription = ''Descriptive Statistics is a library that
                                allows you to compute simple descriptive
                                statistics in Elixir. Inspired by
                                https://github.com/thirtysixthspan/descriptive_statistics.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pusewicz/descriptive_statistics";
            };
          } // packageOverrides)
      ) {};

    descriptive_statistics = descriptive_statistics_0_0_2;

    destructure_0_2_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "destructure";
            version = "0.2.2";
            src = fetchHex {
              pkg = "destructure";
              version = "0.2.2";
              sha256 =
                "a410bfe8e25f5769defd33a311a2e649ac0021d87b2e744862074273d56fb2dd";
            };

            meta = {
              description = ''Javascript-style destructuring for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/danielberkompas/destructure";
            };
          } // packageOverrides)
      ) {};

    destructure = destructure_0_2_2;

    detergent_0_3_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "detergent";
            version = "0.3.0";
            src = fetchHex {
              pkg = "detergent";
              version = "0.3.0";
              sha256 =
                "510cfb5d35b4b344762f074b73c8696b4bdde654ea046b3365cf92760ae33362";
            };

            meta = {
              description = ''An emulsifying Erlang SOAP library'';
              license = with stdenv.lib.licenses; [ unlicense bsd3 ];
              homepage = "https://github.com/devinus/detergent";
            };
          } // packageOverrides)
      ) {};

    detergent = detergent_0_3_0;

    detergentex_0_0_7 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, detergent_0_3_0 }:
          buildMix ({
            name = "detergentex";
            version = "0.0.7";
            src = fetchHex {
              pkg = "detergentex";
              version = "0.0.7";
              sha256 =
                "6bb1bc2fe9228f97e512ef012c473ed822263dc38c3dbaa727fcd111ce1c4771";
            };
            beamDeps  = [ detergent_0_3_0 ];

            meta = {
              description = ''Elixir binding to Detergent erlang library used
                            to call WSDL SOAP Services'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/r-icarus/detergentex";
            };
          } // packageOverrides)
      ) {};

    detergentex = detergentex_0_0_7;

    deviant_elixir_0_0_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          feeder_ex_1_1_0,
          httpoison_0_11_2
        }:
          buildMix ({
            name = "deviant_elixir";
            version = "0.0.4";
            src = fetchHex {
              pkg = "deviant_elixir";
              version = "0.0.4";
              sha256 =
                "42473969889a47edab66384988e70ab6b4da158043e9231deab822743e3d9943";
            };
            beamDeps  = [ feeder_ex_1_1_0 httpoison_0_11_2 ];

            meta = {
              longDescription = ''WIP. Unstable alpha. Elixir API wrapper for
                                Deviant Art. At this moment provides only RSS
                                feeds intergac.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/vdaniuk/deviant-elixir";
            };
          } // packageOverrides)
      ) {};

    deviant_elixir = deviant_elixir_0_0_4;

    device_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "device";
            version = "1.0.0";
            src = fetchHex {
              pkg = "device";
              version = "1.0.0";
              sha256 =
                "d0c3adc3181bad8daf88bad92e5053b8791bec87d77aea98212997a3f86d10db";
            };

            meta = {
              description = ''Elixir User-Agent device detection library based
                            on the device npm library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pk4media/elixir_device";
            };
          } // packageOverrides)
      ) {};

    device = device_1_0_0;

    dex_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, exrm_1_0_8 }:
          buildMix ({
            name = "dex";
            version = "0.1.2";
            src = fetchHex {
              pkg = "dex";
              version = "0.1.2";
              sha256 =
                "41c2cf68cc5469c3b14f12a969ba3aa1b169cc2cb01fae567538670a4dbd5dd6";
            };
            beamDeps  = [ exrm_1_0_8 ];

            meta = {
              description = ''Deploy Elixir application with Mix.Task.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bbtfr/dex";
            };
          } // packageOverrides)
      ) {};

    dex = dex_0_1_2;

    dexter_1_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "dexter";
            version = "1.0.0";
            src = fetchHex {
              pkg = "dexter";
              version = "1.0.0";
              sha256 =
                "c9263dde2f0b5a6bde94669de664d9aa500d290837827a18068bbfa29730e923";
            };
            beamDeps  = [ httpoison_0_11_2 poison_2_2_0 ];

            meta = {
              description = ''A Pokéapi client for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sotojuan/dexter";
            };
          } // packageOverrides)
      ) {};

    dexter = dexter_1_0_0;

    dexts_0_3_1 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, datastructures_0_2_8
        }:
          buildMix ({
            name = "dexts";
            version = "0.3.1";
            src = fetchHex {
              pkg = "dexts";
              version = "0.3.1";
              sha256 =
                "4f8392ca3d2c74e567dbc8014ea46b5b36ac6cacea094c3e229a889427405180";
            };
            beamDeps  = [ datastructures_0_2_8 ];

            meta = {
              description = ''dets wrapper for Elixir'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/meh/dexts";
            };
          } // packageOverrides)
      ) {};

    dexts = dexts_0_3_1;

    dexy_lib_0_2_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          poison_3_1_0,
          timex_3_1_15
        }:
          buildMix ({
            name = "dexy_lib";
            version = "0.2.1";
            src = fetchHex {
              pkg = "dexy_lib";
              version = "0.2.1";
              sha256 =
                "42f63792720fa5ff08b471fa4b63db3b52e4de5a69ac7919c4052e11088ca049";
            };
            beamDeps  = [ poison_3_1_0 timex_3_1_15 ];

            meta = {
              description = ''Core library that is used in Dex platform.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/dexyio/dexy_lib";
            };
          } // packageOverrides)
      ) {};

    dexy_lib = dexy_lib_0_2_1;

    dflow_0_1_7 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "dflow";
            version = "0.1.7";
            src = fetchHex {
              pkg = "dflow";
              version = "0.1.7";
              sha256 =
                "167b1ff691e8b630f6d2cd3d333d12de4d7c73ef436d32708e2599a934f30d7f";
            };

            meta = {
              description = ''Pipelined flow processing engine'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dalmatinerdb/dflow";
            };
          } // packageOverrides)
      ) {};

    dflow_0_3_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, otters_0_2_8 }:
          buildRebar3 ({
            name = "dflow";
            version = "0.3.0";
            src = fetchHex {
              pkg = "dflow";
              version = "0.3.0";
              sha256 =
                "3948c74946d73f112bb95b8531584ee78d24df54afa9e80f05f7710fc9386415";
            };

            beamDeps  = [ otters_0_2_8 ];

            meta = {
              description = ''Pipelined flow processing engine'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dalmatinerdb/dflow";
            };
          } // packageOverrides)
      ) {};

    dflow = dflow_0_3_0;

    dh_date_1_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "dh_date";
            version = "1.0.0";
            src = fetchHex {
              pkg = "dh_date";
              version = "1.0.0";
              sha256 =
                "3f5d908383a0243a693147ea85a5654769b90078ac999a076ed6f0917f7614cf";
            };

            meta = {
              longDescription = ''Basic date formatting and parsing app. Uses
                                formatting rules of http://uk.php.net/date -
                                (with some minor changes)'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/daleharvey/dh_date";
            };
          } // packageOverrides)
      ) {};

    dh_date = dh_date_1_0_0;

    dhcp_1_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, lager_3_4_2 }:
          buildRebar3 ({
            name = "dhcp";
            version = "1.0.0";
            src = fetchHex {
              pkg = "dhcp";
              version = "1.0.0";
              sha256 =
                "b41cab4bb4f7c403400bbd0a41b1a9c931edc1c0a650e29978806c8becda7415";
            };

            beamDeps  = [ lager_3_4_2 ];

            meta = {
              description = ''dhcp server implemetnation'';
              license = stdenv.lib.licenses.cddl;
              homepage = "https://github.com/project-fifo/dhcp";
            };
          } // packageOverrides)
      ) {};

    dhcp = dhcp_1_0_0;

    di_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_8_3,
          poison_2_2_0
        }:
          buildMix ({
            name = "di";
            version = "0.1.0";
            src = fetchHex {
              pkg = "di";
              version = "0.1.0";
              sha256 =
                "d7a89568c986c98399667faeb618d5cc42a89965717e758323aa5370d1547260";
            };
            beamDeps  = [ httpoison_0_8_3 poison_2_2_0 ];

            meta = {
              description = ''Elixir wrapper for DI.FM'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/JoshuaThompson/di";
            };
          } // packageOverrides)
      ) {};

    di = di_0_1_0;

    dialyxir_0_5_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "dialyxir";
            version = "0.5.0";
            src = fetchHex {
              pkg = "dialyxir";
              version = "0.5.0";
              sha256 =
                "7c5c6c1eceb93e26a06c36148cb6f8021ae6f4f9a07bb1ae95f588e0a01ea8e1";
            };

            meta = {
              description = ''Mix tasks to simplify use of Dialyzer in Elixir
                            projects.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/jeremyjh/dialyxir";
            };
          } // packageOverrides)
      ) {};

    dialyxir = dialyxir_0_5_0;

    dialyze_0_1_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "dialyze";
            version = "0.1.4";
            src = fetchHex {
              pkg = "dialyze";
              version = "0.1.4";
              sha256 =
                "af9d6c37d8c067aaee959d4e1701e045e011906217c9f772218a3abaa92e4505";
            };

            meta = {
              description = ''Dialyzer Mix task'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/fishcakez/dialyze";
            };
          } // packageOverrides)
      ) {};

    dialyze_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "dialyze";
            version = "0.2.1";
            src = fetchHex {
              pkg = "dialyze";
              version = "0.2.1";
              sha256 =
                "f485181fa53229356621261a384963cb47511cccf1454e82ca4fde53274fcd48";
            };

            meta = {
              description = ''Dialyzer Mix task'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/fishcakez/dialyze";
            };
          } // packageOverrides)
      ) {};

    dialyze = dialyze_0_2_1;

    diane_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, sweet_xml_0_6_4 }:
          buildMix ({
            name = "diane";
            version = "0.0.1";
            src = fetchHex {
              pkg = "diane";
              version = "0.0.1";
              sha256 =
                "cb4a9984aab545f376d32f13b4ab612ba32a603781ddd743658d9c3991a4a89d";
            };
            beamDeps  = [ sweet_xml_0_6_4 ];

            meta = {
              description = ''RSS/Atom parser for Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ptrckbrwn/diane";
            };
          } // packageOverrides)
      ) {};

    diane = diane_0_0_1;

    dice_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "dice";
            version = "0.0.1";
            src = fetchHex {
              pkg = "dice";
              version = "0.0.1";
              sha256 =
                "975795636d6374bf120669cdbd6008a64bdd193a2ff202ffbdeefaa03d11bb9c";
            };

            meta = {
              description = ''Library and CLI app for rolling dice '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/stocks29/dice";
            };
          } // packageOverrides)
      ) {};

    dice = dice_0_0_1;

    dice_roller_1_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "dice_roller";
            version = "1.1.0";
            src = fetchHex {
              pkg = "dice_roller";
              version = "1.1.0";
              sha256 =
                "90e3485951605338f23686dcc001599354cb6eff7df851b1a1f6514b1c7fbd5c";
            };

            meta = {
              description = ''An Elixir library for simulating dice rolls'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/KevinGreene/DiceRoller";
            };
          } // packageOverrides)
      ) {};

    dice_roller = dice_roller_1_1_0;

    dicer_0_8_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, sfmt_0_12_7 }:
          buildMix ({
            name = "dicer";
            version = "0.8.0";
            src = fetchHex {
              pkg = "dicer";
              version = "0.8.0";
              sha256 =
                "834e5d3f4cd9afac655e0f27869ecfdf6fa4ea061ad9ededdc6f295f71325960";
            };
            beamDeps  = [ sfmt_0_12_7 ];

            meta = {
              description = ''Elixir library to calculate dice rolls. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/olhado/dicer";
            };
          } // packageOverrides)
      ) {};

    dicer = dicer_0_8_0;

    dicks_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exjsx_3_1_0,
          httpoison_0_6_2
        }:
          buildMix ({
            name = "dicks";
            version = "0.1.0";
            src = fetchHex {
              pkg = "dicks";
              version = "0.1.0";
              sha256 =
                "66d1a93ad1753361f2fc82033805a5f4c03ff295c78123e497f1ec56b9815be3";
            };
            beamDeps  = [ exjsx_3_1_0 httpoison_0_6_2 ];

            meta = {
              longDescription = ''An Elixir client for the Dick As A Service
                                platform http://dicks-api.herokuapp.com '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Annwenn/DicksEx";
            };
          } // packageOverrides)
      ) {};

    dicks = dicks_0_1_0;

    dicon_0_4_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "dicon";
            version = "0.4.0";
            src = fetchHex {
              pkg = "dicon";
              version = "0.4.0";
              sha256 =
                "d6a5c56e376b13dcfd721bc2571fbabcb41409ac5f2b8fa243a0f14393e6b145";
            };

            meta = {
              description = ''Simple release deliverer for Elixir'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/lexmag/dicon";
            };
          } // packageOverrides)
      ) {};

    dicon = dicon_0_4_0;

    diet_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "diet";
            version = "0.1.0";
            src = fetchHex {
              pkg = "diet";
              version = "0.1.0";
              sha256 =
                "35fa3928b7760a7c1c4501f66a66cb75c5ce3133bea87d8aeacc67948db31986";
            };

            meta = {
              longDescription = ''Diet is a DSL for writing your program logic
                                as a sequence of trivial transformations. See
                                https://github.com/pragdave/diet_examples for
                                some example code, and
                                https://www.youtube.com/watch?v=L1-amhlGk7c for
                                a talk that contains examples of Diet in
                                action.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/pragdave/diet";
            };
          } // packageOverrides)
      ) {};

    diet = diet_0_1_0;

    diff_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "diff";
            version = "1.0.0";
            src = fetchHex {
              pkg = "diff";
              version = "1.0.0";
              sha256 =
                "0dbd7abbf558031ccb8d703c751a20349326191026b07b53f4a3c603817728fb";
            };

            meta = {
              description = ''A simple diff library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bryanjos/diff";
            };
          } // packageOverrides)
      ) {};

    diff = diff_1_0_0;

    difficult_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          earmark_1_2_2,
          ex_doc_0_15_1
        }:
          buildMix ({
            name = "difficult";
            version = "0.0.2";
            src = fetchHex {
              pkg = "difficult";
              version = "0.0.2";
              sha256 =
                "5e47c31935cd81082942ac4515c24cad2630ef024e27c5e9cde96f60a93cc39b";
            };
            beamDeps  = [ earmark_1_2_2 ex_doc_0_15_1 ];

            meta = {
              description = ''Difficult, but computable functions'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/massn/Difficult";
            };
          } // packageOverrides)
      ) {};

    difficult = difficult_0_0_2;

    difflist_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "difflist";
            version = "1.0.0";
            src = fetchHex {
              pkg = "difflist";
              version = "1.0.0";
              sha256 =
                "09c313d872def8122e068d448379294e81187b45c976d1a8819664f2abca4947";
            };

            meta = {
              description = ''Difference lists in Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sotojuan/difflist";
            };
          } // packageOverrides)
      ) {};

    difflist = difflist_1_0_0;

    digestex_0_4_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "digestex";
            version = "0.4.2";
            src = fetchHex {
              pkg = "digestex";
              version = "0.4.2";
              sha256 =
                "9248522fa20ef6b72c6ef57eadea0256b3091d683a5c3481d65a267640c75ef3";
            };

            meta = {
              description = ''An elixir module for doing HTTP digest
                            authentication using erlang httpc'';
              license = stdenv.lib.licenses.artistic1;
              homepage = "https://github.com/jdalberg/digestex";
            };
          } // packageOverrides)
      ) {};

    digestex = digestex_0_4_2;

    digitalocean_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_9_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "digitalocean";
            version = "0.1.1";
            src = fetchHex {
              pkg = "digitalocean";
              version = "0.1.1";
              sha256 =
                "6e1de0fc83e12f793b5389720a005612450884aa7d163e12f5607854b6fd1a39";
            };
            beamDeps  = [ httpoison_0_9_2 poison_2_2_0 ];

            meta = {
              description = ''A (WIP) Elixir wrapper for the Digital Ocean API
                            v2.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lukeed/elixir-digitalocean";
            };
          } // packageOverrides)
      ) {};

    digitalocean = digitalocean_0_1_1;

    digoc_0_3_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_1_3_1
        }:
          buildMix ({
            name = "digoc";
            version = "0.3.3";
            src = fetchHex {
              pkg = "digoc";
              version = "0.3.3";
              sha256 =
                "23d5c2f1b977b1f3e12567879a20bc211898efdfcac9a0b6802324bc42ea0605";
            };
            beamDeps  = [ httpoison_0_11_2 poison_1_3_1 ];

            meta = {
              description = ''An Elixir client for the Digital Ocean API v2.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kevinmontuori/digoc";
            };
          } // packageOverrides)
      ) {};

    digoc = digoc_0_3_3;

    diplomat_0_7_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exprotobuf_1_2_7,
          goth_0_4_0,
          httpoison_0_11_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "diplomat";
            version = "0.7.1";
            src = fetchHex {
              pkg = "diplomat";
              version = "0.7.1";
              sha256 =
                "0b0f25a7a592261e91954339d9d536a747b4d0245ab13a7df4832e97b095921b";
            };
            beamDeps  = [
                          exprotobuf_1_2_7
                          goth_0_4_0
                          httpoison_0_11_2
                          poison_2_2_0
                        ];

            meta = {
              description = ''A library for interacting with Google`s Cloud
                            Datastore'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/peburrows/diplomat";
            };
          } // packageOverrides)
      ) {};

    diplomat = diplomat_0_7_1;

    dir_walker_0_0_6 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "dir_walker";
            version = "0.0.6";
            src = fetchHex {
              pkg = "dir_walker";
              version = "0.0.6";
              sha256 =
                "5bf891b970cca8df7d6e7d94857c508d2f5b48c615903427edbcbc483358fc92";
            };

            meta = {
              longDescription = ''DirWalker lazily traverses one or more
                                directory trees, depth first, returning
                                successive file names. Initialize the walker
                                using {:ok, walker} = DirWalker.start_link(path)
                                # or [path, path...] Then return the next `n`
                                path names using paths = DirWalker.next(walker
                                <, n \\ 1>) Successive calls to `next` will
                                return successive file names, until all file
                                names have been returned. These methods have
                                also been wrapped into a Stream resource. paths
                                = DirWalker.stream(path) # or [path,path...] '';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/pragdave/dir_walker";
            };
          } // packageOverrides)
      ) {};

    dir_walker = dir_walker_0_0_6;

    director_17_6_4 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "director";
            version = "17.6.4";
            src = fetchHex {
              pkg = "director";
              version = "17.6.4";
              sha256 =
                "e871ea30ecaf7a95ebecd2626d5c3bb97b02c595df82b3af0a15eabac3f8a8cc";
            };

            meta = {
              description = ''Flexible, fast and powerful supervisor library
                            for Erlang/Elixir processes'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/Pouriya-Jahanbakhsh/director";
            };
          } // packageOverrides)
      ) {};

    director = director_17_6_4;

    disc_union_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "disc_union";
            version = "0.2.0";
            src = fetchHex {
              pkg = "disc_union";
              version = "0.2.0";
              sha256 =
                "e4aebd9378d5dbf960d5d69546fa9654790cbb68b257de630f673fa16a54eace";
            };

            meta = {
              description = ''Discriminated unions for Elixir - for building
                            algebraic data types'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/X4lldux/disc_union";
            };
          } // packageOverrides)
      ) {};

    disc_union = disc_union_0_2_0;

    discord_alchemy_0_4_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          gen_stage_0_12_0,
          httpoison_0_10_0,
          poison_3_1_0,
          websocket_client_1_2_1
        }:
          buildMix ({
            name = "discord_alchemy";
            version = "0.4.1";
            src = fetchHex {
              pkg = "discord_alchemy";
              version = "0.4.1";
              sha256 =
                "a7a517adcb3e53885df63d026b0943e3dab9e2b192a9ecf4fe374b3217389854";
            };
            beamDeps  = [
                          gen_stage_0_12_0
                          httpoison_0_10_0
                          poison_3_1_0
                          websocket_client_1_2_1
                        ];

            meta = {
              longDescription = ''A Discord wrapper / framework for elixir.
                                This package intends to provide a solid
                                foundation for interacting with the Discord API,
                                as well as a very easy command and event hook
                                system.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cronokirby/alchemy";
            };
          } // packageOverrides)
      ) {};

    discord_alchemy = discord_alchemy_0_4_1;

    discord_elixir_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_3_0_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "discord_elixir";
            version = "0.0.1";
            src = fetchHex {
              pkg = "discord_elixir";
              version = "0.0.1";
              sha256 =
                "437b3bf9cc605cf34da28c1be0d57c87c24b1ae79f7aca17efad1f27c4e4dce0";
            };
            beamDeps  = [ httpotion_3_0_2 poison_2_2_0 ];

            meta = {
              description = ''An elixir library for creating discord bots.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Lugghawk/discord_elixir";
            };
          } // packageOverrides)
      ) {};

    discord_elixir = discord_elixir_0_0_1;

    discord_ex_1_1_8 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          dns_0_0_4,
          httpoison_0_9_2,
          kcl_0_6_6,
          poison_2_2_0,
          poly1305_0_4_5,
          porcelain_2_0_3,
          socket_0_3_12,
          temp_0_4_3,
          websocket_client_1_2_1
        }:
          buildMix ({
            name = "discord_ex";
            version = "1.1.8";
            src = fetchHex {
              pkg = "discord_ex";
              version = "1.1.8";
              sha256 =
                "935adc199ba41198680701a6370d60463fdda28b57d9d328e1902b8f396c8a4d";
            };
            beamDeps  = [
                          dns_0_0_4
                          httpoison_0_9_2
                          kcl_0_6_6
                          poison_2_2_0
                          poly1305_0_4_5
                          porcelain_2_0_3
                          socket_0_3_12
                          temp_0_4_3
                          websocket_client_1_2_1
                        ];

            meta = {
              description = ''Library for use with the Discord REST and
                            Realtime API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rmcafee/discord_ex";
            };
          } // packageOverrides)
      ) {};

    discord_ex = discord_ex_1_1_8;

    discorelic_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, newrelic_0_1_0 }:
          buildMix ({
            name = "discorelic";
            version = "0.1.0";
            src = fetchHex {
              pkg = "discorelic";
              version = "0.1.0";
              sha256 =
                "9ba3cf15fe967f61e09cc3595258e5890d1fd0e12e6a6693e6bca4cc27c30c91";
            };
            beamDeps  = [ newrelic_0_1_0 ];

            meta = {
              description = ''Elixir implementation of the NewRelic
                            intrumentation PaaS'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nogates/discorelic";
            };
          } // packageOverrides)
      ) {};

    discorelic = discorelic_0_1_0;

    discount_0_7_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "discount";
            version = "0.7.0";
            src = fetchHex {
              pkg = "discount";
              version = "0.7.0";
              sha256 =
                "a37b7890620f93aa2fae06eee364cd906991588bc8897e659f51634179519c97";
            };

            meta = {
              description = ''Elixir NIF for discount, a Markdown parser'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/asaaki/discount.ex";
            };
          } // packageOverrides)
      ) {};

    discount = discount_0_7_0;

    discourse_as_sso_erlang_0_7_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, cowlib_1_3_0 }:
          buildRebar3 ({
            name = "discourse_as_sso_erlang";
            version = "0.7.0";
            src = fetchHex {
              pkg = "discourse_as_sso_erlang";
              version = "0.7.0";
              sha256 =
                "be569178e6b0cb49d3fc48457b5233f9e82dc447bd452e5708a071412c24bc2d";
            };

            beamDeps  = [ cowlib_1_3_0 ];

            meta = {
              longDescription = ''Low-level erlang library to encode/decode
                                payloads for using the forum software Discourse
                                as an SSO endpoint.'';
              license = stdenv.lib.licenses.apsl20;
              homepage =
                "https://github.com/reverendpaco/discourse-as-sso-erlang";
            };
          } // packageOverrides)
      ) {};

    discourse_as_sso_erlang = discourse_as_sso_erlang_0_7_0;

    discourse_elixir_0_5_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_10_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "discourse_elixir";
            version = "0.5.1";
            src = fetchHex {
              pkg = "discourse_elixir";
              version = "0.5.1";
              sha256 =
                "206612f22017138d9e269d84c5730e6583e49677314db0595704b9fd82b87583";
            };
            beamDeps  = [ httpoison_0_10_0 poison_3_1_0 ];

            meta = {
              description = ''A Discourse client for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mmcnellis/discourse_elixir";
            };
          } // packageOverrides)
      ) {};

    discourse_elixir = discourse_elixir_0_5_1;

    discovery_0_5_7 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          consul_1_1_0,
          hash_ring_ex_1_1_2
        }:
          buildMix ({
            name = "discovery";
            version = "0.5.7";
            src = fetchHex {
              pkg = "discovery";
              version = "0.5.7";
              sha256 =
                "e252044547397e53c52809d5b76070f302e243992c4cbfa233fc4fa44927ccc8";
            };
            beamDeps  = [ consul_1_1_0 hash_ring_ex_1_1_2 ];

            meta = {
              description = ''An OTP application for auto-discovering services
                            with Consul '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/undeadlabs/discovery";
            };
          } // packageOverrides)
      ) {};

    discovery = discovery_0_5_7;

    dismake_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "dismake";
            version = "1.0.0";
            src = fetchHex {
              pkg = "dismake";
              version = "1.0.0";
              sha256 =
                "7eeff4a362ed4b4250e4090caa6861ee7b27a524919f574b9f836067b63ac058";
            };

            meta = {
              description = ''Dismake is a \"compiler\" (as in Mix.compilers)
                            that just runs make. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jarednorman/dismake";
            };
          } // packageOverrides)
      ) {};

    dismake = dismake_1_0_0;

    dispatch_0_1_2 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, phoenix_pubsub_1_0_1
        }:
          buildMix ({
            name = "dispatch";
            version = "0.1.2";
            src = fetchHex {
              pkg = "dispatch";
              version = "0.1.2";
              sha256 =
                "9634d685a926fe2c6481341a23d8d7b2355023e7686ad916d3775d2839390750";
            };
            beamDeps  = [ phoenix_pubsub_1_0_1 ];

            meta = {
              longDescription = ''A distributed service registry built on top
                                of phoenix_pubsub. Requests are dispatched to
                                one or more services based on hashed keys.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/voicelayer/dispatch";
            };
          } // packageOverrides)
      ) {};

    dispatch = dispatch_0_1_2;

    distance_0_2_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "distance";
            version = "0.2.2";
            src = fetchHex {
              pkg = "distance";
              version = "0.2.2";
              sha256 =
                "e02a4b25ad5c617acaeda1b3d5b4efbe3e010eb0f95a6dedff99f8a9dfafacf1";
            };

            meta = {
              description = ''Various distance functions for geometric or
                            geographic calculations'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pkinney/distance";
            };
          } // packageOverrides)
      ) {};

    distance = distance_0_2_2;

    distance_api_matrix_2_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_8_3,
          poison_1_0_2
        }:
          buildMix ({
            name = "distance_api_matrix";
            version = "2.0.1";
            src = fetchHex {
              pkg = "distance_api_matrix";
              version = "2.0.1";
              sha256 =
                "9e4e871ffa8d9e9910e80f80be0826e73f32dadf23c1e728fd52b9fd217c1325";
            };
            beamDeps  = [ httpoison_0_8_3 poison_1_0_2 ];

            meta = {
              description = ''Google Distance Matrix API Library for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/C404/distance-api-matrix";
            };
          } // packageOverrides)
      ) {};

    distance_api_matrix = distance_api_matrix_2_0_1;

    distancex_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_1_5_2 }:
          buildMix ({
            name = "distancex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "distancex";
              version = "0.1.0";
              sha256 =
                "62d78de83026d809dc93c1ea92452cffc6e905f157e9dfa25cbc51b44e54d6f4";
            };
            beamDeps  = [ poison_1_5_2 ];

            meta = {
              longDescription = ''Elixir-wrapper for Google Directions API. Can
                                return the drive time and driving distance
                                between two places.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/vysakh0/distancex";
            };
          } // packageOverrides)
      ) {};

    distancex = distancex_0_1_0;

    distillery_0_10_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "distillery";
            version = "0.10.1";
            src = fetchHex {
              pkg = "distillery";
              version = "0.10.1";
              sha256 =
                "ed41056ff7fff419eb9cac36aee0c58a0770091a566f8626e6778044bf7ac9f0";
            };

            meta = {
              description = ''Build releases of your Mix projects with ease!'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bitwalker/distillery";
            };
          } // packageOverrides)
      ) {};

    distillery_1_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "distillery";
            version = "1.1.2";
            src = fetchHex {
              pkg = "distillery";
              version = "1.1.2";
              sha256 =
                "d74397267362f30a7d9a82095f7f6ffa83d19f11c1f88c0483b0bc1bcf175654";
            };

            meta = {
              description = ''Build releases of your Mix projects with ease!'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bitwalker/distillery";
            };
          } // packageOverrides)
      ) {};

    distillery_1_3_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "distillery";
            version = "1.3.5";
            src = fetchHex {
              pkg = "distillery";
              version = "1.3.5";
              sha256 =
                "a12c9fc967fc4cbbeb7aa3fac48f36aeffd1c895df2170630b39a30d6a4ec9ad";
            };

            meta = {
              description = ''Build releases of your Mix projects with ease!'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bitwalker/distillery";
            };
          } // packageOverrides)
      ) {};

    distillery_1_4_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "distillery";
            version = "1.4.0";
            src = fetchHex {
              pkg = "distillery";
              version = "1.4.0";
              sha256 =
                "e37590d3451a1d5f2f7c0c8786df5edbcd82139f586c1f4413cfa2ffc96f80aa";
            };

            meta = {
              description = ''Build releases of your Mix projects with ease!'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bitwalker/distillery";
            };
          } // packageOverrides)
      ) {};

    distillery = distillery_1_4_0;

    distillery_packager_1_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          distillery_1_4_0,
          timex_3_1_15,
          vex_0_6_0
        }:
          buildMix ({
            name = "distillery_packager";
            version = "1.0.1";
            src = fetchHex {
              pkg = "distillery_packager";
              version = "1.0.1";
              sha256 =
                "290ef7c15cb04b210966a54a333fbb13d66a00eeb3d708e4913ff89933cfec61";
            };
            beamDeps  = [ distillery_1_4_0 timex_3_1_15 vex_0_6_0 ];

            meta = {
              description = ''Elixir lib for creating Debian and RPM packages
                            with Distillery.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/18Months/distillery_packager";
            };
          } // packageOverrides)
      ) {};

    distillery_packager = distillery_packager_1_0_1;

    distributed_attribute_server_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          attribute_server_0_1_0,
          stringify_0_1_1
        }:
          buildMix ({
            name = "distributed_attribute_server";
            version = "0.1.0";
            src = fetchHex {
              pkg = "distributed_attribute_server";
              version = "0.1.0";
              sha256 =
                "0ac43d806a18339383ec096e6d346db97c96a20418ddffba704572a3b6f9efa9";
            };
            beamDeps  = [ attribute_server_0_1_0 stringify_0_1_1 ];

            meta = {
              longDescription = ''(BETA) Distributed shared dictionary using
                                master/slave replication and slave to master
                                failover'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/MishaConway/elixir-distributed-attribute-server";
            };
          } // packageOverrides)
      ) {};

    distributed_attribute_server =
      distributed_attribute_server_0_1_0;

    distributed_attribute_server_application_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          attribute_server_0_1_0,
          stringify_0_1_1
        }:
          buildMix ({
            name = "distributed_attribute_server_application";
            version = "0.1.0";
            src = fetchHex {
              pkg = "distributed_attribute_server_application";
              version = "0.1.0";
              sha256 =
                "ce497e689cdca8941c42f3bfd873015a8a9f5539bd1a4619d9c6868cba72d8b7";
            };
            beamDeps  = [ attribute_server_0_1_0 stringify_0_1_1 ];

            meta = {
              longDescription = ''(BETA) Distributed shared dictionary using
                                master/slave replication and slave to master
                                failover'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/MishaConway/elixir-distributed-attribute-server";
            };
          } // packageOverrides)
      ) {};

    distributed_attribute_server_application =
      distributed_attribute_server_application_0_1_0;

    distributed_test_0_2_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "distributed_test";
            version = "0.2.4";
            src = fetchHex {
              pkg = "distributed_test";
              version = "0.2.4";
              sha256 =
                "771bc28fcfdad847f3988297183840d2b3a4ab2cb3a729eaf12cb7b882d48d50";
            };

            meta = {
              description = ''Run tests in a distributed environment!'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sschneider1207/distributed_test";
            };
          } // packageOverrides)
      ) {};

    distributed_test = distributed_test_0_2_4;

    diver_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "diver";
            version = "0.2.0";
            src = fetchHex {
              pkg = "diver";
              version = "0.2.0";
              sha256 =
                "07b26943e25b5654629f5579675ab50d1ef132fe6ded956828200459c4a3e002";
            };

            meta = {
              longDescription = ''A HBase driver for Erlang/Elixir using
                                Jinterface and the Asynchbase Java client to
                                query the database.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/novabyte/diver";
            };
          } // packageOverrides)
      ) {};

    diver = diver_0_2_0;

    dlist_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "dlist";
            version = "0.0.1";
            src = fetchHex {
              pkg = "dlist";
              version = "0.0.1";
              sha256 =
                "51c9d4a9e02c9a8892450876939d1e18b7f9ae78b237a683f0efad47d46e5f9a";
            };

            meta = {
              description = ''Deque implementations '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/stocks29/dlist.git";
            };
          } // packageOverrides)
      ) {};

    dlist = dlist_0_0_1;

    dna_search_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          fasta_0_1_0,
          floki_0_9_0,
          httpotion_3_0_2
        }:
          buildMix ({
            name = "dna_search";
            version = "0.0.1";
            src = fetchHex {
              pkg = "dna_search";
              version = "0.0.1";
              sha256 =
                "4e20cb93c34b2312e253e6a85003d9f1cc4be14725dfb7c09b9e2a6b9ad7d989";
            };
            beamDeps  = [ fasta_0_1_0 floki_0_9_0 httpotion_3_0_2 ];

            meta = {
              description = ''DNASearch is a tool for looking up DNA sequences
                            by species in Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/annejohnson/dna_search";
            };
          } // packageOverrides)
      ) {};

    dna_search = dna_search_0_0_1;

    dns_0_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, socket_0_3_12 }:
          buildMix ({
            name = "dns";
            version = "0.0.4";
            src = fetchHex {
              pkg = "dns";
              version = "0.0.4";
              sha256 =
                "c5278e4edc364b76f0bb551b4cc1b9bfe1230e7e542a7359ce5137bff2861eb9";
            };
            beamDeps  = [ socket_0_3_12 ];

            meta = {
              longDescription = ''DNS library for Elixir using `inet_dns`
                                module. Note: The `inet_dns` module is
                                considered internal to Erlang and subject to
                                change. If this happened this library will be
                                updated.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/tungd/elixir-dns";
            };
          } // packageOverrides)
      ) {};

    dns = dns_0_0_4;

    dnsimple_1_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "dnsimple";
            version = "1.1.0";
            src = fetchHex {
              pkg = "dnsimple";
              version = "1.1.0";
              sha256 =
                "2f892d0fdef58662cf19f2a9b3c9f4b2cdca4495bcb488e9294f27ab0ef876ba";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''Elixir client for the DNSimple API v2.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dnsimple/dnsimple-elixir";
            };
          } // packageOverrides)
      ) {};

    dnsimple = dnsimple_1_1_0;

    doc_first_formatter_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "doc_first_formatter";
            version = "0.0.2";
            src = fetchHex {
              pkg = "doc_first_formatter";
              version = "0.0.2";
              sha256 =
                "88500d55349571173f88d0f691e1ac7908b9663bfc06f9f0862e60ea8378313c";
            };

            meta = {
              longDescription = ''An ExUnit formatter that puts a list of tests
                                first, distinguishes pending from failed tests,
                                and saves detailed error information for once
                                the test suite is finished.'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/bkerley/doc_first_formatter";
            };
          } // packageOverrides)
      ) {};

    doc_first_formatter = doc_first_formatter_0_0_2;

    doc_plug_1_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, plug_1_3_5 }:
          buildMix ({
            name = "doc_plug";
            version = "1.0.2";
            src = fetchHex {
              pkg = "doc_plug";
              version = "1.0.2";
              sha256 =
                "2813f85dcd4f7228d54c277898d3d7483d03ef27ed4f9abc9eae6f57b00e79b8";
            };
            beamDeps  = [ plug_1_3_5 ];

            meta = {
              description = ''Plug to automatically generate and serve project
                            documentation.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hild/doc_plug";
            };
          } // packageOverrides)
      ) {};

    doc_plug = doc_plug_1_0_2;

    docker_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_1_5_2
        }:
          buildMix ({
            name = "docker";
            version = "0.3.0";
            src = fetchHex {
              pkg = "docker";
              version = "0.3.0";
              sha256 =
                "ad97dbaa51a615a7694018d95b0b09403b6d552a03ddb3ba50f121c814cc624a";
            };
            beamDeps  = [ httpoison_0_11_2 poison_1_5_2 ];

            meta = {
              description = ''Elixir client for the Docker Remote API using
                            HTTPoison. '';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/hexedpackets/docker-elixir";
            };
          } // packageOverrides)
      ) {};

    docker = docker_0_3_0;

    docker_distiller_0_6_2 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, distillery_0_10_1
        }:
          buildMix ({
            name = "docker_distiller";
            version = "0.6.2";
            src = fetchHex {
              pkg = "docker_distiller";
              version = "0.6.2";
              sha256 =
                "8b926acba5bf005668291b630d2b67e7168ad4a4437a3f045571e54c28143081";
            };
            beamDeps  = [ distillery_0_10_1 ];

            meta = {
              description = ''An opinionated container release builder'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/PagerDuty/docker_distiller";
            };
          } // packageOverrides)
      ) {};

    docker_distiller = docker_distiller_0_6_2;

    dockerex_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, httpoison_0_9_2 }:
          buildMix ({
            name = "dockerex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "dockerex";
              version = "0.1.0";
              sha256 =
                "6b92ef054503c0b22cb254b4df5f3f632ffdbfefc811627d71822ed661b2d479";
            };
            beamDeps  = [ httpoison_0_9_2 ];

            meta = {
              description = ''A lightweight Docker api client that supports SSL
                            connection.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hisea/dockerex";
            };
          } // packageOverrides)
      ) {};

    dockerex = dockerex_0_1_0;

    docraptorx_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exjsx_3_2_1,
          exml_0_1_1,
          httpoison_0_9_2
        }:
          buildMix ({
            name = "docraptorx";
            version = "0.1.1";
            src = fetchHex {
              pkg = "docraptorx";
              version = "0.1.1";
              sha256 =
                "d143297c47a40cade09f4761242dc6c409801b7836476d530431e4ad107a98a8";
            };
            beamDeps  = [ exjsx_3_2_1 exml_0_1_1 httpoison_0_9_2 ];

            meta = {
              description = ''Docraptor API client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/asacraft/docraptorx";
            };
          } // packageOverrides)
      ) {};

    docraptorx = docraptorx_0_1_1;

    doggie_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "doggie";
            version = "0.1.0";
            src = fetchHex {
              pkg = "doggie";
              version = "0.1.0";
              sha256 =
                "9206ac863606bd773bf4e15b2d7c5be90613f3fb571fa8f8fc481d707762f8b7";
            };

            meta = {
              longDescription = ''Doggie is a tiny library that provides the
                                most commonly used regular expression patterns
                                for Elixir.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/lk-geimfari/doggie";
            };
          } // packageOverrides)
      ) {};

    doggie = doggie_0_1_0;

    dogma_0_1_15 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_3_1_0 }:
          buildMix ({
            name = "dogma";
            version = "0.1.15";
            src = fetchHex {
              pkg = "dogma";
              version = "0.1.15";
              sha256 =
                "efe57de0379458d07a9fe4e17696527945c2c591646a50bfcdbc90684e612f2e";
            };
            beamDeps  = [ poison_3_1_0 ];

            meta = {
              description = ''A code style linter for Elixir, powered by
                            shame.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lpil/dogma";
            };
          } // packageOverrides)
      ) {};

    dogma = dogma_0_1_15;

    dogstat_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "dogstat";
            version = "0.1.0";
            src = fetchHex {
              pkg = "dogstat";
              version = "0.1.0";
              sha256 =
                "fc9c71283add85753e6f8e168c359d1b8055228a14ac6525ed986be5e92cf80c";
            };

            meta = {
              description = ''Runtime-configurable Elixir client for StatsD
                            servers.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Nebo15/dogstat";
            };
          } // packageOverrides)
      ) {};

    dogstat = dogstat_0_1_0;

    dogstatsd_0_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "dogstatsd";
            version = "0.0.4";
            src = fetchHex {
              pkg = "dogstatsd";
              version = "0.0.4";
              sha256 =
                "fd179c7fe3cff2f9332c7b4166a13bd6ffe5397d903dc4a58723c04a4053dc8b";
            };

            meta = {
              description = ''A client for DogStatsd, an extension of the
                            StatsD metric server for Datadog.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/adamkittelson/dogstatsd-elixir";
            };
          } // packageOverrides)
      ) {};

    dogstatsd = dogstatsd_0_0_4;

    dogstatsde_0_8_0 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          stillir_1_0_0,
          worker_pool_2_1_0
        }:
          buildRebar3 ({
            name = "dogstatsde";
            version = "0.8.0";
            src = fetchHex {
              pkg = "dogstatsde";
              version = "0.8.0";
              sha256 =
                "37396db758ee4f4db3ed80b014c6eab311a5665d2c8b80e95e2b5efb775d7362";
            };

            beamDeps  = [ stillir_1_0_0 worker_pool_2_1_0 ];

            meta = {
              description = ''Send StatsD metrics to Datadog'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/WhoopInc/dogstatsde";
            };
          } // packageOverrides)
      ) {};

    dogstatsde = dogstatsde_0_8_0;

    dolla_0_2_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_9_2,
          poison_2_2_0,
          timex_3_0_5,
          timex_poison_0_1_1
        }:
          buildMix ({
            name = "dolla";
            version = "0.2.3";
            src = fetchHex {
              pkg = "dolla";
              version = "0.2.3";
              sha256 =
                "2c2c176880e7b46f217f73cbba31bc177583cec72a1c8376616ade4cbcea8885";
            };
            beamDeps  = [
                          httpoison_0_9_2
                          poison_2_2_0
                          timex_3_0_5
                          timex_poison_0_1_1
                        ];

            meta = {
              longDescription = ''Dolla provides a wrapper over Apple`s app
                                store receipt verification service in Elixir.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/zovafit/dolla";
            };
          } // packageOverrides)
      ) {};

    dolla = dolla_0_2_3;

    dolphin_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_3_0_2,
          poison_3_0_0
        }:
          buildMix ({
            name = "dolphin";
            version = "0.1.0";
            src = fetchHex {
              pkg = "dolphin";
              version = "0.1.0";
              sha256 =
                "49a59224e92e08eca6d0f92606ad1d840bed9449897d1a9fe614a3330849068e";
            };
            beamDeps  = [ httpotion_3_0_2 poison_3_0_0 ];

            meta = {
              description = ''Dolphin is an unofficial library for the Flippa
                            REST API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jhartwell/Dolphin";
            };
          } // packageOverrides)
      ) {};

    dolphin = dolphin_0_1_0;

    domain_parts_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "domain_parts";
            version = "0.1.0";
            src = fetchHex {
              pkg = "domain_parts";
              version = "0.1.0";
              sha256 =
                "392600ec140a508a4db00bafa27e9d7ae068aacaef4d7b1750b58e26e1f2bd3d";
            };

            meta = {
              description = ''A module for extracting the parts of a domain
                            (subdomain, domain, and tld).'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/elbow-jason/domain_parts";
            };
          } // packageOverrides)
      ) {};

    domain_parts = domain_parts_0_1_0;

    domainatrex_2_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "domainatrex";
            version = "2.0.1";
            src = fetchHex {
              pkg = "domainatrex";
              version = "2.0.1";
              sha256 =
                "454e65a3f719eca932bbfa152c1dd58f6256e185d11aeb6941f2163ba2fc0c7f";
            };

            meta = {
              description = ''Domain / TLD parsing library for Elixir, using
                            the Public Suffix List.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zensavona/domainatrex";
            };
          } // packageOverrides)
      ) {};

    domainatrex = domainatrex_2_0_1;

    domainr_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_8_3,
          poison_2_2_0
        }:
          buildMix ({
            name = "domainr";
            version = "0.0.1";
            src = fetchHex {
              pkg = "domainr";
              version = "0.0.1";
              sha256 =
                "f66ccfe9fdc6b388ce7633974313826f9acffe96b4b369bb904d519e4aa26039";
            };
            beamDeps  = [ httpoison_0_8_3 poison_2_2_0 ];

            meta = {
              longDescription = ''Domainr is an [Domainr wrapper
                                for](https://domainr.build) in Elixir that makes
                                it easy to search and find available domains and
                                TLDs.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/e-fu/domainr";
            };
          } // packageOverrides)
      ) {};

    domainr = domainr_0_0_1;

    doorman_0_5_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          comeonin_2_6_0,
          plug_1_3_5
        }:
          buildMix ({
            name = "doorman";
            version = "0.5.2";
            src = fetchHex {
              pkg = "doorman";
              version = "0.5.2";
              sha256 =
                "6071257519ef06f46bd5174fe04e20de34871ea326971278913e0910049e94b5";
            };
            beamDeps  = [ comeonin_2_6_0 plug_1_3_5 ];

            meta = {
              description = ''Tools to make Elixir authentication simple and
                            flexible'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/BlakeWilliams/doorman";
            };
          } // packageOverrides)
      ) {};

    doorman = doorman_0_5_2;

    doppler_0_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, agent_0_1_0 }:
          buildRebar3 ({
            name = "doppler";
            version = "0.1.0";
            src = fetchHex {
              pkg = "doppler";
              version = "0.1.0";
              sha256 =
                "72a98f18b025a9bf3a7342ff2224a97ba57d82a3eb4b0dfdbe9888fbd71b4177";
            };

            beamDeps  = [ agent_0_1_0 ];

            meta = {
              description = ''Yet another mocking library'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/funbox/doppler";
            };
          } // packageOverrides)
      ) {};

    doppler = doppler_0_1_0;

    dossh_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_2_2_0,
          table_rex_0_10_0
        }:
          buildMix ({
            name = "dossh";
            version = "0.1.0";
            src = fetchHex {
              pkg = "dossh";
              version = "0.1.0";
              sha256 =
                "ea710ce0553734e931c40cff9376a0bf5619857849f0aefb710e2b9f69c854c4";
            };
            beamDeps  = [ httpoison_0_11_2 poison_2_2_0 table_rex_0_10_0 ];

            meta = {
              longDescription = ''Simple command line utility to access
                                information about the user`s digital ocean
                                droplets'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    dossh = dossh_0_1_0;

    dot_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "dot";
            version = "0.0.3";
            src = fetchHex {
              pkg = "dot";
              version = "0.0.3";
              sha256 =
                "3411bf1f70bb8ea0caa64515054a4a161b711667a5cdb0e7c14e766ce04b06ae";
            };
             meta = {    };
          } // packageOverrides)
      ) {};

    dot = dot_0_0_3;

    dot_notes_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "dot_notes";
            version = "1.0.0";
            src = fetchHex {
              pkg = "dot_notes";
              version = "1.0.0";
              sha256 =
                "0689a006ca36716eadac9f8f83699aff6d56520a15403610d08e2f397fd60996";
            };

            meta = {
              description = ''Simple dot/bracket notation parsing/conversion
                            for Maps/Lists'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zackehh/dot-notes-elixir";
            };
          } // packageOverrides)
      ) {};

    dot_notes = dot_notes_1_0_0;

    doteki_1_0_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, bucs_1_0_10 }:
          buildMix ({
            name = "doteki";
            version = "1.0.5";
            src = fetchHex {
              pkg = "doteki";
              version = "1.0.5";
              sha256 =
                "2daaf2433f2f6e2827f69e7404638a8164a0ef7f15a2a1c8b174edf73e14b65a";
            };
            beamDeps  = [ bucs_1_0_10 ];

            meta = {
              description = ''Dynamic configuration in your erlang
                            application'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/botsunit/doteki";
            };
          } // packageOverrides)
      ) {};

    doteki = doteki_1_0_5;

    dotenv_2_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "dotenv";
            version = "2.0.0";
            src = fetchHex {
              pkg = "dotenv";
              version = "2.0.0";
              sha256 =
                "bff466b9c1976a17ec1536e095b192e77ec2e2554fd229f23bbb7b598838d95f";
            };

            meta = {
              description = ''A port of dotenv to Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/avdi/dotenv_elixir";
            };
          } // packageOverrides)
      ) {};

    dotenv_2_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "dotenv";
            version = "2.1.0";
            src = fetchHex {
              pkg = "dotenv";
              version = "2.1.0";
              sha256 =
                "caddac72cac4955ae346306b210608dd6cf380a439b4e18bcdc3d6021f3e4d6b";
            };

            meta = {
              description = ''A port of dotenv to Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/avdi/dotenv_elixir";
            };
          } // packageOverrides)
      ) {};

    dotenv = dotenv_2_1_0;

    dotenv_elixir_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "dotenv_elixir";
            version = "0.0.2";
            src = fetchHex {
              pkg = "dotenv_elixir";
              version = "0.0.2";
              sha256 =
                "b7b95bff53df3bee1f500a24543bfb4c5c90b69c741454a86509b5a26c0355b7";
            };

            meta = {
              description = ''A port of dotenv to Elixir '';

              homepage = "https://github.com/avdi/dotenv_elixir";
            };
          } // packageOverrides)
      ) {};

    dotenv_elixir = dotenv_elixir_0_0_2;

    dotex_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, temp_0_4_3 }:
          buildMix ({
            name = "dotex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "dotex";
              version = "0.1.0";
              sha256 =
                "3212f5f920d48cc2acbac66007e98e7aaa6ed3195405074e034345d59d222bda";
            };
            beamDeps  = [ temp_0_4_3 ];

            meta = {
              description = ''Generate Graphviz graphs from Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/aussiegeek/dotex";
            };
          } // packageOverrides)
      ) {};

    dotex = dotex_0_1_0;

    double_0_4_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "double";
            version = "0.4.3";
            src = fetchHex {
              pkg = "double";
              version = "0.4.3";
              sha256 =
                "35dbb612851cfaa62c43860d29471f0436d788e5ecfc23b9d5ac5bda73dea223";
            };

            meta = {
              longDescription = ''Double is a simple library to help build
                                injectable dependencies for your tests. It does
                                NOT override behavior of existing modules or
                                functions.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sonerdy/double";
            };
          } // packageOverrides)
      ) {};

    double = double_0_4_3;

    double_bypass_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          bypass_0_6_0,
          poison_2_2_0
        }:
          buildMix ({
            name = "double_bypass";
            version = "0.0.1";
            src = fetchHex {
              pkg = "double_bypass";
              version = "0.0.1";
              sha256 =
                "f43929cab04db55a0b85d6c038c3491ffbca14c7ccc377153bc886ffdd69f00a";
            };
            beamDeps  = [ bypass_0_6_0 poison_2_2_0 ];

            meta = {
              longDescription = ''A wrapper around Bypass. Double Bypass makes
                                configuring and initializing Bypass easy. It
                                also removes redundant test assertion code, and
                                ecourages testing external requests in a self
                                documenting manner.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/msmykowski/double_bypass";
            };
          } // packageOverrides)
      ) {};

    double_bypass = double_bypass_0_0_1;

    dovetail_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "dovetail";
            version = "0.0.3";
            src = fetchHex {
              pkg = "dovetail";
              version = "0.0.3";
              sha256 =
                "01b6c3085ebb9cb7d43115c7a2d9780a840017e521daeb7d0a2233f61f8b0306";
            };

            meta = {
              description = ''Dovetail provides a harness for running test
                            dovecot servers.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/thusfresh/dovetail";
            };
          } // packageOverrides)
      ) {};

    dovetail = dovetail_0_0_3;

    dp_decoder_0_2_16 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "dp_decoder";
            version = "0.2.16";
            src = fetchHex {
              pkg = "dp_decoder";
              version = "0.2.16";
              sha256 =
                "f9fef2effbca0449763ce93e5c679123d7591aef12d326c305a60094d00b4df4";
            };

            meta = {
              description = ''Collection of decoders for different metric
                            protocols'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dalmatinerdb/dp_decoder";
            };
          } // packageOverrides)
      ) {};

    dp_decoder = dp_decoder_0_2_16;

    dpd_client_0_0_6 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_3_0,
          poison_1_0_3
        }:
          buildMix ({
            name = "dpd_client";
            version = "0.0.6";
            src = fetchHex {
              pkg = "dpd_client";
              version = "0.0.6";
              sha256 =
                "080d8e9e4c68db87e42ead3fa3ffbc8cde2cadac441dbe81fa7a1b903486cc2d";
            };
            beamDeps  = [ hackney_1_3_0 poison_1_0_3 ];

            meta = {
              longDescription = ''`dpd_client` is an API client for the DPD
                                service. It only supports a few of the API`s
                                endpoints at present. '';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    dpd_client = dpd_client_0_0_6;

    dproto_0_2_8 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          jsxd_0_2_4,
          mmath_0_2_17,
          snappyer_1_2_1
        }:
          buildRebar3 ({
            name = "dproto";
            version = "0.2.8";
            src = fetchHex {
              pkg = "dproto";
              version = "0.2.8";
              sha256 =
                "4c0904e4978d6238bd2896477266593a5265438fc5d44aa519cd9d0b118ace74";
            };

            beamDeps  = [ jsxd_0_2_4 mmath_0_2_17 snappyer_1_2_1 ];

            meta = {
              description = ''Protocols for dalmatinerdb'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dalmatinerdb/dproto";
            };
          } // packageOverrides)
      ) {};

    dproto_0_4_1 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          jsxd_0_2_4,
          mmath_0_2_17,
          snappiest_1_2_0
        }:
          buildRebar3 ({
            name = "dproto";
            version = "0.4.1";
            src = fetchHex {
              pkg = "dproto";
              version = "0.4.1";
              sha256 =
                "735c51fe8810da4980b47bf0c4480f43db30b25e7a76a13944facb0286644a8f";
            };

            beamDeps  = [ jsxd_0_2_4 mmath_0_2_17 snappiest_1_2_0 ];

            meta = {
              description = ''Protocols for dalmatinerdb'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dalmatinerdb/dproto";
            };
          } // packageOverrides)
      ) {};

    dproto_0_5_2 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          jsxd_0_2_4,
          mmath_0_2_17,
          snappiest_1_2_0
        }:
          buildRebar3 ({
            name = "dproto";
            version = "0.5.2";
            src = fetchHex {
              pkg = "dproto";
              version = "0.5.2";
              sha256 =
                "6dba20107bd893878b62b83172b868842532a94602ed8d3f3c1524ee6e59e9f3";
            };

            beamDeps  = [ jsxd_0_2_4 mmath_0_2_17 snappiest_1_2_0 ];

            meta = {
              description = ''Protocols for dalmatinerdb'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dalmatinerdb/dproto";
            };
          } // packageOverrides)
      ) {};

    dproto = dproto_0_5_2;

    dqe_0_4_15 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          ddb_connection_0_1_22,
          dflow_0_1_7,
          dproto_0_2_8,
          dqe_fun_0_2_1,
          dqe_idx_0_2_1,
          dqe_idx_ddb_0_3_0,
          dqe_idx_pg_0_3_6,
          hdr_histogram_0_2_0,
          lager_3_2_4,
          mmath_0_2_17,
          qdate_0_4_3
        }:
          buildRebar3 ({
            name = "dqe";
            version = "0.4.15";
            src = fetchHex {
              pkg = "dqe";
              version = "0.4.15";
              sha256 =
                "c63daf9499a72cd342101be0b400d85ae41498849207010a30a1fd0fa2cba172";
            };

            beamDeps  = [
                          ddb_connection_0_1_22
                          dflow_0_1_7
                          dproto_0_2_8
                          dqe_fun_0_2_1
                          dqe_idx_0_2_1
                          dqe_idx_ddb_0_3_0
                          dqe_idx_pg_0_3_6
                          hdr_histogram_0_2_0
                          lager_3_2_4
                          mmath_0_2_17
                          qdate_0_4_3
                        ];

            meta = {
              description = ''DalmatinerDB query engine'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dalmatinerdb/dqe";
            };
          } // packageOverrides)
      ) {};

    dqe = dqe_0_4_15;

    dqe_fun_0_2_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, dflow_0_3_0 }:
          buildRebar3 ({
            name = "dqe_fun";
            version = "0.2.1";
            src = fetchHex {
              pkg = "dqe_fun";
              version = "0.2.1";
              sha256 =
                "28c0f23b9072cbec2c09b92a88936f868c0f00eb52f776cfc7eb82d74ee2982e";
            };

            beamDeps  = [ dflow_0_3_0 ];

            meta = {
              description = ''An OTP application'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    dqe_fun = dqe_fun_0_2_1;

    dqe_idx_0_2_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "dqe_idx";
            version = "0.2.1";
            src = fetchHex {
              pkg = "dqe_idx";
              version = "0.2.1";
              sha256 =
                "8c9cab439e32ae8c208c4aee879c12862258661910ef0c365dfdc2b6d4db5983";
            };

            meta = {
              description = ''Dalmatiner QE indexing'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    dqe_idx_0_3_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "dqe_idx";
            version = "0.3.0";
            src = fetchHex {
              pkg = "dqe_idx";
              version = "0.3.0";
              sha256 =
                "6e3c6e42c591d81362087adde809dc969a01993cd35133f82904e1e93b4b093e";
            };

            meta = {
              description = ''Dalmatiner QE indexing'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    dqe_idx_0_4_2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "dqe_idx";
            version = "0.4.2";
            src = fetchHex {
              pkg = "dqe_idx";
              version = "0.4.2";
              sha256 =
                "3f0388616fbe50984b157a0d8c1c0532f4e108e282f1fe8cf9d222b08500ee2e";
            };

            meta = {
              description = ''Dalmatiner QE indexing'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    dqe_idx = dqe_idx_0_4_2;

    dqe_idx_ddb_0_3_0 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          ddb_connection_0_2_2,
          dproto_0_4_1,
          dqe_idx_0_2_1
        }:
          buildRebar3 ({
            name = "dqe_idx_ddb";
            version = "0.3.0";
            src = fetchHex {
              pkg = "dqe_idx_ddb";
              version = "0.3.0";
              sha256 =
                "5b557ebb006688c9ce3f13b81df7631dfb49999ce605c99c0143cfc1fc11ac49";
            };

            beamDeps  = [ ddb_connection_0_2_2 dproto_0_4_1 dqe_idx_0_2_1 ];

            meta = {
              description = ''DDB driven indexer for Dalmatiner Query engine'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    dqe_idx_ddb_0_4_0 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          ddb_connection_0_4_2,
          dproto_0_5_2,
          dqe_idx_0_3_0
        }:
          buildRebar3 ({
            name = "dqe_idx_ddb";
            version = "0.4.0";
            src = fetchHex {
              pkg = "dqe_idx_ddb";
              version = "0.4.0";
              sha256 =
                "f6d0570d0df1d0d6d1da0fd0f81420d2b0d275ebb3bc8979b370be649cae09e4";
            };

            beamDeps  = [ ddb_connection_0_4_2 dproto_0_5_2 dqe_idx_0_3_0 ];

            meta = {
              description = ''DDB driven indexer for Dalmatiner Query engine'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    dqe_idx_ddb_0_5_1 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          ddb_connection_0_4_2,
          dproto_0_5_2,
          dqe_idx_0_4_2
        }:
          buildRebar3 ({
            name = "dqe_idx_ddb";
            version = "0.5.1";
            src = fetchHex {
              pkg = "dqe_idx_ddb";
              version = "0.5.1";
              sha256 =
                "8eef1fe16377b99cc09b9d14fc439bb1de5c7240d36a83b8cf7d337f0a61d183";
            };

            beamDeps  = [ ddb_connection_0_4_2 dproto_0_5_2 dqe_idx_0_4_2 ];

            meta = {
              description = ''DDB driven indexer for Dalmatiner Query engine'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    dqe_idx_ddb = dqe_idx_ddb_0_5_1;

    dqe_idx_pg_0_3_6 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          dqe_idx_0_2_1,
          lager_3_2_4,
          pgapp_0_0_2
        }:
          buildRebar3 ({
            name = "dqe_idx_pg";
            version = "0.3.6";
            src = fetchHex {
              pkg = "dqe_idx_pg";
              version = "0.3.6";
              sha256 =
                "32b6be0baaa0c06dda55a0cf00c1a517df620d0a869323fc816c3e9f976a25eb";
            };

            beamDeps  = [ dqe_idx_0_2_1 lager_3_2_4 pgapp_0_0_2 ];

            meta = {
              description = ''Postgresql backend for DFE indexinge'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dalmatinerdb/dqe_idx_pg";
            };
          } // packageOverrides)
      ) {};

    dqe_idx_pg_0_4_4 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          dqe_idx_0_3_0,
          lager_3_2_4,
          pgapp_0_0_2,
          sqlmig_0_1_5
        }:
          buildRebar3 ({
            name = "dqe_idx_pg";
            version = "0.4.4";
            src = fetchHex {
              pkg = "dqe_idx_pg";
              version = "0.4.4";
              sha256 =
                "002cfe46affcec62753cb78e706d826f0e0831d6242c1d4fc5c343e2e71cb99a";
            };

            beamDeps  = [ dqe_idx_0_3_0 lager_3_2_4 pgapp_0_0_2 sqlmig_0_1_5
                      ];

            meta = {
              description = ''Postgresql backend for DFE indexinge'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dalmatinerdb/dqe_idx_pg";
            };
          } // packageOverrides)
      ) {};

    dqe_idx_pg_0_5_3 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          dqe_idx_0_4_2,
          lager_3_2_4,
          pgapp_0_0_2,
          sqlmig_0_1_5
        }:
          buildRebar3 ({
            name = "dqe_idx_pg";
            version = "0.5.3";
            src = fetchHex {
              pkg = "dqe_idx_pg";
              version = "0.5.3";
              sha256 =
                "a454938d76a5ac4e82ab7668cf07ffa53559644d5a33940b9c4f668c1ff97cf4";
            };

            beamDeps  = [ dqe_idx_0_4_2 lager_3_2_4 pgapp_0_0_2 sqlmig_0_1_5
                      ];

            meta = {
              description = ''Postgresql backend for DFE indexinge'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dalmatinerdb/dqe_idx_pg";
            };
          } // packageOverrides)
      ) {};

    dqe_idx_pg = dqe_idx_pg_0_5_3;

    drab_0_4_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          deppie_1_1_0,
          gettext_0_13_1,
          hound_1_0_3,
          phoenix_1_3_0_rc_2,
          phoenix_html_2_9_3,
          phoenix_pubsub_1_0_1
        }:
          buildMix ({
            name = "drab";
            version = "0.4.1";
            src = fetchHex {
              pkg = "drab";
              version = "0.4.1";
              sha256 =
                "b852dc8f14dc5e1e6a69143338600211c535a2407e8164f05ce68c87925b2737";
            };
            beamDeps  = [
                          cowboy_1_1_2
                          deppie_1_1_0
                          gettext_0_13_1
                          hound_1_0_3
                          phoenix_1_3_0_rc_2
                          phoenix_html_2_9_3
                          phoenix_pubsub_1_0_1
                        ];

            meta = {
              longDescription = ''Plugin to the Phoenix Framework to access the
                                User Interface in the browser directly from the
                                server side.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/grych/drab";
            };
          } // packageOverrides)
      ) {};

    drab = drab_0_4_1;

    drawille_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          earmark_0_1_19,
          ex_doc_0_15_1
        }:
          buildMix ({
            name = "drawille";
            version = "0.0.1";
            src = fetchHex {
              pkg = "drawille";
              version = "0.0.1";
              sha256 =
                "58d631fee40578dc077603c8cb969e3efa32c098c9d6295648432b07728d8ae3";
            };
            beamDeps  = [ earmark_0_1_19 ex_doc_0_15_1 ];

            meta = {
              description = ''Drawings using terminal braille characters.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/massn/elixir-drawille";
            };
          } // packageOverrides)
      ) {};

    drawille = drawille_0_0_1;

    drifter_0_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, exrm_1_0_8 }:
          buildMix ({
            name = "drifter";
            version = "0.0.0";
            src = fetchHex {
              pkg = "drifter";
              version = "0.0.0";
              sha256 =
                "f5812cabae4043eca1b983bbb55713ddf2426bcd513f6d92fc8281df4054cf6b";
            };
            beamDeps  = [ exrm_1_0_8 ];

            meta = {
              description = ''An OS X native VM builder thingy (work in
                            progress)'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/amorphid/drifter";
            };
          } // packageOverrides)
      ) {};

    drifter = drifter_0_0_0;

    driftwood_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, plug_1_3_5 }:
          buildMix ({
            name = "driftwood";
            version = "0.1.0";
            src = fetchHex {
              pkg = "driftwood";
              version = "0.1.0";
              sha256 =
                "f8d037399d95ccca7707f4b3a962da2c76f4c2c25f3b0d30de44d87dd5da3ced";
            };
            beamDeps  = [ plug_1_3_5 ];

            meta = {
              description = ''A log viewing plug which shows the latest logs
                            from your app'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/minhajuddin/driftwood";
            };
          } // packageOverrides)
      ) {};

    driftwood = driftwood_0_1_0;

    dropbox_0_0_7 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_3_0,
          jazz_0_2_1
        }:
          buildMix ({
            name = "dropbox";
            version = "0.0.7";
            src = fetchHex {
              pkg = "dropbox";
              version = "0.0.7";
              sha256 =
                "d881be0c042856e0b2ff446dfac0b64337f5cbbb18479f4c81080d3d2cd7e4af";
            };
            beamDeps  = [ hackney_1_3_0 jazz_0_2_1 ];

            meta = {
              description = ''A Dropbox Core API client for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ammmir/elixir-dropbox";
            };
          } // packageOverrides)
      ) {};

    dropbox = dropbox_0_0_7;

    druuid_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "druuid";
            version = "0.3.0";
            src = fetchHex {
              pkg = "druuid";
              version = "0.3.0";
              sha256 =
                "238dfa36cbb4f1277e44cd9ed5900ff3045c4c19724412bb94173ed2659d0ec8";
            };

            meta = {
              longDescription = ''Date-relative (and relatively universally
                                unique) UUID generation. Based on
                                https://github.com/recurly/druuid'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bhelx/druuid";
            };
          } // packageOverrides)
      ) {};

    druuid = druuid_0_3_0;

    dslhtml_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "dslhtml";
            version = "0.1.0";
            src = fetchHex {
              pkg = "dslhtml";
              version = "0.1.0";
              sha256 =
                "9959ff033ac89389c226ea8c36be07c16cf5d90290dd0c1a002b9c17183cde75";
            };

            meta = {
              description = ''DSL for HTML in Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/kenju/elixir_dsl_html";
            };
          } // packageOverrides)
      ) {};

    dslhtml = dslhtml_0_1_0;

    dtds_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ex_doc_0_15_1 }:
          buildMix ({
            name = "dtds";
            version = "0.1.0";
            src = fetchHex {
              pkg = "dtds";
              version = "0.1.0";
              sha256 =
                "3188da26e35f8609a119ca4bf050cf4e461c6691948aad728568dd333daa9cc5";
            };
            beamDeps  = [ ex_doc_0_15_1 ];

            meta = {
              longDescription = ''This app provides a distributed topic
                                discovery service. Producers and consumers of
                                topics register themselves with the service and
                                can query this information.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/faizoff/dtds";
            };
          } // packageOverrides)
      ) {};

    dtds = dtds_0_1_0;

    dublin_bus_api_0_1_11 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          floki_0_17_2,
          httpoison_0_11_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "dublin_bus_api";
            version = "0.1.11";
            src = fetchHex {
              pkg = "dublin_bus_api";
              version = "0.1.11";
              sha256 =
                "27e875fb3f5632f4013759e3dd06d18e9c4da09fcb3f37dcef383922e5008f2f";
            };
            beamDeps  = [ floki_0_17_2 httpoison_0_11_2 poison_2_2_0 ];

            meta = {
              description = ''Access to the Real Time Passenger Information
                            (RTPI) for Dublin Bus services.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/carlo-colombo/dublin-bus-api";
            };
          } // packageOverrides)
      ) {};

    dublin_bus_api = dublin_bus_api_0_1_11;

    duckduckgo_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_8_3,
          poison_2_2_0
        }:
          buildMix ({
            name = "duckduckgo";
            version = "0.1.0";
            src = fetchHex {
              pkg = "duckduckgo";
              version = "0.1.0";
              sha256 =
                "349fd4b837634507a8e11280c244b064d1eb4e0d3333994f79e5341eec522c2f";
            };
            beamDeps  = [ httpoison_0_8_3 poison_2_2_0 ];

            meta = {
              description = ''An Elixir client for the DuckDuckGo Instant
                            Answer API.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/pjhampton/DuckDuckElixir";
            };
          } // packageOverrides)
      ) {};

    duckduckgo = duckduckgo_0_1_0;

    dumballah_2_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "dumballah";
            version = "2.3.0";
            src = fetchHex {
              pkg = "dumballah";
              version = "2.3.0";
              sha256 =
                "abbb2dcdbf1f4006b35d58a8748ef955aa54b15721fadbd6005114cc91966d26";
            };

            meta = {
              description = ''Elixir library to manipulate Unix timestamps,
                            named after a voodoo Loa.'';
              license = stdenv.lib.licenses.gpl3;
              homepage = "https://github.com/ZuraGuerra/dumballah";
            };
          } // packageOverrides)
      ) {};

    dumballah = dumballah_2_3_0;

    duoweb_1_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "duoweb";
            version = "1.0.0";
            src = fetchHex {
              pkg = "duoweb";
              version = "1.0.0";
              sha256 =
                "b91b420fb2c90db1c91b23ebb14afc1497c6f1a4bfbbdb41e74ad8ca09f12bca";
            };

            meta = {
              description = ''Duo Security Web API Client'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/bunnylushington/erl_duoweb";
            };
          } // packageOverrides)
      ) {};

    duoweb = duoweb_1_0_0;

    duplex_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, dir_walker_0_0_6 }:
          buildMix ({
            name = "duplex";
            version = "0.1.1";
            src = fetchHex {
              pkg = "duplex";
              version = "0.1.1";
              sha256 =
                "997f8af7f720a18a874fcf4e12d2a9f0995b5198c25872b6a970629c517a2f18";
            };
            beamDeps  = [ dir_walker_0_0_6 ];

            meta = {
              longDescription = ''Duplex allows you to search for similar code
                                blocks inside your project. ## Usage ```elixir
                                iex -S mix Duplex.show_similar([\"lib\",
                                \"config\", \"web\"]) ```'';
              license = stdenv.lib.licenses.asl20;
            };
          } // packageOverrides)
      ) {};

    duplex = duplex_0_1_1;

    duplicate_code_finder_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, dir_walker_0_0_6 }:
          buildMix ({
            name = "duplicate_code_finder";
            version = "0.1.1";
            src = fetchHex {
              pkg = "duplicate_code_finder";
              version = "0.1.1";
              sha256 =
                "83d109dd229e0c165a554dfbf4f805026565bd9e312f544210b41870cf397820";
            };
            beamDeps  = [ dir_walker_0_0_6 ];

            meta = {
              longDescription = ''Duplicate Code Finder allows you to search
                                for similar code blocks inside your project. ##
                                Usage ```elixir iex -S mix
                                DuplicateCodeFinder.show_similar([\"lib\",
                                \"config\", \"web\"]) ```'';
              license = stdenv.lib.licenses.free;
            };
          } // packageOverrides)
      ) {};

    duplicate_code_finder = duplicate_code_finder_0_1_1;

    durga_transport_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "durga_transport";
            version = "1.0.1";
            src = fetchHex {
              pkg = "durga_transport";
              version = "1.0.1";
              sha256 =
                "42db857eba0e78c4eb15823b5137e8ccad13711cc2c873b6f1b469c4c0771009";
            };
             meta = {    };
          } // packageOverrides)
      ) {};

    durga_transport = durga_transport_1_0_1;

    dye_0_4_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "dye";
            version = "0.4.1";
            src = fetchHex {
              pkg = "dye";
              version = "0.4.1";
              sha256 =
                "d8bccef998e1b5800c7a433ea027df83103ae98c0be5a19d03216b320986bf74";
            };

            meta = {
              description = ''Dyeing your terminal!'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Kabie/dye";
            };
          } // packageOverrides)
      ) {};

    dye = dye_0_4_1;

    dynamic_compile_1_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "dynamic_compile";
            version = "1.0.0";
            src = fetchHex {
              pkg = "dynamic_compile";
              version = "1.0.0";
              sha256 =
                "eb73d8e9a6334914f79c15ee8214acad9659c42222d49beda3e8b6f6789a980a";
            };

            meta = {
              description = ''compile and load erlang modules from string
                            input'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/okeuday/dynamic_compile";
            };
          } // packageOverrides)
      ) {};

    dynamic_compile = dynamic_compile_1_0_0;

    e2qc_0_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "e2qc";
            version = "0.1.0";
            src = fetchHex {
              pkg = "e2qc";
              version = "0.1.0";
              sha256 =
                "3a97f9b3c60ec723002a816c041ac224dc5aba3360bd922c5e38cfd40f59c65b";
            };
            compilePorts = true;
            buildPlugins  = [ pc ];


            meta = {
              description = ''2q cache'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/project-fifo/e2qc";
            };
          } // packageOverrides)
      ) {};

    e2qc = e2qc_0_1_0;

    e_queue_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "e_queue";
            version = "1.0.1";
            src = fetchHex {
              pkg = "e_queue";
              version = "1.0.1";
              sha256 =
                "aff37843191c1229ec49d0d067b18d5e0871a28fe049a4a82c7884e66320b7e8";
            };

            meta = {
              longDescription = ''An Elixir wrapper around the Erlang optimized
                                `queue` that supports the FIFO, first-in
                                first-out, pattern. This is useful is when you
                                can`t predict when an item needs to be taken or
                                added to the queue. Use this instead of using
                                `++` or double reversing lists to add items to
                                the \"back\" of a queue.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/benfalk/e_queue";
            };
          } // packageOverrides)
      ) {};

    e_queue = e_queue_1_0_1;

    e_quip_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_8_3,
          poison_2_2_0
        }:
          buildMix ({
            name = "e_quip";
            version = "0.0.1";
            src = fetchHex {
              pkg = "e_quip";
              version = "0.0.1";
              sha256 =
                "e6fe9eeb96dbc863b527a792e730ea41aea43caef2a5db68ea2c4c9fc21f552a";
            };
            beamDeps  = [ httpoison_0_8_3 poison_2_2_0 ];

            meta = {
              description = ''Simple Quip API Client'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/mmartinson/e_quip";
            };
          } // packageOverrides)
      ) {};

    e_quip = e_quip_0_0_1;

    earmark_0_1_19 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "earmark";
            version = "0.1.19";
            src = fetchHex {
              pkg = "earmark";
              version = "0.1.19";
              sha256 =
                "db85f989ba3030d40d3a901d7eebbf926ee07355bf6113d730b8aaf9404a6bd7";
            };

            meta = {
              longDescription = ''Earmark is a pure-Elixir Markdown converter.
                                It is intended to be used as a library (just
                                call Earmark.as_html), but can also be used as a
                                command-line tool (run mix escript.build first).
                                Output generation is pluggable.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/pragdave/earmark";
            };
          } // packageOverrides)
      ) {};

    earmark_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "earmark";
            version = "0.2.1";
            src = fetchHex {
              pkg = "earmark";
              version = "0.2.1";
              sha256 =
                "c86afb8d22a5aa8315afd4257c7512011c0c9a48b0fea43af7612836b958098b";
            };

            meta = {
              longDescription = ''Earmark is a pure-Elixir Markdown converter.
                                It is intended to be used as a library (just
                                call Earmark.as_html), but can also be used as a
                                command-line tool (run mix escript.build first).
                                Output generation is pluggable.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/pragdave/earmark";
            };
          } // packageOverrides)
      ) {};

    earmark_1_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "earmark";
            version = "1.1.1";
            src = fetchHex {
              pkg = "earmark";
              version = "1.1.1";
              sha256 =
                "d446a8ffea9968237fcada883303ac6e04a00a1dc41039061645eea9e7af65a0";
            };

            meta = {
              longDescription = ''Earmark is a pure-Elixir Markdown converter.
                                It is intended to be used as a library (just
                                call Earmark.as_html), but can also be used as a
                                command-line tool (run mix escript.build first).
                                Output generation is pluggable.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/pragdave/earmark";
            };
          } // packageOverrides)
      ) {};

    earmark_1_2_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "earmark";
            version = "1.2.2";
            src = fetchHex {
              pkg = "earmark";
              version = "1.2.2";
              sha256 =
                "59514c4a207f9f25c5252e09974367718554b6a0f41fe39f7dc232168f9cb309";
            };

            meta = {
              longDescription = ''Earmark is a pure-Elixir Markdown converter.
                                It is intended to be used as a library (just
                                call Earmark.as_html), but can also be used as a
                                command-line tool (run mix escript.build first).
                                Output generation is pluggable.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/pragdave/earmark";
            };
          } // packageOverrides)
      ) {};

    earmark = earmark_1_2_2;

    earmark_tag_cloud_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, earmark_1_2_2 }:
          buildMix ({
            name = "earmark_tag_cloud";
            version = "0.1.0";
            src = fetchHex {
              pkg = "earmark_tag_cloud";
              version = "0.1.0";
              sha256 =
                "6789186a4c3a2d1857944c20c36d4834e4f15a23ebc02450cbce3ea38d6b8f07";
            };
            beamDeps  = [ earmark_1_2_2 ];

            meta = {
              longDescription = ''EarmarkTagCloud is a plugin for Earmark
                                allowing for simple Tag Cloud generation.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/RobertDober/earmark_tag_cloud";
            };
          } // packageOverrides)
      ) {};

    earmark_tag_cloud = earmark_tag_cloud_0_1_0;

    ease_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ease";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ease";
              version = "0.1.0";
              sha256 =
                "94e954dd0dad89b363d6289f8cc4a95cab1c0490cc6f2d4388e7d5afc637f42f";
            };

            meta = {
              description = ''Simple implementation of standard animation
                            easing functions.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jamesotron/ease.ex";
            };
          } // packageOverrides)
      ) {};

    ease = ease_0_1_0;

    eastar_0_4_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "eastar";
            version = "0.4.2";
            src = fetchHex {
              pkg = "eastar";
              version = "0.4.2";
              sha256 =
                "e276abdda27ae0727fb19022ef537dce3f66bb8a3f6c395b3b22021beaed2441";
            };

            meta = {
              longDescription = ''Eastar is a pure-Elixir implementation of A*
                                graph pathfinding algorithm. All graph
                                environment, like nodes connectivity, distance &
                                H-metric are abstracted away - you provide them
                                as functions.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "http://github.com/herenowcoder/eastar";
            };
          } // packageOverrides)
      ) {};

    eastar = eastar_0_4_2;

    easy_server_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "easy_server";
            version = "0.0.1";
            src = fetchHex {
              pkg = "easy_server";
              version = "0.0.1";
              sha256 =
                "af9faac0c7c440cf04bbb5d1f8aea1fc00b0c60da384c8103fafdaf0df00a0bb";
            };

            meta = {
              description = ''Easier GenServer for Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/termoose/EasyServer";
            };
          } // packageOverrides)
      ) {};

    easy_server = easy_server_0_0_1;

    easypost_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_1_5_2 }:
          buildMix ({
            name = "easypost";
            version = "0.0.1";
            src = fetchHex {
              pkg = "easypost";
              version = "0.0.1";
              sha256 =
                "8339fcfb60a1d4833b99aa611d194bf1ae94f22509dc81cf90d07ee2db0e074e";
            };
            beamDeps  = [ poison_1_5_2 ];

            meta = {
              description = ''Elixir Easypost Client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Dania02525/easypost";
            };
          } // packageOverrides)
      ) {};

    easypost = easypost_0_0_1;

    eavro_0_0_5 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          jsx_2_8_2,
          ranch_1_3_2,
          zlists_0_0_4
        }:
          buildRebar3 ({
            name = "eavro";
            version = "0.0.5";
            src = fetchHex {
              pkg = "eavro";
              version = "0.0.5";
              sha256 =
                "d76ef4983a6ec7220898854bfe8b62a885c2cccfd6dc4294f16418981d482e23";
            };

            beamDeps  = [ jsx_2_8_2 ranch_1_3_2 zlists_0_0_4 ];

            meta = {
              description = ''Apache Avro encoder/decoder and RPC protocol'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/SIfoxDevTeam/eavro";
            };
          } // packageOverrides)
      ) {};

    eavro = eavro_0_0_5;

    ebayka_0_2_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0,
          sweet_xml_0_6_5,
          xml_builder_0_1_1
        }:
          buildMix ({
            name = "ebayka";
            version = "0.2.1";
            src = fetchHex {
              pkg = "ebayka";
              version = "0.2.1";
              sha256 =
                "29289af6ce4a0b8074564c8e279f73fb64938a1406d30ca613380bf06e03e92c";
            };
            beamDeps  = [
                          httpoison_0_11_2
                          poison_3_1_0
                          sweet_xml_0_6_5
                          xml_builder_0_1_1
                        ];

            meta = {
              description = ''A small library to help using the eBay Trading
                            API with Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/GaussGroup/ebayka";
            };
          } // packageOverrides)
      ) {};

    ebayka = ebayka_0_2_1;

    ebitmap_0_1_5 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, cf_0_2_2 }:
          buildRebar3 ({
            name = "ebitmap";
            version = "0.1.5";
            src = fetchHex {
              pkg = "ebitmap";
              version = "0.1.5";
              sha256 =
                "031c4ba347c35d2c28937f1ff301dc083952b89cd37c8906a37371ef2f74b9f1";
            };

            beamDeps  = [ cf_0_2_2 ];

            meta = {
              description = ''An erlang library for working with bitmaps'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dalmatinerdb/bitmap";
            };
          } // packageOverrides)
      ) {};

    ebitmap = ebitmap_0_1_5;

    ebs_1_0_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "ebs";
            version = "1.0.3";
            src = fetchHex {
              pkg = "ebs";
              version = "1.0.3";
              sha256 =
                "8e3e2d779c8a684f054f94c1a4a284db1568013d4f2cfc39df0931ad48286dda";
            };

            meta = {
              description = ''C-like string and ctype functions for Erlang
                            binary strings.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/SirWumpus/erlang-bs";
            };
          } // packageOverrides)
      ) {};

    ebs_1_1_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "ebs";
            version = "1.1.1";
            src = fetchHex {
              pkg = "ebs";
              version = "1.1.1";
              sha256 =
                "a2c59b12699a4a643c4461f6ad8d302b7014e9ae823dd6843eecb35e95f3bc3c";
            };

            meta = {
              description = ''C-like string and ctype functions for Erlang
                            binary strings.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/SirWumpus/erlang-bs";
            };
          } // packageOverrides)
      ) {};

    ebs_1_1_2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "ebs";
            version = "1.1.2";
            src = fetchHex {
              pkg = "ebs";
              version = "1.1.2";
              sha256 =
                "3895a1d3e72abfbb7f812ce9faed5c9a091444bf63ed996e15214c48ddc0c280";
            };

            meta = {
              description = ''C-like string and ctype functions for Erlang
                            binary strings.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/SirWumpus/erlang-bs";
            };
          } // packageOverrides)
      ) {};

    ebs_1_1_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "ebs";
            version = "1.1.3";
            src = fetchHex {
              pkg = "ebs";
              version = "1.1.3";
              sha256 =
                "5a508509ae5ea89a0e1e9487bb783b2b2437037da2985bb80ce0b218c6b87f90";
            };

            meta = {
              description = ''C-like string and ctype functions for Erlang
                            binary strings.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/SirWumpus/erlang-bs";
            };
          } // packageOverrides)
      ) {};

    ebs_1_1_4 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "ebs";
            version = "1.1.4";
            src = fetchHex {
              pkg = "ebs";
              version = "1.1.4";
              sha256 =
                "d9d6311d043d9f538528bbd53bf228b146741c689285bf6198990daa42c29037";
            };

            meta = {
              description = ''C-like string and ctype functions for Erlang
                            binary strings.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/SirWumpus/erlang-bs";
            };
          } // packageOverrides)
      ) {};

    ebs_1_1_5 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "ebs";
            version = "1.1.5";
            src = fetchHex {
              pkg = "ebs";
              version = "1.1.5";
              sha256 =
                "df0b845d6c901940e6cdcc3928d662841ad032916685ee20121755d6da2dccd8";
            };

            meta = {
              description = ''C-like string and ctype functions for Erlang
                            binary strings.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/SirWumpus/erlang-bs";
            };
          } // packageOverrides)
      ) {};

    ebs_1_2_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "ebs";
            version = "1.2.0";
            src = fetchHex {
              pkg = "ebs";
              version = "1.2.0";
              sha256 =
                "e4052c05aff1b6d263d99336e7310a92b0c1999ed692b80022f4d0d78cc6b091";
            };

            meta = {
              description = ''C-like string and ctype functions for Erlang
                            binary strings.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/SirWumpus/erlang-bs";
            };
          } // packageOverrides)
      ) {};

    ebs_1_3_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "ebs";
            version = "1.3.0";
            src = fetchHex {
              pkg = "ebs";
              version = "1.3.0";
              sha256 =
                "9e719dcc58fc4ba75c52846442bc22d3fb0622ae84825295a31bbd80c8a4ec4e";
            };

            meta = {
              description = ''C-like string and ctype functions for Erlang
                            binary strings.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/SirWumpus/erlang-bs";
            };
          } // packageOverrides)
      ) {};

    ebs = ebs_1_3_0;

    ec2_0_9_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, jsx_2_8_2 }:
          buildMix ({
            name = "ec2";
            version = "0.9.1";
            src = fetchHex {
              pkg = "ec2";
              version = "0.9.1";
              sha256 =
                "ae857fe633bca078fd1ee54232dd3bc74566ff46b93aa53e38d74c546c3d9b6f";
            };
            beamDeps  = [ jsx_2_8_2 ];

            meta = {
              description = ''helper library for working with aws ec2
                            metadata'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/talentdeficit/ec2";
            };
          } // packageOverrides)
      ) {};

    ec2 = ec2_0_9_1;

    ec_cart_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ec_cart";
            version = "0.1.3";
            src = fetchHex {
              pkg = "ec_cart";
              version = "0.1.3";
              sha256 =
                "e1a0121ef1c38f6df31a6eba81ea9312394c2c254897c5fadf329b3672922bb6";
            };

            meta = {
              description = ''E-commerce cart for Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ramortegui/ec_cart";
            };
          } // packageOverrides)
      ) {};

    ec_cart = ec_cart_0_1_3;

    ecat_1_0_0 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          ebs_1_0_3,
          egetopt_1_0_0
        }:
          buildRebar3 ({
            name = "ecat";
            version = "1.0.0";
            src = fetchHex {
              pkg = "ecat";
              version = "1.0.0";
              sha256 =
                "f8716b28943d0f1e052c3f7b6bf01acf98d70e5bcc74fe3df867f1ce38bfc762";
            };

            beamDeps  = [ ebs_1_0_3 egetopt_1_0_0 ];

            meta = {
              description = ''Erlang version of cat(1)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/SirWumpus/erlang-cat";
            };
          } // packageOverrides)
      ) {};

    ecat = ecat_1_0_0;

    ecc_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ecc";
            version = "0.1.3";
            src = fetchHex {
              pkg = "ecc";
              version = "0.1.3";
              sha256 =
                "0255ffe6e2b2cbbc2445ec7de6d29e16b6b6d8eaf0a6ae99a299cc79162541db";
            };

            meta = {
              longDescription = ''An elixir module for elliptic curve
                                cryptography. It can be used either as a library
                                or as a GenServer-Task for signing messages and
                                verifying signatures with a public key. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/farao/elixir-ecc";
            };
          } // packageOverrides)
      ) {};

    ecc = ecc_0_1_3;

    ecdo_0_1_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_1_0_7,
          mariaex_0_8_2,
          postgrex_1_0_0_rc_1
        }:
          buildMix ({
            name = "ecdo";
            version = "0.1.4";
            src = fetchHex {
              pkg = "ecdo";
              version = "0.1.4";
              sha256 =
                "362c75113bca6c8379ac2b1654ae78ed099ab0faee4a1fbacb7b4b9b137b9f1d";
            };
            beamDeps  = [ ecto_1_0_7 mariaex_0_8_2 postgrex_1_0_0_rc_1 ];

            meta = {
              longDescription = ''Ecdo is a dynamic interface for ecto aims to
                                simplify building dynamic query API based on
                                ecto models.'';

              homepage = "https://github.com/xerions/ecdo";
            };
          } // packageOverrides)
      ) {};

    ecdo = ecdo_0_1_4;

    echo_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "echo";
            version = "0.2.0";
            src = fetchHex {
              pkg = "echo";
              version = "0.2.0";
              sha256 =
                "e03b37ada0457fbf3e91b2e721c9367b1590a17a5fb9be35672a46206309f1a4";
            };

            meta = {
              longDescription = ''A simple & highly extendable,
                                meta-notification system; Echo checks
                                notification preferences & dispatch
                                notifications to different adapters (ex. email,
                                logger, analytics, sms, etc.)'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/zmoshansky/echo";
            };
          } // packageOverrides)
      ) {};

    echo = echo_0_2_0;

    echo_bot_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          gproc_0_5_0,
          poison_2_2_0,
          telegram_0_0_3
        }:
          buildMix ({
            name = "echo_bot";
            version = "0.0.2";
            src = fetchHex {
              pkg = "echo_bot";
              version = "0.0.2";
              sha256 =
                "f353984ab5ea36b423b2a18d788d5eeeb6ae45aca254129b99c5bbab9865b38c";
            };
            beamDeps  = [ gproc_0_5_0 poison_2_2_0 telegram_0_0_3 ];

            meta = {
              description = ''A demo telegram bot'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/col/echo_bot";
            };
          } // packageOverrides)
      ) {};

    echo_bot = echo_bot_0_0_2;

    echonest_ex_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_8_3,
          poison_1_5_2
        }:
          buildMix ({
            name = "echonest_ex";
            version = "0.0.2";
            src = fetchHex {
              pkg = "echonest_ex";
              version = "0.0.2";
              sha256 =
                "d8b3d7f2b04eb48b689877aaf9db30f33acea3ea02daca5aad8d105ac785bd98";
            };
            beamDeps  = [ httpoison_0_8_3 poison_1_5_2 ];

            meta = {
              description = ''Echonest api wrapper for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/desmondhume/echonest_ex";
            };
          } // packageOverrides)
      ) {};

    echonest_ex = echonest_ex_0_0_2;

    ecimd2_0_0_8 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "ecimd2";
            version = "0.0.8";
            src = fetchHex {
              pkg = "ecimd2";
              version = "0.0.8";
              sha256 =
                "ed45e1eb5bd0747d44bb0167046d70f12c6c3b699ff29a9ac248b8655fd0ed6b";
            };

            meta = {
              description = ''CIMD2 client (SME) for Erlang'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/VoyagerInnovations/esmpp";
            };
          } // packageOverrides)
      ) {};

    ecimd2 = ecimd2_0_0_8;

    ecomm_1_0_2 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          ebs_1_1_5,
          egetopt_1_0_0
        }:
          buildRebar3 ({
            name = "ecomm";
            version = "1.0.2";
            src = fetchHex {
              pkg = "ecomm";
              version = "1.0.2";
              sha256 =
                "a2789052de9125ac880f40d91f9efa3f4cf5bd00a7362690828c4c2642e296f4";
            };

            beamDeps  = [ ebs_1_1_5 egetopt_1_0_0 ];

            meta = {
              description = ''Erlang version of comm(1)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/SirWumpus/erlang-comm";
            };
          } // packageOverrides)
      ) {};

    ecomm = ecomm_1_0_2;

    econfig_0_7_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "econfig";
            version = "0.7.3";
            src = fetchHex {
              pkg = "econfig";
              version = "0.7.3";
              sha256 =
                "bddff19a757209d3e98b6952897fbf8790f6cf33d9e5caf2501263ea4ad46e3c";
            };

            meta = {
              description = ''simple Erlang config handler using INI files'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/benoitc/econfig";
            };
          } // packageOverrides)
      ) {};

    econfig = econfig_0_7_3;

    ecrontab_0_3_2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "ecrontab";
            version = "0.3.2";
            src = fetchHex {
              pkg = "ecrontab";
              version = "0.3.2";
              sha256 =
                "29c8a2116c78725fa600a2f30cbc0cccac5372ed71ec09165a0ff5a836f77ce2";
            };

            meta = {
              description = ''crontab for erlang'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/feng19/ecrontab";
            };
          } // packageOverrides)
      ) {};

    ecrontab = ecrontab_0_3_2;

    ecs_0_5_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ecs";
            version = "0.5.0";
            src = fetchHex {
              pkg = "ecs";
              version = "0.5.0";
              sha256 =
                "d32507f2c42ec2d812349bbee69c4b0adcb35dc3f6bbac983336d13ec0c8dc4a";
            };

            meta = {
              description = ''An experimental Entity-Component System (ECS)
                            game engine.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/joshforisha/ecs";
            };
          } // packageOverrides)
      ) {};

    ecs = ecs_0_5_0;

    ecto_0_2_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          decimal_1_3_0,
          poolboy_1_2_1,
          postgrex_0_6_0
        }:
          buildMix ({
            name = "ecto";
            version = "0.2.4";
            src = fetchHex {
              pkg = "ecto";
              version = "0.2.4";
              sha256 =
                "b6918fb8a0b72220238832616c42937ac04d2f8016d687b53e3a241234cae4f3";
            };
            beamDeps  = [ decimal_1_3_0 poolboy_1_2_1 postgrex_0_6_0 ];

            meta = {
              description = ''A database wrapper and language integrated query
                            for Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/elixir-ecto/ecto";
            };
          } // packageOverrides)
      ) {};

    ecto_1_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          decimal_1_3_1,
          mariaex_0_4_4,
          poison_1_5_2,
          poolboy_1_5_1,
          postgrex_0_9_1,
          sbroker_1_0_0_beta_5
        }:
          buildMix ({
            name = "ecto";
            version = "1.0.1";
            src = fetchHex {
              pkg = "ecto";
              version = "1.0.1";
              sha256 =
                "f81deba17a639045b37f2f4241b718ce94b45cf1e4ef6bbd7ab880e9f7141ed6";
            };
            beamDeps  = [
                          decimal_1_3_1
                          mariaex_0_4_4
                          poison_1_5_2
                          poolboy_1_5_1
                          postgrex_0_9_1
                          sbroker_1_0_0_beta_5
                        ];

            meta = {
              description = ''A database wrapper and language integrated query
                            for Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/elixir-ecto/ecto";
            };
          } // packageOverrides)
      ) {};

    ecto_1_0_7 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          decimal_1_3_1,
          mariaex_0_4_4,
          poison_1_5_2,
          poolboy_1_5_1,
          postgrex_0_9_1,
          sbroker_1_0_0_beta_5
        }:
          buildMix ({
            name = "ecto";
            version = "1.0.7";
            src = fetchHex {
              pkg = "ecto";
              version = "1.0.7";
              sha256 =
                "d56766fb8e93dcec7e6dd9ef8bfe624b9b6d1f3a433fac4f0e7532681f501086";
            };
            beamDeps  = [
                          decimal_1_3_1
                          mariaex_0_4_4
                          poison_1_5_2
                          poolboy_1_5_1
                          postgrex_0_9_1
                          sbroker_1_0_0_beta_5
                        ];

            meta = {
              description = ''A database wrapper and language integrated query
                            for Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/elixir-ecto/ecto";
            };
          } // packageOverrides)
      ) {};

    ecto_1_1_9 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          decimal_1_3_1,
          mariaex_0_3_2,
          poison_1_0_2,
          poolboy_1_5_1,
          postgrex_0_11_2,
          sbroker_1_0_0_beta_5
        }:
          buildMix ({
            name = "ecto";
            version = "1.1.9";
            src = fetchHex {
              pkg = "ecto";
              version = "1.1.9";
              sha256 =
                "f8419edfd3fae6fb1917a449f6d70a4ce061d9fdc2ca91a4ff4643768d3abc88";
            };
            beamDeps  = [
                          decimal_1_3_1
                          mariaex_0_3_2
                          poison_1_0_2
                          poolboy_1_5_1
                          postgrex_0_11_2
                          sbroker_1_0_0_beta_5
                        ];

            meta = {
              description = ''A database wrapper and language integrated query
                            for Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/elixir-ecto/ecto";
            };
          } // packageOverrides)
      ) {};

    ecto_2_0_0_rc_6 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          decimal_1_3_1,
          mariaex_0_7_9,
          poison_1_0_2,
          poolboy_1_5_1,
          postgrex_0_11_2,
          sbroker_1_0_0
        }:
          buildMix ({
            name = "ecto";
            version = "2.0.0-rc.6";
            src = fetchHex {
              pkg = "ecto";
              version = "2.0.0-rc.6";
              sha256 =
                "7e9b734b84500650c4c61f8e9d18b2fe9f2363c5012015d81cbaf6ebfba4dd8c";
            };
            beamDeps  = [
                          decimal_1_3_1
                          mariaex_0_7_9
                          poison_1_0_2
                          poolboy_1_5_1
                          postgrex_0_11_2
                          sbroker_1_0_0
                        ];

            meta = {
              description = ''A database wrapper and language integrated query
                            for Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/elixir-ecto/ecto";
            };
          } // packageOverrides)
      ) {};

    ecto_2_1_0_rc_5 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          db_connection_1_1_2,
          decimal_1_3_1,
          mariaex_0_8_2,
          poison_1_0_2,
          poolboy_1_5_1,
          postgrex_0_13_3,
          sbroker_1_0_0
        }:
          buildMix ({
            name = "ecto";
            version = "2.1.0-rc.5";
            src = fetchHex {
              pkg = "ecto";
              version = "2.1.0-rc.5";
              sha256 =
                "35aeaf3ed14d2d2d1b133e72308fd7064611e8db49fa7c76c310f8d6c957f4bf";
            };
            beamDeps  = [
                          db_connection_1_1_2
                          decimal_1_3_1
                          mariaex_0_8_2
                          poison_1_0_2
                          poolboy_1_5_1
                          postgrex_0_13_3
                          sbroker_1_0_0
                        ];

            meta = {
              description = ''A database wrapper and language integrated query
                            for Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/elixir-ecto/ecto";
            };
          } // packageOverrides)
      ) {};

    ecto_2_1_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          db_connection_1_1_2,
          decimal_1_3_1,
          mariaex_0_8_2,
          poison_1_0_2,
          poolboy_1_5_1,
          postgrex_0_13_3,
          sbroker_1_0_0
        }:
          buildMix ({
            name = "ecto";
            version = "2.1.4";
            src = fetchHex {
              pkg = "ecto";
              version = "2.1.4";
              sha256 =
                "49bc281e1bce99973ee90917c4b994f994323d99d74374532003c0579a38d945";
            };
            beamDeps  = [
                          db_connection_1_1_2
                          decimal_1_3_1
                          mariaex_0_8_2
                          poison_1_0_2
                          poolboy_1_5_1
                          postgrex_0_13_3
                          sbroker_1_0_0
                        ];

            meta = {
              description = ''A database wrapper and language integrated query
                            for Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/elixir-ecto/ecto";
            };
          } // packageOverrides)
      ) {};

    ecto = ecto_2_1_4;

    ecto_audit_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ecto_audit";
            version = "0.0.1";
            src = fetchHex {
              pkg = "ecto_audit";
              version = "0.0.1";
              sha256 =
                "04829a9670d4258b96c6218043093b68a1d3b03c37ee316a1c19366a59dbbd59";
            };

            meta = {
              description = ''Ecto extension to support auditing data changes
                            in your Schema.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mattweldon/ecto_audit";
            };
          } // packageOverrides)
      ) {};

    ecto_audit = ecto_audit_0_0_1;

    ecto_autoslug_field_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_4,
          slugger_0_2_0
        }:
          buildMix ({
            name = "ecto_autoslug_field";
            version = "0.3.0";
            src = fetchHex {
              pkg = "ecto_autoslug_field";
              version = "0.3.0";
              sha256 =
                "e8c0f1269d9c7a6deaa324bcc6b3b37d80dec3e5d06285d28ed834c77d8c0807";
            };
            beamDeps  = [ ecto_2_1_4 slugger_0_2_0 ];

            meta = {
              description = ''Autoslug field for Ecto.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sobolevn/ecto_autoslug_field";
            };
          } // packageOverrides)
      ) {};

    ecto_autoslug_field = ecto_autoslug_field_0_3_0;

    ecto_cassandra_1_0_0_beta_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cassandra_1_0_0_beta,
          ecto_2_1_4
        }:
          buildMix ({
            name = "ecto_cassandra";
            version = "1.0.0-beta.3";
            src = fetchHex {
              pkg = "ecto_cassandra";
              version = "1.0.0-beta.3";
              sha256 =
                "fd365e65672f491da12d823259ff295e58deb298377f4818cde31b973970d37f";
            };
            beamDeps  = [ cassandra_1_0_0_beta ecto_2_1_4 ];

            meta = {
              description = ''Cassandra Adapter for Ecto'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/cafebazaar/ecto-cassandra";
            };
          } // packageOverrides)
      ) {};

    ecto_cassandra = ecto_cassandra_1_0_0_beta_3;

    ecto_cast_int_to_string_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ecto_2_1_4 }:
          buildMix ({
            name = "ecto_cast_int_to_string";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ecto_cast_int_to_string";
              version = "0.1.0";
              sha256 =
                "533efd288dca18de6147a610db1a0b09fdb498cf29fd8580de44ce660b491655";
            };
            beamDeps  = [ ecto_2_1_4 ];

            meta = {
              longDescription = ''EctoCastIntToString is a simple library that
                                enables ecto casting from int to string.'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/luizParreira/ecto_cast_int_to_string";
            };
          } // packageOverrides)
      ) {};

    ecto_cast_int_to_string = ecto_cast_int_to_string_0_1_0;

    ecto_cast_to_string_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ecto_2_1_4 }:
          buildMix ({
            name = "ecto_cast_to_string";
            version = "0.1.1";
            src = fetchHex {
              pkg = "ecto_cast_to_string";
              version = "0.1.1";
              sha256 =
                "a4652d0ae5c617125ec851e3f3af9a7afe3e40f98d2701f6a94af0d9e10848cb";
            };
            beamDeps  = [ ecto_2_1_4 ];

            meta = {
              longDescription = ''EctoCastToString is a simple library that
                                enables ecto casting from int/float to
                                string.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/luizParreira/ecto_cast_to_string";
            };
          } // packageOverrides)
      ) {};

    ecto_cast_to_string = ecto_cast_to_string_0_1_1;

    ecto_cursor_pagination_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ecto_2_1_4 }:
          buildMix ({
            name = "ecto_cursor_pagination";
            version = "0.1.1";
            src = fetchHex {
              pkg = "ecto_cursor_pagination";
              version = "0.1.1";
              sha256 =
                "82fd1dee76710c82ccbe62d295bf06b95f139589bd276796c14fdc27294a59dd";
            };
            beamDeps  = [ ecto_2_1_4 ];

            meta = {
              description = ''Ecto Library for cursor pagination.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/bleacherreport/ecto_cursor_pagination";
            };
          } // packageOverrides)
      ) {};

    ecto_cursor_pagination = ecto_cursor_pagination_0_1_1;

    ecto_enum_1_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_4,
          mariaex_0_8_2,
          postgrex_0_13_3
        }:
          buildMix ({
            name = "ecto_enum";
            version = "1.0.1";
            src = fetchHex {
              pkg = "ecto_enum";
              version = "1.0.1";
              sha256 =
                "438a237c687aa14a18f7c7106f59dde165597964fed95be590ed33a0458f3229";
            };
            beamDeps  = [ ecto_2_1_4 mariaex_0_8_2 postgrex_0_13_3 ];

            meta = {
              description = ''Ecto extension to support enums in models'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gjaldon/ecto_enum";
            };
          } // packageOverrides)
      ) {};

    ecto_enum = ecto_enum_1_0_1;

    ecto_factory_0_0_6 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ecto_2_1_4 }:
          buildMix ({
            name = "ecto_factory";
            version = "0.0.6";
            src = fetchHex {
              pkg = "ecto_factory";
              version = "0.0.6";
              sha256 =
                "4d7d952444a0947bd5ef3970c28c9287465743f374adad310a3ca085d6b20319";
            };
            beamDeps  = [ ecto_2_1_4 ];

            meta = {
              description = ''Easily generate structs based on your ecto
                            schemas.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/mrmicahcooper/ecto_factory";
            };
          } // packageOverrides)
      ) {};

    ecto_factory = ecto_factory_0_0_6;

    ecto_fields_0_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ecto_2_1_4 }:
          buildMix ({
            name = "ecto_fields";
            version = "0.0.4";
            src = fetchHex {
              pkg = "ecto_fields";
              version = "0.0.4";
              sha256 =
                "a5f49cf9b27aa3b136f90826faa887920f3ad87aea28abc9594df2e71a70b948";
            };
            beamDeps  = [ ecto_2_1_4 ];

            meta = {
              description = ''Provides commonly used fields for Ecto
                            projects.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jerel/ecto_fields";
            };
          } // packageOverrides)
      ) {};

    ecto_fields = ecto_fields_0_0_4;

    ecto_fixtures_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, uuid_1_1_7 }:
          buildMix ({
            name = "ecto_fixtures";
            version = "0.0.2";
            src = fetchHex {
              pkg = "ecto_fixtures";
              version = "0.0.2";
              sha256 =
                "64e7ea208763fbcfb089ae8693fddcbe45c70ce2879614ad4edf883ca33ce061";
            };
            beamDeps  = [ uuid_1_1_7 ];

            meta = {
              longDescription = ''Ecto Fixtures provides a simple DSL for
                                quickly creating fixture data for your test
                                suite.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dockyard/ecto_fixtures";
            };
          } // packageOverrides)
      ) {};

    ecto_fixtures = ecto_fixtures_0_0_2;

    ecto_generator_9_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ecto_generator";
            version = "9.0.0";
            src = fetchHex {
              pkg = "ecto_generator";
              version = "9.0.0";
              sha256 =
                "ed33cee148f59bf449cbd600123d545d881e9d27076ed30f9f711f927ae2748b";
            };

            meta = {
              description = ''Generate Ecto schemas from existing database in
                            Phoenix - Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "http://www.alexandrubagu.info";
            };
          } // packageOverrides)
      ) {};

    ecto_generator = ecto_generator_9_0_0;

    ecto_gettext_0_1_6 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_1_1_9,
          gettext_0_13_1
        }:
          buildMix ({
            name = "ecto_gettext";
            version = "0.1.6";
            src = fetchHex {
              pkg = "ecto_gettext";
              version = "0.1.6";
              sha256 =
                "9b632ee89b9fc6d0ce366f41b70bf985367db5b54e5857ffe0c8c4fc932b0bcd";
            };
            beamDeps  = [ ecto_1_1_9 gettext_0_13_1 ];

            meta = {
              description = ''EctoGettext - library for localization Ecto
                            validation errors with using Gettext'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/exbugs-elixir/ecto_gettext";
            };
          } // packageOverrides)
      ) {};

    ecto_gettext = ecto_gettext_0_1_6;

    ecto_homoiconic_enum_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_4,
          postgrex_1_0_0_rc_1
        }:
          buildMix ({
            name = "ecto_homoiconic_enum";
            version = "0.1.1";
            src = fetchHex {
              pkg = "ecto_homoiconic_enum";
              version = "0.1.1";
              sha256 =
                "1c562ad7d37ea28639eb74e86d92f2930a50c23880f76766c19d2d64b2ddeb56";
            };
            beamDeps  = [ ecto_2_1_4 postgrex_1_0_0_rc_1 ];

            meta = {
              longDescription = ''Adds support for enumerated types to Ecto.
                                Unlike ecto_enum, these enums assume the
                                database will take and return the enum`s values
                                by their string representations.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/meetwalter/ecto_homoiconic_enum";
            };
          } // packageOverrides)
      ) {};

    ecto_homoiconic_enum = ecto_homoiconic_enum_0_1_1;

    ecto_hstore_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ecto_2_1_4 }:
          buildMix ({
            name = "ecto_hstore";
            version = "0.0.1";
            src = fetchHex {
              pkg = "ecto_hstore";
              version = "0.0.1";
              sha256 =
                "0dca7ad14d0fa42038594e00a6f1e1fb3476644f71299f9e4ca10f1b9d6098cb";
            };
            beamDeps  = [ ecto_2_1_4 ];

            meta = {
              description = ''Ecto.Hstore adds Postgres Hstore compatibility to
                            Ecto. '';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/stavro/ecto_hstore";
            };
          } // packageOverrides)
      ) {};

    ecto_hstore = ecto_hstore_0_0_1;

    ecto_instashard_0_2_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          earmark_1_2_2,
          ecto_2_1_0_rc_5,
          postgrex_0_13_0_rc_0
        }:
          buildMix ({
            name = "ecto_instashard";
            version = "0.2.1";
            src = fetchHex {
              pkg = "ecto_instashard";
              version = "0.2.1";
              sha256 =
                "b7cd09baada058a88c13573ef06d45bda03136a352a66083e315bbc54c3b45fd";
            };
            beamDeps  = [ earmark_1_2_2 ecto_2_1_0_rc_5 postgrex_0_13_0_rc_0
                      ];

            meta = {
              description = ''Dynamic Instagram-like PostgreSQL sharding with
                            Ecto'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/alfredbaudisch/ecto_instashard";
            };
          } // packageOverrides)
      ) {};

    ecto_instashard = ecto_instashard_0_2_1;

    ecto_it_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_4,
          mariaex_0_8_2,
          postgrex_1_0_0_rc_1
        }:
          buildMix ({
            name = "ecto_it";
            version = "0.2.0";
            src = fetchHex {
              pkg = "ecto_it";
              version = "0.2.0";
              sha256 =
                "ddbf27e85547b9812d7b49bc2252b4667468582b174045ba2bb1a804d209a860";
            };
            beamDeps  = [ ecto_2_1_4 mariaex_0_8_2 postgrex_1_0_0_rc_1 ];

            meta = {
              longDescription = ''Ecto IT is library for writing integration
                                tests(with database backend) for ecto-based
                                applications.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/xerions/ecto_it";
            };
          } // packageOverrides)
      ) {};

    ecto_it = ecto_it_0_2_0;

    ecto_lazy_float_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ecto_2_1_4 }:
          buildMix ({
            name = "ecto_lazy_float";
            version = "0.1.2";
            src = fetchHex {
              pkg = "ecto_lazy_float";
              version = "0.1.2";
              sha256 =
                "76f14bf8d2bf52e3143c79fdf0e9d9bbb2fb1b087e847b13347e52e5b0c5da94";
            };
            beamDeps  = [ ecto_2_1_4 ];

            meta = {
              description = ''Ecto.LazyFloat takes integer, strings, and floats
                            and casts them to floats. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/joshdholtz/ecto-lazy-float";
            };
          } // packageOverrides)
      ) {};

    ecto_lazy_float = ecto_lazy_float_0_1_2;

    ecto_ldap_0_3_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_4,
          timex_3_1_15,
          timex_ecto_3_1_1
        }:
          buildMix ({
            name = "ecto_ldap";
            version = "0.3.1";
            src = fetchHex {
              pkg = "ecto_ldap";
              version = "0.3.1";
              sha256 =
                "376477257cf1d4abe314fb4c92fc1ff4ca7dfd336dbfa0778e515294ea319203";
            };
            beamDeps  = [ ecto_2_1_4 timex_3_1_15 timex_ecto_3_1_1 ];

            meta = {
              description = ''An Ecto adapter for LDAP'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jeffweiss/ecto_ldap";
            };
          } // packageOverrides)
      ) {};

    ecto_ldap = ecto_ldap_0_3_1;

    ecto_logger_json_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_1_0_2 }:
          buildMix ({
            name = "ecto_logger_json";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ecto_logger_json";
              version = "0.1.0";
              sha256 =
                "7f909ec49750c7131a34a7a6bc6f015bbb934d8e613ee3fd95967373f7a9df33";
            };
            beamDeps  = [ poison_1_0_2 ];

            meta = {
              description = ''Overrides Ecto`s LogEntry to format ecto logs as
                            json'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/bleacherreport/ecto_logger_json";
            };
          } // packageOverrides)
      ) {};

    ecto_logger_json = ecto_logger_json_0_1_0;

    ecto_migrate_0_6_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_1_0_7,
          ecto_it_0_2_0,
          mariaex_0_8_2,
          postgrex_1_0_0_rc_1
        }:
          buildMix ({
            name = "ecto_migrate";
            version = "0.6.3";
            src = fetchHex {
              pkg = "ecto_migrate";
              version = "0.6.3";
              sha256 =
                "a604f2fe7874c674bd42fc70f3e89776d3738571d252ec8b785a107a6fa12b5c";
            };
            beamDeps  = [
                          ecto_1_0_7
                          ecto_it_0_2_0
                          mariaex_0_8_2
                          postgrex_1_0_0_rc_1
                        ];

            meta = {
              longDescription = ''Ecto auto migration library. It allows to
                                generate and run migrations for initial and
                                update migrations.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/xerions/ecto_migrate";
            };
          } // packageOverrides)
      ) {};

    ecto_migrate = ecto_migrate_0_6_3;

    ecto_missing_fields_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ecto_1_1_9 }:
          buildMix ({
            name = "ecto_missing_fields";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ecto_missing_fields";
              version = "0.1.0";
              sha256 =
                "64eb7ecce7bef3967be322cc4fbe2a89b6fdc0084a8eb49611251310ad2aefe0";
            };
            beamDeps  = [ ecto_1_1_9 ];

            meta = {
              description = ''Warns when creating changesets which are missing
                            fields from the target schema.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ciaran/ecto_missing_fields";
            };
          } // packageOverrides)
      ) {};

    ecto_missing_fields = ecto_missing_fields_0_1_0;

    ecto_mnesia_0_9_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          confex_1_5_0,
          ecto_2_1_4
        }:
          buildMix ({
            name = "ecto_mnesia";
            version = "0.9.0";
            src = fetchHex {
              pkg = "ecto_mnesia";
              version = "0.9.0";
              sha256 =
                "72cacaa7a4d81c6b6433ab6f23d3bbbc12451454ab7532ab05ae244b0645d74b";
            };
            beamDeps  = [ confex_1_5_0 ecto_2_1_4 ];

            meta = {
              description = ''Ecto adapter for Mnesia erlang term storage.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Nebo15/ecto_mnesia";
            };
          } // packageOverrides)
      ) {};

    ecto_mnesia = ecto_mnesia_0_9_0;

    ecto_network_0_5_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_4,
          phoenix_html_2_9_3,
          postgrex_1_0_0_rc_1
        }:
          buildMix ({
            name = "ecto_network";
            version = "0.5.0";
            src = fetchHex {
              pkg = "ecto_network";
              version = "0.5.0";
              sha256 =
                "baa627883b9f7c76b6ebe7ce97d8d17f4cc46aba5af2027c35a4c482247d9b0f";
            };
            beamDeps  = [ ecto_2_1_4 phoenix_html_2_9_3 postgrex_1_0_0_rc_1
                      ];

            meta = {
              description = ''Ecto types to support MACADDR and Network
                            extensions provided by Postgrex.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/adam12/ecto_network";
            };
          } // packageOverrides)
      ) {};

    ecto_network = ecto_network_0_5_0;

    ecto_ordered_0_2_0_beta1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ecto_2_1_4 }:
          buildMix ({
            name = "ecto_ordered";
            version = "0.2.0-beta1";
            src = fetchHex {
              pkg = "ecto_ordered";
              version = "0.2.0-beta1";
              sha256 =
                "5b952d58758a512b66399007da750bc127bb519bcd574a572e6d84b8a83d2bf3";
            };
            beamDeps  = [ ecto_2_1_4 ];

            meta = {
              description = ''Ecto extension to support ordered list models'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/trustatom-oss/ecto-ordered";
            };
          } // packageOverrides)
      ) {};

    ecto_ordered = ecto_ordered_0_2_0_beta1;

    ecto_paging_0_6_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_4,
          postgrex_0_13_3
        }:
          buildMix ({
            name = "ecto_paging";
            version = "0.6.2";
            src = fetchHex {
              pkg = "ecto_paging";
              version = "0.6.2";
              sha256 =
                "e1bdb97b4fd06032aa9b52d60ab176872c4ff68b944578903e65182e8fd368a7";
            };
            beamDeps  = [ ecto_2_1_4 postgrex_0_13_3 ];

            meta = {
              description = ''Cursor-based pagination for Ecto.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/Nebo15/ecto_paging";
            };
          } // packageOverrides)
      ) {};

    ecto_paging = ecto_paging_0_6_2;

    ecto_pg_extras_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_4,
          postgrex_0_13_3
        }:
          buildMix ({
            name = "ecto_pg_extras";
            version = "0.1.1";
            src = fetchHex {
              pkg = "ecto_pg_extras";
              version = "0.1.1";
              sha256 =
                "44856ece9b0fdfded43fb7827c2d5803b6eb4d26a75437b7298dad79d52c00ed";
            };
            beamDeps  = [ ecto_2_1_4 postgrex_0_13_3 ];

            meta = {
              description = ''A collection of custom functions for PostgreSQL
                            features in Ecto.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hashrocket/ecto_pg_extras";
            };
          } // packageOverrides)
      ) {};

    ecto_pg_extras = ecto_pg_extras_0_1_1;

    ecto_ranked_0_1_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ecto_2_1_4 }:
          buildMix ({
            name = "ecto_ranked";
            version = "0.1.5";
            src = fetchHex {
              pkg = "ecto_ranked";
              version = "0.1.5";
              sha256 =
                "a345b49ed9c7a9c92085b30bbc87312ab45976e566790a6f922eb5747d8e3e29";
            };
            beamDeps  = [ ecto_2_1_4 ];

            meta = {
              description = ''Add and maintain rankings to sort your data with
                            Ecto'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dmarkow/ecto_ranked";
            };
          } // packageOverrides)
      ) {};

    ecto_ranked = ecto_ranked_0_1_5;

    ecto_rut_1_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_0_rc_5,
          ex_utils_0_1_6
        }:
          buildMix ({
            name = "ecto_rut";
            version = "1.2.0";
            src = fetchHex {
              pkg = "ecto_rut";
              version = "1.2.0";
              sha256 =
                "ff84cc83b72d5ad4f47de6f16f7de3d7d4bdb926f826062fc4e8ea9dbec80f33";
            };
            beamDeps  = [ ecto_2_1_0_rc_5 ex_utils_0_1_6 ];

            meta = {
              description = ''Ecto Model shortcuts to make your life easier!
                            🎉'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sheharyarn/ecto_rut";
            };
          } // packageOverrides)
      ) {};

    ecto_rut = ecto_rut_1_2_0;

    ecto_schema_store_1_9_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_4,
          event_queues_1_1_2,
          gettext_0_13_1
        }:
          buildMix ({
            name = "ecto_schema_store";
            version = "1.9.1";
            src = fetchHex {
              pkg = "ecto_schema_store";
              version = "1.9.1";
              sha256 =
                "651050be2aa21ce1f107afab5baf1f14eb3c788a4af698c1b76e5bf81ee58f7a";
            };
            beamDeps  = [ ecto_2_1_4 event_queues_1_1_2 gettext_0_13_1 ];

            meta = {
              description = ''Builds upon Ecto to create a ready to go
                            customizable CRUD module for a schema.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/cenurv/ecto_schema_store";
            };
          } // packageOverrides)
      ) {};

    ecto_schema_store = ecto_schema_store_1_9_1;

    ecto_shortcuts_0_1_6 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ecto_2_1_4 }:
          buildMix ({
            name = "ecto_shortcuts";
            version = "0.1.6";
            src = fetchHex {
              pkg = "ecto_shortcuts";
              version = "0.1.6";
              sha256 =
                "f187329ac415285bf515a0221ddceda916f3eba745e578c94d596a54bfafdd8e";
            };
            beamDeps  = [ ecto_2_1_4 ];

            meta = {
              description = ''Ecto extension adding shortcuts for common
                            usecases'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/MishaConway/ecto_shortcuts";
            };
          } // packageOverrides)
      ) {};

    ecto_shortcuts = ecto_shortcuts_0_1_6;

    ecto_south_0_1_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ecto_2_1_4 }:
          buildMix ({
            name = "ecto_south";
            version = "0.1.4";
            src = fetchHex {
              pkg = "ecto_south";
              version = "0.1.4";
              sha256 =
                "695da03a7b683c0253c24bbb4820c11a41490d5c7d78563b96f70543138f644d";
            };
            beamDeps  = [ ecto_2_1_4 ];

            meta = {
              description = ''South brings ecto migrations to phoenix
                            applications'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/360ekh/ecto_south";
            };
          } // packageOverrides)
      ) {};

    ecto_south = ecto_south_0_1_4;

    ecto_state_machine_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ecto_2_1_4 }:
          buildMix ({
            name = "ecto_state_machine";
            version = "0.3.0";
            src = fetchHex {
              pkg = "ecto_state_machine";
              version = "0.3.0";
              sha256 =
                "debbc93dde9f83359e52774b487aaca8128cb0e148e02c792f1fa5b3e53e6258";
            };
            beamDeps  = [ ecto_2_1_4 ];

            meta = {
              longDescription = ''State machine pattern for Ecto. I tried to
                                make it similar as possible to ruby`s gem
                                `aasm`'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/asiniy/ecto_state_machine";
            };
          } // packageOverrides)
      ) {};

    ecto_state_machine = ecto_state_machine_0_3_0;

    ecto_timestamps_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ecto_2_1_4 }:
          buildMix ({
            name = "ecto_timestamps";
            version = "1.0.0";
            src = fetchHex {
              pkg = "ecto_timestamps";
              version = "1.0.0";
              sha256 =
                "c37f5c32ef005f665b58f537337b96352c8429f6424315d58cc8cc1103e30e11";
            };
            beamDeps  = [ ecto_2_1_4 ];

            meta = {
              longDescription = ''An elixir module that convert default utc
                                timestamps to local timestamps in ecto. Note:
                                Ecto 2.0 and above is required.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/developerworks/ecto_timestamps";
            };
          } // packageOverrides)
      ) {};

    ecto_timestamps = ecto_timestamps_1_0_0;

    ecto_trail_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_4,
          postgrex_0_13_3
        }:
          buildMix ({
            name = "ecto_trail";
            version = "0.2.0";
            src = fetchHex {
              pkg = "ecto_trail";
              version = "0.2.0";
              sha256 =
                "25f45233354adf2a2f56f25b041ee6a51253439f2785cf48705c7f801112e994";
            };
            beamDeps  = [ ecto_2_1_4 postgrex_0_13_3 ];

            meta = {
              longDescription = ''This package allows to add audit log that is
                                based on Ecto changesets and stored in a
                                separate table.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/Nebo15/ecto_trail";
            };
          } // packageOverrides)
      ) {};

    ecto_trail = ecto_trail_0_2_0;

    ecto_translate_0_2_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_4,
          gettext_0_13_1
        }:
          buildMix ({
            name = "ecto_translate";
            version = "0.2.3";
            src = fetchHex {
              pkg = "ecto_translate";
              version = "0.2.3";
              sha256 =
                "82a53ff1fcaeb3da689c0aa92bf829df9b729c94e1d0fef06b32f841e3392744";
            };
            beamDeps  = [ ecto_2_1_4 gettext_0_13_1 ];

            meta = {
              longDescription = ''EctoTranslate is a library that helps with
                                translating Ecto data. EctoTranslate can help
                                you with returning translated values of your
                                Ecto data attributes. For this it uses a singe
                                table called `translations` which will contain
                                polymorphic entries for all of your Ecto data
                                stucts.'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/smeevil/ecto_translate";
            };
          } // packageOverrides)
      ) {};

    ecto_translate = ecto_translate_0_2_3;

    ecto_uk_postcode_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_4,
          uk_postcode_0_3_0
        }:
          buildMix ({
            name = "ecto_uk_postcode";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ecto_uk_postcode";
              version = "0.1.0";
              sha256 =
                "bd00a3676fdc935748460be2000d5519c34e188a6f474527f1503daaa0df674b";
            };
            beamDeps  = [ ecto_2_1_4 uk_postcode_0_3_0 ];

            meta = {
              description = ''Ecto extension to support UK Postcodes in
                            models.'';
              license = stdenv.lib.licenses.cc0;
              homepage =
                "https://github.com/sauce-consultants/ecto_uk_postcode";
            };
          } // packageOverrides)
      ) {};

    ecto_uk_postcode = ecto_uk_postcode_0_1_0;

    ecto_validation_case_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_4,
          ex_doc_0_16_1
        }:
          buildMix ({
            name = "ecto_validation_case";
            version = "0.1.1";
            src = fetchHex {
              pkg = "ecto_validation_case";
              version = "0.1.1";
              sha256 =
                "0bec902247929e66cb0687f09d458633385843d18ca6ec1ac2557e6754b55cbd";
            };
            beamDeps  = [ ecto_2_1_4 ex_doc_0_16_1 ];

            meta = {
              description = ''Ecto.ValidationCase simplifies writing validation
                            tests for Ecto models. '';
              license = with stdenv.lib.licenses; [ mit asl20 ];
              homepage =
                "https://github.com/danielberkompas/ecto_validation_case";
            };
          } // packageOverrides)
      ) {};

    ecto_validation_case = ecto_validation_case_0_1_1;

    ectograph_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_0_rc_5,
          graphql_0_3_2
        }:
          buildMix ({
            name = "ectograph";
            version = "0.2.0";
            src = fetchHex {
              pkg = "ectograph";
              version = "0.2.0";
              sha256 =
                "3f8346ef851f35839c337441515900097a6c685422a620849be1f8beaadf9513";
            };
            beamDeps  = [ ecto_2_1_0_rc_5 graphql_0_3_2 ];

            meta = {
              longDescription = ''Ectograph is a set of utility functions for
                                using Ecto in combination with GraphQL'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/icidasset/ectograph";
            };
          } // packageOverrides)
      ) {};

    ectograph = ectograph_0_2_0;

    ectonum_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ecto_2_1_4 }:
          buildMix ({
            name = "ectonum";
            version = "1.0.0";
            src = fetchHex {
              pkg = "ectonum";
              version = "1.0.0";
              sha256 =
                "46ad28227982eac69beddf9621187aa00eb1b50c0338705f4cf9f03f9b987c73";
            };
            beamDeps  = [ ecto_2_1_4 ];

            meta = {
              description = ''Adds Ecto custom type for enums'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/madshargreave/ectonum";
            };
          } // packageOverrides)
      ) {};

    ectonum = ectonum_1_0_0;

    ectoo_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_4,
          postgrex_1_0_0_rc_1
        }:
          buildMix ({
            name = "ectoo";
            version = "0.2.0";
            src = fetchHex {
              pkg = "ectoo";
              version = "0.2.0";
              sha256 =
                "34e6a918612069fbc3ea6827ede3efc2f1dfb6b54ddbe439c0b2d251caf4392a";
            };
            beamDeps  = [ ecto_2_1_4 postgrex_1_0_0_rc_1 ];

            meta = {
              longDescription = ''Make simple things easy in Ecto, e.g.
                                Ectoo.max(MyModel, :age). Also .count, .min,
                                .max, .avg.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/henrik/ectoo";
            };
          } // packageOverrides)
      ) {};

    ectoo = ectoo_0_2_0;

    ectophile_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_0_0_rc_6,
          mariaex_0_4_4,
          poison_1_5_2,
          postgrex_0_9_1
        }:
          buildMix ({
            name = "ectophile";
            version = "0.3.0";
            src = fetchHex {
              pkg = "ectophile";
              version = "0.3.0";
              sha256 =
                "376c7c838bc602bc64d7ae3dfa4079717f6ed5e0117113652fc281e3e17227d2";
            };
            beamDeps  = [
                          ecto_2_0_0_rc_6
                          mariaex_0_4_4
                          poison_1_5_2
                          postgrex_0_9_1
                        ];

            meta = {
              description = ''File upload extension for Ecto'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gjaldon/ectophile";
            };
          } // packageOverrides)
      ) {};

    ectophile = ectophile_0_3_0;

    ectoplasm_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ecto_2_1_4 }:
          buildMix ({
            name = "ectoplasm";
            version = "0.2.0";
            src = fetchHex {
              pkg = "ectoplasm";
              version = "0.2.0";
              sha256 =
                "1666694958affadd9a745bcc4192b3995b1257825192eb0a463a897ba7ef1b90";
            };
            beamDeps  = [ ecto_2_1_4 ];

            meta = {
              description = ''A collection of factories and helpers for testing
                            ecto schemas'';
              license = stdenv.lib.licenses.mit;
              homepage = "http://github.com/cjpoll/ectoplasm";
            };
          } // packageOverrides)
      ) {};

    ectoplasm = ectoplasm_0_2_0;

    ed25519_0_2_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ed25519";
            version = "0.2.5";
            src = fetchHex {
              pkg = "ed25519";
              version = "0.2.5";
              sha256 =
                "87233bfc85d0be366eddf870b6c021396fa34bdc48472aa8582b7333d1459147";
            };

            meta = {
              description = ''Ed25519 signature functions'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mwmiller/ed25519_ex";
            };
          } // packageOverrides)
      ) {};

    ed25519_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ed25519";
            version = "1.0.1";
            src = fetchHex {
              pkg = "ed25519";
              version = "1.0.1";
              sha256 =
                "26cf3ed406c4531d508a8d137446121b7d1312ea187f62357356d5b7b8f9b097";
            };

            meta = {
              description = ''Ed25519 signature functions'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mwmiller/ed25519_ex";
            };
          } // packageOverrides)
      ) {};

    ed25519 = ed25519_1_0_1;

    edate_1_0_0 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          ebs_1_1_3,
          egetopt_1_0_0
        }:
          buildRebar3 ({
            name = "edate";
            version = "1.0.0";
            src = fetchHex {
              pkg = "edate";
              version = "1.0.0";
              sha256 =
                "317a55a440d7cec54c5addba7bb557d5e70a55869f34eb63ddd11c366eb4d369";
            };

            beamDeps  = [ ebs_1_1_3 egetopt_1_0_0 ];

            meta = {
              description = ''Erlang version of date(1)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/SirWumpus/erlang-date";
            };
          } // packageOverrides)
      ) {};

    edate = edate_1_0_0;

    edeliver_1_4_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          distillery_1_4_0,
          exrm_1_0_8
        }:
          buildMix ({
            name = "edeliver";
            version = "1.4.2";
            src = fetchHex {
              pkg = "edeliver";
              version = "1.4.2";
              sha256 =
                "382ff0582afb140dbac53585644cda70852202efa3b1c9e5fce3c7a270cb6533";
            };
            beamDeps  = [ distillery_1_4_0 exrm_1_0_8 ];

            meta = {
              longDescription = ''Build and Deploy Elixir Applications and
                                perform Hot-Code Upgrades and Schema
                                Migrations'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/boldpoker/edeliver";
            };
          } // packageOverrides)
      ) {};

    edeliver = edeliver_1_4_2;

    eden_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, timex_3_0_5 }:
          buildMix ({
            name = "eden";
            version = "1.0.0";
            src = fetchHex {
              pkg = "eden";
              version = "1.0.0";
              sha256 =
                "480be3ba48b26bca1d3ea92a5857649f23a58e373eb36471d29eed6ed059cd6e";
            };
            beamDeps  = [ timex_3_0_5 ];

            meta = {
              description = ''edn (extensible data notation) encoder/decoder
                            implemented in Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/jfacorro/Eden/";
            };
          } // packageOverrides)
      ) {};

    eden = eden_1_0_0;

    edgarex_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exquery_0_0_11,
          httpotion_2_2_1
        }:
          buildMix ({
            name = "edgarex";
            version = "0.0.2";
            src = fetchHex {
              pkg = "edgarex";
              version = "0.0.2";
              sha256 =
                "99e25e685bc44a1f804729779e77d5e3d1920f42c99478cd9b712d724b4f6af4";
            };
            beamDeps  = [ exquery_0_0_11 httpotion_2_2_1 ];

            meta = {
              longDescription = '' A set of utilities for fetching documents
                                from the SEC EDGAR data portal, as well as
                                parsing them into simpler structures. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rozap/edgarex";
            };
          } // packageOverrides)
      ) {};

    edgarex = edgarex_0_0_2;

    edh_phoenix_swagger_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_2_2_0 }:
          buildMix ({
            name = "edh_phoenix_swagger";
            version = "0.2.1";
            src = fetchHex {
              pkg = "edh_phoenix_swagger";
              version = "0.2.1";
              sha256 =
                "ba005f8c410f31844c1dd33fe635fac759eaa5756289e25e615f0eceb6d6b7c8";
            };
            beamDeps  = [ poison_2_2_0 ];

            meta = {
              description = ''Swagger DSL and Generator for Phoenix projects'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/everydayhero/phoenix_swagger";
            };
          } // packageOverrides)
      ) {};

    edh_phoenix_swagger = edh_phoenix_swagger_0_2_1;

    edib_0_10_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "edib";
            version = "0.10.0";
            src = fetchHex {
              pkg = "edib";
              version = "0.10.0";
              sha256 =
                "f866fc77a71bf579429660588ce9d86a8cd911c4ab324d7eaf2e59c4fe3b1473";
            };

            meta = {
              longDescription = ''Mix task to create a docker image of your
                                application release. Installation: `mix
                                archive.install hex edib` More detailed
                                information about release image building at:
                                https://github.com/edib-tool/elixir-docker-image-builder'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/edib-tool/mix-edib";
            };
          } // packageOverrides)
      ) {};

    edib = edib_0_10_0;

    ediff_1_0_0 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          ebs_1_2_0,
          egetopt_1_0_0
        }:
          buildRebar3 ({
            name = "ediff";
            version = "1.0.0";
            src = fetchHex {
              pkg = "ediff";
              version = "1.0.0";
              sha256 =
                "ea617dde25d85fd0804dd9c68b6efed3ff9f2787353ed8599850e1ce7153f9be";
            };

            beamDeps  = [ ebs_1_2_0 egetopt_1_0_0 ];

            meta = {
              description = ''Erlang version of diff(1)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/SirWumpus/erlang-diff";
            };
          } // packageOverrides)
      ) {};

    ediff = ediff_1_0_0;

    edip_0_4_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "edip";
            version = "0.4.3";
            src = fetchHex {
              pkg = "edip";
              version = "0.4.3";
              sha256 =
                "b0b9f34b2048b3f03c1f25b6dc60a1567b6f3ec8c6ad945de30dc313d7608800";
            };

            meta = {
              longDescription = ''Mix task to create a docker image of your
                                application release. More detailed information
                                about release image packaging at:
                                https://github.com/asaaki/elixir-docker-image-packager'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/asaaki/mix-edip";
            };
          } // packageOverrides)
      ) {};

    edip = edip_0_4_3;

    editorconfig_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "editorconfig";
            version = "0.0.1";
            src = fetchHex {
              pkg = "editorconfig";
              version = "0.0.1";
              sha256 =
                "c4bad1c6e0ba0f418f583d04f40c6fd066de267d4367692c66cfcdd14b84469a";
            };

            meta = {
              description = ''EditorConfig API for Elixir projects'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/mytrile";
            };
          } // packageOverrides)
      ) {};

    editorconfig = editorconfig_0_0_1;

    edown_0_7_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "edown";
            version = "0.7.0";
            src = fetchHex {
              pkg = "edown";
              version = "0.7.0";
              sha256 =
                "6d7365a7854cd724e8d1fd005f5faa4444eae6a87eb6df9b789b6e7f6f09110a";
            };

            meta = {
              description = ''Markdown extension for EDoc'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/uwiger/edown";
            };
          } // packageOverrides)
      ) {};

    edown_0_8_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "edown";
            version = "0.8.1";
            src = fetchHex {
              pkg = "edown";
              version = "0.8.1";
              sha256 =
                "2821d6a43d1da067f6eac072e69105140a36556cd906fc6b81b6fae905f5dd13";
            };

            meta = {
              description = ''Markdown extension for EDoc'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/uwiger/edown";
            };
          } // packageOverrides)
      ) {};

    edown = edown_0_8_1;

    eeb_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          earmark_0_1_19,
          plug_1_1_7,
          timex_3_0_5,
          tzdata_0_5_3
        }:
          buildMix ({
            name = "eeb";
            version = "0.2.0";
            src = fetchHex {
              pkg = "eeb";
              version = "0.2.0";
              sha256 =
                "0615ccea012507ae35f6f1f4f8a46eac6d9eceba0cdface2df5c0d70b7caddbc";
            };
            beamDeps  = [
                          cowboy_1_1_2
                          earmark_0_1_19
                          plug_1_1_7
                          timex_3_0_5
                          tzdata_0_5_3
                        ];

            meta = {
              description = ''Elixir extendable blog.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/aborn/eeb";
            };
          } // packageOverrides)
      ) {};

    eeb = eeb_0_2_0;

    efene_0_9_17 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          aleppo_0_9_0,
          ast_walk_0_2_0
        }:
          buildRebar3 ({
            name = "efene";
            version = "0.9.17";
            src = fetchHex {
              pkg = "efene";
              version = "0.9.17";
              sha256 =
                "97995bf601b5cec8d76a5092a34141754bcebe785b75f6babac3f0a0638fe292";
            };

            beamDeps  = [ aleppo_0_9_0 ast_walk_0_2_0 ];

            meta = {
              description = ''A Programming Language for the Erlang VM'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/efene/efene";
            };
          } // packageOverrides)
      ) {};

    efene_0_99_1 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          aleppo_0_9_0,
          ast_walk_0_2_0
        }:
          buildRebar3 ({
            name = "efene";
            version = "0.99.1";
            src = fetchHex {
              pkg = "efene";
              version = "0.99.1";
              sha256 =
                "81ac80a198d1722bbb457778e69ad160fdc3198140021f259c94e51b0b07fe9e";
            };

            beamDeps  = [ aleppo_0_9_0 ast_walk_0_2_0 ];

            meta = {
              description = ''A Programming Language for the Erlang VM'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/efene/efene";
            };
          } // packageOverrides)
      ) {};

    efene = efene_0_99_1;

    effects_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "effects";
            version = "0.1.1";
            src = fetchHex {
              pkg = "effects";
              version = "0.1.1";
              sha256 =
                "dac8b9c694d33d12ddac0582bba12c52e6f6f8b24fc0d03b4cbc5bb4c598ecc0";
            };

            meta = {
              description = ''Monadic, softly-typed, extensible effect handling
                            in Elixir.'';
              license = stdenv.lib.licenses.cc0;
              homepage = "https://github.com/metalabdesign/effects";
            };
          } // packageOverrides)
      ) {};

    effects = effects_0_1_1;

    efgrep_1_0_0 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          ebs_1_1_4,
          egetopt_1_0_0
        }:
          buildRebar3 ({
            name = "efgrep";
            version = "1.0.0";
            src = fetchHex {
              pkg = "efgrep";
              version = "1.0.0";
              sha256 =
                "d89b6ca047879cbdd12d1b2287b6e05cc92217b589e0be1842b1086e9e1baeae";
            };

            beamDeps  = [ ebs_1_1_4 egetopt_1_0_0 ];

            meta = {
              description = ''Erlang version of fgrep(1)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/SirWumpus/erlang-fgrep";
            };
          } // packageOverrides)
      ) {};

    efgrep = efgrep_1_0_0;

    efirebirdsql_0_1_4 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "efirebirdsql";
            version = "0.1.4";
            src = fetchHex {
              pkg = "efirebirdsql";
              version = "0.1.4";
              sha256 =
                "29b68f58059490f71828df348e6e2f24ecbf7ef0780ba2336ad51db7f265df37";
            };

            meta = {
              description = ''Firebird Client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nakagami/efirebirdsql";
            };
          } // packageOverrides)
      ) {};

    efirebirdsql = efirebirdsql_0_1_4;

    eflame_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "eflame";
            version = "1.0.1";
            src = fetchHex {
              pkg = "eflame";
              version = "1.0.1";
              sha256 =
                "e0b08854a66f9013129de0b008488f3411ae9b69b902187837f994d7a99cf04e";
            };

            meta = {
              description = ''Flame Graph profiler for Erlang and Elixir.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/proger/eflame";
            };
          } // packageOverrides)
      ) {};

    eflame = eflame_1_0_1;

    efranc_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "efranc";
            version = "0.0.1";
            src = fetchHex {
              pkg = "efranc";
              version = "0.0.1";
              sha256 =
                "9e5d436f49cab770d8d0d9c433679fe46c636c923385047c36327bf1cc6b654d";
            };

            meta = {
              description = ''Detect the language of text'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/G-Corp/efranc";
            };
          } // packageOverrides)
      ) {};

    efranc = efranc_0_0_1;

    efrisby_0_2_0 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          hackney_1_4_8,
          jsx_2_8_0
        }:
          buildRebar3 ({
            name = "efrisby";
            version = "0.2.0";
            src = fetchHex {
              pkg = "efrisby";
              version = "0.2.0";
              sha256 =
                "5ad6f030a9e6b7611af09ce009106dcad9fa4ab3d23aa6db03573082f4824470";
            };

            beamDeps  = [ hackney_1_4_8 jsx_2_8_0 ];

            meta = {
              description = ''A REST API testing framework for erlang'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/FabioBatSilva/efrisby";
            };
          } // packageOverrides)
      ) {};

    efrisby = efrisby_0_2_0;

    egaugex_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          floki_0_17_2,
          http_digex_0_0_1,
          httpoison_0_9_2
        }:
          buildMix ({
            name = "egaugex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "egaugex";
              version = "0.1.0";
              sha256 =
                "57e212f3ea50c558d638838420670d0443ba4218864b7084a6a985cbd13c626f";
            };
            beamDeps  = [ floki_0_17_2 http_digex_0_0_1 httpoison_0_9_2 ];

            meta = {
              description = ''A simple egauge client to retrieve and parse data
                            from egauge devices'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Brightergy/egaugex";
            };
          } // packageOverrides)
      ) {};

    egaugex = egaugex_0_1_0;

    egcache_0_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "egcache";
            version = "0.1.0";
            src = fetchHex {
              pkg = "egcache";
              version = "0.1.0";
              sha256 =
                "964fd994917b7f37c6510e4fad1bf00737b36ff9cea321694c6b6e1f14f50d6a";
            };

            meta = {
              description = ''An OTP application'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/erlware/relx";
            };
          } // packageOverrides)
      ) {};

    egcache = egcache_0_1_0;

    egeonames_0_1_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "egeonames";
            version = "0.1.1";
            src = fetchHex {
              pkg = "egeonames";
              version = "0.1.1";
              sha256 =
                "cf3c00ac668a9b10fa225b4896fb7e88683e82b93ec3f2f6fe5279d86fdbe00e";
            };

            meta = {
              description = ''wrapper around geonames.org'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/massemanet/egeonames";
            };
          } // packageOverrides)
      ) {};

    egeonames = egeonames_0_1_1;

    egetopt_1_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "egetopt";
            version = "1.0.0";
            src = fetchHex {
              pkg = "egetopt";
              version = "1.0.0";
              sha256 =
                "858c69142a14cbe41171df8c88af51baf2ced421261c4bf83c823700afe7371a";
            };

            meta = {
              description = ''POSIX style command-line option parsing.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/SirWumpus/erlang-getopt";
            };
          } // packageOverrides)
      ) {};

    egetopt = egetopt_1_0_0;

    egithub_0_3_2 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          hackney_1_6_5,
          jiffy_0_14_11,
          lager_3_2_4
        }:
          buildRebar3 ({
            name = "egithub";
            version = "0.3.2";
            src = fetchHex {
              pkg = "egithub";
              version = "0.3.2";
              sha256 =
                "f5b5bba5fbb30a7b04ddbd561ad04ba58ac9a9c9238fab871a28c155e55ea609";
            };

            beamDeps  = [ hackney_1_6_5 jiffy_0_14_11 lager_3_2_4 ];

            meta = {
              description = ''GitHub API client'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/inaka/erlang-github";
            };
          } // packageOverrides)
      ) {};

    egithub = egithub_0_3_2;

    egndf_0_2_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          confex_2_0_1,
          httpoison_0_10_0,
          poison_2_2_0
        }:
          buildMix ({
            name = "egndf";
            version = "0.2.2";
            src = fetchHex {
              pkg = "egndf";
              version = "0.2.2";
              sha256 =
                "e949869f91b32733e6f47f912af296c4e3876a2e9bde71b41d7d3c37905b7933";
            };
            beamDeps  = [ confex_2_0_1 httpoison_0_10_0 poison_2_2_0 ];

            meta = {
              description = ''Simple Elixir client for open-source decision
                            engine Gandalf https://gndf.io/.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Nebo15/egndf";
            };
          } // packageOverrides)
      ) {};

    egndf = egndf_0_2_2;

    eh_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "eh";
            version = "0.2.0";
            src = fetchHex {
              pkg = "eh";
              version = "0.2.0";
              sha256 =
                "91013c78138c8854c5699ef42324e66286fed0048c4d4212c4dc3012d764c628";
            };

            meta = {
              description = ''Lookup Elixir documentation from the command line
                            '';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/Frost/eh.git";
            };
          } // packageOverrides)
      ) {};

    eh = eh_0_2_0;

    ehee_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          earmark_1_2_2,
          ex_doc_0_16_1,
          httpoison_0_11_2,
          poison_1_5_2
        }:
          buildMix ({
            name = "ehee";
            version = "0.0.1";
            src = fetchHex {
              pkg = "ehee";
              version = "0.0.1";
              sha256 =
                "eba648087d45ec3dcaeb5674488a7e91b3a1d6abe04c07924350803f3952b16b";
            };
            beamDeps  = [
                          earmark_1_2_2
                          ex_doc_0_16_1
                          httpoison_0_11_2
                          poison_1_5_2
                        ];

            meta = {
              description = ''Unofficial Elixir client for the Github API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kanmo/ehee";
            };
          } // packageOverrides)
      ) {};

    ehee = ehee_0_0_1;

    eidetic_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, uuid_1_1_7 }:
          buildMix ({
            name = "eidetic";
            version = "0.2.0";
            src = fetchHex {
              pkg = "eidetic";
              version = "0.2.0";
              sha256 =
                "a6d1230b775db0d7d5fd5bae474404d5246b86a279d765b9492056b2ea2d07a9";
            };
            beamDeps  = [ uuid_1_1_7 ];

            meta = {
              description = ''An event-sourcing library for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/GT8Online/eidetic-elixir";
            };
          } // packageOverrides)
      ) {};

    eidetic = eidetic_0_2_0;

    eidetic_eventstore_mongodb_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          eidetic_0_2_0,
          mongodb_0_4_0,
          poolboy_1_5_1,
          uuid_1_1_7
        }:
          buildMix ({
            name = "eidetic_eventstore_mongodb";
            version = "0.1.0";
            src = fetchHex {
              pkg = "eidetic_eventstore_mongodb";
              version = "0.1.0";
              sha256 =
                "8e4e051bd9d7ed75d6d4a366a437e7869c3c2347e632a4402b270a366d8acede";
            };
            beamDeps  = [
                          eidetic_0_2_0 mongodb_0_4_0 poolboy_1_5_1 uuid_1_1_7
                        ];

            meta = {
              description = ''A MongoDB EventStore for the Eidetic
                            EventSourcing library'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/GT8Online/eidetic-eventstore-mongodb";
            };
          } // packageOverrides)
      ) {};

    eidetic_eventstore_mongodb = eidetic_eventstore_mongodb_0_1_0;

    eight_ball_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "eight_ball";
            version = "0.0.1";
            src = fetchHex {
              pkg = "eight_ball";
              version = "0.0.1";
              sha256 =
                "1ba1b2b5f3dfaba751b51f101c3c526a09f0c989768f265e82a6a065447a6aa4";
            };

            meta = {
              description = ''Library that acts like a real life Magic 8
                            Ball.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/fteem/eight_ball";
            };
          } // packageOverrides)
      ) {};

    eight_ball = eight_ball_0_0_1;

    eight_ball_chip_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "eight_ball_chip";
            version = "0.1.0";
            src = fetchHex {
              pkg = "eight_ball_chip";
              version = "0.1.0";
              sha256 =
                "4d54086054bd9e96f89de04d2020915056d6d9a0cc2d5fed08ed004b838feaee";
            };

            meta = {
              description = ''Testing hex publish'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    eight_ball_chip = eight_ball_chip_0_1_0;

    eight_ball_dj_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "eight_ball_dj";
            version = "0.0.2";
            src = fetchHex {
              pkg = "eight_ball_dj";
              version = "0.0.2";
              sha256 =
                "5b0d4f92a76f3d48d5541936ae8540154ed2a14ccda1a45e250d6a577bb541f5";
            };

            meta = {
              description = ''Ask a question to the Magic Eight Ball'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/djkianoosh/eight_ball";
            };
          } // packageOverrides)
      ) {};

    eight_ball_dj = eight_ball_dj_0_0_2;

    eightyfour_0_2_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          json_web_token_0_2_8,
          poison_1_0_2,
          timex_3_1_15
        }:
          buildMix ({
            name = "eightyfour";
            version = "0.2.1";
            src = fetchHex {
              pkg = "eightyfour";
              version = "0.2.1";
              sha256 =
                "7581b68bca06f09443eba03638e7181c5f85527f30781663c948e0e99f7c64c6";
            };
            beamDeps  = [
                          httpoison_0_11_2
                          json_web_token_0_2_8
                          poison_1_0_2
                          timex_3_1_15
                        ];

            meta = {
              description = ''Barebones Elixir Google Analytics API wrapper'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/twined/eightyfour";
            };
          } // packageOverrides)
      ) {};

    eightyfour = eightyfour_0_2_1;

    eikon_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "eikon";
            version = "0.0.2";
            src = fetchHex {
              pkg = "eikon";
              version = "0.0.2";
              sha256 =
                "fc624850b69504dd3f05e65ce40b4480aef70b605045f3d79d218c39c443a205";
            };

            meta = {
              description = ''Eikōn is an Elixir library providing a read-only
                            interface for image files.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tchoutri/eikon";
            };
          } // packageOverrides)
      ) {};

    eikon = eikon_0_0_2;

    eini_1_2_4 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "eini";
            version = "1.2.4";
            src = fetchHex {
              pkg = "eini";
              version = "1.2.4";
              sha256 =
                "6a5f2a2260ce76db87981c0f93b4b6875051993934de894a71e87e54f069bb7e";
            };

            meta = {
              description = ''An Erlang INI parser'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/erlcloud/eini";
            };
          } // packageOverrides)
      ) {};

    eini = eini_1_2_4;

    eio_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          plug_1_3_5,
          poison_1_5_2
        }:
          buildMix ({
            name = "eio";
            version = "0.1.0";
            src = fetchHex {
              pkg = "eio";
              version = "0.1.0";
              sha256 =
                "f39f017c73713b36ee27d8a0635634ac2e96b4d540f28db9dd358d8744dccd88";
            };
            beamDeps  = [ cowboy_1_1_2 plug_1_3_5 poison_1_5_2 ];

            meta = {
              description = ''Engine.io server for Elixir.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/falood/eio";
            };
          } // packageOverrides)
      ) {};

    eio = eio_0_1_0;

    eipmi_2_0_1 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex, md2_1_1_1 }:
          buildErlangMk ({
            name = "eipmi";
            version = "2.0.1";
            src = fetchHex {
              pkg = "eipmi";
              version = "2.0.1";
              sha256 =
                "e2d4a7ff5f65e2df63f48442708f64f2df4d5b3aa43785d21e01aa5108527608";
            };
            beamDeps  = [ md2_1_1_1 ];

            meta = {
              description = ''A native Erlang IMPI library.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lindenbaum/eipmi";
            };
          } // packageOverrides)
      ) {};

    eipmi = eipmi_2_0_1;

    ejabberd_17_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cache_tab_1_0_8,
          distillery_1_4_0,
          esip_1_0_12,
          ezlib_1_0_2,
          fast_tls_1_0_12,
          fast_xml_1_1_23,
          fast_yaml_1_0_10,
          iconv_1_0_5,
          jiffy_0_14_11,
          lager_3_5_0,
          p1_oauth2_0_6_1,
          p1_utils_1_0_9,
          stringprep_1_0_9,
          stun_1_0_11,
          xmpp_1_1_11
        }:
          buildMix ({
            name = "ejabberd";
            version = "17.3.0";
            src = fetchHex {
              pkg = "ejabberd";
              version = "17.3.0";
              sha256 =
                "fbcc44501c3d8faca063e956f516b995a75ac4ea937ab816dae6799940abb7cd";
            };
            beamDeps  = [
                          cache_tab_1_0_8
                          distillery_1_4_0
                          esip_1_0_12
                          ezlib_1_0_2
                          fast_tls_1_0_12
                          fast_xml_1_1_23
                          fast_yaml_1_0_10
                          iconv_1_0_5
                          jiffy_0_14_11
                          lager_3_5_0
                          p1_oauth2_0_6_1
                          p1_utils_1_0_9
                          stringprep_1_0_9
                          stun_1_0_11
                          xmpp_1_1_11
                        ];

            meta = {
              longDescription = ''Robust, ubiquitous and massively scalable
                                Jabber / XMPP Instant Messaging platform.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/processone/ejabberd";
            };
          } // packageOverrides)
      ) {};

    ejabberd = ejabberd_17_3_0;

    ejabberd_dev_15_9_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ejabberd_dev";
            version = "15.9.0";
            src = fetchHex {
              pkg = "ejabberd_dev";
              version = "15.9.0";
              sha256 =
                "4c4ca5b3ee1900bd7e5babed76cae361b6350ed5793ce013cbfccc06208c291e";
            };

            meta = {
              longDescription = ''A package to help with building ejabberd
                                modules. This package includes source and header
                                files from the ejabberd project that are
                                necessary in order to build a gen_mod module.'';
              license = stdenv.lib.licenses.gpl3;
              homepage = "https://github.com/scrogson/ejabberd_dev";
            };
          } // packageOverrides)
      ) {};

    ejabberd_dev = ejabberd_dev_15_9_0;

    ejwt_0_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, jsx_2_8_0 }:
          buildRebar3 ({
            name = "ejwt";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ejwt";
              version = "0.1.0";
              sha256 =
                "c316a4b7fd21b07b401a3a01db9039b7006f5a1c7e96a981b6cbcb36da1a4a84";
            };

            beamDeps  = [ jsx_2_8_0 ];

            meta = {
              description = ''Encode/decode JSON Web Token'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/artefactop/ejwt";
            };
          } // packageOverrides)
      ) {};

    ejwt = ejwt_0_1_0;

    ekstat_0_2_2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "ekstat";
            version = "0.2.2";
            src = fetchHex {
              pkg = "ekstat";
              version = "0.2.2";
              sha256 =
                "fdd30052433bf7ceb453397c4cabee2d9b0a2a716842a29a1121d3474c5b9fa7";
            };
            compilePorts = true;
            buildPlugins  = [ pc ];


            meta = {
              description = ''libkstat interface for erlang'';
              license = stdenv.lib.licenses.cddl;
              homepage = "https://github.com/Licenser/ekstat";
            };
          } // packageOverrides)
      ) {};

    ekstat = ekstat_0_2_2;

    el_monads_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "el_monads";
            version = "0.1.1";
            src = fetchHex {
              pkg = "el_monads";
              version = "0.1.1";
              sha256 =
                "4316338309b71b7a3dacee92eae13642ce0432eff644f2e3e01731a50b0da5a4";
            };

            meta = {
              longDescription = ''This is an implementation of the `Try` and
                                `Maybe` monads. Please see tests for
                                examples.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Twizty/el_monads";
            };
          } // packageOverrides)
      ) {};

    el_monads = el_monads_0_1_1;

    ela_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ela";
            version = "1.0.0";
            src = fetchHex {
              pkg = "ela";
              version = "1.0.0";
              sha256 =
                "840ba8e9e71dc1c53489054da45363ec7690ed46a2b2233784df8d13a174cdea";
            };

            meta = {
              longDescription = ''Elixir Linear Algebra (ELA for short)
                                contains functionality for working with both
                                vectors and matrices.'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/SebastianCallh/elixir-linear-algebra";
            };
          } // packageOverrides)
      ) {};

    ela = ela_1_0_0;

    elastex_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_8_3,
          poison_2_2_0
        }:
          buildMix ({
            name = "elastex";
            version = "0.2.0";
            src = fetchHex {
              pkg = "elastex";
              version = "0.2.0";
              sha256 =
                "36e7810d62de394377a506c33bd1149902407c0a8e5c88844746f1550c98b158";
            };
            beamDeps  = [ httpoison_0_8_3 poison_2_2_0 ];

            meta = {
              description = ''Data driven elixir client for Elasticsearch.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/michaeldoaty/elastex";
            };
          } // packageOverrides)
      ) {};

    elastex = elastex_0_2_0;

    elastic_2_3_5 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          aws_auth_0_6_4,
          httpotion_3_0_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "elastic";
            version = "2.3.5";
            src = fetchHex {
              pkg = "elastic";
              version = "2.3.5";
              sha256 =
                "0bc6b7a69f43cbfed7fc91ac534f7099aedfb56f5e4367544c9dd723b8b1d5bc";
            };
            beamDeps  = [ aws_auth_0_6_4 httpotion_3_0_2 poison_2_2_0 ];

            meta = {
              description = ''You Know, for (Elastic) Search'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/radar/elastic";
            };
          } // packageOverrides)
      ) {};

    elastic_2_6_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          aws_auth_0_6_4,
          httpotion_3_0_2,
          poison_1_0_2
        }:
          buildMix ({
            name = "elastic";
            version = "2.6.1";
            src = fetchHex {
              pkg = "elastic";
              version = "2.6.1";
              sha256 =
                "9d51c68856b00aa8c3eb85211bd39abc46f6f248697f9198218f5fb70af8ae2e";
            };
            beamDeps  = [ aws_auth_0_6_4 httpotion_3_0_2 poison_1_0_2 ];

            meta = {
              description = ''You Know, for (Elastic) Search'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/radar/elastic";
            };
          } // packageOverrides)
      ) {};

    elastic = elastic_2_6_1;

    elastic_scrivener_1_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          elastic_2_6_1,
          scrivener_2_3_0
        }:
          buildMix ({
            name = "elastic_scrivener";
            version = "1.0.0";
            src = fetchHex {
              pkg = "elastic_scrivener";
              version = "1.0.0";
              sha256 =
                "84b2f28c3e4222dcff45ece8527d39286df2bccd62069ae9145ec8343db477b5";
            };
            beamDeps  = [ elastic_2_6_1 scrivener_2_3_0 ];

            meta = {
              description = ''Scrivener integration for Elastic'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/radar/elastic_scrivener";
            };
          } // packageOverrides)
      ) {};

    elastic_scrivener = elastic_scrivener_1_0_0;

    elasticachex_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "elasticachex";
            version = "1.0.0";
            src = fetchHex {
              pkg = "elasticachex";
              version = "1.0.0";
              sha256 =
                "05d78455e7566f51fe18cffedbad6765c95b15209d5b884030630b91cc303126";
            };

            meta = {
              longDescription = ''An implementation of the Node Auto Discovery
                                for Memcached in the ElastiCache service of AWS.
                                See
                                http://docs.aws.amazon.com/AmazonElastiCache/latest/UserGuide/AutoDiscovery.html'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/peillis/elasticachex";
            };
          } // packageOverrides)
      ) {};

    elasticachex = elasticachex_1_0_0;

    elasticsearch_logger_backend_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_8_6,
          poison_3_1_0,
          timex_3_1_15
        }:
          buildMix ({
            name = "elasticsearch_logger_backend";
            version = "0.1.0";
            src = fetchHex {
              pkg = "elasticsearch_logger_backend";
              version = "0.1.0";
              sha256 =
                "47b0cb8e7434aec0385b7af01ba5e647190d0d8ad4ca0455f1e433a8dff68649";
            };
            beamDeps  = [ hackney_1_8_6 poison_3_1_0 timex_3_1_15 ];

            meta = {
              description = ''Send logs in batches via the elasticsearch bulk
                            index api!'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/sschneider1207/elasticsearch_logger_backend/";
            };
          } // packageOverrides)
      ) {};

    elasticsearch_logger_backend =
      elasticsearch_logger_backend_0_1_0;

    elastix_0_4_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "elastix";
            version = "0.4.0";
            src = fetchHex {
              pkg = "elastix";
              version = "0.4.0";
              sha256 =
                "e217c4c501f1acee9d72b1d1268216988600eadb69ad36041e955faa1dee5e55";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''A simple Elasticsearch REST client written in
                            Elixir.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/werbitzky/elastix";
            };
          } // packageOverrides)
      ) {};

    elastix = elastix_0_4_0;

    elaxtic_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, httpoison_0_8_3 }:
          buildMix ({
            name = "elaxtic";
            version = "0.0.1";
            src = fetchHex {
              pkg = "elaxtic";
              version = "0.0.1";
              sha256 =
                "a912a0327bfe1c6443cec47a03d11450fed2e649bfdcd4e77bdb9176baa8cd45";
            };
            beamDeps  = [ httpoison_0_8_3 ];

            meta = {
              description = ''ElasticSearch client for Elixir and Ecto
                            driver.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/vic/elaxtic";
            };
          } // packageOverrides)
      ) {};

    elaxtic = elaxtic_0_0_1;

    elegua_0_8_23 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          comeonin_2_6_0,
          ecto_2_0_0_rc_6,
          mailgun_0_1_2,
          plug_1_3_5
        }:
          buildMix ({
            name = "elegua";
            version = "0.8.23";
            src = fetchHex {
              pkg = "elegua";
              version = "0.8.23";
              sha256 =
                "a9afc5d99dca41c4ba8f48dac50010cf4245cf7d18d69a9b53ef2a45c5d4ec75";
            };
            beamDeps  = [
                          comeonin_2_6_0
                          ecto_2_0_0_rc_6
                          mailgun_0_1_2
                          plug_1_3_5
                        ];

            meta = {
              description = ''User authentication with mail verification.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ZuraGuerra/elegua";
            };
          } // packageOverrides)
      ) {};

    elegua = elegua_0_8_23;

    eleveldb_2_1_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "eleveldb";
            version = "2.1.3";
            src = fetchHex {
              pkg = "eleveldb";
              version = "2.1.3";
              sha256 =
                "91f4caccc3d0a40a6135b9a647a52c7ec5fefdd41883e1a0f32745838d7cfd3c";
            };
            compilePorts = true;
            buildPlugins  = [ pc ];


            meta = {
              description = ''Erlang LevelDB API'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/basho/eleveldb";
            };
          } // packageOverrides)
      ) {};

    eleveldb_2_2_19 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "eleveldb";
            version = "2.2.19";
            src = fetchHex {
              pkg = "eleveldb";
              version = "2.2.19";
              sha256 =
                "bb45c45aa2751089d5d737dfecac78316763bd55833f29333f918baa34a97f53";
            };
            compilePorts = true;
            buildPlugins  = [ pc ];


            meta = {
              description = ''Erlang LevelDB API'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/basho/eleveldb";
            };
          } // packageOverrides)
      ) {};

    eleveldb_2_2_20 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "eleveldb";
            version = "2.2.20";
            src = fetchHex {
              pkg = "eleveldb";
              version = "2.2.20";
              sha256 =
                "0e67df12ef836a7bcdde9373c59f1ae18b335defd1d66b820d3d4dd7ca1844e2";
            };
            compilePorts = true;
            buildPlugins  = [ pc ];


            meta = {
              description = ''Erlang LevelDB API'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/basho/eleveldb";
            };
          } // packageOverrides)
      ) {};

    eleveldb = eleveldb_2_2_20;

    elibphonenumber_0_1_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "elibphonenumber";
            version = "0.1.1";
            src = fetchHex {
              pkg = "elibphonenumber";
              version = "0.1.1";
              sha256 =
                "6dcbcd49fe7c969873a3431eaa3939298b2564308d2a8fbcc22b7d9b4bc65f27";
            };
            compilePorts = true;

            meta = {
              description = ''A port driver for libphonenumber'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/johnhamelink/elibphonenumber";
            };
          } // packageOverrides)
      ) {};

    elibphonenumber = elibphonenumber_0_1_1;

    elibuf_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "elibuf";
            version = "0.1.0";
            src = fetchHex {
              pkg = "elibuf";
              version = "0.1.0";
              sha256 =
                "85e1a302dbd21d8346866da9c5ff6129ec3c1c11e09aff5e476000519d83da53";
            };

            meta = {
              description = ''Generate Protobuf specification from elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/norbertskakste/Elibuf";
            };
          } // packageOverrides)
      ) {};

    elibuf = elibuf_0_1_0;

    eligator_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "eligator";
            version = "0.1.0";
            src = fetchHex {
              pkg = "eligator";
              version = "0.1.0";
              sha256 =
                "562dc8476330aa549eb975b2c0637c402169a4ee29d79d2647d81198344c2f2e";
            };

            meta = {
              description = ''Simple gating module'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mytrile/eligator";
            };
          } // packageOverrides)
      ) {};

    eligator = eligator_0_1_0;

    elistix_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, httpoison_0_11_2 }:
          buildMix ({
            name = "elistix";
            version = "1.0.1";
            src = fetchHex {
              pkg = "elistix";
              version = "1.0.1";
              sha256 =
                "77adc07147df381caecafdeb67f2effe00aaf8d254cdbe39447de896f81434a5";
            };
            beamDeps  = [ httpoison_0_11_2 ];

            meta = {
              description = ''Use Elasticsearch along with your Elixir app
                            without learn any new DSL.'';
              license = stdenv.lib.licenses.gpl3;
              homepage = "https://github.com/lcostantini/elistix";
            };
          } // packageOverrides)
      ) {};

    elistix = elistix_1_0_1;

    elistrix_0_0_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, timex_3_0_5 }:
          buildMix ({
            name = "elistrix";
            version = "0.0.5";
            src = fetchHex {
              pkg = "elistrix";
              version = "0.0.5";
              sha256 =
                "63888c589e9ec116f4cb6f8b6ef18aec478d48563965da94594408d3c86450d3";
            };
            beamDeps  = [ timex_3_0_5 ];

            meta = {
              longDescription = ''A latency / fault tolerance library to help
                                isolate your applications from an uncertain
                                world of slow or failed services.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tobz/elistrix";
            };
          } // packageOverrides)
      ) {};

    elistrix = elistrix_0_0_5;

    eliver_1_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, enquirer_0_1_0 }:
          buildMix ({
            name = "eliver";
            version = "1.3.0";
            src = fetchHex {
              pkg = "eliver";
              version = "1.3.0";
              sha256 =
                "c7027fddf95b6d1623db4cd4bbe1d6ffeee9e8a91e70c15bb4593d752bf89edc";
            };
            beamDeps  = [ enquirer_0_1_0 ];

            meta = {
              description = ''Interactive semantic versioning for Elixir
                            packages'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/glasnoster/eliver";
            };
          } // packageOverrides)
      ) {};

    eliver = eliver_1_3_0;

    elivndb_0_2_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_3_1_0 }:
          buildMix ({
            name = "elivndb";
            version = "0.2.2";
            src = fetchHex {
              pkg = "elivndb";
              version = "0.2.2";
              sha256 =
                "4647b5cb9c82875981c9cac97ed7476404832c9aa25a31986beaf6072768011a";
            };
            beamDeps  = [ poison_3_1_0 ];

            meta = {
              description = ''Kawaii VNDB API wrapper.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/DoumanAsh/EliVndb";
            };
          } // packageOverrides)
      ) {};

    elivndb = elivndb_0_2_2;

    elixero_0_0_5 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_9_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "elixero";
            version = "0.0.5";
            src = fetchHex {
              pkg = "elixero";
              version = "0.0.5";
              sha256 =
                "7f302369c4429bf384a625f99a92fd493c147ee7bb80f8f139b0a8f66ffaae39";
            };
            beamDeps  = [ httpoison_0_9_2 poison_3_1_0 ];

            meta = {
              description = ''Xero API elixir SDK'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/MJMortimer/elixero";
            };
          } // packageOverrides)
      ) {};

    elixero = elixero_0_0_5;

    elixilorem_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "elixilorem";
            version = "0.0.1";
            src = fetchHex {
              pkg = "elixilorem";
              version = "0.0.1";
              sha256 =
                "fbe0f40bed9e3e3db687e88d3afb24e1a81ae274582170d1ca0545e13638cbea";
            };

            meta = {
              description = ''A Lorem Ipsum generator for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mgamini/elixilorem";
            };
          } // packageOverrides)
      ) {};

    elixilorem = elixilorem_0_0_1;

    elixir_agi_0_0_20 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "elixir_agi";
            version = "0.0.20";
            src = fetchHex {
              pkg = "elixir_agi";
              version = "0.0.20";
              sha256 =
                "f4e790fa04a77272b467174836e0a264ea24d8153d0e30c9d4ec492a2962f7b5";
            };

            meta = {
              longDescription = ''Elixir client for the Asterisk AGI protocol.
                                Find the user guide in the github repo at:
                                https://github.com/marcelog/elixir_agi.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/marcelog/elixir_agi";
            };
          } // packageOverrides)
      ) {};

    elixir_agi = elixir_agi_0_0_20;

    elixir_ale_0_5_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "elixir_ale";
            version = "0.5.2";
            src = fetchHex {
              pkg = "elixir_ale";
              version = "0.5.2";
              sha256 =
                "e2011f2bd6c7265921d4cf65be38c9b54f473bff782875da0cda5998ee1cb928";
            };

            meta = {
              description = ''Elixir access to hardware GPIO, I2C, and SPI
                            interfaces.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/fhunleth/elixir_ale";
            };
          } // packageOverrides)
      ) {};

    elixir_ale_0_5_7 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, elixir_make_0_4_0
        }:
          buildMix ({
            name = "elixir_ale";
            version = "0.5.7";
            src = fetchHex {
              pkg = "elixir_ale";
              version = "0.5.7";
              sha256 =
                "841dfaa2420f937a4b678a8f59ddbb11544c071a9e28e959ea01f338cf52da44";
            };
            beamDeps  = [ elixir_make_0_4_0 ];

            meta = {
              description = ''Elixir access to hardware GPIO, I2C, and SPI
                            interfaces.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/fhunleth/elixir_ale";
            };
          } // packageOverrides)
      ) {};

    elixir_ale_0_6_2 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, elixir_make_0_4_0
        }:
          buildMix ({
            name = "elixir_ale";
            version = "0.6.2";
            src = fetchHex {
              pkg = "elixir_ale";
              version = "0.6.2";
              sha256 =
                "477b3013c5624607b8ac18aa15f1c8cc8f5264739d376153a29a83d4416c9154";
            };
            beamDeps  = [ elixir_make_0_4_0 ];

            meta = {
              description = ''Elixir access to hardware GPIO, I2C, and SPI
                            interfaces.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/fhunleth/elixir_ale";
            };
          } // packageOverrides)
      ) {};

    elixir_ale_0_7_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, elixir_make_0_4_0
        }:
          buildMix ({
            name = "elixir_ale";
            version = "0.7.0";
            src = fetchHex {
              pkg = "elixir_ale";
              version = "0.7.0";
              sha256 =
                "d8a422aababab286189a54cfc6d93d3dbdf517e2e9c9ac478af38fbc4ce0be3f";
            };
            beamDeps  = [ elixir_make_0_4_0 ];

            meta = {
              description = ''Elixir access to hardware GPIO, I2C, and SPI
                            interfaces.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/fhunleth/elixir_ale";
            };
          } // packageOverrides)
      ) {};

    elixir_ale_1_0_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, elixir_make_0_4_0
        }:
          buildMix ({
            name = "elixir_ale";
            version = "1.0.0";
            src = fetchHex {
              pkg = "elixir_ale";
              version = "1.0.0";
              sha256 =
                "3d2aa292578fa6918f9eef6ed1cbf44c4c09442b350049ee4d3d6dc0dd058564";
            };
            beamDeps  = [ elixir_make_0_4_0 ];

            meta = {
              description = ''Elixir access to hardware GPIO, I2C, and SPI
                            interfaces.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/fhunleth/elixir_ale";
            };
          } // packageOverrides)
      ) {};

    elixir_ale = elixir_ale_1_0_0;

    elixir_ami_0_0_20 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, elixir_agi_0_0_20
        }:
          buildMix ({
            name = "elixir_ami";
            version = "0.0.20";
            src = fetchHex {
              pkg = "elixir_ami";
              version = "0.0.20";
              sha256 =
                "91b8a45801b22d998d12b284ec12a36eac843fcc1d461b7549be33a6aee8e038";
            };
            beamDeps  = [ elixir_agi_0_0_20 ];

            meta = {
              longDescription = ''Elixir client for the Asterisk AMI protocol.
                                Find the user guide in the github repo at:
                                https://github.com/marcelog/elixir_ami.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/marcelog/elixir_ami";
            };
          } // packageOverrides)
      ) {};

    elixir_ami = elixir_ami_0_0_20;

    elixir_authorizenet_0_4_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ibrowse_4_4_0,
          sweet_xml_0_6_5,
          xml_builder_0_0_9
        }:
          buildMix ({
            name = "elixir_authorizenet";
            version = "0.4.1";
            src = fetchHex {
              pkg = "elixir_authorizenet";
              version = "0.4.1";
              sha256 =
                "72346ee1b02e4dabb8876a9af32b988b433fea039cfa4e339aa5bfdba3ac2d8d";
            };
            beamDeps  = [ ibrowse_4_4_0 sweet_xml_0_6_5 xml_builder_0_0_9 ];

            meta = {
              longDescription = ''Elixir client for the Authorize.Net merchant
                                AIM API. A number of features are implemented,
                                but I still consider this as WIP, and pull
                                requests, suggestions, or other kind of feedback
                                are very welcome! User guide at:
                                https://github.com/marcelog/elixir_authorizenet.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/marcelog/elixir_authorizenet";
            };
          } // packageOverrides)
      ) {};

    elixir_authorizenet = elixir_authorizenet_0_4_1;

    elixir_bencode_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "elixir_bencode";
            version = "1.0.0";
            src = fetchHex {
              pkg = "elixir_bencode";
              version = "1.0.0";
              sha256 =
                "2c4c86843b2377182da7cff125784a227c7bc63ef9e92ce7257f14b132667ebe";
            };

            meta = {
              description = ''Bencode encoder / decoder in Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/AntonFagerberg/elixir_bencode";
            };
          } // packageOverrides)
      ) {};

    elixir_bencode = elixir_bencode_1_0_0;

    elixir_data_dog_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ex_doc_0_16_1 }:
          buildMix ({
            name = "elixir_data_dog";
            version = "0.2.1";
            src = fetchHex {
              pkg = "elixir_data_dog";
              version = "0.2.1";
              sha256 =
                "cdc639c9d9511d918159c92af129294c39541f83b5774b92f457c2416c49e7c9";
            };
            beamDeps  = [ ex_doc_0_16_1 ];

            meta = {
              description = ''A simple library for sending metrics to
                            DataDog'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/KamilLelonek/elixir_data_dog";
            };
          } // packageOverrides)
      ) {};

    elixir_data_dog = elixir_data_dog_0_2_1;

    elixir_drawille_0_0_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          earmark_0_1_19,
          ex_doc_0_15_1
        }:
          buildMix ({
            name = "elixir_drawille";
            version = "0.0.3";
            src = fetchHex {
              pkg = "elixir_drawille";
              version = "0.0.3";
              sha256 =
                "5fab2af19c8f8c68e62aa4f0a3c17d23a9519e998617470df3ae3cb59516c52c";
            };
            beamDeps  = [ earmark_0_1_19 ex_doc_0_15_1 ];

            meta = {
              description = ''Drawings using terminal braille characters.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/massn/elixir-drawille";
            };
          } // packageOverrides)
      ) {};

    elixir_drawille = elixir_drawille_0_0_3;

    elixir_dropbox_0_0_5 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          json_0_3_3,
          poison_1_5_2
        }:
          buildMix ({
            name = "elixir_dropbox";
            version = "0.0.5";
            src = fetchHex {
              pkg = "elixir_dropbox";
              version = "0.0.5";
              sha256 =
                "a969ba2ca12161938b9c67035bfc506120e3cec29820fe61b07d1188c4a9d435";
            };
            beamDeps  = [ httpoison_0_11_2 json_0_3_3 poison_1_5_2 ];

            meta = {
              description = ''Simple Elixir wrapper for the Dropbox v2 API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sger/elixir_dropbox";
            };
          } // packageOverrides)
      ) {};

    elixir_dropbox = elixir_dropbox_0_0_5;

    elixir_email_reply_parser_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "elixir_email_reply_parser";
            version = "0.1.0";
            src = fetchHex {
              pkg = "elixir_email_reply_parser";
              version = "0.1.0";
              sha256 =
                "e4b585773bf19e01ec32cddb24153d645486124a345ff260f07bf20c02d0e96c";
            };

            meta = {
              longDescription = ''Email reply parser for retrieval of the last
                                reply from email message. Originally an Elixir
                                port of
                                https://github.com/github/email_reply_parser as
                                well as its port
                                https://github.com/zapier/email-reply-parser
                                enhanced by e.g. an ability to handle emails
                                with German.'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/hellogustav/elixir_email_reply_parser";
            };
          } // packageOverrides)
      ) {};

    elixir_email_reply_parser = elixir_email_reply_parser_0_1_0;

    elixir_exif_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "elixir_exif";
            version = "0.2.0";
            src = fetchHex {
              pkg = "elixir_exif";
              version = "0.2.0";
              sha256 =
                "1bb82e27d67ca2723b31002622c17b21c55a17e28026e1022e51ff36fe39d6e6";
            };

            meta = {
              description = ''Parse exif and thumbnail data from jpeg/tiff
                            images.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sschneider1207/ElixirExif";
            };
          } // packageOverrides)
      ) {};

    elixir_exif = elixir_exif_0_2_0;

    elixir_feed_parser_2_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, timex_3_1_15 }:
          buildMix ({
            name = "elixir_feed_parser";
            version = "2.0.0";
            src = fetchHex {
              pkg = "elixir_feed_parser";
              version = "2.0.0";
              sha256 =
                "7cb9fe4a6bc75cc9dad894f3407acabdfface48a947fb05c8a0423f6bbfa108a";
            };
            beamDeps  = [ timex_3_1_15 ];

            meta = {
              description = ''An Elixir Atom/RSS2 feed parser.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/fdietz/elixir-feed-parser";
            };
          } // packageOverrides)
      ) {};

    elixir_feed_parser = elixir_feed_parser_2_0_0;

    elixir_freshbooks_0_0_10 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ibrowse_4_4_0,
          sweet_xml_0_6_5,
          xml_builder_0_0_9
        }:
          buildMix ({
            name = "elixir_freshbooks";
            version = "0.0.10";
            src = fetchHex {
              pkg = "elixir_freshbooks";
              version = "0.0.10";
              sha256 =
                "d542621d85738d76b86cc645d5bd1ec77fc113819c6dce285d2c48c622648969";
            };
            beamDeps  = [ ibrowse_4_4_0 sweet_xml_0_6_5 xml_builder_0_0_9 ];

            meta = {
              description = ''Elixir client for FreshBooks.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/marcelog/elixir_freshbooks";
            };
          } // packageOverrides)
      ) {};

    elixir_freshbooks = elixir_freshbooks_0_0_10;

    elixir_go_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "elixir_go";
            version = "0.2.0";
            src = fetchHex {
              pkg = "elixir_go";
              version = "0.2.0";
              sha256 =
                "d9060ac2eba6c0bad59ad5ffb28d6c55c9568fe13b7c3489aab40a440dc187ab";
            };

            meta = {
              description = ''Elixir struct for playing the game of go. Ported
                            from javascript/godash.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/kokolegorille/go";
            };
          } // packageOverrides)
      ) {};

    elixir_go = elixir_go_0_2_0;

    elixir_google_spreadsheets_0_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          goth_0_2_1,
          hackney_1_6_1,
          httpoison_0_9_2
        }:
          buildMix ({
            name = "elixir_google_spreadsheets";
            version = "0.1.2";
            src = fetchHex {
              pkg = "elixir_google_spreadsheets";
              version = "0.1.2";
              sha256 =
                "c1a95a7e73d61a1c639bfa5a63b2abae707d067fc0b755ebf647581dd1c73231";
            };
            beamDeps  = [ goth_0_2_1 hackney_1_6_1 httpoison_0_9_2 ];

            meta = {
              description = ''Elixir library to read and write data of Google
                            Spreadsheets.'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/Voronchuk/elixir_google_spreadsheets";
            };
          } // packageOverrides)
      ) {};

    elixir_google_spreadsheets = elixir_google_spreadsheets_0_1_2;

    elixir_gravatar_url_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "elixir_gravatar_url";
            version = "1.0.0";
            src = fetchHex {
              pkg = "elixir_gravatar_url";
              version = "1.0.0";
              sha256 =
                "e298fbfc6c4ebf401cf4e62739d79696eff3ce454f037055523c08f2cf815db1";
            };

            meta = {
              description = ''An Elixir module for generating Gravatar urls'';

            };
          } // packageOverrides)
      ) {};

    elixir_gravatar_url = elixir_gravatar_url_1_0_0;

    elixir_help_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "elixir_help";
            version = "0.1.0";
            src = fetchHex {
              pkg = "elixir_help";
              version = "0.1.0";
              sha256 =
                "a76dd871c1422ab548f96f82fc26d0b13f85df34aa2f3fa6e3fa4348b06478dc";
            };

            meta = {
              description = ''IEx `h` from your cli'';
              license = stdenv.lib.licenses.mit;
              homepage = "http://github.com/minhajuddin/h";
            };
          } // packageOverrides)
      ) {};

    elixir_help = elixir_help_0_1_0;

    elixir_ipfs_api_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ex_doc_0_15_1,
          httpoison_0_8_3,
          poison_1_5_2
        }:
          buildMix ({
            name = "elixir_ipfs_api";
            version = "0.1.0";
            src = fetchHex {
              pkg = "elixir_ipfs_api";
              version = "0.1.0";
              sha256 =
                "b8b6656ce18ff070b2328436cfa3d55f08b3e0a2f98bee49d4b3cb49c144684b";
            };
            beamDeps  = [ ex_doc_0_15_1 httpoison_0_8_3 poison_1_5_2 ];

            meta = {
              description = ''An elixir client library for the IPFS API'';

            };
          } // packageOverrides)
      ) {};

    elixir_ipfs_api = elixir_ipfs_api_0_1_0;

    elixir_ipify_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ex_doc_0_16_1,
          httpotion_3_0_2
        }:
          buildMix ({
            name = "elixir_ipify";
            version = "0.1.0";
            src = fetchHex {
              pkg = "elixir_ipify";
              version = "0.1.0";
              sha256 =
                "5e050efcd1e632a8dd4ca6633de66815096c45bca0a29b083522b3b881d953be";
            };
            beamDeps  = [ ex_doc_0_16_1 httpotion_3_0_2 ];

            meta = {
              description = ''A simple elixir library for ipify: A Simple IP
                            Address API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gabulyaz/elixir-ipify";
            };
          } // packageOverrides)
      ) {};

    elixir_ipify = elixir_ipify_0_1_0;

    elixir_kubernetes_cluster_0_1_8 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_1_0_2
        }:
          buildMix ({
            name = "elixir_kubernetes_cluster";
            version = "0.1.8";
            src = fetchHex {
              pkg = "elixir_kubernetes_cluster";
              version = "0.1.8";
              sha256 =
                "b3231412edaeaf0765d6bfcb6a0ac5248fe2c6f7f4088b06019a9df264dee629";
            };
            beamDeps  = [ httpoison_0_11_2 poison_1_0_2 ];

            meta = {
              longDescription = ''A module that automatically connects to a
                                Kubernetes API, in order to obtain the address
                                of other nodes, and connects to them.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/edevil/elixir_kubernetes_cluster";
            };
          } // packageOverrides)
      ) {};

    elixir_kubernetes_cluster = elixir_kubernetes_cluster_0_1_8;

    elixir_linter_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          credo_0_8_1,
          porcelain_2_0_3
        }:
          buildMix ({
            name = "elixir_linter";
            version = "0.1.0";
            src = fetchHex {
              pkg = "elixir_linter";
              version = "0.1.0";
              sha256 =
                "6d8dd87a04e75aabc05ec6bd547c8256cf7dc311221f98bc23c4a69c4914788f";
            };
            beamDeps  = [ credo_0_8_1 porcelain_2_0_3 ];

            meta = {
              longDescription = ''Elixir Linter is an engine for quickly and
                                easily running Credo code quality evaluation
                                against any project! Learn more about Credo
                                here: https://github.com/rrrene/credo'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/SophieDeBenedetto/elixir_linter";
            };
          } // packageOverrides)
      ) {};

    elixir_linter = elixir_linter_0_1_0;

    elixir_locker_0_1_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, locker_1_0_8 }:
          buildMix ({
            name = "elixir_locker";
            version = "0.1.4";
            src = fetchHex {
              pkg = "elixir_locker";
              version = "0.1.4";
              sha256 =
                "cca190b5846f37dfaaa495981b92e34015ca0dd0a879d200be90333f3866ceb2";
            };
            beamDeps  = [ locker_1_0_8 ];

            meta = {
              description = ''Elixir wrapper for the locker Erlang library.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tsharju/elixir_locker";
            };
          } // packageOverrides)
      ) {};

    elixir_locker = elixir_locker_0_1_4;

    elixir_make_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "elixir_make";
            version = "0.2.0";
            src = fetchHex {
              pkg = "elixir_make";
              version = "0.2.0";
              sha256 =
                "08f8afb950d693b34c56ac3e1b7db83dc03f3358e617c998f7618b59ef89dce9";
            };

            meta = {
              description = ''A Make compiler for Mix'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/elixir-lang/elixir_make";
            };
          } // packageOverrides)
      ) {};

    elixir_make_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "elixir_make";
            version = "0.3.0";
            src = fetchHex {
              pkg = "elixir_make";
              version = "0.3.0";
              sha256 =
                "978f9f0bbaf2772f14c5286321488e49c934a12ccc60a2803d6c94c4a128663e";
            };

            meta = {
              description = ''A Make compiler for Mix'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/elixir-lang/elixir_make";
            };
          } // packageOverrides)
      ) {};

    elixir_make_0_4_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "elixir_make";
            version = "0.4.0";
            src = fetchHex {
              pkg = "elixir_make";
              version = "0.4.0";
              sha256 =
                "4549183795460c581fd82010d10862e46bcf796e2039d16c255bad3e408f435d";
            };

            meta = {
              description = ''A Make compiler for Mix'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/elixir-lang/elixir_make";
            };
          } // packageOverrides)
      ) {};

    elixir_make = elixir_make_0_4_0;

    elixir_max72xx_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, elixir_ale_0_6_2 }:
          buildMix ({
            name = "elixir_max72xx";
            version = "0.1.2";
            src = fetchHex {
              pkg = "elixir_max72xx";
              version = "0.1.2";
              sha256 =
                "ccbd9b9b5a3bce8610ec14687285395aee908989191f671f5332f0935ef30136";
            };
            beamDeps  = [ elixir_ale_0_6_2 ];

            meta = {
              longDescription = ''Hex package to use 8x8 LED matrix or
                                7-segment displays with MAX72XX microchip in
                                Elixir/Nerves projects. Uses elixir_ale SPI
                                protocol for communication'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/konstantinzolotarev/elixir_max72xx";
            };
          } // packageOverrides)
      ) {};

    elixir_max72xx = elixir_max72xx_0_1_2;

    elixir_mbcs_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "elixir_mbcs";
            version = "0.1.2";
            src = fetchHex {
              pkg = "elixir_mbcs";
              version = "0.1.2";
              sha256 =
                "45d2572ed4c2bae10e961ddf95846ffd64f83ed7427898b8fdf3221607f610b5";
            };

            meta = {
              description = ''Convert the character encoding'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/woxtu/elixir-mbcs";
            };
          } // packageOverrides)
      ) {};

    elixir_mbcs = elixir_mbcs_0_1_2;

    elixir_mod_event_0_0_10 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, uuid_1_1_7 }:
          buildMix ({
            name = "elixir_mod_event";
            version = "0.0.10";
            src = fetchHex {
              pkg = "elixir_mod_event";
              version = "0.0.10";
              sha256 =
                "65b94a3988b6486b6d89e1ec9c88f64265bf138f20e1f724f663505f6cd3e3e5";
            };
            beamDeps  = [ uuid_1_1_7 ];

            meta = {
              longDescription = ''Elixir client for FreeSWITCH
                                mod_event_socket. Find the user guide in the
                                github repo at:
                                https://github.com/marcelog/elixir_mod_event.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/marcelog/elixir_mod_event";
            };
          } // packageOverrides)
      ) {};

    elixir_mod_event = elixir_mod_event_0_0_10;

    elixir_nsq_1_0_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_2_2_1,
          poison_1_5_2,
          socket_0_3_12,
          uuid_1_1_7
        }:
          buildMix ({
            name = "elixir_nsq";
            version = "1.0.3";
            src = fetchHex {
              pkg = "elixir_nsq";
              version = "1.0.3";
              sha256 =
                "6d30c3754dfdd988f927b9c6ae51d3e0ec4b0d2477b99047baf7a52c96bf9494";
            };
            beamDeps  = [
                          httpotion_2_2_1 poison_1_5_2 socket_0_3_12 uuid_1_1_7
                        ];

            meta = {
              longDescription = ''A client library for NSQ, `elixir_nsq` aims
                                to be complete, easy to use, and well tested.
                                Developed at Wistia (http://wistia.com).'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/wistia/elixir_nsq";
            };
          } // packageOverrides)
      ) {};

    elixir_nsq = elixir_nsq_1_0_3;

    elixir_pins_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, sshex_2_1_0 }:
          buildMix ({
            name = "elixir_pins";
            version = "0.0.1";
            src = fetchHex {
              pkg = "elixir_pins";
              version = "0.0.1";
              sha256 =
                "a311cf7a09eab691a85fbaaa5f661833f79e1ab3bcf7cf368567c56bc9eb60c0";
            };
            beamDeps  = [ sshex_2_1_0 ];

            meta = {
              description = ''Elixir interface for Raspberry Pi GPIO pins.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/MainShayne233/elixir_pins";
            };
          } // packageOverrides)
      ) {};

    elixir_pins = elixir_pins_0_0_1;

    elixir_prelude_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "elixir_prelude";
            version = "0.2.1";
            src = fetchHex {
              pkg = "elixir_prelude";
              version = "0.2.1";
              sha256 =
                "178d8de9762447e8f8271bd6af356a171af9fb7c20fcd4fa510a05e19b24240d";
            };

            meta = {
              description = ''Small set of useful utility functions'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ruby2elixir/elixir_prelude";
            };
          } // packageOverrides)
      ) {};

    elixir_prelude = elixir_prelude_0_2_1;

    elixir_qlib_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "elixir_qlib";
            version = "0.1.1";
            src = fetchHex {
              pkg = "elixir_qlib";
              version = "0.1.1";
              sha256 =
                "abca629322973c243b1af1a4089cebca487326bb381d57c07cd00ee78b6bbd3e";
            };

            meta = {
              description = ''A simple queue abstraction library to support
                            leasing and buffering in Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/rhumbertgz/elixir_qlib";
            };
          } // packageOverrides)
      ) {};

    elixir_qlib = elixir_qlib_0_1_1;

    elixir_radius_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "elixir_radius";
            version = "0.1.0";
            src = fetchHex {
              pkg = "elixir_radius";
              version = "0.1.0";
              sha256 =
                "40f4c2a792c5967e21d4e7914a91a62fbed3712bf9c6ec5f0a549e659e4ddc94";
            };

            meta = {
              description = ''Decode & encode RADIUS packets '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bearice/elixir-radius";
            };
          } // packageOverrides)
      ) {};

    elixir_radius = elixir_radius_0_1_0;

    elixir_script_0_27_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, estree_2_6_0, fs_3_4_0
        }:
          buildMix ({
            name = "elixir_script";
            version = "0.27.0";
            src = fetchHex {
              pkg = "elixir_script";
              version = "0.27.0";
              sha256 =
                "c4705b6ec506ed2b7a6ccc1756bdd9e237bf000a69290f7a56f91cf8f895ca8b";
            };
            beamDeps  = [ estree_2_6_0 fs_3_4_0 ];

            meta = {
              description = ''ElixirScript: compiles Elixir code to
                            JavaScript'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/elixirscript/elixirscript";
            };
          } // packageOverrides)
      ) {};

    elixir_script = elixir_script_0_27_0;

    elixir_socks5_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, socket_0_3_12 }:
          buildMix ({
            name = "elixir_socks5";
            version = "0.1.1";
            src = fetchHex {
              pkg = "elixir_socks5";
              version = "0.1.1";
              sha256 =
                "a882f776e27a51b2f4b7bb32614f7127ab55348c7a23753ae2c8b92586fb13c7";
            };
            beamDeps  = [ socket_0_3_12 ];

            meta = {
              longDescription = ''Yet another socks5 server implementation when
                                running alone(iex -S mix), it will listen on
                                port 9898 import in your project and start it
                                with SocksServer.Listener.Sup.start_link(9898)
                                Project is published with MIT License'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/eminarcissus/elixir_socks5";
            };
          } // packageOverrides)
      ) {};

    elixir_socks5 = elixir_socks5_0_1_1;

    elixir_style_guide_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "elixir_style_guide";
            version = "0.1.0";
            src = fetchHex {
              pkg = "elixir_style_guide";
              version = "0.1.0";
              sha256 =
                "f88892a54282f72f2fb2fe3e7ccd9a9a820ba117ccbad288cc003a54e0e66f0b";
            };

            meta = {
              description = ''A community driven style guide for Elixir'';
              license = stdenv.lib.licenses.free;
              homepage =
                "https://github.com/christopheradams/elixir_style_guide";
            };
          } // packageOverrides)
      ) {};

    elixir_style_guide = elixir_style_guide_0_1_0;

    elixir_talk_1_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          connection_1_0_4,
          yamerl_0_4_0,
          yaml_elixir_1_2_0
        }:
          buildMix ({
            name = "elixir_talk";
            version = "1.2.0";
            src = fetchHex {
              pkg = "elixir_talk";
              version = "1.2.0";
              sha256 =
                "3aa1e22c7f159cb7bf0727b1ab9d070f4348a824a19ac360fca139b5ef38646b";
            };
            beamDeps  = [ connection_1_0_4 yamerl_0_4_0 yaml_elixir_1_2_0 ];

            meta = {
              description = ''ElixirTalk is an Elixir client for beanstalkd.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jsvisa/elixir_talk";
            };
          } // packageOverrides)
      ) {};

    elixir_talk = elixir_talk_1_2_0;

    elixir_tea_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "elixir_tea";
            version = "1.0.0";
            src = fetchHex {
              pkg = "elixir_tea";
              version = "1.0.0";
              sha256 =
                "c1e46d2d7b07a926ba8730452f517db45cf4f8f35d119b84aa0f0f676048cdcc";
            };

            meta = {
              description = ''A TEA (Tiny Encryption Algorithm) implemented in
                            pure Elixir. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/keichan34/elixir_tea";
            };
          } // packageOverrides)
      ) {};

    elixir_tea = elixir_tea_1_0_0;

    elixir_thrift_hbase_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "elixir_thrift_hbase";
            version = "0.0.3";
            src = fetchHex {
              pkg = "elixir_thrift_hbase";
              version = "0.0.3";
              sha256 =
                "08901a2b3052cb067a08177ff17238b6f858090a1c4d1c8d105924a31993ed55";
            };

            meta = {
              description = ''A Wrapper for HBase Thrift Calls'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/joseph-lozano/elixir-thrift-hbase";
            };
          } // packageOverrides)
      ) {};

    elixir_thrift_hbase = elixir_thrift_hbase_0_0_3;

    elixir_tictactoe_0_3_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "elixir_tictactoe";
            version = "0.3.2";
            src = fetchHex {
              pkg = "elixir_tictactoe";
              version = "0.3.2";
              sha256 =
                "17908259b577251bbf5b0ffcfbb1ea4ddd826eb21a05a401b8624777013d4a96";
            };

            meta = {
              description = ''Core library to build a tictactoe app'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/andreamazza89/elixir_ttt_core";
            };
          } // packageOverrides)
      ) {};

    elixir_tictactoe = elixir_tictactoe_0_3_2;

    elixir_uber_0_0_6 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_9_2,
          oauth2_0_9_1,
          poison_2_2_0
        }:
          buildMix ({
            name = "elixir_uber";
            version = "0.0.6";
            src = fetchHex {
              pkg = "elixir_uber";
              version = "0.0.6";
              sha256 =
                "36f5792c4c159b484595e52b4eab85eee25622b6cf4273a97ca105c7f2cd8d1b";
            };
            beamDeps  = [ httpoison_0_9_2 oauth2_0_9_1 poison_2_2_0 ];

            meta = {
              description = ''Uber client library for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/maratgaliev/elixir_uber";
            };
          } // packageOverrides)
      ) {};

    elixir_uber = elixir_uber_0_0_6;

    elixir_v8_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exjsx_3_2_1,
          poolboy_1_5_1
        }:
          buildMix ({
            name = "elixir_v8";
            version = "0.3.0";
            src = fetchHex {
              pkg = "elixir_v8";
              version = "0.3.0";
              sha256 =
                "cac97dfeaaaebd06dd7735d66c2b1223898bc38e5821e7236e5f2bfe63b80421";
            };
            beamDeps  = [ exjsx_3_2_1 poolboy_1_5_1 ];

            meta = {
              description = ''V8 engine for Elixir with pools.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/le0pard/elixir_v8";
            };
          } // packageOverrides)
      ) {};

    elixir_v8 = elixir_v8_0_3_0;

    elixir_weather_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          floki_0_17_2,
          hackney_1_8_0,
          httpoison_0_11_2
        }:
          buildMix ({
            name = "elixir_weather";
            version = "0.1.0";
            src = fetchHex {
              pkg = "elixir_weather";
              version = "0.1.0";
              sha256 =
                "de921e8fc37f80cb8bde62be3b2ae0df787db74a6fe5880e069ad2f8c969aab0";
            };
            beamDeps  = [ floki_0_17_2 hackney_1_8_0 httpoison_0_11_2 ];

            meta = {
              description = ''Page parser for weather sites'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mpran/elixir-weather";
            };
          } // packageOverrides)
      ) {};

    elixir_weather = elixir_weather_0_1_0;

    elixir_weather_data_0_1_7 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_9_2,
          poison_2_2_0,
          timex_3_1_15
        }:
          buildMix ({
            name = "elixir_weather_data";
            version = "0.1.7";
            src = fetchHex {
              pkg = "elixir_weather_data";
              version = "0.1.7";
              sha256 =
                "5e9993fe752d444b0102c3568537785c99bb15c54f2e22ed790417e4657b8ea9";
            };
            beamDeps  = [ httpoison_0_9_2 poison_2_2_0 timex_3_1_15 ];

            meta = {
              longDescription = ''This application provides the current weather
                                data for the given geo coordinates
                                (latitude/longitude) based on openweathermap.org
                                v2.5.'';
              license = stdenv.lib.licenses.lpgl3;
              homepage =
                "https://github.com/the-guitarman/elixir_weather_data";
            };
          } // packageOverrides)
      ) {};

    elixir_weather_data = elixir_weather_data_0_1_7;

    elixir_weather_slack_bot_0_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          elixir_weather_0_1_0,
          hackney_1_8_0,
          httpoison_0_11_2
        }:
          buildMix ({
            name = "elixir_weather_slack_bot";
            version = "0.1.2";
            src = fetchHex {
              pkg = "elixir_weather_slack_bot";
              version = "0.1.2";
              sha256 =
                "9ad44845a036c4c677a7d8eb2f750f372ebc1920df23efb6d4bd348b2de23392";
            };
            beamDeps  = [ elixir_weather_0_1_0 hackney_1_8_0 httpoison_0_11_2
                      ];

            meta = {
              description = ''Slack bot hndler for weather'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mpran/elixir-weather-slack-bot";
            };
          } // packageOverrides)
      ) {};

    elixir_weather_slack_bot = elixir_weather_slack_bot_0_1_2;

    elixir_wit_2_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_3_0_2,
          poison_3_1_0,
          uuid_1_1_7
        }:
          buildMix ({
            name = "elixir_wit";
            version = "2.0.0";
            src = fetchHex {
              pkg = "elixir_wit";
              version = "2.0.0";
              sha256 =
                "47fe0047731dd28f69d3fb48c213bf96b0afa94953291f9e24483ae8ca2d2808";
            };
            beamDeps  = [ httpotion_3_0_2 poison_3_1_0 uuid_1_1_7 ];

            meta = {
              longDescription = ''Elixir client for the Wit API. Wit is the
                                natural language engine for creating Bots.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zabirauf/elixir_wit";
            };
          } // packageOverrides)
      ) {};

    elixir_wit = elixir_wit_2_0_0;

    elixir_xml_to_map_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, erlsom_1_4_1 }:
          buildMix ({
            name = "elixir_xml_to_map";
            version = "0.1.1";
            src = fetchHex {
              pkg = "elixir_xml_to_map";
              version = "0.1.1";
              sha256 =
                "3a3d20fbc7dd4acaa9bc5527ba803229265aa0de9b4bbb5286a41c566fea1c38";
            };
            beamDeps  = [ erlsom_1_4_1 ];

            meta = {
              description = ''A module for converting an XML string to a map'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/homanchou/elixir-xml-to-map";
            };
          } // packageOverrides)
      ) {};

    elixir_xml_to_map = elixir_xml_to_map_0_1_1;

    elixirbotkit_0_5_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, slack_0_7_1 }:
          buildMix ({
            name = "elixirbotkit";
            version = "0.5.0";
            src = fetchHex {
              pkg = "elixirbotkit";
              version = "0.5.0";
              sha256 =
                "2932ac1957d56302760feb27a4c081a654ec7367accb2b99bd4f0c82a88b3a29";
            };
            beamDeps  = [ slack_0_7_1 ];

            meta = {
              description = ''A Slack bot extension that hears what you ask'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/aabrook/elixirbotkit";
            };
          } // packageOverrides)
      ) {};

    elixirbotkit = elixirbotkit_0_5_0;

    elixirfm_0_0_10 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "elixirfm";
            version = "0.0.10";
            src = fetchHex {
              pkg = "elixirfm";
              version = "0.0.10";
              sha256 =
                "10389726e6e3e76853bedee596753625ffc099fa014a9c1348ff2c8ec74879a7";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''Lastfm API client for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jrichocean/Elixirfm";
            };
          } // packageOverrides)
      ) {};

    elixirfm = elixirfm_0_0_10;

    elixirway_0_1_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "elixirway";
            version = "0.1.4";
            src = fetchHex {
              pkg = "elixirway";
              version = "0.1.4";
              sha256 =
                "35c923f3e03fc04a10fe578ecde83703f29f43de39314bfc17393cbd6b2f614e";
            };

            meta = {
              description = ''A piglatin translator written in Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/spilth/elixirway";
            };
          } // packageOverrides)
      ) {};

    elixirway = elixirway_0_1_4;

    elixlsx_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "elixlsx";
            version = "0.2.0";
            src = fetchHex {
              pkg = "elixlsx";
              version = "0.2.0";
              sha256 =
                "1e2676caa2d7e6b6194383105444c8e2ceb7e70c634839e85eefec5c059444a1";
            };

            meta = {
              description = ''a writer for XLSX spreadsheet files'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/xou/elixlsx";
            };
          } // packageOverrides)
      ) {};

    elixlsx = elixlsx_0_2_0;

    elixometer_1_2_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          edown_0_8_1,
          exometer_core_1_4_0,
          lager_3_2_4,
          pobox_1_0_2
        }:
          buildMix ({
            name = "elixometer";
            version = "1.2.1";
            src = fetchHex {
              pkg = "elixometer";
              version = "1.2.1";
              sha256 =
                "b0202af43bc5258bc84d1841b25f3661948b08f08286b1460f4f5710d579615f";
            };
            beamDeps  = [
                          edown_0_8_1
                          exometer_core_1_4_0
                          lager_3_2_4
                          pobox_1_0_2
                        ];

            meta = {
              longDescription = ''Elixometer is a light wrapper around exometer
                                that defines and subscribes metrics
                                automatically to the configured reporter.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/pinterest/elixometer
";
            };
          } // packageOverrides)
      ) {};

    elixometer = elixometer_1_2_1;

    elixtagram_0_6_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          oauth2_0_9_1,
          poison_3_1_0
        }:
          buildMix ({
            name = "elixtagram";
            version = "0.6.0";
            src = fetchHex {
              pkg = "elixtagram";
              version = "0.6.0";
              sha256 =
                "8bae37d9f56a53acbc8a761d7dcd2d6469706a4e6dbccf5ade7be70f54dcd4cd";
            };
            beamDeps  = [ httpoison_0_11_2 oauth2_0_9_1 poison_3_1_0 ];

            meta = {
              description = ''Instagram client library for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zensavona/elixtagram";
            };
          } // packageOverrides)
      ) {};

    elixtagram = elixtagram_0_6_0;

    elixush_0_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, zipper_1_0_0 }:
          buildMix ({
            name = "elixush";
            version = "0.0.4";
            src = fetchHex {
              pkg = "elixush";
              version = "0.0.4";
              sha256 =
                "3f84a78f5834b8b2f2cd4675945752aaea388585095c4bc766d32c8228d2e6d8";
            };
            beamDeps  = [ zipper_1_0_0 ];

            meta = {
              description = ''A simple Push programming language interpreter
                            implemented in Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/benfb/elixush";
            };
          } // packageOverrides)
      ) {};

    elixush = elixush_0_0_4;

    elli_1_0_5 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "elli";
            version = "1.0.5";
            src = fetchHex {
              pkg = "elli";
              version = "1.0.5";
              sha256 =
                "fb55bab884f1d921f2e86c00738909a9e56aca14604e617b138e163093609c97";
            };

            meta = {
              description = ''Erlang web server for HTTP APIs'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/elli-lib/elli";
            };
          } // packageOverrides)
      ) {};

    elli_2_0_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "elli";
            version = "2.0.1";
            src = fetchHex {
              pkg = "elli";
              version = "2.0.1";
              sha256 =
                "a24780c7806067e9cdca2ae03105d4446475b623ea524462b504ad8713902a1c";
            };

            meta = {
              description = ''Erlang web server for HTTP APIs'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/elli-lib/elli";
            };
          } // packageOverrides)
      ) {};

    elli = elli_2_0_1;

    elli_cache_0_1_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, erlando_3_1_1 }:
          buildRebar3 ({
            name = "elli_cache";
            version = "0.1.1";
            src = fetchHex {
              pkg = "elli_cache";
              version = "0.1.1";
              sha256 =
                "a55be28fd6cbeba97751837c6174cd5cdc4ab7d0c37b12cbb3e1695797bd23c5";
            };

            beamDeps  = [ erlando_3_1_1 ];

            meta = {
              description = ''Elli middleware for generic caching.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/elli-lib/elli_cache";
            };
          } // packageOverrides)
      ) {};

    elli_cache = elli_cache_0_1_1;

    elli_cloudfront_0_3_3 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          elli_1_0_5,
          elli_cookie_0_1_7,
          jsx_2_8_0
        }:
          buildRebar3 ({
            name = "elli_cloudfront";
            version = "0.3.3";
            src = fetchHex {
              pkg = "elli_cloudfront";
              version = "0.3.3";
              sha256 =
                "73ebd75299f26ba0dd888530a3f460b15526af3eb6d3adad494581d3950ee145";
            };

            beamDeps  = [ elli_1_0_5 elli_cookie_0_1_7 jsx_2_8_0 ];

            meta = {
              description = ''Elli middleware to manage CloudFront signed
                            requests.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/elli-lib/elli_cloudfront";
            };
          } // packageOverrides)
      ) {};

    elli_cloudfront = elli_cloudfront_0_3_3;

    elli_cookie_0_1_7 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, elli_1_0_5 }:
          buildRebar3 ({
            name = "elli_cookie";
            version = "0.1.7";
            src = fetchHex {
              pkg = "elli_cookie";
              version = "0.1.7";
              sha256 =
                "b3ac3ed5f3d02f0de28668484659362d30539a74bbcf926ad216d3d89587bebd";
            };

            beamDeps  = [ elli_1_0_5 ];

            meta = {
              description = ''Cookies for Elli.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/elli-lib/elli_cookie";
            };
          } // packageOverrides)
      ) {};

    elli_cookie_0_2_9 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "elli_cookie";
            version = "0.2.9";
            src = fetchHex {
              pkg = "elli_cookie";
              version = "0.2.9";
              sha256 =
                "0b8362e93e718153649f2ab1eeda82bb368b9d872dcb21141c72a5fd7cb8a97d";
            };

            meta = {
              description = ''Cookies for Elli.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/elli-lib/elli_cookie";
            };
          } // packageOverrides)
      ) {};

    elli_cookie = elli_cookie_0_2_9;

    elli_date_1_1_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "elli_date";
            version = "1.1.1";
            src = fetchHex {
              pkg = "elli_date";
              version = "1.1.1";
              sha256 =
                "a78a1eb846395e3e2d96ce5924ed3d4147e792ea72e167a649de0fd4fb37a662";
            };

            meta = {
              description = ''Elli middleware adding the Date header.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/elli-lib/elli_date";
            };
          } // packageOverrides)
      ) {};

    elli_date = elli_date_1_1_1;

    elli_prometheus_0_1_1 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          accept_0_3_0,
          prometheus_3_1_1
        }:
          buildRebar3 ({
            name = "elli_prometheus";
            version = "0.1.1";
            src = fetchHex {
              pkg = "elli_prometheus";
              version = "0.1.1";
              sha256 =
                "cb3db4e99bfa721b51f6aa8fc111cb21e1d59cc7270e6193a1e7fe0b457b8f32";
            };

            beamDeps  = [ accept_0_3_0 prometheus_3_1_1 ];

            meta = {
              description = ''Elli middleware for collecting stats via
                            Prometheus.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/elli-lib/elli_prometheus";
            };
          } // packageOverrides)
      ) {};

    elli_prometheus = elli_prometheus_0_1_1;

    elli_xpblfe_0_2_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "elli_xpblfe";
            version = "0.2.3";
            src = fetchHex {
              pkg = "elli_xpblfe";
              version = "0.2.3";
              sha256 =
                "aaac1e40f718e080b84438ff6a35ee9b69c71a833b78824c578d5fb1411f0944";
            };

            meta = {
              description = ''Elli middleware to add X-Powered-By: LFE
                            header.'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/elli-lib/elli_xpblfe";
            };
          } // packageOverrides)
      ) {};

    elli_xpblfe = elli_xpblfe_0_2_3;

    elm_compile_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "elm_compile";
            version = "0.1.0";
            src = fetchHex {
              pkg = "elm_compile";
              version = "0.1.0";
              sha256 =
                "487ab60cf1d270fb9841ff1fe7c35c6194e3cea5f0db1c3d88d039753719be8b";
            };

            meta = {
              description = ''Simple elm compile hook-in for Mix projects'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ErikMejerHansen/elm_compile";
            };
          } // packageOverrides)
      ) {};

    elm_compile = elm_compile_0_1_0;

    elmdb_0_4_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "elmdb";
            version = "0.4.1";
            src = fetchHex {
              pkg = "elmdb";
              version = "0.4.1";
              sha256 =
                "7a372a07fec517468d355a6528119fb87b122bf185620765383aec4b789aba0d";
            };
            compilePorts = true;

            meta = {
              longDescription = ''Erlang NIF driver for LMDB. A fast, compact
                                and transactional key-value data store.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/zambal/elmdb";
            };
          } // packageOverrides)
      ) {};

    elmdb = elmdb_0_4_1;

    elmer_0_0_14 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "elmer";
            version = "0.0.14";
            src = fetchHex {
              pkg = "elmer";
              version = "0.0.14";
              sha256 =
                "7f4c43c32fa0e20d2e6f42bd4737286d30b84b198b2afe6561041be0ee3d76f0";
            };

            meta = {
              description = ''Helper mix tasks for generating elm files like
                            Main, Ports, Models, Msgs, etc.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nathanjohnson320/elmer";
            };
          } // packageOverrides)
      ) {};

    elmer = elmer_0_0_14;

    elmit_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, httpotion_2_2_1 }:
          buildMix ({
            name = "elmit";
            version = "0.0.1";
            src = fetchHex {
              pkg = "elmit";
              version = "0.0.1";
              sha256 =
                "90e5df811553733dd7505f9cc81397c3bdaf9c336eb3542c7e44f3c2012ef96e";
            };
            beamDeps  = [ httpotion_2_2_1 ];

            meta = {
              description = ''Google Translate with speech synthesis in your
                            terminal as Hex package.'';

            };
          } // packageOverrides)
      ) {};

    elmit = elmit_0_0_1;

    elmxir_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "elmxir";
            version = "0.0.1";
            src = fetchHex {
              pkg = "elmxir";
              version = "0.0.1";
              sha256 =
                "65ad59b4922b75fb7b6c888f3e5c7dea1d01a4a085a376261bcaa3cfd6ce0845";
            };

            meta = {
              description = ''Helper functions for working with Elm + Elixir'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/NoRedInk/elmxir";
            };
          } // packageOverrides)
      ) {};

    elmxir = elmxir_0_0_1;

    elo_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "elo";
            version = "0.1.0";
            src = fetchHex {
              pkg = "elo";
              version = "0.1.0";
              sha256 =
                "2de825e49a309fc3ff88ad82b2bd51407b2037775ca746701c1c96753fc97bf0";
            };

            meta = {
              description = ''Calculate Elo ratings.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/paulfri/elo";
            };
          } // packageOverrides)
      ) {};

    elo = elo_0_1_0;

    elvis_0_3_3 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          egithub_0_3_2,
          elvis_core_0_3_6,
          getopt_0_8_2,
          katana_code_0_1_0
        }:
          buildRebar3 ({
            name = "elvis";
            version = "0.3.3";
            src = fetchHex {
              pkg = "elvis";
              version = "0.3.3";
              sha256 =
                "de891055bd6404cc6a48619b5c3e69ebf6aa8c1758f43decb9bc23a86d0fd889";
            };

            beamDeps  = [
                          egithub_0_3_2
                          elvis_core_0_3_6
                          getopt_0_8_2
                          katana_code_0_1_0
                        ];

            meta = {
              description = ''CLI for the Elvis Erlang Style Reviewer'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/inaka/elvis";
            };
          } // packageOverrides)
      ) {};

    elvis = elvis_0_3_3;

    elvis_core_0_3_2 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          katana_code_0_1_0,
          lager_3_0_2,
          zipper_1_0_0
        }:
          buildRebar3 ({
            name = "elvis_core";
            version = "0.3.2";
            src = fetchHex {
              pkg = "elvis_core";
              version = "0.3.2";
              sha256 =
                "a699e97177093753a05c8b674893b2f750bdbec9537cf2457b6dddc547ffb9fd";
            };

            beamDeps  = [ katana_code_0_1_0 lager_3_0_2 zipper_1_0_0 ];

            meta = {
              description = ''Core library for the Erlang style reviewer'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/inaka/elvis_core";
            };
          } // packageOverrides)
      ) {};

    elvis_core_0_3_5 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          katana_code_0_1_0,
          lager_3_2_4,
          zipper_1_0_1
        }:
          buildRebar3 ({
            name = "elvis_core";
            version = "0.3.5";
            src = fetchHex {
              pkg = "elvis_core";
              version = "0.3.5";
              sha256 =
                "4ce96e721e99d8456f1b93347318ea7d2208f06d64c21c39fa64124e4b68eb06";
            };

            beamDeps  = [ katana_code_0_1_0 lager_3_2_4 zipper_1_0_1 ];

            meta = {
              description = ''Core library for the Erlang style reviewer'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/inaka/elvis_core";
            };
          } // packageOverrides)
      ) {};

    elvis_core_0_3_6 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          katana_code_0_1_0,
          zipper_1_0_1
        }:
          buildRebar3 ({
            name = "elvis_core";
            version = "0.3.6";
            src = fetchHex {
              pkg = "elvis_core";
              version = "0.3.6";
              sha256 =
                "eb9866529c3cc90b2e99aa47fde7c82f85c4e6b14d6e8b5d73ca7c37b9699134";
            };

            beamDeps  = [ katana_code_0_1_0 zipper_1_0_1 ];

            meta = {
              description = ''Core library for the Erlang style reviewer'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/inaka/elvis_core";
            };
          } // packageOverrides)
      ) {};

    elvis_core = elvis_core_0_3_6;

    elxparser_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "elxparser";
            version = "0.0.1";
            src = fetchHex {
              pkg = "elxparser";
              version = "0.0.1";
              sha256 =
                "512fa6e23131e2a6204b0b763e3f6bd7e2ebdbc3f2ee1008dc99a824f5e60b86";
            };

            meta = {
              description = ''An Elixir Parser Combinator Library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kmizu/elxparser";
            };
          } // packageOverrides)
      ) {};

    elxparser = elxparser_0_0_1;

    email_checker_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, socket_0_3_12 }:
          buildMix ({
            name = "email_checker";
            version = "0.1.0";
            src = fetchHex {
              pkg = "email_checker";
              version = "0.1.0";
              sha256 =
                "c6f3df73b7d8418e56f5388bf4f6e66cd49c5b6d14d958a962a48e40cdc9ec5f";
            };
            beamDeps  = [ socket_0_3_12 ];

            meta = {
              longDescription = ''Simple library checking the validity of an
                                email. Checks are performed in the following
                                order: - REGEX: validate the emails has a good
                                looking format - MX: validate the domain sever
                                contains MX records - SMTP: validate the SMTP
                                behind the MX records knows this email address
                                (no email sent)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jshmrtn/email_checker";
            };
          } // packageOverrides)
      ) {};

    email_checker = email_checker_0_1_0;

    emarkdown_0_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "emarkdown";
            version = "0.1.0";
            src = fetchHex {
              pkg = "emarkdown";
              version = "0.1.0";
              sha256 =
                "260e4170c0fad7532b5651486c1ff4291e3069cf6d862393106cf3e2b2f3efce";
            };
            compilePorts = true;

            meta = {
              description = ''Markdown converter based on devinus/markdown but
                            in Erlang'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/inaka/emarkdown";
            };
          } // packageOverrides)
      ) {};

    emarkdown = emarkdown_0_1_0;

    emay_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_10_0,
          sweet_xml_0_6_5
        }:
          buildMix ({
            name = "emay";
            version = "0.1.0";
            src = fetchHex {
              pkg = "emay";
              version = "0.1.0";
              sha256 =
                "c78dd94038b1c247671420496edb9c212f226bc9a5209535c7fcf49899673ffa";
            };
            beamDeps  = [ httpoison_0_10_0 sweet_xml_0_6_5 ];

            meta = {
              description = ''Send SM via Emay(亿美软通)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ZhuyiHome/emay";
            };
          } // packageOverrides)
      ) {};

    emay = emay_0_1_0;

    emeck_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, meck_0_8_4 }:
          buildMix ({
            name = "emeck";
            version = "1.0.0";
            src = fetchHex {
              pkg = "emeck";
              version = "1.0.0";
              sha256 =
                "b502dda5cdb6a0dd5a892e6d6f25b5dba038f2afd67d25a4dfaae5c87233bab7";
            };
            beamDeps  = [ meck_0_8_4 ];

            meta = {
              description = ''A Mocking library for Elixir language. It`s
                            implemented based on meck.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bencode/emeck";
            };
          } // packageOverrides)
      ) {};

    emeck = emeck_1_0_0;

    eministat_0_10_1 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex }:
          buildErlangMk ({
            name = "eministat";
            version = "0.10.1";
            src = fetchHex {
              pkg = "eministat";
              version = "0.10.1";
              sha256 =
                "1e581fe282e8851c036fb6e4908add91956eba62ce0cce97fceee66067157d5f";
            };

            meta = {
              description = ''Basic statistics for comparing datasets from
                            benchmarks'';

            };
          } // packageOverrides)
      ) {};

    eministat = eministat_0_10_1;

    eml_0_7_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "eml";
            version = "0.7.1";
            src = fetchHex {
              pkg = "eml";
              version = "0.7.1";
              sha256 =
                "f03a35e2684455ee9e8b641f9550d41893f5b013c1277751685414f56cee9c0a";
            };

            meta = {
              longDescription = ''Eml makes markup a first class citizen in
                                Elixir. It provides a flexible and modular
                                toolkit for generating, parsing and manipulating
                                markup. It`s main focus is html, but other
                                markup languages could be implemented as well.
                                '';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/zambal/eml";
            };
          } // packageOverrides)
      ) {};

    eml = eml_0_7_1;

    eml_amf0_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "eml_amf0";
            version = "1.0.1";
            src = fetchHex {
              pkg = "eml_amf0";
              version = "1.0.1";
              sha256 =
                "aed696aab45214f243bac36fb60ad53aa22b0432bee240928ca391caac4308f3";
            };

            meta = {
              longDescription = ''Provides functions to serialize and
                                deserialize data encoded in the AMF0 data
                                format'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/KallDrexx/elixir-media-libs/tree/master/apps/amf0";
            };
          } // packageOverrides)
      ) {};

    eml_amf0 = eml_amf0_1_0_1;

    eml_gen_rtmp_client_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, eml_rtmp_0_2_0 }:
          buildMix ({
            name = "eml_gen_rtmp_client";
            version = "0.1.0";
            src = fetchHex {
              pkg = "eml_gen_rtmp_client";
              version = "0.1.0";
              sha256 =
                "dc829d0ff74d612908d59000bec4259268f28f155d86a5862fed3b40f831f3ad";
            };
            beamDeps  = [ eml_rtmp_0_2_0 ];

            meta = {
              description = ''Behaviour to make it easy to create custom RTMP
                            clients'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/KallDrexx/elixir-media-libs/tree/master/apps/gen_rtmp_client";
            };
          } // packageOverrides)
      ) {};

    eml_gen_rtmp_client = eml_gen_rtmp_client_0_1_0;

    eml_gen_rtmp_server_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          eml_rtmp_0_2_0,
          ranch_1_3_1,
          uuid_1_1_7
        }:
          buildMix ({
            name = "eml_gen_rtmp_server";
            version = "0.2.0";
            src = fetchHex {
              pkg = "eml_gen_rtmp_server";
              version = "0.2.0";
              sha256 =
                "b9ca1e7e02afbf7696bd530d989fe2583f92910be6dbf92324f4733d6f40d0f3";
            };
            beamDeps  = [ eml_rtmp_0_2_0 ranch_1_3_1 uuid_1_1_7 ];

            meta = {
              description = ''Behaviour to make it easy to create custom RTMP
                            servers'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/KallDrexx/elixir-media-libs/tree/master/apps/gen_rtmp_server";
            };
          } // packageOverrides)
      ) {};

    eml_gen_rtmp_server = eml_gen_rtmp_server_0_2_0;

    eml_rtmp_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, eml_amf0_1_0_1 }:
          buildMix ({
            name = "eml_rtmp";
            version = "0.2.0";
            src = fetchHex {
              pkg = "eml_rtmp";
              version = "0.2.0";
              sha256 =
                "c2205bd35d806017688637263776aad4cf1465f710caf44e74ed69c42ead6345";
            };
            beamDeps  = [ eml_amf0_1_0_1 ];

            meta = {
              longDescription = ''Library containing functionality for handling
                                RTMP connections, from handshaking,
                                serialization, deserialization, and logical flow
                                of RTMP data.'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/KallDrexx/elixir-media-libs/tree/master/apps/rtmp";
            };
          } // packageOverrides)
      ) {};

    eml_rtmp = eml_rtmp_0_2_0;

    eml_rtmp_handshake_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "eml_rtmp_handshake";
            version = "1.0.0";
            src = fetchHex {
              pkg = "eml_rtmp_handshake";
              version = "1.0.0";
              sha256 =
                "a37f43bb4a8438cdf23c6047384e063045556b1743af06265a1153169ddd18e2";
            };

            meta = {
              description = ''Library providing the capability to process and
                            perform RTMP handshakes'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/KallDrexx/elixir-media-libs/tree/master/apps/rtmp_handshake";
            };
          } // packageOverrides)
      ) {};

    eml_rtmp_handshake = eml_rtmp_handshake_1_0_0;

    eml_rtmp_session_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, eml_amf0_1_0_1 }:
          buildMix ({
            name = "eml_rtmp_session";
            version = "0.1.0";
            src = fetchHex {
              pkg = "eml_rtmp_session";
              version = "0.1.0";
              sha256 =
                "76012a25e062908de5a7e37082573a108e12e2a833052cccb2db59b615ebe891";
            };
            beamDeps  = [ eml_amf0_1_0_1 ];

            meta = {
              longDescription = ''Provides an abstraction of the RTMP protocol
                                and represents a single peer in an RTMP
                                connection'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/KallDrexx/elixir-media-libs/tree/master/apps/rtmp_session";
            };
          } // packageOverrides)
      ) {};

    eml_rtmp_session = eml_rtmp_session_0_1_0;

    emodel_1_6_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "emodel";
            version = "1.6.0";
            src = fetchHex {
              pkg = "emodel";
              version = "1.6.0";
              sha256 =
                "b3968b1d92d67f527b42af0f984ad84062104ecede52c69a9e9ca99b73a3e66b";
            };

            meta = {
              description = ''Erlang data transformation/validation library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/egobrain/emodel";
            };
          } // packageOverrides)
      ) {};

    emodel = emodel_1_6_0;

    emoj_1_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "emoj";
            version = "1.0.1";
            src = fetchHex {
              pkg = "emoj";
              version = "1.0.1";
              sha256 =
                "b4e738eb6104fa7f52a3f25d065ea82cdb4813bb8e7f1934fb193533c02e453b";
            };
            beamDeps  = [ httpoison_0_11_2 poison_2_2_0 ];

            meta = {
              description = ''Find relevant emoji from text'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sotojuan/emoj";
            };
          } // packageOverrides)
      ) {};

    emoj = emoj_1_0_1;

    emojiclock_2_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, timex_3_1_15 }:
          buildMix ({
            name = "emojiclock";
            version = "2.0.4";
            src = fetchHex {
              pkg = "emojiclock";
              version = "2.0.4";
              sha256 =
                "cda321f78644d1bb5252270e0b27e4b1ca0d7368b457b01b30104d43b97196fc";
            };
            beamDeps  = [ timex_3_1_15 ];

            meta = {
              description = ''🕒 An Elixir module for giving you an emoji
                            clock for a given hour.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nathanhornby/emojiclock-elixir";
            };
          } // packageOverrides)
      ) {};

    emojiclock = emojiclock_2_0_4;

    emojix_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_3_1_0 }:
          buildMix ({
            name = "emojix";
            version = "0.1.1";
            src = fetchHex {
              pkg = "emojix";
              version = "0.1.1";
              sha256 =
                "efc64a09a60e11f06cbb0a62d868a6a95c5bcf5a8ebca0e520252a3867ef1d4b";
            };
            beamDeps  = [ poison_3_1_0 ];

            meta = {
              description = ''An elixir library that converts emoji in char or
                            svg. 💩'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ukita/emojix";
            };
          } // packageOverrides)
      ) {};

    emojix = emojix_0_1_1;

    encore_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "encore";
            version = "0.0.1";
            src = fetchHex {
              pkg = "encore";
              version = "0.0.1";
              sha256 =
                "075a44edf57f8eb4649bbfaca44638ce03b7d84a0cff01a8cb4f9beeb6d553cd";
            };

            meta = {
              longDescription = ''Encore is an elixir library for building
                                temporal expressions as described by Martin
                                Fowler in
                                https://martinfowler.com/apsupp/recurring.pdf'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jnmandal/encore";
            };
          } // packageOverrides)
      ) {};

    encore = encore_0_0_1;

    endo_0_0_1_beta = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "endo";
            version = "0.0.1-beta";
            src = fetchHex {
              pkg = "endo";
              version = "0.0.1-beta";
              sha256 =
                "4fa51c12a63b90147e2f7c2f0ab2668249b240a5f8110d8b31873a4f428821bd";
            };

            meta = {
              description = ''Translates SQL to Ecto'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/brianvanburken/endo";
            };
          } // packageOverrides)
      ) {};

    endo = endo_0_0_1_beta;

    engine_0_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          calendar_0_16_1,
          eventstore_0_6_2,
          extreme_0_6_2,
          logger_file_backend_0_0_9,
          mongodb_0_3_0,
          poolboy_1_5_1,
          sweet_xml_0_6_5,
          syn_1_6_1,
          uuid_1_1_7
        }:
          buildMix ({
            name = "engine";
            version = "0.1.2";
            src = fetchHex {
              pkg = "engine";
              version = "0.1.2";
              sha256 =
                "46da641a3550fdd7ec9494b9d507dc9acf2e684c61f5056d21a2c5c180d730a0";
            };
            beamDeps  = [
                          calendar_0_16_1
                          eventstore_0_6_2
                          extreme_0_6_2
                          logger_file_backend_0_0_9
                          mongodb_0_3_0
                          poolboy_1_5_1
                          sweet_xml_0_6_5
                          syn_1_6_1
                          uuid_1_1_7
                        ];

            meta = {
              description = ''Building Blocks to write CQRS Event Sourcing apps
                            in Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/work-capital/engine";
            };
          } // packageOverrides)
      ) {};

    engine = engine_0_1_2;

    enhanced_defstruct_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "enhanced_defstruct";
            version = "0.1.1";
            src = fetchHex {
              pkg = "enhanced_defstruct";
              version = "0.1.1";
              sha256 =
                "65734cbd66567cdf9ad5c6ce4281e4cef397ab060a56d1a13b07cd54572f25f5";
            };

            meta = {
              longDescription = ''EnhancedDefstruct is package that helps to
                                create structs without invoking defmodule
                                macro.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/amatalai/enhanced_defstruct";
            };
          } // packageOverrides)
      ) {};

    enhanced_defstruct = enhanced_defstruct_0_1_1;

    eno_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          combine_0_9_5,
          mariaex_0_7_9,
          postgrex_0_11_2
        }:
          buildMix ({
            name = "eno";
            version = "0.0.1";
            src = fetchHex {
              pkg = "eno";
              version = "0.0.1";
              sha256 =
                "217cabaf3d3a4f5e46d9b48a88a2cafded20a04a2f477f6bec37b3a82b40424a";
            };
            beamDeps  = [ combine_0_9_5 mariaex_0_7_9 postgrex_0_11_2 ];

            meta = {
              description = ''lightweight SQL toolkit'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zweifisch/eno";
            };
          } // packageOverrides)
      ) {};

    eno = eno_0_0_1;

    enotify_0_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "enotify";
            version = "0.1.0";
            src = fetchHex {
              pkg = "enotify";
              version = "0.1.0";
              sha256 =
                "8e48da763ce15bfd75cc857ddfe5011b03189d597f47bcdd8acc6fbbe8e6b6f4";
            };
            compilePorts = true;

            meta = {
              description = ''Filesystem listener'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tsloughter/enotify";
            };
          } // packageOverrides)
      ) {};

    enotify = enotify_0_1_0;

    enphex_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "enphex";
            version = "0.1.1";
            src = fetchHex {
              pkg = "enphex";
              version = "0.1.1";
              sha256 =
                "f95689a03116725a6a34304edff82103dc1c7e944a7f96a71462c16fa9ed664c";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''An elixir wrapper for enphase api'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/techgaun/enphex";
            };
          } // packageOverrides)
      ) {};

    enphex = enphex_0_1_1;

    enquirer_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "enquirer";
            version = "0.1.0";
            src = fetchHex {
              pkg = "enquirer";
              version = "0.1.0";
              sha256 =
                "59445208ad96171f10b2d21bc35032f6f7a49aa4cfd5d13d18f93730c49140bb";
            };

            meta = {
              longDescription = ''Enquirer is a simple module to make is easy
                                to get user input in terminal applications.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/glasnoster/enquirer";
            };
          } // packageOverrides)
      ) {};

    enquirer = enquirer_0_1_0;

    ensq_0_1_7 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          jsx_2_5_3,
          jsxd_0_2_4,
          lager_3_2_4
        }:
          buildRebar3 ({
            name = "ensq";
            version = "0.1.7";
            src = fetchHex {
              pkg = "ensq";
              version = "0.1.7";
              sha256 =
                "9d89bc88e11c420942ff6345249906c5cf3bd29b488b727e67ee13e431cda937";
            };

            beamDeps  = [ jsx_2_5_3 jsxd_0_2_4 lager_3_2_4 ];

            meta = {
              description = ''Erlang client for NSQ'';
              license = stdenv.lib.licenses.cddl;
              homepage = "https://github.com/project-fifo/ensq";
            };
          } // packageOverrides)
      ) {};

    ensq = ensq_0_1_7;

    env_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "env";
            version = "0.2.0";
            src = fetchHex {
              pkg = "env";
              version = "0.2.0";
              sha256 =
                "f1e883acf23f3d504492a0a8fcef453325755cf774f446a38945b4bc1f6c7cf2";
            };

            meta = {
              description = ''Env is an improved application configuration
                            reader for Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/michalmuskala/env";
            };
          } // packageOverrides)
      ) {};

    env = env_0_2_0;

    env_conf_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, earmark_0_1_19 }:
          buildMix ({
            name = "env_conf";
            version = "0.3.0";
            src = fetchHex {
              pkg = "env_conf";
              version = "0.3.0";
              sha256 =
                "b1d9732ed635d2dea5bcd74a512e7274350361bc3de12080a03e985d7df3d900";
            };
            beamDeps  = [ earmark_0_1_19 ];

            meta = {
              description = '' A simple 12-Factor configuration service for
                            Elixir. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/leakybucket/env_conf.git";
            };
          } // packageOverrides)
      ) {};

    env_conf = env_conf_0_3_0;

    env_config_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "env_config";
            version = "0.1.0";
            src = fetchHex {
              pkg = "env_config";
              version = "0.1.0";
              sha256 =
                "07fc2332b99e906f838a1efba77fa6cc0a4bc51a1058761bfab6c836527fd331";
            };

            meta = {
              description = ''Handles fetching values from config with support
                            for runtime ENV loading.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dplummer/env_config";
            };
          } // packageOverrides)
      ) {};

    env_config = env_config_0_1_0;

    env_helper_0_0_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "env_helper";
            version = "0.0.5";
            src = fetchHex {
              pkg = "env_helper";
              version = "0.0.5";
              sha256 =
                "7f32c90ff6218ef481c0eae30e38a8d39904eda3bef724867f131168a7f9578d";
            };

            meta = {
              description = ''A simple add on to make working with environment
                            variables slightly easier.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/manheim/env_helper";
            };
          } // packageOverrides)
      ) {};

    env_helper = env_helper_0_0_5;

    envelope_0_3_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          distance_0_2_2,
          geo_1_5_0
        }:
          buildMix ({
            name = "envelope";
            version = "0.3.1";
            src = fetchHex {
              pkg = "envelope";
              version = "0.3.1";
              sha256 =
                "39fbad35cc5bc58b896ba03a5ab16b074ab45c253ac2d586016a7c17a18baf28";
            };
            beamDeps  = [ distance_0_2_2 geo_1_5_0 ];

            meta = {
              description = ''A library for calculating envelopes of geometries
                            and tools to compare them.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pkinney/envelope_ex";
            };
          } // packageOverrides)
      ) {};

    envelope_0_4_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          distance_0_2_2,
          geo_1_5_0
        }:
          buildMix ({
            name = "envelope";
            version = "0.4.0";
            src = fetchHex {
              pkg = "envelope";
              version = "0.4.0";
              sha256 =
                "371b9b969b85ff2cb7cc068ddc351ce3216f75a6ebdfd1e8a7b1b4ff590b00bd";
            };
            beamDeps  = [ distance_0_2_2 geo_1_5_0 ];

            meta = {
              description = ''A library for calculating envelopes of geometries
                            and tools to compare them.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pkinney/envelope_ex";
            };
          } // packageOverrides)
      ) {};

    envelope = envelope_0_4_0;

    enver_0_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "enver";
            version = "0.0.0";
            src = fetchHex {
              pkg = "enver";
              version = "0.0.0";
              sha256 =
                "e6fe0faa449152a3d66c78caf41499c4bf38b657cc95a50cc0e26f012a3e8592";
            };

            meta = {
              description = ''A utility for managing application & system
                            configuration data.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/amorphid/enver-elixir";
            };
          } // packageOverrides)
      ) {};

    enver = enver_0_0_0;

    envy_1_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "envy";
            version = "1.1.1";
            src = fetchHex {
              pkg = "envy";
              version = "1.1.1";
              sha256 =
                "7061eb1a47415fd757145d8dec10dc0b1e48344960265cb108f194c4252c3a89";
            };

            meta = {
              description = ''A package for managing env files'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/BlakeWilliams/envy";
            };
          } // packageOverrides)
      ) {};

    envy = envy_1_1_1;

    eon_4_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "eon";
            version = "4.1.0";
            src = fetchHex {
              pkg = "eon";
              version = "4.1.0";
              sha256 =
                "601a5a173601d8c387176a65bd1035f672e2a455fc3ade125fbd0845d7c1f62e";
            };

            meta = {
              description = ''Use Elixir maps as a document storage format.'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/supernintendo/eon";
            };
          } // packageOverrides)
      ) {};

    eon = eon_4_1_0;

    epa_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "epa";
            version = "0.1.0";
            src = fetchHex {
              pkg = "epa";
              version = "0.1.0";
              sha256 =
                "f1549c2d654b7658bff37d84e6b7268b85847a74934c73c479106ca7f8d2154b";
            };

            meta = {
              description = ''Simple helpers to validate your ENV config is
                            correct'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cjpoll/epa";
            };
          } // packageOverrides)
      ) {};

    epa = epa_0_1_0;

    epam_1_0_2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "epam";
            version = "1.0.2";
            src = fetchHex {
              pkg = "epam";
              version = "1.0.2";
              sha256 =
                "130a04c69b2cf37b2a9fe901b82a0e8be93caf5ff14ebcb2142ad7af608f3e9a";
            };
            compilePorts = true;

            meta = {
              description = ''epam helper for PAM authentication support'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/processone/epam";
            };
          } // packageOverrides)
      ) {};

    epam = epam_1_0_2;

    eper_0_94_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "eper";
            version = "0.94.0";
            src = fetchHex {
              pkg = "eper";
              version = "0.94.0";
              sha256 =
                "8d853792fa61a7fd068fe9c113a8a44bc839e11ad70cb8d5d2884566e3bede39";
            };

            meta = {
              longDescription = ''Erlang Performance and Debugging Tools sherk
                                - a profiler, similar to Linux oprofile or MacOs
                                shark gperf - a graphical performance monitor;
                                shows CPU, memory and network usage dtop -
                                similar to unix top redbug- similar to the OTP
                                dbg application, but safer, better etc.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/massemanet/eper";
            };
          } // packageOverrides)
      ) {};

    eper = eper_0_94_0;

    epgpool_1_1_0 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          epgsql_3_2_0,
          lager_3_2_1,
          poolboy_1_4_2
        }:
          buildRebar3 ({
            name = "epgpool";
            version = "1.1.0";
            src = fetchHex {
              pkg = "epgpool";
              version = "1.1.0";
              sha256 =
                "7627eefd73bd8c03a589e38f30bae0c4b60cf629ab2130c2ac9acd7d79dae58b";
            };

            beamDeps  = [ epgsql_3_2_0 lager_3_2_1 poolboy_1_4_2 ];

            meta = {
              description = ''Erlang postgresql pool application'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/egobrain/epgpool";
            };
          } // packageOverrides)
      ) {};

    epgpool = epgpool_1_1_0;

    epgsql_3_2_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "epgsql";
            version = "3.2.0";
            src = fetchHex {
              pkg = "epgsql";
              version = "3.2.0";
              sha256 =
                "ff88a419df7b3084e8358538ade8b1844f5d6d18e9fa8c2124acea889720665a";
            };

            meta = {
              description = ''PostgreSQL Client'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/epgsql/epgsql";
            };
          } // packageOverrides)
      ) {};

    epgsql_3_3_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "epgsql";
            version = "3.3.0";
            src = fetchHex {
              pkg = "epgsql";
              version = "3.3.0";
              sha256 =
                "732be3676dd3103abdf515d57cfe686b59bf0e4c28f9af16f8c5f2c5a2307ffc";
            };

            meta = {
              description = ''PostgreSQL Client'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/epgsql/epgsql";
            };
          } // packageOverrides)
      ) {};

    epgsql = epgsql_3_3_0;

    ephemeral_2_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, bucs_1_0_10 }:
          buildMix ({
            name = "ephemeral";
            version = "2.0.3";
            src = fetchHex {
              pkg = "ephemeral";
              version = "2.0.3";
              sha256 =
                "260f523ae3c06945a8592bf79085d993cc1b41be64c5aa9e7ef45c40d423a0dd";
            };
            beamDeps  = [ bucs_1_0_10 ];

            meta = {
              description = ''Erlang/Elixir module for managing temporary
                            files'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/botsunit/tempfile";
            };
          } // packageOverrides)
      ) {};

    ephemeral = ephemeral_2_0_3;

    epiphany_0_1_0_dev = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, connection_1_0_4 }:
          buildMix ({
            name = "epiphany";
            version = "0.1.0-dev";
            src = fetchHex {
              pkg = "epiphany";
              version = "0.1.0-dev";
              sha256 =
                "38b15e762a4bb8c57a3ef238531dd465113b1019fb5aa63d7c8b38ed579f15f9";
            };
            beamDeps  = [ connection_1_0_4 ];

            meta = {
              description = ''Cassandra driver for Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/vptheron/epiphany";
            };
          } // packageOverrides)
      ) {};

    epiphany = epiphany_0_1_0_dev;

    episcina_1_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, gproc_0_3_1 }:
          buildRebar3 ({
            name = "episcina";
            version = "1.1.0";
            src = fetchHex {
              pkg = "episcina";
              version = "1.1.0";
              sha256 =
                "16238717bfbc8cb226342f6b098bb1fafb48c7547265a10ad3e6e83899abc46f";
            };

            beamDeps  = [ gproc_0_3_1 ];

            meta = {
              description = ''Erlang Connection Pool'';

            };
          } // packageOverrides)
      ) {};

    episcina = episcina_1_1_0;

    eplugin_0_1_4 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, lager_2_1_1 }:
          buildRebar3 ({
            name = "eplugin";
            version = "0.1.4";
            src = fetchHex {
              pkg = "eplugin";
              version = "0.1.4";
              sha256 =
                "5103579323fb71e2c245fb5886c53e9ff4115282c09ecb5368b0ae293f0b20fe";
            };

            beamDeps  = [ lager_2_1_1 ];

            meta = {
              description = ''plugin provider for erlang'';
              license = stdenv.lib.licenses.cddl;
              homepage = "https://github.com/Licenser/eplugin";
            };
          } // packageOverrides)
      ) {};

    eplugin = eplugin_0_1_4;

    epocxy_1_1_0 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex }:
          buildErlangMk ({
            name = "epocxy";
            version = "1.1.0";
            src = fetchHex {
              pkg = "epocxy";
              version = "1.1.0";
              sha256 =
                "7f559d654fd5e3b5a64b79953fe06bbf36215c931be81115a418b6b2c9db802f";
            };

            meta = {
              description = ''Erlang Patterns of Concurrency'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/duomark/epocxy";
            };
          } // packageOverrides)
      ) {};

    epocxy = epocxy_1_1_0;

    epubnub_0_1_0 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          hackney_1_3_2,
          jsx_2_7_1
        }:
          buildRebar3 ({
            name = "epubnub";
            version = "0.1.0";
            src = fetchHex {
              pkg = "epubnub";
              version = "0.1.0";
              sha256 =
                "5a3b21ea035b1a7d89eeaf062da946fb17682a72fb9ae12d313677552f63fa69";
            };

            beamDeps  = [ hackney_1_3_2 jsx_2_7_1 ];

            meta = {
              description = ''Erlang PubNub API'';

            };
          } // packageOverrides)
      ) {};

    epubnub = epubnub_0_1_0;

    eqc_ex_1_2_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "eqc_ex";
            version = "1.2.4";
            src = fetchHex {
              pkg = "eqc_ex";
              version = "1.2.4";
              sha256 =
                "2d2895bedf784ffaf11144d25e6ca11a4cfff5b73c35ec6bedd3c5ec5cabc5e9";
            };

            meta = {
              description = ''Wrappers to facilitate using Quviq QuickCheck
                            with Elixir.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/Quviq/eqc_ex";
            };
          } // packageOverrides)
      ) {};

    eqc_ex_1_4_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "eqc_ex";
            version = "1.4.2";
            src = fetchHex {
              pkg = "eqc_ex";
              version = "1.4.2";
              sha256 =
                "6547e68351624ca5387df7e3332136b07f1be73c5a429c1b4e40436dcad50f38";
            };

            meta = {
              description = ''Wrappers to facilitate using Quviq QuickCheck
                            with Elixir.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/Quviq/eqc_ex";
            };
          } // packageOverrides)
      ) {};

    eqc_ex = eqc_ex_1_4_2;

    eql_0_1_2 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex }:
          buildErlangMk ({
            name = "eql";
            version = "0.1.2";
            src = fetchHex {
              pkg = "eql";
              version = "0.1.2";
              sha256 =
                "3b1a85c491d44262802058c0de97a2c90678d5d45851b88a076b1a45a8d6d4b3";
            };

            meta = {
              description = ''Erlang with SQL'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/artemeff/eql";
            };
          } // packageOverrides)
      ) {};

    eql = eql_0_1_2;

    equery_0_10_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "equery";
            version = "0.10.1";
            src = fetchHex {
              pkg = "equery";
              version = "0.10.1";
              sha256 =
                "39dc79db8ecaa4626c06cd1ab80fd5280b6f0e893370b9fe76c0ad393acdeb11";
            };

            meta = {
              description = ''Sql generator library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/egobrain/equery";
            };
          } // packageOverrides)
      ) {};

    equery = equery_0_10_1;

    equery_0_9_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "equery";
            version = "0.9.1";
            src = fetchHex {
              pkg = "equery";
              version = "0.9.1";
              sha256 =
                "0980e1c85385d6116f33ce9672e4976d3b38ddb7c52a1bf099c84eb373c4b368";
            };

            meta = {
              description = ''Sql generator library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/egobrain/equery";
            };
          } // packageOverrides)
      ) {};

    equivalex_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "equivalex";
            version = "1.0.0";
            src = fetchHex {
              pkg = "equivalex";
              version = "1.0.0";
              sha256 =
                "00af59aff250bf300da458f7858e6d0a0a833b3c79ae21420a895abd241131e2";
            };

            meta = {
              description = ''constant time polymorphic comparisons'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mwmiller/equivalex";
            };
          } // packageOverrides)
      ) {};

    equivalex = equivalex_1_0_0;

    eredis_1_0_8 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "eredis";
            version = "1.0.8";
            src = fetchHex {
              pkg = "eredis";
              version = "1.0.8";
              sha256 =
                "f303533e72129b264a2d8217c4ddc977c7527ff4b8a6a55f92f62b7fcc099334";
            };

            meta = {
              description = ''Erlang Redis client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/wooga/eredis";
            };
          } // packageOverrides)
      ) {};

    eredis = eredis_1_0_8;

    eredis_cluster_0_5_8 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          eredis_1_0_8,
          poolboy_1_5_1
        }:
          buildMix ({
            name = "eredis_cluster";
            version = "0.5.8";
            src = fetchHex {
              pkg = "eredis_cluster";
              version = "0.5.8";
              sha256 =
                "20b558954c96eb7759511b9827ff65d30afafa43f638a784c407e218895a5dfc";
            };
            beamDeps  = [ eredis_1_0_8 poolboy_1_5_1 ];

            meta = {
              description = ''An erlang wrapper for eredis library to support
                            cluster mode'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/adrienmo/eredis_cluster";
            };
          } // packageOverrides)
      ) {};

    eredis_cluster = eredis_cluster_0_5_8;

    eredis_sync_0_1_2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "eredis_sync";
            version = "0.1.2";
            src = fetchHex {
              pkg = "eredis_sync";
              version = "0.1.2";
              sha256 =
                "0fe10c453bd17c0415ffde1d58824750a21786ca80878712c095c281f22360d8";
            };

            meta = {
              description = ''A direct Redis client operating on a TCP
                            socket'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/funbox/eredis_sync";
            };
          } // packageOverrides)
      ) {};

    eredis_sync = eredis_sync_0_1_2;

    erl2ex_0_0_9 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "erl2ex";
            version = "0.0.9";
            src = fetchHex {
              pkg = "erl2ex";
              version = "0.0.9";
              sha256 =
                "4e49c461ecffc33986bb72a43ae87211fb33fed39077fb522c381b884d189514";
            };

            meta = {
              longDescription = ''Erl2ex is an Erlang to Elixir transpiler,
                                converting well-formed Erlang source to Elixir
                                source with equivalent functionality.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/dazuma/erl2ex";
            };
          } // packageOverrides)
      ) {};

    erl2ex = erl2ex_0_0_9;

    erl_pengine_0_1_1 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          hackney_1_8_0,
          jsx_2_8_2,
          syn_1_6_1
        }:
          buildRebar3 ({
            name = "erl_pengine";
            version = "0.1.1";
            src = fetchHex {
              pkg = "erl_pengine";
              version = "0.1.1";
              sha256 =
                "3715ce93fe95bc68f273d91ba239ec90e16829c063d41952861642c6bd36318a";
            };

            buildPlugins  = [ rebar3_auto rebar3_run rebar_alias rebar3_lint
                          ];

            beamDeps  = [ hackney_1_8_0 jsx_2_8_2 syn_1_6_1 ];

            meta = {
              description = ''Erlang Pengine, Erlang client to prolog pengine
                            server.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Limmen/erl_pengine";
            };
          } // packageOverrides)
      ) {};

    erl_pengine = erl_pengine_0_1_1;

    erlando_3_1_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "erlando";
            version = "3.1.1";
            src = fetchHex {
              pkg = "erlando";
              version = "3.1.1";
              sha256 =
                "9633cb4978dbd78827fa76ea4c3b0bd24cfbd4dd9af48088e922e7115494a344";
            };

            meta = {
              description = ''Syntax extensions for Erlang'';
              license = stdenv.lib.licenses.mpl11;
              homepage = "https://github.com/egobrain/erlando";
            };
          } // packageOverrides)
      ) {};

    erlando = erlando_3_1_1;

    erlang_color_1_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "erlang_color";
            version = "1.0.0";
            src = fetchHex {
              pkg = "erlang_color";
              version = "1.0.0";
              sha256 =
                "6b17e5e589c8fef540574c9ea32b67cec2c8a44283aafe474d6e5818fb3ee038";
            };

            meta = {
              description = ''ANSI colors for your Erlang'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/julianduque/erlang-color";
            };
          } // packageOverrides)
      ) {};

    erlang_color = erlang_color_1_0_0;

    erlang_commons_0_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "erlang_commons";
            version = "0.1.0";
            src = fetchHex {
              pkg = "erlang_commons";
              version = "0.1.0";
              sha256 =
                "1e55059ee1b2f3aa9fa6b9e1bfdb636a41929568d5170c4b47f4d49459d70cbe";
            };

            meta = {
              description = ''An OTP library: Erlang Commons like Apache
                            Commons.'';
              license = stdenv.lib.licenses.free;
            };
          } // packageOverrides)
      ) {};

    erlang_commons = erlang_commons_0_1_0;

    erlang_dbus_0_2_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "erlang_dbus";
            version = "0.2.0";
            src = fetchHex {
              pkg = "erlang_dbus";
              version = "0.2.0";
              sha256 =
                "b00065acfae0cfea909335eab07339292a1f9a9c91b2f542d3841f86f4aac605";
            };

            meta = {
              description = ''A native erlang implementation of D-Bus'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/lizenn/erlang-dbus";
            };
          } // packageOverrides)
      ) {};

    erlang_dbus = erlang_dbus_0_2_0;

    erlang_localtime_1_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "erlang_localtime";
            version = "1.0.0";
            src = fetchHex {
              pkg = "erlang_localtime";
              version = "1.0.0";
              sha256 =
                "46e3f7b18477b377ec71f9dcd91c4d30fe82a128ffa9f89be1595d4d08414844";
            };

            meta = {
              description = ''Erlang library for conversion from one local time
                            to another'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/choptastic/erlang_localtime";
            };
          } // packageOverrides)
      ) {};

    erlang_localtime = erlang_localtime_1_0_0;

    erlang_lua_0_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "erlang_lua";
            version = "0.1.0";
            src = fetchHex {
              pkg = "erlang_lua";
              version = "0.1.0";
              sha256 =
                "4376a57f86e43ae1d687dca8b6c7c7f692b95d30091a9550636328358026e6eb";
            };
            compilePorts = true;

            meta = {
              longDescription = ''Erlang-lua hex package, using Erlang`s Port
                                and C Node to run Lua VM as an external Node'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rtraschke/erlang-lua";
            };
          } // packageOverrides)
      ) {};

    erlang_lua = erlang_lua_0_1_0;

    erlang_osc_1_0_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "erlang_osc";
            version = "1.0.1";
            src = fetchHex {
              pkg = "erlang_osc";
              version = "1.0.1";
              sha256 =
                "d8848454580af13f3c1e0c01ee2a20d15f4f0fb143a60e2306b00204b28eb842";
            };

            meta = {
              description = ''Open Source Control Application'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/marianoguerra/erlang-osc";
            };
          } // packageOverrides)
      ) {};

    erlang_osc = erlang_osc_1_0_1;

    erlang_term_1_5_4 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "erlang_term";
            version = "1.5.4";
            src = fetchHex {
              pkg = "erlang_term";
              version = "1.5.4";
              sha256 =
                "aafbf46598822251724549d0d1724256cad618e85faf0f2d5c4e8b61f2432937";
            };

            meta = {
              description = ''Provide the in-memory size of Erlang terms'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/okeuday/erlang_term";
            };
          } // packageOverrides)
      ) {};

    erlang_term_1_6_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "erlang_term";
            version = "1.6.0";
            src = fetchHex {
              pkg = "erlang_term";
              version = "1.6.0";
              sha256 =
                "6d43c835c4a88de5e8823ac2c4766c99a5f840a89647ba2d8e7925163179b86e";
            };

            meta = {
              description = ''Provide the in-memory size of Erlang terms'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/okeuday/erlang_term";
            };
          } // packageOverrides)
      ) {};

    erlang_term_1_7_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "erlang_term";
            version = "1.7.1";
            src = fetchHex {
              pkg = "erlang_term";
              version = "1.7.1";
              sha256 =
                "6683e3e25b5d1a962e6ac5fcc15924f85759a5156d4bcab853f8ecae7236bd74";
            };

            meta = {
              description = ''Provide the in-memory size of Erlang terms'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/okeuday/erlang_term";
            };
          } // packageOverrides)
      ) {};

    erlang_term = erlang_term_1_7_1;

    erlang_tls_1_0_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "erlang_tls";
            version = "1.0.3";
            src = fetchHex {
              pkg = "erlang_tls";
              version = "1.0.3";
              sha256 =
                "609452a03e92e682ce81d3573e1cbba43988dd42e43e2af8cde5b13c868a48e5";
            };
            compilePorts = true;

            meta = {
              longDescription = ''This application has been renamed to `etls`.
                                Please use `etls` package for new projects.'';
              license
              =
              with
              stdenv.lib.licenses;
              [
                mit free free isc free free free
              ];
              homepage = "https://github.com/kzemek/erlang_tls";
            };
          } // packageOverrides)
      ) {};

    erlang_tls = erlang_tls_1_0_3;

    erlang_version_0_2_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "erlang_version";
            version = "0.2.0";
            src = fetchHex {
              pkg = "erlang_version";
              version = "0.2.0";
              sha256 =
                "74daddba65a247ec57913e5de8f243af42bbbc3d6a0c411a1252da81c09ae661";
            };

            meta = {
              description = ''Retrieve Erlang/OTP version like `18.1`'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sapporo-beam/erlang_version";
            };
          } // packageOverrides)
      ) {};

    erlang_version = erlang_version_0_2_0;

    erlangzmq_1_1_2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "erlangzmq";
            version = "1.1.2";
            src = fetchHex {
              pkg = "erlangzmq";
              version = "1.1.2";
              sha256 =
                "d8069ab63b9488f3d7389b9c18102ecb3e04158e3938b846c850bfee4f8863c2";
            };

            meta = {
              description = ''THIS PROJECT HAS BEEN RENAMED TO chumak.'';
              license = with stdenv.lib.licenses; [ free free ];
              homepage = "https://github.com/chovencorp/erlangzmq";
            };
          } // packageOverrides)
      ) {};

    erlangzmq = erlangzmq_1_1_2;

    erlastic_search_1_3_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "erlastic_search";
            version = "1.3.0";
            src = fetchHex {
              pkg = "erlastic_search";
              version = "1.3.0";
              sha256 =
                "cd4e809ac6d560b5f389cad66191376a14917324e003783b60bb6a2bf7e903dd";
            };

            meta = {
              description = ''An Erlang app for communicating with Elastic
                            Search`s rest interface.'';
              license = stdenv.lib.licenses.lpgl3;
              homepage = "https://github.com/tsloughter/erlastic_search";
            };
          } // packageOverrides)
      ) {};

    erlastic_search = erlastic_search_1_3_0;

    erlaudio_0_2_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "erlaudio";
            version = "0.2.3";
            src = fetchHex {
              pkg = "erlaudio";
              version = "0.2.3";
              sha256 =
                "cb9efb0ce80faae003ab39f8cc2d3fccbb4bd1c8f5f525aea392f28662517032";
            };

            meta = {
              description = ''Erlang audio bindings to portaudio'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/asonge/erlaudio";
            };
          } // packageOverrides)
      ) {};

    erlaudio = erlaudio_0_2_3;

    erlavro_2_1_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, jsone_1_4_3 }:
          buildRebar3 ({
            name = "erlavro";
            version = "2.1.1";
            src = fetchHex {
              pkg = "erlavro";
              version = "2.1.1";
              sha256 =
                "c6a1009941648cdcadd220e6323e7a45f96cb6ed269d5c15bd24bc422307eab4";
            };

            beamDeps  = [ jsone_1_4_3 ];

            meta = {
              description = ''Apache Avro support for Erlang/Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/klarna/erlavro";
            };
          } // packageOverrides)
      ) {};

    erlavro = erlavro_2_1_1;

    erlbus_0_2_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "erlbus";
            version = "0.2.1";
            src = fetchHex {
              pkg = "erlbus";
              version = "0.2.1";
              sha256 =
                "77a6ebec18cceef418ffe6ebdd6a8868a948b96cf05856a14544a64e6fea2c29";
            };

            meta = {
              description = ''Erlang Message Event Bus'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cabol/erlbus";
            };
          } // packageOverrides)
      ) {};

    erlbus = erlbus_0_2_1;

    erlchronos_2_0_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "erlchronos";
            version = "2.0.1";
            src = fetchHex {
              pkg = "erlchronos";
              version = "2.0.1";
              sha256 =
                "b3b2bd1aaba9084d4e997fd508802c98bd5384483ddedc118918a5795bfe6e39";
            };

            meta = {
              description = ''gen_server wrapper with precise ticks'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/g-andrade/erlchronos";
            };
          } // packageOverrides)
      ) {};

    erlchronos = erlchronos_2_0_1;

    erlcloud_0_11_0 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          jsx_2_6_2,
          lhttpc_1_3_0,
          meck_0_8_3
        }:
          buildRebar3 ({
            name = "erlcloud";
            version = "0.11.0";
            src = fetchHex {
              pkg = "erlcloud";
              version = "0.11.0";
              sha256 =
                "ca9876dab57ed8fb5fb75ab6ce11e59a346387d357d7a038a2e18d1d31a30716";
            };

            beamDeps  = [ jsx_2_6_2 lhttpc_1_3_0 meck_0_8_3 ];

            meta = {
              description = ''Erlang cloud computing library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/erlcloud/erlcloud";
            };
          } // packageOverrides)
      ) {};

    erlcloud_2_2_10 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          base16_1_0_0,
          eini_1_2_4,
          jsx_2_8_0,
          lhttpc_1_5_3
        }:
          buildRebar3 ({
            name = "erlcloud";
            version = "2.2.10";
            src = fetchHex {
              pkg = "erlcloud";
              version = "2.2.10";
              sha256 =
                "0f59a0a27baa30f60c230aef902bdaf803bd00590aaa7c17e53d5c84819b0dbd";
            };

            beamDeps  = [ base16_1_0_0 eini_1_2_4 jsx_2_8_0 lhttpc_1_5_3 ];

            meta = {
              description = ''Erlang cloud computing library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/erlcloud/erlcloud";
            };
          } // packageOverrides)
      ) {};

    erlcloud = erlcloud_2_2_10;

    erldn_1_0_5 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex }:
          buildErlangMk ({
            name = "erldn";
            version = "1.0.5";
            src = fetchHex {
              pkg = "erldn";
              version = "1.0.5";
              sha256 =
                "b7fdafda24884ab52dc453a18a99ad3d31fa690770d2d50f8e5bdbc3fff0f166";
            };

            meta = {
              description = ''An edn parser for the Erlang platform.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/marianoguerra/erldn";
            };
          } // packageOverrides)
      ) {};

    erldn = erldn_1_0_5;

    erldocs_0_9_6 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, erlydtl_0_11_1
        }:
          buildRebar3 ({
            name = "erldocs";
            version = "0.9.6";
            src = fetchHex {
              pkg = "erldocs";
              version = "0.9.6";
              sha256 =
                "ef5feb000da46081908de9d5804f858e871acf3fae2894cfd0af30ae59a19948";
            };

            beamDeps  = [ erlydtl_0_11_1 ];

            meta = {
              description = ''Alternative Erlang documentation builder.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/erldocs/erldocs";
            };
          } // packageOverrides)
      ) {};

    erldocs = erldocs_0_9_6;

    erldocs_other_0_9_6 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, erldocs_0_9_6 }:
          buildRebar3 ({
            name = "erldocs_other";
            version = "0.9.6";
            src = fetchHex {
              pkg = "erldocs_other";
              version = "0.9.6";
              sha256 =
                "460c9f345fbbe3f1e5ad5e11cfefa26627c3e6e6905db9ed1a2468f290e6ee8b";
            };

            beamDeps  = [ erldocs_0_9_6 ];

            meta = {
              description = ''Generate HTML code for other.erldocs.com'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/erldocs/erldocs_other";
            };
          } // packageOverrides)
      ) {};

    erldocs_other = erldocs_other_0_9_6;

    erldyn_0_7_2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, jsone_1_2_2 }:
          buildRebar3 ({
            name = "erldyn";
            version = "0.7.2";
            src = fetchHex {
              pkg = "erldyn";
              version = "0.7.2";
              sha256 =
                "fea81c3331b57c716232bdf2bc6338c052dc0461b708bc21f90aecc8f68436c0";
            };

            beamDeps  = [ jsone_1_2_2 ];

            meta = {
              description = ''Amazon DynamoDB application'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jr0senblum/erldyn";
            };
          } // packageOverrides)
      ) {};

    erldyn = erldyn_0_7_2;

    erlexec_1_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "erlexec";
            version = "1.1.0";
            src = fetchHex {
              pkg = "erlexec";
              version = "1.1.0";
              sha256 =
                "772162f0f0349f89ea11b9f27401cb437ccaabf480320284a13f2259bb63cb87";
            };
            compilePorts = true;
            buildPlugins  = [ pc ];


            meta = {
              description = ''OS Process Manager'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/saleyn/erlexec";
            };
          } // packageOverrides)
      ) {};

    erlexec_1_2_2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "erlexec";
            version = "1.2.2";
            src = fetchHex {
              pkg = "erlexec";
              version = "1.2.2";
              sha256 =
                "d12ab523e4ca36998c677c218d55df3a36e877af396d340bcb0d9eaf2504edeb";
            };
            compilePorts = true;
            buildPlugins  = [ pc ];


            meta = {
              description = ''OS Process Manager'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/saleyn/erlexec";
            };
          } // packageOverrides)
      ) {};

    erlexec_1_7_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "erlexec";
            version = "1.7.1";
            src = fetchHex {
              pkg = "erlexec";
              version = "1.7.1";
              sha256 =
                "2e625e6c155c94a2864859b2a71a370c01dba1eb4f8185c6095e6b8c8e3a9a93";
            };
            compilePorts = true;
            buildPlugins  = [ pc ];


            meta = {
              description = ''OS Process Manager'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/saleyn/erlexec";
            };
          } // packageOverrides)
      ) {};

    erlexec = erlexec_1_7_1;

    erlffx_1_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "erlffx";
            version = "1.0.0";
            src = fetchHex {
              pkg = "erlffx";
              version = "1.0.0";
              sha256 =
                "3c5e8fc67337df2e2802e96be867d4981608ae2ab5d24e281a8c21cc453247d3";
            };

            meta = {
              description = ''Format-Preserving Encryption - FFX'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/g-andrade/erlffx";
            };
          } // packageOverrides)
      ) {};

    erlffx = erlffx_1_0_0;

    erljson_0_1_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "erljson";
            version = "0.1.1";
            src = fetchHex {
              pkg = "erljson";
              version = "0.1.1";
              sha256 =
                "279a3984a8e653b1fda84bdf7b7b9ba10f70bae6b0f747ae77b5119ca9845110";
            };

            meta = {
              description = ''Erlang json encoder/decoder to/from maps'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/alexgal/erl-json.git";
            };
          } // packageOverrides)
      ) {};

    erljson = erljson_0_1_1;

    erljwt_1_0_0 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          base64url_0_0_1,
          jsone_1_4_0
        }:
          buildRebar3 ({
            name = "erljwt";
            version = "1.0.0";
            src = fetchHex {
              pkg = "erljwt";
              version = "1.0.0";
              sha256 =
                "977ec447e64ffbdd174a657f03961d25e5df4e09055c67698051e3c9f9bb77fb";
            };

            buildPlugins  = [ rebar3_lint ];

            beamDeps  = [ base64url_0_0_1 jsone_1_4_0 ];

            meta = {
              description = ''a simple jwt decoding/encoding library'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/indigo-dc/erljwt";
            };
          } // packageOverrides)
      ) {};

    erljwt_1_1_0 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          base64url_0_0_1,
          jsone_1_4_0
        }:
          buildRebar3 ({
            name = "erljwt";
            version = "1.1.0";
            src = fetchHex {
              pkg = "erljwt";
              version = "1.1.0";
              sha256 =
                "35a89393a136b8aec93e633fef94729946bebac40cfdac8d3d6454ab7a745ca2";
            };

            buildPlugins  = [ rebar3_lint ];

            beamDeps  = [ base64url_0_0_1 jsone_1_4_0 ];

            meta = {
              description = ''a simple jwt decoding/encoding library'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/indigo-dc/erljwt";
            };
          } // packageOverrides)
      ) {};

    erljwt = erljwt_1_1_0;

    erlogger_0_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "erlogger";
            version = "0.1.0";
            src = fetchHex {
              pkg = "erlogger";
              version = "0.1.0";
              sha256 =
                "de2d64f0932e8af46264d92a224ed46e41f2b698b1bbd245ae19321715322146";
            };

            meta = {
              description = ''Logging service for Erlang Applications.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/knusbaum/erlogger";
            };
          } // packageOverrides)
      ) {};

    erlogger = erlogger_0_1_0;

    erlpack_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "erlpack";
            version = "1.0.0";
            src = fetchHex {
              pkg = "erlpack";
              version = "1.0.0";
              sha256 =
                "ee67b070ada9d647d791705c2aaf1c7c155ed9c97b10701d59e4c2f19aff698b";
            };

            meta = {
              description = ''High Performance Erlang Term Format Packer'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hammerandchisel/erlpack";
            };
          } // packageOverrides)
      ) {};

    erlpack = erlpack_1_0_0;

    erlpocket_2_0_2 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          eunit_formatters_0_3_1,
          jiffy_0_14_7,
          meck_0_8_4
        }:
          buildRebar3 ({
            name = "erlpocket";
            version = "2.0.2";
            src = fetchHex {
              pkg = "erlpocket";
              version = "2.0.2";
              sha256 =
                "77945ae464c56c4cfb359e42d83df59f54f5b7d7e85d39e5c353a33ba6ab554e";
            };

            beamDeps  = [ eunit_formatters_0_3_1 jiffy_0_14_7 meck_0_8_4 ];

            meta = {
              description = ''Erlang library for Pocket API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tgrk/erlpocket";
            };
          } // packageOverrides)
      ) {};

    erlpocket = erlpocket_2_0_2;

    erlport_0_9_8 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "erlport";
            version = "0.9.8";
            src = fetchHex {
              pkg = "erlport";
              version = "0.9.8";
              sha256 =
                "df57d99455d4bf2bab83e12f242d4e5513ad094b6c73179a85d084c929ce697c";
            };

            meta = {
              description = ''Erlang port protocol'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/hdima/erlport";
            };
          } // packageOverrides)
      ) {};

    erlport = erlport_0_9_8;

    erlquad_1_1_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "erlquad";
            version = "1.1.1";
            src = fetchHex {
              pkg = "erlquad";
              version = "1.1.1";
              sha256 =
                "6288b06fc971f59cd25f1abb044536d468b86c5dd431ca4ed9f012494c9c0542";
            };

            meta = {
              description = ''Quadtrees for Erlang'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/g-andrade/erlquad";
            };
          } // packageOverrides)
      ) {};

    erlquad = erlquad_1_1_1;

    erlsci_getopt_0_8_4 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "erlsci_getopt";
            version = "0.8.4";
            src = fetchHex {
              pkg = "erlsci_getopt";
              version = "0.8.4";
              sha256 =
                "f76d5947e9f6e77ae6454c5db8e6549a0ef6c83318fc35e55745a993a82a019b";
            };

            meta = {
              description = ''Command-line options parser for Erlang'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/erlsci/getopt";
            };
          } // packageOverrides)
      ) {};

    erlsci_getopt = erlsci_getopt_0_8_4;

    erlsh_0_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "erlsh";
            version = "0.1.0";
            src = fetchHex {
              pkg = "erlsh";
              version = "0.1.0";
              sha256 =
                "94ef1492dd59fef211f01ffd40c47b6e51c0f59e2a3d0739366e4890961332d9";
            };
            compilePorts = true;

            meta = {
              longDescription = ''Family of functions and ports involving
                                interacting with the system shell, paths and
                                external programs.'';

            };
          } // packageOverrides)
      ) {};

    erlsh = erlsh_0_1_0;

    erlsom_1_4_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "erlsom";
            version = "1.4.1";
            src = fetchHex {
              pkg = "erlsom";
              version = "1.4.1";
              sha256 =
                "57b777fe2522e342badfa35873b2266c6961e3a9f4d2ac195d761985c40c3247";
            };

            meta = {
              longDescription = ''XML parser. Supports SAX style parsing as
                                well as XML Schema based data mapping: create
                                records from XML (and vice versa)'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/willemdj/erlsom";
            };
          } // packageOverrides)
      ) {};

    erlsom = erlsom_1_4_1;

    erltrace_0_1_6 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "erltrace";
            version = "0.1.6";
            src = fetchHex {
              pkg = "erltrace";
              version = "0.1.6";
              sha256 =
                "1c11fc6abe510e5ccc3d121e1d6ac07b63a7894ef64037211620ffcbe9390468";
            };
            compilePorts = true;
            buildPlugins  = [ pc ];


            meta = {
              description = ''erlang dtrace consumer.'';
              license = stdenv.lib.licenses.cddl;
              homepage = "https://github.com/project-fifo/erltrace";
            };
          } // packageOverrides)
      ) {};

    erltrace = erltrace_0_1_6;

    erlware_commons_0_18_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, cf_0_2_1 }:
          buildRebar3 ({
            name = "erlware_commons";
            version = "0.18.0";
            src = fetchHex {
              pkg = "erlware_commons";
              version = "0.18.0";
              sha256 =
                "e71dda7cd5dcf34c9d07255d49c67e1d229dd230c101fdb996820bcdb5b03c49";
            };

            beamDeps  = [ cf_0_2_1 ];

            meta = {
              description = ''Additional standard library for Erlang'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/erlware/erlware_commons";
            };
          } // packageOverrides)
      ) {};

    erlware_commons_0_20_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, cf_0_2_1 }:
          buildRebar3 ({
            name = "erlware_commons";
            version = "0.20.0";
            src = fetchHex {
              pkg = "erlware_commons";
              version = "0.20.0";
              sha256 =
                "bff981dbd0acb12ac9d10b41ca96ba76a26e2a1f2714d1e0cb0112f4a67d956a";
            };

            beamDeps  = [ cf_0_2_1 ];

            meta = {
              description = ''Additional standard library for Erlang'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/erlware/erlware_commons";
            };
          } // packageOverrides)
      ) {};

    erlware_commons_1_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, cf_0_2_2 }:
          buildRebar3 ({
            name = "erlware_commons";
            version = "1.0.0";
            src = fetchHex {
              pkg = "erlware_commons";
              version = "1.0.0";
              sha256 =
                "a77f1beb3e4a0501c7b8bf3db646f88a718c0ad822f96679eb348529f3827772";
            };

            beamDeps  = [ cf_0_2_2 ];

            meta = {
              description = ''Additional standard library for Erlang'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/erlware/erlware_commons";
            };
          } // packageOverrides)
      ) {};

    erlware_commons = erlware_commons_1_0_0;

    erlydtl_0_11_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "erlydtl";
            version = "0.11.1";
            src = fetchHex {
              pkg = "erlydtl";
              version = "0.11.1";
              sha256 =
                "b1958c0ec95de69458c6af8b5bffbdde0070d5042710a63b1616cacdf39ae188";
            };

            meta = {
              description = ''Django Template Language for Erlang'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/erlydtl/erlydtl";
            };
          } // packageOverrides)
      ) {};

    erlydtl_0_12_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "erlydtl";
            version = "0.12.1";
            src = fetchHex {
              pkg = "erlydtl";
              version = "0.12.1";
              sha256 =
                "5bf1e474153662d8e17743549cd56828306fdb4ac05c85b4bec1f740bdc7976f";
            };

            meta = {
              description = ''Django Template Language for Erlang'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/erlydtl/erlydtl";
            };
          } // packageOverrides)
      ) {};

    erlydtl = erlydtl_0_12_1;

    erlydtl2_0_11_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "erlydtl2";
            version = "0.11.1";
            src = fetchHex {
              pkg = "erlydtl2";
              version = "0.11.1";
              sha256 =
                "ae0d9f293ce8a2eeaabedf2b5f950d21e14570e67e5a38c11fe1e4ca598e6d5b";
            };

            meta = {
              description = ''Django Template Language for Erlang'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/erlydtl/erlydtl";
            };
          } // packageOverrides)
      ) {};

    erlydtl2 = erlydtl2_0_11_1;

    erlz_0_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "erlz";
            version = "0.1.0";
            src = fetchHex {
              pkg = "erlz";
              version = "0.1.0";
              sha256 =
                "7daff757498358c0ad7d950f2d0efdb436f38284bccf0c1e357b4c0a8c848527";
            };

            meta = {
              description = ''Set of helpers functions for more convenient
                            functional programming'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/habibutsu/erlz";
            };
          } // packageOverrides)
      ) {};

    erlz = erlz_0_1_0;

    erlzk_0_6_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "erlzk";
            version = "0.6.3";
            src = fetchHex {
              pkg = "erlzk";
              version = "0.6.3";
              sha256 =
                "1a0b65c56d528c02a09d14dffe2fc338b2df9660cd6782e742b2748e06dd9d65";
            };

            meta = {
              description = ''A Pure Erlang ZooKeeper Client (no C
                            dependency)'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/huaban/erlzk";
            };
          } // packageOverrides)
      ) {};

    erlzk = erlzk_0_6_3;

    erlzord_1_0_2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "erlzord";
            version = "1.0.2";
            src = fetchHex {
              pkg = "erlzord";
              version = "1.0.2";
              sha256 =
                "f057e22fa49cc16eac05d5241a0cf918ce03a6a44aaf812d584e0c423979e476";
            };

            meta = {
              description = ''N-dimensional Z-order curves'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/g-andrade/erlzord";
            };
          } // packageOverrides)
      ) {};

    erlzord = erlzord_1_0_2;

    erocksdb_0_4_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "erocksdb";
            version = "0.4.1";
            src = fetchHex {
              pkg = "erocksdb";
              version = "0.4.1";
              sha256 =
                "982f25f0dcf4d1aa176ce4ec1b01b630bef601e4f8e103890fac23e0a3dc72ec";
            };
            compilePorts = true;
            buildPlugins  = [ pc ];


            meta = {
              description = ''RocksDB for Erlang'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/leo-project/erocksdb";
            };
          } // packageOverrides)
      ) {};

    erocksdb = erocksdb_0_4_1;

    erwatch_0_3_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "erwatch";
            version = "0.3.0";
            src = fetchHex {
              pkg = "erwatch";
              version = "0.3.0";
              sha256 =
                "0be5f4e83d762aa36ac3582efb480fb8041d06057a122c5d94a9956c4e3dbccc";
            };

            meta = {
              description = ''Erwatch is an Erlang/OTP application for tracking
                            changes in a file system.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/yuce/erwatch.git";
            };
          } // packageOverrides)
      ) {};

    erwatch = erwatch_0_3_0;

    es_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "es";
            version = "0.0.1";
            src = fetchHex {
              pkg = "es";
              version = "0.0.1";
              sha256 =
                "88a8f096177d111f82e8c05b611a3ec067abecb2612f44abb9a12eff06218d48";
            };

            meta = {
              description = ''A shell. With stuff.'';

            };
          } // packageOverrides)
      ) {};

    es = es_0_0_1;

    esarch_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_9_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "esarch";
            version = "0.1.0";
            src = fetchHex {
              pkg = "esarch";
              version = "0.1.0";
              sha256 =
                "cdf92c3187810896242a61b17b855ac1aa44e7d09f3cd4061dbf0bc3bed2889c";
            };
            beamDeps  = [ httpoison_0_9_2 poison_3_1_0 ];

            meta = {
              description = ''CLI tool for esa.io search'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/takkanm/esarch";
            };
          } // packageOverrides)
      ) {};

    esarch = esarch_0_1_0;

    escalus_2_6_4 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "escalus";
            version = "2.6.4";
            src = fetchHex {
              pkg = "escalus";
              version = "2.6.4";
              sha256 =
                "f5227c39ddbdeb1056fd69eef1c8a80364fb8b690b98d662b126bb95f4108d66";
            };

            meta = {
              description = ''Escalus is an Erlang XMPP client library'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/esl/escalus";
            };
          } // packageOverrides)
      ) {};

    escalus = escalus_2_6_4;

    escher_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "escher";
            version = "0.2.0";
            src = fetchHex {
              pkg = "escher";
              version = "0.2.0";
              sha256 =
                "1a857807668adae2b3fd29685fd16d15ae5b2762ea00bf3bef9dace162d40b20";
            };

            meta = {
              description = ''Elixir implementation of Escher Auth'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/qw3r/escher-elixir";
            };
          } // packageOverrides)
      ) {};

    escher = escher_0_2_0;

    esel_0_1_2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "esel";
            version = "0.1.2";
            src = fetchHex {
              pkg = "esel";
              version = "0.1.2";
              sha256 =
                "874d1775c86d27d9e88486a37351ffc09f826ef062c8ea211e65d08e103f946c";
            };

            meta = {
              description = ''An wrapper around openssl'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    esel = esel_0_1_2;

    esip_1_0_12 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          fast_tls_1_0_12,
          p1_utils_1_0_9,
          stun_1_0_11
        }:
          buildRebar3 ({
            name = "esip";
            version = "1.0.12";
            src = fetchHex {
              pkg = "esip";
              version = "1.0.12";
              sha256 =
                "3f745e791ebdd1511b011f2eb9d812e8fe04bc45d7b8c597b3d4d40b4e86e8e8";
            };
            compilePorts = true;

            beamDeps  = [ fast_tls_1_0_12 p1_utils_1_0_9 stun_1_0_11 ];

            meta = {
              description = ''ProcessOne SIP server component in Erlang'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/processone/esip";
            };
          } // packageOverrides)
      ) {};

    esip = esip_1_0_12;

    esmpp_0_0_13 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "esmpp";
            version = "0.0.13";
            src = fetchHex {
              pkg = "esmpp";
              version = "0.0.13";
              sha256 =
                "469a8aacccfd80ee648c6e8f754a6e6a359fff923c181300c2cf7f8af4c59e21";
            };

            meta = {
              description = ''SMPP client library for Erlang'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/VoyagerInnovations/esmpp";
            };
          } // packageOverrides)
      ) {};

    esmpp = esmpp_0_0_13;

    esockd_4_1_1 = callPackage
      (
        {
          buildErlangMk, packageOverrides ? {}, fetchHex, gen_logger_1_2_1
        }:
          buildErlangMk ({
            name = "esockd";
            version = "4.1.1";
            src = fetchHex {
              pkg = "esockd";
              version = "4.1.1";
              sha256 =
                "e412a28245fed33180fd6ffa55466274eb4b6e42b162e5e96f4149aadd67030b";
            };
            beamDeps  = [ gen_logger_1_2_1 ];

            meta = {
              description = ''Erlang General Non-blocking TCP/SSL Server'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/emqtt/esockd";
            };
          } // packageOverrides)
      ) {};

    esockd = esockd_4_1_1;

    espec_0_8_28 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, meck_0_8_4 }:
          buildMix ({
            name = "espec";
            version = "0.8.28";
            src = fetchHex {
              pkg = "espec";
              version = "0.8.28";
              sha256 =
                "9a6b81f00d20670fffba20630d131abf312077b6523c0f836a4152e2e0ec3971";
            };
            beamDeps  = [ meck_0_8_4 ];

            meta = {
              description = ''BDD testing framework for Elixir inspired by
                            RSpec.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/antonmi/espec";
            };
          } // packageOverrides)
      ) {};

    espec_1_4_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, meck_0_8_4 }:
          buildMix ({
            name = "espec";
            version = "1.4.0";
            src = fetchHex {
              pkg = "espec";
              version = "1.4.0";
              sha256 =
                "8d9d95395ac610de7c92eae2528ff4dfd6a9cb5c62f88fc1e79820431692ae06";
            };
            beamDeps  = [ meck_0_8_4 ];

            meta = {
              description = ''BDD testing framework for Elixir inspired by
                            RSpec.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/antonmi/espec";
            };
          } // packageOverrides)
      ) {};

    espec = espec_1_4_0;

    espec_json_api_matchers_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          espec_0_8_28,
          ignorant_0_1_0
        }:
          buildMix ({
            name = "espec_json_api_matchers";
            version = "0.3.0";
            src = fetchHex {
              pkg = "espec_json_api_matchers";
              version = "0.3.0";
              sha256 =
                "28e49e2c0ca6d5e16b72d0cfebca8c21e3088668e716356610fc8368c72e0739";
            };
            beamDeps  = [ espec_0_8_28 ignorant_0_1_0 ];

            meta = {
              description = ''Custom ESpec matchers to ease testing of JSON API
                            endpoints.'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/MYOB-Technology/espec_json_api_matchers";
            };
          } // packageOverrides)
      ) {};

    espec_json_api_matchers = espec_json_api_matchers_0_3_0;

    espec_junit_formatter_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, espec_1_4_0 }:
          buildMix ({
            name = "espec_junit_formatter";
            version = "0.1.0";
            src = fetchHex {
              pkg = "espec_junit_formatter";
              version = "0.1.0";
              sha256 =
                "9fa522a949d763864f7288b1ca9f9d5df9086fe58c7e1bd4231a4f82848557aa";
            };
            beamDeps  = [ espec_1_4_0 ];

            meta = {
              description = ''An ESpec formatter for the JUnit XML format.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mwean/espec_junit_formatter";
            };
          } // packageOverrides)
      ) {};

    espec_junit_formatter = espec_junit_formatter_0_1_0;

    espec_phoenix_0_6_8 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          espec_1_4_0,
          phoenix_1_3_0_rc_2
        }:
          buildMix ({
            name = "espec_phoenix";
            version = "0.6.8";
            src = fetchHex {
              pkg = "espec_phoenix";
              version = "0.6.8";
              sha256 =
                "7d59f84d2975784da56d202b38d3eb108f21a2b64a8bdab236a5780f07812463";
            };
            beamDeps  = [ espec_1_4_0 phoenix_1_3_0_rc_2 ];

            meta = {
              description = ''ESpec for Phoenix web framework.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/antonmi/espec_phoenix";
            };
          } // packageOverrides)
      ) {};

    espec_phoenix = espec_phoenix_0_6_8;

    espec_phoenix_helpers_0_3_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          espec_1_4_0,
          espec_phoenix_0_6_8,
          floki_0_17_2,
          phoenix_1_3_0_rc_2
        }:
          buildMix ({
            name = "espec_phoenix_helpers";
            version = "0.3.3";
            src = fetchHex {
              pkg = "espec_phoenix_helpers";
              version = "0.3.3";
              sha256 =
                "337d76ce83c7d25f25d92f061df581ba9662cceeb7a5b11a18bd3ee9cd8e2e54";
            };
            beamDeps  = [
                          espec_1_4_0
                          espec_phoenix_0_6_8
                          floki_0_17_2
                          phoenix_1_3_0_rc_2
                        ];

            meta = {
              description = ''Helpers and assertions extracted from
                            espec_phoenix'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/facto/espec_phoenix_helpers";
            };
          } // packageOverrides)
      ) {};

    espec_phoenix_helpers = espec_phoenix_helpers_0_3_3;

    esqlcipher_1_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "esqlcipher";
            version = "1.0.0";
            src = fetchHex {
              pkg = "esqlcipher";
              version = "1.0.0";
              sha256 =
                "f3a47df8cf7277b9352054e96a9745c77aa475a51ea36a18692a437b2af79b0b";
            };
            compilePorts = true;
            buildPlugins  = [ pc ];


            meta = {
              description = ''sqlcipher nif interface'';

            };
          } // packageOverrides)
      ) {};

    esqlcipher = esqlcipher_1_0_0;

    esqlite_0_2_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "esqlite";
            version = "0.2.3";
            src = fetchHex {
              pkg = "esqlite";
              version = "0.2.3";
              sha256 =
                "115bc72a3a5bb5a723606106e81b5c13ca0d6df2b6902d743eef14869d3d8b05";
            };
            compilePorts = true;
            buildPlugins  = [ pc ];


            meta = {
              description = ''sqlite nif interface'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/mmzeeman/esqlite";
            };
          } // packageOverrides)
      ) {};

    esqlite = esqlite_0_2_3;

    essence_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, exprof_0_2_0 }:
          buildMix ({
            name = "essence";
            version = "0.2.0";
            src = fetchHex {
              pkg = "essence";
              version = "0.2.0";
              sha256 =
                "720a57004a8cf913c2c805bd026e993dd7db3a8b46873e44363dd80948a5ab7f";
            };
            beamDeps  = [ exprof_0_2_0 ];

            meta = {
              longDescription = ''Essence is a library for Natural Language
                                Processing and Text Summarization in Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nicbet/essence";
            };
          } // packageOverrides)
      ) {};

    essence = essence_0_2_0;

    estore_0_1_9 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "estore";
            version = "0.1.9";
            src = fetchHex {
              pkg = "estore";
              version = "0.1.9";
              sha256 =
                "42d3250bfd8c45b38300f3d4efa9916bae20cf11416fa76aa01c0fd023798737";
            };

            meta = {
              description = ''Simple event store'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dalmatinerdb/estore";
            };
          } // packageOverrides)
      ) {};

    estore = estore_0_1_9;

    estree_2_6_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "estree";
            version = "2.6.0";
            src = fetchHex {
              pkg = "estree";
              version = "2.6.0";
              sha256 =
                "4e58784f38b3cc742ec6efa27511fba00428d4fa13788e3b8e4b43a76def890d";
            };

            meta = {
              longDescription = ''Represents the JavaScript AST from the ESTree
                                spec. Includes tools for building an AST and
                                generating code from it.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bryanjos/elixir-estree";
            };
          } // packageOverrides)
      ) {};

    estree = estree_2_6_0;

    esx_0_6_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_4,
          exjsx_4_0_0,
          httpoison_0_11_2,
          poison_3_1_0,
          poolboy_1_5_1
        }:
          buildMix ({
            name = "esx";
            version = "0.6.1";
            src = fetchHex {
              pkg = "esx";
              version = "0.6.1";
              sha256 =
                "83f46232687e492887552c2ff8af4c930f5b8fb8e38aa01e61a118c1c95ced76";
            };
            beamDeps  = [
                          ecto_2_1_4
                          exjsx_4_0_0
                          httpoison_0_11_2
                          poison_3_1_0
                          poolboy_1_5_1
                        ];

            meta = {
              description = ''A client for the Elasticsearch with Ecto, written
                            in Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ikeikeikeike/esx";
            };
          } // packageOverrides)
      ) {};

    esx = esx_0_6_1;

    esync_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "esync";
            version = "0.0.1";
            src = fetchHex {
              pkg = "esync";
              version = "0.0.1";
              sha256 =
                "28a59a0cbe885ec39dec4992aac8495147d1ec9b623883b01e8aa775cb334f03";
            };

            meta = {
              description = ''Concurrently sync two or more directories so that
                            their contents are identical'';

              homepage = "https://github.com/GrahamGoudeau21/ElixirSync";
            };
          } // packageOverrides)
      ) {};

    esync = esync_0_0_1;

    etcd_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exjsx_3_2_1,
          httpoison_0_11_2
        }:
          buildMix ({
            name = "etcd";
            version = "0.0.2";
            src = fetchHex {
              pkg = "etcd";
              version = "0.0.2";
              sha256 =
                "c1b559bc37812b9ab488f90f322dc0b826c94ac9809d9044b42b4fb420710848";
            };
            beamDeps  = [ exjsx_3_2_1 httpoison_0_11_2 ];

            meta = {
              description = ''Etcd APIv2 Client for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bearice/elixir-etcd";
            };
          } // packageOverrides)
      ) {};

    etcd = etcd_0_0_2;

    eternal_1_1_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, deppie_1_1_0 }:
          buildMix ({
            name = "eternal";
            version = "1.1.4";
            src = fetchHex {
              pkg = "eternal";
              version = "1.1.4";
              sha256 =
                "48a51c4d713e4805a1124de158ee0d37f420f8249691bcbad2b76e48b7fa4d24";
            };
            beamDeps  = [ deppie_1_1_0 ];

            meta = {
              description = ''Make your ETS tables live forever'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zackehh/eternal";
            };
          } // packageOverrides)
      ) {};

    eternal = eternal_1_1_4;

    ether_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ether";
            version = "0.0.1";
            src = fetchHex {
              pkg = "ether";
              version = "0.0.1";
              sha256 =
                "867752143aa09e07d0a50ae9526b7c8f620e189f509326a635c304b453496f16";
            };

            meta = {
              description = ''Elixir Debugger '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/maarek/ether";
            };
          } // packageOverrides)
      ) {};

    ether = ether_0_0_1;

    etherchain_org_0_0_7 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_2_2_0,
          vex_0_6_0
        }:
          buildMix ({
            name = "etherchain_org";
            version = "0.0.7";
            src = fetchHex {
              pkg = "etherchain_org";
              version = "0.0.7";
              sha256 =
                "a6975e7d853ac3ef2c24433b75e8ea4cb51cb6b249ba143e53e2cd627f1f9ba5";
            };
            beamDeps  = [ httpoison_0_11_2 poison_2_2_0 vex_0_6_0 ];

            meta = {
              longDescription = ''WIP Elixir API wrapper for etherchain.org.
                                Provides access to ethereum blockchain data.'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/cyberpunk-ventures/etherchain_org_ex";
            };
          } // packageOverrides)
      ) {};

    etherchain_org = etherchain_org_0_0_7;

    ethereumex_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "ethereumex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ethereumex";
              version = "0.1.0";
              sha256 =
                "1fe0fe3a2b71c8f16ead6349370639bc4631fc2febde7c32d32883563d1b0a6f";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''Elixir JSON-RPC client for the Ethereum
                            blockchain'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ayrat555/ethereumex";
            };
          } // packageOverrides)
      ) {};

    ethereumex = ethereumex_0_1_0;

    etls_1_2_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "etls";
            version = "1.2.0";
            src = fetchHex {
              pkg = "etls";
              version = "1.2.0";
              sha256 =
                "7b405fd651834b71807055f072488f6b909aebb19a7fd4d4edf3e493c18305a7";
            };
            compilePorts = true;

            meta = {
              description = ''An alternative NIF-based implementation of Erlang
                            ssl module.'';
              license
              =
              with
              stdenv.lib.licenses;
              [
                mit free free isc free free free
              ];
              homepage = "https://github.com/kzemek/etls";
            };
          } // packageOverrides)
      ) {};

    etls = etls_1_2_0;

    etoml_0_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "etoml";
            version = "0.1.0";
            src = fetchHex {
              pkg = "etoml";
              version = "0.1.0";
              sha256 =
                "0ce759092b50a8ea9681402185df1b3eeb9b551fc923c42d3e0c180979021851";
            };

            meta = {
              description = ''TOML language parser'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/JoshRagem/etoml";
            };
          } // packageOverrides)
      ) {};

    etoml = etoml_0_1_0;

    etr_1_0_0 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          ebs_1_1_2,
          egetopt_1_0_0
        }:
          buildRebar3 ({
            name = "etr";
            version = "1.0.0";
            src = fetchHex {
              pkg = "etr";
              version = "1.0.0";
              sha256 =
                "84feeee109560865b1ff6c16b13b40a7be96613ee7e839f3b6f20fe8436ee221";
            };

            beamDeps  = [ ebs_1_1_2 egetopt_1_0_0 ];

            meta = {
              description = ''Erlang version of tr(1)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/SirWumpus/erlang-tr";
            };
          } // packageOverrides)
      ) {};

    etr = etr_1_0_0;

    ets_map_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ets_map";
            version = "0.0.1";
            src = fetchHex {
              pkg = "ets_map";
              version = "0.0.1";
              sha256 =
                "c33d714212c56d99b2472d522e24db808cd8a407101051d407be310412d61eae";
            };

            meta = {
              description = ''A Map-like Elixir data structure that is backed
                            by an ETS table.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/antipax/ets_map";
            };
          } // packageOverrides)
      ) {};

    ets_map = ets_map_0_0_1;

    ets_owner_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ets_owner";
            version = "1.0.0";
            src = fetchHex {
              pkg = "ets_owner";
              version = "1.0.0";
              sha256 =
                "54c0228a9134f4afe5c2a5418712a8b010bbc3f3e4864f3c854110f6cb65bca9";
            };

            meta = {
              description = ''A simple GenServer that owns your ETS tables and
                            won`t die, even if you do.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/meyercm/ets_owner";
            };
          } // packageOverrides)
      ) {};

    ets_owner = ets_owner_1_0_0;

    etude_1_0_0_beta_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          nile_0_1_3,
          poison_2_1_0
        }:
          buildMix ({
            name = "etude";
            version = "1.0.0-beta.0";
            src = fetchHex {
              pkg = "etude";
              version = "1.0.0-beta.0";
              sha256 =
                "f5a2896982cd062fe188dcb0216ef5c960959aa2ba77f4d31b00d0dda56890dd";
            };
            beamDeps  = [ nile_0_1_3 poison_2_1_0 ];

            meta = {
              description = ''futures for elixir/erlang'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/exstruct/etude";
            };
          } // packageOverrides)
      ) {};

    etude_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "etude";
            version = "1.0.1";
            src = fetchHex {
              pkg = "etude";
              version = "1.0.1";
              sha256 =
                "540f12da635db145e89c693ee67bbf43f1def9444301fcdc3cb2d4d7a29ceb89";
            };

            meta = {
              description = ''futures for elixir/erlang'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/exstruct/etude";
            };
          } // packageOverrides)
      ) {};

    etude = etude_1_0_1;

    etude_request_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          etude_1_0_1,
          hackney_1_6_6
        }:
          buildMix ({
            name = "etude_request";
            version = "0.2.0";
            src = fetchHex {
              pkg = "etude_request";
              version = "0.2.0";
              sha256 =
                "d2663d051029695acb2ee5aacd0c2bd44215fad745bfe96851c375744b68a9f6";
            };
            beamDeps  = [ etude_1_0_1 hackney_1_6_6 ];

            meta = {
              description = ''Parallel HTTP requests for etude'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/exstruct/etude_request";
            };
          } // packageOverrides)
      ) {};

    etude_request = etude_request_0_2_0;

    euler_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "euler";
            version = "0.0.1";
            src = fetchHex {
              pkg = "euler";
              version = "0.0.1";
              sha256 =
                "ab12770dd81fbb20524c751f71a31b8cc16553404665a336212d20bf351eb0fc";
            };

            meta = {
              longDescription = ''euler is a library that provides math
                                functions. ## Features * Working with integers:
                                * Greatest common divisor of two numbers (gcd)
                                '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/magicienap/euler";
            };
          } // packageOverrides)
      ) {};

    euler = euler_0_0_1;

    euniq_1_0_0 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          ebs_1_0_3,
          egetopt_1_0_0
        }:
          buildRebar3 ({
            name = "euniq";
            version = "1.0.0";
            src = fetchHex {
              pkg = "euniq";
              version = "1.0.0";
              sha256 =
                "445d189208576a3de54cd8111380bf5ee25ccfb9c966c5898b121b6df551d308";
            };

            beamDeps  = [ ebs_1_0_3 egetopt_1_0_0 ];

            meta = {
              description = ''Erlang version of uniq(1)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/SirWumpus/erlang-uniq";
            };
          } // packageOverrides)
      ) {};

    euniq = euniq_1_0_0;

    eunit_addons_0_3_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "eunit_addons";
            version = "0.3.0";
            src = fetchHex {
              pkg = "eunit_addons";
              version = "0.3.0";
              sha256 =
                "6d3255451f920d43954a0dd760d4175774fc305872eb44708f601630b82b0eb0";
            };

            meta = {
              description = ''Addons for eunit'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/klajo/eunit_addons";
            };
          } // packageOverrides)
      ) {};

    eunit_addons = eunit_addons_0_3_0;

    eunit_formatters_0_3_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "eunit_formatters";
            version = "0.3.1";
            src = fetchHex {
              pkg = "eunit_formatters";
              version = "0.3.1";
              sha256 =
                "64a40741429b7aff149c605d5a6135a48046af394a7282074e6003b3b56ae931";
            };

            meta = {
              description = ''Better output for eunit suites'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/seancribbs/eunit_formatters";
            };
          } // packageOverrides)
      ) {};

    eunit_formatters = eunit_formatters_0_3_1;

    eunit_sugar_0_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "eunit_sugar";
            version = "0.1.0";
            src = fetchHex {
              pkg = "eunit_sugar";
              version = "0.1.0";
              sha256 =
                "f30c41d711650270d8654f9067a3b5d16d73242e0eed19082b70676e9f05bb6e";
            };

            meta = {
              description = ''Helpers and sugars for eunit tests'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/xenolinguist/eunit_sugar";
            };
          } // packageOverrides)
      ) {};

    eunit_sugar = eunit_sugar_0_1_0;

    european_vat_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_10_0,
          poison_2_2_0,
          sweet_xml_0_6_5
        }:
          buildMix ({
            name = "european_vat";
            version = "0.1.0";
            src = fetchHex {
              pkg = "european_vat";
              version = "0.1.0";
              sha256 =
                "b92824b9d3c81d90b636c94a6918d7ca269d8373527a011a028a5c726318d906";
            };
            beamDeps  = [ httpoison_0_10_0 poison_2_2_0 sweet_xml_0_6_5 ];

            meta = {
              description = ''European Union VAT number utilities'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/xavier/european_vat";
            };
          } // packageOverrides)
      ) {};

    european_vat = european_vat_0_1_0;

    evel_0_1_1 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, hash_ring_0_4_0
        }:
          buildRebar3 ({
            name = "evel";
            version = "0.1.1";
            src = fetchHex {
              pkg = "evel";
              version = "0.1.1";
              sha256 =
                "b849699912f797e2b0082b43d0f58b18de838379b499c47dc24194d9fec03e6e";
            };

            beamDeps  = [ hash_ring_0_4_0 ];

            meta = {
              description = ''An Eventual Leader Election Library for Erlang'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sile/evel";
            };
          } // packageOverrides)
      ) {};

    evel = evel_0_1_1;

    event_nanny_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "event_nanny";
            version = "0.1.1";
            src = fetchHex {
              pkg = "event_nanny";
              version = "0.1.1";
              sha256 =
                "4d46b285e5187fc8e63f7911087dcff54fb46ca347b457013e9bd9901f9cc9d1";
            };

            meta = {
              description = ''Nanny for GenEvent restart handler when it exit
                            abnormally'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ammbot/event-nanny.git";
            };
          } // packageOverrides)
      ) {};

    event_nanny = event_nanny_0_1_1;

    event_queues_1_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          gen_stage_0_12_0,
          uuid_1_1_7
        }:
          buildMix ({
            name = "event_queues";
            version = "1.1.2";
            src = fetchHex {
              pkg = "event_queues";
              version = "1.1.2";
              sha256 =
                "f148279c370bc97bf81c277b695088f3f77ec78c5945f7f611d95588f52c8472";
            };
            beamDeps  = [ gen_stage_0_12_0 uuid_1_1_7 ];

            meta = {
              description = ''Provides helpers in Elixir to create GenStage
                            based event queues and handlers'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/cenurv/event_queues";
            };
          } // packageOverrides)
      ) {};

    event_queues = event_queues_1_1_2;

    event_source_encoder_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "event_source_encoder";
            version = "0.0.3";
            src = fetchHex {
              pkg = "event_source_encoder";
              version = "0.0.3";
              sha256 =
                "b930b7a8cf52e32913ba9bd333472253e2c100c91216c54dde043e5106d601df";
            };

            meta = {
              longDescription = ''EventSourceEncoder is a Elixir library to
                                encode data into EventSource compliant data. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/chatgris/event_source_encoder";
            };
          } // packageOverrides)
      ) {};

    event_source_encoder = event_source_encoder_0_0_3;

    eventsourced_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "eventsourced";
            version = "0.2.1";
            src = fetchHex {
              pkg = "eventsourced";
              version = "0.2.1";
              sha256 =
                "9e55b6223421685a80ca2a418c11206ded06eba8f96db3e23f918d3ab48a9fe7";
            };

            meta = {
              description = ''Build functional, event-sourced domain models.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/slashdotdash/eventsourced";
            };
          } // packageOverrides)
      ) {};

    eventsourced = eventsourced_0_2_1;

    eventstore_0_6_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          fsm_0_3_0,
          poolboy_1_5_1,
          postgrex_1_0_0_rc_1
        }:
          buildMix ({
            name = "eventstore";
            version = "0.6.2";
            src = fetchHex {
              pkg = "eventstore";
              version = "0.6.2";
              sha256 =
                "f32d43a8d496587d5deee2a1359038e1ab48a1bc10d4808ff1d2dfa1945ed3b8";
            };
            beamDeps  = [ fsm_0_3_0 poolboy_1_5_1 postgrex_1_0_0_rc_1 ];

            meta = {
              description = ''EventStore using PostgreSQL for persistence.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/slashdotdash/eventstore";
            };
          } // packageOverrides)
      ) {};

    eventstore_0_9_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          fsm_0_3_0,
          poolboy_1_5_1,
          postgrex_1_0_0_rc_1
        }:
          buildMix ({
            name = "eventstore";
            version = "0.9.0";
            src = fetchHex {
              pkg = "eventstore";
              version = "0.9.0";
              sha256 =
                "ac6c7fbdf2757ddd05d6b2dc8d1061bd4da3290dd54770abf8648578d01d49c9";
            };
            beamDeps  = [ fsm_0_3_0 poolboy_1_5_1 postgrex_1_0_0_rc_1 ];

            meta = {
              description = ''EventStore using PostgreSQL for persistence.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/slashdotdash/eventstore";
            };
          } // packageOverrides)
      ) {};

    eventstore = eventstore_0_9_0;

    eventstore_client_0_1_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_2_2_0,
          uuid_1_1_7
        }:
          buildMix ({
            name = "eventstore_client";
            version = "0.1.4";
            src = fetchHex {
              pkg = "eventstore_client";
              version = "0.1.4";
              sha256 =
                "fa77e1a7906b3ed27c0dfa0bd41f27b3129285857948aa23a3f888b0dd531109";
            };
            beamDeps  = [ httpoison_0_11_2 poison_2_2_0 uuid_1_1_7 ];

            meta = {
              description = ''HTTP Client for EventStore (geteventstore.com)'';

              homepage =
                "https://github.com/tbug/elixir-eventstore-http-client";
            };
          } // packageOverrides)
      ) {};

    eventstore_client = eventstore_client_0_1_4;

    everex_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_0_4,
          httpoison_0_6_2,
          oauther_1_0_2,
          plug_1_1_7
        }:
          buildMix ({
            name = "everex";
            version = "0.1.1";
            src = fetchHex {
              pkg = "everex";
              version = "0.1.1";
              sha256 =
                "3a85fc8d749b58c5fe87dc224cb7066cf1a45ac06d87c3661cd7a555076a901e";
            };
            beamDeps  = [
                          cowboy_1_0_4 httpoison_0_6_2 oauther_1_0_2 plug_1_1_7
                        ];

            meta = {
              longDescription = ''Evernote API client for Elixir NOTE: Everex
                                is UNDER DEVELOPMENT, and is NOT ready for
                                production use. Feedback and contributions (via
                                pull requests) are very welcome, of course!
                                UPDATE: There is now an example showing how to
                                get access using the OAuth authentication
                                process. See `examples/oauth.exs`. '';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/jwarlander/everex";
            };
          } // packageOverrides)
      ) {};

    everex = everex_0_1_1;

    everyoneapi_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_6_2,
          poison_1_3_1
        }:
          buildMix ({
            name = "everyoneapi";
            version = "0.0.1";
            src = fetchHex {
              pkg = "everyoneapi";
              version = "0.0.1";
              sha256 =
                "8214fa434a10716f252bcbcb5660faddbc20909d1058d1b491c95132eb4b3182";
            };
            beamDeps  = [ httpoison_0_6_2 poison_1_3_1 ];

            meta = {
              description = ''API Client for EveryoneAPI.com.'';
              license = stdenv.lib.licenses.mit;
              homepage = "http://github.com/knewter/everyoneapi";
            };
          } // packageOverrides)
      ) {};

    everyoneapi = everyoneapi_0_0_1;

    everything_location_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_1_1_9,
          httpotion_2_2_2,
          poison_2_1_0
        }:
          buildMix ({
            name = "everything_location";
            version = "0.0.1";
            src = fetchHex {
              pkg = "everything_location";
              version = "0.0.1";
              sha256 =
                "b96b492b04bcc09083861b7cbe8780678dde1cc377b53e631d632a764536129a";
            };
            beamDeps  = [ ecto_1_1_9 httpotion_2_2_2 poison_2_1_0 ];

            meta = {
              longDescription = ''A library to verify and complete address
                                information via http://everythinglocation.com'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/smeevil/everything_location";
            };
          } // packageOverrides)
      ) {};

    everything_location = everything_location_0_0_1;

    eview_0_12_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          credit_card_1_0_0,
          ecto_2_1_4,
          nex_json_schema_0_7_0,
          plug_1_3_5,
          poison_3_1_0
        }:
          buildMix ({
            name = "eview";
            version = "0.12.0";
            src = fetchHex {
              pkg = "eview";
              version = "0.12.0";
              sha256 =
                "41427193cd54b30b21feeb1f9a5a23c9f1542b6757bbfacfa15f912504780cc6";
            };
            beamDeps  = [
                          credit_card_1_0_0
                          ecto_2_1_4
                          nex_json_schema_0_7_0
                          plug_1_3_5
                          poison_3_1_0
                        ];

            meta = {
              description = ''Plug that converts response to Nebo #15 API spec
                            format.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/Nebo15/eview";
            };
          } // packageOverrides)
      ) {};

    eview = eview_0_12_0;

    evil_clock_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          nerves_uart_0_1_2,
          timex_3_1_15
        }:
          buildMix ({
            name = "evil_clock";
            version = "0.1.0";
            src = fetchHex {
              pkg = "evil_clock";
              version = "0.1.0";
              sha256 =
                "351c87d26304b3b1184456497a0b9ff0eca12682b9cc7f9d4ba20d6743a6ea19";
            };
            beamDeps  = [ nerves_uart_0_1_2 timex_3_1_15 ];

            meta = {
              longDescription = ''Elixir application for interfacing with Alpha
                                Clock Five from Evil Mad Scientist
                                Laboratories'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/electricshaman/evil_clock";
            };
          } // packageOverrides)
      ) {};

    evil_clock = evil_clock_0_1_0;

    evo_0_4_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, gproc_0_6_1 }:
          buildMix ({
            name = "evo";
            version = "0.4.1";
            src = fetchHex {
              pkg = "evo";
              version = "0.4.1";
              sha256 =
                "5e3a9312c0267c2ab47a6c02fa029ce7227b7a25a3b181407f3840a16724369a";
            };
            beamDeps  = [ gproc_0_6_1 ];

            meta = {
              description = ''An OTP cart meant for use in eCommerce
                            applications'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/cas27/evo";
            };
          } // packageOverrides)
      ) {};

    evo = evo_0_4_1;

    ewc_1_0_0 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          ebs_1_1_1,
          egetopt_1_0_0
        }:
          buildRebar3 ({
            name = "ewc";
            version = "1.0.0";
            src = fetchHex {
              pkg = "ewc";
              version = "1.0.0";
              sha256 =
                "78cf20bb1cd7243e82aa19c023c0000a958a1117e018b24886558bc7992802cb";
            };

            beamDeps  = [ ebs_1_1_1 egetopt_1_0_0 ];

            meta = {
              description = ''Erlang version of wc(1)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/SirWumpus/erlang-wc";
            };
          } // packageOverrides)
      ) {};

    ewc = ewc_1_0_0;

    ewebmachine_2_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          plug_1_3_5
        }:
          buildMix ({
            name = "ewebmachine";
            version = "2.1.2";
            src = fetchHex {
              pkg = "ewebmachine";
              version = "2.1.2";
              sha256 =
                "bf8a31bd3a1640c269ae2bdcbc2702b83ec258f2bca30b820851a2d5f8ac1c54";
            };
            beamDeps  = [ cowboy_1_1_2 plug_1_3_5 ];

            meta = {
              longDescription = ''Ewebmachine contains macros and plugs to
                                allow you to compose HTTP decision handlers and
                                run the HTTP decision tree to get your HTTP
                                response. This project is a rewrite for Elixir
                                and Plug of basho webmachine.'';
              license = stdenv.lib.licenses.mit;
              homepage = "http://github.com/awetzel/ewebmachine";
            };
          } // packageOverrides)
      ) {};

    ewebmachine = ewebmachine_2_1_2;

    ex2ms_1_4_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex2ms";
            version = "1.4.0";
            src = fetchHex {
              pkg = "ex2ms";
              version = "1.4.0";
              sha256 =
                "8a743796d9f067f047e50d9726dfd8eb2791e6ce00c79edbd5ced6a06fe5e388";
            };

            meta = {
              description = ''Translates Elixir functions to match
                            specifications for use with `ets`.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ericmj/ex2ms";
            };
          } // packageOverrides)
      ) {};

    ex2ms_1_5_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex2ms";
            version = "1.5.0";
            src = fetchHex {
              pkg = "ex2ms";
              version = "1.5.0";
              sha256 =
                "670d7314fd792b320bd133d44dc0e1e484db7a375614fe3b769101a3b34f708f";
            };

            meta = {
              description = ''Translates Elixir functions to match
                            specifications for use with `ets`.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ericmj/ex2ms";
            };
          } // packageOverrides)
      ) {};

    ex2ms = ex2ms_1_5_0;

    ex_abnf_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_abnf";
            version = "0.3.0";
            src = fetchHex {
              pkg = "ex_abnf";
              version = "0.3.0";
              sha256 =
                "35030990fd9fe584a0638231f1f0c8492330bfb6d95f37a7f134dc94bd0c8f6d";
            };

            meta = {
              longDescription = ''A parser and interpreter for ABNF grammars.
                                This is not a parser generator, but an
                                interpreter. It will load up an ABNF grammar,
                                and generate an AST for it. Then one can apply
                                any of the rules to an input and the interpreter
                                will parse the input according to the rule.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/marcelog/ex_abnf";
            };
          } // packageOverrides)
      ) {};

    ex_abnf = ex_abnf_0_3_0;

    ex_admin_0_8_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          csvlixir_2_0_4,
          decimal_1_3_1,
          ecto_2_1_4,
          ex_queb_0_2_2,
          exactor_2_2_3,
          gettext_0_13_1,
          inflex_1_8_1,
          phoenix_1_3_0_rc_2,
          phoenix_ecto_3_1_0_rc_0,
          phoenix_html_2_9_3,
          scrivener_ecto_1_1_4,
          xain_0_6_0
        }:
          buildMix ({
            name = "ex_admin";
            version = "0.8.2";
            src = fetchHex {
              pkg = "ex_admin";
              version = "0.8.2";
              sha256 =
                "074ed05e523d1ef9f95338f7c29d9f41e275a52e2e57ed860fbf4768c30a8522";
            };
            beamDeps  = [
                          cowboy_1_1_2
                          csvlixir_2_0_4
                          decimal_1_3_1
                          ecto_2_1_4
                          ex_queb_0_2_2
                          exactor_2_2_3
                          gettext_0_13_1
                          inflex_1_8_1
                          phoenix_1_3_0_rc_2
                          phoenix_ecto_3_1_0_rc_0
                          phoenix_html_2_9_3
                          scrivener_ecto_1_1_4
                          xain_0_6_0
                        ];

            meta = {
              description = ''An Elixir Phoenix Auto Administration Package.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/smpallen99/ex_admin";
            };
          } // packageOverrides)
      ) {};

    ex_admin = ex_admin_0_8_2;

    ex_admin_runtime_0_8_3_dev = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          csvlixir_2_0_4,
          decimal_1_3_1,
          ecto_2_1_4,
          ex_queb_1_0_0,
          exactor_2_2_3,
          gettext_0_13_1,
          hound_1_0_3,
          inflex_1_8_1,
          phoenix_1_3_0_rc_2,
          phoenix_ecto_3_2_3,
          phoenix_html_2_9_3,
          scrivener_ecto_1_2_2,
          xain_0_6_0
        }:
          buildMix ({
            name = "ex_admin_runtime";
            version = "0.8.3-dev";
            src = fetchHex {
              pkg = "ex_admin_runtime";
              version = "0.8.3-dev";
              sha256 =
                "7879e81a999408011fbdd531f66ddd14242040d74895015e9615e7e0538e01ef";
            };
            beamDeps  = [
                          cowboy_1_1_2
                          csvlixir_2_0_4
                          decimal_1_3_1
                          ecto_2_1_4
                          ex_queb_1_0_0
                          exactor_2_2_3
                          gettext_0_13_1
                          hound_1_0_3
                          inflex_1_8_1
                          phoenix_1_3_0_rc_2
                          phoenix_ecto_3_2_3
                          phoenix_html_2_9_3
                          scrivener_ecto_1_2_2
                          xain_0_6_0
                        ];

            meta = {
              description = ''An Elixir Phoenix Auto Administration Package.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tsutsu/ex_admin";
            };
          } // packageOverrides)
      ) {};

    ex_admin_runtime = ex_admin_runtime_0_8_3_dev;

    ex_aerospike_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_aerospike";
            version = "0.0.1";
            src = fetchHex {
              pkg = "ex_aerospike";
              version = "0.0.1";
              sha256 =
                "3420ba4b94c25aca08106d58ce4bdc941767e588bf8092747a611e38a7b5e03f";
            };
             meta = {    };
          } // packageOverrides)
      ) {};

    ex_aerospike = ex_aerospike_0_0_1;

    ex_aircall_0_3_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_9_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "ex_aircall";
            version = "0.3.3";
            src = fetchHex {
              pkg = "ex_aircall";
              version = "0.3.3";
              sha256 =
                "9d4c6dca872461390c612c9273e3deaca79c05d5cf48e134af8c11fcea006fcd";
            };
            beamDeps  = [ httpoison_0_9_2 poison_3_1_0 ];

            meta = {
              description = ''An @aircall API interface for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/HiOperator/ex_aircall";
            };
          } // packageOverrides)
      ) {};

    ex_aircall = ex_aircall_0_3_3;

    ex_ami_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, gen_fsm_0_1_0 }:
          buildMix ({
            name = "ex_ami";
            version = "0.2.0";
            src = fetchHex {
              pkg = "ex_ami";
              version = "0.2.0";
              sha256 =
                "200421cafe5ca8d686d2378df2005682d734f813a0ee78307a0d86a5ab4fea19";
            };
            beamDeps  = [ gen_fsm_0_1_0 ];

            meta = {
              description = ''An Elixir Asterisk AMI Client Library.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/smpallen99/ex_ami";
            };
          } // packageOverrides)
      ) {};

    ex_ami = ex_ami_0_2_0;

    ex_anti_gate_0_3_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_4,
          httpoison_0_11_2,
          poison_1_0_2
        }:
          buildMix ({
            name = "ex_anti_gate";
            version = "0.3.1";
            src = fetchHex {
              pkg = "ex_anti_gate";
              version = "0.3.1";
              sha256 =
                "d73f8973eaeace1bd8dde34fa317b97c4a474bff82a979401d5fe1d19145ef11";
            };
            beamDeps  = [ ecto_2_1_4 httpoison_0_11_2 poison_1_0_2 ];

            meta = {
              description = ''Elixir AntiGate.com (anti-captcha.com) captcha
                            solving service API client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/vheathen/ex_anti_gate";
            };
          } // packageOverrides)
      ) {};

    ex_anti_gate = ex_anti_gate_0_3_1;

    ex_api_ai_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_9_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "ex_api_ai";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ex_api_ai";
              version = "0.1.0";
              sha256 =
                "ab8cf9a34287c6a1c2013406592b2e5986547b0f6a6eab64cc6fd4a944cf6aee";
            };
            beamDeps  = [ httpoison_0_9_2 poison_2_2_0 ];

            meta = {
              description = ''Elixir wrapper for @api_ai'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/enilsen16/ex_api_ai";
            };
          } // packageOverrides)
      ) {};

    ex_api_ai = ex_api_ai_0_1_0;

    ex_app_info_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_app_info";
            version = "0.3.0";
            src = fetchHex {
              pkg = "ex_app_info";
              version = "0.3.0";
              sha256 =
                "c30a16c3a82da9ea55f989b8e7232ec27d537ee313c11dcf78488a80881848d3";
            };

            meta = {
              description = ''Helper mix tasks that are useful with CI
                            systems.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ntrepid8/ex_app_info";
            };
          } // packageOverrides)
      ) {};

    ex_app_info = ex_app_info_0_3_0;

    ex_avro_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_avro";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ex_avro";
              version = "0.1.0";
              sha256 =
                "2fc08ff093099d5390b694749ac57d8c97c17503d194c49b691943dcc4703369";
            };

            meta = {
              description = ''A light Elixir wrapper around eavro for parsing
                            Avro protocol files.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/avvo/ex_avro";
            };
          } // packageOverrides)
      ) {};

    ex_avro_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_avro";
            version = "0.2.0";
            src = fetchHex {
              pkg = "ex_avro";
              version = "0.2.0";
              sha256 =
                "6cdfb48c04adc0793a6ba4f6f630cf74569816c5db9e263ccd235b561cf925db";
            };

            meta = {
              description = ''A light Elixir wrapper around eavro for parsing
                            Avro protocol files.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/avvo/ex_avro";
            };
          } // packageOverrides)
      ) {};

    ex_avro = ex_avro_0_2_0;

    ex_aws_1_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          configparser_ex_0_2_1,
          gen_stage_0_11_0,
          hackney_1_6_1,
          jsx_2_8_2,
          poison_3_1_0,
          sweet_xml_0_6_5
        }:
          buildMix ({
            name = "ex_aws";
            version = "1.0.0";
            src = fetchHex {
              pkg = "ex_aws";
              version = "1.0.0";
              sha256 =
                "f243aaf37b567bc5c924cc09068745d1f59e9df9ca536b8bcf6d659639b0bfc8";
            };
            beamDeps  = [
                          configparser_ex_0_2_1
                          gen_stage_0_11_0
                          hackney_1_6_1
                          jsx_2_8_2
                          poison_3_1_0
                          sweet_xml_0_6_5
                        ];

            meta = {
              longDescription = ''AWS client. Currently supports Dynamo,
                                DynamoStreams, EC2, Firehose, Kinesis, KMS,
                                Lambda, RRDS, Route53, S3, SES, SNS, SQS, STS'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/CargoSense/ex_aws";
            };
          } // packageOverrides)
      ) {};

    ex_aws_1_0_0_rc_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          gen_stage_0_11_0,
          hackney_1_8_6,
          jsx_2_8_2,
          poison_1_0_2,
          sweet_xml_0_6_5
        }:
          buildMix ({
            name = "ex_aws";
            version = "1.0.0-rc.4";
            src = fetchHex {
              pkg = "ex_aws";
              version = "1.0.0-rc.4";
              sha256 =
                "cc1fdf882ed719b0adbf4434b12741821504927714312259f05944e1bbcad838";
            };
            beamDeps  = [
                          gen_stage_0_11_0
                          hackney_1_8_6
                          jsx_2_8_2
                          poison_1_0_2
                          sweet_xml_0_6_5
                        ];

            meta = {
              longDescription = ''AWS client. Currently supports Dynamo,
                                DynamoStreams, EC2, Firehose, Kinesis, KMS,
                                Lambda, RRDS, Route53, S3, SES, SNS, SQS, STS'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/CargoSense/ex_aws";
            };
          } // packageOverrides)
      ) {};

    ex_azure_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_azure";
            version = "0.1.1";
            src = fetchHex {
              pkg = "ex_azure";
              version = "0.1.1";
              sha256 =
                "ec38b97e7197322ad8c967825d8f561ac07a900aee02f09b214dcc71c77a58d5";
            };

            meta = {
              description = ''Azure wrapper for Elixir using :erlazure'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gullitmiranda/ex_azure";
            };
          } // packageOverrides)
      ) {};

    ex_azure = ex_azure_0_1_1;

    ex_bcrypt_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, bcrypt_0_5_0_p3 }:
          buildMix ({
            name = "ex_bcrypt";
            version = "0.0.1";
            src = fetchHex {
              pkg = "ex_bcrypt";
              version = "0.0.1";
              sha256 =
                "c6c91e333f3e84733bb8fca08af9fda01b20f3b2a8801e456b31103118418e81";
            };
            beamDeps  = [ bcrypt_0_5_0_p3 ];

            meta = {
              description = ''Elixir wrapper for the OpenBSD bcrypt password
                            hashing algorithm'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/manelli/ex_bcrypt";
            };
          } // packageOverrides)
      ) {};

    ex_bcrypt = ex_bcrypt_0_0_1;

    ex_bitcask_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_bitcask";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ex_bitcask";
              version = "0.1.0";
              sha256 =
                "dc771229aae3c07c31a5523303f0c4dbe3c700d5025a09dfcca9cc357222c463";
            };

            meta = {
              longDescription = ''Elixir wrapper of Basho`s Bitcask Key/Value
                                store. Bitcask as a Log-Structured Hash Table
                                for Fast Key/Value Data. '';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/JonGretar/ExBitcask";
            };
          } // packageOverrides)
      ) {};

    ex_bitcask = ex_bitcask_0_1_0;

    ex_blockchain_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_9_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "ex_blockchain";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ex_blockchain";
              version = "0.1.0";
              sha256 =
                "7fbf3047ab43b97af2fcd750c8b4a3032c753ff377d5503ff2c30a4fc82437ad";
            };
            beamDeps  = [ httpoison_0_9_2 poison_2_2_0 ];

            meta = {
              description = ''Elixir wrapper from the Blockchain.info API
                            (v1)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/et/ex_blockchain";
            };
          } // packageOverrides)
      ) {};

    ex_blockchain = ex_blockchain_0_1_0;

    ex_blocktrail_0_2_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exconstructor_1_1_0,
          httpoison_0_11_2,
          poison_3_1_0,
          vex_0_6_0,
          yuri_1_0_0
        }:
          buildMix ({
            name = "ex_blocktrail";
            version = "0.2.2";
            src = fetchHex {
              pkg = "ex_blocktrail";
              version = "0.2.2";
              sha256 =
                "a9c25a738be7dceb760e9af5ea0777882bb93f37d406b16307136dc348e7199b";
            };
            beamDeps  = [
                          exconstructor_1_1_0
                          httpoison_0_11_2
                          poison_3_1_0
                          vex_0_6_0
                          yuri_1_0_0
                        ];

            meta = {
              description = ''WIP. Elixir wrapper for blocktrail.com Bitcoin
                            api and some utility functions.'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    ex_blocktrail = ex_blocktrail_0_2_2;

    ex_brace_expansion_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_brace_expansion";
            version = "0.0.2";
            src = fetchHex {
              pkg = "ex_brace_expansion";
              version = "0.0.2";
              sha256 =
                "d7470a00cffe4425f89e83d7288c24b641c3f6cbde136a08089e7420467cd237";
            };

            meta = {
              longDescription = ''Brace expansion, as known from sh/bash, in
                                Elixir. Quick example:
                                ExBraceExpansion.expand(\"file-{a,b,c}.jpg\") =>
                                [\"file-a.jpg\", \"file-b.jpg\", \"file-c.jpg\"]
                                '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gniquil/ex_brace_expansion";
            };
          } // packageOverrides)
      ) {};

    ex_brace_expansion = ex_brace_expansion_0_0_2;

    ex_celery_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          amqp_0_1_4,
          poison_2_2_0,
          uuid_1_1_7
        }:
          buildMix ({
            name = "ex_celery";
            version = "0.2.0";
            src = fetchHex {
              pkg = "ex_celery";
              version = "0.2.0";
              sha256 =
                "a52264bdc06aca720fdeeead707dd4f170c344508c3053502a7c647f19529203";
            };
            beamDeps  = [ amqp_0_1_4 poison_2_2_0 uuid_1_1_7 ];

            meta = {
              longDescription = ''A Celery producer for Elixir. Currently
                                supports the RabbitMQ broker, and only
                                publishing tasks (not running them or retrieving
                                their result).'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/robgolding/ex_celery";
            };
          } // packageOverrides)
      ) {};

    ex_celery = ex_celery_0_2_0;

    ex_chimp_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_1_0_2
        }:
          buildMix ({
            name = "ex_chimp";
            version = "0.0.2";
            src = fetchHex {
              pkg = "ex_chimp";
              version = "0.0.2";
              sha256 =
                "8efd4ea1b479a63e9c81aa212d14ecafc1db2682500b44beb74c182e0433eb7c";
            };
            beamDeps  = [ httpoison_0_11_2 poison_1_0_2 ];

            meta = {
              description = ''Basic/minimal Mailchimp API client.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/twined/ex_chimp";
            };
          } // packageOverrides)
      ) {};

    ex_chimp = ex_chimp_0_0_2;

    ex_clacks_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, plug_1_3_5 }:
          buildMix ({
            name = "ex_clacks";
            version = "0.1.2";
            src = fetchHex {
              pkg = "ex_clacks";
              version = "0.1.2";
              sha256 =
                "8299396f26982bbaed7f12988277174d3d3e92e0a5efe685c8d0133e08e013cc";
            };
            beamDeps  = [ plug_1_3_5 ];

            meta = {
              description = ''A Plug that pays homage to Terry Pratchett'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/polymetis/ex_clacks";
            };
          } // packageOverrides)
      ) {};

    ex_clacks = ex_clacks_0_1_2;

    ex_cldr_0_4_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          decimal_1_3_1,
          gettext_0_13_1,
          poison_1_0_2
        }:
          buildMix ({
            name = "ex_cldr";
            version = "0.4.0";
            src = fetchHex {
              pkg = "ex_cldr";
              version = "0.4.0";
              sha256 =
                "cab123a6b3d42ef54f581623df6d99fb9919b28eb47490036312439fd6b8cd4e";
            };
            beamDeps  = [ decimal_1_3_1 gettext_0_13_1 poison_1_0_2 ];

            meta = {
              longDescription = ''Common Locale Data Repository (CLDR)
                                functions for Elixir to localize and format
                                numbers, dates, lists and units with support for
                                over 500 locales for internationalized (i18n)
                                and localized (L10N) applications.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/kipcole9/cldr";
            };
          } // packageOverrides)
      ) {};

    ex_cldr = ex_cldr_0_4_0;

    ex_clean_pagination_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, plug_1_2_5 }:
          buildMix ({
            name = "ex_clean_pagination";
            version = "0.0.2";
            src = fetchHex {
              pkg = "ex_clean_pagination";
              version = "0.0.2";
              sha256 =
                "05174035d1480902bd17a144546f74feb35f6d66146c8657b6558e38e90a650a";
            };
            beamDeps  = [ plug_1_2_5 ];

            meta = {
              description = ''API pagination the way RFC7233 intended it'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sineed/ex_clean_pagination";
            };
          } // packageOverrides)
      ) {};

    ex_clean_pagination = ex_clean_pagination_0_0_2;

    ex_clearbit_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exconstructor_1_0_2,
          httpoison_0_11_2,
          inflex_1_7_0,
          poison_2_2_0
        }:
          buildMix ({
            name = "ex_clearbit";
            version = "0.1.1";
            src = fetchHex {
              pkg = "ex_clearbit";
              version = "0.1.1";
              sha256 =
                "3945f47721094bf451cffb31ade55890e7855db060ed11be9f66d29dc5b18d58";
            };
            beamDeps  = [
                          exconstructor_1_0_2
                          httpoison_0_11_2
                          inflex_1_7_0
                          poison_2_2_0
                        ];

            meta = {
              description = ''A lightweight API client for Clearbit'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/keithmattix/ex_clearbit";
            };
          } // packageOverrides)
      ) {};

    ex_clearbit = ex_clearbit_0_1_1;

    ex_cli_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_cli";
            version = "0.1.2";
            src = fetchHex {
              pkg = "ex_cli";
              version = "0.1.2";
              sha256 =
                "e30b09b99070611c7921d2c42f9291db54ef7a4b89330305b98c1545ba1995f5";
            };

            meta = {
              description = ''Library to build CLI applications'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tuvistavie/ex_cli";
            };
          } // packageOverrides)
      ) {};

    ex_cli = ex_cli_0_1_2;

    ex_clockwork_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_clockwork";
            version = "0.2.0";
            src = fetchHex {
              pkg = "ex_clockwork";
              version = "0.2.0";
              sha256 =
                "deed8bcf1c9690454663e68753b376a750fd17d48d7e7983062d1e1022897d58";
            };

            meta = {
              longDescription = ''This package allows you to run tasks at
                                specified periods of time. Similar to ruby
                                `clockwork` gem.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Mehonoshin/ex_clockwork";
            };
          } // packageOverrides)
      ) {};

    ex_clockwork = ex_clockwork_0_2_0;

    ex_closeio_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "ex_closeio";
            version = "0.3.0";
            src = fetchHex {
              pkg = "ex_closeio";
              version = "0.3.0";
              sha256 =
                "fe9ac3e154fec0e06b57b345b745bd8dd81a437ed488ec3d2c1525627f7e90a7";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''Close.io client library for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/taylorbrooks/ex_closeio";
            };
          } // packageOverrides)
      ) {};

    ex_closeio = ex_closeio_0_3_0;

    ex_cloudinary_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "ex_cloudinary";
            version = "0.3.0";
            src = fetchHex {
              pkg = "ex_cloudinary";
              version = "0.3.0";
              sha256 =
                "4c4394d8df10b4d9ceaa0fc2184a0cdea9829b72a1eb820f222781b5ef2fd28c";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''A wrapper around the HTTPoison.Base module for
                            Cloudinary.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sschneider1207/ExCloudinary";
            };
          } // packageOverrides)
      ) {};

    ex_cloudinary = ex_cloudinary_0_3_0;

    ex_codeship_1_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exjsx_3_2_1,
          httpoison_0_9_2
        }:
          buildMix ({
            name = "ex_codeship";
            version = "1.0.0";
            src = fetchHex {
              pkg = "ex_codeship";
              version = "1.0.0";
              sha256 =
                "8f65625d1dcc2f1cf4c9bf4dad4f4dff16752f386b44a561a8cda91ec1541536";
            };
            beamDeps  = [ exjsx_3_2_1 httpoison_0_9_2 ];

            meta = {
              longDescription = ''A Codeship wrapper for Elixir Requires an
                                environment variable to be set for CODESHIP_KEY
                                which can be obtained in your codeship
                                account'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/securingsincity/ex_codeship";
            };
          } // packageOverrides)
      ) {};

    ex_codeship = ex_codeship_1_0_0;

    ex_conf_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_conf";
            version = "0.1.3";
            src = fetchHex {
              pkg = "ex_conf";
              version = "0.1.3";
              sha256 =
                "140dfae39127354f6efa6c295ca5407a20cf2802be199ecdc77aa38e2915ca42";
            };

            meta = {
              description = ''Simple Elixir Configuration Management '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/phoenixframework/ex_conf";
            };
          } // packageOverrides)
      ) {};

    ex_conf = ex_conf_0_1_3;

    ex_const_0_2_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_const";
            version = "0.2.2";
            src = fetchHex {
              pkg = "ex_const";
              version = "0.2.2";
              sha256 =
                "87c28aefc864bb97555772c45199f2812e7b3f325cd070debc28b70a2030ae7b";
            };

            meta = {
              description = ''Constants and Enumerated Values for Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/jcomellas/ex_const";
            };
          } // packageOverrides)
      ) {};

    ex_const = ex_const_0_2_2;

    ex_consul_url_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_10_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "ex_consul_url";
            version = "0.1.1";
            src = fetchHex {
              pkg = "ex_consul_url";
              version = "0.1.1";
              sha256 =
                "2c3e9c6549765076938a772c2f4dcaf78b8e21e9ce0ca6fec70552650bbb6db4";
            };
            beamDeps  = [ httpoison_0_10_0 poison_3_1_0 ];

            meta = {
              description = ''Simple url lookup from HashiCorp Consul'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/findmypast/ex_consul_url";
            };
          } // packageOverrides)
      ) {};

    ex_consul_url = ex_consul_url_0_1_1;

    ex_cron_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_cron";
            version = "0.0.3";
            src = fetchHex {
              pkg = "ex_cron";
              version = "0.0.3";
              sha256 =
                "db6122c2f4c9745115aef4e9fd4e0902f0092861cdc39e4afdd50bc18fd7a304";
            };

            meta = {
              description = ''Cron schedule generator for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/codestuffers/ex-cron";
            };
          } // packageOverrides)
      ) {};

    ex_cron = ex_cron_0_0_3;

    ex_crypto_0_4_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_2_2_0 }:
          buildMix ({
            name = "ex_crypto";
            version = "0.4.0";
            src = fetchHex {
              pkg = "ex_crypto";
              version = "0.4.0";
              sha256 =
                "9825d0710278b99cde7004b98105e4d02b1b842c08467147745696d565578b44";
            };
            beamDeps  = [ poison_2_2_0 ];

            meta = {
              longDescription = ''A wrapper around the Erlang Crypto module
                                with sensible defaults for common tasks.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ntrepid8/ex_crypto";
            };
          } // packageOverrides)
      ) {};

    ex_crypto = ex_crypto_0_4_0;

    ex_csv_0_1_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_csv";
            version = "0.1.5";
            src = fetchHex {
              pkg = "ex_csv";
              version = "0.1.5";
              sha256 =
                "52a284295bab0ee1d7a74f66ffc46c4b0086028a981e25fda0ec2146b335b656";
            };

            meta = {
              description = ''CSV for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/CargoSense/ex_csv";
            };
          } // packageOverrides)
      ) {};

    ex_csv = ex_csv_0_1_5;

    ex_csv_editor_0_2_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          csv_1_4_4,
          phoenix_1_3_0_rc_2,
          phoenix_html_2_9_3,
          scrivener_html_1_7_1,
          scrivener_list_1_0_1
        }:
          buildMix ({
            name = "ex_csv_editor";
            version = "0.2.1";
            src = fetchHex {
              pkg = "ex_csv_editor";
              version = "0.2.1";
              sha256 =
                "cfdd32b17ec4192c691209547fefe9ca6f77b0f818bff780e24cc9574ff96799";
            };
            beamDeps  = [
                          csv_1_4_4
                          phoenix_1_3_0_rc_2
                          phoenix_html_2_9_3
                          scrivener_html_1_7_1
                          scrivener_list_1_0_1
                        ];

            meta = {
              description = ''Helpers built to work with Phoenix`s page struct
                            to easily work with CSV files.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/xnouvilas/ex_csv_editor";
            };
          } // packageOverrides)
      ) {};

    ex_csv_editor = ex_csv_editor_0_2_1;

    ex_dash_0_1_5 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ex_doc_0_16_1,
          floki_0_14_0
        }:
          buildMix ({
            name = "ex_dash";
            version = "0.1.5";
            src = fetchHex {
              pkg = "ex_dash";
              version = "0.1.5";
              sha256 =
                "27ba5725a230393c0b7240a9d49c1dea41333f52fc6a2ad9bddf08c7b0a40792";
            };
            beamDeps  = [ ex_doc_0_16_1 floki_0_14_0 ];

            meta = {
              description = ''ExDash builds a Dash Docset with your local
                            Elixir app.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/russmatney/ex_dash";
            };
          } // packageOverrides)
      ) {};

    ex_dash = ex_dash_0_1_5;

    ex_data_dog_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ex_doc_0_16_1 }:
          buildMix ({
            name = "ex_data_dog";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ex_data_dog";
              version = "0.1.0";
              sha256 =
                "71ab595c763f426f5cf5f2307d40c14b75eee88aac5f284bccb27ed0c64b2f56";
            };
            beamDeps  = [ ex_doc_0_16_1 ];

            meta = {
              description = ''Elixir DataDog integration'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/KamilLelonek/ex-data-dog";
            };
          } // packageOverrides)
      ) {};

    ex_data_dog = ex_data_dog_0_1_0;

    ex_datadog_plug_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ex_statsd_0_5_3,
          plug_1_3_5
        }:
          buildMix ({
            name = "ex_datadog_plug";
            version = "0.1.1";
            src = fetchHex {
              pkg = "ex_datadog_plug";
              version = "0.1.1";
              sha256 =
                "0c5d377fcab05429b58beb3ecd2256fc73b2622f3138bb867a15f1313b55243d";
            };
            beamDeps  = [ ex_statsd_0_5_3 plug_1_3_5 ];

            meta = {
              description = ''ex_datadog_plug helps to collect response time
                            for your plug application.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/adRise/ex_datadog_plug";
            };
          } // packageOverrides)
      ) {};

    ex_datadog_plug = ex_datadog_plug_0_1_1;

    ex_dns_client_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_dns_client";
            version = "0.1.1";
            src = fetchHex {
              pkg = "ex_dns_client";
              version = "0.1.1";
              sha256 =
                "a84004c9ed3b8af3a76b40f4f7b867c4dcae578e9743d7b1b90346172d4719d3";
            };

            meta = {
              description = ''A rudimentary DNS client. Thin wrapper around
                            erlang`s `inet_res` library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kagux/ex_dns_client";
            };
          } // packageOverrides)
      ) {};

    ex_dns_client = ex_dns_client_0_1_1;

    ex_doc_0_15_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, earmark_1_2_2 }:
          buildMix ({
            name = "ex_doc";
            version = "0.15.1";
            src = fetchHex {
              pkg = "ex_doc";
              version = "0.15.1";
              sha256 =
                "00d41bec3590533279b90870d68ebc4fdfcc3a1c7b6629796167b49bfa199d54";
            };
            beamDeps  = [ earmark_1_2_2 ];

            meta = {
              description = ''ExDoc is a documentation generation tool for
                            Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/elixir-lang/ex_doc";
            };
          } // packageOverrides)
      ) {};

    ex_doc_0_16_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, earmark_1_2_2 }:
          buildMix ({
            name = "ex_doc";
            version = "0.16.1";
            src = fetchHex {
              pkg = "ex_doc";
              version = "0.16.1";
              sha256 =
                "1d4ecdc3f292883abf88b41c69da6a81fe928d6d0d65572a64b8d63a4d707693";
            };
            beamDeps  = [ earmark_1_2_2 ];

            meta = {
              description = ''ExDoc is a documentation generation tool for
                            Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/elixir-lang/ex_doc";
            };
          } // packageOverrides)
      ) {};

    ex_doc = ex_doc_0_16_1;

    ex_doc_dash_0_3_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ex_doc_0_16_1 }:
          buildMix ({
            name = "ex_doc_dash";
            version = "0.3.1";
            src = fetchHex {
              pkg = "ex_doc_dash";
              version = "0.3.1";
              sha256 =
                "04477a9c17578b01147d346fbb332806e5d09897c4817af487bb31835b4e1e02";
            };
            beamDeps  = [ ex_doc_0_16_1 ];

            meta = {
              description = ''Formatter for ExDoc to generate docset
                            documentation for use in Dash.app.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/JonGretar/ExDocDash";
            };
          } // packageOverrides)
      ) {};

    ex_doc_dash = ex_doc_dash_0_3_1;

    ex_doc_epub_0_0_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          earmark_0_1_19,
          ex_doc_0_16_1
        }:
          buildMix ({
            name = "ex_doc_epub";
            version = "0.0.3";
            src = fetchHex {
              pkg = "ex_doc_epub";
              version = "0.0.3";
              sha256 =
                "a91ed3ea7bc10ee97916240187e111c2cad4712578c5ec1fdcb1a33bd2db6633";
            };
            beamDeps  = [ earmark_0_1_19 ex_doc_0_16_1 ];

            meta = {
              description = ''Create documentation for Elixir projects in EPUB
                            format'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/milmazz/ex_doc_epub";
            };
          } // packageOverrides)
      ) {};

    ex_doc_epub = ex_doc_epub_0_0_3;

    ex_dockerapi_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_7_5,
          poison_1_5_2
        }:
          buildMix ({
            name = "ex_dockerapi";
            version = "0.0.1";
            src = fetchHex {
              pkg = "ex_dockerapi";
              version = "0.0.1";
              sha256 =
                "337481d27cb65f7d607e28f0bc129f2197c1b04fdc357446f5a07f2296b9604b";
            };
            beamDeps  = [ httpoison_0_7_5 poison_1_5_2 ];

            meta = {
              description = ''Docker API client.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/JonGretar/DockerAPI.ex";
            };
          } // packageOverrides)
      ) {};

    ex_dockerapi = ex_dockerapi_0_0_1;

    ex_edn_0_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          array_1_0_1,
          timex_3_0_5
        }:
          buildMix ({
            name = "ex_edn";
            version = "0.1.2";
            src = fetchHex {
              pkg = "ex_edn";
              version = "0.1.2";
              sha256 =
                "9568e79cb96bd61f26389b96ab1ac4fee57762fba6c166ddc745c521ccf2c5ca";
            };
            beamDeps  = [ array_1_0_1 timex_3_0_5 ];

            meta = {
              longDescription = ''[edn](https://github.com/edn-format/edn)
                                (extensible data notation) encoder/decoder
                                implemented in Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/jfacorro/ExEdn/";
            };
          } // packageOverrides)
      ) {};

    ex_edn = ex_edn_0_1_2;

    ex_enum_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, gettext_0_13_1 }:
          buildMix ({
            name = "ex_enum";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ex_enum";
              version = "0.1.0";
              sha256 =
                "f6685959ef337018e42c4baccdce98cc9618974759d1fdb969fcf9a266e590ea";
            };
            beamDeps  = [ gettext_0_13_1 ];

            meta = {
              description = ''Enum library for Elixir inspired by
                            ActiveHash::Enum.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kenta-aktsk/ex_enum";
            };
          } // packageOverrides)
      ) {};

    ex_enum = ex_enum_0_1_0;

    ex_erlstats_0_1_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_erlstats";
            version = "0.1.5";
            src = fetchHex {
              pkg = "ex_erlstats";
              version = "0.1.5";
              sha256 =
                "fd6b41a5dc7d0630b2255c15b9a14c93716c5e2374ade421e590aab8db85823b";
            };

            meta = {
              description = ''A simple module to get erlang VM stats'';
              license = stdenv.lib.licenses.asl20;
              homepage = "http://samar.techgaun.com";
            };
          } // packageOverrides)
      ) {};

    ex_erlstats = ex_erlstats_0_1_5;

    ex_fabricators_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_fabricators";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ex_fabricators";
              version = "0.1.0";
              sha256 =
                "edde1017f8a8fc3dbb3915c8791a6d0801f06fbe72f69ec50222dc47930c57d9";
            };

            meta = {
              description = ''Easy way to cook your structs for tests'';

              homepage = "https://github.com/alterego-labs/ex_fabricators";
            };
          } // packageOverrides)
      ) {};

    ex_fabricators = ex_fabricators_0_1_0;

    ex_farmhash_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_farmhash";
            version = "0.1.2";
            src = fetchHex {
              pkg = "ex_farmhash";
              version = "0.1.2";
              sha256 =
                "21d7a6c51277f45a29fae098fad96d563dddfbc12e501232d8f0fb032ae5be50";
            };

            meta = {
              description = ''Google Farmhash for elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/steffenix/ex_farmhash";
            };
          } // packageOverrides)
      ) {};

    ex_farmhash = ex_farmhash_0_1_2;

    ex_form_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          poison_3_1_0,
          tesla_0_5_2
        }:
          buildMix ({
            name = "ex_form";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ex_form";
              version = "0.1.0";
              sha256 =
                "e306cf814638f60887257f3261ac002ef325563ff1780cefa32eccc80773af5f";
            };
            beamDeps  = [ poison_3_1_0 tesla_0_5_2 ];

            meta = {
              description = ''Api wrapper for Typeform'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/msoedov/ex_form";
            };
          } // packageOverrides)
      ) {};

    ex_form = ex_form_0_1_0;

    ex_gecko_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0,
          porcelain_2_0_3
        }:
          buildMix ({
            name = "ex_gecko";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ex_gecko";
              version = "0.1.0";
              sha256 =
                "cc90138f95a0a79b3c0437dfffbb40eebfec8ef0f0c0e20ccab85bc1f9943bc4";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 porcelain_2_0_3 ];

            meta = {
              description = ''Elixir SDK to communicate with Geckoboard`s
                            API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/techgaun/ex_gecko";
            };
          } // packageOverrides)
      ) {};

    ex_gecko = ex_gecko_0_1_0;

    ex_golos_0_7_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          atomic_map_0_9_2,
          gen_stage_0_12_0,
          poison_2_2_0,
          websocket_client_1_2_1
        }:
          buildMix ({
            name = "ex_golos";
            version = "0.7.0";
            src = fetchHex {
              pkg = "ex_golos";
              version = "0.7.0";
              sha256 =
                "14a3a124bdff1d39e48341b66d769133fd7071896553af7437873dec56882365";
            };
            beamDeps  = [
                          atomic_map_0_9_2
                          gen_stage_0_12_0
                          poison_2_2_0
                          websocket_client_1_2_1
                        ];

            meta = {
              description = ''Elixir websockets library and utilities for GOLOS
                            blockchain client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cyberpunk-ventures/ex_golos";
            };
          } // packageOverrides)
      ) {};

    ex_golos = ex_golos_0_7_0;

    ex_google_0_1_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, httpoison_0_9_2 }:
          buildMix ({
            name = "ex_google";
            version = "0.1.4";
            src = fetchHex {
              pkg = "ex_google";
              version = "0.1.4";
              sha256 =
                "db11fa5d196bc7c55b5c9c1a44c04a3aabafb8242f8d52452a509de18d2edb1d";
            };
            beamDeps  = [ httpoison_0_9_2 ];

            meta = {
              description = ''Elixir SDK for Google Cloud APIs'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/techgaun/ex_google";
            };
          } // packageOverrides)
      ) {};

    ex_google = ex_google_0_1_4;

    ex_grok_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_grok";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ex_grok";
              version = "0.1.0";
              sha256 =
                "48785c5a1185ca8bd8b5d59e5c1d2a33bc046972d9d9925b8e34d996591ad43c";
            };

            meta = {
              description = ''Low dependencies ngrok wrapper.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pdawczak/ex_grok";
            };
          } // packageOverrides)
      ) {};

    ex_grok = ex_grok_0_1_0;

    ex_guard_1_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, fs_3_4_0 }:
          buildMix ({
            name = "ex_guard";
            version = "1.2.0";
            src = fetchHex {
              pkg = "ex_guard";
              version = "1.2.0";
              sha256 =
                "e160f575a0aa7315987684963279cdbd0732cc8c97a64de4e8c4aa498d3f719f";
            };
            beamDeps  = [ fs_3_4_0 ];

            meta = {
              longDescription = ''ExGuard automates various tasks by running
                                custom rules whenever file or directories are
                                modified.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/slashmili/ex_guard";
            };
          } // packageOverrides)
      ) {};

    ex_guard = ex_guard_1_2_0;

    ex_hash_ring_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_hash_ring";
            version = "1.0.0";
            src = fetchHex {
              pkg = "ex_hash_ring";
              version = "1.0.0";
              sha256 =
                "e48d55063756cb43988e5360b480533c7e8e6f39e3efc1d1bd34ce04fc0cfece";
            };

            meta = {
              description = ''A fast consistent hash ring implementation in
                            Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hammerandchisel/ex_hash_ring";
            };
          } // packageOverrides)
      ) {};

    ex_hash_ring = ex_hash_ring_1_0_0;

    ex_heroku_client_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          json_hyperschema_client_builder_0_8_1
        }:
          buildMix ({
            name = "ex_heroku_client";
            version = "0.3.0";
            src = fetchHex {
              pkg = "ex_heroku_client";
              version = "0.3.0";
              sha256 =
                "6d7b3703d41fef4e41451bcf408499a6bd7d38462b21d4b964e80f719d2bb892";
            };
            beamDeps  = [ json_hyperschema_client_builder_0_8_1 ];

            meta = {
              description = ''An Elixir client for the Heroku API'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/cantierecreativo/ex_heroku_client";
            };
          } // packageOverrides)
      ) {};

    ex_heroku_client = ex_heroku_client_0_3_0;

    ex_hl7_0_4_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_hl7";
            version = "0.4.1";
            src = fetchHex {
              pkg = "ex_hl7";
              version = "0.4.1";
              sha256 =
                "3f8044728cb08f50068758f552495425f77b2ca24381796c0314a37836166d60";
            };

            meta = {
              description = ''HL7 Parser for Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/jcomellas/ex_hl7";
            };
          } // packageOverrides)
      ) {};

    ex_hl7 = ex_hl7_0_4_1;

    ex_hubic_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          calendar_0_13_2,
          floki_0_9_0,
          httpoison_0_8_3,
          morph_0_1_0,
          og_0_2_0,
          poison_1_0_2,
          secure_random_0_5_1
        }:
          buildMix ({
            name = "ex_hubic";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ex_hubic";
              version = "0.1.0";
              sha256 =
                "f7252ec98ef7c99bbd75eb4974930b1932c00ef359f3593dcb320f63c9428cce";
            };
            beamDeps  = [
                          calendar_0_13_2
                          floki_0_9_0
                          httpoison_0_8_3
                          morph_0_1_0
                          og_0_2_0
                          poison_1_0_2
                          secure_random_0_5_1
                        ];

            meta = {
              description = ''An elixir client library for the HUBIC API -
                            https://api.hubic.com/.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/stephenmoloney/ex_hubic";
            };
          } // packageOverrides)
      ) {};

    ex_hubic = ex_hubic_0_1_0;

    ex_ical_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, timex_3_0_5 }:
          buildMix ({
            name = "ex_ical";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ex_ical";
              version = "0.1.0";
              sha256 =
                "a36b252d42ac99f516895ef2fe0c2f71f742cd38a95b2706123d3de727f5698d";
            };
            beamDeps  = [ timex_3_0_5 ];

            meta = {
              description = ''ICalendar parser.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/fazibear/ex_ical";
            };
          } // packageOverrides)
      ) {};

    ex_ical = ex_ical_0_1_0;

    ex_image_info_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_image_info";
            version = "0.1.1";
            src = fetchHex {
              pkg = "ex_image_info";
              version = "0.1.1";
              sha256 =
                "54fafc5b40db394795ba4bd3e39f4de4bf78cf9a31e04363ad1abf9c4ecffa72";
            };

            meta = {
              longDescription = ''ExImageInfo is an Elixir library to parse
                                images (binaries) and get the dimensions (size),
                                detected mime-type and overall validity for a
                                set of image formats.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rNoz/ex_image_info";
            };
          } // packageOverrides)
      ) {};

    ex_image_info = ex_image_info_0_1_1;

    ex_iss_1_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_8_3,
          poison_1_5_2
        }:
          buildMix ({
            name = "ex_iss";
            version = "1.0.0";
            src = fetchHex {
              pkg = "ex_iss";
              version = "1.0.0";
              sha256 =
                "8b2b2eebbd75593e814e712555c7f69138864317cf2f0093a82ca305138baa83";
            };
            beamDeps  = [ httpoison_0_8_3 poison_1_5_2 ];

            meta = {
              longDescription = ''This package is for interfacing with the Open
                                Notify API to information such as the ISS`s
                                current location, crew, and when it will pass
                                over a location.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/cryptobird/ex_iss";
            };
          } // packageOverrides)
      ) {};

    ex_iss = ex_iss_1_0_0;

    ex_jira_0_0_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_3_0_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "ex_jira";
            version = "0.0.3";
            src = fetchHex {
              pkg = "ex_jira";
              version = "0.0.3";
              sha256 =
                "8b15af54a55b289589c4936571b285f0ae4efbc0708527863e461251198da06c";
            };
            beamDeps  = [ httpotion_3_0_2 poison_3_1_0 ];

            meta = {
              description = ''Elixir wrapper for the JIRA REST API'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/TheFirstAvenger/elixir-ex_jira.git";
            };
          } // packageOverrides)
      ) {};

    ex_jira = ex_jira_0_0_3;

    ex_json_logger_0_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          plug_1_3_5,
          poison_3_1_0
        }:
          buildMix ({
            name = "ex_json_logger";
            version = "0.1.2";
            src = fetchHex {
              pkg = "ex_json_logger";
              version = "0.1.2";
              sha256 =
                "af5771a3b54cc2606e9d35ab7220857f807baf28284a8458cd041c4ec18891d6";
            };
            beamDeps  = [ plug_1_3_5 poison_3_1_0 ];

            meta = {
              description = ''JSON formatter for Loggers console backend, Plug
                            and Ecto formatters included.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rentpath/ex_json_logger";
            };
          } // packageOverrides)
      ) {};

    ex_json_logger = ex_json_logger_0_1_2;

    ex_json_schema_0_5_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_json_schema";
            version = "0.5.5";
            src = fetchHex {
              pkg = "ex_json_schema";
              version = "0.5.5";
              sha256 =
                "a39970b522ec866ae38a3fe89a1a235f7cf72bac6ae4bdeed077e6f3ee4b9265";
            };

            meta = {
              longDescription = ''A JSON Schema validator with full support for
                                the draft 4 specification and zero
                                dependencies.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jonasschmidt/ex_json_schema";
            };
          } // packageOverrides)
      ) {};

    ex_json_schema = ex_json_schema_0_5_5;

    ex_junk_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_junk";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ex_junk";
              version = "0.1.0";
              sha256 =
                "53d6fb0d9bd8036073d499a57509a53ff48717c95504704977ab9c0cd969074c";
            };

            meta = {
              longDescription = ''Junk is a module for generating Junk data in
                                your tests. For when you don`t care about the
                                content, just that it has the right `shape`.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/felix-starman/ex_junk";
            };
          } // packageOverrides)
      ) {};

    ex_junk = ex_junk_0_1_0;

    ex_kafka_logger_0_2_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          kafka_ex_0_6_5,
          plug_1_3_5,
          poison_2_2_0
        }:
          buildMix ({
            name = "ex_kafka_logger";
            version = "0.2.1";
            src = fetchHex {
              pkg = "ex_kafka_logger";
              version = "0.2.1";
              sha256 =
                "fbef5f612d6d9d4d00d0dc0e53cd32dc0b5afda930550162bd04a4a609d0e768";
            };
            beamDeps  = [ kafka_ex_0_6_5 plug_1_3_5 poison_2_2_0 ];

            meta = {
              description = ''Elixir logger that serializes to JSON and publish
                            it to Apache Kafka'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jeffhsta/ExKafkaLogger";
            };
          } // packageOverrides)
      ) {};

    ex_kafka_logger = ex_kafka_logger_0_2_1;

    ex_keypair_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_keypair";
            version = "0.0.3";
            src = fetchHex {
              pkg = "ex_keypair";
              version = "0.0.3";
              sha256 =
                "bbfad1089b7589df578ac8d58b911cf0715947f524349255f044a56a95950c23";
            };

            meta = {
              description = ''RSA key pair generation in Elixir, using OpenSSL
                            ports.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/elefthei/ex_keypair";
            };
          } // packageOverrides)
      ) {};

    ex_keypair = ex_keypair_0_0_3;

    ex_lcd_0_4_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, elixir_ale_0_6_2 }:
          buildMix ({
            name = "ex_lcd";
            version = "0.4.0";
            src = fetchHex {
              pkg = "ex_lcd";
              version = "0.4.0";
              sha256 =
                "23558761386c12da4dc0389d78a8f0faef3bc4f9e628d113300085cbfd9af730";
            };
            beamDeps  = [ elixir_ale_0_6_2 ];

            meta = {
              longDescription = ''Hex package to use character matrix LCD
                                displays including HD44780 in your Elixir/nerves
                                projects. Uses elixir_ale for IO.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/cthree/ex_lcd";
            };
          } // packageOverrides)
      ) {};

    ex_lcd = ex_lcd_0_4_0;

    ex_levenshtein_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_levenshtein";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ex_levenshtein";
              version = "0.1.0";
              sha256 =
                "ee70b0e8f61994e5f825651f57303c0dc769ae955639651ea6c005e28fa48de7";
            };

            meta = {
              description = ''Calc Levenshtein distance'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/parallel588/ex_levenshtein";
            };
          } // packageOverrides)
      ) {};

    ex_levenshtein = ex_levenshtein_0_1_0;

    ex_lingua_sentence_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, exactor_2_2_3 }:
          buildMix ({
            name = "ex_lingua_sentence";
            version = "0.1.1";
            src = fetchHex {
              pkg = "ex_lingua_sentence";
              version = "0.1.1";
              sha256 =
                "120aad5b7b0e3a39ecf4cdf648fff07ea4bfaf988b65d4c7e88d6876e16dc232";
            };
            beamDeps  = [ exactor_2_2_3 ];

            meta = {
              longDescription = ''Separates a paragraph into sentences in
                                several languages. A port of perl`s
                                Lingua::Sentence'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/stephen-riley/ex_lingua_sentence";
            };
          } // packageOverrides)
      ) {};

    ex_lingua_sentence = ex_lingua_sentence_0_1_1;

    ex_link_header_0_0_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_link_header";
            version = "0.0.5";
            src = fetchHex {
              pkg = "ex_link_header";
              version = "0.0.5";
              sha256 =
                "d3cd6b305cfea7db5ce9876e9a9f10f842d53241a966152be43ad3c60c5a13fe";
            };

            meta = {
              description = ''Parse HTTP link headers in Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/simonrand/ex_link_header";
            };
          } // packageOverrides)
      ) {};

    ex_link_header = ex_link_header_0_0_5;

    ex_loglite_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_loglite";
            version = "0.1.1";
            src = fetchHex {
              pkg = "ex_loglite";
              version = "0.1.1";
              sha256 =
                "8726596646524208a15dc44351eed7b1beeacd051911da9e91455ea7cce08ce8";
            };

            meta = {
              description = ''An Elixir Logger Backend for EVE LogLite.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ElaWorkshop/ex_loglite";
            };
          } // packageOverrides)
      ) {};

    ex_loglite = ex_loglite_0_1_1;

    ex_machina_2_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ecto_2_1_4 }:
          buildMix ({
            name = "ex_machina";
            version = "2.0.0";
            src = fetchHex {
              pkg = "ex_machina";
              version = "2.0.0";
              sha256 =
                "fa240a581a08acbda2f40ae9c1e44502a57a22c486b0605cebc3a0e5ce50c271";
            };
            beamDeps  = [ ecto_2_1_4 ];

            meta = {
              description = ''A factory library by the creators of
                            FactoryGirl'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/thoughtbot/ex_machina";
            };
          } // packageOverrides)
      ) {};

    ex_machina = ex_machina_2_0_0;

    ex_mark2pdf_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, earmark_0_1_19 }:
          buildMix ({
            name = "ex_mark2pdf";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ex_mark2pdf";
              version = "0.1.0";
              sha256 =
                "d1458c9b01bc53b9c365d4d12ac8187b09e06f02667639d4a63c4543427dfb1d";
            };
            beamDeps  = [ earmark_0_1_19 ];

            meta = {
              description = ''Generate a PDF from Markdown file.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/darui00kara/ex_mark2pdf";
            };
          } // packageOverrides)
      ) {};

    ex_mark2pdf = ex_mark2pdf_0_1_0;

    ex_markdown_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_markdown";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ex_markdown";
              version = "0.1.0";
              sha256 =
                "727e8d048341e046af49de10163ee9b36bb77c46618154cbad880370f47a9946";
            };

            meta = {
              description = ''A few sentences (a paragraph) describing the
                            project.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/gialib/ex_markdown";
            };
          } // packageOverrides)
      ) {};

    ex_markdown = ex_markdown_0_1_0;

    ex_marshal_0_0_7 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, decimal_1_3_1 }:
          buildMix ({
            name = "ex_marshal";
            version = "0.0.7";
            src = fetchHex {
              pkg = "ex_marshal";
              version = "0.0.7";
              sha256 =
                "23b3dae5a95158d3fe6ce04c38c9e999c7360c06917934ad492e9af0591a1cc8";
            };
            beamDeps  = [ decimal_1_3_1 ];

            meta = {
              description = ''Ruby Marshal format implemented in Elixir.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/gaynetdinov/ex_marshal";
            };
          } // packageOverrides)
      ) {};

    ex_marshal = ex_marshal_0_0_7;

    ex_matchers_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_matchers";
            version = "0.1.2";
            src = fetchHex {
              pkg = "ex_matchers";
              version = "0.1.2";
              sha256 =
                "4c4c24427db398c5f0e5d021f124df32eda31eb81daf1096b0053fabb5ddcb84";
            };

            meta = {
              description = ''Matchers for ExUnit assertions'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/10Pines/ex_matchers";
            };
          } // packageOverrides)
      ) {};

    ex_matchers = ex_matchers_0_1_2;

    ex_microsoftbot_1_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_3_0_2,
          jose_1_8_4,
          poison_2_2_0,
          timex_3_1_15,
          tzdata_0_5_12
        }:
          buildMix ({
            name = "ex_microsoftbot";
            version = "1.0.0";
            src = fetchHex {
              pkg = "ex_microsoftbot";
              version = "1.0.0";
              sha256 =
                "7e463baba3b3b99c2f05bf1628f0d51115119cc335b660e2c064f7f4d0b858f7";
            };
            beamDeps  = [
                          httpotion_3_0_2
                          jose_1_8_4
                          poison_2_2_0
                          timex_3_1_15
                          tzdata_0_5_12
                        ];

            meta = {
              description = ''This library provides Elixir API wrapper for the
                            Microsoft Bot Framework.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zabirauf/ex_microsoftbot";
            };
          } // packageOverrides)
      ) {};

    ex_microsoftbot = ex_microsoftbot_1_0_0;

    ex_minimatch_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ex_brace_expansion_0_0_2
        }:
          buildMix ({
            name = "ex_minimatch";
            version = "0.0.1";
            src = fetchHex {
              pkg = "ex_minimatch";
              version = "0.0.1";
              sha256 =
                "3255bb8496635d3ef5d86ec6829958a3573ff730ca01534b0fead9c2e3af7de4";
            };
            beamDeps  = [ ex_brace_expansion_0_0_2 ];

            meta = {
              longDescription = ''Globbing paths without walking the tree!
                                Elixir and Erlang provide `wildcard` functions
                                in the stdlib. But these will walk the directory
                                tree. If you simply want to test whether a file
                                path matches a glob, ExMinimatch is for you. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gniquil/ex_minimatch";
            };
          } // packageOverrides)
      ) {};

    ex_minimatch = ex_minimatch_0_0_1;

    ex_mock_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, meck_0_8_4 }:
          buildMix ({
            name = "ex_mock";
            version = "0.1.1";
            src = fetchHex {
              pkg = "ex_mock";
              version = "0.1.1";
              sha256 =
                "3e1d52efaee5adecc49cb96c7d75c4382e22abedee4e3e4ed849b54f45f6baab";
            };
            beamDeps  = [ meck_0_8_4 ];

            meta = {
              longDescription = ''A mocking libary for the Elixir language. We
                                use the Erlang meck library to provide module
                                mocking functionality for Elixir. It uses macros
                                in Elixir to expose the functionality in a
                                convenient manner for integrating in Elixir
                                tests.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gialib/ex_mock";
            };
          } // packageOverrides)
      ) {};

    ex_mock = ex_mock_0_1_1;

    ex_modbus_0_1_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, nerves_uart_0_1_2
        }:
          buildMix ({
            name = "ex_modbus";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ex_modbus";
              version = "0.1.0";
              sha256 =
                "b473bdb4a8c4246fcd2b2cf813a3e86b967e5c0c27a7817d7861e315045fe02e";
            };
            beamDeps  = [ nerves_uart_0_1_2 ];

            meta = {
              description = ''An Elixir Modbus TCP/RTU client
                            implementation.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hirschenberger/ex_modbus";
            };
          } // packageOverrides)
      ) {};

    ex_modbus = ex_modbus_0_1_0;

    ex_money_0_1_5 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_4,
          ex_cldr_0_4_0
        }:
          buildMix ({
            name = "ex_money";
            version = "0.1.5";
            src = fetchHex {
              pkg = "ex_money";
              version = "0.1.5";
              sha256 =
                "625d3703aee756613490bdb384fdcd2ccd3e1b4170b0dd69ddbd18050d8fa950";
            };
            beamDeps  = [ ecto_2_1_4 ex_cldr_0_4_0 ];

            meta = {
              description = ''Money functions for the serialization of and
                            operations on a money data type.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/kipcole9/money";
            };
          } // packageOverrides)
      ) {};

    ex_money = ex_money_0_1_5;

    ex_multihash_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, monad_1_0_5 }:
          buildMix ({
            name = "ex_multihash";
            version = "1.0.0";
            src = fetchHex {
              pkg = "ex_multihash";
              version = "1.0.0";
              sha256 =
                "d31d4794bfbf7ea8a06e095fb8753466cd8532ad4f4c0c6ea60077c77818fbaa";
            };
            beamDeps  = [ monad_1_0_5 ];

            meta = {
              description = ''This library is the Multihash implementation in
                            Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/multiformats/ex_multihash";
            };
          } // packageOverrides)
      ) {};

    ex_multihash = ex_multihash_1_0_0;

    ex_mustang_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ex_google_0_1_4,
          ex_pwned_0_1_1,
          floki_0_11_0,
          hedwig_slack_1_0_0,
          quantum_1_8_1,
          tentacat_0_6_2,
          timex_3_1_15
        }:
          buildMix ({
            name = "ex_mustang";
            version = "0.2.0";
            src = fetchHex {
              pkg = "ex_mustang";
              version = "0.2.0";
              sha256 =
                "ce12ae2d5a3f312e0dae0acae7410aaea9e9365e45756be7427e0c1a2fe00fb5";
            };
            beamDeps  = [
                          ex_google_0_1_4
                          ex_pwned_0_1_1
                          floki_0_11_0
                          hedwig_slack_1_0_0
                          quantum_1_8_1
                          tentacat_0_6_2
                          timex_3_1_15
                        ];

            meta = {
              description = ''A simple, clueless bot and collection of
                            responders'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/techgaun/ex_mustang";
            };
          } // packageOverrides)
      ) {};

    ex_mustang = ex_mustang_0_2_0;

    ex_nexmo_0_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "ex_nexmo";
            version = "0.1.2";
            src = fetchHex {
              pkg = "ex_nexmo";
              version = "0.1.2";
              sha256 =
                "078eb818397659d438450699e0b282edb6c5abaf2a160d2ca1c24a1c12dfb8f3";
            };
            beamDeps  = [ httpoison_0_11_2 poison_2_2_0 ];

            meta = {
              description = ''Elixir Nexmo API Client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/KindyNowApp/ex_nexmo";
            };
          } // packageOverrides)
      ) {};

    ex_nexmo = ex_nexmo_0_1_2;

    ex_ngrok_0_3_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "ex_ngrok";
            version = "0.3.2";
            src = fetchHex {
              pkg = "ex_ngrok";
              version = "0.3.2";
              sha256 =
                "5a29a010b7a872c0a708ba805c4bd8b0392b4da9c43ed65c4480f021f7566e04";
            };
            beamDeps  = [ httpoison_0_11_2 poison_2_2_0 ];

            meta = {
              longDescription = ''A wrapper around Ngrok providing a secure
                                tunnel to localhost for demoing your
                                Elixir/Phoenix web application or testing
                                webhook integrations.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/joshuafleck/ex_ngrok";
            };
          } // packageOverrides)
      ) {};

    ex_ngrok = ex_ngrok_0_3_2;

    ex_nrel_0_3_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          floki_0_11_0,
          httpoison_0_5_0
        }:
          buildMix ({
            name = "ex_nrel";
            version = "0.3.1";
            src = fetchHex {
              pkg = "ex_nrel";
              version = "0.3.1";
              sha256 =
                "7f46868a45ee79e3feb825537499109904328cbaeb645dc8411c0798e25c05b1";
            };
            beamDeps  = [ floki_0_11_0 httpoison_0_5_0 ];

            meta = {
              description = ''A NREL api client for Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/techgaun/ex_nrel";
            };
          } // packageOverrides)
      ) {};

    ex_nrel = ex_nrel_0_3_1;

    ex_oauth2_provider_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_4,
          plug_1_1_7,
          poison_1_0_2,
          postgrex_1_0_0_rc_1
        }:
          buildMix ({
            name = "ex_oauth2_provider";
            version = "0.2.0";
            src = fetchHex {
              pkg = "ex_oauth2_provider";
              version = "0.2.0";
              sha256 =
                "94b73d06f8834ad4f0e95f50bf3d6e7c8d9782d23d8632ce302bcfd3dcf7e726";
            };
            beamDeps  = [
                          ecto_2_1_4 plug_1_1_7 poison_1_0_2 postgrex_1_0_0_rc_1
                        ];

            meta = {
              description = ''No brainer OAuth 2.0 provider'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/danschultzer/ex_oauth2_provider";
            };
          } // packageOverrides)
      ) {};

    ex_oauth2_provider = ex_oauth2_provider_0_2_0;

    ex_optional_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_optional";
            version = "0.1.2";
            src = fetchHex {
              pkg = "ex_optional";
              version = "0.1.2";
              sha256 =
                "b7d25284fd73ad77111c3f641ef7bd85b48b8728fa6d80bb611533936d11b713";
            };

            meta = {
              description = ''A set of functions to easily use \"Optional\"
                            types in Elixir'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/stephen-riley/ex_lingua_sentence";
            };
          } // packageOverrides)
      ) {};

    ex_optional = ex_optional_0_1_2;

    ex_orient_1_5_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          marco_polo_0_2_2,
          poison_1_0_2,
          poolboy_1_2_1
        }:
          buildMix ({
            name = "ex_orient";
            version = "1.5.1";
            src = fetchHex {
              pkg = "ex_orient";
              version = "1.5.1";
              sha256 =
                "0b4cc74d864bb00ee964bf53f9b6b2d441836ce01757ad9a8fb3754b07babb08";
            };
            beamDeps  = [ marco_polo_0_2_2 poison_1_0_2 poolboy_1_2_1 ];

            meta = {
              longDescription = ''OrientDB query builder that provides nice
                                syntax and connection pooling. Uses MarcoPolo
                                under the hood to run commands.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Remesh/ex_orient/";
            };
          } // packageOverrides)
      ) {};

    ex_orient = ex_orient_1_5_1;

    ex_ovh_0_3_6 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          calendar_0_17_2,
          floki_0_17_2,
          httpipe_adapters_hackney_0_11_0,
          poison_1_0_2
        }:
          buildMix ({
            name = "ex_ovh";
            version = "0.3.6";
            src = fetchHex {
              pkg = "ex_ovh";
              version = "0.3.6";
              sha256 =
                "14c2ccbf9432bac3762293081030fe4882b816a82220501d21abef313ef1d8d5";
            };
            beamDeps  = [
                          calendar_0_17_2
                          floki_0_17_2
                          httpipe_adapters_hackney_0_11_0
                          poison_1_0_2
                        ];

            meta = {
              description = ''An elixir client library for the OVH API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/stephenmoloney/ex_ovh";
            };
          } // packageOverrides)
      ) {};

    ex_ovh = ex_ovh_0_3_6;

    ex_parametarized_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_parametarized";
            version = "1.0.0";
            src = fetchHex {
              pkg = "ex_parametarized";
              version = "1.0.0";
              sha256 =
                "daa04087cc41608f1604f2cc52dfe3e3c3ee4612c3b6091d7b6025d10d79f31a";
            };

            meta = {
              description = ''Simple macro for parametarized testing'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/KazuCocoa/ex_parametarized";
            };
          } // packageOverrides)
      ) {};

    ex_parametarized = ex_parametarized_1_0_0;

    ex_parameterized_1_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_parameterized";
            version = "1.2.0";
            src = fetchHex {
              pkg = "ex_parameterized";
              version = "1.2.0";
              sha256 =
                "738481f33b9ec108f4eb2ba33469a44c559e6101ed907319a9d53dacdb94d2a2";
            };

            meta = {
              description = ''Simple macro for parameterized testing'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/KazuCocoa/ex_parameterized";
            };
          } // packageOverrides)
      ) {};

    ex_parameterized = ex_parameterized_1_2_0;

    ex_parsec_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, monad_1_0_5 }:
          buildMix ({
            name = "ex_parsec";
            version = "0.2.1";
            src = fetchHex {
              pkg = "ex_parsec";
              version = "0.2.1";
              sha256 =
                "1564d820e0b8b265a1525454aa9914edc15b6165ae74ffa31008686cbbad67da";
            };
            beamDeps  = [ monad_1_0_5 ];

            meta = {
              description = ''A parser combinator library inspired by
                            Parsec.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/alexrp/ex_parsec";
            };
          } // packageOverrides)
      ) {};

    ex_parsec = ex_parsec_0_2_1;

    ex_phone_number_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, sweet_xml_0_6_5 }:
          buildMix ({
            name = "ex_phone_number";
            version = "0.1.1";
            src = fetchHex {
              pkg = "ex_phone_number";
              version = "0.1.1";
              sha256 =
                "27628565dad81553b0af1fdcc433331eb5afd8f6845964a27ee40c8641d95e48";
            };
            beamDeps  = [ sweet_xml_0_6_5 ];

            meta = {
              longDescription = ''A library for parsing, formatting, and
                                validating international phone numbers. Based on
                                Google`s libphonenumber.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/socialpaymentsbv/ex_phone_number";
            };
          } // packageOverrides)
      ) {};

    ex_phone_number = ex_phone_number_0_1_1;

    ex_pke_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_1_0_2 }:
          buildMix ({
            name = "ex_pke";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ex_pke";
              version = "0.1.0";
              sha256 =
                "c0134ad74aed7f93709a5eea83c7c2b2358c34f34cde56530ba92722ddc60140";
            };
            beamDeps  = [ poison_1_0_2 ];

            meta = {
              description = ''Public Key Encryption Helper tasks.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/portnet/ex_pke";
            };
          } // packageOverrides)
      ) {};

    ex_pke = ex_pke_0_1_0;

    ex_pool_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_pool";
            version = "0.1.1";
            src = fetchHex {
              pkg = "ex_pool";
              version = "0.1.1";
              sha256 =
                "0e2a945acefa067f902dbfa6cb683884838099d6be496dc43cb7dccf31df978d";
            };

            meta = {
              description = ''A generic pooling library for Elixir'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/jcabotc/ex_pool";
            };
          } // packageOverrides)
      ) {};

    ex_pool = ex_pool_0_1_1;

    ex_postmark_1_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ex_doc_0_16_1,
          hackney_1_8_6,
          poison_3_1_0
        }:
          buildMix ({
            name = "ex_postmark";
            version = "1.3.0";
            src = fetchHex {
              pkg = "ex_postmark";
              version = "1.3.0";
              sha256 =
                "eaafe4a24a81e6c8c95806e7dc584cd994731701913e59a810c6ab9bd4cea725";
            };
            beamDeps  = [ ex_doc_0_16_1 hackney_1_8_6 poison_3_1_0 ];

            meta = {
              description = ''Postmark email adapter for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/KamilLelonek/ex_postmark";
            };
          } // packageOverrides)
      ) {};

    ex_postmark = ex_postmark_1_3_0;

    ex_prima_toolbox_0_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ex_cli_0_1_2 }:
          buildMix ({
            name = "ex_prima_toolbox";
            version = "0.0.4";
            src = fetchHex {
              pkg = "ex_prima_toolbox";
              version = "0.0.4";
              sha256 =
                "ce43316f0aee197253bad6c63a179e829f85a794e464e699bcc3facb1678c860";
            };
            beamDeps  = [ ex_cli_0_1_2 ];

            meta = {
              description = ''elixir toolbox for prima.it'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/primait/ex_toolbox";
            };
          } // packageOverrides)
      ) {};

    ex_prima_toolbox = ex_prima_toolbox_0_0_4;

    ex_prometheus_io_0_0_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_1_0_2 }:
          buildMix ({
            name = "ex_prometheus_io";
            version = "0.0.5";
            src = fetchHex {
              pkg = "ex_prometheus_io";
              version = "0.0.5";
              sha256 =
                "c7d9a7bb30b34b00630817959ca9938dad41b272389669c0bb01a46f66637789";
            };
            beamDeps  = [ poison_1_0_2 ];

            meta = {
              description = ''Prometheus.io Elixir client API library'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/kennyballou/ex_prometheus_io";
            };
          } // packageOverrides)
      ) {};

    ex_prometheus_io = ex_prometheus_io_0_0_5;

    ex_propisju_0_1_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_propisju";
            version = "0.1.4";
            src = fetchHex {
              pkg = "ex_propisju";
              version = "0.1.4";
              sha256 =
                "3ed9564368c144299f76134766ffb2b143c4a24939a808857db25c29ff2fb280";
            };

            meta = {
              description = ''Copypast gem ru_propisju to elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sergey-chechaev/ex_propisju";
            };
          } // packageOverrides)
      ) {};

    ex_propisju = ex_propisju_0_1_4;

    ex_pwned_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_5_0,
          poison_1_0_2
        }:
          buildMix ({
            name = "ex_pwned";
            version = "0.1.1";
            src = fetchHex {
              pkg = "ex_pwned";
              version = "0.1.1";
              sha256 =
                "d1cb51ce907395bd8a4ce215fd3268692e64cfd1297dbcf0a5143b92a11cd05f";
            };
            beamDeps  = [ httpoison_0_5_0 poison_1_0_2 ];

            meta = {
              description = ''Elixir client for haveibeenpwned.com'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/techgaun/ex_pwned";
            };
          } // packageOverrides)
      ) {};

    ex_pwned = ex_pwned_0_1_1;

    ex_queb_0_2_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ecto_2_1_4 }:
          buildMix ({
            name = "ex_queb";
            version = "0.2.2";
            src = fetchHex {
              pkg = "ex_queb";
              version = "0.2.2";
              sha256 =
                "8d07ed798c8a94d75e34ebf4c198eeb64789dcf534ac12a618250c9ce8ea207a";
            };
            beamDeps  = [ ecto_2_1_4 ];

            meta = {
              description = ''Ecto Filter Query Builder'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/E-MetroTel/ex_queb";
            };
          } // packageOverrides)
      ) {};

    ex_queb_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ecto_2_1_4 }:
          buildMix ({
            name = "ex_queb";
            version = "1.0.0";
            src = fetchHex {
              pkg = "ex_queb";
              version = "1.0.0";
              sha256 =
                "4ce5197ba7072394d3c9804e4cd71a60d4d7892069cd3ac09c2a3d7dc87d60ec";
            };
            beamDeps  = [ ecto_2_1_4 ];

            meta = {
              description = ''Ecto Filter Query Builder'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/E-MetroTel/ex_queb";
            };
          } // packageOverrides)
      ) {};

    ex_queb = ex_queb_1_0_0;

    ex_queue_0_4_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_queue";
            version = "0.4.5";
            src = fetchHex {
              pkg = "ex_queue";
              version = "0.4.5";
              sha256 =
                "9d32415263638a12e24a7e77670f06eeca68197ef0f8dd8127c8a5d4654bd43e";
            };

            meta = {
              description = ''A FIFO queue wrapped around GenServer.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/enilsen16/ex_queue";
            };
          } // packageOverrides)
      ) {};

    ex_queue = ex_queue_0_4_5;

    ex_rated_1_2_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ex2ms_1_4_0 }:
          buildMix ({
            name = "ex_rated";
            version = "1.2.2";
            src = fetchHex {
              pkg = "ex_rated";
              version = "1.2.2";
              sha256 =
                "65f7e9aaba3ba5bf8995b34a29c9572652b051cfdd7988e5f9b7ea329bb71ca1";
            };
            beamDeps  = [ ex2ms_1_4_0 ];

            meta = {
              longDescription = ''ExRated, the OTP GenServer with the naughty
                                name that allows you to rate-limit calls to any
                                service that requires it. For example,
                                rate-limit calls to your favorite API which
                                requires no more than `limit` API calls within a
                                `scale` milliseconds time window.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/grempe/ex_rated";
            };
          } // packageOverrides)
      ) {};

    ex_rated_1_3_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ex2ms_1_5_0 }:
          buildMix ({
            name = "ex_rated";
            version = "1.3.1";
            src = fetchHex {
              pkg = "ex_rated";
              version = "1.3.1";
              sha256 =
                "24e863783609f2fde4102e6f7e4232b7d07182cc94b33afed89c525ba9aaf030";
            };
            beamDeps  = [ ex2ms_1_5_0 ];

            meta = {
              longDescription = ''ExRated, the OTP GenServer with the naughty
                                name that allows you to rate-limit calls to any
                                service that requires it. For example,
                                rate-limit calls to your favorite API which
                                requires no more than `limit` API calls within a
                                `scale` milliseconds time window.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/grempe/ex_rated";
            };
          } // packageOverrides)
      ) {};

    ex_rated = ex_rated_1_3_1;

    ex_raycast_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, floki_0_11_0 }:
          buildMix ({
            name = "ex_raycast";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ex_raycast";
              version = "0.1.0";
              sha256 =
                "e8b7d029546b28b6c8c0c26c6097ebacf9be11b3be7a8e6e985ddbcec9816a95";
            };
            beamDeps  = [ floki_0_11_0 ];

            meta = {
              description = ''A simple raycast algorithm implementation in
                            Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/techgaun/ex_raycast";
            };
          } // packageOverrides)
      ) {};

    ex_raycast = ex_raycast_0_1_0;

    ex_redis_pool_0_2_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          eredis_1_0_8,
          poolboy_1_5_1
        }:
          buildMix ({
            name = "ex_redis_pool";
            version = "0.2.1";
            src = fetchHex {
              pkg = "ex_redis_pool";
              version = "0.2.1";
              sha256 =
                "997af1bbdc3c61e00f63c4559a5e87c1ac848da093660130c0c5f11f85b8520e";
            };
            beamDeps  = [ eredis_1_0_8 poolboy_1_5_1 ];

            meta = {
              longDescription = ''Elixir Redis client with sync/async
                                connection pools, sharding, and one-time
                                hostname resolution.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ntrepid8/ex_redis_pool";
            };
          } // packageOverrides)
      ) {};

    ex_redis_pool = ex_redis_pool_0_2_1;

    ex_rfc3966_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ex_abnf_0_3_0 }:
          buildMix ({
            name = "ex_rfc3966";
            version = "0.3.0";
            src = fetchHex {
              pkg = "ex_rfc3966";
              version = "0.3.0";
              sha256 =
                "e9eaff0435eea3c2f45251d3effd6f7788ae91b956398c00c74a1dc46c13701f";
            };
            beamDeps  = [ ex_abnf_0_3_0 ];

            meta = {
              longDescription = ''A \"tel\" URI parser trying to be strictly
                                compatible with RFC3966. Uses official ABNF
                                grammar and ex_abnf as interpreter.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/marcelog/ex_rfc3966";
            };
          } // packageOverrides)
      ) {};

    ex_rfc3966 = ex_rfc3966_0_3_0;

    ex_rfc3986_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ex_abnf_0_3_0 }:
          buildMix ({
            name = "ex_rfc3986";
            version = "0.3.0";
            src = fetchHex {
              pkg = "ex_rfc3986";
              version = "0.3.0";
              sha256 =
                "addf8f1e0949c69451ba4d1f2a233194e9b08d358c277a9489a32435db686b8c";
            };
            beamDeps  = [ ex_abnf_0_3_0 ];

            meta = {
              longDescription = ''An URI parser trying to be strictly
                                compatible with RFC3986. Uses official ABNF
                                grammar and ex_abnf as interpreter.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/marcelog/ex_rfc3986";
            };
          } // packageOverrides)
      ) {};

    ex_rfc3986 = ex_rfc3986_0_3_0;

    ex_riak_cs_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_9_2,
          sweet_xml_0_6_5,
          timex_3_1_15
        }:
          buildMix ({
            name = "ex_riak_cs";
            version = "0.1.1";
            src = fetchHex {
              pkg = "ex_riak_cs";
              version = "0.1.1";
              sha256 =
                "7f2add21bf3af4232b0457bbec4525d4160203b8a8dec403e7d1368c8cc21f39";
            };
            beamDeps  = [ httpoison_0_9_2 sweet_xml_0_6_5 timex_3_1_15 ];

            meta = {
              description = ''Riak CS API wrapper for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ayrat555";
            };
          } // packageOverrides)
      ) {};

    ex_riak_cs = ex_riak_cs_0_1_1;

    ex_rollbar_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_3_1_0 }:
          buildMix ({
            name = "ex_rollbar";
            version = "0.1.2";
            src = fetchHex {
              pkg = "ex_rollbar";
              version = "0.1.2";
              sha256 =
                "33070329cf59d4387cabcf39cd3cdd128e81d529674063cf38f70fcaa99ad135";
            };
            beamDeps  = [ poison_3_1_0 ];

            meta = {
              description = ''A Rollbar Client for working in non serverside
                            environments.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ConnorRigby/ex_rollbar";
            };
          } // packageOverrides)
      ) {};

    ex_rollbar = ex_rollbar_0_1_2;

    ex_server_timings_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, plug_1_3_5 }:
          buildMix ({
            name = "ex_server_timings";
            version = "0.1.1";
            src = fetchHex {
              pkg = "ex_server_timings";
              version = "0.1.1";
              sha256 =
                "b7c61728be14455224cd4a2ac8db229f3ce9f8388c2e1126509a5ebe9544d2aa";
            };
            beamDeps  = [ plug_1_3_5 ];

            meta = {
              description = ''Plug Elixir performance in your requests'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ThomasBracher/ex_server_timings";
            };
          } // packageOverrides)
      ) {};

    ex_server_timings = ex_server_timings_0_1_1;

    ex_shards_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ex2ms_1_5_0,
          shards_0_4_3
        }:
          buildMix ({
            name = "ex_shards";
            version = "0.2.0";
            src = fetchHex {
              pkg = "ex_shards";
              version = "0.2.0";
              sha256 =
                "6a9e8c1a83a613247b62c8db5892809591d6fa32b1947bc2a5f519fda708c226";
            };
            beamDeps  = [ ex2ms_1_5_0 shards_0_4_3 ];

            meta = {
              description = ''ExShards – Elixir Wrapper for cabol/shards'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cabol/ex_shards";
            };
          } // packageOverrides)
      ) {};

    ex_shards = ex_shards_0_2_0;

    ex_sharp_0_0_6 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exprotobuf_1_2_7,
          porcelain_2_0_3
        }:
          buildMix ({
            name = "ex_sharp";
            version = "0.0.6";
            src = fetchHex {
              pkg = "ex_sharp";
              version = "0.0.6";
              sha256 =
                "05ad9969ebb72d7a4c6e56625dc4a217a1ca864e80487c971ee263c705e0cd67";
            };
            beamDeps  = [ exprotobuf_1_2_7 porcelain_2_0_3 ];

            meta = {
              description = ''Call C# code from Elixir!'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sschneider1207/ex_sharp";
            };
          } // packageOverrides)
      ) {};

    ex_sharp = ex_sharp_0_0_6;

    ex_sider_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_sider";
            version = "0.2.0";
            src = fetchHex {
              pkg = "ex_sider";
              version = "0.2.0";
              sha256 =
                "9015a56ddf135475eeb9800b9d9388a73648742ea2e771b582e53a74a4dc789c";
            };

            meta = {
              description = ''Elixir Map/List/Set interfaces for Redis
                            datastructures.'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/ephe-meral/ex_sider";
            };
          } // packageOverrides)
      ) {};

    ex_sider = ex_sider_0_2_0;

    ex_sieve_0_6_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ecto_2_1_4 }:
          buildMix ({
            name = "ex_sieve";
            version = "0.6.1";
            src = fetchHex {
              pkg = "ex_sieve";
              version = "0.6.1";
              sha256 =
                "142e734ec7acb6df7afc691bc2d28d5f0381fa8f33ee9b4a7b7ca6293b57ae3c";
            };
            beamDeps  = [ ecto_2_1_4 ];

            meta = {
              description = ''Build filtred and sorted Ecto.Query struct from
                            object based queries.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/valyukov/ex_sieve";
            };
          } // packageOverrides)
      ) {};

    ex_sieve = ex_sieve_0_6_1;

    ex_sieve_html_0_5_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, phoenix_html_2_9_3
        }:
          buildMix ({
            name = "ex_sieve_html";
            version = "0.5.0";
            src = fetchHex {
              pkg = "ex_sieve_html";
              version = "0.5.0";
              sha256 =
                "c2af79e3d3cda7e70beaf5574a876721c4df06e9346df316892471d9d2fba8e8";
            };
            beamDeps  = [ phoenix_html_2_9_3 ];

            meta = {
              description = ''Phoenix helpers search_form/4 and sort_link/4 for
                            ExSieve filtration library.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/valyukov/ex_sieve_html";
            };
          } // packageOverrides)
      ) {};

    ex_sieve_html = ex_sieve_html_0_5_0;

    ex_slp_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          earmark_1_2_2,
          ex_doc_0_16_1
        }:
          buildMix ({
            name = "ex_slp";
            version = "0.1.1";
            src = fetchHex {
              pkg = "ex_slp";
              version = "0.1.1";
              sha256 =
                "cdce22cb7c0f83e64737cdadb0178764657c854a7c53e2383fd213f023f35cc1";
            };
            beamDeps  = [ earmark_1_2_2 ex_doc_0_16_1 ];

            meta = {
              longDescription = ''Zero-config local network Elixir/Erlang node
                                discovery lib. Allows an Elixir node to register
                                itself as a local netowrk service and discover
                                the orher registered services.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/4pcbr/ex_slp_tk";
            };
          } // packageOverrides)
      ) {};

    ex_slp = ex_slp_0_1_1;

    ex_sonar_1_0_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          floki_0_17_2,
          httpoison_0_11_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "ex_sonar";
            version = "1.0.3";
            src = fetchHex {
              pkg = "ex_sonar";
              version = "1.0.3";
              sha256 =
                "85870c1a718383eeeeaeec8a1e73ba38838d938d6fed004c6db7f3c8a973dae9";
            };
            beamDeps  = [ floki_0_17_2 httpoison_0_11_2 poison_2_2_0 ];

            meta = {
              description = ''A Send Sonar API interface for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/enilsen16/ex_sonar";
            };
          } // packageOverrides)
      ) {};

    ex_sonar_2_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          floki_0_17_2,
          httpoison_0_11_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "ex_sonar";
            version = "2.0.1";
            src = fetchHex {
              pkg = "ex_sonar";
              version = "2.0.1";
              sha256 =
                "feac0c92456761edecd438a363a5f8223b56c2d7b6c98419bbf68a61f5c366fe";
            };
            beamDeps  = [ floki_0_17_2 httpoison_0_11_2 poison_2_2_0 ];

            meta = {
              description = ''A Send Sonar API interface for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/enilsen16/ex_sonar";
            };
          } // packageOverrides)
      ) {};

    ex_sonar = ex_sonar_2_0_1;

    ex_spec_2_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_spec";
            version = "2.0.1";
            src = fetchHex {
              pkg = "ex_spec";
              version = "2.0.1";
              sha256 =
                "b44fe5054497411a58341ece5bf7756c219d9d6c1303b5ac467f557a0a4c31ac";
            };

            meta = {
              description = ''BDD-like syntax for ExUnit'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/drewolson/ex_spec";
            };
          } // packageOverrides)
      ) {};

    ex_spec = ex_spec_2_0_1;

    ex_spirit_0_2_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_spirit";
            version = "0.2.4";
            src = fetchHex {
              pkg = "ex_spirit";
              version = "0.2.4";
              sha256 =
                "9518b8289680955a96dd558b3d8449bac9abbe3a726c94e88fe635a8e74c5a38";
            };

            meta = {
              description = ''Spirit-style PEG-like parsing library for
                            Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/OvermindDL1/ex_spirit";
            };
          } // packageOverrides)
      ) {};

    ex_spirit = ex_spirit_0_2_4;

    ex_sshd_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_sshd";
            version = "0.0.2";
            src = fetchHex {
              pkg = "ex_sshd";
              version = "0.0.2";
              sha256 =
                "9c7f73aab2d7697ef81eea582dfbde8033e8266dd6de2d34c36bd7e4905b7de4";
            };

            meta = {
              longDescription = ''Simple Elixir SSH worker that provides an
                                Elixir shell over SSH into your application.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tverlaan/ex_sshd";
            };
          } // packageOverrides)
      ) {};

    ex_sshd = ex_sshd_0_0_2;

    ex_statsd_0_5_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_statsd";
            version = "0.5.3";
            src = fetchHex {
              pkg = "ex_statsd";
              version = "0.5.3";
              sha256 =
                "357c616a327a40133e49a54db1d46b0d7c9ab2de186f7bfecdc0efca6394adf6";
            };

            meta = {
              description = ''A StatsD client for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/CargoSense/ex_statsd";
            };
          } // packageOverrides)
      ) {};

    ex_statsd = ex_statsd_0_5_3;

    ex_string_util_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_string_util";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ex_string_util";
              version = "0.1.0";
              sha256 =
                "dec0915b75c1c235c6d153fbb98585f8df269aee4e95503540961e1d10a5ea0a";
            };

            meta = {
              longDescription = ''String Utility module. It helps perform some
                                validation during application development
                                particularly the ones that involve user input
                                like REST API or Web Applications.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/Tochemey/ExString.git";
            };
          } // packageOverrides)
      ) {};

    ex_string_util = ex_string_util_0_1_0;

    ex_stub_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_stub";
            version = "0.2.0";
            src = fetchHex {
              pkg = "ex_stub";
              version = "0.2.0";
              sha256 =
                "ca2f1dbdf74a951a9639398bd3ebdaf08d112776e68a3cfdc588ff9c56c566db";
            };

            meta = {
              longDescription = ''ExStub provides an easy way to stub a module
                                to facilitate writing clean, isolated unit
                                tests.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/oarrabi/ex_stub";
            };
          } // packageOverrides)
      ) {};

    ex_stub = ex_stub_0_2_0;

    ex_sync_0_0_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          connection_1_0_4,
          poolboy_1_5_1
        }:
          buildMix ({
            name = "ex_sync";
            version = "0.0.4";
            src = fetchHex {
              pkg = "ex_sync";
              version = "0.0.4";
              sha256 =
                "017df08232a3bff5254bb910c9a8bf8ac3be551fc0e224bc96b97b637ce2b49a";
            };
            beamDeps  = [ connection_1_0_4 poolboy_1_5_1 ];

            meta = {
              longDescription = ''A library to handle [Differential
                                Synchroniazation](https://neil.fraser.name/writing/sync/)
                                in an Elixir app.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/invrs/exsync";
            };
          } // packageOverrides)
      ) {};

    ex_sync = ex_sync_0_0_4;

    ex_syslogger_1_3_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          poison_3_1_0,
          syslog_1_0_2
        }:
          buildMix ({
            name = "ex_syslogger";
            version = "1.3.3";
            src = fetchHex {
              pkg = "ex_syslogger";
              version = "1.3.3";
              sha256 =
                "74b50c4a90d5c2a07d3a20857ca0a217bb5496b26c6eefadd419669f454058bb";
            };
            beamDeps  = [ poison_3_1_0 syslog_1_0_2 ];

            meta = {
              description = ''ExSyslogger is an Elixir Logger custom backend to
                            syslog.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/slashmili/ex_syslogger";
            };
          } // packageOverrides)
      ) {};

    ex_syslogger = ex_syslogger_1_3_3;

    ex_test_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_test";
            version = "0.0.2";
            src = fetchHex {
              pkg = "ex_test";
              version = "0.0.2";
              sha256 =
                "fdc33e0fa2fdab921fa54f0484645681ed0695f69439a6f40430e31fbc589756";
            };

            meta = {
              description = ''Wrapper around ExUnit to support BBD (rspec) like
                            syntax'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mcb/ex_test";
            };
          } // packageOverrides)
      ) {};

    ex_test = ex_test_0_0_2;

    ex_text_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_text";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ex_text";
              version = "0.1.0";
              sha256 =
                "92e68f6e00ae8b8baf08762dcbbd96f58444e41c956cd4a1e43db83e4ec4c2e0";
            };

            meta = {
              description = ''A collection of text algorithms.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gottfrois/ex_text";
            };
          } // packageOverrides)
      ) {};

    ex_text = ex_text_0_1_0;

    ex_tm_1_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_tm";
            version = "1.1.0";
            src = fetchHex {
              pkg = "ex_tm";
              version = "1.1.0";
              sha256 =
                "fb62352265fa1d837567d485df2131fb3824a28e8195bc07f16a25a1d447cf69";
            };

            meta = {
              description = ''Turing machine simulator in Elixir.'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/SekiT/ex_tm";
            };
          } // packageOverrides)
      ) {};

    ex_tm = ex_tm_1_1_0;

    ex_trello_1_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          oauther_1_1_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "ex_trello";
            version = "1.1.1";
            src = fetchHex {
              pkg = "ex_trello";
              version = "1.1.1";
              sha256 =
                "d80270c7b474b2f1da5df77056754fed21b91e780581aeaa466a084632192fd8";
            };
            beamDeps  = [ httpoison_0_11_2 oauther_1_1_0 poison_3_1_0 ];

            meta = {
              description = ''An Elixir package to interface with the Trello
                            API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ChrisYammine/ex_trello";
            };
          } // packageOverrides)
      ) {};

    ex_trello = ex_trello_1_1_1;

    ex_tumblr_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_8_3,
          oauther_1_0_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "ex_tumblr";
            version = "0.0.1";
            src = fetchHex {
              pkg = "ex_tumblr";
              version = "0.0.1";
              sha256 =
                "9517b1ca411c91ad7e9776f7e2783908b400fee1779e497fdb1b3c515f61a253";
            };
            beamDeps  = [ httpoison_0_8_3 oauther_1_0_2 poison_2_2_0 ];

            meta = {
              description = ''A client for the Tumblr API v2.'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    ex_tumblr = ex_tumblr_0_0_1;

    ex_twilio_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          inflex_1_8_1,
          joken_1_3_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "ex_twilio";
            version = "0.3.0";
            src = fetchHex {
              pkg = "ex_twilio";
              version = "0.3.0";
              sha256 =
                "8a6faa3314a579c6e0dcb89dda7fb741d0ba7b10426f20305d6718c9cdf995a0";
            };
            beamDeps  = [
                          httpoison_0_11_2 inflex_1_8_1 joken_1_3_2 poison_2_2_0
                        ];

            meta = {
              description = ''Twilio API library for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/danielberkompas/ex_twilio";
            };
          } // packageOverrides)
      ) {};

    ex_twilio = ex_twilio_0_3_0;

    ex_twilio_bootstrap_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ex_twilio_0_3_0 }:
          buildMix ({
            name = "ex_twilio_bootstrap";
            version = "0.1.2";
            src = fetchHex {
              pkg = "ex_twilio_bootstrap";
              version = "0.1.2";
              sha256 =
                "fcc8cf36d7c7d15682aba3059928e556e24a64955ce1e85886c3ecef4945d09d";
            };
            beamDeps  = [ ex_twilio_0_3_0 ];

            meta = {
              longDescription = ''Bootstraps a Twilio application and telephone
                                number upon startup to ease development of TwiML
                                applications'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/joshuafleck/ex_twilio_bootstrap";
            };
          } // packageOverrides)
      ) {};

    ex_twilio_bootstrap = ex_twilio_bootstrap_0_1_2;

    ex_twilio_lookup_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_2_2_0 }:
          buildMix ({
            name = "ex_twilio_lookup";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ex_twilio_lookup";
              version = "0.1.0";
              sha256 =
                "326dc4a9b7a2d34ff7aba24ae5efa0daf278ec9c0f4590d6a448877932cf4191";
            };
            beamDeps  = [ poison_2_2_0 ];

            meta = {
              description = ''A @twilio lookup API interface for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/HiOperator/ex_twilio_lookup";
            };
          } // packageOverrides)
      ) {};

    ex_twilio_lookup = ex_twilio_lookup_0_1_0;

    ex_twiml_2_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_twiml";
            version = "2.1.2";
            src = fetchHex {
              pkg = "ex_twiml";
              version = "2.1.2";
              sha256 =
                "3c2cdb0058f725f2d9a147f025d87daa62cdbddd950d840fc9c36a1ddf7f9d3f";
            };

            meta = {
              description = ''Generate TwiML with Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/danielberkompas/ex_twiml";
            };
          } // packageOverrides)
      ) {};

    ex_twiml = ex_twiml_2_1_2;

    ex_twitch_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "ex_twitch";
            version = "0.0.1";
            src = fetchHex {
              pkg = "ex_twitch";
              version = "0.0.1";
              sha256 =
                "19141f28dc4ec747667433b2694ca3ff852a1e5d0cec9f046b7de609aaa1b90e";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''Simple Elixir wrapper for the Twitch V5 API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/plackemacher/ex_twitch";
            };
          } // packageOverrides)
      ) {};

    ex_twitch = ex_twitch_0_0_1;

    ex_uc_1_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_uc";
            version = "1.0.4";
            src = fetchHex {
              pkg = "ex_uc";
              version = "1.0.4";
              sha256 =
                "343ac6741c62720d3b367eeec3cdd460fab45f7620ae25f69b265370868e5460";
            };

            meta = {
              longDescription = ''Utility to convert values between different
                                units of the same kind. Extremely easy to extend
                                and to use.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/carturoch/ex_uc";
            };
          } // packageOverrides)
      ) {};

    ex_uc = ex_uc_1_0_4;

    ex_unit_assertions_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_unit_assertions";
            version = "0.2.0";
            src = fetchHex {
              pkg = "ex_unit_assertions";
              version = "0.2.0";
              sha256 =
                "e6e44f67ef56e64f2638cee54b709708b7df75c452f0dd0091bd97a0ba56eece";
            };

            meta = {
              description = ''useful ExUnit assertions'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/artemeff/ex_unit_assertions";
            };
          } // packageOverrides)
      ) {};

    ex_unit_assertions = ex_unit_assertions_0_2_0;

    ex_unit_emacs_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_unit_emacs";
            version = "0.1.2";
            src = fetchHex {
              pkg = "ex_unit_emacs";
              version = "0.1.2";
              sha256 =
                "f22a3c987b39b2ebedd9652a2fab07d7efd43baf376d9854398095bd220bd462";
            };

            meta = {
              description = ''Emacs integration for ExUnit'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bruce/ex_unit_emacs";
            };
          } // packageOverrides)
      ) {};

    ex_unit_emacs = ex_unit_emacs_0_1_2;

    ex_unit_fixtures_0_3_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_unit_fixtures";
            version = "0.3.1";
            src = fetchHex {
              pkg = "ex_unit_fixtures";
              version = "0.3.1";
              sha256 =
                "b4b988211bf4cd08a26eb76756e4563c94c6648c195e45af26ea62e4d37a65f6";
            };

            meta = {
              description = ''A modular fixture system for ExUnit, inspired by
                            py.test fixtures.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/obmarg/ex_unit_fixtures";
            };
          } // packageOverrides)
      ) {};

    ex_unit_fixtures = ex_unit_fixtures_0_3_1;

    ex_unit_let_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_unit_let";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ex_unit_let";
              version = "0.1.0";
              sha256 =
                "a92bebf5f2395f1dd797366b26d7e97bd33ce2030d11311d85e27683e06d8f16";
            };

            meta = {
              description = ''A simple let macro for ExUnit.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rzane/ex_unit_let";
            };
          } // packageOverrides)
      ) {};

    ex_unit_let = ex_unit_let_0_1_0;

    ex_unit_notifier_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_unit_notifier";
            version = "0.1.3";
            src = fetchHex {
              pkg = "ex_unit_notifier";
              version = "0.1.3";
              sha256 =
                "e588b22ed6b279134b56f21c263a010cd138b91bb43b556b11e58663bbf26707";
            };

            meta = {
              description = ''Show status notifications for ExUnit test runs'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/navinpeiris/ex_unit_notifier";
            };
          } // packageOverrides)
      ) {};

    ex_unit_notifier = ex_unit_notifier_0_1_3;

    ex_uptimerobot_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "ex_uptimerobot";
            version = "0.3.0";
            src = fetchHex {
              pkg = "ex_uptimerobot";
              version = "0.3.0";
              sha256 =
                "df18fc38d9050e22a71719bba9ab82961618659a0daf1c8042b5d7ba1c6fd004";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''A simple Elixir wrapper for the Uptime Robot
                            API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/juhalehtonen/ex_uptimerobot";
            };
          } // packageOverrides)
      ) {};

    ex_uptimerobot = ex_uptimerobot_0_3_0;

    ex_utils_0_1_6 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_utils";
            version = "0.1.6";
            src = fetchHex {
              pkg = "ex_utils";
              version = "0.1.6";
              sha256 =
                "2a3463548429df4a1cf1ee6dcabfcb3c4285206df6c3c64d92706f0b759ef3ec";
            };

            meta = {
              description = ''Collection of Awesome Elixir shortcuts and
                            utilities ⚡'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sheharyarn/ex_utils";
            };
          } // packageOverrides)
      ) {};

    ex_utils = ex_utils_0_1_6;

    ex_versions_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_versions";
            version = "0.0.1";
            src = fetchHex {
              pkg = "ex_versions";
              version = "0.0.1";
              sha256 =
                "d2ea030fdfe5576807065a7e7131aa5681cd1cae253c88377177fcdd323506e9";
            };

            meta = {
              longDescription = ''A module that updates your README.md with
                                version numbers for specified dependencies'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/MainShayne233/ex_versions";
            };
          } // packageOverrides)
      ) {};

    ex_versions = ex_versions_0_0_1;

    ex_victor_ops_0_4_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_3_0_2,
          poison_3_0_0
        }:
          buildMix ({
            name = "ex_victor_ops";
            version = "0.4.1";
            src = fetchHex {
              pkg = "ex_victor_ops";
              version = "0.4.1";
              sha256 =
                "dd3484e5ee9958bfa8905ddcdf85ee254eba2bf6d090a1503ab3832d840a205e";
            };
            beamDeps  = [ httpotion_3_0_2 poison_3_0_0 ];

            meta = {
              description = ''VictorOps API library for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cagedata/ex_victor_ops";
            };
          } // packageOverrides)
      ) {};

    ex_victor_ops = ex_victor_ops_0_4_1;

    ex_vmstats_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_vmstats";
            version = "0.0.1";
            src = fetchHex {
              pkg = "ex_vmstats";
              version = "0.0.1";
              sha256 =
                "587d088696b51b0e053b2626c6de51ca7be67b5e3a49c7320da5b4e7cd96d347";
            };

            meta = {
              description = ''An Elixir package for pushing Erlang VM stats
                            into StatsD.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/fanduel/ex_vmstats";
            };
          } // packageOverrides)
      ) {};

    ex_vmstats = ex_vmstats_0_0_1;

    ex_watcher_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ex_doc_0_16_1,
          fs_3_4_0
        }:
          buildMix ({
            name = "ex_watcher";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ex_watcher";
              version = "0.1.0";
              sha256 =
                "5ddd39c27759b90732ad077216080dc5d84c202d510b128fa7a0e23926e2bda7";
            };
            beamDeps  = [ ex_doc_0_16_1 fs_3_4_0 ];

            meta = {
              description = ''An Elixir file change watcher'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/KamilLelonek/ex_watcher";
            };
          } // packageOverrides)
      ) {};

    ex_watcher = ex_watcher_0_1_0;

    ex_webpack_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ex_webpack";
            version = "0.1.1";
            src = fetchHex {
              pkg = "ex_webpack";
              version = "0.1.1";
              sha256 =
                "df9dd6d60399248ca568179473ce66f92d54e790a8fdaea4a62afd9e86e8a6cf";
            };

            meta = {
              description = ''A wrapper for webpack'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ConnorRigby/ex_webpack";
            };
          } // packageOverrides)
      ) {};

    ex_webpack = ex_webpack_0_1_1;

    ex_wechat_0_1_7 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          floki_0_15_0,
          httpoison_0_11_2,
          plug_1_3_5,
          poison_2_2_0
        }:
          buildMix ({
            name = "ex_wechat";
            version = "0.1.7";
            src = fetchHex {
              pkg = "ex_wechat";
              version = "0.1.7";
              sha256 =
                "40ffe87476637f1bdf5b7603841d137dac6c51083ad07b926a9581741763f977";
            };
            beamDeps  = [
                          floki_0_15_0 httpoison_0_11_2 plug_1_3_5 poison_2_2_0
                        ];

            meta = {
              description = ''A Phoenix/Elixir Wechat Api.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/h1u2i3/ex_wechat";
            };
          } // packageOverrides)
      ) {};

    ex_wechat = ex_wechat_0_1_7;

    ex_zendesk_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_9_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "ex_zendesk";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ex_zendesk";
              version = "0.1.0";
              sha256 =
                "6627d35c7c112711b5945b11fd0a884d332bda058f31640e5ae8f528f6e23a38";
            };
            beamDeps  = [ httpoison_0_9_2 poison_2_2_0 ];

            meta = {
              description = ''A simple HTTPoison wrapper for interacting with
                            the Zendesk API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/storestartup/ex_zendesk";
            };
          } // packageOverrides)
      ) {};

    ex_zendesk = ex_zendesk_0_1_0;

    ex_zenhub_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "ex_zenhub";
            version = "0.1.1";
            src = fetchHex {
              pkg = "ex_zenhub";
              version = "0.1.1";
              sha256 =
                "3b930cb9348ccefd7ab012add32c42be9720ec4ddf4700d9c35e87a0268ac450";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''Unofficial Elixir client for the ZenHub API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ChrisYammine/ex_zen_hub";
            };
          } // packageOverrides)
      ) {};

    ex_zenhub = ex_zenhub_0_1_1;

    ex_zoominfo_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, httpoison_0_9_2 }:
          buildMix ({
            name = "ex_zoominfo";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ex_zoominfo";
              version = "0.1.0";
              sha256 =
                "a13dec86285b33f6a269891d81a2c8717fb38626b6bd007d6c03dba156fc0d10";
            };
            beamDeps  = [ httpoison_0_9_2 ];

            meta = {
              description = ''Elixir SDK for ZoomInfo Partner API'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/techgaun/ex_zoominfo";
            };
          } // packageOverrides)
      ) {};

    ex_zoominfo = ex_zoominfo_0_1_0;

    ex_zurb_foundation_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          phoenix_1_3_0_rc_2,
          phoenix_html_2_9_3,
          plug_1_3_5,
          scrivener_0_5_0
        }:
          buildMix ({
            name = "ex_zurb_foundation";
            version = "0.2.0";
            src = fetchHex {
              pkg = "ex_zurb_foundation";
              version = "0.2.0";
              sha256 =
                "103cc1ca7544f8624c5f7329beebc5f1dbf2d986ec944fb7c496a0cec4c09f1b";
            };
            beamDeps  = [
                          phoenix_1_3_0_rc_2
                          phoenix_html_2_9_3
                          plug_1_3_5
                          scrivener_0_5_0
                        ];

            meta = {
              longDescription = ''Helpers built to work with Phoenix`s page
                                struct to easily build HTML output for ZURB
                                Foundation framework.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/xnouvilas/ex_zurb_foundation";
            };
          } // packageOverrides)
      ) {};

    ex_zurb_foundation = ex_zurb_foundation_0_2_0;

    exactor_2_2_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exactor";
            version = "2.2.3";
            src = fetchHex {
              pkg = "exactor";
              version = "2.2.3";
              sha256 =
                "2c49a3b991bcacf1bcd20708cfce6380a12a0bdbf9b64dcd72a04bfde30754f9";
            };

            meta = {
              description = ''Simplified creation of GenServer based processes
                            in Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sasa1977/exactor";
            };
          } // packageOverrides)
      ) {};

    exactor = exactor_2_2_3;

    exalgebra_0_0_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exalgebra";
            version = "0.0.5";
            src = fetchHex {
              pkg = "exalgebra";
              version = "0.0.5";
              sha256 =
                "b84a96ffb7a2dd0c497f176c2e9d0ef07c719f09702d71fb8a801a3f2db1ab50";
            };

            meta = {
              longDescription = ''The ExAlgebra library is a collection of
                                functions that are commonly used in linear
                                algebra.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/leighshepperson/exalgebra";
            };
          } // packageOverrides)
      ) {};

    exalgebra = exalgebra_0_0_5;

    exalice_0_0_6_alpha = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_2_1_0,
          tirexs_0_8_2
        }:
          buildMix ({
            name = "exalice";
            version = "0.0.6-alpha";
            src = fetchHex {
              pkg = "exalice";
              version = "0.0.6-alpha";
              sha256 =
                "b5f95ddebb9def3efb926fc7e4c639bbad008e5e19073b56e13d684417520922";
            };
            beamDeps  = [ httpoison_0_11_2 poison_2_1_0 tirexs_0_8_2 ];

            meta = {
              description = ''ExAlice, a geocoder with swappable storage'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/kpanic/exalice";
            };
          } // packageOverrides)
      ) {};

    exalice = exalice_0_0_6_alpha;

    example_files_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "example_files";
            version = "1.0.0";
            src = fetchHex {
              pkg = "example_files";
              version = "1.0.0";
              sha256 =
                "2bec589998a631a1e62183f9d67326070c6cde1b64ca604c4a442fca99f73056";
            };

            meta = {
              description = ''Mix tasks for managing example files in your
                            project.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/njonsson/example_files";
            };
          } // packageOverrides)
      ) {};

    example_files = example_files_1_0_0;

    exauth_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exauth";
            version = "0.0.1";
            src = fetchHex {
              pkg = "exauth";
              version = "0.0.1";
              sha256 =
                "40a6bbea6f6b2d524cc4a4107aa9a6a5dc725171968ce8b4aa43599f8835d3cc";
            };

            meta = {
              description = ''Wrapper for erlang-oauth'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mschae/exauth";
            };
          } // packageOverrides)
      ) {};

    exauth = exauth_0_0_1;

    exbackoff_0_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exbackoff";
            version = "0.0.4";
            src = fetchHex {
              pkg = "exbackoff";
              version = "0.0.4";
              sha256 =
                "be0ac50c5f9a2bf028e5af5d6da94d8f80a8e77574ecd971a174fc55578f4721";
            };

            meta = {
              description = ''Simple exponential backoffs in Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mingchuno/exbackoff";
            };
          } // packageOverrides)
      ) {};

    exbackoff = exbackoff_0_0_4;

    exbouncer_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exbouncer";
            version = "0.0.1";
            src = fetchHex {
              pkg = "exbouncer";
              version = "0.0.1";
              sha256 =
                "1152124b31dd00eddfb59fff015d92632744fa5cd4630a7eb8976a82aa012e41";
            };

            meta = {
              longDescription = ''An authorization library in Elixir for Plug
                                applications that restricts what resources the
                                current user/admin or any role is allowed to
                                access,'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/vysakh0/exbouncer";
            };
          } // packageOverrides)
      ) {};

    exbouncer = exbouncer_0_0_1;

    exbox_1_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exchalk_1_0_2,
          termsize_1_0_1
        }:
          buildMix ({
            name = "exbox";
            version = "1.0.0";
            src = fetchHex {
              pkg = "exbox";
              version = "1.0.0";
              sha256 =
                "2306ff5bfab69c13c8ea917cb5afff94198d7890510c01691914a588c949d045";
            };
            beamDeps  = [ exchalk_1_0_2 termsize_1_0_1 ];

            meta = {
              description = ''Create boxes in the terminal'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sotojuan/exbox";
            };
          } // packageOverrides)
      ) {};

    exbox = exbox_1_0_0;

    exbuf_plug_0_0_6 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          plug_1_3_5
        }:
          buildMix ({
            name = "exbuf_plug";
            version = "0.0.6";
            src = fetchHex {
              pkg = "exbuf_plug";
              version = "0.0.6";
              sha256 =
                "b4780d22c52c0362786db03439f5de8cd58af21c00b6d69535b7e7db91ca3481";
            };
            beamDeps  = [ cowboy_1_1_2 plug_1_3_5 ];

            meta = {
              description = ''A small plug to handle decoding protocol
                            buffers.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gogogarrett/exbuf_plug";
            };
          } // packageOverrides)
      ) {};

    exbuf_plug = exbuf_plug_0_0_6;

    exbug_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exbug";
            version = "0.0.1";
            src = fetchHex {
              pkg = "exbug";
              version = "0.0.1";
              sha256 =
                "6cbb447526cc5845b35474e034d8a9e71c5799b89fcdd1cf60ac8100bdbbd9b4";
            };

            meta = {
              description = ''A more traditional experience for the :debugger
                            module'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Gwash3189/exbug";
            };
          } // packageOverrides)
      ) {};

    exbug = exbug_0_0_1;

    exbuilder_0_1_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          inflex_1_8_1,
          poison_3_1_0
        }:
          buildMix ({
            name = "exbuilder";
            version = "0.1.4";
            src = fetchHex {
              pkg = "exbuilder";
              version = "0.1.4";
              sha256 =
                "7220b15c50a26cbeaa36fe055b22b1c87cd2b1287753f595b4efee23aa80499c";
            };
            beamDeps  = [ inflex_1_8_1 poison_3_1_0 ];

            meta = {
              description = ''Macros to support Ruby-like jbuilder/builder
                            templates to generate JSON and XML'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/aportnov/exbuilder.git";
            };
          } // packageOverrides)
      ) {};

    exbuilder = exbuilder_0_1_4;

    excache_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "excache";
            version = "0.1.0";
            src = fetchHex {
              pkg = "excache";
              version = "0.1.0";
              sha256 =
                "b5bbefc2b8a82bc92b848fd1da5b32cfb856fe4ff4ffd615aa77e16de772500f";
            };

            meta = {
              description = ''Superfast, pipelined, resilient Redis driver for
                            Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ericmj/postgrex";
            };
          } // packageOverrides)
      ) {};

    excache = excache_0_1_0;

    excalibur_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "excalibur";
            version = "0.1.0";
            src = fetchHex {
              pkg = "excalibur";
              version = "0.1.0";
              sha256 =
                "b913ee6c08ee8bad9df1dcd4da41db35be6f5cc2c6f86ebce9e7eaa27cd1120a";
            };

            meta = {
              description = ''A modern Elixir utility library delivering
                            modularity, performance & extras.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kaddopur/excalibur";
            };
          } // packageOverrides)
      ) {};

    excalibur = excalibur_0_1_0;

    excaliper_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "excaliper";
            version = "0.0.1";
            src = fetchHex {
              pkg = "excaliper";
              version = "0.0.1";
              sha256 =
                "d43430518ffcf8de60a1d44355f6a200f348ec1ca8bc4287ca17c97543e86732";
            };

            meta = {
              description = ''Fast image dimension detector inspired by the
                            Node.JS module Calipers.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mgartner/excaliper";
            };
          } // packageOverrides)
      ) {};

    excaliper = excaliper_0_0_1;

    excelion_0_0_3 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, xlsx_parser_0_0_10
        }:
          buildMix ({
            name = "excelion";
            version = "0.0.3";
            src = fetchHex {
              pkg = "excelion";
              version = "0.0.3";
              sha256 =
                "ac995e603b7d9985e969690c54c513be57199e36aebcc2774dc90b71039cdfa4";
            };
            beamDeps  = [ xlsx_parser_0_0_10 ];

            meta = {
              description = ''Excel (xlsx) file reader for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/faithandbrave/excelion";
            };
          } // packageOverrides)
      ) {};

    excelion = excelion_0_0_3;

    excellent_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "excellent";
            version = "0.0.1";
            src = fetchHex {
              pkg = "excellent";
              version = "0.0.1";
              sha256 =
                "a0628dce02de6a33cf441883723c480b0f07fdacade46f6d608465bb717491bd";
            };

            meta = {
              description = ''A OpenXL (Excel files ending with .xlsx) parser
                            for Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/leifg/excellent";
            };
          } // packageOverrides)
      ) {};

    excellent = excellent_0_0_1;

    exceptional_2_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exceptional";
            version = "2.1.0";
            src = fetchHex {
              pkg = "exceptional";
              version = "2.1.0";
              sha256 =
                "aafe9e470fcc8e4de953aeae23e225d70ee0247855efe0553cf97af9530b196e";
            };

            meta = {
              description = ''Error & exception handling helpers for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/expede/exceptional";
            };
          } // packageOverrides)
      ) {};

    exceptional = exceptional_2_1_0;

    excetera_0_0_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_8_3,
          poison_2_2_0
        }:
          buildMix ({
            name = "excetera";
            version = "0.0.3";
            src = fetchHex {
              pkg = "excetera";
              version = "0.0.3";
              sha256 =
                "e127e4f553c3925ce301b782cd8e8f123c72cf2463f7f032042f59892e5f37c3";
            };
            beamDeps  = [ httpoison_0_8_3 poison_2_2_0 ];

            meta = {
              description = ''Elixir bindings for etcd`s HTTP API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mingchuno/excetera";
            };
          } // packageOverrides)
      ) {};

    excetera = excetera_0_0_3;

    exchalk_1_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exchalk";
            version = "1.0.2";
            src = fetchHex {
              pkg = "exchalk";
              version = "1.0.2";
              sha256 =
                "21479406da07ebe2c3a0e74eaad93e8d25f3a6f4ede142c1e313bd45f10aded1";
            };

            meta = {
              description = ''Easier terminal styling'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sotojuan/exchalk";
            };
          } // packageOverrides)
      ) {};

    exchalk = exchalk_1_0_2;

    exchatwork_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exjsx_3_2_1,
          httpoison_0_11_2
        }:
          buildMix ({
            name = "exchatwork";
            version = "0.1.0";
            src = fetchHex {
              pkg = "exchatwork";
              version = "0.1.0";
              sha256 =
                "a96f76179e35da1ae49b75bcea57aaf2241fb88f08a457c058f8b2e9be35937d";
            };
            beamDeps  = [ exjsx_3_2_1 httpoison_0_11_2 ];

            meta = {
              description = ''ChatWork API Interface for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/alea12/exchatwork";
            };
          } // packageOverrides)
      ) {};

    exchatwork = exchatwork_0_1_0;

    excheck_0_5_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "excheck";
            version = "0.5.3";
            src = fetchHex {
              pkg = "excheck";
              version = "0.5.3";
              sha256 =
                "2a27ffeff9d3b2ef45c454efb13990f08bc2578f93fd6d054025da74775ca869";
            };

            meta = {
              description = ''Property-based testing library for Elixir
                            (QuickCheck style).'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/parroty/excheck";
            };
          } // packageOverrides)
      ) {};

    excheck = excheck_0_5_3;

    excoap_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "excoap";
            version = "0.0.1";
            src = fetchHex {
              pkg = "excoap";
              version = "0.0.1";
              sha256 =
                "06caae698590da85aded80db7996300127d48a4e9cf7bdca8d35113c094e5094";
            };

            meta = {
              description = ''CoAP implementation for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mbialon/excoap";
            };
          } // packageOverrides)
      ) {};

    excoap = excoap_0_0_1;

    excollections_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "excollections";
            version = "0.0.2";
            src = fetchHex {
              pkg = "excollections";
              version = "0.0.2";
              sha256 =
                "1924fd5bd3c1c7418a9150ca8fcb2d2700a82671f3a76972edc9bc51d32a2093";
            };

            meta = {
              longDescription = ''A collection of data-structures and related
                                algorithms for Elixir, implemented in Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/metabrain/elixir-playground/tree/master/excollections";
            };
          } // packageOverrides)
      ) {};

    excollections = excollections_0_0_2;

    excon_2_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          blake2_1_0_0,
          png_0_1_1
        }:
          buildMix ({
            name = "excon";
            version = "2.2.0";
            src = fetchHex {
              pkg = "excon";
              version = "2.2.0";
              sha256 =
                "18b79e816dbae08e1313d88cf1d2d8b7bb2db49c9706e9e753b76fd7fb68f303";
            };
            beamDeps  = [ blake2_1_0_0 png_0_1_1 ];

            meta = {
              description = ''excon - pure Elixir identicons'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mwmiller/excon";
            };
          } // packageOverrides)
      ) {};

    excon = excon_2_2_0;

    exconstructor_1_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exconstructor";
            version = "1.0.2";
            src = fetchHex {
              pkg = "exconstructor";
              version = "1.0.2";
              sha256 =
                "e8cd1c88d5ea044a340fed75deb1fda2edc71afaac157dce561288a6bf733035";
            };

            meta = {
              longDescription = ''ExConstructor generates constructor functions
                                for your structs, handling map-vs-keyword-list,
                                string-vs-atom-keys, and
                                camelCase-vs-under_score issues
                                automatically.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/appcues/exconstructor";
            };
          } // packageOverrides)
      ) {};

    exconstructor_1_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exconstructor";
            version = "1.1.0";
            src = fetchHex {
              pkg = "exconstructor";
              version = "1.1.0";
              sha256 =
                "0edd55e8352e04dabf71f35453a57650175c7d7e6af707b1d3df610e5052afe0";
            };

            meta = {
              longDescription = ''ExConstructor generates constructor functions
                                for your structs, handling map-vs-keyword-list,
                                string-vs-atom-keys, and
                                camelCase-vs-under_score issues
                                automatically.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/appcues/exconstructor";
            };
          } // packageOverrides)
      ) {};

    exconstructor = exconstructor_1_1_0;

    excountries_0_0_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_7_5,
          poison_1_5_2
        }:
          buildMix ({
            name = "excountries";
            version = "0.0.3";
            src = fetchHex {
              pkg = "excountries";
              version = "0.0.3";
              sha256 =
                "ec0bbb4147b54817e7d17a7ed91e1b88046769a26020c591ed5fde336b4fb8d3";
            };
            beamDeps  = [ httpoison_0_7_5 poison_1_5_2 ];

            meta = {
              description = ''Elixir wrapper for REST Countries API
                            (http://restcountries.eu/)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/fteem/excountries";
            };
          } // packageOverrides)
      ) {};

    excountries = excountries_0_0_3;

    excov_0_1_7 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "excov";
            version = "0.1.7";
            src = fetchHex {
              pkg = "excov";
              version = "0.1.7";
              sha256 =
                "adaa49e73b67d48f764b1f241370e48d1dac9251c81835cfd2f3feca37152892";
            };

            meta = {
              description = ''Code Coverage Reports for Elixir code.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mrinalwadhwa/excov";
            };
          } // packageOverrides)
      ) {};

    excov = excov_0_1_7;

    excov_reporter_console_0_1_8 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, excov_0_1_7 }:
          buildMix ({
            name = "excov_reporter_console";
            version = "0.1.8";
            src = fetchHex {
              pkg = "excov_reporter_console";
              version = "0.1.8";
              sha256 =
                "c04d8379ce4be7fba392cf0d1429418db52de46a6ff6dc0cd64b23cb4ac496d1";
            };
            beamDeps  = [ excov_0_1_7 ];

            meta = {
              description = ''Console Reporter for ExCov'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/mrinalwadhwa/excov_reporter_console";
            };
          } // packageOverrides)
      ) {};

    excov_reporter_console = excov_reporter_console_0_1_8;

    excoveralls_0_6_5 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exjsx_4_0_0,
          hackney_1_8_6
        }:
          buildMix ({
            name = "excoveralls";
            version = "0.6.5";
            src = fetchHex {
              pkg = "excoveralls";
              version = "0.6.5";
              sha256 =
                "c82d33f3b2c7af74e44567ddf399f017a09d5c3e5491cc9208205705692b52d7";
            };
            beamDeps  = [ exjsx_4_0_0 hackney_1_8_6 ];

            meta = {
              description = ''Coverage report tool for Elixir with coveralls.io
                            integration.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/parroty/excoveralls";
            };
          } // packageOverrides)
      ) {};

    excoveralls_0_7_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exjsx_4_0_0,
          hackney_1_8_6
        }:
          buildMix ({
            name = "excoveralls";
            version = "0.7.0";
            src = fetchHex {
              pkg = "excoveralls";
              version = "0.7.0";
              sha256 =
                "57d60e97debc32d4d7009b0410b46dc693d46c83078a1c0d7e5d2a5ff96d74da";
            };
            beamDeps  = [ exjsx_4_0_0 hackney_1_8_6 ];

            meta = {
              description = ''Coverage report tool for Elixir with coveralls.io
                            integration.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/parroty/excoveralls";
            };
          } // packageOverrides)
      ) {};

    excoveralls = excoveralls_0_7_0;

    excows_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "excows";
            version = "1.0.0";
            src = fetchHex {
              pkg = "excows";
              version = "1.0.0";
              sha256 =
                "41b1e5f224440d891b862d4c5bee59a54c1932ab3396455e7cbee87271138de5";
            };

            meta = {
              description = ''Gets ASCII cows'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sotojuan/excows";
            };
          } // packageOverrides)
      ) {};

    excows = excows_1_0_0;

    exdash_0_3_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exdash";
            version = "0.3.1";
            src = fetchHex {
              pkg = "exdash";
              version = "0.3.1";
              sha256 =
                "6a2a3e3c8ea80e5a9e6641db4a109a0a1e0a09c6b7bf190a8b98fa9a650325c5";
            };

            meta = {
              description = ''Lodash implementation for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/TFarla/exdash";
            };
          } // packageOverrides)
      ) {};

    exdash = exdash_0_3_1;

    exdatadog_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_10_0,
          poison_2_2_0
        }:
          buildMix ({
            name = "exdatadog";
            version = "0.1.0";
            src = fetchHex {
              pkg = "exdatadog";
              version = "0.1.0";
              sha256 =
                "61250fc2656a0574a7cbd88aa1fa0738ac9bcb56a9862e0e25f856042e2e0160";
            };
            beamDeps  = [ httpoison_0_10_0 poison_2_2_0 ];

            meta = {
              description = ''Elixir Datadog API Client'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/kennyballou/exdatadog.git";
            };
          } // packageOverrides)
      ) {};

    exdatadog = exdatadog_0_1_0;

    exdatauri_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exdatauri";
            version = "0.2.0";
            src = fetchHex {
              pkg = "exdatauri";
              version = "0.2.0";
              sha256 =
                "d2da1d25721bb818fcb3e7b1379dd22dadcd9dde25881041a0179959522f8043";
            };

            meta = {
              description = ''A RFC 2397 URI parser for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/flupke/exdatauri";
            };
          } // packageOverrides)
      ) {};

    exdatauri = exdatauri_0_2_0;

    exddb_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, erlcloud_0_11_0 }:
          buildMix ({
            name = "exddb";
            version = "0.1.3";
            src = fetchHex {
              pkg = "exddb";
              version = "0.1.3";
              sha256 =
                "e57bd285110585476a457a843fdcff3cce6923c9472b6bec95ac9bf986dd27e4";
            };
            beamDeps  = [ erlcloud_0_11_0 ];

            meta = {
              description = ''Simple library for working with data in
                            DynamoDB.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/muhmi/exddb";
            };
          } // packageOverrides)
      ) {};

    exddb = exddb_0_1_3;

    exdesk_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_8_3,
          poison_1_5_2
        }:
          buildMix ({
            name = "exdesk";
            version = "0.2.0";
            src = fetchHex {
              pkg = "exdesk";
              version = "0.2.0";
              sha256 =
                "0c1e02bb4aef9075ff4affb3354c0e318dc3be1817faae8b450ef590c7d67688";
            };
            beamDeps  = [ httpoison_0_8_3 poison_1_5_2 ];

            meta = {
              description = ''Desk.com client library for elixir.'';

              homepage = "https://github.com/deadkarma/exdesk";
            };
          } // packageOverrides)
      ) {};

    exdesk = exdesk_0_2_0;

    exdisque_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, eredis_1_0_8 }:
          buildMix ({
            name = "exdisque";
            version = "0.0.1";
            src = fetchHex {
              pkg = "exdisque";
              version = "0.0.1";
              sha256 =
                "c3b7ec89217df46ae6cf1adadb81118877c66272266f0ee5e2c7ff45d048fb31";
            };
            beamDeps  = [ eredis_1_0_8 ];

            meta = {
              description = ''Elixir client library for Disque:
                            https://github.com/antirez/disque'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mosic/exdisque";
            };
          } // packageOverrides)
      ) {};

    exdisque = exdisque_0_0_1;

    exdjango_0_4_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          comeonin_3_0_2,
          plug_1_3_5,
          poison_1_0_2,
          poolboy_1_5_1,
          redix_0_6_1
        }:
          buildMix ({
            name = "exdjango";
            version = "0.4.0";
            src = fetchHex {
              pkg = "exdjango";
              version = "0.4.0";
              sha256 =
                "40df5f2b4b54333133ede233a3b2a7b833dac0e2feffb3a8da727057a949821a";
            };
            beamDeps  = [
                          comeonin_3_0_2
                          plug_1_3_5
                          poison_1_0_2
                          poolboy_1_5_1
                          redix_0_6_1
                        ];

            meta = {
              description = ''An elixir library for working with django'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nicksanders/exdjango";
            };
          } // packageOverrides)
      ) {};

    exdjango = exdjango_0_4_0;

    exdm_0_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, exrm_0_19_9 }:
          buildMix ({
            name = "exdm";
            version = "0.0.4";
            src = fetchHex {
              pkg = "exdm";
              version = "0.0.4";
              sha256 =
                "85e8fa483a760c46e19f0e8e0f53eb35ed74cc17f23c72d3002e47a847011e39";
            };
            beamDeps  = [ exrm_0_19_9 ];

            meta = {
              description = ''Deploy Elixir applications via mix tasks'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/joeyates/exdm";
            };
          } // packageOverrides)
      ) {};

    exdm = exdm_0_0_4;

    exdn_2_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          calendar_0_12_4,
          erldn_1_0_5
        }:
          buildMix ({
            name = "exdn";
            version = "2.1.2";
            src = fetchHex {
              pkg = "exdn";
              version = "2.1.2";
              sha256 =
                "a4414d397ccf0c86413ad18d307879f5c6c19183b430276cfb31a026dda1350c";
            };
            beamDeps  = [ calendar_0_12_4 erldn_1_0_5 ];

            meta = {
              longDescription = ''a two-way translator between Elixir data
                                structures and strings of data following the edn
                                specification.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/psfblair/exdn";
            };
          } // packageOverrides)
      ) {};

    exdn = exdn_2_1_2;

    exdns_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exjsx_3_2_1,
          folsom_0_8_3
        }:
          buildMix ({
            name = "exdns";
            version = "0.0.2";
            src = fetchHex {
              pkg = "exdns";
              version = "0.0.2";
              sha256 =
                "8b9b66f55684ae88a748a522d5ebdb9653a96274e38a2f0b6c0423be0a55edc7";
            };
            beamDeps  = [ exjsx_3_2_1 folsom_0_8_3 ];

            meta = {
              longDescription = ''exdns is an authoritative name server. It is
                                ported from erldns and adapted to the Elixir
                                language.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dnsimple/exdns";
            };
          } // packageOverrides)
      ) {};

    exdns = exdns_0_0_2;

    exdweet_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_7_5,
          poison_1_5_2
        }:
          buildMix ({
            name = "exdweet";
            version = "0.0.1";
            src = fetchHex {
              pkg = "exdweet";
              version = "0.0.1";
              sha256 =
                "2b263d5d73c7af5bd824a02b56df671a609698a96ea78cb0660dbd753118f376";
            };
            beamDeps  = [ httpoison_0_7_5 poison_1_5_2 ];

            meta = {
              description = ''Elixir/Erlang Client for Dweet'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/amit-saxena/exdweet";
            };
          } // packageOverrides)
      ) {};

    exdweet = exdweet_0_0_1;

    exec_1_0_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "exec";
            version = "1.0.1";
            src = fetchHex {
              pkg = "exec";
              version = "1.0.1";
              sha256 =
                "87c7ef2dea2bb503bb0eec8cb34776172999aecc6e12d90f7629796a7a3ccb1f";
            };
            compilePorts = true;
            buildPlugins  = [ pc ];


            meta = {
              description = ''OS Process Manager'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/saleyn/erlexec";
            };
          } // packageOverrides)
      ) {};

    exec = exec_1_0_1;

    execjs_1_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_1_5_2 }:
          buildMix ({
            name = "execjs";
            version = "1.1.3";
            src = fetchHex {
              pkg = "execjs";
              version = "1.1.3";
              sha256 =
                "a0992d14ccc3458563be305d70fd6f6f6e9db6e8b62dd4e15bf69aeb382eb074";
            };
            beamDeps  = [ poison_1_5_2 ];

            meta = {
              description = ''Run JavaScript code from Elixir'';
              license = stdenv.lib.licenses.unlicense;
              homepage = "https://github.com/devinus/execjs";
            };
          } // packageOverrides)
      ) {};

    execjs = execjs_1_1_3;

    execs_0_3_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, qlc_1_0_1 }:
          buildMix ({
            name = "execs";
            version = "0.3.1";
            src = fetchHex {
              pkg = "execs";
              version = "0.3.1";
              sha256 =
                "ee6163ceffd237abb60dc676576d21543837571215b1b1351a2a5f41477e76a6";
            };
            beamDeps  = [ qlc_1_0_1 ];

            meta = {
              longDescription = ''Provides an interface for reading and writing
                                data in an Entity Component System. Note that it
                                is up to the consuming application to implement
                                the `Systems` as this package simply makes
                                working with data easier.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mononym/execs";
            };
          } // packageOverrides)
      ) {};

    execs_0_5_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, qlc_1_0_1 }:
          buildMix ({
            name = "execs";
            version = "0.5.0";
            src = fetchHex {
              pkg = "execs";
              version = "0.5.0";
              sha256 =
                "5afb64d2052bd042276b355d93bb966dbbb684c59b6b5279a5e19e7b3bd7e705";
            };
            beamDeps  = [ qlc_1_0_1 ];

            meta = {
              longDescription = ''Provides an interface for reading and writing
                                data in an Entity Component System. Note that it
                                is up to the consuming application to implement
                                the `Systems` as this package simply makes
                                working with data easier.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mononym/execs";
            };
          } // packageOverrides)
      ) {};

    execs = execs_0_5_0;

    executor_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "executor";
            version = "0.0.3";
            src = fetchHex {
              pkg = "executor";
              version = "0.0.3";
              sha256 =
                "63610870d60ed30c3bd73e5c45684b42ecd8230a2edfbdcd983272a8308eebfd";
            };

            meta = {
              description = ''Allows for code execution in Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/MainShayne233/executor";
            };
          } // packageOverrides)
      ) {};

    executor = executor_0_0_3;

    execv_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "execv";
            version = "0.1.2";
            src = fetchHex {
              pkg = "execv";
              version = "0.1.2";
              sha256 =
                "ef0aa10ac9d67c24f7d18ca0316768d43d9f44d59437201cb82485a6fa6b9bce";
            };

            meta = {
              description = ''Elixir interface to exec system call'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/savonarola/execv";
            };
          } // packageOverrides)
      ) {};

    execv = execv_0_1_2;

    exelli_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exelli";
            version = "0.1.0";
            src = fetchHex {
              pkg = "exelli";
              version = "0.1.0";
              sha256 =
                "9777493429d5b4e3f3a9391ede7706deba65b253aa0d810efa9e26859b6f269c";
            };

            meta = {
              longDescription = ''Elli wrapper in elixir, with some sugar
                                syntax. (even 2 times faster than Plug on
                                Cowboy) '';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/pigmej/exelli";
            };
          } // packageOverrides)
      ) {};

    exelli = exelli_0_1_0;

    exemplar_0_5_0_rc1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "exemplar";
            version = "0.5.0-rc1";
            src = fetchHex {
              pkg = "exemplar";
              version = "0.5.0-rc1";
              sha256 =
                "e410ce6e1ae480ace8852f1e4d95fdef7852dfda5990174451d8b7847a5decd3";
            };

            meta = {
              longDescription = ''Markup Language Expressions for LFE: creating
                                HTML with S-expressions on the Erlang VM.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/lfex/exemplar";
            };
          } // packageOverrides)
      ) {};

    exemplar = exemplar_0_5_0_rc1;

    exenum_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exenum";
            version = "0.0.1";
            src = fetchHex {
              pkg = "exenum";
              version = "0.0.1";
              sha256 =
                "362323e683182fbc437d5938aae02a1edf5627a6c9bb77edc17eda91d0e8bf1f";
            };

            meta = {
              description = ''A simple enumeration library for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/efcasado/exenum";
            };
          } // packageOverrides)
      ) {};

    exenum = exenum_0_0_1;

    exeque_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exeque";
            version = "0.1.0";
            src = fetchHex {
              pkg = "exeque";
              version = "0.1.0";
              sha256 =
                "d860208c3a651c97cacd95e842e4dceffc84f518026c5737e93b46444f000dfa";
            };

            meta = {
              longDescription = ''Exeque allows you to queue up a list of
                                functions and specify how many workers should be
                                used to run those functions. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/duff/exeque";
            };
          } // packageOverrides)
      ) {};

    exeque = exeque_0_1_0;

    exexec_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, erlexec_1_7_1 }:
          buildMix ({
            name = "exexec";
            version = "0.1.0";
            src = fetchHex {
              pkg = "exexec";
              version = "0.1.0";
              sha256 =
                "b2a3a4bf3aadbc3b4a277cd503c25f39b5bf2bab7c8929a1c7969094b03fe4ec";
            };
            beamDeps  = [ erlexec_1_7_1 ];

            meta = {
              description = ''An idiomatic Elixir wrapper for erlexec.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/antipax/exexec";
            };
          } // packageOverrides)
      ) {};

    exexec = exexec_0_1_0;

    exexif_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exexif";
            version = "0.0.1";
            src = fetchHex {
              pkg = "exexif";
              version = "0.0.1";
              sha256 =
                "48db21d8a77a9f922046ad6018266c0df32efb82331113ccb787e08fb7464a74";
            };

            meta = {
              longDescription = ''Read TIFF and EXIF information from a
                                JPEG-format image. iex> {:ok, info} =
                                Exexif.exif_from_jpeg_buffer(buffer) iex>
                                info.x_resolution 72 iex> info.model
                                \"DSC-RX100M2\" ...> Exexif.Data.Gps.inspect
                                info \"41°23´16˝N,2°11´50˝E\"'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/pragdave/exexif";
            };
          } // packageOverrides)
      ) {};

    exexif = exexif_0_0_1;

    exfacebook_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_1_0_2
        }:
          buildMix ({
            name = "exfacebook";
            version = "0.1.1";
            src = fetchHex {
              pkg = "exfacebook";
              version = "0.1.1";
              sha256 =
                "16cc41d203bf8a5062f458fba8fb1070271ca0bb6439832c27ad39fd6a4888a0";
            };
            beamDeps  = [ httpoison_0_11_2 poison_1_0_2 ];

            meta = {
              description = ''Facebook API'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/oivoodoo/exfacebook";
            };
          } // packageOverrides)
      ) {};

    exfacebook = exfacebook_0_1_1;

    exfacts_0_1_9 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          poison_3_1_0,
          porcelain_2_0_3
        }:
          buildMix ({
            name = "exfacts";
            version = "0.1.9";
            src = fetchHex {
              pkg = "exfacts";
              version = "0.1.9";
              sha256 =
                "f7244cfba939e61fb5809211f1ceb89c10f4205c91f318a3443e51920a74fbfd";
            };
            beamDeps  = [ poison_3_1_0 porcelain_2_0_3 ];

            meta = {
              description = ''A library for collection a variety of system
                            facts.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nwlucas/exfacts";
            };
          } // packageOverrides)
      ) {};

    exfacts = exfacts_0_1_9;

    exfasta_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exfasta";
            version = "1.0.0";
            src = fetchHex {
              pkg = "exfasta";
              version = "1.0.0";
              sha256 =
                "8e476a2c6bcdbaf974a01539920b78a73da7a987a8897d33139f6e5f8a295b0e";
            };

            meta = {
              description = ''A simple module for working with FASTA-formatted
                            strings.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nscyclone/exfasta";
            };
          } // packageOverrides)
      ) {};

    exfasta = exfasta_1_0_0;

    exfavicon_0_3_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          floki_0_17_2,
          httpoison_0_11_2
        }:
          buildMix ({
            name = "exfavicon";
            version = "0.3.3";
            src = fetchHex {
              pkg = "exfavicon";
              version = "0.3.3";
              sha256 =
                "f1c5aa3506c90ba28e6f3ddcf3e9feda8518af1b4b12a6d2f518f86a10d1719b";
            };
            beamDeps  = [ floki_0_17_2 httpoison_0_11_2 ];

            meta = {
              description = ''A exfavicon to detect a site`s favicon.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ikeikeikeike/exfavicon";
            };
          } // packageOverrides)
      ) {};

    exfavicon = exfavicon_0_3_3;

    exfcm_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_9_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "exfcm";
            version = "0.1.0";
            src = fetchHex {
              pkg = "exfcm";
              version = "0.1.0";
              sha256 =
                "2e160451f07e0f4437afb7c47e961f76834e1fc50ff6218488ce4a0feea176e4";
            };
            beamDeps  = [ httpoison_0_9_2 poison_3_1_0 ];

            meta = {
              description = ''Simple wrapper around Firebase Cloud Messaging
                            that uses HTTPoison.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/Hajto/ExFCM";
            };
          } // packageOverrides)
      ) {};

    exfcm = exfcm_0_1_0;

    exfile_0_1_5 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_0_0_rc_6,
          phoenix_html_2_9_3,
          plug_1_1_7
        }:
          buildMix ({
            name = "exfile";
            version = "0.1.5";
            src = fetchHex {
              pkg = "exfile";
              version = "0.1.5";
              sha256 =
                "b2aee601b1db3ef5a8c5c638da287ec59153a21fb3b8bdbe0bd404d1e20696a1";
            };
            beamDeps  = [ ecto_2_0_0_rc_6 phoenix_html_2_9_3 plug_1_1_7 ];

            meta = {
              description = ''File upload persistence and processing for
                            Phoenix / Plug.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/keichan34/exfile";
            };
          } // packageOverrides)
      ) {};

    exfile_0_3_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_1_0_1,
          phoenix_1_3_0_rc_2,
          phoenix_html_2_9_3,
          plug_1_3_5,
          poison_1_0_2
        }:
          buildMix ({
            name = "exfile";
            version = "0.3.4";
            src = fetchHex {
              pkg = "exfile";
              version = "0.3.4";
              sha256 =
                "a3a5093296e7bb87f9c593fd437a18a8fbe9fd967ebc74cab758cebb29e0d92a";
            };
            beamDeps  = [
                          ecto_1_0_1
                          phoenix_1_3_0_rc_2
                          phoenix_html_2_9_3
                          plug_1_3_5
                          poison_1_0_2
                        ];

            meta = {
              description = ''File upload persistence and processing for
                            Phoenix / Plug.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/keichan34/exfile";
            };
          } // packageOverrides)
      ) {};

    exfile = exfile_0_3_4;

    exfile_b2_0_2_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          b2_client_0_0_2,
          exfile_0_3_4
        }:
          buildMix ({
            name = "exfile_b2";
            version = "0.2.2";
            src = fetchHex {
              pkg = "exfile_b2";
              version = "0.2.2";
              sha256 =
                "52811ac2c3bff65b5e4a1273b1dfeeb0cc7260fc4ef29699371cc43e9302bc76";
            };
            beamDeps  = [ b2_client_0_0_2 exfile_0_3_4 ];

            meta = {
              description = ''A Backblaze B2 storage backend adapter for
                            Exfile.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/keichan34/exfile-b2";
            };
          } // packageOverrides)
      ) {};

    exfile_b2 = exfile_b2_0_2_2;

    exfile_encryption_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, exfile_0_3_4 }:
          buildMix ({
            name = "exfile_encryption";
            version = "0.0.2";
            src = fetchHex {
              pkg = "exfile_encryption";
              version = "0.0.2";
              sha256 =
                "fedd07119b46e48616e686d63404b94f81dd90674183360c5dfb524a6206e399";
            };
            beamDeps  = [ exfile_0_3_4 ];

            meta = {
              description = ''Transparent backend encryption / decryption for
                            Exfile.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/keichan34/exfile-encryption";
            };
          } // packageOverrides)
      ) {};

    exfile_encryption = exfile_encryption_0_0_2;

    exfile_imagemagick_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, exfile_0_3_4 }:
          buildMix ({
            name = "exfile_imagemagick";
            version = "0.1.2";
            src = fetchHex {
              pkg = "exfile_imagemagick";
              version = "0.1.2";
              sha256 =
                "9122bb4fede10b1f2adb36f7acbfb3c12b81c0125e3d5164061b18aebb533257";
            };
            beamDeps  = [ exfile_0_3_4 ];

            meta = {
              description = ''An ImageMagick file processor suite for
                            Exfile.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/keichan34/exfile-imagemagick";
            };
          } // packageOverrides)
      ) {};

    exfile_imagemagick = exfile_imagemagick_0_1_2;

    exfile_memory_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, exfile_0_1_5 }:
          buildMix ({
            name = "exfile_memory";
            version = "0.1.0";
            src = fetchHex {
              pkg = "exfile_memory";
              version = "0.1.0";
              sha256 =
                "66330c408a73094d115227d0e16b936229721e16703197559a828bfb7795f9d7";
            };
            beamDeps  = [ exfile_0_1_5 ];

            meta = {
              description = ''In-memory (ets) storage backend for Exfile.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/keichan34/exfile-memory";
            };
          } // packageOverrides)
      ) {};

    exfile_memory = exfile_memory_0_1_0;

    exfile_s3_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ex_aws_1_0_0_rc_4,
          exfile_0_3_4,
          httpoison_0_11_2,
          poison_1_0_2,
          sweet_xml_0_6_5
        }:
          buildMix ({
            name = "exfile_s3";
            version = "0.0.2";
            src = fetchHex {
              pkg = "exfile_s3";
              version = "0.0.2";
              sha256 =
                "3a4d3ac1aecef0794638fff638f7a10c3dd6199d8e77706c8bc0a791f6b7f835";
            };
            beamDeps  = [
                          ex_aws_1_0_0_rc_4
                          exfile_0_3_4
                          httpoison_0_11_2
                          poison_1_0_2
                          sweet_xml_0_6_5
                        ];

            meta = {
              longDescription = ''An AWS S3 adapter for Exfile, using the
                                ex_aws client library to interface with S3.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/MattNguyen/exfile-s3";
            };
          } // packageOverrides)
      ) {};

    exfile_s3 = exfile_s3_0_0_2;

    exfirebase_0_4_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exjsx_3_2_1,
          httpotion_2_2_2
        }:
          buildMix ({
            name = "exfirebase";
            version = "0.4.0";
            src = fetchHex {
              pkg = "exfirebase";
              version = "0.4.0";
              sha256 =
                "acd2f1fe87e83437a5d52b811b3e86bc75933bc29b0daa2da836a97ddd60b478";
            };
            beamDeps  = [ exjsx_3_2_1 httpotion_2_2_2 ];

            meta = {
              description = ''An elixir library for accessing the Firebase REST
                            API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/parroty/exfirebase";
            };
          } // packageOverrides)
      ) {};

    exfirebase = exfirebase_0_4_0;

    exfmt_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exfmt";
            version = "0.2.1";
            src = fetchHex {
              pkg = "exfmt";
              version = "0.2.1";
              sha256 =
                "9de51cd45cf90ef0eb681f0ca0c753c39a69de25dd50b5b771f0ea6b9055ff41";
            };

            meta = {
              description = ''An opinionated Elixir source code formatter'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/lpil/exfmt";
            };
          } // packageOverrides)
      ) {};

    exfmt = exfmt_0_2_1;

    exfoaas_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_8_3,
          poison_2_2_0
        }:
          buildMix ({
            name = "exfoaas";
            version = "0.0.2";
            src = fetchHex {
              pkg = "exfoaas";
              version = "0.0.2";
              sha256 =
                "521f355f8c38c056f66cd8ac236f561c2a3502e451c07a88761e05c22c8848aa";
            };
            beamDeps  = [ httpoison_0_8_3 poison_2_2_0 ];

            meta = {
              description = ''brings the utility of FOAAS to elixir.'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/cryptobird/ExFOAAS.git";
            };
          } // packageOverrides)
      ) {};

    exfoaas = exfoaas_0_0_2;

    exfsm_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exfsm";
            version = "0.1.3";
            src = fetchHex {
              pkg = "exfsm";
              version = "0.1.3";
              sha256 =
                "6535a0565d6013ca728c10e11c9ac85216d995652892469f7380147da8c3d727";
            };

            meta = {
              longDescription = ''Simple elixir library to define composable
                                FSM as function (not related at all with
                                `:gen_fsm`, no state/process management)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/awetzel/exfsm";
            };
          } // packageOverrides)
      ) {};

    exfsm = exfsm_0_1_3;

    exfswatch_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, fs_3_4_0 }:
          buildMix ({
            name = "exfswatch";
            version = "0.2.1";
            src = fetchHex {
              pkg = "exfswatch";
              version = "0.2.1";
              sha256 =
                "53eac4d43f907688051422cc4d5f99677a1c1515939dec1c659b6f8337b3d251";
            };
            beamDeps  = [ fs_3_4_0 ];

            meta = {
              description = ''A file change watcher wrapper based on
                            [fs](https://github.com/synrc/fs)'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/falood/exfswatch";
            };
          } // packageOverrides)
      ) {};

    exfswatch_0_4_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exfswatch";
            version = "0.4.2";
            src = fetchHex {
              pkg = "exfswatch";
              version = "0.4.2";
              sha256 =
                "6d1b5e0d07b6a7b83b3efff9e64faa6e1215cf24094dbd68cc2e87d126c2c175";
            };

            meta = {
              description = ''A file change watcher wrapper based on
                            [fs](https://github.com/synrc/fs)'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/falood/exfswatch";
            };
          } // packageOverrides)
      ) {};

    exfswatch = exfswatch_0_4_2;

    exfuck_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exfuck";
            version = "0.1.0";
            src = fetchHex {
              pkg = "exfuck";
              version = "0.1.0";
              sha256 =
                "c71358ae7a31682d84f89f7f5fdc1c6b545ea93f70391a9ec15987458d70dbe8";
            };

            meta = {
              description = ''Brainfuck interpreter written in elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/shiroyasha/exfuck";
            };
          } // packageOverrides)
      ) {};

    exfuck = exfuck_0_1_0;

    exgenius_0_0_5 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exjsx_3_2_1,
          httpoison_0_11_2
        }:
          buildMix ({
            name = "exgenius";
            version = "0.0.5";
            src = fetchHex {
              pkg = "exgenius";
              version = "0.0.5";
              sha256 =
                "f0f4463ac9ad79a102a1bf0ded91d77ed87ce262da6045990be51450ef240fd5";
            };
            beamDeps  = [ exjsx_3_2_1 httpoison_0_11_2 ];

            meta = {
              longDescription = '' Elixir library for the (undocumented) Rap
                                Genius (and also Rock, Tech, Pop, Country, etc)
                                API '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jeffweiss/exgenius";
            };
          } // packageOverrides)
      ) {};

    exgenius = exgenius_0_0_5;

    exgingerapi_0_0_6 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_8_3,
          poison_2_0_1
        }:
          buildMix ({
            name = "exgingerapi";
            version = "0.0.6";
            src = fetchHex {
              pkg = "exgingerapi";
              version = "0.0.6";
              sha256 =
                "77015a044a042be3f119053b28e613aff6363dbcf36ba985b64bcb32fd895797";
            };
            beamDeps  = [ httpoison_0_8_3 poison_2_0_1 ];

            meta = {
              description = ''Elixir wrapper for ginger proofreading API
                            (english)'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/nathanjohnson320/exgingerapi";
            };
          } // packageOverrides)
      ) {};

    exgingerapi = exgingerapi_0_0_6;

    exgpg_0_0_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          porcelain_2_0_3,
          uuid_0_1_5
        }:
          buildMix ({
            name = "exgpg";
            version = "0.0.3";
            src = fetchHex {
              pkg = "exgpg";
              version = "0.0.3";
              sha256 =
                "13499da2a59567f87f5293cc874ab1256e88089784645d997406d8f95978319a";
            };
            beamDeps  = [ porcelain_2_0_3 uuid_0_1_5 ];

            meta = {    };
          } // packageOverrides)
      ) {};

    exgpg = exgpg_0_0_3;

    exgrafana_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "exgrafana";
            version = "0.1.1";
            src = fetchHex {
              pkg = "exgrafana";
              version = "0.1.1";
              sha256 =
                "8c660b1045008821f3f185742a52875a835f8e8d9e39cd6c96548e4900ea21a7";
            };
            beamDeps  = [ httpoison_0_11_2 poison_2_2_0 ];

            meta = {
              description = ''Grafana client library.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gmtprime/exgrafana";
            };
          } // packageOverrides)
      ) {};

    exgrafana = exgrafana_0_1_1;

    exgravatar_2_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exgravatar";
            version = "2.0.0";
            src = fetchHex {
              pkg = "exgravatar";
              version = "2.0.0";
              sha256 =
                "ddfcfc899f24fd98c811a6824964c85b5c87a60f41fe034380081680d5c8e765";
            };

            meta = {
              description = ''An Elixir module for generating Gravatar urls.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/scrogson/exgravatar";
            };
          } // packageOverrides)
      ) {};

    exgravatar = exgravatar_2_0_0;

    exgrid_0_4_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_2_2_1,
          ibrowse_4_4_0,
          json_0_3_3,
          timex_3_0_5
        }:
          buildMix ({
            name = "exgrid";
            version = "0.4.0";
            src = fetchHex {
              pkg = "exgrid";
              version = "0.4.0";
              sha256 =
                "6a62a3ecf7eca88d9a1daee3223d21442a12c328c5dbd7455c957db91e2183f6";
            };
            beamDeps  = [
                          httpotion_2_2_1 ibrowse_4_4_0 json_0_3_3 timex_3_0_5
                        ];

            meta = {
              description = ''Elixir bindings for SendGrid`s REST API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bradleyd/exgrid";
            };
          } // packageOverrides)
      ) {};

    exgrid = exgrid_0_4_0;

    exhal_5_2_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_8_3,
          poison_2_2_0,
          uri_template_1_2_0
        }:
          buildMix ({
            name = "exhal";
            version = "5.2.1";
            src = fetchHex {
              pkg = "exhal";
              version = "5.2.1";
              sha256 =
                "9432a0104f76b112bc5867b635ab99d170fad4b529a17d6fcc82241b553db41d";
            };
            beamDeps  = [ httpoison_0_8_3 poison_2_2_0 uri_template_1_2_0 ];

            meta = {
              description = ''Use HAL APIs with ease'';
              license = stdenv.lib.licenses.free;
            };
          } // packageOverrides)
      ) {};

    exhal = exhal_5_2_1;

    exhcl_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exhcl";
            version = "0.2.1";
            src = fetchHex {
              pkg = "exhcl";
              version = "0.2.1";
              sha256 =
                "9c7ab6216cd978b2dd3f6573dd3ccf0a9d5055b36008a0ada01d9431198c17f7";
            };

            meta = {
              description = ''Configuration language inspired by HCL'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/asakura/exhcl";
            };
          } // packageOverrides)
      ) {};

    exhcl = exhcl_0_2_1;

    exhn_1_1_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_10_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "exhn";
            version = "1.1.3";
            src = fetchHex {
              pkg = "exhn";
              version = "1.1.3";
              sha256 =
                "6840ad61d34b20630068bdf697fc13520f2cffe71c168a81697d56a53efdaff9";
            };
            beamDeps  = [ httpoison_0_10_0 poison_3_1_0 ];

            meta = {
              description = ''Streaming Hacker News API client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sotojuan/exhn";
            };
          } // packageOverrides)
      ) {};

    exhn = exhn_1_1_3;

    exhtml_0_3_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exhtml";
            version = "0.3.1";
            src = fetchHex {
              pkg = "exhtml";
              version = "0.3.1";
              sha256 =
                "a3d380cfeda40a8785328a5c14f3878a9d37a3155ab39d76307da1c8baf8a047";
            };

            meta = {
              description = ''An HTML page server used for quickly update
                            contents.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/qhwa/exhtml";
            };
          } // packageOverrides)
      ) {};

    exhtml = exhtml_0_3_1;

    exhue_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "exhue";
            version = "0.1.0";
            src = fetchHex {
              pkg = "exhue";
              version = "0.1.0";
              sha256 =
                "b7aac376af74e06b96a2aef43d7d3216047c5d6745f746829aa691842f50a19d";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''A simple api client for the phillips hue light
                            bridge.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/jodyalbritton/exhue";
            };
          } // packageOverrides)
      ) {};

    exhue = exhue_0_1_0;

    exi18n_0_6_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          poison_3_1_0,
          tesla_0_7_1,
          yaml_elixir_1_3_0
        }:
          buildMix ({
            name = "exi18n";
            version = "0.6.0";
            src = fetchHex {
              pkg = "exi18n";
              version = "0.6.0";
              sha256 =
                "b69cc8f34dc3db3e79dcf7696667511d025caafcb0ae035421af7f14d13b1dd6";
            };
            beamDeps  = [ poison_3_1_0 tesla_0_7_1 yaml_elixir_1_3_0 ];

            meta = {
              description = ''ExI18n - key-based internationalization
                            library.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gvl/exi18n";
            };
          } // packageOverrides)
      ) {};

    exi18n = exi18n_0_6_0;

    exiban_0_0_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exiban";
            version = "0.0.5";
            src = fetchHex {
              pkg = "exiban";
              version = "0.0.5";
              sha256 =
                "acddde30fb316000425a741cd731b20099a4193144ea149d138ddcfbf97ee0e8";
            };

            meta = {
              description = ''Library for manipulating and validating IBAN
                            account numbers.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kkempin/exiban";
            };
          } // packageOverrides)
      ) {};

    exiban = exiban_0_0_5;

    exintercom_0_1_6 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_8_3,
          poison_1_0_2
        }:
          buildMix ({
            name = "exintercom";
            version = "0.1.6";
            src = fetchHex {
              pkg = "exintercom";
              version = "0.1.6";
              sha256 =
                "3e4e112dc29a36244b490bb6fb40c861be12e70a7723323520430059c3ffeb51";
            };
            beamDeps  = [ httpoison_0_8_3 poison_1_0_2 ];

            meta = {
              description = ''Intercom client library.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/versality/exintercom";
            };
          } // packageOverrides)
      ) {};

    exintercom = exintercom_0_1_6;

    exirc_0_10_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exirc";
            version = "0.10.0";
            src = fetchHex {
              pkg = "exirc";
              version = "0.10.0";
              sha256 =
                "f2382ad3d97e791cc38ce54558296bb0afe7d222dc5f248ec72c6a0ca9c494a8";
            };

            meta = {
              description = ''An IRC client library for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bitwalker/exirc";
            };
          } // packageOverrides)
      ) {};

    exirc_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exirc";
            version = "1.0.1";
            src = fetchHex {
              pkg = "exirc";
              version = "1.0.1";
              sha256 =
                "15b39f1b5146e4f18e599e1a86e5eafb7e126ad7a602d2d87d4fd2e7d76095f2";
            };

            meta = {
              description = ''An IRC client library for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bitwalker/exirc";
            };
          } // packageOverrides)
      ) {};

    exirc = exirc_1_0_1;

    exjira_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          dotenv_2_0_0,
          poison_1_5_2
        }:
          buildMix ({
            name = "exjira";
            version = "0.0.1";
            src = fetchHex {
              pkg = "exjira";
              version = "0.0.1";
              sha256 =
                "da992f593939629300ddf90c0aafbcafb05c4c7e5f817c3a76dd7c0ac43f8575";
            };
            beamDeps  = [ dotenv_2_0_0 poison_1_5_2 ];

            meta = {
              description = ''JIRA client library for Elixir '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mattweldon/exjira";
            };
          } // packageOverrides)
      ) {};

    exjira = exjira_0_0_1;

    exjson_0_6_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exjson";
            version = "0.6.0";
            src = fetchHex {
              pkg = "exjson";
              version = "0.6.0";
              sha256 =
                "ee0901c33fe3b31c6d3243de845cfbddf0db537ed7a74ed7b81f418ef09bfd91";
            };

            meta = {
              description = ''A simple Elixir implementation of JSON with an
                            Erlang parser.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/guedes/exjson";
            };
          } // packageOverrides)
      ) {};

    exjson = exjson_0_6_0;

    exjsx_3_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, jsx_2_5_3 }:
          buildMix ({
            name = "exjsx";
            version = "3.0.2";
            src = fetchHex {
              pkg = "exjsx";
              version = "3.0.2";
              sha256 =
                "2cd67240a54e9cd2616bc83c0c352d47f87bccd2ec599eceedc00bcbe9063f07";
            };
            beamDeps  = [ jsx_2_5_3 ];

            meta = {
              description = ''json for elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/talentdeficit/exjsx";
            };
          } // packageOverrides)
      ) {};

    exjsx_3_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, jsx_2_5_3 }:
          buildMix ({
            name = "exjsx";
            version = "3.1.0";
            src = fetchHex {
              pkg = "exjsx";
              version = "3.1.0";
              sha256 =
                "588a0b67ed0c45b21f018515fc478efac83c088661bd588831e41c9073a818fb";
            };
            beamDeps  = [ jsx_2_5_3 ];

            meta = {
              description = ''json for elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/talentdeficit/exjsx";
            };
          } // packageOverrides)
      ) {};

    exjsx_3_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, jsx_2_8_2 }:
          buildMix ({
            name = "exjsx";
            version = "3.2.1";
            src = fetchHex {
              pkg = "exjsx";
              version = "3.2.1";
              sha256 =
                "b55727b206dab96feb025267e5c122ddb448f55b6648f9156b8d481215d80290";
            };
            beamDeps  = [ jsx_2_8_2 ];

            meta = {
              description = ''json for elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/talentdeficit/exjsx";
            };
          } // packageOverrides)
      ) {};

    exjsx_4_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, jsx_2_8_2 }:
          buildMix ({
            name = "exjsx";
            version = "4.0.0";
            src = fetchHex {
              pkg = "exjsx";
              version = "4.0.0";
              sha256 =
                "32e95820a97cffea67830e91514a2ad53b888850442d6d395f53a1ac60c82e07";
            };
            beamDeps  = [ jsx_2_8_2 ];

            meta = {
              description = ''json for elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/talentdeficit/exjsx";
            };
          } // packageOverrides)
      ) {};

    exjsx = exjsx_4_0_0;

    exkad_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_0_4,
          httpotion_2_2_1,
          plug_1_1_7,
          poison_1_2_1,
          socket_0_3_3
        }:
          buildMix ({
            name = "exkad";
            version = "0.0.2";
            src = fetchHex {
              pkg = "exkad";
              version = "0.0.2";
              sha256 =
                "b12f4e48ed460521ae3b79895d1e8c43ed24df54260e5519e58708ff76468afb";
            };
            beamDeps  = [
                          cowboy_1_0_4
                          httpotion_2_2_1
                          plug_1_1_7
                          poison_1_2_1
                          socket_0_3_3
                        ];

            meta = {
              description = ''A simple kademlia implementation'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rozap/exkad";
            };
          } // packageOverrides)
      ) {};

    exkad = exkad_0_0_2;

    exkanji_0_3_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, exromaji_0_4_3 }:
          buildMix ({
            name = "exkanji";
            version = "0.3.1";
            src = fetchHex {
              pkg = "exkanji";
              version = "0.3.1";
              sha256 =
                "cd0c7029be10e061e787f47c9396026fe7f4839c49ba3322f8053f60e2229720";
            };
            beamDeps  = [ exromaji_0_4_3 ];

            meta = {
              longDescription = ''A Elixir library for translating between
                                hiragana, katakana, romaji, kanji and sound. It
                                uses Mecab.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ikeikeikeike/exkanji";
            };
          } // packageOverrides)
      ) {};

    exkanji = exkanji_0_3_1;

    exkismet_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_8_3,
          poison_1_5_2
        }:
          buildMix ({
            name = "exkismet";
            version = "0.0.2";
            src = fetchHex {
              pkg = "exkismet";
              version = "0.0.2";
              sha256 =
                "3648f010eb80891b0195f9ced0e02a5a08860a9d96e8f7bbe328c68f27b85b64";
            };
            beamDeps  = [ httpoison_0_8_3 poison_1_5_2 ];

            meta = {
              description = ''A client (completely unofficial) for the
                            Akismet.com comment-spam detection API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cameronp/exkismet";
            };
          } // packageOverrides)
      ) {};

    exkismet = exkismet_0_0_2;

    exkorpion_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exkorpion";
            version = "0.0.3";
            src = fetchHex {
              pkg = "exkorpion";
              version = "0.0.3";
              sha256 =
                "12b2409015a8223006fcec84db13377722cf7d5db66c2f91ca32941253de2c07";
            };

            meta = {
              description = ''Test framework to help developers to write tests
                            in a BDD form.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/wesovilabs/exkorpion";
            };
          } // packageOverrides)
      ) {};

    exkorpion = exkorpion_0_0_3;

    exlastic_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exlastic";
            version = "0.1.0";
            src = fetchHex {
              pkg = "exlastic";
              version = "0.1.0";
              sha256 =
                "f5fb5c4e0052b022360552fdb8c6deabf537f1adf91af60eba506d34b2bf4bc2";
            };

            meta = {
              description = ''Work in progress.'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    exlastic = exlastic_0_1_0;

    exldap_0_4_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exldap";
            version = "0.4.1";
            src = fetchHex {
              pkg = "exldap";
              version = "0.4.1";
              sha256 =
                "14b577a80b86c8978427b43f2bc25eba419aec47bb1ee97e758ac45760e69a2c";
            };

            meta = {
              description = ''A module for working with LDAP from Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jmerriweather/exldap";
            };
          } // packageOverrides)
      ) {};

    exldap = exldap_0_4_1;

    exleveldb_0_11_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, eleveldb_2_2_20 }:
          buildMix ({
            name = "exleveldb";
            version = "0.11.1";
            src = fetchHex {
              pkg = "exleveldb";
              version = "0.11.1";
              sha256 =
                "7ce991fded10dcbb6a50fa3490622c762c4aed33c3b3478832e22abf476e5b3b";
            };
            beamDeps  = [ eleveldb_2_2_20 ];

            meta = {
              longDescription = ''Exleveldb is a thin wrapper around Basho`s
                                eleveldb (github.com/basho/eleveldb). At the
                                moment, Exleveldb exposes functions for all
                                features of LevelDB as well as an Elixir stream
                                interface to Eleveldb`s iterators.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/skovsgaard/exleveldb.git";
            };
          } // packageOverrides)
      ) {};

    exleveldb = exleveldb_0_11_1;

    exlibris_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exlibris";
            version = "0.0.1";
            src = fetchHex {
              pkg = "exlibris";
              version = "0.0.1";
              sha256 =
                "c6f957233b464eeddf590bad43368427ee9c715470e89d2f348d7d01935ad7be";
            };

            meta = {
              longDescription = ''A collection of random library functions I
                                use across multiple projects: pipe_while_ok:
                                Create pipelines that terminate early if any
                                step fails to return a tuple that starts {:ok,
                                ...} before_returning: Like Ruby`s returning, it
                                evaluates its first argument, then evalates the
                                do block. It always returns the value of its
                                first argument. '';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/pragdave/exlibris";
            };
          } // packageOverrides)
      ) {};

    exlibris = exlibris_0_0_1;

    exling_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_3_1_0 }:
          buildMix ({
            name = "exling";
            version = "0.1.2";
            src = fetchHex {
              pkg = "exling";
              version = "0.1.2";
              sha256 =
                "563299af84e63dd4860229643d7eff964e405bc8adcbde529dc81335077cd6e4";
            };
            beamDeps  = [ poison_3_1_0 ];

            meta = {
              description = ''Exling is an HTTP request builder.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://gitlab.com/joshrotenberg/exling";
            };
          } // packageOverrides)
      ) {};

    exling = exling_0_1_2;

    exlingr_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exlingr";
            version = "0.0.1";
            src = fetchHex {
              pkg = "exlingr";
              version = "0.0.1";
              sha256 =
                "b45acd0e10f719b88c943b3194b7fded6ece9874c7da2c1f18b2ce2425581701";
            };

            meta = {
              description = ''Lingr client library for elixir. '';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/mtwtkman/exlingr";
            };
          } // packageOverrides)
      ) {};

    exlingr = exlingr_0_0_1;

    exlist_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exlist";
            version = "0.1.2";
            src = fetchHex {
              pkg = "exlist";
              version = "0.1.2";
              sha256 =
                "78059c30851f1cfda58fb12be9aef753777709c6b482f0f6f3f06f908bac02a5";
            };

            meta = {
              longDescription = ''The extended functions of the lists which are
                                not available in the default List Module and
                                some basic mathematical operations on the list
                                alog with some regular functions'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/blackode/exlist";
            };
          } // packageOverrides)
      ) {};

    exlist = exlist_0_1_2;

    exlua_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exlua";
            version = "0.3.0";
            src = fetchHex {
              pkg = "exlua";
              version = "0.3.0";
              sha256 =
                "f78e6e854f427e77d516a65300a7b11177e9aa7f9c736cb98b6c39acc0b69d6f";
            };

            meta = {
              description = ''Lua for Elixir.'';
              license = stdenv.lib.licenses.publicDomain;
              homepage = "https://github.com/bendiken/exlua";
            };
          } // packageOverrides)
      ) {};

    exlua = exlua_0_3_0;

    exmagick_0_0_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exmagick";
            version = "0.0.5";
            src = fetchHex {
              pkg = "exmagick";
              version = "0.0.5";
              sha256 =
                "a15d4055d0d40818cdc76fd9182e49fe5ef5e75304d752263027a080e8b2524d";
            };

            meta = {
              longDescription = ''ExMagick is a library for manipulating images
                                interfacing with GraphicsMagick. It`s
                                implemented using Erlang NIFs (Native
                                Implemented Functions).'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/Xerpa/exmagick";
            };
          } // packageOverrides)
      ) {};

    exmagick = exmagick_0_0_5;

    exmath_0_2_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exmath";
            version = "0.2.5";
            src = fetchHex {
              pkg = "exmath";
              version = "0.2.5";
              sha256 =
                "8b5332e5d4c61c5a697df36e7461e040c42241431ee15f63ef15fb7734a9afc4";
            };

            meta = {
              longDescription = ''A library for performing some math operations
                                that I frequently use in maths at school. Mainly
                                related to probabilistic maths.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/fredrikaugust/exmath";
            };
          } // packageOverrides)
      ) {};

    exmath = exmath_0_2_5;

    exmatrix_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, benchfella_0_3_4 }:
          buildMix ({
            name = "exmatrix";
            version = "0.0.1";
            src = fetchHex {
              pkg = "exmatrix";
              version = "0.0.1";
              sha256 =
                "58fe316b1ee31f9394f246ec91a6a9157dfae0c38ea649a4c11f70976ca1d13b";
            };
            beamDeps  = [ benchfella_0_3_4 ];

            meta = {
              longDescription = ''ExMatrix is a small library for working with
                                matrices, originally developed for testing
                                matrix multiplication in parallel.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/a115/exmatrix";
            };
          } // packageOverrides)
      ) {};

    exmatrix = exmatrix_0_0_1;

    exmen_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exmen";
            version = "0.1.0";
            src = fetchHex {
              pkg = "exmen";
              version = "0.1.0";
              sha256 =
                "13727408ee6c398698787e7101082c48d4c9f20d10abe2c70195d0c60aec8c22";
            };

            meta = {
              description = ''A marvelous mutation testing tool for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/TFarla/exmen";
            };
          } // packageOverrides)
      ) {};

    exmen = exmen_0_1_0;

    exmerl_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exmerl";
            version = "0.1.1";
            src = fetchHex {
              pkg = "exmerl";
              version = "0.1.1";
              sha256 =
                "4bb5d6c1863c5e381b460416c9b517a211db9abd9abf0f32c99b07e128b842aa";
            };

            meta = {
              description = ''An Elixir wrapper for parsing XML through the
                            xmerl_* suite of modules '';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/pwoolcoc/exmerl";
            };
          } // packageOverrides)
      ) {};

    exmerl = exmerl_0_1_1;

    exmetrics_1_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exmetrics";
            version = "1.1.0";
            src = fetchHex {
              pkg = "exmetrics";
              version = "1.1.0";
              sha256 =
                "1f4645ca0e9ef9b1815c0b301ff2f9a5b5548bc45adb68386cb6529998513d1b";
            };

            meta = {
              longDescription = ''Exmetrics provides counters, gauges and
                                histograms for instrumenting an elixir
                                application.'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    exmetrics = exmetrics_1_1_0;

    exml_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exml";
            version = "0.1.1";
            src = fetchHex {
              pkg = "exml";
              version = "0.1.1";
              sha256 =
                "7e6928a1cdb6cbf470875c75b192b348ffff5adfabd661923585a87ee85535e1";
            };

            meta = {
              description = ''Most simple Elixir wrapper for xmerl xpath'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/expelledboy/exml";
            };
          } // packageOverrides)
      ) {};

    exml = exml_0_1_1;

    exmoji_0_2_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_1_5_2 }:
          buildMix ({
            name = "exmoji";
            version = "0.2.2";
            src = fetchHex {
              pkg = "exmoji";
              version = "0.2.2";
              sha256 =
                "d0123ec6fd14506da93b0e8fdb7c2efa819cc69addeb56a78f3c1e0b8a09d015";
            };
            beamDeps  = [ poison_1_5_2 ];

            meta = {
              description = ''Emoji encoding swiss army knife for dealing with
                            Unicode and other gotchas.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mroth/exmoji";
            };
          } // packageOverrides)
      ) {};

    exmoji = exmoji_0_2_2;

    exmorph_1_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exmorph";
            version = "1.1.0";
            src = fetchHex {
              pkg = "exmorph";
              version = "1.1.0";
              sha256 =
                "ae6cc065c9f10ddc459ffa2a48ee729e1bfd507e9c46994bfb5ae27d801e5843";
            };

            meta = {
              description = ''A simple tweening and data transformation library
                            for Elixir'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/supernintendo/exmorph";
            };
          } // packageOverrides)
      ) {};

    exmorph = exmorph_1_1_0;

    exmqttc_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, uuid_1_1_7 }:
          buildMix ({
            name = "exmqttc";
            version = "0.2.0";
            src = fetchHex {
              pkg = "exmqttc";
              version = "0.2.0";
              sha256 =
                "1928d78bfe8966113bb01c3b9ee22155ca17aee8e497171d454f6fc4cd4e34f9";
            };
            beamDeps  = [ uuid_1_1_7 ];

            meta = {
              longDescription = ''Elixir wrapper for the emqttc library. Some
                                of the features: Reconnection, offline queueing,
                                gen_* like callback APIs, QoS 0-2.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/timbuchwaldt/exmqttc";
            };
          } // packageOverrides)
      ) {};

    exmqttc = exmqttc_0_2_0;

    exmud_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          apex_0_5_2,
          calendar_0_16_1,
          execs_0_3_1,
          fsm_0_2_0,
          gproc_0_6_1,
          pipe_0_0_2,
          timex_3_1_15,
          uuid_1_1_7
        }:
          buildMix ({
            name = "exmud";
            version = "0.0.1";
            src = fetchHex {
              pkg = "exmud";
              version = "0.0.1";
              sha256 =
                "0dc54b4bf77aa745d228d9757a135abd8fb5fd6c30084e59979e55bc8305f644";
            };
            beamDeps  = [
                          apex_0_5_2
                          calendar_0_16_1
                          execs_0_3_1
                          fsm_0_2_0
                          gproc_0_6_1
                          pipe_0_0_2
                          timex_3_1_15
                          uuid_1_1_7
                        ];

            meta = {
              description = ''A M.U.D. engine implemented in Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mononym/eden";
            };
          } // packageOverrides)
      ) {};

    exmud = exmud_0_0_1;

    exns_0_3_6_beta = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          msgpax_0_8_2,
          poison_2_2_0,
          poolboy_1_5_1,
          uuid_1_1_7
        }:
          buildMix ({
            name = "exns";
            version = "0.3.6-beta";
            src = fetchHex {
              pkg = "exns";
              version = "0.3.6-beta";
              sha256 =
                "eb41bac966ed72befbe6c7ea364f5d35afa319a19258f0bf0e6f0e8c515d96b5";
            };
            beamDeps  = [ msgpax_0_8_2 poison_2_2_0 poolboy_1_5_1 uuid_1_1_7
                      ];

            meta = {
              longDescription = ''A library for writing clients to communicate
                                with Python nanoservices via nanomsg.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/walkr/exns";
            };
          } // packageOverrides)
      ) {};

    exns = exns_0_3_6_beta;

    exnumerable_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exnumerable";
            version = "0.0.1";
            src = fetchHex {
              pkg = "exnumerable";
              version = "0.0.1";
              sha256 =
                "ea6041540da09b96176a37bdd71e3c6fbacb8353aca3b084deedb17cee265e2e";
            };

            meta = {
              description = ''Enumerable type definition in a simple way to be
                            used with any database.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/KamilLelonek/exnumerable";
            };
          } // packageOverrides)
      ) {};

    exnumerable = exnumerable_0_0_1;

    exnumerator_1_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ex_doc_0_16_1 }:
          buildMix ({
            name = "exnumerator";
            version = "1.2.1";
            src = fetchHex {
              pkg = "exnumerator";
              version = "1.2.1";
              sha256 =
                "37d4e1c07a5227800aaf56a9c1dfecaeb78d49bcabaea8e52e013165362c0773";
            };
            beamDeps  = [ ex_doc_0_16_1 ];

            meta = {
              description = ''Enumerable type definition in a simple way to be
                            used with any database.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/KamilLelonek/exnumerator";
            };
          } // packageOverrides)
      ) {};

    exnumerator = exnumerator_1_2_1;

    exnumterator_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exnumterator";
            version = "1.0.0";
            src = fetchHex {
              pkg = "exnumterator";
              version = "1.0.0";
              sha256 =
                "895b1dfff48d0459e66338ca8a8b831c2f31654fc0758a24e11a2f54a9cb1106";
            };

            meta = {
              description = ''Enumerable type definition in a simple way to be
                            used with any database.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/KamilLelonek/exnumterator";
            };
          } // packageOverrides)
      ) {};

    exnumterator = exnumterator_1_0_0;

    exoddic_1_3_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exoddic";
            version = "1.3.5";
            src = fetchHex {
              pkg = "exoddic";
              version = "1.3.5";
              sha256 =
                "ccae0217d664202d9a4769efd2a645e641cd0ab1edacf25b02a2946770249c83";
            };

            meta = {
              description = ''Odds and probability handling and conversions'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mwmiller/exoddic";
            };
          } // packageOverrides)
      ) {};

    exoddic = exoddic_1_3_5;

    exoffice_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          csv_2_0_0_rc_0,
          earmark_1_2_2,
          ex_doc_0_15_1,
          iconv_1_0_5,
          xlsxir_1_5_1
        }:
          buildMix ({
            name = "exoffice";
            version = "0.1.0";
            src = fetchHex {
              pkg = "exoffice";
              version = "0.1.0";
              sha256 =
                "2a6b7aed3e68a76ef4efb964a70dcd424477fbb8cf31b3c3c570b4bd7be66f38";
            };
            beamDeps  = [
                          csv_2_0_0_rc_0
                          earmark_1_2_2
                          ex_doc_0_15_1
                          iconv_1_0_5
                          xlsxir_1_5_1
                        ];

            meta = {
              longDescription = ''File parser for popular excel formats: xls
                                (Excel 2003), csv, xlsx (Excel 2007). Stores
                                data in ets (except for csv, which uses
                                stream).'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/alexkovalevych/exoffice";
            };
          } // packageOverrides)
      ) {};

    exoffice = exoffice_0_1_0;

    exometer_core_1_4_0 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          edown_0_7_0,
          folsom_0_8_3,
          lager_3_0_2,
          parse_trans_2_9_0,
          setup_1_7_0
        }:
          buildRebar3 ({
            name = "exometer_core";
            version = "1.4.0";
            src = fetchHex {
              pkg = "exometer_core";
              version = "1.4.0";
              sha256 =
                "4cee5d30f2865955b894503c9a00fc8d60a5a33c4577327b8fb2ec430fc3777e";
            };

            beamDeps  = [
                          edown_0_7_0
                          folsom_0_8_3
                          lager_3_0_2
                          parse_trans_2_9_0
                          setup_1_7_0
                        ];

            meta = {
              description = ''Code instrumentation and metrics collection
                            package.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/Feuerlabs/exometer_core";
            };
          } // packageOverrides)
      ) {};

    exometer_core = exometer_core_1_4_0;

    exometer_datadog_0_4_5 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exometer_core_1_4_0,
          httpoison_0_11_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "exometer_datadog";
            version = "0.4.5";
            src = fetchHex {
              pkg = "exometer_datadog";
              version = "0.4.5";
              sha256 =
                "5f761005920da7d37576e5db25dceddb3f07225781fc0eef22b07413c69b83b8";
            };
            beamDeps  = [ exometer_core_1_4_0 httpoison_0_11_2 poison_2_2_0
                      ];

            meta = {
              description = ''Integrates exometer with datadog via the datadog
                            REST API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/obmarg/exometer_datadog";
            };
          } // packageOverrides)
      ) {};

    exometer_datadog = exometer_datadog_0_4_5;

    exometer_statix_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, statix_1_0_0 }:
          buildMix ({
            name = "exometer_statix";
            version = "0.1.1";
            src = fetchHex {
              pkg = "exometer_statix";
              version = "0.1.1";
              sha256 =
                "56c606e31435e178180d21f8665f268e8862e7c20dbf907071d01ee15981cb2c";
            };
            beamDeps  = [ statix_1_0_0 ];

            meta = {
              description = ''StatsD reporter backend for exometer_core'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/deepblue/exometer_statix";
            };
          } // packageOverrides)
      ) {};

    exometer_statix = exometer_statix_0_1_1;

    exometer_zabbix_0_0_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          edown_0_8_1,
          meck_0_8_4,
          poison_1_0_2
        }:
          buildMix ({
            name = "exometer_zabbix";
            version = "0.0.3";
            src = fetchHex {
              pkg = "exometer_zabbix";
              version = "0.0.3";
              sha256 =
                "c77759da8344136187bf0a189551222f4a0fe1e554293940a4e44d3c9802b0f8";
            };
            beamDeps  = [ edown_0_8_1 meck_0_8_4 poison_1_0_2 ];

            meta = {
              description = ''A Zabbix reporter backend for exometer_core'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tverlaan/exometer_zabbix";
            };
          } // packageOverrides)
      ) {};

    exometer_zabbix = exometer_zabbix_0_0_3;

    exon_0_1_11 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ecto_2_1_4 }:
          buildMix ({
            name = "exon";
            version = "0.1.11";
            src = fetchHex {
              pkg = "exon";
              version = "0.1.11";
              sha256 =
                "7f29b1ddb8876f9fa90f47afbc21a358ab9fc2ae7a916a982a7a46caef8d5a13";
            };
            beamDeps  = [ ecto_2_1_4 ];

            meta = {
              longDescription = ''A collection of useful concepts for building
                                DDD (Domain-Driven-Design) applications in
                                Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/neerfri/exon";
            };
          } // packageOverrides)
      ) {};

    exon = exon_0_1_11;

    exop_0_4_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exop";
            version = "0.4.2";
            src = fetchHex {
              pkg = "exop";
              version = "0.4.2";
              sha256 =
                "5145340d19ea4509beeec24f4618f3d051c673c297dec489b7dba390e7aa9692";
            };

            meta = {
              longDescription = ''Little library that provides a few macros
                                which allow you to encapsulate business logic
                                and validate incoming params over predefined
                                contract.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/madeinussr/exop";
            };
          } // packageOverrides)
      ) {};

    exop = exop_0_4_2;

    exos_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exos";
            version = "1.0.0";
            src = fetchHex {
              pkg = "exos";
              version = "1.0.0";
              sha256 =
                "3659fca730360d11d90db8ccb0206e978c838af48bc46ac096d47ea807b9d324";
            };

            meta = {
              longDescription = ''Create a GenServer in any language. Exos
                                contains a very simple GenServer which proxy
                                calls and casts to a given port command,
                                encoding and decoding the message to the port
                                using erlang external binary term format. (see
                                related projects : clojure|python|node_erlastic
                                on https://github.com/kbrw)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kbrw/exos";
            };
          } // packageOverrides)
      ) {};

    exos_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exos";
            version = "1.0.1";
            src = fetchHex {
              pkg = "exos";
              version = "1.0.1";
              sha256 =
                "9f160f9f7cc6616e768299e9894f78c2345a65dbae6f845cefe2a2c98ecbe881";
            };

            meta = {
              longDescription = ''Create a GenServer in any language. Exos
                                contains a very simple GenServer which proxy
                                calls and casts to a given port command,
                                encoding and decoding the message to the port
                                using erlang external binary term format. (see
                                related projects : clojure|python|node_erlastic
                                on https://github.com/kbrw)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kbrw/exos";
            };
          } // packageOverrides)
      ) {};

    exos = exos_1_0_1;

    expand_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "expand";
            version = "0.0.3";
            src = fetchHex {
              pkg = "expand";
              version = "0.0.3";
              sha256 =
                "5f2ce07ba074392100fc5f6b8e8af9ec728ce4716e592422c510997d543efa63";
            };

            meta = {
              description = ''A pretty printer'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/joeyates/expand";
            };
          } // packageOverrides)
      ) {};

    expand = expand_0_0_3;

    exparticle_0_0_6 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_10_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "exparticle";
            version = "0.0.6";
            src = fetchHex {
              pkg = "exparticle";
              version = "0.0.6";
              sha256 =
                "9ce64abced6a8e6cef10706532ef6a724194eac65d7898f129017dc66ef0896f";
            };
            beamDeps  = [ httpoison_0_10_0 poison_3_1_0 ];

            meta = {
              description = ''ExParticle is an elixir client to communicate
                            with Particle Cloud API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mtanzi/exparticle";
            };
          } // packageOverrides)
      ) {};

    exparticle = exparticle_0_0_6;

    expat_0_1_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "expat";
            version = "0.1.5";
            src = fetchHex {
              pkg = "expat";
              version = "0.1.5";
              sha256 =
                "d21ac23fc4f0cef3c1df1d03c13569c3f435959d41c14891084b9908740763c7";
            };

            meta = {
              description = ''Reusable and composable pattern matching in
                            Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/vic/expat";
            };
          } // packageOverrides)
      ) {};

    expat = expat_0_1_5;

    expatch_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "expatch";
            version = "0.1.0";
            src = fetchHex {
              pkg = "expatch";
              version = "0.1.0";
              sha256 =
                "508ebb92ac07cca58a621aecdc253097d793bce5909862528bb6dc8b3c006d9e";
            };

            meta = {
              description = ''An Elixir implementation of JSON Patch
                            http://jsonpatch.com/'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/neerfri/expatch";
            };
          } // packageOverrides)
      ) {};

    expatch = expatch_0_1_0;

    expcap_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, timex_3_0_5 }:
          buildMix ({
            name = "expcap";
            version = "0.1.0";
            src = fetchHex {
              pkg = "expcap";
              version = "0.1.0";
              sha256 =
                "d9d62f7cb7a3acfdb13668668c6cd4e317a125519a5b24830e4184474e8fe274";
            };
            beamDeps  = [ timex_3_0_5 ];

            meta = {
              longDescription = ''A PCAP library written in Elixir. This does
                                not wrap a C or Erlang PCAP library, rather it
                                attempts to be an idiomatic Elixir library. This
                                library parses pcap files, however it does not
                                yet support most protocols that can be contained
                                within a pcap file. The only supported protocols
                                at the moment are: * Ethernet * IPv4 * UDP * DNS
                                '';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/cobenian/expcap";
            };
          } // packageOverrides)
      ) {};

    expcap = expcap_0_1_0;

    experiment_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "experiment";
            version = "0.0.3";
            src = fetchHex {
              pkg = "experiment";
              version = "0.0.3";
              sha256 =
                "5acb6c232aff08719f97254ca27ed1eb165c3f2d229e03cda85e4d31ad7b3156";
            };

            meta = {
              description = ''Experiment is a library for carefully refactoring
                            critical paths in production.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/andrewvy/experiment";
            };
          } // packageOverrides)
      ) {};

    experiment = experiment_0_0_3;

    expinboard_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exjsx_3_2_1,
          httpotion_2_2_1,
          ibrowse_4_4_0
        }:
          buildMix ({
            name = "expinboard";
            version = "0.0.1";
            src = fetchHex {
              pkg = "expinboard";
              version = "0.0.1";
              sha256 =
                "3ff152d837293c0f53ead6cba4180ced55308d2869faa698e459abbe23d59bdc";
            };
            beamDeps  = [ exjsx_3_2_1 httpotion_2_2_1 ibrowse_4_4_0 ];

            meta = {
              description = ''A simple elixir pinboard client.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/thilko/expinboard";
            };
          } // packageOverrides)
      ) {};

    expinboard = expinboard_0_0_1;

    exping_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exping";
            version = "0.1.0";
            src = fetchHex {
              pkg = "exping";
              version = "0.1.0";
              sha256 =
                "c2c081592511ee768b55d9a53c6180fa4fc5810eccbdbca8bb399ac7d5b9407a";
            };

            meta = {
              description = ''ExPing'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/kennyballou/exping.git";
            };
          } // packageOverrides)
      ) {};

    exping = exping_0_1_0;

    explay_0_1_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ex_utils_0_1_6,
          httpoison_0_9_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "explay";
            version = "0.1.4";
            src = fetchHex {
              pkg = "explay";
              version = "0.1.4";
              sha256 =
                "608240afb5a9d8a0a9edfcc2f0481232ffcab5d04dd65dbcc3cb6afd5efc59b8";
            };
            beamDeps  = [ ex_utils_0_1_6 httpoison_0_9_2 poison_3_1_0 ];

            meta = {
              description = ''Google Play (Android Market) API implementation
                            in Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sheharyarn/explay";
            };
          } // packageOverrides)
      ) {};

    explay = explay_0_1_4;

    explay_fork_0_1_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ex_utils_0_1_6,
          httpoison_0_9_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "explay_fork";
            version = "0.1.4";
            src = fetchHex {
              pkg = "explay_fork";
              version = "0.1.4";
              sha256 =
                "00b4798e5963577704e8b2b243b96b9f071853a97bf19e9fb9f17642916718cc";
            };
            beamDeps  = [ ex_utils_0_1_6 httpoison_0_9_2 poison_3_1_0 ];

            meta = {
              description = ''Fork of explay, a Google Play (Android Market)
                            API implementation in Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/4knahs/explay";
            };
          } // packageOverrides)
      ) {};

    explay_fork = explay_fork_0_1_4;

    expletive_0_1_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "expletive";
            version = "0.1.4";
            src = fetchHex {
              pkg = "expletive";
              version = "0.1.4";
              sha256 =
                "dfb9ac919526bcb7f28b5acadad634b7e9d220203874ef124a87264a078f24b4";
            };

            meta = {
              description = ''Profanity detection and sanitization library'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/xavier/expletive";
            };
          } // packageOverrides)
      ) {};

    expletive = expletive_0_1_4;

    expline_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "expline";
            version = "0.1.0";
            src = fetchHex {
              pkg = "expline";
              version = "0.1.0";
              sha256 =
                "48a69520c0cf8abc9ca69d92fc6e540cf111b939d927967366efb1cf7acdf09d";
            };

            meta = {
              longDescription = ''A cubic spline interpolation library for
                                Elixir. Includes a GenServer. All required
                                Linear Algebra modules are built for the
                                library, but may be extracted individually.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/isaacsanders/expline";
            };
          } // packageOverrides)
      ) {};

    expline = expline_0_1_0;

    explode_1_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_4,
          poison_1_0_2
        }:
          buildMix ({
            name = "explode";
            version = "1.0.0";
            src = fetchHex {
              pkg = "explode";
              version = "1.0.0";
              sha256 =
                "1b21c879d03ef691dd77eda2d032acadf2da6af208d24b7b6ae382ae9f62f352";
            };
            beamDeps  = [ ecto_2_1_4 poison_1_0_2 ];

            meta = {
              longDescription = ''An easy utility for responding with standard
                                HTTP/JSON error payloads in Plug- and
                                Phoenix-based applications.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pkinney/explode";
            };
          } // packageOverrides)
      ) {};

    explode = explode_1_0_0;

    explot_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "explot";
            version = "0.1.0";
            src = fetchHex {
              pkg = "explot";
              version = "0.1.0";
              sha256 =
                "0bfd6009e51f03e789174205c07e454e08308c2691c63abb22b4e6c0128db04b";
            };

            meta = {
              description = ''Package to plot data using Python`s Matplotlib'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/jordipolo/explot";
            };
          } // packageOverrides)
      ) {};

    explot = explot_0_1_0;

    expool_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "expool";
            version = "0.2.0";
            src = fetchHex {
              pkg = "expool";
              version = "0.2.0";
              sha256 =
                "f0cc61c365d1950522ad5816cf638353602db5a5d74feb7c96748dfa2b6f9d07";
            };

            meta = {
              description = ''Simple process pooling and task submission'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zackehh/expool";
            };
          } // packageOverrides)
      ) {};

    expool = expool_0_2_0;

    export_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, erlport_0_9_8 }:
          buildMix ({
            name = "export";
            version = "0.1.1";
            src = fetchHex {
              pkg = "export";
              version = "0.1.1";
              sha256 =
                "3da7444ff4053f1824352f4bdb13fbd2c28c93c2011786fb686b649fdca1021f";
            };
            beamDeps  = [ erlport_0_9_8 ];

            meta = {
              description = ''Erlport wrapper for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/fazibear/export";
            };
          } // packageOverrides)
      ) {};

    export = export_0_1_1;

    expostal_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "expostal";
            version = "0.1.2";
            src = fetchHex {
              pkg = "expostal";
              version = "0.1.2";
              sha256 =
                "e5a5276c9e68800c8c6b9b844ae9ad0014bc10e164411d4ac279caedcb4446d3";
            };

            meta = {
              longDescription = ''Expostal is an Elixir binding for Openvenue`s
                                Libpostal. Expostal parses street address and
                                expand address acroymes with high accuracy.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/SweetIQ/expostal";
            };
          } // packageOverrides)
      ) {};

    expostal = expostal_0_1_2;

    expr_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "expr";
            version = "0.1.0";
            src = fetchHex {
              pkg = "expr";
              version = "0.1.0";
              sha256 =
                "5076c73cb6beaafeab5fab4731170c29dca5581eec44df3be363660a872abb97";
            };

            meta = {
              description = ''An Elixir library for parsing and evaluating
                            mathematical expressions '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Rob-bie/Expr";
            };
          } // packageOverrides)
      ) {};

    expr = expr_0_1_0;

    expres_0_2_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "expres";
            version = "0.2.5";
            src = fetchHex {
              pkg = "expres";
              version = "0.2.5";
              sha256 =
                "f3d1b7a5faf253078eb4e059edac641d05c606c4078afdaa8e254e19d3092b37";
            };

            meta = {
              longDescription = ''Minimal SQL WHERE expression parser and
                                evaluator in Elixir. Tags: expres, sql where,
                                parse, parser, eval'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ympons/expres";
            };
          } // packageOverrides)
      ) {};

    expres = expres_0_2_5;

    expreso_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "expreso";
            version = "0.0.2";
            src = fetchHex {
              pkg = "expreso";
              version = "0.0.2";
              sha256 =
                "08573e7a6a474f22e8581721bcfaea31a885e5f7ecc0d3d180dd1250f4053079";
            };

            meta = {
              longDescription = ''Boolean expression parser and evaluator in
                                Elixir. Tags: expreso, boolean, parse, parser,
                                eval'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ympons/expreso";
            };
          } // packageOverrides)
      ) {};

    expreso = expreso_0_0_2;

    exprintf_0_1_6 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exprintf";
            version = "0.1.6";
            src = fetchHex {
              pkg = "exprintf";
              version = "0.1.6";
              sha256 =
                "7acb31f93cef83effd3aa1f0572f9e29d7d1b4f50a6d456e2830fa7594c16182";
            };

            meta = {
              description = ''A printf / sprintf library for Elixir. It works
                            as a wrapper for :io.format.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/parroty/exprintf";
            };
          } // packageOverrides)
      ) {};

    exprintf_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exprintf";
            version = "0.2.1";
            src = fetchHex {
              pkg = "exprintf";
              version = "0.2.1";
              sha256 =
                "20a0e8c880be90e56a77fcc82533c5d60c643915c7ce0cc8aa1e06ed6001da28";
            };

            meta = {
              description = ''A printf / sprintf library for Elixir. It works
                            as a wrapper for :io.format.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/parroty/exprintf";
            };
          } // packageOverrides)
      ) {};

    exprintf = exprintf_0_2_1;

    exprof_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, exprintf_0_2_1 }:
          buildMix ({
            name = "exprof";
            version = "0.2.0";
            src = fetchHex {
              pkg = "exprof";
              version = "0.2.0";
              sha256 =
                "2b3b8c623873172a6c7ba1707981f51feea6b6edbabd5347752030803ad0c954";
            };
            beamDeps  = [ exprintf_0_2_1 ];

            meta = {
              description = ''A simple code profiler for Elixir using eprof.
                            '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/parroty/exprof";
            };
          } // packageOverrides)
      ) {};

    exprof = exprof_0_2_0;

    exprotobuf_1_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, gpb_3_27_0 }:
          buildMix ({
            name = "exprotobuf";
            version = "1.0.2";
            src = fetchHex {
              pkg = "exprotobuf";
              version = "1.0.2";
              sha256 =
                "3f315c50b08ca1fdc1bee1af28a513849151e36297e9d55d97de293cc3d3f2a2";
            };
            beamDeps  = [ gpb_3_27_0 ];

            meta = {
              longDescription = ''exprotobuf provides native encoding/decoding
                                of protobuf messages via generated
                                modules/structs.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/bitwalker/exprotobuf";
            };
          } // packageOverrides)
      ) {};

    exprotobuf_1_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, gpb_3_27_0 }:
          buildMix ({
            name = "exprotobuf";
            version = "1.1.0";
            src = fetchHex {
              pkg = "exprotobuf";
              version = "1.1.0";
              sha256 =
                "cea234f34d8ebfa0eed17d17a1c96b280976151d40222d37948356900cd81dff";
            };
            beamDeps  = [ gpb_3_27_0 ];

            meta = {
              longDescription = ''exprotobuf provides native encoding/decoding
                                of protobuf messages via generated
                                modules/structs.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/bitwalker/exprotobuf";
            };
          } // packageOverrides)
      ) {};

    exprotobuf_1_2_7 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, gpb_3_27_0 }:
          buildMix ({
            name = "exprotobuf";
            version = "1.2.7";
            src = fetchHex {
              pkg = "exprotobuf";
              version = "1.2.7";
              sha256 =
                "bb40da1645dcfc6fabe4aeace421241c8e5c246f0ee998ca6aa366c46009e61f";
            };
            beamDeps  = [ gpb_3_27_0 ];

            meta = {
              longDescription = ''exprotobuf provides native encoding/decoding
                                of protobuf messages via generated
                                modules/structs.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/bitwalker/exprotobuf";
            };
          } // packageOverrides)
      ) {};

    exprotobuf = exprotobuf_1_2_7;

    expublica_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "expublica";
            version = "0.1.0";
            src = fetchHex {
              pkg = "expublica";
              version = "0.1.0";
              sha256 =
                "4b686581bfc7dee9d34ccdc6118018e03b9c8e2975f355104da7860f87b25b00";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''Library for accessing ProPublica`s data via their
                            APIs.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/dotdotdotpaul/expublica";
            };
          } // packageOverrides)
      ) {};

    expublica = expublica_0_1_0;

    expug_0_8_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "expug";
            version = "0.8.0";
            src = fetchHex {
              pkg = "expug";
              version = "0.8.0";
              sha256 =
                "3ccc6c89b5fe702598edbab0c959ee5744c941e55a22fbfa31d6a50e61e5bb81";
            };

            meta = {
              description = ''Indented shorthand templates for HTML.
                            (pre-release)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rstacruz/expug";
            };
          } // packageOverrides)
      ) {};

    expug = expug_0_8_0;

    expyplot_1_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          earmark_0_2_1,
          ex_doc_0_16_1,
          statistics_0_4_1
        }:
          buildMix ({
            name = "expyplot";
            version = "1.1.2";
            src = fetchHex {
              pkg = "expyplot";
              version = "1.1.2";
              sha256 =
                "6c70cdc5d46c97a0cc534ea530c8689fed3e9a223a82c146e1b837e4d06f1b2a";
            };
            beamDeps  = [ earmark_0_2_1 ex_doc_0_16_1 statistics_0_4_1 ];

            meta = {
              longDescription = ''Python`s matplotlib.pyplot ported to Elixir.
                                Inspired by https://github.com/JordiPolo/explot
                                This library provides a fairly transparent
                                wrapper for matplotlib.pyplot.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/MaxStrange/expyplot";
            };
          } // packageOverrides)
      ) {};

    expyplot = expyplot_1_1_2;

    exq_0_9_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          poison_3_1_0,
          redix_0_6_1,
          uuid_1_1_7
        }:
          buildMix ({
            name = "exq";
            version = "0.9.0";
            src = fetchHex {
              pkg = "exq";
              version = "0.9.0";
              sha256 =
                "36db5db5ec879145d719f409ec66034813f442def870f9f96574d15a495ac566";
            };
            beamDeps  = [ poison_3_1_0 redix_0_6_1 uuid_1_1_7 ];

            meta = {
              longDescription = ''Exq is a job processing library compatible
                                with Resque / Sidekiq for the Elixir
                                language.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/akira/exq";
            };
          } // packageOverrides)
      ) {};

    exq = exq_0_9_0;

    exq_ui_0_9_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          exq_0_9_0,
          plug_1_3_5
        }:
          buildMix ({
            name = "exq_ui";
            version = "0.9.0";
            src = fetchHex {
              pkg = "exq_ui";
              version = "0.9.0";
              sha256 =
                "e63bad042019326b76954e835dac02b74bc3f8bb5e8c7a2ce5eb42a0728a2b63";
            };
            beamDeps  = [ cowboy_1_1_2 exq_0_9_0 plug_1_3_5 ];

            meta = {
              longDescription = ''Exq UI is the UI component for Exq, a job
                                processing library. Exq UI provides the UI
                                dashboard to display stats on job processing.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/akira/exq_ui";
            };
          } // packageOverrides)
      ) {};

    exq_ui = exq_ui_0_9_0;

    exql_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, tds_0_5_4 }:
          buildMix ({
            name = "exql";
            version = "0.0.3";
            src = fetchHex {
              pkg = "exql";
              version = "0.0.3";
              sha256 =
                "0dea2cd0f6cb1ba6c1cd4298716131fafb4271f2c076df0dd6e73e37cecb4705";
            };
            beamDeps  = [ tds_0_5_4 ];

            meta = {
              description = ''A functional query tool for MSSQL.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mattweldon/exql";
            };
          } // packageOverrides)
      ) {};

    exql = exql_0_0_3;

    exquery_0_0_11 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          earmark_0_1_19,
          ex_doc_0_16_1
        }:
          buildMix ({
            name = "exquery";
            version = "0.0.11";
            src = fetchHex {
              pkg = "exquery";
              version = "0.0.11";
              sha256 =
                "61b520599fa33dc8c97be32f41c8fe4a6eb9d8b98b72a72cb88185868692a0c1";
            };
            beamDeps  = [ earmark_0_1_19 ex_doc_0_16_1 ];

            meta = {
              longDescription = '' A library for parsing HTML and querying
                                elements within. Handy for web scraping or
                                autmated testing. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rozap/exquery";
            };
          } // packageOverrides)
      ) {};

    exquery = exquery_0_0_11;

    exquickbooks_0_6_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          oauther_1_1_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "exquickbooks";
            version = "0.6.1";
            src = fetchHex {
              pkg = "exquickbooks";
              version = "0.6.1";
              sha256 =
                "add4f60cde2343a6fe55ab6f6558706fb285d6efc7ffca6c2c6adae42cf18e0f";
            };
            beamDeps  = [ httpoison_0_11_2 oauther_1_1_0 poison_3_1_0 ];

            meta = {
              description = ''QuickBooks Online API client for Elixir.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/Boulevard/ExQuickBooks";
            };
          } // packageOverrides)
      ) {};

    exquickbooks = exquickbooks_0_6_1;

    exquisite_0_1_8 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exquisite";
            version = "0.1.8";
            src = fetchHex {
              pkg = "exquisite";
              version = "0.1.8";
              sha256 =
                "f9575a4fa4fcb835ed162b86293afe367cf94f9b0382c63255e7f4441d96e784";
            };

            meta = {
              description = ''DSL to match_spec'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/meh/exquisite";
            };
          } // packageOverrides)
      ) {};

    exquisite = exquisite_0_1_8;

    exrabbit_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exrabbit";
            version = "0.0.2";
            src = fetchHex {
              pkg = "exrabbit";
              version = "0.0.2";
              sha256 =
                "8dda89e78a8918eddcf28200e4474127151a8e20a2b54447b817732344b4e55a";
            };

            meta = {
              description = ''RabbitMQ bindings and DSL for Elixir'';

              homepage = "https://github.com/d0rc/exrabbit";
            };
          } // packageOverrides)
      ) {};

    exrabbit = exrabbit_0_0_2;

    exrecaptcha_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, httpotion_2_2_1 }:
          buildMix ({
            name = "exrecaptcha";
            version = "0.0.3";
            src = fetchHex {
              pkg = "exrecaptcha";
              version = "0.0.3";
              sha256 =
                "2df1a9e868d3adc31a657755df04fabc9c9e7d12f56cbcc86b27f670dcd962b5";
            };
            beamDeps  = [ httpotion_2_2_1 ];

            meta = {
              longDescription = ''Simple ReCaptcha display/verify code for
                                Elixir applications. Designed to be used with a
                                CMS such as Phoenix. '';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/adanselm/exrecaptcha";
            };
          } // packageOverrides)
      ) {};

    exrecaptcha = exrecaptcha_0_0_3;

    exredis_0_2_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, eredis_1_0_8 }:
          buildMix ({
            name = "exredis";
            version = "0.2.5";
            src = fetchHex {
              pkg = "exredis";
              version = "0.2.5";
              sha256 =
                "4cb72680092f2b51f01968743afe6c163337b2ea938cae097de8d45a66af11a6";
            };
            beamDeps  = [ eredis_1_0_8 ];

            meta = {
              description = ''Redis client for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/artemeff/exredis";
            };
          } // packageOverrides)
      ) {};

    exredis = exredis_0_2_5;

    exredis_poolboy_0_2_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exredis_0_2_5,
          poolboy_1_5_1
        }:
          buildMix ({
            name = "exredis_poolboy";
            version = "0.2.2";
            src = fetchHex {
              pkg = "exredis_poolboy";
              version = "0.2.2";
              sha256 =
                "9d8fc83c879c4d57c6dec2029afad49a244052f80ea825e879246c1a396bcfdd";
            };
            beamDeps  = [ exredis_0_2_5 poolboy_1_5_1 ];

            meta = {
              description = ''Wrapper around exredis using poolboy'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mkaszubowski/exredis_poolboy";
            };
          } // packageOverrides)
      ) {};

    exredis_poolboy = exredis_poolboy_0_2_2;

    exref_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exref";
            version = "0.1.1";
            src = fetchHex {
              pkg = "exref";
              version = "0.1.1";
              sha256 =
                "92d73f1eff56f2d0493a2dbf5e932b48b99a2cdd2e3cc3fc0ffeb9c1ae5ed86c";
            };

            meta = {
              description = ''Damn simple mix integration of xref.'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    exref = exref_0_1_1;

    exreg_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exreg";
            version = "0.0.3";
            src = fetchHex {
              pkg = "exreg";
              version = "0.0.3";
              sha256 =
                "b4480c5730fdb160958663c2e47eccfce8fa69381406ac35e59acfb753d79584";
            };

            meta = {
              description = ''A simple process name registry using pg2.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gmtprime/exreg";
            };
          } // packageOverrides)
      ) {};

    exreg = exreg_0_0_3;

    exreleasy_0_1_7 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exreleasy";
            version = "0.1.7";
            src = fetchHex {
              pkg = "exreleasy";
              version = "0.1.7";
              sha256 =
                "dd966d0625830e02eb38b13a417fe63817bbd24d212e2df620f367a981dcb715";
            };

            meta = {
              description = ''A very simple tool for releasing elixir
                            applications.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/miros/exreleasy";
            };
          } // packageOverrides)
      ) {};

    exreleasy = exreleasy_0_1_7;

    exrequester_0_5_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_2_2_2,
          poison_1_5_2
        }:
          buildMix ({
            name = "exrequester";
            version = "0.5.2";
            src = fetchHex {
              pkg = "exrequester";
              version = "0.5.2";
              sha256 =
                "9c55974b2f9a4294dd9a53ebed8f9b1c2788cd0845dccbc9471cf6869201903a";
            };
            beamDeps  = [ httpotion_2_2_2 poison_1_5_2 ];

            meta = {
              description = ''Quickly create API clients using module
                            attributes.'';

              homepage = "https://github.com/oarrabi/exrequester";
            };
          } // packageOverrides)
      ) {};

    exrequester = exrequester_0_5_2;

    exrethinkdb_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_1_4_0 }:
          buildMix ({
            name = "exrethinkdb";
            version = "0.0.3";
            src = fetchHex {
              pkg = "exrethinkdb";
              version = "0.0.3";
              sha256 =
                "c48a25a613de9f4c8ffe490044e448f01d816e0f6806af018494c3a19890ed1a";
            };
            beamDeps  = [ poison_1_4_0 ];

            meta = {
              description = ''RethinkDB driver for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hamiltop/exrethinkdb";
            };
          } // packageOverrides)
      ) {};

    exrethinkdb = exrethinkdb_0_0_3;

    exrm_0_14_17 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, conform_0_13_0 }:
          buildMix ({
            name = "exrm";
            version = "0.14.17";
            src = fetchHex {
              pkg = "exrm";
              version = "0.14.17";
              sha256 =
                "c5b0c2bd4bad44d2f67f5ec720e5a4cff829dfac234aa79056970f83236bb976";
            };
            beamDeps  = [ conform_0_13_0 ];

            meta = {
              longDescription = ''Exrm, or Elixir Release Manager, provides mix
                                tasks for building, upgrading, and controlling
                                release packages for your application.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bitwalker/exrm";
            };
          } // packageOverrides)
      ) {};

    exrm_0_14_6 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, conform_0_13_0 }:
          buildMix ({
            name = "exrm";
            version = "0.14.6";
            src = fetchHex {
              pkg = "exrm";
              version = "0.14.6";
              sha256 =
                "560428a632fb6a693fb865a7a10fe03c4cd52b9b489c1419b9589c5069c9088a";
            };
            beamDeps  = [ conform_0_13_0 ];

            meta = {
              longDescription = ''Exrm, or Elixir Release Manager, provides mix
                                tasks for building, upgrading, and controlling
                                release packages for your application.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bitwalker/exrm";
            };
          } // packageOverrides)
      ) {};

    exrm_0_18_8 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          conform_0_16_0,
          relx_3_14_0
        }:
          buildMix ({
            name = "exrm";
            version = "0.18.8";
            src = fetchHex {
              pkg = "exrm";
              version = "0.18.8";
              sha256 =
                "a8aa031d824f882a762404bc19b6fbe6c10703941097a6ef8bb93a62cc987e22";
            };
            beamDeps  = [ conform_0_16_0 relx_3_14_0 ];

            meta = {
              longDescription = ''Exrm, or Elixir Release Manager, provides mix
                                tasks for building, upgrading, and controlling
                                release packages for your application.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bitwalker/exrm";
            };
          } // packageOverrides)
      ) {};

    exrm_0_19_9 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          conform_1_0_0_rc8,
          relx_3_14_0
        }:
          buildMix ({
            name = "exrm";
            version = "0.19.9";
            src = fetchHex {
              pkg = "exrm";
              version = "0.19.9";
              sha256 =
                "3107dcac0727f7e986ef36604e13943759a52188fbee630d72b1b3adb4594941";
            };
            beamDeps  = [ conform_1_0_0_rc8 relx_3_14_0 ];

            meta = {
              longDescription = ''Exrm, or Elixir Release Manager, provides mix
                                tasks for building, upgrading, and controlling
                                release packages for your application.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bitwalker/exrm";
            };
          } // packageOverrides)
      ) {};

    exrm_1_0_8 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, relx_3_23_0 }:
          buildMix ({
            name = "exrm";
            version = "1.0.8";
            src = fetchHex {
              pkg = "exrm";
              version = "1.0.8";
              sha256 =
                "4e8eebc1298fc0848f1693c527036e064f62bb609195036ecf45c0d3f0b01a7b";
            };
            beamDeps  = [ relx_3_23_0 ];

            meta = {
              longDescription = ''Exrm, or Elixir Release Manager, provides mix
                                tasks for building, upgrading, and controlling
                                release packages for your application.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bitwalker/exrm";
            };
          } // packageOverrides)
      ) {};

    exrm = exrm_1_0_8;

    exrm_deb_0_0_7 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exrm_1_0_8,
          timex_3_0_5,
          vex_0_6_0
        }:
          buildMix ({
            name = "exrm_deb";
            version = "0.0.7";
            src = fetchHex {
              pkg = "exrm_deb";
              version = "0.0.7";
              sha256 =
                "f960e6730c51c3ec00555e5e83daf53ab2d13d8c2b1754480f4c22ccb45d9f97";
            };
            beamDeps  = [ exrm_1_0_8 timex_3_0_5 vex_0_6_0 ];

            meta = {
              description = ''Create a deb for your elixir release with ease'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/johnhamelink/exrm_deb";
            };
          } // packageOverrides)
      ) {};

    exrm_deb = exrm_deb_0_0_7;

    exrm_docker_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, exrm_1_0_8 }:
          buildMix ({
            name = "exrm_docker";
            version = "0.2.1";
            src = fetchHex {
              pkg = "exrm_docker";
              version = "0.2.1";
              sha256 =
                "e25a976cd5b47f0a8ea351791f31fac45a34cb25d214218279003fdf65ddbe89";
            };
            beamDeps  = [ exrm_1_0_8 ];

            meta = {
              description = ''Exrm plugin to push your release into a Docker
                            image.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/kwrooijen/exrm_docker";
            };
          } // packageOverrides)
      ) {};

    exrm_docker = exrm_docker_0_2_1;

    exrm_heroku_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, exrm_1_0_8 }:
          buildMix ({
            name = "exrm_heroku";
            version = "0.1.1";
            src = fetchHex {
              pkg = "exrm_heroku";
              version = "0.1.1";
              sha256 =
                "19fc16f1cfcc1c86bc64796a287028b8a8d951f7737024893c1772ba658da76d";
            };
            beamDeps  = [ exrm_1_0_8 ];

            meta = {
              description = ''Publish Elixir releases created with exrm release
                            manager to Heroku. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ride/exrm-heroku";
            };
          } // packageOverrides)
      ) {};

    exrm_heroku = exrm_heroku_0_1_1;

    exrm_rpm_0_3_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, exrm_1_0_8 }:
          buildMix ({
            name = "exrm_rpm";
            version = "0.3.3";
            src = fetchHex {
              pkg = "exrm_rpm";
              version = "0.3.3";
              sha256 =
                "11de82ed0ba9e265577f255cdad0693bf191b30d56dbd85977201882e3652e53";
            };
            beamDeps  = [ exrm_1_0_8 ];

            meta = {
              longDescription = ''Adds simple Red Hat Package Manager (RPM)
                                generation to the exrm package manager. The
                                generated RPM file includes the Elixir release
                                and an init.d script to manage the project`s
                                service.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/smpallen99/exrm-rpm";
            };
          } // packageOverrides)
      ) {};

    exrm_rpm = exrm_rpm_0_3_3;

    exrm_smartos_gz_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, exrm_1_0_8 }:
          buildMix ({
            name = "exrm_smartos_gz";
            version = "1.0.0";
            src = fetchHex {
              pkg = "exrm_smartos_gz";
              version = "1.0.0";
              sha256 =
                "700c3c9e80d24d1e0404c54391e582d786dbb3f8da9a3bf5d2b7f082841ba5af";
            };
            beamDeps  = [ exrm_1_0_8 ];

            meta = {
              longDescription = ''Trying to package an Elixir application for a
                                SmartOS GZ but getting errors about ncurses?
                                This will cure what ails you.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/adam12/exrm_smartos_gz";
            };
          } // packageOverrides)
      ) {};

    exrm_smartos_gz = exrm_smartos_gz_1_0_0;

    exromaji_0_4_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exromaji";
            version = "0.4.3";
            src = fetchHex {
              pkg = "exromaji";
              version = "0.4.3";
              sha256 =
                "871a1c28ceaaf61e1ab71592500231e0e237ef27322bdaabb9e5129e9bc350ca";
            };

            meta = {
              description = ''A Elixir library for translating between
                            hiragana, katakana, romaji and sound.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ikeikeikeike/exromaji";
            };
          } // packageOverrides)
      ) {};

    exromaji = exromaji_0_4_3;

    exruby_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exruby";
            version = "0.1.0";
            src = fetchHex {
              pkg = "exruby";
              version = "0.1.0";
              sha256 =
                "fc667eb4023eab0b613926e06b6056b60055c6a77d02df027420a9bfaca5150b";
            };

            meta = {
              description = ''Exruby ports Ruby and ActiveSupport (Rails)
                            methods to Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/StanBright/exruby";
            };
          } // packageOverrides)
      ) {};

    exruby = exruby_0_1_0;

    exrun_0_1_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exrun";
            version = "0.1.5";
            src = fetchHex {
              pkg = "exrun";
              version = "0.1.5";
              sha256 =
                "1d2b5bc4ff332627622ed33ef7de924e04e930a892291f2ecd96bc9d91bb3dea";
            };

            meta = {
              longDescription = ''Elixir - save and easy to use standalone,
                                tracing tools for running elixir and erlang
                                applications'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/liveforeverx/exrun";
            };
          } // packageOverrides)
      ) {};

    exrun = exrun_0_1_5;

    exsamples_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exsamples";
            version = "0.1.0";
            src = fetchHex {
              pkg = "exsamples";
              version = "0.1.0";
              sha256 =
                "92acafe7e8a5d6b1c1b5ca937b9dab887f9a4474cfd6510a7117690a6c6da86d";
            };

            meta = {
              longDescription = ''Initializes lists of maps, structs or keyword
                                lists using tabular data in Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/msaraiva/exsamples";
            };
          } // packageOverrides)
      ) {};

    exsamples = exsamples_0_1_0;

    exscm_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exscm";
            version = "0.0.2";
            src = fetchHex {
              pkg = "exscm";
              version = "0.0.2";
              sha256 =
                "53ed98adb26c17773c6a18999c25c548c138010a6b6334540b47b4e9435835a2";
            };

            meta = {
              description = ''Manage release versions by scm tags'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/treebee/exscm";
            };
          } // packageOverrides)
      ) {};

    exscm = exscm_0_0_2;

    exscript_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exscript";
            version = "0.1.0";
            src = fetchHex {
              pkg = "exscript";
              version = "0.1.0";
              sha256 =
                "cb255b1e7deb1faedab4e345ebda100cee6ac263d75fe4b5d58b3af786c70f68";
            };

            meta = {
              description = ''Escript generator'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/liveforeverx/exscript";
            };
          } // packageOverrides)
      ) {};

    exscript = exscript_0_1_0;

    exseed_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ecto_2_1_4 }:
          buildMix ({
            name = "exseed";
            version = "0.0.3";
            src = fetchHex {
              pkg = "exseed";
              version = "0.0.3";
              sha256 =
                "d5f42ed419c9f1d5d179dc93fdf6a58344b07055764498f222f07f95cb82dd98";
            };
            beamDeps  = [ ecto_2_1_4 ];

            meta = {
              description = ''A library that provides a simple DSL for seeding
                            databases through Ecto.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/seaneshbaugh/exseed";
            };
          } // packageOverrides)
      ) {};

    exseed = exseed_0_0_3;

    exsentry_0_7_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          fuzzyurl_0_2_0,
          hackney_1_8_6,
          plug_1_3_5,
          poison_1_0_2,
          uuid_1_1_7
        }:
          buildMix ({
            name = "exsentry";
            version = "0.7.1";
            src = fetchHex {
              pkg = "exsentry";
              version = "0.7.1";
              sha256 =
                "8248c8bc683e2b6bd3d2a9450651ed037054b5168bd97789b94fa52ed47303aa";
            };
            beamDeps  = [
                          fuzzyurl_0_2_0
                          hackney_1_8_6
                          plug_1_3_5
                          poison_1_0_2
                          uuid_1_1_7
                        ];

            meta = {
              description = ''ExSentry is a client for the Sentry error
                            reporting platform.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/appcues/exsentry";
            };
          } // packageOverrides)
      ) {};

    exsentry = exsentry_0_7_1;

    exshape_0_2_6 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, uuid_1_1_7 }:
          buildMix ({
            name = "exshape";
            version = "0.2.6";
            src = fetchHex {
              pkg = "exshape";
              version = "0.2.6";
              sha256 =
                "69d61d0df304ce278925d2258f908e15ff099eb2906e7b750258505d05a26b83";
            };
            beamDeps  = [ uuid_1_1_7 ];

            meta = {
              description = ''Read ESRI Shapefiles as a stream of features and
                            their attributes'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rozap/exshape";
            };
          } // packageOverrides)
      ) {};

    exshape = exshape_0_2_6;

    exshopify_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_10_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "exshopify";
            version = "0.3.0";
            src = fetchHex {
              pkg = "exshopify";
              version = "0.3.0";
              sha256 =
                "7251b5d9add602f67fcc3e0ed5e0c31c5c83bf452eb36c8fad8716b3f5feaa38";
            };
            beamDeps  = [ httpoison_0_10_0 poison_3_1_0 ];

            meta = {
              description = ''Elixir client for the Shopify API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sticksnleaves/exshopify";
            };
          } // packageOverrides)
      ) {};

    exshopify = exshopify_0_3_0;

    exsoda_1_2_17 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          nimble_csv_0_1_1,
          poison_2_2_0,
          uuid_1_1_7
        }:
          buildMix ({
            name = "exsoda";
            version = "1.2.17";
            src = fetchHex {
              pkg = "exsoda";
              version = "1.2.17";
              sha256 =
                "30a4204f07bf1e72dfc9336564d369c0864df2b4a517990de6319c4f646f86ad";
            };
            beamDeps  = [
                          httpoison_0_11_2
                          nimble_csv_0_1_1
                          poison_2_2_0
                          uuid_1_1_7
                        ];

            meta = {
              description = ''A Socrata Soda2 API wrapper'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rozap/exsoda";
            };
          } // packageOverrides)
      ) {};

    exsoda = exsoda_1_2_17;

    exsolr_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_8_3,
          poison_2_2_0
        }:
          buildMix ({
            name = "exsolr";
            version = "0.0.1";
            src = fetchHex {
              pkg = "exsolr";
              version = "0.0.1";
              sha256 =
                "dcd26d0301730cb1746702bfacf31de10be5d1b15475a1a7ec4da8c7c49e55d1";
            };
            beamDeps  = [ httpoison_0_8_3 poison_2_2_0 ];

            meta = {
              description = ''Thin Wrapper around Solr api.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/dcarneiro/exsolr";
            };
          } // packageOverrides)
      ) {};

    exsolr = exsolr_0_0_1;

    exsom_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exsom";
            version = "0.2.1";
            src = fetchHex {
              pkg = "exsom";
              version = "0.2.1";
              sha256 =
                "ec61dc809255bb5127213687873bac6c5df8e48dadda9323d9cb5eee62f8f790";
            };

            meta = {
              description = ''XML parser for Elixir (based on Erlsom)'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/metalabdesign/exsom";
            };
          } // packageOverrides)
      ) {};

    exsom = exsom_0_2_1;

    exstatic_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, plug_1_3_5 }:
          buildMix ({
            name = "exstatic";
            version = "0.1.0";
            src = fetchHex {
              pkg = "exstatic";
              version = "0.1.0";
              sha256 =
                "e063b91c0b2995e4a1a2c1aa56cdd578374320a8755844cc6471b58fa3874d0d";
            };
            beamDeps  = [ plug_1_3_5 ];

            meta = {
              longDescription = ''Serve static files from memory in the Phoenix
                                Framework. This extension compiles all of a
                                project`s static assets (e.g. Javascript, HTML,
                                images, etc) into Erlang modules and loads them
                                into the Erlang VM, with the purpose of serving
                                them fast and without a dependency on a
                                filesystem.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/arjan/exstatic";
            };
          } // packageOverrides)
      ) {};

    exstatic = exstatic_0_1_0;

    exstatsd_0_1_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, exactor_2_2_3 }:
          buildMix ({
            name = "exstatsd";
            version = "0.1.5";
            src = fetchHex {
              pkg = "exstatsd";
              version = "0.1.5";
              sha256 =
                "4fcad707df57fdb91338dae212355704924bea8db10207715b95e3c110e7b219";
            };
            beamDeps  = [ exactor_2_2_3 ];

            meta = {
              description = ''An Elixir ports client for StatsD'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/upbit/ExStatsD";
            };
          } // packageOverrides)
      ) {};

    exstatsd = exstatsd_0_1_5;

    exstreme_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exstreme";
            version = "0.1.1";
            src = fetchHex {
              pkg = "exstreme";
              version = "0.1.1";
              sha256 =
                "f48c2b78d2ab9417be27dc85b29c82440170145549e0137f294b880a0ff7c289";
            };

            meta = {
              longDescription = ''Exstreme is an implementation of a Stream
                                Push data structure in the way of a runnable
                                graph where all the nodes must be connected and
                                process a message and pass the result to next
                                node(s)'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/mrkaspa/exstreme";
            };
          } // packageOverrides)
      ) {};

    exstreme = exstreme_0_1_1;

    exsync_0_1_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, exfswatch_0_4_2 }:
          buildMix ({
            name = "exsync";
            version = "0.1.4";
            src = fetchHex {
              pkg = "exsync";
              version = "0.1.4";
              sha256 =
                "fb0e27feae62b3f6590a66cbe511a9e99e3bfa4d2df3e54e910723a561f79bc2";
            };
            beamDeps  = [ exfswatch_0_4_2 ];

            meta = {
              description = ''Yet another Elixir reloader.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/falood/exsync";
            };
          } // packageOverrides)
      ) {};

    exsync = exsync_0_1_4;

    exsyslog_1_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          poison_1_5_2,
          syslog_1_0_2
        }:
          buildMix ({
            name = "exsyslog";
            version = "1.0.1";
            src = fetchHex {
              pkg = "exsyslog";
              version = "1.0.1";
              sha256 =
                "a3972cf2c70bcf8fedcd702109ed6a2213d1905c6eabb0e42e600b34bc9f0fbe";
            };
            beamDeps  = [ poison_1_5_2 syslog_1_0_2 ];

            meta = {
              description = ''ExSyslog is a Elixir Logger custom backend to
                            syslog.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/22cans/exsyslog";
            };
          } // packageOverrides)
      ) {};

    exsyslog = exsyslog_1_0_1;

    ext_run_0_1_1 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, elixir_make_0_4_0
        }:
          buildMix ({
            name = "ext_run";
            version = "0.1.1";
            src = fetchHex {
              pkg = "ext_run";
              version = "0.1.1";
              sha256 =
                "1f5da2869cfee8f47c23160c3542bdefb9121d5659b4a8c10253958f84f74b12";
            };
            beamDeps  = [ elixir_make_0_4_0 ];

            meta = {
              description = ''Small tool to run external process from elixir
                            that is not owned by the BEAM'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Hermanverschooten/ext_run";
            };
          } // packageOverrides)
      ) {};

    ext_run = ext_run_0_1_1;

    extatic_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, plug_1_3_5 }:
          buildMix ({
            name = "extatic";
            version = "0.2.0";
            src = fetchHex {
              pkg = "extatic";
              version = "0.2.0";
              sha256 =
                "32543df694d23aa1e466f1f9a70907c67eef224e3ee2f169e4d1420e4c70f60c";
            };
            beamDeps  = [ plug_1_3_5 ];

            meta = {
              longDescription = ''A library to interface with monitoring
                                services and loggers via plugins, allowing you
                                to switch providers with minimal rework your
                                app.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/trinode/extatic";
            };
          } // packageOverrides)
      ) {};

    extatic_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, plug_1_3_5 }:
          buildMix ({
            name = "extatic";
            version = "0.2.1";
            src = fetchHex {
              pkg = "extatic";
              version = "0.2.1";
              sha256 =
                "9b884577b5d2c2e2b16a8416a62386b5e1b1c39aca8906485e1d11375f403754";
            };
            beamDeps  = [ plug_1_3_5 ];

            meta = {
              longDescription = ''A library to interface with monitoring
                                services and loggers via plugins, allowing you
                                to switch providers with minimal rework your
                                app.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/trinode/extatic";
            };
          } // packageOverrides)
      ) {};

    extatic = extatic_0_2_1;

    extatic_console_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          extatic_0_2_0,
          poison_2_2_0
        }:
          buildMix ({
            name = "extatic_console";
            version = "0.2.0";
            src = fetchHex {
              pkg = "extatic_console";
              version = "0.2.0";
              sha256 =
                "8fdcf1a7114312d89466c09b2a4510e8209ed30899e726b761514a90dd7cd56a";
            };
            beamDeps  = [ extatic_0_2_0 poison_2_2_0 ];

            meta = {
              longDescription = ''A console output library for Extatic, logs
                                metrics and events to the console. Mostly for
                                development purposes, but also includes a JSON
                                logger that can be used with log parsing
                                services.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/trinode/extatic_console";
            };
          } // packageOverrides)
      ) {};

    extatic_console = extatic_console_0_2_0;

    extatic_datadog_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          extatic_0_2_0,
          httpoison_0_9_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "extatic_datadog";
            version = "0.2.0";
            src = fetchHex {
              pkg = "extatic_datadog";
              version = "0.2.0";
              sha256 =
                "1ca61fda8049d45d2db985f654c8d3aff6d0882c04d23b10b84f8122efdeeb15";
            };
            beamDeps  = [ extatic_0_2_0 httpoison_0_9_2 poison_2_2_0 ];

            meta = {
              description = ''A DataDog plugin for Extatic to log events and
                            metrics to DataDog'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/trinode/extatic_datadog";
            };
          } // packageOverrides)
      ) {};

    extatic_datadog = extatic_datadog_0_2_0;

    extatus_0_2_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          accept_0_3_3,
          cowboy_1_1_2,
          exreg_0_0_3,
          prometheus_ex_1_3_0,
          yggdrasil_3_2_2
        }:
          buildMix ({
            name = "extatus";
            version = "0.2.3";
            src = fetchHex {
              pkg = "extatus";
              version = "0.2.3";
              sha256 =
                "26693289395ca6a382dcd172f76827f110b379faaa5b00f5bfd8559d87436f46";
            };
            beamDeps  = [
                          accept_0_3_3
                          cowboy_1_1_2
                          exreg_0_0_3
                          prometheus_ex_1_3_0
                          yggdrasil_3_2_2
                        ];

            meta = {
              description = ''App to report metrics to Prometheus from Elixir
                            GenServers.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gmtprime/extatus";
            };
          } // packageOverrides)
      ) {};

    extatus = extatus_0_2_3;

    extermit_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "extermit";
            version = "0.1.0";
            src = fetchHex {
              pkg = "extermit";
              version = "0.1.0";
              sha256 =
                "00961f34d0fd2b0579ad3468b5ddc054bde0c30be7e3d0afd428288bf960d196";
            };

            meta = {
              longDescription = ''ExTermit is an Elixir based, updated Termit.
                                https://github.com/dvv/termit Library for
                                serializing Erlang terms to signed encrypted
                                binaries and reliably deserializing them
                                back.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/InoMurko/extermit";
            };
          } // packageOverrides)
      ) {};

    extermit = extermit_0_1_0;

    external_config_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "external_config";
            version = "0.1.0";
            src = fetchHex {
              pkg = "external_config";
              version = "0.1.0";
              sha256 =
                "9be059028ab7e85570f978cafafb75f70599c5fecdd6a5b2eee569f5a59576a6";
            };

            meta = {
              longDescription = ''ExternalConfig provides a way to use an
                                external mix style configuration (to your
                                application) file in a release or
                                application.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bradleyd/external_config";
            };
          } // packageOverrides)
      ) {};

    external_config = external_config_0_1_0;

    exthereum_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hexate_0_6_1,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "exthereum";
            version = "0.1.0";
            src = fetchHex {
              pkg = "exthereum";
              version = "0.1.0";
              sha256 =
                "e693643fd8fa9ff2a055d3f4a534cbbc9f0d05eaf2defe706e0aa0beea36261c";
            };
            beamDeps  = [ hexate_0_6_1 httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              longDescription = ''This library exists to present a convenient
                                interface to control a full Ethereum node from
                                Elixir, abstracting away the need to deal with
                                the JSON-RPC API directly.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/alanwilhelm/exthereum";
            };
          } // packageOverrides)
      ) {};

    exthereum = exthereum_0_1_0;

    extika_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_2_2_0 }:
          buildMix ({
            name = "extika";
            version = "0.0.2";
            src = fetchHex {
              pkg = "extika";
              version = "0.0.2";
              sha256 =
                "72667110e198ce2b4ab7b2a8f18a9b60bc71a3c1a3b1062c39c3621bb24c8e9f";
            };
            beamDeps  = [ poison_2_2_0 ];

            meta = {
              description = ''Wrapper around Apache Tika'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/andrew-d/extika";
            };
          } // packageOverrides)
      ) {};

    extika = extika_0_0_2;

    extras_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, plug_1_3_5 }:
          buildMix ({
            name = "extras";
            version = "0.1.1";
            src = fetchHex {
              pkg = "extras";
              version = "0.1.1";
              sha256 =
                "6dcf4299e276b4de4bd7cc562689c5a98e7461b90937422624f78a2e82187acb";
            };
            beamDeps  = [ plug_1_3_5 ];

            meta = {
              description = ''Tiny, tested, namespaced helper functions'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/somlor/extras";
            };
          } // packageOverrides)
      ) {};

    extras = extras_0_1_1;

    extreme_0_6_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exprotobuf_1_0_2,
          httpoison_0_8_3,
          poison_1_0_2,
          uuid_1_1_7
        }:
          buildMix ({
            name = "extreme";
            version = "0.6.2";
            src = fetchHex {
              pkg = "extreme";
              version = "0.6.2";
              sha256 =
                "5ac34c1ecefc49fe9e0947320cb136d353365aee539f50b1001df60fdd2f1941";
            };
            beamDeps  = [
                          exprotobuf_1_0_2
                          httpoison_0_8_3
                          poison_1_0_2
                          uuid_1_1_7
                        ];

            meta = {
              description = ''Elixir TCP adapter for EventStore.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/exponentially/extreme";
            };
          } // packageOverrides)
      ) {};

    extreme_0_7_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exprotobuf_1_0_2,
          httpoison_0_8_3,
          poison_1_0_2,
          uuid_1_1_7
        }:
          buildMix ({
            name = "extreme";
            version = "0.7.1";
            src = fetchHex {
              pkg = "extreme";
              version = "0.7.1";
              sha256 =
                "863c8e457a852981ad9bd069669118f2045aec638fabb39a1448a35441f47a88";
            };
            beamDeps  = [
                          exprotobuf_1_0_2
                          httpoison_0_8_3
                          poison_1_0_2
                          uuid_1_1_7
                        ];

            meta = {
              description = ''Elixir TCP adapter for EventStore.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/exponentially/extreme";
            };
          } // packageOverrides)
      ) {};

    extreme_0_9_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exprotobuf_1_2_7,
          httpoison_0_11_2,
          poison_1_0_2,
          uuid_1_1_7
        }:
          buildMix ({
            name = "extreme";
            version = "0.9.2";
            src = fetchHex {
              pkg = "extreme";
              version = "0.9.2";
              sha256 =
                "e77075c92eb6514efe333e7e2c39422e5779fee4420ef7702fab762bd094de42";
            };
            beamDeps  = [
                          exprotobuf_1_2_7
                          httpoison_0_11_2
                          poison_1_0_2
                          uuid_1_1_7
                        ];

            meta = {
              description = ''Elixir TCP adapter for EventStore.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/exponentially/extreme";
            };
          } // packageOverrides)
      ) {};

    extreme = extreme_0_9_2;

    extreme_system_0_0_5 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          amqp_0_0_6,
          cachex_2_1_0,
          extreme_0_9_2
        }:
          buildMix ({
            name = "extreme_system";
            version = "0.0.5";
            src = fetchHex {
              pkg = "extreme_system";
              version = "0.0.5";
              sha256 =
                "b8b3811599d0f6c231af98c943f7f9d1cea9a31eec77763eabb57ec5fd3839a7";
            };
            beamDeps  = [ amqp_0_0_6 cachex_2_1_0 extreme_0_9_2 ];

            meta = {
              description = ''Building blocks for distributed systems'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/exponentially/extreme_system";
            };
          } // packageOverrides)
      ) {};

    extreme_system = extreme_system_0_0_5;

    extripe_1_2_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_1_0_2
        }:
          buildMix ({
            name = "extripe";
            version = "1.2.2";
            src = fetchHex {
              pkg = "extripe";
              version = "1.2.2";
              sha256 =
                "2e1b7edd75813d94c6e9d990b0e1557ed0e7b51cd96f428c19e0b8b2910d7e99";
            };
            beamDeps  = [ httpoison_0_11_2 poison_1_0_2 ];

            meta = {
              description = ''Stripe API wrapper'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/princemaple/extripe";
            };
          } // packageOverrides)
      ) {};

    extripe = extripe_1_2_2;

    exts_0_3_4 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, datastructures_0_2_8
        }:
          buildMix ({
            name = "exts";
            version = "0.3.4";
            src = fetchHex {
              pkg = "exts";
              version = "0.3.4";
              sha256 =
                "ac30c04a94052e9eea11509778688772ffc2412d61c4d03e60fab80469be406e";
            };
            beamDeps  = [ datastructures_0_2_8 ];

            meta = {
              description = ''ets wrapper'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/meh/exts";
            };
          } // packageOverrides)
      ) {};

    exts = exts_0_3_4;

    extv_0_2_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "extv";
            version = "0.2.1";
            src = fetchHex {
              pkg = "extv";
              version = "0.2.1";
              sha256 =
                "983acac3b73453b1687384dacf60b4fd2b2e2eae7a7bee56b7c4286ff657082c";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''An Elixir API client for theTVDB.com'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/paulfedory/extv";
            };
          } // packageOverrides)
      ) {};

    extv = extv_0_2_1;

    extwitter_0_8_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          oauther_1_1_0,
          poison_2_2_0
        }:
          buildMix ({
            name = "extwitter";
            version = "0.8.3";
            src = fetchHex {
              pkg = "extwitter";
              version = "0.8.3";
              sha256 =
                "703839849955eb6a8809b6a4617cbbda4f42b798e45ce69d94f55c3c6ee13bb1";
            };
            beamDeps  = [ oauther_1_1_0 poison_2_2_0 ];

            meta = {
              description = ''Twitter client library for elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/parroty/extwitter";
            };
          } // packageOverrides)
      ) {};

    extwitter = extwitter_0_8_3;

    exubx_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ex_doc_0_15_1,
          httpotion_3_0_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "exubx";
            version = "0.1.0";
            src = fetchHex {
              pkg = "exubx";
              version = "0.1.0";
              sha256 =
                "29e53ae9e25d09402fc0c1c6bc547b910653696584bbfd53936c181c52fe6a32";
            };
            beamDeps  = [ ex_doc_0_15_1 httpotion_3_0_2 poison_3_1_0 ];

            meta = {
              description = ''A fetch tool for listing the remote ubx
                            performance list.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zeuxisoo/elixir-exubx";
            };
          } // packageOverrides)
      ) {};

    exubx = exubx_0_1_0;

    exurban_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_5_0,
          jazz_0_2_1
        }:
          buildMix ({
            name = "exurban";
            version = "0.0.1";
            src = fetchHex {
              pkg = "exurban";
              version = "0.0.1";
              sha256 =
                "612b3136b144edfbad658acca6961a3c9a1afe5d343acacb5ce5b358a67bd797";
            };
            beamDeps  = [ httpoison_0_5_0 jazz_0_2_1 ];

            meta = {
              description = ''Elixir wrapper for UrbanAirship API.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/tappsi/exurban";
            };
          } // packageOverrides)
      ) {};

    exurban = exurban_0_0_1;

    exuvia_0_1_5 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          temp_0_4_3,
          tentacat_0_6_2
        }:
          buildMix ({
            name = "exuvia";
            version = "0.1.5";
            src = fetchHex {
              pkg = "exuvia";
              version = "0.1.5";
              sha256 =
                "235b4818e0cdf86fe80636ed7f9058b3e36ff6457982a7e47c87706296a23049";
            };
            beamDeps  = [ temp_0_4_3 tentacat_0_6_2 ];

            meta = {
              longDescription = ''Exuvia abstracts away everything needed to
                                connect to your Elixir node, via both SSH and
                                the distribution protocol.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/meetwalter/exuvia";
            };
          } // packageOverrides)
      ) {};

    exuvia = exuvia_0_1_5;

    exvcr_0_3_9 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exactor_2_2_3,
          exjsx_3_2_1,
          httpoison_0_11_2,
          httpotion_2_2_1,
          meck_0_8_4
        }:
          buildMix ({
            name = "exvcr";
            version = "0.3.9";
            src = fetchHex {
              pkg = "exvcr";
              version = "0.3.9";
              sha256 =
                "25645f6598111ba76ed30b4a2079169ae1aed0795ef87bf74d70a3a7ca8f2112";
            };
            beamDeps  = [
                          exactor_2_2_3
                          exjsx_3_2_1
                          httpoison_0_11_2
                          httpotion_2_2_1
                          meck_0_8_4
                        ];

            meta = {
              description = ''HTTP request/response recording library for
                            elixir, inspired by VCR.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/parroty/exvcr";
            };
          } // packageOverrides)
      ) {};

    exvcr_0_8_10 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exactor_2_2_3,
          exjsx_3_2_1,
          httpoison_0_11_2,
          httpotion_3_0_2,
          ibrowse_4_2_2,
          meck_0_8_4
        }:
          buildMix ({
            name = "exvcr";
            version = "0.8.10";
            src = fetchHex {
              pkg = "exvcr";
              version = "0.8.10";
              sha256 =
                "86b8f2914c2bcff9508e1580353c398e2e9d1079449c05661fd70cd82a375723";
            };
            beamDeps  = [
                          exactor_2_2_3
                          exjsx_3_2_1
                          httpoison_0_11_2
                          httpotion_3_0_2
                          ibrowse_4_2_2
                          meck_0_8_4
                        ];

            meta = {
              description = ''HTTP request/response recording library for
                            elixir, inspired by VCR.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/parroty/exvcr";
            };
          } // packageOverrides)
      ) {};

    exvcr = exvcr_0_8_10;

    exwechat_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_8_3,
          poison_2_2_0,
          quinn_1_0_2,
          timex_3_1_15
        }:
          buildMix ({
            name = "exwechat";
            version = "0.1.1";
            src = fetchHex {
              pkg = "exwechat";
              version = "0.1.1";
              sha256 =
                "4b142cc39c0e0bea59ab5e9add44d9db08de554d3de5adcac2a0658feb7106f4";
            };
            beamDeps  = [
                          httpoison_0_8_3 poison_2_2_0 quinn_1_0_2 timex_3_1_15
                        ];

            meta = {
              description = ''Wechat Toolbox.'';
              license = stdenv.lib.licenses.asl20;
            };
          } // packageOverrides)
      ) {};

    exwechat = exwechat_0_1_1;

    exyelp_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          oauther_1_1_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "exyelp";
            version = "0.0.2";
            src = fetchHex {
              pkg = "exyelp";
              version = "0.0.2";
              sha256 =
                "1be8553ea0369a092eac1b6a0b47652b7c0570911483aa3ca454bef05ddd4d5d";
            };
            beamDeps  = [ httpoison_0_11_2 oauther_1_1_0 poison_3_1_0 ];

            meta = {
              description = ''An Elixir Yelp API client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gaslight/exyelp";
            };
          } // packageOverrides)
      ) {};

    exyelp = exyelp_0_0_2;

    exyz_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "exyz";
            version = "1.0.0";
            src = fetchHex {
              pkg = "exyz";
              version = "1.0.0";
              sha256 =
                "b1d53964ca72f70dd71c91327bf912858619d0357a53765ed3a08671e6769ef5";
            };

            meta = {
              description = ''Z-combinator in elixir: recursive anonymous
                            functions.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/Dkendal/exyz";
            };
          } // packageOverrides)
      ) {};

    exyz = exyz_1_0_0;

    eye_drops_1_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, fs_3_4_0 }:
          buildMix ({
            name = "eye_drops";
            version = "1.3.0";
            src = fetchHex {
              pkg = "eye_drops";
              version = "1.3.0";
              sha256 =
                "00bd6a19be320db5b3e13a91c86140c85b3d1420208e1c2b6f69e8a374d200ba";
            };
            beamDeps  = [ fs_3_4_0 ];

            meta = {
              longDescription = ''A configurable mix task to watch file changes
                                Watch file changes in a project and run the
                                corresponding command when a change happens.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rkotze/eye_drops";
            };
          } // packageOverrides)
      ) {};

    eye_drops = eye_drops_1_3_0;

    ez_calendar_0_1_6 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          calendar_0_16_1,
          ecto_2_1_4,
          phoenix_html_2_9_3
        }:
          buildMix ({
            name = "ez_calendar";
            version = "0.1.6";
            src = fetchHex {
              pkg = "ez_calendar";
              version = "0.1.6";
              sha256 =
                "4f115387946583880f075ab1e1a7ae5c4b438a56a3b0587cc1d8e93a3fabd5e1";
            };
            beamDeps  = [ calendar_0_16_1 ecto_2_1_4 phoenix_html_2_9_3 ];

            meta = {
              longDescription = ''Build calendars from ecto queries, includes
                                view helpers for easy rendering with Phoenix'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/willwatson27/ez_calendar";
            };
          } // packageOverrides)
      ) {};

    ez_calendar = ez_calendar_0_1_6;

    ezcryptex_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, cryptex_0_0_1 }:
          buildMix ({
            name = "ezcryptex";
            version = "0.0.1";
            src = fetchHex {
              pkg = "ezcryptex";
              version = "0.0.1";
              sha256 =
                "0c1c295cf5500106f7288949021ccbdc0d3a9276c2ae9938e45254b7500017b5";
            };
            beamDeps  = [ cryptex_0_0_1 ];

            meta = {
              longDescription = ''Thin layer on top of Cryptex for more easily
                                encrypting/decrypting, signing/verifying data in
                                elixir. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/stocks29/ezcryptex";
            };
          } // packageOverrides)
      ) {};

    ezcryptex = ezcryptex_0_0_1;

    ezlib_1_0_2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "ezlib";
            version = "1.0.2";
            src = fetchHex {
              pkg = "ezlib";
              version = "1.0.2";
              sha256 =
                "dd724e7e6d9db32430f5495a14a8dc8a896538296cea37eb0e20b3a6f25ad707";
            };
            compilePorts = true;

            meta = {
              description = ''Native zlib driver for Erlang / Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/processone/ezlib";
            };
          } // packageOverrides)
      ) {};

    ezlib = ezlib_1_0_2;

    ezmodex_0_4_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_0_4,
          plug_1_3_5
        }:
          buildMix ({
            name = "ezmodex";
            version = "0.4.0";
            src = fetchHex {
              pkg = "ezmodex";
              version = "0.4.0";
              sha256 =
                "0bde373a2f8da661322ed69cccbec799d8d37549462eb9178ad60914ea279577";
            };
            beamDeps  = [ cowboy_1_0_4 plug_1_3_5 ];

            meta = {
              description = ''Ezmodex is a lightweight experimental Elixir
                            microframework built on top of Plug'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/efexen/ezmodex";
            };
          } // packageOverrides)
      ) {};

    ezmodex = ezmodex_0_4_0;

    ezmq_0_2_0 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          gen_listener_tcp_0_3_2,
          lager_3_2_4
        }:
          buildRebar3 ({
            name = "ezmq";
            version = "0.2.0";
            src = fetchHex {
              pkg = "ezmq";
              version = "0.2.0";
              sha256 =
                "bc804ffded0b0d0f684d4313ad3fa676479df962c584daaf5aa14ada5b86a52b";
            };

            beamDeps  = [ gen_listener_tcp_0_3_2 lager_3_2_4 ];

            meta = {
              description = ''Native Erlang 0MQ implementation'';
              license = stdenv.lib.licenses.mpl20;
              homepage = "https://github.com/zeromq/ezmq";
            };
          } // packageOverrides)
      ) {};

    ezmq = ezmq_0_2_0;

    facebook_0_13_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_8_6,
          json_1_0_2
        }:
          buildMix ({
            name = "facebook";
            version = "0.13.1";
            src = fetchHex {
              pkg = "facebook";
              version = "0.13.1";
              sha256 =
                "a75c717c542e133325b74ca7eef58fb1c6d6ffc74610c9067369fece10c0079f";
            };
            beamDeps  = [ hackney_1_8_6 json_1_0_2 ];

            meta = {
              longDescription = ''Facebook Graph API Wrapper written in Elixir.
                                Please note, this is very much a work in
                                progress. Feel free to contribute using pull
                                requests.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mweibel/facebook.ex";
            };
          } // packageOverrides)
      ) {};

    facebook = facebook_0_13_1;

    facebook_0_9_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_8_6,
          json_1_0_2,
          libex_config_0_2_0
        }:
          buildMix ({
            name = "facebook";
            version = "0.9.0";
            src = fetchHex {
              pkg = "facebook";
              version = "0.9.0";
              sha256 =
                "dd4d1f0cc5e2b6e6dc4afe2a168429e97763ae466e2e07a44c65d09bc08c0d05";
            };
            beamDeps  = [ hackney_1_8_6 json_1_0_2 libex_config_0_2_0 ];

            meta = {
              longDescription = ''Facebook Graph API Wrapper written in Elixir.
                                Please note, this is very much a work in
                                progress. Feel free to contribute using pull
                                requests.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mweibel/facebook.ex";
            };
          } // packageOverrides)
      ) {};

    facebook_messenger_0_4_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_3_0_2,
          plug_1_3_5,
          poison_1_0_2
        }:
          buildMix ({
            name = "facebook_messenger";
            version = "0.4.0";
            src = fetchHex {
              pkg = "facebook_messenger";
              version = "0.4.0";
              sha256 =
                "d5a62b0ee950763ba77c35200b17f367f278743038f9e4ba6bdc60c94e9edede";
            };
            beamDeps  = [ httpotion_3_0_2 plug_1_3_5 poison_1_0_2 ];

            meta = {
              longDescription = ''ExFacebookMessenger is a library that easy
                                the creation of facebook messenger bots.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/oarrabi/facebook_messenger";
            };
          } // packageOverrides)
      ) {};

    facebook_messenger = facebook_messenger_0_4_0;

    factory_girl_elixir_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "factory_girl_elixir";
            version = "0.1.1";
            src = fetchHex {
              pkg = "factory_girl_elixir";
              version = "0.1.1";
              sha256 =
                "2e07de9813089c6e6a45f0584eb2bfd28d3acbf654073b9e2ed6d0fd531b8f7e";
            };

            meta = {
              description = ''Minimal implementation of Ruby`s factory_girl in
                            Elixir. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sinetris/factory_girl_elixir";
            };
          } // packageOverrides)
      ) {};

    factory_girl_elixir = factory_girl_elixir_0_1_1;

    facts_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          poison_3_1_0,
          porcelain_2_0_3
        }:
          buildMix ({
            name = "facts";
            version = "0.1.0";
            src = fetchHex {
              pkg = "facts";
              version = "0.1.0";
              sha256 =
                "0c8e8b3c8154a1c5a424ae63d92f956102d3ff7515b41ac917c8798303ab21d9";
            };
            beamDeps  = [ poison_3_1_0 porcelain_2_0_3 ];

            meta = {
              description = ''A library for collection a variety of system
                            facts.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nwlucas/facts";
            };
          } // packageOverrides)
      ) {};

    facts = facts_0_1_0;

    fadex_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "fadex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "fadex";
              version = "0.1.0";
              sha256 =
                "a1bd1233bb6c529e8a0095937e9b622c83512e9cc0aadb97a18cc528cf88778c";
            };

            meta = {
              description = ''Implements the OpenPixelControl-Protocol (for use
                            with fadecandy)'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/lschuermann/fadex";
            };
          } // packageOverrides)
      ) {};

    fadex = fadex_0_1_0;

    fake_cas_1_2_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          bypass_0_6_0,
          cowboy_1_1_2,
          plug_1_3_5
        }:
          buildMix ({
            name = "fake_cas";
            version = "1.2.1";
            src = fetchHex {
              pkg = "fake_cas";
              version = "1.2.1";
              sha256 =
                "02568bff0da34f51f7e2879da9509fa4ff301cad390ed89b1fad9864c05142dd";
            };
            beamDeps  = [ bypass_0_6_0 cowboy_1_1_2 plug_1_3_5 ];

            meta = {
              description = ''A Cas server stub'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rhruiz/elixir-fake_cas";
            };
          } // packageOverrides)
      ) {};

    fake_cas = fake_cas_1_2_1;

    fake_server_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, cowboy_1_1_2 }:
          buildMix ({
            name = "fake_server";
            version = "1.0.0";
            src = fetchHex {
              pkg = "fake_server";
              version = "1.0.0";
              sha256 =
                "d9735b8872ae0f3b42fd08c7f21e33016566b5227b417bcdbb5e30a0cff68223";
            };
            beamDeps  = [ cowboy_1_1_2 ];

            meta = {
              longDescription = ''FakeServer makes it easy to create mocks for
                                HTTP servers in your tests. It integrates very
                                well with ExUnit, but can also be used as a
                                standalone server.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/bernardolins/fake_server";
            };
          } // packageOverrides)
      ) {};

    fake_server = fake_server_1_0_0;

    faker_0_8_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "faker";
            version = "0.8.0";
            src = fetchHex {
              pkg = "faker";
              version = "0.8.0";
              sha256 =
                "968244083ef9b821b021ce40863c5b097877cdc3a22fb6750166ec94609decf0";
            };

            meta = {
              description = ''Faker is a pure Elixir library for generating
                            fake data.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/igas/faker";
            };
          } // packageOverrides)
      ) {};

    faker = faker_0_8_0;

    faker_elixir_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, timex_3_0_5 }:
          buildMix ({
            name = "faker_elixir";
            version = "0.0.1";
            src = fetchHex {
              pkg = "faker_elixir";
              version = "0.0.1";
              sha256 =
                "4b2eb802174cc75fc23e2424cd69813432d3e749368b799ffb53a2f257eb7160";
            };
            beamDeps  = [ timex_3_0_5 ];

            meta = {
              description = ''Faker file for creating fake data'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/raksonibs/faker-elixir";
            };
          } // packageOverrides)
      ) {};

    faker_elixir = faker_elixir_0_0_1;

    faker_elixir_octopus_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "faker_elixir_octopus";
            version = "1.0.1";
            src = fetchHex {
              pkg = "faker_elixir_octopus";
              version = "1.0.1";
              sha256 =
                "8baedbd5dc8036b2e179f5e3001071bd3fd1161ebf9496bc05413ee2a640d2c7";
            };

            meta = {
              description = ''FakerElixir generates fake data for you.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/GesJeremie/faker-elixir";
            };
          } // packageOverrides)
      ) {};

    faker_elixir_octopus = faker_elixir_octopus_1_0_1;

    fakeredis_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "fakeredis";
            version = "0.1.0";
            src = fetchHex {
              pkg = "fakeredis";
              version = "0.1.0";
              sha256 =
                "989e4ed5d401b8e8c3c58fddab736344a19afc0c90c2738eaf69a4f5eca45c6d";
            };

            meta = {
              longDescription = ''FakeRedis recreates the Redis API using only
                                native Erlang/Elixir features, especially
                                ETS.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/roryqueue/fakeredis";
            };
          } // packageOverrides)
      ) {};

    fakeredis = fakeredis_0_1_0;

    falcon_plus_api_0_1_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_2_2_0,
          timex_3_1_15
        }:
          buildMix ({
            name = "falcon_plus_api";
            version = "0.1.3";
            src = fetchHex {
              pkg = "falcon_plus_api";
              version = "0.1.3";
              sha256 =
                "6aa65c5b6e65f36ef8dbec1e3fe42de9ab26b4d4d7cfac8a9652eee792b48cc1";
            };
            beamDeps  = [ httpoison_0_11_2 poison_2_2_0 timex_3_1_15 ];

            meta = {
              description = ''Api of OpenFalcon-Plus'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/sawater/falcon-plus-api";
            };
          } // packageOverrides)
      ) {};

    falcon_plus_api = falcon_plus_api_0_1_3;

    farmbot_simulator_0_1_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          elixir_make_0_4_0,
          nerves_uart_0_1_2
        }:
          buildMix ({
            name = "farmbot_simulator";
            version = "0.1.3";
            src = fetchHex {
              pkg = "farmbot_simulator";
              version = "0.1.3";
              sha256 =
                "39edccdb3bbe44f3dba9854ac890a5af483f3c24ee160faf78703652b68c89cf";
            };
            beamDeps  = [ elixir_make_0_4_0 nerves_uart_0_1_2 ];

            meta = {
              longDescription = ''Simulates (NOT EMULATES) Farmbot`s arduino
                                firmware and hardware. The firmware is pretty
                                stable and used in FarmbotOS`s testing
                                environment. The visual hardware simulator is
                                very much a WIP.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/FarmBot-Labs/farmbot_simulator";
            };
          } // packageOverrides)
      ) {};

    farmbot_simulator = farmbot_simulator_0_1_3;

    fast_tls_1_0_12 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, p1_utils_1_0_9
        }:
          buildRebar3 ({
            name = "fast_tls";
            version = "1.0.12";
            src = fetchHex {
              pkg = "fast_tls";
              version = "1.0.12";
              sha256 =
                "2e2751ed562fe38401087aef2639e047be788bd4af836d8096e9c20001b70297";
            };
            compilePorts = true;

            beamDeps  = [ p1_utils_1_0_9 ];

            meta = {
              description = ''TLS / SSL OpenSSL-based native driver for Erlang
                            / Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/processone/fast_tls";
            };
          } // packageOverrides)
      ) {};

    fast_tls = fast_tls_1_0_12;

    fast_xml_1_1_23 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, p1_utils_1_0_9 }:
          buildMix ({
            name = "fast_xml";
            version = "1.1.23";
            src = fetchHex {
              pkg = "fast_xml";
              version = "1.1.23";
              sha256 =
                "9f549d1b9f0df8c14680e957b482bf535535a99626438fea84cb332d5ad8768e";
            };
            beamDeps  = [ p1_utils_1_0_9 ];

            meta = {
              description = ''Fast Expat-based Erlang / Elixir XML parsing
                            library'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/processone/fast_xml";
            };
          } // packageOverrides)
      ) {};

    fast_xml = fast_xml_1_1_23;

    fast_yaml_1_0_10 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, p1_utils_1_0_9
        }:
          buildRebar3 ({
            name = "fast_yaml";
            version = "1.0.10";
            src = fetchHex {
              pkg = "fast_yaml";
              version = "1.0.10";
              sha256 =
                "a482d73a661087ccb23e53d32e315f53ea96224a991bcf665e09a26a1ab559d5";
            };
            compilePorts = true;

            beamDeps  = [ p1_utils_1_0_9 ];

            meta = {
              description = ''Fast YAML native library for Erlang / Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/processone/fast_yaml";
            };
          } // packageOverrides)
      ) {};

    fast_yaml = fast_yaml_1_0_10;

    fasta_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, parallel_0_0_3 }:
          buildMix ({
            name = "fasta";
            version = "0.1.0";
            src = fetchHex {
              pkg = "fasta";
              version = "0.1.0";
              sha256 =
                "ebacba161985bf3d1bc5cf35e6ab0c01ce7f1f0fcc52151a35605eb9a6fac44b";
            };
            beamDeps  = [ parallel_0_0_3 ];

            meta = {
              description = ''FASTA is a tool for parsing FASTA-formatted
                            strings in Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/annejohnson/FASTA";
            };
          } // packageOverrides)
      ) {};

    fasta = fasta_0_1_0;

    fastglobal_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "fastglobal";
            version = "1.0.0";
            src = fetchHex {
              pkg = "fastglobal";
              version = "1.0.0";
              sha256 =
                "cfdb7ed63910bc75f579cd09e2517618fa9418b56731d51d03f7ba4b400798d0";
            };

            meta = {
              description = ''Fast no copy globals for Elixir & Erlang.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hammerandchisel/fastglobal";
            };
          } // packageOverrides)
      ) {};

    fastglobal = fastglobal_1_0_0;

    fastimage_0_0_7 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, hackney_1_8_6 }:
          buildMix ({
            name = "fastimage";
            version = "0.0.7";
            src = fetchHex {
              pkg = "fastimage";
              version = "0.0.7";
              sha256 =
                "4f92f97ba76304991719c29c1b24b58f89e3593d376646bd7b66d7eb8bf4a659";
            };
            beamDeps  = [ hackney_1_8_6 ];

            meta = {
              longDescription = ''Fastimage finds the dimensions/size or file
                                type of a remote or local image file given the
                                file path or uri respectively.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/stephenmoloney/fastimage";
            };
          } // packageOverrides)
      ) {};

    fastimage = fastimage_0_0_7;

    faust_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "faust";
            version = "0.1.0";
            src = fetchHex {
              pkg = "faust";
              version = "0.1.0";
              sha256 =
                "0ab347a6f377a97e621db0f659841436d6dbb31f1b7c8309e3fb543bec0c473e";
            };

            meta = {
              description = ''A Markov chain text generator for Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/jquadrin/faust";
            };
          } // packageOverrides)
      ) {};

    faust = faust_0_1_0;

    favicon_0_0_7 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          floki_0_17_2,
          httpoison_0_7_5
        }:
          buildMix ({
            name = "favicon";
            version = "0.0.7";
            src = fetchHex {
              pkg = "favicon";
              version = "0.0.7";
              sha256 =
                "b9a577d3d22a6e51843eb334b87de512f48a548d7a7edf56e178e0dde420ba0e";
            };
            beamDeps  = [ floki_0_17_2 httpoison_0_7_5 ];

            meta = {
              description = ''A library that fetches the favicon url for a
                            specified url'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ricn/favicon";
            };
          } // packageOverrides)
      ) {};

    favicon = favicon_0_0_7;

    favicon_finder_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          floki_0_17_2,
          httpoison_0_11_2
        }:
          buildMix ({
            name = "favicon_finder";
            version = "0.1.0";
            src = fetchHex {
              pkg = "favicon_finder";
              version = "0.1.0";
              sha256 =
                "40053916f3356b37589760284046032be98b5341b541a9594c17b90d0acc4587";
            };
            beamDeps  = [ floki_0_17_2 httpoison_0_11_2 ];

            meta = {
              description = ''Extract favicon links from websites.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/matixmatix/favicon-finder";
            };
          } // packageOverrides)
      ) {};

    favicon_finder = favicon_finder_0_1_0;

    fcm_0_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "fcm";
            version = "0.1.0";
            src = fetchHex {
              pkg = "fcm";
              version = "0.1.0";
              sha256 =
                "1f0ac202a05b544a35232f72346906928b0bb916aa94c7f2ac974c057cad34d9";
            };

            meta = {
              description = ''Firebase Cloud Messaging for erlang'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/rymdolle/fcm";
            };
          } // packageOverrides)
      ) {};

    fcm = fcm_0_1_0;

    fdg_0_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "fdg";
            version = "0.0.4";
            src = fetchHex {
              pkg = "fdg";
              version = "0.0.4";
              sha256 =
                "a5ec0f8214e52c63186e620a3556a3d61c6fa9118bf4a6b84b67ff236b8a98da";
            };

            meta = {
              longDescription = ''This project aims to be a simple library with
                                which to build force directed graphs. Ideally,
                                FDG will be used to produce visualiations of
                                networks and static analysis of code.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/johnhamelink/elixir-fdg";
            };
          } // packageOverrides)
      ) {};

    fdg = fdg_0_0_4;

    feature_toggler_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, exredis_0_2_5 }:
          buildMix ({
            name = "feature_toggler";
            version = "0.0.1";
            src = fetchHex {
              pkg = "feature_toggler";
              version = "0.0.1";
              sha256 =
                "dac607aa67971e87b9d8fb8eb3057246d4480c99e11951faa1ed9f204b7f48ae";
            };
            beamDeps  = [ exredis_0_2_5 ];

            meta = {
              description = ''This is a simple feature toggler/switch with
                            redis database written in elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/aravindgd/feature_toggler";
            };
          } // packageOverrides)
      ) {};

    feature_toggler = feature_toggler_0_0_1;

    feeder_2_0_2 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex }:
          buildErlangMk ({
            name = "feeder";
            version = "2.0.2";
            src = fetchHex {
              pkg = "feeder";
              version = "2.0.2";
              sha256 =
                "f2bd5e441772c659778ff8195f60a10866a6049dbdc315c5d0fae16a64191077";
            };

            meta = {
              description = ''Stream parse RSS and Atom formatted XML feeds.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/michaelnisi/feeder";
            };
          } // packageOverrides)
      ) {};

    feeder_2_2_1 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex }:
          buildErlangMk ({
            name = "feeder";
            version = "2.2.1";
            src = fetchHex {
              pkg = "feeder";
              version = "2.2.1";
              sha256 =
                "24ecbd9b25bdd724cf12988bef73415c6c8aa62d7fddda75607ad9ea008b27f2";
            };

            meta = {
              description = ''Stream parse RSS and Atom formatted XML feeds.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/michaelnisi/feeder";
            };
          } // packageOverrides)
      ) {};

    feeder = feeder_2_2_1;

    feeder_ex_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, feeder_2_2_1 }:
          buildMix ({
            name = "feeder_ex";
            version = "1.0.0";
            src = fetchHex {
              pkg = "feeder_ex";
              version = "1.0.0";
              sha256 =
                "575fd0886b7ca433da2696fbb30132f437e959433dd9f962155fdf192db89841";
            };
            beamDeps  = [ feeder_2_2_1 ];

            meta = {
              description = ''RSS feed parser. Simple wrapper for feeder.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/manukall/feeder_ex";
            };
          } // packageOverrides)
      ) {};

    feeder_ex_1_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, feeder_2_2_1 }:
          buildMix ({
            name = "feeder_ex";
            version = "1.1.0";
            src = fetchHex {
              pkg = "feeder_ex";
              version = "1.1.0";
              sha256 =
                "3d06dfcc3e13a2fb66182dffc16e112b0ef9aea432a949f48b56c667ac09d07e";
            };
            beamDeps  = [ feeder_2_2_1 ];

            meta = {
              description = ''RSS feed parser. Simple wrapper for feeder.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/manukall/feeder_ex";
            };
          } // packageOverrides)
      ) {};

    feeder_ex = feeder_ex_1_1_0;

    feederer_0_6_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poolboy_1_5_1 }:
          buildMix ({
            name = "feederer";
            version = "0.6.0";
            src = fetchHex {
              pkg = "feederer";
              version = "0.6.0";
              sha256 =
                "c5041617fc7e71db9a0763f36fbda3fa41598203ab8b47972e3e9dae81039861";
            };
            beamDeps  = [ poolboy_1_5_1 ];

            meta = {
              longDescription = ''Parses XML syndication feeds such as RSS,
                                Atom, etc. Elixir feedparser wrapper using
                                erlport.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/draftli/feederer";
            };
          } // packageOverrides)
      ) {};

    feederer = feederer_0_6_0;

    feedistiller_2_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          alambic_0_1_0,
          feeder_2_0_2,
          httpoison_0_7_5,
          timex_3_0_5
        }:
          buildMix ({
            name = "feedistiller";
            version = "2.0.2";
            src = fetchHex {
              pkg = "feedistiller";
              version = "2.0.2";
              sha256 =
                "453244b3a41fbde7e13ccd675928f41f155799c218b47cbead9e67066efc8276";
            };
            beamDeps  = [
                          alambic_0_1_0 feeder_2_0_2 httpoison_0_7_5 timex_3_0_5
                        ];

            meta = {
              description = ''Download RSS/Atom feeds enclosures.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/sdanzan/feedistiller";
            };
          } // packageOverrides)
      ) {};

    feedistiller = feedistiller_2_0_2;

    feedlex_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_1_3_1
        }:
          buildMix ({
            name = "feedlex";
            version = "0.0.1";
            src = fetchHex {
              pkg = "feedlex";
              version = "0.0.1";
              sha256 =
                "1f20033824f816d6904837601c14bdffcf1a56a53b8ed7d7916a67e48e53b4a5";
            };
            beamDeps  = [ httpoison_0_11_2 poison_1_3_1 ];

            meta = {
              longDescription = ''Feedly RSS reader client for Elixir
                                (elixir-lang). Partial but functional
                                implementation. For now it covers the following
                                Feedly APIs: * authentication; * feed; * stream;
                                * subscription.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/essenciary/feedlex";
            };
          } // packageOverrides)
      ) {};

    feedlex = feedlex_0_0_1;

    feedme_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, timex_3_0_5 }:
          buildMix ({
            name = "feedme";
            version = "0.0.1";
            src = fetchHex {
              pkg = "feedme";
              version = "0.0.1";
              sha256 =
                "021621981bbb03b317e4a948a39d269ab1a2dc6d9ec6ee1c744e565000da680d";
            };
            beamDeps  = [ timex_3_0_5 ];

            meta = {
              description = ''Elixir RSS/Atom parser built on erlang`s xmerl
                            xml parser'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/umurgdk/elixir-feedme";
            };
          } // packageOverrides)
      ) {};

    feedme = feedme_0_0_1;

    feedparser_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "feedparser";
            version = "0.0.3";
            src = fetchHex {
              pkg = "feedparser";
              version = "0.0.3";
              sha256 =
                "ef19d82d5d0db4ca10e1a83c8eefe82678538cdeb143e707bf7ef738177c3eeb";
            };

            meta = {
              description = ''Discover and parse RSS and Atom feeds'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/l3kn/Elixir-Feedparser";
            };
          } // packageOverrides)
      ) {};

    feedparser = feedparser_0_0_3;

    fennec_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          confex_2_0_1,
          jerboa_0_2_0,
          mix_docker_0_3_2
        }:
          buildMix ({
            name = "fennec";
            version = "0.3.0";
            src = fetchHex {
              pkg = "fennec";
              version = "0.3.0";
              sha256 =
                "fc7065600ef9f2a09ce2126a0dc6009b2da38d624411fa5a9f42d13612e78b35";
            };
            beamDeps  = [ confex_2_0_1 jerboa_0_2_0 mix_docker_0_3_2 ];

            meta = {
              description = ''STUN/TURN server'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/esl/fennec";
            };
          } // packageOverrides)
      ) {};

    fennec = fennec_0_3_0;

    fernet_ecto_1_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_4,
          fernetex_0_3_0
        }:
          buildMix ({
            name = "fernet_ecto";
            version = "1.0.0";
            src = fetchHex {
              pkg = "fernet_ecto";
              version = "1.0.0";
              sha256 =
                "6d666c200ff2a6fb6a8705c1d8ab179ae79c7cde83f67f6418800ef7863667b2";
            };
            beamDeps  = [ ecto_2_1_4 fernetex_0_3_0 ];

            meta = {
              description = ''Fernet-encrypted fields for Ecto'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/jkakar/fernet-ecto";
            };
          } // packageOverrides)
      ) {};

    fernet_ecto = fernet_ecto_1_0_0;

    fernetex_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, timex_3_1_15 }:
          buildMix ({
            name = "fernetex";
            version = "0.3.0";
            src = fetchHex {
              pkg = "fernetex";
              version = "0.3.0";
              sha256 =
                "0f9543ea26302944a300a5b31015a2903d9445372f83610c96134acaf4500af3";
            };
            beamDeps  = [ timex_3_1_15 ];

            meta = {
              description = ''Elixir implementation of Fernet library based on
                            https://github.com/fernet/spec'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kennyp/fernetex";
            };
          } // packageOverrides)
      ) {};

    fernetex = fernetex_0_3_0;

    ffaker_0_4_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ffaker";
            version = "0.4.0";
            src = fetchHex {
              pkg = "ffaker";
              version = "0.4.0";
              sha256 =
                "150485315472a9b57172cfecbd990282082ae5f07550c512a408052f6dfc392f";
            };

            meta = {
              description = ''elixir porting of
                            https://github.com/ffaker/ffaker'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/marocchino/ffaker";
            };
          } // packageOverrides)
      ) {};

    ffaker = ffaker_0_4_0;

    ffi_0_0_1_alpha = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, elixir_make_0_2_0
        }:
          buildMix ({
            name = "ffi";
            version = "0.0.1-alpha";
            src = fetchHex {
              pkg = "ffi";
              version = "0.0.1-alpha";
              sha256 =
                "5b282a867b13a54b2b8f11cd2408f1ed5f0593800dbf78f62411acb2a976a231";
            };
            beamDeps  = [ elixir_make_0_2_0 ];

            meta = {
              description = ''Foreign Function Interface'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/joshnuss/elixir-ffi";
            };
          } // packageOverrides)
      ) {};

    ffi = ffi_0_0_1_alpha;

    ffmpex_0_4_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ffmpex";
            version = "0.4.1";
            src = fetchHex {
              pkg = "ffmpex";
              version = "0.4.1";
              sha256 =
                "6d671bd6a2ec0198742d8c2eb6db9bbd718afd81bdc2587538828a82dd8c2fcc";
            };

            meta = {
              description = ''FFmpeg command line wrapper.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/talklittle/ffmpex";
            };
          } // packageOverrides)
      ) {};

    ffmpex = ffmpex_0_4_1;

    ffnerd_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exconstructor_1_0_2,
          httpoison_0_8_3,
          poison_2_2_0
        }:
          buildMix ({
            name = "ffnerd";
            version = "0.2.0";
            src = fetchHex {
              pkg = "ffnerd";
              version = "0.2.0";
              sha256 =
                "53640b012346f98c45ef5cf5e33aa33b24cff032c396ef6a8bdb5f6d1030a14e";
            };
            beamDeps  = [ exconstructor_1_0_2 httpoison_0_8_3 poison_2_2_0 ];

            meta = {
              longDescription = ''An Elixir wrapper for the Fantasy Football
                                Nerd API
                                (http://www.fantasyfootballnerd.com/fantasy-football-api)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jessejanderson/ffnerd-api-elixir";
            };
          } // packageOverrides)
      ) {};

    ffnerd = ffnerd_0_2_0;

    fibonacci_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "fibonacci";
            version = "0.2.0";
            src = fetchHex {
              pkg = "fibonacci";
              version = "0.2.0";
              sha256 =
                "b33f43689a7b48b5fb7ed1225b08f2db2003ec8a9128de91ec25feb5083db725";
            };

            meta = {
              description = ''An Elixir interface to the Fibonacci series.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/stevegrossi/fibonacci";
            };
          } // packageOverrides)
      ) {};

    fibonacci = fibonacci_0_2_0;

    fifo_db_0_2_7 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          eleveldb_2_2_20,
          lager_3_2_4,
          rocksdb_0_7_1
        }:
          buildRebar3 ({
            name = "fifo_db";
            version = "0.2.7";
            src = fetchHex {
              pkg = "fifo_db";
              version = "0.2.7";
              sha256 =
                "e80a205acbba66df1bf4102f55c529d64792c2071f72c9cfd72af709e59e952b";
            };

            beamDeps  = [ eleveldb_2_2_20 lager_3_2_4 rocksdb_0_7_1 ];

            meta = {
              description = ''Project-FiFo db wrapper'';
              license = stdenv.lib.licenses.cddl;
              homepage = "https://github.com/project-fifo/fifo_db";
            };
          } // packageOverrides)
      ) {};

    fifo_db = fifo_db_0_2_7;

    fifo_dt_0_1_66 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          fifo_utils_0_1_20,
          jsx_1_4_5,
          jsxd_0_1_10,
          lager_2_1_1,
          libsnarlmatch_0_1_7,
          riak_dt_2_1_1
        }:
          buildRebar3 ({
            name = "fifo_dt";
            version = "0.1.66";
            src = fetchHex {
              pkg = "fifo_dt";
              version = "0.1.66";
              sha256 =
                "a72df25753a0dad32b22b02356f2979b8e3556f0333449f476d581332f02da6b";
            };

            beamDeps  = [
                          fifo_utils_0_1_20
                          jsx_1_4_5
                          jsxd_0_1_10
                          lager_2_1_1
                          libsnarlmatch_0_1_7
                          riak_dt_2_1_1
                        ];

            meta = {
              description = ''FiFo datatype collection'';
              license = stdenv.lib.licenses.cddl;
              homepage = "https://github.com/project-fifo/fifo_dt";
            };
          } // packageOverrides)
      ) {};

    fifo_dt_0_2_9 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          fifo_utils_0_1_37,
          jsxd_0_2_4,
          lager_3_2_4,
          libsnarlmatch_0_1_8,
          riak_dt_2_1_1
        }:
          buildRebar3 ({
            name = "fifo_dt";
            version = "0.2.9";
            src = fetchHex {
              pkg = "fifo_dt";
              version = "0.2.9";
              sha256 =
                "0e8e3292d1ac437af7a5a029a8207de1339d90a74cf913e4d3d18a721e486dd7";
            };

            beamDeps  = [
                          fifo_utils_0_1_37
                          jsxd_0_2_4
                          lager_3_2_4
                          libsnarlmatch_0_1_8
                          riak_dt_2_1_1
                        ];

            meta = {
              description = ''FiFo datatype collection'';
              license = stdenv.lib.licenses.cddl;
              homepage = "https://github.com/project-fifo/fifo_dt";
            };
          } // packageOverrides)
      ) {};

    fifo_dt = fifo_dt_0_2_9;

    fifo_lager_0_1_4 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          lager_3_2_4,
          lager_graylog_0_1_1,
          lager_logstash_backend_0_1_1
        }:
          buildRebar3 ({
            name = "fifo_lager";
            version = "0.1.4";
            src = fetchHex {
              pkg = "fifo_lager";
              version = "0.1.4";
              sha256 =
                "6f4b2c620fca09f4cd36040a76964fd0b510aa6fe520ed0c7e8362c5d47120cb";
            };

            beamDeps  = [
                          lager_3_2_4
                          lager_graylog_0_1_1
                          lager_logstash_backend_0_1_1
                        ];

            meta = {
              description = ''Lager config and dependencies'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    fifo_lager = fifo_lager_0_1_4;

    fifo_s3_0_2_11 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          base16_1_0_0,
          erlcloud_2_2_10,
          hackney_1_8_6,
          lager_3_2_4,
          poolboy_1_5_1
        }:
          buildRebar3 ({
            name = "fifo_s3";
            version = "0.2.11";
            src = fetchHex {
              pkg = "fifo_s3";
              version = "0.2.11";
              sha256 =
                "5890a0aa64b376e994ab33b03a2881fe57001f9dc13bf5b59a2e09b1d604eda7";
            };

            beamDeps  = [
                          base16_1_0_0
                          erlcloud_2_2_10
                          hackney_1_8_6
                          lager_3_2_4
                          poolboy_1_5_1
                        ];

            meta = {
              description = ''S3 storange client library for erlang'';
              license = stdenv.lib.licenses.cddl;
              homepage = "https://github.com/project-fifo/fifo_s3";
            };
          } // packageOverrides)
      ) {};

    fifo_s3 = fifo_s3_0_2_11;

    fifo_spec_0_1_27 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, fifo_dt_0_1_66
        }:
          buildRebar3 ({
            name = "fifo_spec";
            version = "0.1.27";
            src = fetchHex {
              pkg = "fifo_spec";
              version = "0.1.27";
              sha256 =
                "2ef9662a7423da74b7f4517e9470e44e03383c1116ee6da3944021ff3cd44ef6";
            };

            beamDeps  = [ fifo_dt_0_1_66 ];

            meta = {
              description = ''Specs for FiFo APIs'';
              license = stdenv.lib.licenses.cddl;
              homepage = "https://github.com/project-fifo/fifo_spec";
            };
          } // packageOverrides)
      ) {};

    fifo_spec_0_1_32 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, fifo_dt_0_2_9 }:
          buildRebar3 ({
            name = "fifo_spec";
            version = "0.1.32";
            src = fetchHex {
              pkg = "fifo_spec";
              version = "0.1.32";
              sha256 =
                "23667c6d70e62081b0975b13e891a98e5c86c2773f60af7b84450aba2eea7889";
            };

            beamDeps  = [ fifo_dt_0_2_9 ];

            meta = {
              description = ''Specs for FiFo APIs'';
              license = stdenv.lib.licenses.cddl;
              homepage = "https://github.com/project-fifo/fifo_spec";
            };
          } // packageOverrides)
      ) {};

    fifo_spec = fifo_spec_0_1_32;

    fifo_utils_0_1_20 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          lager_2_1_1,
          uuid_erl_1_5_1
        }:
          buildRebar3 ({
            name = "fifo_utils";
            version = "0.1.20";
            src = fetchHex {
              pkg = "fifo_utils";
              version = "0.1.20";
              sha256 =
                "01ec5ae5e8a8c3d8e9dc658de1c00818ac807195b4a5c47f98aa2c9af4d54663";
            };

            beamDeps  = [ lager_2_1_1 uuid_erl_1_5_1 ];

            meta = {
              description = ''FiFo utility library'';
              license = stdenv.lib.licenses.cddl;
              homepage = "https://github.com/project-fifo/fifo_utils";
            };
          } // packageOverrides)
      ) {};

    fifo_utils_0_1_37 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          jsone_1_4_3,
          lager_3_2_4,
          uuid_erl_1_5_4
        }:
          buildRebar3 ({
            name = "fifo_utils";
            version = "0.1.37";
            src = fetchHex {
              pkg = "fifo_utils";
              version = "0.1.37";
              sha256 =
                "d6c996d006a8f91aeeedab3709f20dfb49c8de6fe04d66e791a4062fbc332d94";
            };

            beamDeps  = [ jsone_1_4_3 lager_3_2_4 uuid_erl_1_5_4 ];

            meta = {
              description = ''FiFo utility library'';
              license = stdenv.lib.licenses.cddl;
              homepage = "https://github.com/project-fifo/fifo_utils";
            };
          } // packageOverrides)
      ) {};

    fifo_utils = fifo_utils_0_1_37;

    fifocache_1_0_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "fifocache";
            version = "1.0.1";
            src = fetchHex {
              pkg = "fifocache";
              version = "1.0.1";
              sha256 =
                "363f03e2871b8d8c7564a47133162ce18c362bd70897f5bd58fa246a0e169a43";
            };

            meta = {
              description = ''Fixed size FIFO cache implementation'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/mururu/fifocache";
            };
          } // packageOverrides)
      ) {};

    fifocache = fifocache_1_0_1;

    figaro_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "figaro";
            version = "0.1.0";
            src = fetchHex {
              pkg = "figaro";
              version = "0.1.0";
              sha256 =
                "3342018ab0135211b85d00f34567ca3a2d6d66289840c9eb0096ec97fad8a201";
            };

            meta = {
              description = ''Simple Elixir project configuration'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/trestrantham/ex_figaro";
            };
          } // packageOverrides)
      ) {};

    figaro = figaro_0_1_0;

    figaro_elixir_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, yamerl_0_4_0 }:
          buildMix ({
            name = "figaro_elixir";
            version = "1.0.1";
            src = fetchHex {
              pkg = "figaro_elixir";
              version = "1.0.1";
              sha256 =
                "0a9483c754a9064dff30de2df4b12720ef4726ee9c1ca2b63307acadefb551de";
            };
            beamDeps  = [ yamerl_0_4_0 ];

            meta = {
              description = ''Environmental variables manager and configuration
                            management tool.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/KamilLelonek/figaro-elixir";
            };
          } // packageOverrides)
      ) {};

    figaro_elixir = figaro_elixir_1_0_1;

    file_info_0_0_2 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, mimetype_parser_0_1_2
        }:
          buildMix ({
            name = "file_info";
            version = "0.0.2";
            src = fetchHex {
              pkg = "file_info";
              version = "0.0.2";
              sha256 =
                "f28456aafd014c01a4188fee36c1571e9669b0506eb22c830db357084c0c9cb2";
            };
            beamDeps  = [ mimetype_parser_0_1_2 ];

            meta = {
              description = ''Get MIME-type of a file by its magic number
                            (linux only)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/NobbZ/file_info";
            };
          } // packageOverrides)
      ) {};

    file_info = file_info_0_0_2;

    file_signatures_0_1_6 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "file_signatures";
            version = "0.1.6";
            src = fetchHex {
              pkg = "file_signatures";
              version = "0.1.6";
              sha256 =
                "ce4c92ddd20f40f7ab2ce70b641b7a58e04891b9a6ee2fbd2eea9162db19e3a5";
            };

            meta = {
              description = ''File signatures module for OTP'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/botsunit/file_signatures";
            };
          } // packageOverrides)
      ) {};

    file_signatures = file_signatures_0_1_6;

    filepreviews_1_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_7_5,
          poison_1_4_0
        }:
          buildMix ({
            name = "filepreviews";
            version = "1.0.1";
            src = fetchHex {
              pkg = "filepreviews";
              version = "1.0.1";
              sha256 =
                "bdb67cd960dd98a4a1d6d0d4944721bf98a506dbfb2b361ca473dbaf40cc9470";
            };
            beamDeps  = [ httpoison_0_7_5 poison_1_4_0 ];

            meta = {
              description = ''FilePreviews.io API client library for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/GetBlimp/filepreviews-elixir";
            };
          } // packageOverrides)
      ) {};

    filepreviews = filepreviews_1_0_1;

    filesize_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "filesize";
            version = "0.1.1";
            src = fetchHex {
              pkg = "filesize";
              version = "0.1.1";
              sha256 =
                "c973b07220df28ffd5f14d982e8533f6a95f724d4d1f24f6d3bc22574dcf686f";
            };

            meta = {
              description = ''Very small module to turn a bytes value into a
                            human readable format'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/slickcoach/filesize";
            };
          } // packageOverrides)
      ) {};

    filesize = filesize_0_1_1;

    filterable_0_5_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "filterable";
            version = "0.5.2";
            src = fetchHex {
              pkg = "filterable";
              version = "0.5.2";
              sha256 =
                "d215d0ca100ae23716c353ed8be1ee3c18a2f68929387470b5f4a672a7cc807e";
            };

            meta = {
              longDescription = ''Allows to map incoming query parameters to
                                filter function with easy to use DSL inspired by
                                Rails has_scope.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/omohokcoj/filterable";
            };
          } // packageOverrides)
      ) {};

    filterable = filterable_0_5_2;

    filtrex_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_4,
          timex_3_0_5
        }:
          buildMix ({
            name = "filtrex";
            version = "0.3.0";
            src = fetchHex {
              pkg = "filtrex";
              version = "0.3.0";
              sha256 =
                "ab3a1edad7c0d1b14db08f88f0eb86e6a9b24a2529ae2a32abfb0d8d5c181b8a";
            };
            beamDeps  = [ ecto_2_1_4 timex_3_0_5 ];

            meta = {
              longDescription = ''A library for performing and validating
                                complex filters from a client (e.g. smart
                                filters)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rcdilorenzo/filtrex";
            };
          } // packageOverrides)
      ) {};

    filtrex = filtrex_0_3_0;

    finance_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          credo_0_8_1,
          timex_3_0_5
        }:
          buildMix ({
            name = "finance";
            version = "0.0.2";
            src = fetchHex {
              pkg = "finance";
              version = "0.0.2";
              sha256 =
                "311be2e398d105f7a13e932142632a00e507f3825886d584db9df7c17efe6c49";
            };
            beamDeps  = [ credo_0_8_1 timex_3_0_5 ];

            meta = {
              longDescription = ''A library to calculate Xirr through the
                                bisection method using parallel processes.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tubedude/finance-elixir";
            };
          } // packageOverrides)
      ) {};

    finance = finance_0_0_2;

    finch_0_0_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_0_4,
          ecto_0_2_4,
          phoenix_0_4_1,
          postgrex_0_6_0
        }:
          buildMix ({
            name = "finch";
            version = "0.0.3";
            src = fetchHex {
              pkg = "finch";
              version = "0.0.3";
              sha256 =
                "48168045693af14b28263a5c121794dfcfb6da9eb33cc7a7eca93899668a2032";
            };
            beamDeps  = [
                          cowboy_1_0_4 ecto_0_2_4 phoenix_0_4_1 postgrex_0_6_0
                        ];

            meta = {
              longDescription = '' Resource layer for Phoenix and Ecto projects
                                for auto-generated RESTful CRUD APIs. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rozap/finch";
            };
          } // packageOverrides)
      ) {};

    finch = finch_0_0_3;

    fingerprint_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "fingerprint";
            version = "0.3.0";
            src = fetchHex {
              pkg = "fingerprint";
              version = "0.3.0";
              sha256 =
                "8e193ad3855d8c555cd85f2e43afd41486eeeec54731dfea3f7f81d6aec423d0";
            };

            meta = {
              longDescription = ''Fingerprint provides system information like
                                memory, CPU, os-release, block devices and
                                network.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/bradleyd/fingerprint";
            };
          } // packageOverrides)
      ) {};

    fingerprint = fingerprint_0_3_0;

    finicity_0_0_5 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          floki_0_17_2,
          httpotion_2_2_1,
          xml_builder_0_0_9
        }:
          buildMix ({
            name = "finicity";
            version = "0.0.5";
            src = fetchHex {
              pkg = "finicity";
              version = "0.0.5";
              sha256 =
                "b58ef39987976cf50851311a95b40504ba763c0d82256b012f5b1246bd92d9b4";
            };
            beamDeps  = [ floki_0_17_2 httpotion_2_2_1 xml_builder_0_0_9 ];

            meta = {
              description = ''Client library for Finicity.'';

            };
          } // packageOverrides)
      ) {};

    finicity = finicity_0_0_5;

    fintex_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          decimal_1_3_0,
          earmark_0_2_1,
          exactor_2_2_3,
          httpotion_2_2_2,
          ibrowse_4_2_2,
          luhnatex_0_5_1,
          mt940_1_0_0,
          ssl_verify_hostname_1_0_0,
          timex_3_0_5,
          vex_0_5_5,
          xml_builder_0_0_9
        }:
          buildMix ({
            name = "fintex";
            version = "0.3.0";
            src = fetchHex {
              pkg = "fintex";
              version = "0.3.0";
              sha256 =
                "e86f156552ceff27ac57e646ef29522a9955a5579aa0b26ec1e5aa14e1237495";
            };
            beamDeps  = [
                          decimal_1_3_0
                          earmark_0_2_1
                          exactor_2_2_3
                          httpotion_2_2_2
                          ibrowse_4_2_2
                          luhnatex_0_5_1
                          mt940_1_0_0
                          ssl_verify_hostname_1_0_0
                          timex_3_0_5
                          vex_0_5_5
                          xml_builder_0_0_9
                        ];

            meta = {
              description = ''HBCI/FinTS client library for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/my-flow/fintex";
            };
          } // packageOverrides)
      ) {};

    fintex = fintex_0_3_0;

    firebase_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "firebase";
            version = "0.0.1";
            src = fetchHex {
              pkg = "firebase";
              version = "0.0.1";
              sha256 =
                "5f49c9f27352ec925466579ba3104527fce5736d158250329f70c765bab00619";
            };

            meta = {
              description = ''Elixir SDK for Firebase Database, Cloud Messaging
                            and User Authentication.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/smart-commut/firebase";
            };
          } // packageOverrides)
      ) {};

    firebase = firebase_0_0_1;

    firebase_token_1_1_1 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          jose_1_7_9,
          jsx_2_8_0
        }:
          buildRebar3 ({
            name = "firebase_token";
            version = "1.1.1";
            src = fetchHex {
              pkg = "firebase_token";
              version = "1.1.1";
              sha256 =
                "665486895ec9b68565f1db2d559954be8312e0430ae87917bde57af70e1dea27";
            };

            beamDeps  = [ jose_1_7_9 jsx_2_8_0 ];

            meta = {
              description = ''Custom Firebase token generator library for
                            Erlang'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ruel/firebase-token-erlang";
            };
          } // packageOverrides)
      ) {};

    firebase_token = firebase_token_1_1_1;

    fireworks_0_6_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          amqp_0_2_2,
          poolboy_1_5_1
        }:
          buildMix ({
            name = "fireworks";
            version = "0.6.0";
            src = fetchHex {
              pkg = "fireworks";
              version = "0.6.0";
              sha256 =
                "d475fe65edfe16b15e4b8f412ee1db6c8e1e9bb7c5dde824d3f55956aea82224";
            };
            beamDeps  = [ amqp_0_2_2 poolboy_1_5_1 ];

            meta = {
              description = ''Simple elixir work queue consumption for
                            RabbitMQ'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/livehelpnow/fireworks";
            };
          } // packageOverrides)
      ) {};

    fireworks = fireworks_0_6_0;

    firex_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, bunt_0_1_6 }:
          buildMix ({
            name = "firex";
            version = "0.2.0";
            src = fetchHex {
              pkg = "firex";
              version = "0.2.0";
              sha256 =
                "801279b34d95888a20e202f7f47999e01dbb08169f8637b96bb528104cc28052";
            };
            beamDeps  = [ bunt_0_1_6 ];

            meta = {
              longDescription = ''Firex is a library for automatically
                                generating command line interfaces (CLIs) from
                                an elixir module'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/msoedov/firex";
            };
          } // packageOverrides)
      ) {};

    firex = firex_0_2_0;

    firmata_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "firmata";
            version = "0.0.1";
            src = fetchHex {
              pkg = "firmata";
              version = "0.0.1";
              sha256 =
                "c3f928839c32e366389b3f9d34cfc73505952f854dd13c52eff56b9e5853ea6c";
            };

            meta = {
              longDescription = ''This package implements the Firmata protocol.
                                Firmata is a MIDI-based protocol for
                                communicating with microcontrollers.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/kfatehi/firmata";
            };
          } // packageOverrides)
      ) {};

    firmata = firmata_0_0_1;

    fitbit_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_4_10,
          httpoison_0_8_3,
          poison_1_5_2
        }:
          buildMix ({
            name = "fitbit";
            version = "0.0.1";
            src = fetchHex {
              pkg = "fitbit";
              version = "0.0.1";
              sha256 =
                "dc09d3b6d37ea67d21a52a704bd52357daa223e18afe4831515730452b3ada25";
            };
            beamDeps  = [ hackney_1_4_10 httpoison_0_8_3 poison_1_5_2 ];

            meta = {
              description = ''A Fitbit Library for Elixir'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/trestrantham/fitbit";
            };
          } // packageOverrides)
      ) {};

    fitbit = fitbit_0_0_1;

    fitex_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "fitex";
            version = "0.0.1";
            src = fetchHex {
              pkg = "fitex";
              version = "0.0.1";
              sha256 =
                "5918d784a419fa1367606b6bc01b202febc3762b5b624e5829db636415041fcb";
            };

            meta = {
              description = ''FitEx is a Macro-Module which provides a bit of
                            sugar for function definitions.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Puddah/FitEx";
            };
          } // packageOverrides)
      ) {};

    fitex = fitex_0_0_1;

    fixby_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "fixby";
            version = "0.0.1";
            src = fetchHex {
              pkg = "fixby";
              version = "0.0.1";
              sha256 =
                "e361bb9324c616e397fc78bda81a3629a39189f4675aefdeb54e85dfa74a629f";
            };

            meta = {
              description = ''FIXBY comments that raise after a given version
                            of Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/CoderDennis/fixby-elixir";
            };
          } // packageOverrides)
      ) {};

    fixby = fixby_0_0_1;

    fixer_0_2_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          bucs_1_0_10,
          doteki_1_0_5,
          jsx_2_8_2
        }:
          buildMix ({
            name = "fixer";
            version = "0.2.4";
            src = fetchHex {
              pkg = "fixer";
              version = "0.2.4";
              sha256 =
                "fa25c48f2692e73fa00f11138e7ea3f6425eab5a1cfe442f0442e2ce6a58f519";
            };
            beamDeps  = [ bucs_1_0_10 doteki_1_0_5 jsx_2_8_2 ];

            meta = {
              longDescription = ''Erlang/Elixir module for fixer.io - foreign
                                exchange rates and currency conversion'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/botsunit/fixer";
            };
          } // packageOverrides)
      ) {};

    fixer = fixer_0_2_4;

    fixme_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "fixme";
            version = "0.1.0";
            src = fetchHex {
              pkg = "fixme";
              version = "0.1.0";
              sha256 =
                "232308226bbbb9959a9796957f610edbc4694bc1240792b8af84d9c19c367af7";
            };

            meta = {
              description = ''FIXME comments that raise after a certain point
                            in time.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/henrik/fixme-elixir";
            };
          } // packageOverrides)
      ) {};

    fixme = fixme_0_1_0;

    fixturist_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ecto_2_1_4 }:
          buildMix ({
            name = "fixturist";
            version = "0.1.1";
            src = fetchHex {
              pkg = "fixturist";
              version = "0.1.1";
              sha256 =
                "fe6bd7fbe83ebf022a8b475b61c37642ab44029645bba151b2cb27d9c26a6cfb";
            };
            beamDeps  = [ ecto_2_1_4 ];

            meta = {
              longDescription = ''Fix the foreign-key constraints in your
                                fixture driven backend tests. It is an algorithm
                                for populating relationships from your
                                development database'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/izelnakri/fixturist";
            };
          } // packageOverrides)
      ) {};

    fixturist = fixturist_0_1_1;

    flames_0_2_6 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_1_0_1,
          phoenix_1_1_9
        }:
          buildMix ({
            name = "flames";
            version = "0.2.6";
            src = fetchHex {
              pkg = "flames";
              version = "0.2.6";
              sha256 =
                "76a3c61980c3066b9d2b5e557043fc4fea7b7735ab61a1bf7dd351f58ff06586";
            };
            beamDeps  = [ ecto_1_0_1 phoenix_1_1_9 ];

            meta = {
              longDescription = ''Live error monitoring to watch your Phoenix
                                app going up in flames in real time! Open source
                                version of error aggregation services. Hooks
                                into Elixir`s Logger to provide accurate error
                                reporting all throughout your application.'';
              license = stdenv.lib.licenses.mit;
              homepage = "http://github.com/mgwidmann/flames";
            };
          } // packageOverrides)
      ) {};

    flames = flames_0_2_6;

    flasked_0_4_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "flasked";
            version = "0.4.0";
            src = fetchHex {
              pkg = "flasked";
              version = "0.4.0";
              sha256 =
                "8499535ce20f8e9d2e38ce7e9ecac1a9fc5f402f3f0ab58661c1ed8795f3178c";
            };

            meta = {
              longDescription = ''Flasked injects application environment
                                configuration at runtime based on given ENV
                                variables and a mapping. This is pretty useful
                                for applications following the 12factor app
                                principle or which are deployed in
                                containerization infrastructures like Docker.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/asaaki/flasked";
            };
          } // packageOverrides)
      ) {};

    flasked = flasked_0_4_0;

    fleet_api_0_0_15 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_7_1,
          poison_1_3_1
        }:
          buildMix ({
            name = "fleet_api";
            version = "0.0.15";
            src = fetchHex {
              pkg = "fleet_api";
              version = "0.0.15";
              sha256 =
                "8aa8206a91129dab3b2a11ffd16b131ef1e37ceff633ed818616e96c8dca7957";
            };
            beamDeps  = [ httpoison_0_7_1 poison_1_3_1 ];

            meta = {
              longDescription = ''A simple wrapper for the Fleet API. Can be
                                used with etcd tokens or via direct node
                                URLs.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jordan0day/fleet-api.git";
            };
          } // packageOverrides)
      ) {};

    fleet_api = fleet_api_0_0_15;

    flickrex_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          oauther_1_1_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "flickrex";
            version = "0.3.0";
            src = fetchHex {
              pkg = "flickrex";
              version = "0.3.0";
              sha256 =
                "05b1e21cc8216d5095b6690f1560c62a28652c3a5f9c5267c0289bd8f4b8a39b";
            };
            beamDeps  = [ oauther_1_1_0 poison_3_1_0 ];

            meta = {
              description = ''Flickr API client library for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/christopheradams/flickrex";
            };
          } // packageOverrides)
      ) {};

    flickrex = flickrex_0_3_0;

    fling_1_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, lager_3_0_2 }:
          buildRebar3 ({
            name = "fling";
            version = "1.0.0";
            src = fetchHex {
              pkg = "fling";
              version = "1.0.0";
              sha256 =
                "82fb093d27ee7431d485e6ae7aac4717175105a348a5b5e9fb21cad80ef59dcb";
            };

            beamDeps  = [ lager_3_0_2 ];

            meta = {
              description = ''Library that abuses module constant pool'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/basho-labs/fling";
            };
          } // packageOverrides)
      ) {};

    fling = fling_1_0_0;

    flip_text_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "flip_text";
            version = "0.1.2";
            src = fetchHex {
              pkg = "flip_text";
              version = "0.1.2";
              sha256 =
                "e4a3d07f5dceae50c4ff505682f1c9c02ef7cb6d787d3b03830f4594a06d9a61";
            };

            meta = {
              description = ''˙ʎɹɐɹqıʃ ƃuıddıʃɟ ʇxǝʇ ǝʃdɯıs
                            ∀'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/brienw/flipex";
            };
          } // packageOverrides)
      ) {};

    flip_text = flip_text_0_1_2;

    flippant_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, redix_0_6_1 }:
          buildMix ({
            name = "flippant";
            version = "0.3.0";
            src = fetchHex {
              pkg = "flippant";
              version = "0.3.0";
              sha256 =
                "d2b4096944aa0fb38cbde066223734c93fb2ddc77d7d0773ebc1c65d38a87d9a";
            };
            beamDeps  = [ redix_0_6_1 ];

            meta = {
              description = ''Fast feature toggling for applications, backed by
                            Redis.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sorentwo/flippant";
            };
          } // packageOverrides)
      ) {};

    flippant = flippant_0_3_0;

    flock_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "flock";
            version = "0.0.1";
            src = fetchHex {
              pkg = "flock";
              version = "0.0.1";
              sha256 =
                "3a533d32a450cb0e5b78880c421080fb34fb95d4cf3c1ee053b4e97c6cadd4c8";
            };

            meta = {
              description = ''Distributed Services '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/chrismccord/flock";
            };
          } // packageOverrides)
      ) {};

    flock = flock_0_0_1;

    floki_0_10_1 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, mochiweb_html_2_15_0
        }:
          buildMix ({
            name = "floki";
            version = "0.10.1";
            src = fetchHex {
              pkg = "floki";
              version = "0.10.1";
              sha256 =
                "9c48096212688ad819011b36ab7e6f85c5ee482a3ed26e59655c134731d4cdd1";
            };
            beamDeps  = [ mochiweb_html_2_15_0 ];

            meta = {
              description = ''Floki is a simple HTML parser that enables search
                            for nodes using CSS selectors.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/philss/floki";
            };
          } // packageOverrides)
      ) {};

    floki_0_11_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, mochiweb_2_15_0 }:
          buildMix ({
            name = "floki";
            version = "0.11.0";
            src = fetchHex {
              pkg = "floki";
              version = "0.11.0";
              sha256 =
                "c9914651f148a4dfb011169d29ba8db1d36135141296ce8f16fb184e39ff3f94";
            };
            beamDeps  = [ mochiweb_2_15_0 ];

            meta = {
              description = ''Floki is a simple HTML parser that enables search
                            for nodes using CSS selectors.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/philss/floki";
            };
          } // packageOverrides)
      ) {};

    floki_0_12_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, mochiweb_2_15_0 }:
          buildMix ({
            name = "floki";
            version = "0.12.1";
            src = fetchHex {
              pkg = "floki";
              version = "0.12.1";
              sha256 =
                "79e2d3c9c74ce5e8cfdc13aa4a7cbac45c6985ae52615c181ccbda1b04d51d24";
            };
            beamDeps  = [ mochiweb_2_15_0 ];

            meta = {
              description = ''Floki is a simple HTML parser that enables search
                            for nodes using CSS selectors.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/philss/floki";
            };
          } // packageOverrides)
      ) {};

    floki_0_14_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, mochiweb_2_15_0 }:
          buildMix ({
            name = "floki";
            version = "0.14.0";
            src = fetchHex {
              pkg = "floki";
              version = "0.14.0";
              sha256 =
                "d21b1e459b218718c20defebb8dec6826091f67b0f58e6d0d0762294cc7150d3";
            };
            beamDeps  = [ mochiweb_2_15_0 ];

            meta = {
              description = ''Floki is a simple HTML parser that enables search
                            for nodes using CSS selectors.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/philss/floki";
            };
          } // packageOverrides)
      ) {};

    floki_0_15_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, mochiweb_2_15_0 }:
          buildMix ({
            name = "floki";
            version = "0.15.0";
            src = fetchHex {
              pkg = "floki";
              version = "0.15.0";
              sha256 =
                "a677df9cbf0e800fa185d3733c30c7d8f4963c07f77ffacef10ae0f567083cd2";
            };
            beamDeps  = [ mochiweb_2_15_0 ];

            meta = {
              description = ''Floki is a simple HTML parser that enables search
                            for nodes using CSS selectors.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/philss/floki";
            };
          } // packageOverrides)
      ) {};

    floki_0_17_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, mochiweb_2_15_0 }:
          buildMix ({
            name = "floki";
            version = "0.17.2";
            src = fetchHex {
              pkg = "floki";
              version = "0.17.2";
              sha256 =
                "28c0da0b4aada38a0fba819e5872e8d05f3dea54d9b21017ac73321db4d6ca14";
            };
            beamDeps  = [ mochiweb_2_15_0 ];

            meta = {
              description = ''Floki is a simple HTML parser that enables search
                            for nodes using CSS selectors.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/philss/floki";
            };
          } // packageOverrides)
      ) {};

    floki = floki_0_17_2;

    floki_0_9_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, mochiweb_html_2_15_0
        }:
          buildMix ({
            name = "floki";
            version = "0.9.0";
            src = fetchHex {
              pkg = "floki";
              version = "0.9.0";
              sha256 =
                "f0bac36e2ccf866addf55e2d0c2bbb7e2b08aa9d91841ee28561d4a9f51001f1";
            };
            beamDeps  = [ mochiweb_html_2_15_0 ];

            meta = {
              description = ''Floki is a simple HTML parser that enables search
                            for nodes using CSS selectors.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/philss/floki";
            };
          } // packageOverrides)
      ) {};

    floorplan_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_2_2_1,
          poison_1_5_2,
          postgrex_1_0_0_rc_1,
          timex_3_0_5,
          tzdata_0_5_3,
          xml_builder_0_0_9
        }:
          buildMix ({
            name = "floorplan";
            version = "0.1.1";
            src = fetchHex {
              pkg = "floorplan";
              version = "0.1.1";
              sha256 =
                "56679e586efa7ae179a940920ef2b4d56e40b9b1d01cb4ce8528ef6870a77b00";
            };
            beamDeps  = [
                          httpotion_2_2_1
                          poison_1_5_2
                          postgrex_1_0_0_rc_1
                          timex_3_0_5
                          tzdata_0_5_3
                          xml_builder_0_0_9
                        ];

            meta = {
              description = ''A module for generating sitemaps from a variety
                            of data sources'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/househappy/floorplan";
            };
          } // packageOverrides)
      ) {};

    floorplan = floorplan_0_1_1;

    flow_0_11_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, gen_stage_0_11_0 }:
          buildMix ({
            name = "flow";
            version = "0.11.1";
            src = fetchHex {
              pkg = "flow";
              version = "0.11.1";
              sha256 =
                "8484bc02530cc3539595369306d0196d90acc209c33b0ce27f68529638f1bf82";
            };
            beamDeps  = [ gen_stage_0_11_0 ];

            meta = {
              description = ''Computational parallel flows for Elixir'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/elixir-lang/flow";
            };
          } // packageOverrides)
      ) {};

    flow_0_12_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, gen_stage_0_12_0 }:
          buildMix ({
            name = "flow";
            version = "0.12.0";
            src = fetchHex {
              pkg = "flow";
              version = "0.12.0";
              sha256 =
                "652c7c8e332f7ec709e57bc5006d3ad3982effec278dcdacfc4b4868a3a8242f";
            };
            beamDeps  = [ gen_stage_0_12_0 ];

            meta = {
              description = ''Computational parallel flows for Elixir'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/elixir-lang/flow";
            };
          } // packageOverrides)
      ) {};

    flow = flow_0_12_0;

    flower_power_0_3_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_7_5,
          poison_1_5_2,
          timex_3_0_5
        }:
          buildMix ({
            name = "flower_power";
            version = "0.3.2";
            src = fetchHex {
              pkg = "flower_power";
              version = "0.3.2";
              sha256 =
                "f0b7d14fbe0ea78225f3b8424bc907ca6d977576d974b57dcd860afa8ed426a8";
            };
            beamDeps  = [ httpoison_0_7_5 poison_1_5_2 timex_3_0_5 ];

            meta = {
              description = ''Api client for flower power cloud api'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Korbin73/FlowerPower";
            };
          } // packageOverrides)
      ) {};

    flower_power = flower_power_0_3_2;

    flowex_0_4_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, gen_stage_0_11_0 }:
          buildMix ({
            name = "flowex";
            version = "0.4.0";
            src = fetchHex {
              pkg = "flowex";
              version = "0.4.0";
              sha256 =
                "c8943e14cab00f564d09b0f177a4fbae299c0bf39f077af82a16697723cbdaaa";
            };
            beamDeps  = [ gen_stage_0_11_0 ];

            meta = {
              description = ''Flow-Based Programming with Elixir GenStage.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/antonmi/flowex";
            };
          } // packageOverrides)
      ) {};

    flowex = flowex_0_4_0;

    flub_1_1_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ets_owner_1_0_0,
          ex2ms_1_5_0,
          gproc_0_6_1,
          shorter_maps_2_1_0
        }:
          buildMix ({
            name = "flub";
            version = "1.1.3";
            src = fetchHex {
              pkg = "flub";
              version = "1.1.3";
              sha256 =
                "ea03064f021ebff83fe5a4b3a63baaee597c9f6267600a1656419f9586419958";
            };
            beamDeps  = [
                          ets_owner_1_0_0
                          ex2ms_1_5_0
                          gproc_0_6_1
                          shorter_maps_2_1_0
                        ];

            meta = {
              description = ''Sane pub/sub within and across nodes.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/meyercm/flub";
            };
          } // packageOverrides)
      ) {};

    flub = flub_1_1_3;

    fluent_client_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          msgpax_0_8_2,
          poison_1_3_1,
          socket_0_3_3
        }:
          buildMix ({
            name = "fluent_client";
            version = "0.1.0";
            src = fetchHex {
              pkg = "fluent_client";
              version = "0.1.0";
              sha256 =
                "df1d05da9475938422a734cd311564eef44bfebea3c37b06ab167368875c2d15";
            };
            beamDeps  = [ msgpax_0_8_2 poison_1_3_1 socket_0_3_3 ];

            meta = {
              description = ''fluentd client library'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/trustatom-oss/elixir-fluent-client";
            };
          } // packageOverrides)
      ) {};

    fluent_client = fluent_client_0_1_0;

    flux_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "flux";
            version = "0.1.0";
            src = fetchHex {
              pkg = "flux";
              version = "0.1.0";
              sha256 =
                "1b1fcacd4a4fad8d4e6a2890ad73a0d5de118c6996c1f9960be8dc30805f7387";
            };

            meta = {
              description = ''Flux - an Elixir web server.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jfreeze/flux";
            };
          } // packageOverrides)
      ) {};

    flux = flux_0_1_0;

    fluxter_0_6_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "fluxter";
            version = "0.6.1";
            src = fetchHex {
              pkg = "fluxter";
              version = "0.6.1";
              sha256 =
                "0905476462f956f0e629655b43299f780ed727a3a6f3ac8936e5d19797a8c7bc";
            };

            meta = {
              description = ''An InfluxDB writer for Elixir'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/lexmag/fluxter";
            };
          } // packageOverrides)
      ) {};

    fluxter = fluxter_0_6_1;

    fly_0_1_6 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_6_6,
          lru_cache_0_1_1,
          plug_1_3_5,
          porcelain_2_0_3,
          tesla_0_5_2
        }:
          buildMix ({
            name = "fly";
            version = "0.1.6";
            src = fetchHex {
              pkg = "fly";
              version = "0.1.6";
              sha256 =
                "29ea2fb402a7af0e6619a1a0459db8a714611d41c4d8878ab951c45e6d996fbe";
            };
            beamDeps  = [
                          hackney_1_6_6
                          lru_cache_0_1_1
                          plug_1_3_5
                          porcelain_2_0_3
                          tesla_0_5_2
                        ];

            meta = {
              longDescription = ''An OTP application for on-the-fly file
                                processing, from
                                [DailyDrip](https://www.dailydrip.com).'';
              license = stdenv.lib.licenses.mit;
              homepage = "http://github.com/dailydrip/fly";
            };
          } // packageOverrides)
      ) {};

    fly = fly_0_1_6;

    fn_1_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "fn";
            version = "1.0.0";
            src = fetchHex {
              pkg = "fn";
              version = "1.0.0";
              sha256 =
                "1433b353c8739bb28ac0d6826c9f6a05033f158e8c8195faf01a863668b3bbc7";
            };

            meta = {
              description = ''More functional Erlang'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/artemeff/fn";
            };
          } // packageOverrides)
      ) {};

    fn = fn_1_0_0;

    fnv_0_3_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, hexate_0_6_1 }:
          buildMix ({
            name = "fnv";
            version = "0.3.2";
            src = fetchHex {
              pkg = "fnv";
              version = "0.3.2";
              sha256 =
                "1993ca598fe7ca402f89ed1836c4a5de320330177104ca7eaac230312e069fe5";
            };
            beamDeps  = [ hexate_0_6_1 ];

            meta = {
              longDescription = ''Some string transformation functions for
                                Elixir. Heavily inspired by ActiveSupport`s
                                String extensions (Ruby).'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/asaaki/strinx.ex";
            };
          } // packageOverrides)
      ) {};

    fnv = fnv_0_3_2;

    fnv1a_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "fnv1a";
            version = "0.1.0";
            src = fetchHex {
              pkg = "fnv1a";
              version = "0.1.0";
              sha256 =
                "66db30319b52afb71692b8f4c37583aee0d7859439999aba42758db7a00a37f6";
            };

            meta = {
              description = ''FNV-1a 32-bit hash algorithm implementation'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/jeremytregunna/fnv1a.git";
            };
          } // packageOverrides)
      ) {};

    fnv1a = fnv1a_0_1_0;

    focus_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "focus";
            version = "0.3.0";
            src = fetchHex {
              pkg = "focus";
              version = "0.3.0";
              sha256 =
                "321ce725fe05acb01203d223e427b8bb5c89a323e702d2d4aef855ec612a0dde";
            };

            meta = {
              longDescription = ''A functional optics library. Create and
                                compose lenses to view, set, and modify data
                                inside arbitrarily nested maps, lists, and
                                tuples.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/tpoulsen/focus";
            };
          } // packageOverrides)
      ) {};

    focus = focus_0_3_0;

    folsom_0_8_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, bear_0_8_3 }:
          buildRebar3 ({
            name = "folsom";
            version = "0.8.3";
            src = fetchHex {
              pkg = "folsom";
              version = "0.8.3";
              sha256 =
                "afaa1ea4cd2a10a32242ac5d76fa7b17e98d202883859136b791d9a383b26820";
            };

            beamDeps  = [ bear_0_8_3 ];

            meta = {
              description = ''Erlang based metrics system'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/project-folsom/folsom";
            };
          } // packageOverrides)
      ) {};

    folsom = folsom_0_8_3;

    folsom_ddb_0_3_0 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          ddb_client_0_5_5,
          dqe_idx_0_3_0,
          dqe_idx_ddb_0_4_0,
          dqe_idx_pg_0_4_4,
          folsom_0_8_3
        }:
          buildRebar3 ({
            name = "folsom_ddb";
            version = "0.3.0";
            src = fetchHex {
              pkg = "folsom_ddb";
              version = "0.3.0";
              sha256 =
                "5139787499c859d1aca2129cc26a19eb4f1572c8099e23794c0c2dcf5b21b27b";
            };

            beamDeps  = [
                          ddb_client_0_5_5
                          dqe_idx_0_3_0
                          dqe_idx_ddb_0_4_0
                          dqe_idx_pg_0_4_4
                          folsom_0_8_3
                        ];

            meta = {
              description = ''DalmatinerDB backend to store folsom metrics'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dalmatinerdb/folsom_ddb";
            };
          } // packageOverrides)
      ) {};

    folsom_ddb = folsom_ddb_0_3_0;

    folsomite_1_2_8 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, folsom_0_8_3 }:
          buildRebar3 ({
            name = "folsomite";
            version = "1.2.8";
            src = fetchHex {
              pkg = "folsomite";
              version = "1.2.8";
              sha256 =
                "9ce64603cdffb8ad55e950142146b3fe05533020906a81aa9c2f524635d813dc";
            };

            beamDeps  = [ folsom_0_8_3 ];

            meta = {
              description = ''Blow up your Graphite server with Folsom
                            metrics'';

            };
          } // packageOverrides)
      ) {};

    folsomite = folsomite_1_2_8;

    font_awesome_phoenix_1_0_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, phoenix_html_2_9_3
        }:
          buildMix ({
            name = "font_awesome_phoenix";
            version = "1.0.0";
            src = fetchHex {
              pkg = "font_awesome_phoenix";
              version = "1.0.0";
              sha256 =
                "d1f5a241c973333f047e5a9ca590dac95b531bf5547f37db923381727ac82293";
            };
            beamDeps  = [ phoenix_html_2_9_3 ];

            meta = {
              description = ''HTML helper functions to build Font Awesome icon
                            tags.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/code-lever/font-awesome-phoenix";
            };
          } // packageOverrides)
      ) {};

    font_awesome_phoenix = font_awesome_phoenix_1_0_0;

    font_awesomex_4_0_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, phoenix_html_2_9_3
        }:
          buildMix ({
            name = "font_awesomex";
            version = "4.0.0";
            src = fetchHex {
              pkg = "font_awesomex";
              version = "4.0.0";
              sha256 =
                "750c0c23c7c4c6089e0ce60f1d42648f69aa41b1711495b6d577fcb1fee39303";
            };
            beamDeps  = [ phoenix_html_2_9_3 ];

            meta = {
              longDescription = ''A library that provides a helper to easily
                                integrate Font Awesome into your Phoenix
                                application.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tlux/font_awesomex";
            };
          } // packageOverrides)
      ) {};

    font_awesomex = font_awesomex_4_0_0;

    forcex_0_5_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          erlsom_1_4_1,
          exjsx_3_2_1,
          httpoison_0_11_2,
          poison_2_2_0,
          timex_3_0_5
        }:
          buildMix ({
            name = "forcex";
            version = "0.5.0";
            src = fetchHex {
              pkg = "forcex";
              version = "0.5.0";
              sha256 =
                "74343f5ae89cee46c5fc621ce035728be3b7d9d3e5d969f6b712ab73ba7ab2fd";
            };
            beamDeps  = [
                          erlsom_1_4_1
                          exjsx_3_2_1
                          httpoison_0_11_2
                          poison_2_2_0
                          timex_3_0_5
                        ];

            meta = {
              description = ''Elixir library for the Force.com / SalesForce /
                            SFDC REST API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jeffweiss/forcex";
            };
          } // packageOverrides)
      ) {};

    forcex = forcex_0_5_0;

    forecast_io_0_2_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_2_2_2,
          json_0_3_3
        }:
          buildMix ({
            name = "forecast_io";
            version = "0.2.2";
            src = fetchHex {
              pkg = "forecast_io";
              version = "0.2.2";
              sha256 =
                "d76c4f1839cb77038404c3d291e2449495e81469ddf05bef0dc01ed8544917ca";
            };
            beamDeps  = [ httpotion_2_2_2 json_0_3_3 ];

            meta = {
              description = ''Simple wrapper for Forecast.IO API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/r-icarus/forecast_io";
            };
          } // packageOverrides)
      ) {};

    forecast_io = forecast_io_0_2_2;

    form_data_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "form_data";
            version = "0.1.1";
            src = fetchHex {
              pkg = "form_data";
              version = "0.1.1";
              sha256 =
                "0fdc822ba56e8bb9cd945c79105572a50144f16d096a95ca4ac9fe2d754862dc";
            };

            meta = {
              description = ''Build a multipart/form-data form struct in
                            Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jinze/form_data";
            };
          } // packageOverrides)
      ) {};

    form_data = form_data_0_1_1;

    formex_0_4_16 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_4,
          phoenix_html_2_9_3
        }:
          buildMix ({
            name = "formex";
            version = "0.4.16";
            src = fetchHex {
              pkg = "formex";
              version = "0.4.16";
              sha256 =
                "a9fabf1c8b53c42a70628f906743129bb9d888dde44dc2bb17156689127c506a";
            };
            beamDeps  = [ ecto_2_1_4 phoenix_html_2_9_3 ];

            meta = {
              description = ''Form library for Phoenix with Ecto support'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jakub-zawislak/formex";
            };
          } // packageOverrides)
      ) {};

    formex = formex_0_4_16;

    forms_0_0_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "forms";
            version = "0.0.1";
            src = fetchHex {
              pkg = "forms";
              version = "0.0.1";
              sha256 =
                "530f63ed8ed5a171f744fc75bd69cb2e36496899d19dbef48101b4636b795868";
            };

            meta = {
              description = ''Toolbox that simplifies working with Erlang`s
                            abstract format'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/efcasado/forms";
            };
          } // packageOverrides)
      ) {};

    forms = forms_0_0_1;

    formulae_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, issuer_0_2_2 }:
          buildMix ({
            name = "formulae";
            version = "0.2.0";
            src = fetchHex {
              pkg = "formulae";
              version = "0.2.0";
              sha256 =
                "4b9403e5819c73f2e5474060b4594a60c0e05b1303516179bf7e95524005af02";
            };
            beamDeps  = [ issuer_0_2_2 ];

            meta = {
              description = ''A set of functions to deal with analytical
                            formulae.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/am-kantox/formulae";
            };
          } // packageOverrides)
      ) {};

    formulae = formulae_0_2_0;

    formulator_0_0_6 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          gettext_0_13_1,
          phoenix_html_2_9_3
        }:
          buildMix ({
            name = "formulator";
            version = "0.0.6";
            src = fetchHex {
              pkg = "formulator";
              version = "0.0.6";
              sha256 =
                "dd64176571842fe3cbf37af4563a3806d92a082f4e0a079e82e10bd55db360af";
            };
            beamDeps  = [ gettext_0_13_1 phoenix_html_2_9_3 ];

            meta = {
              description = ''A form helper for creating labels and inputs with
                            errors'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/thoughtbot/formulator";
            };
          } // packageOverrides)
      ) {};

    formulator = formulator_0_0_6;

    formy_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ecto_2_1_4 }:
          buildMix ({
            name = "formy";
            version = "0.1.0";
            src = fetchHex {
              pkg = "formy";
              version = "0.1.0";
              sha256 =
                "cb52b752edb97036f3a751112e97ff12e07a2a188fb1094572acc8d130fb1ff7";
            };
            beamDeps  = [ ecto_2_1_4 ];

            meta = {
              description = ''Library for dealing with data structures using
                            Ecto schema and changeset'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/artemeff/formy";
            };
          } // packageOverrides)
      ) {};

    formy = formy_0_1_0;

    fox_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "fox";
            version = "1.0.1";
            src = fetchHex {
              pkg = "fox";
              version = "1.0.1";
              sha256 =
                "e790c4dec0f840283c3e93825db259075ee45953ff1c29758a2aec22164c6865";
            };

            meta = {
              longDescription = ''Collection of support utility functions and
                                extensions for day-to-day web development with
                                Elixir. Includes utility extension to strings,
                                uri, dicts, integers, functions, parallel,
                                records, random, and time'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/foxnewsnetwork/fox";
            };
          } // packageOverrides)
      ) {};

    fox = fox_1_0_1;

    fqc_0_1_7 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex }:
          buildErlangMk ({
            name = "fqc";
            version = "0.1.7";
            src = fetchHex {
              pkg = "fqc";
              version = "0.1.7";
              sha256 =
                "b6873982bad60a34553b00435848521f5178b5508eeded8dfa0d8b2e00846e8e";
            };

            meta = {
              description = ''FiFo EQC helper'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/project-fifo/fqc";
            };
          } // packageOverrides)
      ) {};

    fqc = fqc_0_1_7;

    fraction_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "fraction";
            version = "0.1.1";
            src = fetchHex {
              pkg = "fraction";
              version = "0.1.1";
              sha256 =
                "fb87d160d94f656a49cf296885a8c49e5b97130f6336bd4cdb3290e457ba7ec1";
            };

            meta = {
              description = ''A library for handling mathematical fractions.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/lermannen/elixir-fraction";
            };
          } // packageOverrides)
      ) {};

    fraction = fraction_0_1_1;

    frank_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, amqp_0_1_4 }:
          buildMix ({
            name = "frank";
            version = "0.0.3";
            src = fetchHex {
              pkg = "frank";
              version = "0.0.3";
              sha256 =
                "f5f19c57aa763b483af80329f54e2de55b1fcb1dde5c304eed97fbde9ca2ce7d";
            };
            beamDeps  = [ amqp_0_1_4 ];

            meta = {
              description = ''Simple Elixir client for RabbitMQ built on top of
                            AMQP.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/triptec/frank";
            };
          } // packageOverrides)
      ) {};

    frank = frank_0_0_3;

    freegeoip_0_0_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_8_3,
          poison_1_5_2
        }:
          buildMix ({
            name = "freegeoip";
            version = "0.0.4";
            src = fetchHex {
              pkg = "freegeoip";
              version = "0.0.4";
              sha256 =
                "6776938ddc1318ee8a34ef6e3a5dcb85013bbb27feeae3c7d65487ff17e2b558";
            };
            beamDeps  = [ httpoison_0_8_3 poison_1_5_2 ];

            meta = {
              description = ''Simple Elixir wrapper for freegeoip.net HTTP
                            API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/juljimm/freegeoip-elixir";
            };
          } // packageOverrides)
      ) {};

    freegeoip = freegeoip_0_0_4;

    freegeoipx_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, rapidax_0_0_6 }:
          buildMix ({
            name = "freegeoipx";
            version = "0.0.2";
            src = fetchHex {
              pkg = "freegeoipx";
              version = "0.0.2";
              sha256 =
                "f1b75dc747e9a211a1351d72505064e16f0be1f3eff9e0f84dee90e378361c3e";
            };
            beamDeps  = [ rapidax_0_0_6 ];

            meta = {
              description = ''Api Client for freegeoip.net'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/victorlcampos/freegeoipx";
            };
          } // packageOverrides)
      ) {};

    freegeoipx = freegeoipx_0_0_2;

    freelixir_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, httpoison_0_9_2 }:
          buildMix ({
            name = "freelixir";
            version = "0.1.0";
            src = fetchHex {
              pkg = "freelixir";
              version = "0.1.0";
              sha256 =
                "cfa82d7c1eee3ac51c305dfa6068d39431e4f7821bf48f56660882950cb5b712";
            };
            beamDeps  = [ httpoison_0_9_2 ];

            meta = {
              description = ''Send SMS to yourself with Free Mobile API.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/btrd/freelixir";
            };
          } // packageOverrides)
      ) {};

    freelixir = freelixir_0_1_0;

    frex_0_1_5 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_3_0_2,
          oauther_1_0_2,
          secure_random_0_5_1,
          xml_builder_0_0_9
        }:
          buildMix ({
            name = "frex";
            version = "0.1.5";
            src = fetchHex {
              pkg = "frex";
              version = "0.1.5";
              sha256 =
                "7b0e094fd6096df121ac9ab3eef4cb54169e24fc784901d6ef3f5d9caa53ca53";
            };
            beamDeps  = [
                          httpotion_3_0_2
                          oauther_1_0_2
                          secure_random_0_5_1
                          xml_builder_0_0_9
                        ];

            meta = {
              description = ''A full-featured Elixir client for Freshbooks.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/littlelines/frex";
            };
          } // packageOverrides)
      ) {};

    frex = frex_0_1_5;

    friendly_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, floki_0_17_2 }:
          buildMix ({
            name = "friendly";
            version = "1.0.1";
            src = fetchHex {
              pkg = "friendly";
              version = "1.0.1";
              sha256 =
                "5bacdeba9a6752613c037f7ffacd4f7185cf9b348b3b41c73497e539bbb17602";
            };
            beamDeps  = [ floki_0_17_2 ];

            meta = {
              longDescription = ''HTML and XML parser with the most friendly
                                API in Elixir land. CSS selector in, list of
                                elements out.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/qertoip/friendly/";
            };
          } // packageOverrides)
      ) {};

    friendly = friendly_1_0_1;

    fs_3_4_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "fs";
            version = "3.4.0";
            src = fetchHex {
              pkg = "fs";
              version = "3.4.0";
              sha256 =
                "94ee6e298db543a861faa1911b9a9a1d1bdc58da03fbe8d991e83e6c9551595f";
            };
            compilePorts = true;

            meta = {
              description = ''Erlang File System Listener'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/synrc/fs";
            };
          } // packageOverrides)
      ) {};

    fs = fs_3_4_0;

    fs_event_1_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "fs_event";
            version = "1.0.0";
            src = fetchHex {
              pkg = "fs_event";
              version = "1.0.0";
              sha256 =
                "fd73f81bc9a4340c29f47ad4eb1d0c15f02e9d76e2e9de40ab92a9ec00a0c3d9";
            };

            meta = {
              description = ''File system events'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/jamhed/fs_event";
            };
          } // packageOverrides)
      ) {};

    fs_event = fs_event_1_0_0;

    fs_sync_1_0_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "fs_sync";
            version = "1.0.1";
            src = fetchHex {
              pkg = "fs_sync";
              version = "1.0.1";
              sha256 =
                "21e541e263860d164ed95859e0daf8e2c209f4996d89765ec45df2f6bf00e6f7";
            };

            meta = {
              description = ''Hot code reloader'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/jamhed/fs_sync";
            };
          } // packageOverrides)
      ) {};

    fs_sync = fs_sync_1_0_1;

    fsdb_0_2_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "fsdb";
            version = "0.2.4";
            src = fetchHex {
              pkg = "fsdb";
              version = "0.2.4";
              sha256 =
                "e0048a7190d3df1103a5377aa29657ca48497d20a4cd652f044c67752441e628";
            };

            meta = {
              description = ''Minimal filesystem Erlang term text database.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/samuelventura/fsdb/";
            };
          } // packageOverrides)
      ) {};

    fsdb = fsdb_0_2_4;

    fsharpy_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "fsharpy";
            version = "0.1.0";
            src = fetchHex {
              pkg = "fsharpy";
              version = "0.1.0";
              sha256 =
                "73b234fb3cf2f79c34a8863b6cb3eeb7e9cfaaa0cd3ff2521c5be659adb489ba";
            };

            meta = {
              longDescription = ''Provides access to F# interactive (FSI) from
                                Elixir. This is still in early stages so please
                                just use it for fun until v1.0.0.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bryanhunter/fsharpy";
            };
          } // packageOverrides)
      ) {};

    fsharpy = fsharpy_0_1_0;

    fsm_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "fsm";
            version = "0.2.0";
            src = fetchHex {
              pkg = "fsm";
              version = "0.2.0";
              sha256 =
                "dbc7b316d37f258db4f1a897109da14c2c76aa706fe85859532eff2ea30986bf";
            };

            meta = {
              description = ''Finite state machine as a functional data
                            structure.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sasa1977/fsm";
            };
          } // packageOverrides)
      ) {};

    fsm_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "fsm";
            version = "0.3.0";
            src = fetchHex {
              pkg = "fsm";
              version = "0.3.0";
              sha256 =
                "92119fd7695c2b9778db12903db2c828658747beae7331206dc03ebb7d8b5af3";
            };

            meta = {
              description = ''Finite state machine as a functional data
                            structure.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sasa1977/fsm";
            };
          } // packageOverrides)
      ) {};

    fsm = fsm_0_3_0;

    fucking_great_advice_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_10_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "fucking_great_advice";
            version = "0.0.1";
            src = fetchHex {
              pkg = "fucking_great_advice";
              version = "0.0.1";
              sha256 =
                "99cd43127a5b3db8f6445f72f95b42fcd89a4ae951ce51f1e1ceb0e79654c4b5";
            };
            beamDeps  = [ httpoison_0_10_0 poison_3_1_0 ];

            meta = {
              description = ''http://fucking-great-advice.ru API wrapper for
                            Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/maratgaliev/fucking_great_advice";
            };
          } // packageOverrides)
      ) {};

    fucking_great_advice = fucking_great_advice_0_0_1;

    fuentes_0_0_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_0_rc_5,
          postgrex_1_0_0_rc_1
        }:
          buildMix ({
            name = "fuentes";
            version = "0.0.3";
            src = fetchHex {
              pkg = "fuentes";
              version = "0.0.3";
              sha256 =
                "32aef9e754a8f84cd011c0d088944956c2453de5919dc2c0da49952bb5bbdcb9";
            };
            beamDeps  = [ ecto_2_1_0_rc_5 postgrex_1_0_0_rc_1 ];

            meta = {
              longDescription = ''Fuentes is a library which provides a
                                double-entry accounting system for your Elixir
                                application.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/davidkuhta/fuentes";
            };
          } // packageOverrides)
      ) {};

    fuentes = fuentes_0_0_3;

    fugue_0_1_6 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          mimetype_parser_0_1_2,
          plug_1_3_5,
          poison_3_1_0
        }:
          buildMix ({
            name = "fugue";
            version = "0.1.6";
            src = fetchHex {
              pkg = "fugue";
              version = "0.1.6";
              sha256 =
                "e5873ccdfad1d4f637b78f1ec3b44a2639769793f5e6978e539a74b6fd0a54d3";
            };
            beamDeps  = [ mimetype_parser_0_1_2 plug_1_3_5 poison_3_1_0 ];

            meta = {
              description = ''Extendable testing utilities for Plug'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/exstruct/fugue";
            };
          } // packageOverrides)
      ) {};

    fugue = fugue_0_1_6;

    fulcrum_0_0_6 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_1_5_2
        }:
          buildMix ({
            name = "fulcrum";
            version = "0.0.6";
            src = fetchHex {
              pkg = "fulcrum";
              version = "0.0.6";
              sha256 =
                "9cddd3906bad693cad791841d19b2be089e064a5f2dd35d340f46e6cd15d7930";
            };
            beamDeps  = [ httpoison_0_11_2 poison_1_5_2 ];

            meta = {
              longDescription = ''Fulcrum library for Elixir. The aim is to
                                present the Fulcrum API as a replacement for an
                                Ecto Repo. So, instead of Repo.all(Form), you
                                can write Fulcrum.all(Form). In this way, you
                                only have to make minor changes to your
                                controllers, to work with Fulcrum.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pinx/fulcrum";
            };
          } // packageOverrides)
      ) {};

    fulcrum = fulcrum_0_0_6;

    fumanchu_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "fumanchu";
            version = "0.0.1";
            src = fetchHex {
              pkg = "fumanchu";
              version = "0.0.1";
              sha256 =
                "3ae3f825b598d2af9ace3f9ef25ff23b7724507cddb2dddb2176e4a49afabc89";
            };

            meta = {
              description = ''An (almost) spec-compliant Mustache parser
                            written in Elixir'';

            };
          } // packageOverrides)
      ) {};

    fumanchu = fumanchu_0_0_1;

    fun_land_0_7_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, currying_1_0_2 }:
          buildMix ({
            name = "fun_land";
            version = "0.7.4";
            src = fetchHex {
              pkg = "fun_land";
              version = "0.7.4";
              sha256 =
                "387960a87fd2ae968075dff7a274e2ef7047e4c8f0c92730cefe2f4aaf8b8f79";
            };
            beamDeps  = [ currying_1_0_2 ];

            meta = {
              longDescription = ''FunLand adds Behaviours to define Algebraic
                                Data Types (`Container` data types) to Elixir,
                                such as Functors, Monoids and Monads.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/qqwy/elixir_fun_land";
            };
          } // packageOverrides)
      ) {};

    fun_land = fun_land_0_7_4;

    fun_with_flags_0_8_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          phoenix_pubsub_1_0_1,
          redix_0_6_1,
          redix_pubsub_0_4_1
        }:
          buildMix ({
            name = "fun_with_flags";
            version = "0.8.1";
            src = fetchHex {
              pkg = "fun_with_flags";
              version = "0.8.1";
              sha256 =
                "3138ea31e0480028ad9e5a79eadde78ee66c5eb821517c755c0c826fc41323a1";
            };
            beamDeps  = [ phoenix_pubsub_1_0_1 redix_0_6_1 redix_pubsub_0_4_1
                      ];

            meta = {
              description = ''FunWithFlags, a flexible and fast feature toggle
                            library for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tompave/fun_with_flags";
            };
          } // packageOverrides)
      ) {};

    fun_with_flags = fun_with_flags_0_8_1;

    fun_with_flags_ui_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          fun_with_flags_0_8_1,
          plug_1_3_5
        }:
          buildMix ({
            name = "fun_with_flags_ui";
            version = "0.1.0";
            src = fetchHex {
              pkg = "fun_with_flags_ui";
              version = "0.1.0";
              sha256 =
                "139c66fd60d8b61bf410dfbe6a7551671ca2b3ef4759353eadd4f704db16a731";
            };
            beamDeps  = [ cowboy_1_1_2 fun_with_flags_0_8_1 plug_1_3_5 ];

            meta = {
              description = ''FunWithFlags.UI, a web dashboard for the
                            FunWithFlags Elixir package.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tompave/fun_with_flags_ui";
            };
          } // packageOverrides)
      ) {};

    fun_with_flags_ui = fun_with_flags_ui_0_1_0;

    func_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "func";
            version = "0.3.0";
            src = fetchHex {
              pkg = "func";
              version = "0.3.0";
              sha256 =
                "f375282a4eb44f061f4ae111c83f8dfc69c5640a5cad8bb2918330daec0e8480";
            };

            meta = {
              description = ''Functions for functional programming.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/techno-tanoC/func";
            };
          } // packageOverrides)
      ) {};

    func = func_0_3_0;

    funchaku_0_5_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "funchaku";
            version = "0.5.0";
            src = fetchHex {
              pkg = "funchaku";
              version = "0.5.0";
              sha256 =
                "a6ccda71cef0f1586a48c4a54e3d27a2ab954fe3969aae1d578e639565883977";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''Elixir client for the Nu HTML Checker'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sitevalidator/funchaku";
            };
          } // packageOverrides)
      ) {};

    funchaku = funchaku_0_5_0;

    function_decorating_0_0_6 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "function_decorating";
            version = "0.0.6";
            src = fetchHex {
              pkg = "function_decorating";
              version = "0.0.6";
              sha256 =
                "8faf5588f98c833a25c9463df27e709cc5c645083a592b1a5add25fbb9e68d9a";
            };

            meta = {
              longDescription = ''A function decorator macro for Elixir. Used
                                mainly for adding log statements to the function
                                calls.'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/elpddev/elixir-function-decorating";
            };
          } // packageOverrides)
      ) {};

    function_decorating = function_decorating_0_0_6;

    funkspector_0_4_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          floki_0_17_2,
          friendly_1_0_1,
          httpoison_0_11_2
        }:
          buildMix ({
            name = "funkspector";
            version = "0.4.0";
            src = fetchHex {
              pkg = "funkspector";
              version = "0.4.0";
              sha256 =
                "d588bbdcfae43da47b59bd98caac830a7c29085ce4f4cabe6325afdca1dbe90e";
            };
            beamDeps  = [ floki_0_17_2 friendly_1_0_1 httpoison_0_11_2 ];

            meta = {
              description = ''Web page inspector for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jaimeiniesta/funkspector";
            };
          } // packageOverrides)
      ) {};

    funkspector = funkspector_0_4_0;

    funnel_0_4_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_1_5_2,
          poolboy_1_5_1,
          uuid_0_1_5
        }:
          buildMix ({
            name = "funnel";
            version = "0.4.1";
            src = fetchHex {
              pkg = "funnel";
              version = "0.4.1";
              sha256 =
                "84b937146c9464afc2a92e53aa0109de60caef599f82613fdcd4dc3e864025d7";
            };
            beamDeps  = [
                          httpoison_0_11_2 poison_1_5_2 poolboy_1_5_1 uuid_0_1_5
                        ];

            meta = {
              description = ''Streaming API built upon ElasticSearch`s
                            percolation. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/af83/funnel";
            };
          } // packageOverrides)
      ) {};

    funnel = funnel_0_4_1;

    fusco_0_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "fusco";
            version = "0.1.0";
            src = fetchHex {
              pkg = "fusco";
              version = "0.1.0";
              sha256 =
                "763756df36130b7746cfbbbcf47096b3e0b005e44448bdeefa3034679b2c19b8";
            };

            meta = {
              description = ''Fast and Ultra Slim Connection Oriented HTTP
                            Client'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/esl/fusco";
            };
          } // packageOverrides)
      ) {};

    fusco = fusco_0_1_0;

    fuse_2_4_0 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex }:
          buildErlangMk ({
            name = "fuse";
            version = "2.4.0";
            src = fetchHex {
              pkg = "fuse";
              version = "2.4.0";
              sha256 =
                "0856bf73e521f86104795d8932b748d347018504a3e6aafb1e5af50ac71de0ec";
            };

            meta = {
              description = ''A Circuit breaker implementation for Erlang'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jlouis/fuse";
            };
          } // packageOverrides)
      ) {};

    fuse = fuse_2_4_0;

    fuzzyurl_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "fuzzyurl";
            version = "0.2.0";
            src = fetchHex {
              pkg = "fuzzyurl";
              version = "0.2.0";
              sha256 =
                "e0ffd12420ae5e5feb95f610a345e0dd937ab96ef01e5eba49950ee6c8fe4c6a";
            };

            meta = {
              longDescription = ''Fuzzyurl is a library for non-strict parsing,
                                construction, and fuzzy-matching of URLs.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/gamache/fuzzyurl.ex";
            };
          } // packageOverrides)
      ) {};

    fuzzyurl_0_9_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "fuzzyurl";
            version = "0.9.0";
            src = fetchHex {
              pkg = "fuzzyurl";
              version = "0.9.0";
              sha256 =
                "70fde01a051085188a97789037fc83cfb887604b6da7757cd7856db2cdefa5ee";
            };

            meta = {
              longDescription = ''Fuzzyurl is a library for non-strict parsing,
                                construction, and fuzzy-matching of URLs.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/gamache/fuzzyurl.ex";
            };
          } // packageOverrides)
      ) {};

    fuzzyurl = fuzzyurl_0_9_0;

    fwatch_0_5_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          earmark_1_2_2,
          fs_3_4_0
        }:
          buildMix ({
            name = "fwatch";
            version = "0.5.0";
            src = fetchHex {
              pkg = "fwatch";
              version = "0.5.0";
              sha256 =
                "1cd46bcae7074c10a4a4d25989ef20ab515d075d762af8e6c86e8d50c011604c";
            };
            beamDeps  = [ earmark_1_2_2 fs_3_4_0 ];

            meta = {
              description = ''A file watcher for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ryo33/fwatch-ex";
            };
          } // packageOverrides)
      ) {};

    fwatch = fwatch_0_5_0;

    fx_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "fx";
            version = "0.1.0";
            src = fetchHex {
              pkg = "fx";
              version = "0.1.0";
              sha256 =
                "4c94abdeafe35da9dbf21308911e8cc2e6dff4e35dd2ce504590973364e1e1da";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''Simple FX rates library for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kelvintaywl/fx";
            };
          } // packageOverrides)
      ) {};

    fx = fx_0_1_0;

    galena_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, gen_stage_0_11_0 }:
          buildMix ({
            name = "galena";
            version = "0.1.1";
            src = fetchHex {
              pkg = "galena";
              version = "0.1.1";
              sha256 =
                "f90d400b354025b46c6c5406509e7cea73df6f0e24eae2e3603da047dbe248f8";
            };
            beamDeps  = [ gen_stage_0_11_0 ];

            meta = {
              description = ''Topic producer-consumer library built on top of
                            GenStage for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mendrugory/galena";
            };
          } // packageOverrides)
      ) {};

    galena = galena_0_1_1;

    game_of_life_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "game_of_life";
            version = "1.0.0";
            src = fetchHex {
              pkg = "game_of_life";
              version = "1.0.0";
              sha256 =
                "4a7e64722d5841d91152352a19db51476fa3e950d7316aba089870248019958b";
            };

            meta = {
              description = ''Distributed Game of Life with Board Server API.
                            Run it on multiple nodes.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/BeyondScheme/elixir-game_of_life";
            };
          } // packageOverrides)
      ) {};

    game_of_life = game_of_life_1_0_0;

    gandalf_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          comeonin_3_0_2,
          ecto_2_1_4,
          plug_1_3_5,
          poison_3_1_0,
          postgrex_0_13_3,
          secure_random_0_5_1
        }:
          buildMix ({
            name = "gandalf";
            version = "0.2.0";
            src = fetchHex {
              pkg = "gandalf";
              version = "0.2.0";
              sha256 =
                "f24f50ac4f837299dcf3465959f6d3d55a48493f0ac94351c71fe71a6687d228";
            };
            beamDeps  = [
                          comeonin_3_0_2
                          ecto_2_1_4
                          plug_1_3_5
                          poison_3_1_0
                          postgrex_0_13_3
                          secure_random_0_5_1
                        ];

            meta = {
              description = ''A Oauth2 plug based provider.'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/pragmaticivan/gandalf";
            };
          } // packageOverrides)
      ) {};

    gandalf = gandalf_0_2_0;

    gandi_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          erlsom_1_4_1,
          httpoison_0_11_2,
          xmlrpc_1_1_0
        }:
          buildMix ({
            name = "gandi";
            version = "0.1.0";
            src = fetchHex {
              pkg = "gandi";
              version = "0.1.0";
              sha256 =
                "cd3bf83861baa07262b7efa9aa446bf337c36b4f73ddff571c7918397dc1c5b1";
            };
            beamDeps  = [ erlsom_1_4_1 httpoison_0_11_2 xmlrpc_1_1_0 ];

            meta = {
              description = ''Gandi Access over Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ahamtech/elixir-gandi";
            };
          } // packageOverrides)
      ) {};

    gandi = gandi_0_1_0;

    garbage_man_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "garbage_man";
            version = "0.1.1";
            src = fetchHex {
              pkg = "garbage_man";
              version = "0.1.1";
              sha256 =
                "d179ed45a951f701be51df8e241a704e8ff380031e8083e83134677461271ab7";
            };

            meta = {
              description = ''Some code to trigger garbage collection in Erlang
                            and Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/digimondo/elixir-garbage-man";
            };
          } // packageOverrides)
      ) {};

    garbage_man = garbage_man_0_1_1;

    gardien_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gardien";
            version = "1.0.0";
            src = fetchHex {
              pkg = "gardien";
              version = "1.0.0";
              sha256 =
                "24f584f72309db016ae2d206e00801dfea18d38b76d366760b6e2f6410ef0bba";
            };

            meta = {
              description = ''Simple, protocol based authorization, for Phoenix
                            projects.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rpelyush/gardien";
            };
          } // packageOverrides)
      ) {};

    gardien = gardien_1_0_0;

    garph_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "garph";
            version = "0.0.1";
            src = fetchHex {
              pkg = "garph";
              version = "0.0.1";
              sha256 =
                "32829d25bdc8cf78256c8fdf1e7294707f94b683ec6ce6d1da0a6a8cd4d77c9e";
            };

            meta = {
              longDescription = ''Garph is a simple way to implement complex
                                decision trees by using graphs. It can be used
                                with plain elixir or beneath a phoenix
                                project.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/faber-lotto/garph";
            };
          } // packageOverrides)
      ) {};

    garph = garph_0_0_1;

    gatekeeper_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gatekeeper";
            version = "0.0.1";
            src = fetchHex {
              pkg = "gatekeeper";
              version = "0.0.1";
              sha256 =
                "d1ad9549998054c6ca4d4c7954687937e46b97f2ca4176c7e1d5bfdaf683ac2c";
            };

            meta = {
              description = ''An opinionated authorization framework for Elixir
                            projects.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/austinsmorris/gatekeeper";
            };
          } // packageOverrides)
      ) {};

    gatekeeper = gatekeeper_0_0_1;

    gateway_0_0_6 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          fox_1_0_1,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "gateway";
            version = "0.0.6";
            src = fetchHex {
              pkg = "gateway";
              version = "0.0.6";
              sha256 =
                "4d0de05b0168ee0cc41c9c38491a4b4641d446f38170ca170d0d7440b0c8f619";
            };
            beamDeps  = [ fox_1_0_1 httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              longDescription = ''A generic set of macros and conventions to
                                build clients to communicate with JSON REST
                                APIs'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/foxnewsnetwork/gateway";
            };
          } // packageOverrides)
      ) {};

    gateway = gateway_0_0_6;

    gatling_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gatling";
            version = "1.0.0";
            src = fetchHex {
              pkg = "gatling";
              version = "1.0.0";
              sha256 =
                "8140754171ec1eaf0c853d6aeb020fad789ee4a01814fda5a965580424568580";
            };

            meta = {
              description = ''Enjoy heroku like deployments with Distillery and
                            your own server'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/hashrocket/gatling";
            };
          } // packageOverrides)
      ) {};

    gatling = gatling_1_0_0;

    gb2260_0_6_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_2_2_0 }:
          buildMix ({
            name = "gb2260";
            version = "0.6.1";
            src = fetchHex {
              pkg = "gb2260";
              version = "0.6.1";
              sha256 =
                "e7edf0c71f86324096d6148ad187839ef8bd70d5dfced1aa41fb411ede6eaca1";
            };
            beamDeps  = [ poison_2_2_0 ];

            meta = {
              description = ''The Elixir implementation for looking up the
                            Chinese administrative divisions.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/LcpMarvel/gb2260";
            };
          } // packageOverrides)
      ) {};

    gb2260 = gb2260_0_6_1;

    gc_nlp_0_2_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cachex_2_1_0,
          goth_0_3_2,
          httpoison_0_11_2
        }:
          buildMix ({
            name = "gc_nlp";
            version = "0.2.2";
            src = fetchHex {
              pkg = "gc_nlp";
              version = "0.2.2";
              sha256 =
                "5e5421d24fc2de0db1cfbbff258650ca76e6255216802b463330c044f36e49c1";
            };
            beamDeps  = [ cachex_2_1_0 goth_0_3_2 httpoison_0_11_2 ];

            meta = {
              description = ''Elixir wrapper for Google Cloud Natural Language
                            API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/seymores/gc_nlp";
            };
          } // packageOverrides)
      ) {};

    gc_nlp = gc_nlp_0_2_2;

    gc_storage_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, goth_0_2_1 }:
          buildMix ({
            name = "gc_storage";
            version = "0.2.0";
            src = fetchHex {
              pkg = "gc_storage";
              version = "0.2.0";
              sha256 =
                "dc3f9395ecacef79f087cbbef1fe05ed7f98ce3586141e055fd522d7dbd4c7fe";
            };
            beamDeps  = [ goth_0_2_1 ];

            meta = {
              description = ''Elixir wrapper for Google Cloud Storage
                            Wrapper'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/seymores/gc_storage";
            };
          } // packageOverrides)
      ) {};

    gc_storage = gc_storage_0_2_0;

    gcloudex_0_4_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          earmark_1_2_2,
          goth_0_2_1,
          httpoison_0_8_3,
          poison_1_0_2
        }:
          buildMix ({
            name = "gcloudex";
            version = "0.4.4";
            src = fetchHex {
              pkg = "gcloudex";
              version = "0.4.4";
              sha256 =
                "e3ebb84d177ae284adc28f0f673c03814865985f514f4cb131e653020713b0ab";
            };
            beamDeps  = [
                          earmark_1_2_2 goth_0_2_1 httpoison_0_8_3 poison_1_0_2
                        ];

            meta = {
              longDescription = ''Google Cloud for Elixir. Friendly set of
                                wrappers for Google Cloud Platform API`s.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/sashaafm/gcloudex";
            };
          } // packageOverrides)
      ) {};

    gcloudex = gcloudex_0_4_4;

    gcm_1_4_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_1_0_2
        }:
          buildMix ({
            name = "gcm";
            version = "1.4.0";
            src = fetchHex {
              pkg = "gcm";
              version = "1.4.0";
              sha256 =
                "3f8e4d4748349d63dc19648ecbd5ee5cf0439ee437d45716c283d8d63bcc34ba";
            };
            beamDeps  = [ httpoison_0_11_2 poison_1_0_2 ];

            meta = {
              description = ''GCM library to send pushes through GCM'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/carnivalmobile/gcm";
            };
          } // packageOverrides)
      ) {};

    gcm = gcm_1_4_0;

    gcmex_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          earmark_1_2_2,
          httpoison_0_7_5,
          poison_1_5_2
        }:
          buildMix ({
            name = "gcmex";
            version = "0.0.1";
            src = fetchHex {
              pkg = "gcmex";
              version = "0.0.1";
              sha256 =
                "92f3bbafd7ad0718490d1bdc10d4a2aa5ee7167c144bfe6584cf4260ab6feeab";
            };
            beamDeps  = [ earmark_1_2_2 httpoison_0_7_5 poison_1_5_2 ];

            meta = {
              description = ''Google Cloud Messaging client library for
                            elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dukex/gcmex";
            };
          } // packageOverrides)
      ) {};

    gcmex = gcmex_0_0_1;

    gcp_auth_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_9_2,
          json_web_token_0_2_8
        }:
          buildMix ({
            name = "gcp_auth";
            version = "0.1.0";
            src = fetchHex {
              pkg = "gcp_auth";
              version = "0.1.0";
              sha256 =
                "4d75fb836d8661256edbfadde0e5db0602bd4be1d874995c95d9f4c53859c530";
            };
            beamDeps  = [ httpoison_0_9_2 json_web_token_0_2_8 ];

            meta = {
              description = ''GCP (Google Cloud Platform) auth library using
                            Application Default Credentials.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/aktsk/gcp_auth";
            };
          } // packageOverrides)
      ) {};

    gcp_auth = gcp_auth_0_1_0;

    gealts_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gealts";
            version = "0.0.1";
            src = fetchHex {
              pkg = "gealts";
              version = "0.0.1";
              sha256 =
                "c23b96986b19801c3428ff961e26e5b7327cd38141c2161951fdba233b71ac2b";
            };

            meta = {
              description = ''A crude genetic programming library.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/0010-IO/gealts";
            };
          } // packageOverrides)
      ) {};

    gealts = gealts_0_0_1;

    geetest_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, httpoison_0_11_2 }:
          buildMix ({
            name = "geetest";
            version = "0.0.1";
            src = fetchHex {
              pkg = "geetest";
              version = "0.0.1";
              sha256 =
                "61b6ca074e7d2123eb9da2da34b0dd37680e7d7a9d257ca824656ffb7afe8fc4";
            };
            beamDeps  = [ httpoison_0_11_2 ];

            meta = {
              description = ''Elixir toolkit for Geetest'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/linjunpop/geetest";
            };
          } // packageOverrides)
      ) {};

    geetest = geetest_0_0_1;

    gelf_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_1_0_2 }:
          buildMix ({
            name = "gelf";
            version = "0.1.0";
            src = fetchHex {
              pkg = "gelf";
              version = "0.1.0";
              sha256 =
                "dfd3edfa6a12ea3a43653233acbfa704eb065e26c1c27c29402724ad241391cb";
            };
            beamDeps  = [ poison_1_0_2 ];

            meta = {
              description = ''GELF Logger Backend'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ananthakumaran/gelf";
            };
          } // packageOverrides)
      ) {};

    gelf = gelf_0_1_0;

    gelf_logger_0_7_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_3_1_0 }:
          buildMix ({
            name = "gelf_logger";
            version = "0.7.2";
            src = fetchHex {
              pkg = "gelf_logger";
              version = "0.7.2";
              sha256 =
                "c24fb0cd8a8124a40f8025907a085fc08099fd2b0f6c5ff3e801e6b27ea8b435";
            };
            beamDeps  = [ poison_3_1_0 ];

            meta = {
              longDescription = ''A Logger backend that will generate Graylog
                                Extended Log Format messages and send them to a
                                compatible server.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jschniper/gelf_logger";
            };
          } // packageOverrides)
      ) {};

    gelf_logger = gelf_logger_0_7_2;

    gelfex_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          connection_1_0_4,
          poison_1_5_2
        }:
          buildMix ({
            name = "gelfex";
            version = "0.0.1";
            src = fetchHex {
              pkg = "gelfex";
              version = "0.0.1";
              sha256 =
                "35ca2deb8221379fc8eb2d4e33888ce590defe91dbbaaa10ef352d6654723279";
            };
            beamDeps  = [ connection_1_0_4 poison_1_5_2 ];

            meta = {
              description = ''Elixir client for logging GELF messages to
                            Graylog.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/donpinkster/gelfex";
            };
          } // packageOverrides)
      ) {};

    gelfex = gelfex_0_0_1;

    gen_amqp_0_7_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          amqp_0_2_2,
          poison_2_2_0,
          uuid_1_1_7
        }:
          buildMix ({
            name = "gen_amqp";
            version = "0.7.0";
            src = fetchHex {
              pkg = "gen_amqp";
              version = "0.7.0";
              sha256 =
                "d195fda330b07c800584d13f6a4681bc79fe526253bcf6598a22b5bf27a96194";
            };
            beamDeps  = [ amqp_0_2_2 poison_2_2_0 uuid_1_1_7 ];

            meta = {
              description = ''GenAMQP is a set of utilities to make
                            microservices using the worker pattern'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/mrkaspa/gen_amqp";
            };
          } // packageOverrides)
      ) {};

    gen_amqp = gen_amqp_0_7_0;

    gen_cycle_1_0_2 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex }:
          buildErlangMk ({
            name = "gen_cycle";
            version = "1.0.2";
            src = fetchHex {
              pkg = "gen_cycle";
              version = "1.0.2";
              sha256 =
                "b5d6408cad59894b6a97c6ba41018f669ee485c6470ef3bf1cffadd0acbe71cf";
            };

            meta = {
              description = ''Erlang behaviour for recurring events'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/aerosol/gen_cycle";
            };
          } // packageOverrides)
      ) {};

    gen_cycle = gen_cycle_1_0_2;

    gen_debug_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gen_debug";
            version = "0.1.0";
            src = fetchHex {
              pkg = "gen_debug";
              version = "0.1.0";
              sha256 =
                "4e1b4ce4487944d66214d6b338a452e464d14239d4b553722f3d89e0fb0b5653";
            };

            meta = {
              description = ''GenDebug is a set of utilities to debug the state
                            and messages of a GenServer'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/mrkaspa/gen_debug";
            };
          } // packageOverrides)
      ) {};

    gen_debug = gen_debug_0_1_0;

    gen_delegate_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gen_delegate";
            version = "1.0.0";
            src = fetchHex {
              pkg = "gen_delegate";
              version = "1.0.0";
              sha256 =
                "9790952ba41538e835613f064774189bd819c79fde8fa09c2ab2bc5143b9efbf";
            };

            meta = {
              description = ''Easy delegation of internal function to a
                            GenServer interface'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zackehh/gen_delegate";
            };
          } // packageOverrides)
      ) {};

    gen_delegate = gen_delegate_1_0_0;

    gen_flow_0_0_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "gen_flow";
            version = "0.0.3";
            src = fetchHex {
              pkg = "gen_flow";
              version = "0.0.3";
              sha256 =
                "b7924575d4dccb3d958a33a8d645a96255ff25621aafa98c9f10f06c4f809269";
            };

            meta = {
              description = ''Generic abstraction for building dataflow
                            computations.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/lasp-lang/gen_flow";
            };
          } // packageOverrides)
      ) {};

    gen_flow = gen_flow_0_0_3;

    gen_frp_0_5_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, petick_0_0_1 }:
          buildMix ({
            name = "gen_frp";
            version = "0.5.0";
            src = fetchHex {
              pkg = "gen_frp";
              version = "0.5.0";
              sha256 =
                "88d8215feca77825bbad32f802259c82a19a81fe777bc77ad33a3b2bd6683f09";
            };
            beamDeps  = [ petick_0_0_1 ];

            meta = {
              description = ''A library that allows for doing Functional
                            Reactive Programming in Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Qqwy/elixir_gen_frp/";
            };
          } // packageOverrides)
      ) {};

    gen_frp = gen_frp_0_5_0;

    gen_fsm_0_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gen_fsm";
            version = "0.0.4";
            src = fetchHex {
              pkg = "gen_fsm";
              version = "0.0.4";
              sha256 =
                "c92bf89ea8dee0f924362b12b61d3cd02306e77a0e8174354044238329b6506a";
            };

            meta = {
              description = ''Elixir wrapper around Erlang`s OTP gen_fsm.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/pavlos/gen_fsm";
            };
          } // packageOverrides)
      ) {};

    gen_fsm_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gen_fsm";
            version = "0.1.0";
            src = fetchHex {
              pkg = "gen_fsm";
              version = "0.1.0";
              sha256 =
                "273281dbb6cf6171a6fb963538fde67146a11f6025a80113eae4b29822083a62";
            };

            meta = {
              description = ''Elixir wrapper around Erlang`s OTP gen_fsm.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/pavlos/gen_fsm";
            };
          } // packageOverrides)
      ) {};

    gen_fsm = gen_fsm_0_1_0;

    gen_leader_0_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "gen_leader";
            version = "0.1.0";
            src = fetchHex {
              pkg = "gen_leader";
              version = "0.1.0";
              sha256 =
                "31340f49935767f12b639b69cdc585f26ebcc1802ba46b33555b229da2366207";
            };

            meta = {
              description = ''The gen_leader behaviour'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/knusbaum/gen_leader_revival";
            };
          } // packageOverrides)
      ) {};

    gen_leader = gen_leader_0_1_0;

    gen_listener_tcp_0_3_2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "gen_listener_tcp";
            version = "0.3.2";
            src = fetchHex {
              pkg = "gen_listener_tcp";
              version = "0.3.2";
              sha256 =
                "b3c3fbc525ba2b32d947b06811d38470d5b0abe2ca81b623192a71539ed22336";
            };

            meta = {
              description = ''Generic TCP Server'';

              homepage = "https://github.com/travelping/gen_listener_tcp";
            };
          } // packageOverrides)
      ) {};

    gen_listener_tcp = gen_listener_tcp_0_3_2;

    gen_logger_1_2_1 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex }:
          buildErlangMk ({
            name = "gen_logger";
            version = "1.2.1";
            src = fetchHex {
              pkg = "gen_logger";
              version = "1.2.1";
              sha256 =
                "656ff0d0db10a51e799fd32607af7df21d3f1586f7c3b06e7e2a7d59e86ee0d3";
            };

            meta = {
              description = ''Erlang gen_logger behaviour'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/emqtt/gen_logger";
            };
          } // packageOverrides)
      ) {};

    gen_logger = gen_logger_1_2_1;

    gen_metrics_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          gen_stage_0_12_0,
          statix_1_0_0
        }:
          buildMix ({
            name = "gen_metrics";
            version = "0.2.0";
            src = fetchHex {
              pkg = "gen_metrics";
              version = "0.2.0";
              sha256 =
                "72cccd6321fa54ff72684af7fe1c54d129629f62064348fec31b6578f6a1db45";
            };
            beamDeps  = [ gen_stage_0_12_0 statix_1_0_0 ];

            meta = {
              description = ''Elixir GenServer and GenStage runtime metrics.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/onetapbeyond/gen_metrics";
            };
          } // packageOverrides)
      ) {};

    gen_metrics_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          gen_stage_0_12_0,
          statix_1_0_0
        }:
          buildMix ({
            name = "gen_metrics";
            version = "0.3.0";
            src = fetchHex {
              pkg = "gen_metrics";
              version = "0.3.0";
              sha256 =
                "32d5ea273faf2441e9217939c4f7e72f379c3f31fa45588280ced4114cfc24e7";
            };
            beamDeps  = [ gen_stage_0_12_0 statix_1_0_0 ];

            meta = {
              description = ''Elixir GenServer and GenStage runtime metrics.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/onetapbeyond/gen_metrics";
            };
          } // packageOverrides)
      ) {};

    gen_metrics = gen_metrics_0_3_0;

    gen_metrics_bench_0_1_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, gen_metrics_0_2_0
        }:
          buildMix ({
            name = "gen_metrics_bench";
            version = "0.1.0";
            src = fetchHex {
              pkg = "gen_metrics_bench";
              version = "0.1.0";
              sha256 =
                "ef301cec2be86c6f075bb0fcddedc2054a69bc60f15d702c2a2777e6d4af2868";
            };
            beamDeps  = [ gen_metrics_0_2_0 ];

            meta = {
              description = ''An Elixir GenMetrics benchmarking tool for
                            GenServer and GenStage applications.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/onetapbeyond/gen_metrics_bench";
            };
          } // packageOverrides)
      ) {};

    gen_metrics_bench = gen_metrics_bench_0_1_0;

    gen_mqtt_0_3_1 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, vmq_commons_1_0_0
        }:
          buildMix ({
            name = "gen_mqtt";
            version = "0.3.1";
            src = fetchHex {
              pkg = "gen_mqtt";
              version = "0.3.1";
              sha256 =
                "c77915f48d2cf72b8eb96b6b9515e10230a29fcd900e50e0811d4dd0abea86e8";
            };
            beamDeps  = [ vmq_commons_1_0_0 ];

            meta = {
              description = ''An Elixir behaviour that makes it possible to
                            communicate with a MQTT server'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/gausby/gen_mqtt";
            };
          } // packageOverrides)
      ) {};

    gen_mqtt = gen_mqtt_0_3_1;

    gen_pnet_0_1_4 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, lib_combin_0_1_5
        }:
          buildRebar3 ({
            name = "gen_pnet";
            version = "0.1.4";
            src = fetchHex {
              pkg = "gen_pnet";
              version = "0.1.4";
              sha256 =
                "a4e4e64bab04118dfcb09c9d5286877636fc26911647f56af82293e0a8441a09";
            };

            beamDeps  = [ lib_combin_0_1_5 ];

            meta = {
              description = ''A generic Petri net OTP behavior.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/joergen7/gen_pnet/";
            };
          } // packageOverrides)
      ) {};

    gen_pnet = gen_pnet_0_1_4;

    gen_retry_1_0_1 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, exconstructor_1_1_0
        }:
          buildMix ({
            name = "gen_retry";
            version = "1.0.1";
            src = fetchHex {
              pkg = "gen_retry";
              version = "1.0.1";
              sha256 =
                "1e347929f06694a07bbb322bb8d7556ad15f815e8339aa540334bda1c0961d2b";
            };
            beamDeps  = [ exconstructor_1_1_0 ];

            meta = {
              longDescription = ''GenRetry provides utilities for retrying
                                Elixir functions, with configurable delay and
                                backoff characteristics.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/appcues/gen_retry";
            };
          } // packageOverrides)
      ) {};

    gen_retry = gen_retry_1_0_1;

    gen_rpc_2_1_0 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          hut_1_2_0,
          ssl_verify_fun_1_1_2
        }:
          buildRebar3 ({
            name = "gen_rpc";
            version = "2.1.0";
            src = fetchHex {
              pkg = "gen_rpc";
              version = "2.1.0";
              sha256 =
                "3158a3e1a9b36334f811c9a6ee165a9a3e797f5b970204b375b9bb40282cb882";
            };

            beamDeps  = [ hut_1_2_0 ssl_verify_fun_1_1_2 ];

            meta = {
              description = ''A scalable RPC library for Erlang-VM based
                            languages'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/priestjim/gen_rpc";
            };
          } // packageOverrides)
      ) {};

    gen_rpc = gen_rpc_2_1_0;

    gen_smtp_0_11_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "gen_smtp";
            version = "0.11.0";
            src = fetchHex {
              pkg = "gen_smtp";
              version = "0.11.0";
              sha256 =
                "91df291503e0c0d3d5ddb00ed85f3d8da521a9a0936d141f647bb752f0295f02";
            };

            meta = {
              description = ''A generic Erlang SMTP server/client framework'';
              license = stdenv.lib.licenses.bsd2;
              homepage = "https://github.com/Vagabond/gen_smtp";
            };
          } // packageOverrides)
      ) {};

    gen_smtp_0_12_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "gen_smtp";
            version = "0.12.0";
            src = fetchHex {
              pkg = "gen_smtp";
              version = "0.12.0";
              sha256 =
                "7b4d2e5338f98518414bae6b85d2be51d6715c6f2695c7967567af5426bf00e5";
            };

            meta = {
              description = ''A generic Erlang SMTP server/client framework'';
              license = stdenv.lib.licenses.bsd2;
              homepage = "https://github.com/Vagabond/gen_smtp";
            };
          } // packageOverrides)
      ) {};

    gen_smtp = gen_smtp_0_12_0;

    gen_smtp_0_9_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "gen_smtp";
            version = "0.9.0";
            src = fetchHex {
              pkg = "gen_smtp";
              version = "0.9.0";
              sha256 =
                "5a05f23a7cbe0c6242d290b445c6bbc0c287e3d0e09d3fcdc6bcd2c8973b6688";
            };

            meta = {
              description = ''A generic Erlang SMTP server/client framework'';
              license = stdenv.lib.licenses.bsd2;
              homepage = "https://github.com/Vagabond/gen_smtp";
            };
          } // packageOverrides)
      ) {};

    gen_stage_0_11_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gen_stage";
            version = "0.11.0";
            src = fetchHex {
              pkg = "gen_stage";
              version = "0.11.0";
              sha256 =
                "e3c22b2e003970a8c5f58b763bdf645c298a035833b2f241c468fe330108cebf";
            };

            meta = {
              description = ''Producer and consumer pipelines with
                            back-pressure for Elixir'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/elixir-lang/gen_stage";
            };
          } // packageOverrides)
      ) {};

    gen_stage_0_12_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gen_stage";
            version = "0.12.0";
            src = fetchHex {
              pkg = "gen_stage";
              version = "0.12.0";
              sha256 =
                "657d938cbbbceb983d549af22eac6e4a1f175472ca78e40643a4f94a9d9cbfbc";
            };

            meta = {
              description = ''Producer and consumer pipelines with
                            back-pressure for Elixir'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/elixir-lang/gen_stage";
            };
          } // packageOverrides)
      ) {};

    gen_stage = gen_stage_0_12_0;

    gen_state_machine_1_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gen_state_machine";
            version = "1.0.2";
            src = fetchHex {
              pkg = "gen_state_machine";
              version = "1.0.2";
              sha256 =
                "8b65458f74c0979b388c760b52a37db5a18d7c17a7b821b6957b4a64367db21a";
            };

            meta = {
              description = ''An Elixir wrapper for gen_statem.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/antipax/gen_state_machine";
            };
          } // packageOverrides)
      ) {};

    gen_state_machine_2_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gen_state_machine";
            version = "2.0.0";
            src = fetchHex {
              pkg = "gen_state_machine";
              version = "2.0.0";
              sha256 =
                "fe4584a2705f6288c6ee52fe70a67c89d2aefa3d7b6f1ebbfc4e12314067d055";
            };

            meta = {
              description = ''An Elixir wrapper for gen_statem.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/antipax/gen_state_machine";
            };
          } // packageOverrides)
      ) {};

    gen_state_machine = gen_state_machine_2_0_0;

    gen_task_0_1_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gen_task";
            version = "0.1.4";
            src = fetchHex {
              pkg = "gen_task";
              version = "0.1.4";
              sha256 =
                "4419dcec86dac557974ce93cb38d78d1eddd00e8dfa5ec0c8896a25d04586ca1";
            };

            meta = {
              longDescription = ''Generic Task behavior that helps to
                                encapsulate worker errors and recover from them
                                in classic GenStage`s.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/Nebo15/gen_task";
            };
          } // packageOverrides)
      ) {};

    gen_task = gen_task_0_1_4;

    gen_template_api_client_0_1_1 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, mix_templates_0_1_13
        }:
          buildMix ({
            name = "gen_template_api_client";
            version = "0.1.1";
            src = fetchHex {
              pkg = "gen_template_api_client";
              version = "0.1.1";
              sha256 =
                "97fcdb82c15050d380e0b64812925daf124ecf501add1134e052bfb7eebe4dc7";
            };
            beamDeps  = [ mix_templates_0_1_13 ];

            meta = {
              longDescription = ''A template for building API clients to 3rd
                                party REST applications. This will generate
                                templates for get, post functions. You then
                                extend the project with convenience functions to
                                access the API like it were just another Elixir
                                lib.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/aforward/gen_template_api_client";
            };
          } // packageOverrides)
      ) {};

    gen_template_api_client = gen_template_api_client_0_1_1;

    gen_template_ecto_service_0_2_2 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, mix_templates_0_1_13
        }:
          buildMix ({
            name = "gen_template_ecto_service";
            version = "0.2.2";
            src = fetchHex {
              pkg = "gen_template_ecto_service";
              version = "0.2.2";
              sha256 =
                "981bf677280010d6ffa36928111fd23c2a095beaf799354a2be8355f1b86d7c7";
            };
            beamDeps  = [ mix_templates_0_1_13 ];

            meta = {
              longDescription = ''A template `mix gen ecto_service «project»`
                                that generates a project for building stand
                                alone ecto services (using Posgres)'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/aforward/gen_template_ecto_service";
            };
          } // packageOverrides)
      ) {};

    gen_template_ecto_service = gen_template_ecto_service_0_2_2;

    gen_template_escript_0_1_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, mix_templates_0_1_13
        }:
          buildMix ({
            name = "gen_template_escript";
            version = "0.1.0";
            src = fetchHex {
              pkg = "gen_template_escript";
              version = "0.1.0";
              sha256 =
                "e11b39f6d4fb6b6efe87a2e34a737f82b8a81f3e48034cb6be34c2db813e9313";
            };
            beamDeps  = [ mix_templates_0_1_13 ];

            meta = {
              longDescription = ''Generates escript projects. Elixir scripts
                                have a module with a `main` function. This mix
                                gen template acts as template for such
                                scripts.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/meddle0x53/gen_template_escript";
            };
          } // packageOverrides)
      ) {};

    gen_template_escript = gen_template_escript_0_1_0;

    gen_template_project_0_1_10 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, mix_templates_0_1_13
        }:
          buildMix ({
            name = "gen_template_project";
            version = "0.1.10";
            src = fetchHex {
              pkg = "gen_template_project";
              version = "0.1.10";
              sha256 =
                "9e0a8d81ae47e7ca593253bddf96e2c96208ea28bb33cb36cc1095bf7bf38318";
            };
            beamDeps  = [ mix_templates_0_1_13 ];

            meta = {
              longDescription = ''A replacement for `mix new «project»` that
                                generates files which I believe to be easier to
                                read and maintain.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/pragdave/gen_template_project";
            };
          } // packageOverrides)
      ) {};

    gen_template_project = gen_template_project_0_1_10;

    gen_template_template_0_1_5 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, mix_templates_0_1_13
        }:
          buildMix ({
            name = "gen_template_template";
            version = "0.1.5";
            src = fetchHex {
              pkg = "gen_template_template";
              version = "0.1.5";
              sha256 =
                "e3bb9ca6dd25dea2c96e4b14f67ddd9f364949274f17cd1b9537ef974f9c65c0";
            };
            beamDeps  = [ mix_templates_0_1_13 ];

            meta = {
              longDescription = ''A template that generates blank template
                                projects, intended to be used by folks creating
                                their own templates.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/pragdave/gen_template_template";
            };
          } // packageOverrides)
      ) {};

    gen_template_template = gen_template_template_0_1_5;

    gen_template_umbrella_0_1_10 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, mix_templates_0_1_13
        }:
          buildMix ({
            name = "gen_template_umbrella";
            version = "0.1.10";
            src = fetchHex {
              pkg = "gen_template_umbrella";
              version = "0.1.10";
              sha256 =
                "a2f2fd102e5a8effb5cddce289a13017381ea265819f083743f3f43e12ae68e1";
            };
            beamDeps  = [ mix_templates_0_1_13 ];

            meta = {
              description = ''Generate a basic umbrella project.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/pragdave/gen_template_umbrella";
            };
          } // packageOverrides)
      ) {};

    gen_template_umbrella = gen_template_umbrella_0_1_10;

    gen_util_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gen_util";
            version = "0.1.0";
            src = fetchHex {
              pkg = "gen_util";
              version = "0.1.0";
              sha256 =
                "b77e99fed05ebc9f87cd91f2279b51e213cb8e39f99b0f367a75a30f9ef9ade3";
            };

            meta = {
              description = ''A collection of Utility functions.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/elbow-jason/gen_util";
            };
          } // packageOverrides)
      ) {};

    gen_util = gen_util_0_1_0;

    gendex_0_5_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gendex";
            version = "0.5.1";
            src = fetchHex {
              pkg = "gendex";
              version = "0.5.1";
              sha256 =
                "b3eedba31b1a76ab33e6b57689e4312625fafb2667ac7b485df22c05b4c9439f";
            };

            meta = {
              description = ''Gendex tells you the most likely gender of a
                            person based on first name.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dre1080/gendex";
            };
          } // packageOverrides)
      ) {};

    gendex = gendex_0_5_1;

    genetic_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "genetic";
            version = "0.0.1";
            src = fetchHex {
              pkg = "genetic";
              version = "0.0.1";
              sha256 =
                "9a517e329f8f8412446333f1d7a8d40c7f4ffb697b818a938210f7f87e8b1455";
            };

            meta = {
              longDescription = ''A genetic algorithm structure and abstraction
                                to ease any implementation of genetic algorithm
                                in Elixir. This project is in development not
                                ready for use. This description will be changed
                                as soon as it is functional and can be used.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/fcevado/genetic";
            };
          } // packageOverrides)
      ) {};

    genetic = genetic_0_0_1;

    gengo_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "gengo";
            version = "0.1.1";
            src = fetchHex {
              pkg = "gengo";
              version = "0.1.1";
              sha256 =
                "1b8d2434844ea990df51852af7f37aef7fa8a8a11b7651d82f7976a705ef66a4";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''Elixir client for Gengo API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kelvintaywl/exgengo";
            };
          } // packageOverrides)
      ) {};

    gengo = gengo_0_1_1;

    genstage_kafka_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          brod_2_3_7,
          gen_stage_0_11_0
        }:
          buildMix ({
            name = "genstage_kafka";
            version = "0.1.0";
            src = fetchHex {
              pkg = "genstage_kafka";
              version = "0.1.0";
              sha256 =
                "2c209983f3a4f9a578881c192fca95d6bc36ad1eb960cf9195089bb30165167e";
            };
            beamDeps  = [ brod_2_3_7 gen_stage_0_11_0 ];

            meta = {
              description = ''A module that makes a GenStage producer publish
                            to a kafka topic'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/jdalberg/genstage_kafka";
            };
          } // packageOverrides)
      ) {};

    genstage_kafka = genstage_kafka_0_1_0;

    geo_1_5_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_4,
          poison_1_0_2,
          postgrex_1_0_0_rc_1
        }:
          buildMix ({
            name = "geo";
            version = "1.5.0";
            src = fetchHex {
              pkg = "geo";
              version = "1.5.0";
              sha256 =
                "56f0594b44eb283c1c495bc5867b5b4c18150b0374a867aabbb5cd878f049be6";
            };
            beamDeps  = [ ecto_2_1_4 poison_1_0_2 postgrex_1_0_0_rc_1 ];

            meta = {
              description = ''Encodes and decodes WKB, WKT, and GeoJSON
                            formats.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bryanjos/geo";
            };
          } // packageOverrides)
      ) {};

    geo = geo_1_5_0;

    geo_pattern_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "geo_pattern";
            version = "0.0.1";
            src = fetchHex {
              pkg = "geo_pattern";
              version = "0.0.1";
              sha256 =
                "507e9c27c2d967db9571db34540d332048f68041cb5537f2b5604e740b7fa83c";
            };

            meta = {
              description = ''An Elixir library for generating beautiful SVG
                            patterns from strings.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/annejohnson/geo_pattern";
            };
          } // packageOverrides)
      ) {};

    geo_pattern = geo_pattern_0_0_1;

    geocalc_0_5_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "geocalc";
            version = "0.5.4";
            src = fetchHex {
              pkg = "geocalc";
              version = "0.5.4";
              sha256 =
                "431ec96583a68e155d0f5d86a07f7ebc2606cc21ae65ed67c3025848a7fafa6c";
            };

            meta = {
              description = ''Calculate distance, bearing and more between
                            latitude/longitude points.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/yltsrc/geocalc";
            };
          } // packageOverrides)
      ) {};

    geocalc = geocalc_0_5_4;

    geocoder_0_6_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          geohash_0_1_1,
          httpoison_0_11_2,
          poison_1_0_2,
          poolboy_1_5_1,
          towel_0_2_1
        }:
          buildMix ({
            name = "geocoder";
            version = "0.6.2";
            src = fetchHex {
              pkg = "geocoder";
              version = "0.6.2";
              sha256 =
                "001503f763dad0a1621287bb39a1413686852ade9d04af318ef72627869f74e2";
            };
            beamDeps  = [
                          geohash_0_1_1
                          httpoison_0_11_2
                          poison_1_0_2
                          poolboy_1_5_1
                          towel_0_2_1
                        ];

            meta = {
              description = ''A simple, efficient geocoder/reverse geocoder
                            with a built-in cache.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/knrz/geocoder";
            };
          } // packageOverrides)
      ) {};

    geocoder = geocoder_0_6_2;

    geocodex_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "geocodex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "geocodex";
              version = "0.1.0";
              sha256 =
                "0185cbfe7c71500ae2cce62af10b1a546a8bf3a180d57e361bc8f3cb09c8baa8";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''A Google Geocoding API wrapper'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dsantosmerino/geocodex";
            };
          } // packageOverrides)
      ) {};

    geocodex = geocodex_0_1_0;

    geohash_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "geohash";
            version = "0.1.1";
            src = fetchHex {
              pkg = "geohash";
              version = "0.1.1";
              sha256 =
                "ffca8ce73cce9c52aae2000c5f417009b87f23d6e2df69cd6985bc5cc05aa998";
            };

            meta = {
              description = ''Geohash encode/decode implementation for
                            Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/polmuz/elixir-geohash";
            };
          } // packageOverrides)
      ) {};

    geohash_1_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "geohash";
            version = "1.0.2";
            src = fetchHex {
              pkg = "geohash";
              version = "1.0.2";
              sha256 =
                "450a8e2b93b4f155e1062578bcc4e38754f903bb888089a22a34fc14ddc98420";
            };

            meta = {
              description = ''Geohash encode/decode implementation for
                            Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/polmuz/elixir-geohash";
            };
          } // packageOverrides)
      ) {};

    geohash = geohash_1_0_2;

    geohax_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "geohax";
            version = "0.2.1";
            src = fetchHex {
              pkg = "geohax";
              version = "0.2.1";
              sha256 =
                "414a99d36acbde8fe8355b49e0dd693548c1d9f818d6363d7fdc4c3dc3662561";
            };

            meta = {
              description = ''Geohash encoding and decoding for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/evuez/geohax";
            };
          } // packageOverrides)
      ) {};

    geohax = geohax_0_2_1;

    geoip_0_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cachex_2_1_0,
          httpoison_0_11_2,
          poison_1_0_2
        }:
          buildMix ({
            name = "geoip";
            version = "0.1.2";
            src = fetchHex {
              pkg = "geoip";
              version = "0.1.2";
              sha256 =
                "3d90dcc6fb3bad2504f251aba58edc90b13185c835e829d6835c2a438797a450";
            };
            beamDeps  = [ cachex_2_1_0 httpoison_0_11_2 poison_1_0_2 ];

            meta = {
              description = ''Lookup the geo location for a given IP address,
                            hostname or Plug.Conn instance'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/navinpeiris/geoip";
            };
          } // packageOverrides)
      ) {};

    geoip = geoip_0_1_2;

    geolite2data_0_0_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "geolite2data";
            version = "0.0.3";
            src = fetchHex {
              pkg = "geolite2data";
              version = "0.0.3";
              sha256 =
                "ad7bcc7669f06d29705ce7c757b3255cc8f6e30ccf5771a2b270e31541e553b4";
            };

            meta = {
              description = ''Periodically fetches the free MaxMind GeoLite2
                            databases'';
              license = stdenv.lib.licenses.mpl20;
              homepage = "https://github.com/potatosalad/erlang-geolite2data";
            };
          } // packageOverrides)
      ) {};

    geolite2data = geolite2data_0_0_3;

    geolix_0_13_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poolboy_1_5_1 }:
          buildMix ({
            name = "geolix";
            version = "0.13.0";
            src = fetchHex {
              pkg = "geolix";
              version = "0.13.0";
              sha256 =
                "8e8c92fe5e355c9d6aa5271db6c3c1a437ba7d062e4756d8c1f032c93d5808a6";
            };
            beamDeps  = [ poolboy_1_5_1 ];

            meta = {
              description = ''MaxMind GeoIP2 database reader/decoder'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/elixir-geolix/geolix";
            };
          } // packageOverrides)
      ) {};

    geolix = geolix_0_13_0;

    geom_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_1_0_2 }:
          buildMix ({
            name = "geom";
            version = "1.0.0";
            src = fetchHex {
              pkg = "geom";
              version = "1.0.0";
              sha256 =
                "3bab2e0418448aac63030663442d51b1c1738f1237b426c512ef6114296c5224";
            };
            beamDeps  = [ poison_1_0_2 ];

            meta = {
              longDescription = ''The geom project gives access to a variety of
                                geometric shapes and the algorithms necessary
                                for their manipulation.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/EtienneDesticourt/geom";
            };
          } // packageOverrides)
      ) {};

    geom = geom_1_0_0;

    geonames_1_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "geonames";
            version = "1.0.2";
            src = fetchHex {
              pkg = "geonames";
              version = "1.0.2";
              sha256 =
                "f3ff0c0f5c46e5d79aea88a51018401be9746a0d9ea03de9a5f6d0a93407a9da";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''A simple wrapper around the geonames.org JSON
                            API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pareeohnos/geonames-elixir";
            };
          } // packageOverrides)
      ) {};

    geonames = geonames_1_0_2;

    getopt_0_8_2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "getopt";
            version = "0.8.2";
            src = fetchHex {
              pkg = "getopt";
              version = "0.8.2";
              sha256 =
                "736e6db3679fbbad46373efb96b69509f8e420281635e9d92989af9f0a0483f7";
            };

            meta = {
              description = ''Command-line options parser for Erlang'';

              homepage = "https://github.com/jcomellas/getopt";
            };
          } // packageOverrides)
      ) {};

    getopt = getopt_0_8_2;

    gettext_0_10_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gettext";
            version = "0.10.0";
            src = fetchHex {
              pkg = "gettext";
              version = "0.10.0";
              sha256 =
                "c37747dced24fe00cb4245cb348a36556fa82851c10748cfe4c6a0253aea374e";
            };

            meta = {
              description = ''Internationalization and localization through
                            gettext'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/elixir-lang/gettext";
            };
          } // packageOverrides)
      ) {};

    gettext_0_13_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gettext";
            version = "0.13.1";
            src = fetchHex {
              pkg = "gettext";
              version = "0.13.1";
              sha256 =
                "b233b4ab0d349a359b52592d2d591fc6e4b20fdbe0b15a624cc15a3ca509a1cc";
            };

            meta = {
              description = ''Internationalization and localization through
                            gettext'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/elixir-lang/gettext";
            };
          } // packageOverrides)
      ) {};

    gettext = gettext_0_13_1;

    gh_webhook_plug_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, plug_1_2_0_rc_0 }:
          buildMix ({
            name = "gh_webhook_plug";
            version = "0.0.3";
            src = fetchHex {
              pkg = "gh_webhook_plug";
              version = "0.0.3";
              sha256 =
                "9509e2a82e8b48e7eb3c90cb79602c5fbb12196d36d5e5f8bcd1ce1ac1b442a9";
            };
            beamDeps  = [ plug_1_2_0_rc_0 ];

            meta = {
              longDescription = ''This Plug makes it easy to listen and respond
                                to Github webhook requests in your Elixir
                                apps.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/emilsoman/gh_webhook_plug";
            };
          } // packageOverrides)
      ) {};

    gh_webhook_plug = gh_webhook_plug_0_0_3;

    gherkin_1_4_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gherkin";
            version = "1.4.0";
            src = fetchHex {
              pkg = "gherkin";
              version = "1.4.0";
              sha256 =
                "c29333469e07a3c6cb6f457a69d245e433558b2fa30cfd746660f52456f1e278";
            };

            meta = {
              description = ''Gherkin file parser for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cabbage-ex/gherkin";
            };
          } // packageOverrides)
      ) {};

    gherkin = gherkin_1_4_0;

    ghibli_1_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_7_1,
          poison_3_1_0
        }:
          buildMix ({
            name = "ghibli";
            version = "1.0.0";
            src = fetchHex {
              pkg = "ghibli";
              version = "1.0.0";
              sha256 =
                "4333d6e02e0022d2fd8de0cf48a41b6190bf8a5c61941965fcd3f34a7de269fa";
            };
            beamDeps  = [ hackney_1_7_1 poison_3_1_0 ];

            meta = {
              description = ''Studio Ghibli API client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sotojuan/ghibli";
            };
          } // packageOverrides)
      ) {};

    ghibli = ghibli_1_0_0;

    gialib_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gialib";
            version = "0.1.0";
            src = fetchHex {
              pkg = "gialib";
              version = "0.1.0";
              sha256 =
                "e1efea4e4de441b2622f486ac3b5e874f2fd9e24a2f97fb27cd0125457b0aff0";
            };

            meta = {
              description = ''Util For Gialib'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/gialib/gialib";
            };
          } // packageOverrides)
      ) {};

    gialib = gialib_0_1_0;

    gibran_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gibran";
            version = "0.0.2";
            src = fetchHex {
              pkg = "gibran";
              version = "0.0.2";
              sha256 =
                "bdf0eb8c7469ac17e14e898b26fb47d4a360409f7a750bfde5d7d0765f327ca4";
            };

            meta = {
              description = ''An Elixir natural language processor.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/abitdodgy/gibran";
            };
          } // packageOverrides)
      ) {};

    gibran = gibran_0_0_2;

    gil_0_0_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          floki_0_17_2,
          httpoison_0_7_5
        }:
          buildMix ({
            name = "gil";
            version = "0.0.3";
            src = fetchHex {
              pkg = "gil";
              version = "0.0.3";
              sha256 =
                "5235fdfd30513bd5d75a93272fc952f3ae1c0746e400591c244383d8f0fe9403";
            };
            beamDeps  = [ floki_0_17_2 httpoison_0_7_5 ];

            meta = {
              description = ''\"Mix custome task for check exchange rate\"'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/modalsoul/gil";
            };
          } // packageOverrides)
      ) {};

    gil = gil_0_0_3;

    gimei_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gimei";
            version = "0.0.2";
            src = fetchHex {
              pkg = "gimei";
              version = "0.0.2";
              sha256 =
                "858aab561bc200358ee7098c80ea91d8c7e38b0058c55b1e4df28f5e5a27db7c";
            };

            meta = {
              description = ''Gimei is a pure Elixir library for genrating
                            Japanese fake data.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/KazuCocoa/elixir-gimei";
            };
          } // packageOverrides)
      ) {};

    gimei = gimei_0_0_2;

    gimei_ex_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gimei_ex";
            version = "1.0.0";
            src = fetchHex {
              pkg = "gimei_ex";
              version = "1.0.0";
              sha256 =
                "21dd295d7beae218cc947d649d62d990aa2931d844c15e367528d68926a21987";
            };

            meta = {
              description = ''Elixir port of gimei library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ma2gedev/gimei_ex";
            };
          } // packageOverrides)
      ) {};

    gimei_ex = gimei_ex_1_0_0;

    giphy_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          calendar_0_17_2,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "giphy";
            version = "0.1.1";
            src = fetchHex {
              pkg = "giphy";
              version = "0.1.1";
              sha256 =
                "4bb449d4508a273ff5ecd8852023d617e5334a42d9a8fb6d10c1b4b8db52ae50";
            };
            beamDeps  = [ calendar_0_17_2 httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''Elixir wrapper for the Giphy API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/danielberkompas/giphy";
            };
          } // packageOverrides)
      ) {};

    giphy = giphy_0_1_1;

    giphy_ex_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exjsx_3_2_1,
          httpoison_0_11_2
        }:
          buildMix ({
            name = "giphy_ex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "giphy_ex";
              version = "0.1.0";
              sha256 =
                "76d2a4eeaf23f4cc37818e0dde08400e6ce6cc78c60d532debd5b864878df235";
            };
            beamDeps  = [ exjsx_3_2_1 httpoison_0_11_2 ];

            meta = {
              description = ''Elixir wrapper to consume Giphy`s API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dreamingechoes/giphy_ex";
            };
          } // packageOverrides)
      ) {};

    giphy_ex = giphy_ex_0_1_0;

    gisla_2_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, hut_1_2_0 }:
          buildRebar3 ({
            name = "gisla";
            version = "2.0.0";
            src = fetchHex {
              pkg = "gisla";
              version = "2.0.0";
              sha256 =
                "f64f2633fcbded9fe8a6b818d4cbb19e5eb5a2d70c2720bf44d3c4086e46140c";
            };

            buildPlugins  = [ rebar3_proper ];

            beamDeps  = [ hut_1_2_0 ];

            meta = {
              description = ''Sagas for Erlang'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mrallen1/gisla";
            };
          } // packageOverrides)
      ) {};

    gisla = gisla_2_0_0;

    git_cli_0_2_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "git_cli";
            version = "0.2.3";
            src = fetchHex {
              pkg = "git_cli";
              version = "0.2.3";
              sha256 =
                "b676e63ba70addae0a23f19b228e29069d37f0fbfe9ba1e5183fd1e287cf915d";
            };

            meta = {
              description = ''A simple interface to Git CLI'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tuvistavie/elixir-git-cli";
            };
          } // packageOverrides)
      ) {};

    git_cli = git_cli_0_2_3;

    gitex_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gitex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "gitex";
              version = "0.1.0";
              sha256 =
                "ac3bfa723cf2f734837fc7d89a330fa80156f96eaa2e6326d2ab60880a804de7";
            };

            meta = {
              longDescription = ''Elixir implementation of the Git object
                                storage, but with the goal to implement the same
                                semantic with other storage and topics'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/awetzel/gitex";
            };
          } // packageOverrides)
      ) {};

    gitex_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gitex";
            version = "0.2.0";
            src = fetchHex {
              pkg = "gitex";
              version = "0.2.0";
              sha256 =
                "68074becf5e9a01d00096c306a05b023d0107bafca178ff0f043f893b7b95450";
            };

            meta = {
              longDescription = ''Elixir implementation of the Git object
                                storage, but with the goal to implement the same
                                semantic with other storage and topics'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/awetzel/gitex";
            };
          } // packageOverrides)
      ) {};

    gitex = gitex_0_2_0;

    github_issues_0_2_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_5_0,
          io_ansi_table_0_2_3,
          jsx_2_8_2,
          logger_file_backend_0_0_9
        }:
          buildMix ({
            name = "github_issues";
            version = "0.2.3";
            src = fetchHex {
              pkg = "github_issues";
              version = "0.2.3";
              sha256 =
                "585e0d911bc7c3de4db27d87cf0bbb69bdca6509c4503cab79e045b94fa624cd";
            };
            beamDeps  = [
                          httpoison_0_5_0
                          io_ansi_table_0_2_3
                          jsx_2_8_2
                          logger_file_backend_0_0_9
                        ];

            meta = {
              description = ''Prints GitHub Issues to STDOUT in a table with
                            borders and colors.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/RaymondLoranger/github_issues";
            };
          } // packageOverrides)
      ) {};

    github_issues = github_issues_0_2_3;

    github_oauth_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_1_5_2
        }:
          buildMix ({
            name = "github_oauth";
            version = "0.1.1";
            src = fetchHex {
              pkg = "github_oauth";
              version = "0.1.1";
              sha256 =
                "4e68983af9ed8146a2505ad759cb151c3202471285f07df6132a4acd47aa91f2";
            };
            beamDeps  = [ httpoison_0_11_2 poison_1_5_2 ];

            meta = {
              description = ''simple github oauth library'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/lidashuang/github_oauth";
            };
          } // packageOverrides)
      ) {};

    github_oauth = github_oauth_0_1_1;

    github_trend_ex_0_2_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          floki_0_12_1,
          hackney_1_6_3,
          httpoison_0_11_2
        }:
          buildMix ({
            name = "github_trend_ex";
            version = "0.2.1";
            src = fetchHex {
              pkg = "github_trend_ex";
              version = "0.2.1";
              sha256 =
                "bfb73fe9e0f72fd1b710f5da38ed0ab173b9495f5673f5d8f30f1d21afc14cf8";
            };
            beamDeps  = [ floki_0_12_1 hackney_1_6_3 httpoison_0_11_2 ];

            meta = {
              description = ''Get trend repositories from Github.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/KazuCocoa/github_trend_ex";
            };
          } // packageOverrides)
      ) {};

    github_trend_ex = github_trend_ex_0_2_1;

    giza_0_0_1 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex }:
          buildErlangMk ({
            name = "giza";
            version = "0.0.1";
            src = fetchHex {
              pkg = "giza";
              version = "0.0.1";
              sha256 =
                "31dc10f47f88288d0eefda6c2cf13dc545222577cb9396f77b7d07be69d1a9d8";
            };

            meta = {
              description = ''Client for the Sphinx search engine'';
              license = stdenv.lib.licenses.free;
            };
          } // packageOverrides)
      ) {};

    giza = giza_0_0_1;

    giza_sphinxsearch_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "giza_sphinxsearch";
            version = "0.0.1";
            src = fetchHex {
              pkg = "giza_sphinxsearch";
              version = "0.0.1";
              sha256 =
                "12f7a8d61b8bdb4b4566d35bb4e8c742904c5ebacd9256426d873e0bc0cf287c";
            };

            meta = {
              description = ''Sphinx Client for Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/Tyler-pierce/giza_sphinxsearch";
            };
          } // packageOverrides)
      ) {};

    giza_sphinxsearch = giza_sphinxsearch_0_0_1;

    gizoogle_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, httpoison_0_8_3 }:
          buildMix ({
            name = "gizoogle";
            version = "0.0.2";
            src = fetchHex {
              pkg = "gizoogle";
              version = "0.0.2";
              sha256 =
                "c22d720fc60df8670a194c6ed1fb17fe272a7560b478037aef4a1437331f60e3";
            };
            beamDeps  = [ httpoison_0_8_3 ];

            meta = {
              longDescription = ''Uses Gizoogle ta allow you ta drop a rhyme
                                like a thug n` retrieve links fo` translated
                                sitez'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/notdevinclark/gizoogle";
            };
          } // packageOverrides)
      ) {};

    gizoogle = gizoogle_0_0_2;

    gl_utils_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gl_utils";
            version = "0.0.1";
            src = fetchHex {
              pkg = "gl_utils";
              version = "0.0.1";
              sha256 =
                "ae529fef193423baa50c673b3f852e0c3ca7b08a85817be7113615dbdacb53f3";
            };

            meta = {
              description = ''All of the Erlang gl macros exposed as normal
                            functions'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/requnix/gl_utils";
            };
          } // packageOverrides)
      ) {};

    gl_utils = gl_utils_0_0_1;

    glitchylicious_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "glitchylicious";
            version = "0.0.1";
            src = fetchHex {
              pkg = "glitchylicious";
              version = "0.0.1";
              sha256 =
                "2d7c55bd138722ff810006d4b36873d80ad0473e074ccc377e381c5a88f0a9db";
            };

            meta = {
              description = ''Glitching and image corruption library.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/0010-IO/glitchylicious";
            };
          } // packageOverrides)
      ) {};

    glitchylicious = glitchylicious_0_0_1;

    glob_0_0_9 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex }:
          buildErlangMk ({
            name = "glob";
            version = "0.0.9";
            src = fetchHex {
              pkg = "glob";
              version = "0.0.9";
              sha256 =
                "b3f80e2063ade4c71a0080bdd84ffa49a9ee83e69345e507bd89eedddaaa1958";
            };

            meta = {
              description = ''A library to match glob expressions'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lindenbaum/glob";
            };
          } // packageOverrides)
      ) {};

    glob = glob_0_0_9;

    global_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "global";
            version = "1.0.0";
            src = fetchHex {
              pkg = "global";
              version = "1.0.0";
              sha256 =
                "00b0637bc2d86154af2885807296d4b6616e6b50a2d52c8ce187ddfe317890ee";
            };

            meta = {
              description = ''A wrapper for Erlang`s :global module with
                            documentation.'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/mgwidmann/global";
            };
          } // packageOverrides)
      ) {};

    global = global_1_0_0;

    gm_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gm";
            version = "0.0.2";
            src = fetchHex {
              pkg = "gm";
              version = "0.0.2";
              sha256 =
                "3dc6e1d336afe370219b8b465a651012168f6fe7b9e9d2b0609b6384e1bcb8f7";
            };

            meta = {
              description = ''Idiomatic GraphicsMagick wrapper for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/utkarshkukreti/gm.ex";
            };
          } // packageOverrides)
      ) {};

    gm = gm_0_0_2;

    gmail_0_1_18 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_2_2_0,
          poolboy_1_5_1
        }:
          buildMix ({
            name = "gmail";
            version = "0.1.18";
            src = fetchHex {
              pkg = "gmail";
              version = "0.1.18";
              sha256 =
                "b7e95f05fccb2d740c959c7f3d15f8e37933b811af084bda93d400ac106b9f8b";
            };
            beamDeps  = [ httpoison_0_11_2 poison_2_2_0 poolboy_1_5_1 ];

            meta = {
              description = ''A simple Gmail REST API client for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/craigp/elixir-gmail";
            };
          } // packageOverrides)
      ) {};

    gmail = gmail_0_1_18;

    gmbtest_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ex_doc_0_16_1 }:
          buildMix ({
            name = "gmbtest";
            version = "0.1.1";
            src = fetchHex {
              pkg = "gmbtest";
              version = "0.1.1";
              sha256 =
                "7c92e52cda43f829b478b52a3edb334f79f51dd02774b9eb33e5a64449da2ae1";
            };
            beamDeps  = [ ex_doc_0_16_1 ];

            meta = {
              description = ''Test package'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/GriffinMB";
            };
          } // packageOverrides)
      ) {};

    gmbtest = gmbtest_0_1_1;

    gnat_0_3_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_3_1_0 }:
          buildMix ({
            name = "gnat";
            version = "0.3.3";
            src = fetchHex {
              pkg = "gnat";
              version = "0.3.3";
              sha256 =
                "7ca6e9e99ad84ff2613fefc34df666980d7f0b0fef577a8c0c3aeb3ff7d8806d";
            };
            beamDeps  = [ poison_3_1_0 ];

            meta = {
              description = ''A nats client in pure elixir. Resiliance,
                            Performance, Ease-of-Use.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mmmries/gnat";
            };
          } // packageOverrides)
      ) {};

    gnat = gnat_0_3_3;

    godfist_0_2_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cachex_2_1_0,
          ex_rated_1_3_1,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "godfist";
            version = "0.2.2";
            src = fetchHex {
              pkg = "godfist";
              version = "0.2.2";
              sha256 =
                "43830404a01126bc6a5fd191f68d9bd5b83c0e949e16c3580d9644d42a6adbaa";
            };
            beamDeps  = [
                          cachex_2_1_0
                          ex_rated_1_3_1
                          httpoison_0_11_2
                          poison_3_1_0
                        ];

            meta = {
              description = ''Wrapper for the League of Legends ReST API
                            written in Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/aguxez/godfist";
            };
          } // packageOverrides)
      ) {};

    godfist = godfist_0_2_2;

    gold_0_16_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          decimal_1_3_1,
          httpoison_0_11_2,
          poison_1_0_2
        }:
          buildMix ({
            name = "gold";
            version = "0.16.1";
            src = fetchHex {
              pkg = "gold";
              version = "0.16.1";
              sha256 =
                "3545ea6a7d6a60c298684b6c312abb9d0d3da77f0b2c711b2a38cc3d0a756361";
            };
            beamDeps  = [ decimal_1_3_1 httpoison_0_11_2 poison_1_0_2 ];

            meta = {
              description = ''An Elixir library to interface with the Bitcoin
                            core JSON-RPC API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/solatis/gold";
            };
          } // packageOverrides)
      ) {};

    gold = gold_0_16_1;

    goldrush_0_1_7 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "goldrush";
            version = "0.1.7";
            src = fetchHex {
              pkg = "goldrush";
              version = "0.1.7";
              sha256 =
                "a94a74cd363ce5f4970ed8242c551ec62b71939db1bbfd2e030142cab25a4ffe";
            };

            meta = {
              description = ''Erlang event stream processor'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/DeadZen/goldrush";
            };
          } // packageOverrides)
      ) {};

    goldrush_0_1_8 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "goldrush";
            version = "0.1.8";
            src = fetchHex {
              pkg = "goldrush";
              version = "0.1.8";
              sha256 =
                "ba71e005bbb6ebbc3c510a58b2bd6d3b25a8d091a8e87ac3d33ef10522cdcd51";
            };

            meta = {
              description = ''Erlang event stream processor'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/DeadZen/goldrush";
            };
          } // packageOverrides)
      ) {};

    goldrush_0_1_9 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "goldrush";
            version = "0.1.9";
            src = fetchHex {
              pkg = "goldrush";
              version = "0.1.9";
              sha256 =
                "99cb4128cffcb3227581e5d4d803d5413fa643f4eb96523f77d9e6937d994ceb";
            };

            meta = {
              description = ''Erlang event stream processor'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/DeadZen/goldrush";
            };
          } // packageOverrides)
      ) {};

    goldrush = goldrush_0_1_9;

    golem_0_0_1_alpha3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          poison_2_2_0,
          socket_0_3_12,
          tesla_0_6_0
        }:
          buildMix ({
            name = "golem";
            version = "0.0.1-alpha3";
            src = fetchHex {
              pkg = "golem";
              version = "0.0.1-alpha3";
              sha256 =
                "8e4351939ef68d25930cb7e3f655b5c22a24df38f35c4b18988522ea1e70e73a";
            };
            beamDeps  = [ poison_2_2_0 socket_0_3_12 tesla_0_6_0 ];

            meta = {
              description = ''--- ALPHA --- Chatbot built in Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ghaabor/golem";
            };
          } // packageOverrides)
      ) {};

    golem = golem_0_0_1_alpha3;

    good_enough_geoid_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, csv_2_0_0_rc_0 }:
          buildMix ({
            name = "good_enough_geoid";
            version = "0.0.2";
            src = fetchHex {
              pkg = "good_enough_geoid";
              version = "0.0.2";
              sha256 =
                "7b2a556206f71e743d77c26a55b60b3282bd799b8254510f62afe2a4ec330746";
            };
            beamDeps  = [ csv_2_0_0_rc_0 ];

            meta = {
              description = ''Get EGM Geoid heights that are good enough for
                            some purposes (maybe yours).'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/code-lever/good-enough-geoid-elixir";
            };
          } // packageOverrides)
      ) {};

    good_enough_geoid = good_enough_geoid_0_0_2;

    good_times_1_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "good_times";
            version = "1.1.1";
            src = fetchHex {
              pkg = "good_times";
              version = "1.1.1";
              sha256 =
                "1ecb4524b506a5dde5fa9e2312d6f98249b4b45e49a74cf799a8577b52157b90";
            };

            meta = {
              description = ''Expressive and easy to use datetime functions.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/DevL/good_times";
            };
          } // packageOverrides)
      ) {};

    good_times = good_times_1_1_1;

    google_auth_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          access_token_extractor_0_1_1,
          cowboy_1_0_4,
          module_mocker_0_2_0,
          plug_1_3_5
        }:
          buildMix ({
            name = "google_auth";
            version = "0.0.2";
            src = fetchHex {
              pkg = "google_auth";
              version = "0.0.2";
              sha256 =
                "029f2399456a7b7474635cab36544d35e200ddd7a470a905191de0fc3612adb5";
            };
            beamDeps  = [
                          access_token_extractor_0_1_1
                          cowboy_1_0_4
                          module_mocker_0_2_0
                          plug_1_3_5
                        ];

            meta = {
              longDescription = ''Simple Plug to provide google based
                                authentication. Just pass access_token received
                                from client side google auth flow and this plug
                                will get name, emai and picture of user from
                                google and add it to private inside Plug.Conn'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rohanpujaris/google_auth";
            };
          } // packageOverrides)
      ) {};

    google_auth = google_auth_0_0_2;

    google_books_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_8_3,
          poison_3_1_0
        }:
          buildMix ({
            name = "google_books";
            version = "0.0.2";
            src = fetchHex {
              pkg = "google_books";
              version = "0.0.2";
              sha256 =
                "d20b5ca090df63cf4ed32d7257dcdad780bd89ca93bd644721c9d4d696e5734d";
            };
            beamDeps  = [ httpoison_0_8_3 poison_3_1_0 ];

            meta = {
              description = ''A simple wrapper for Google Books API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nithinbekal/google_books.ex";
            };
          } // packageOverrides)
      ) {};

    google_books = google_books_0_0_2;

    google_civic_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "google_civic";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_civic";
              version = "0.1.0";
              sha256 =
                "6f1376222160040e3569da8873a948abe54486b76558bf4656a9960e312f20f2";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              longDescription = ''This package gives a very small HTTPoison
                                interface for the Google Civic Information
                                API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/andjosh/google_civic";
            };
          } // packageOverrides)
      ) {};

    google_civic = google_civic_0_1_0;

    google_fit_0_2_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          oauth2_0_9_1,
          poison_3_1_0
        }:
          buildMix ({
            name = "google_fit";
            version = "0.2.4";
            src = fetchHex {
              pkg = "google_fit";
              version = "0.2.4";
              sha256 =
                "300f1d797a37e62bdc4030c2ace7f98079548069e65a39bf5082ff72bf4a1716";
            };
            beamDeps  = [ oauth2_0_9_1 poison_3_1_0 ];

            meta = {
              description = ''GoogleFit API wrapper'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/tsubery/google_fit";
            };
          } // packageOverrides)
      ) {};

    google_fit = google_fit_0_2_4;

    google_geocoding_api_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_9_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "google_geocoding_api";
            version = "0.1.0";
            src = fetchHex {
              pkg = "google_geocoding_api";
              version = "0.1.0";
              sha256 =
                "7487cd200cf0a1a39940178b0c1b09167ff252c15f2ec1f13196ca1e42c11ff7";
            };
            beamDeps  = [ httpoison_0_9_2 poison_3_1_0 ];

            meta = {
              description = ''An elixir wrapper for Google`s geocoding API'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/smythey21/google-geocoding-api-elixir";
            };
          } // packageOverrides)
      ) {};

    google_geocoding_api = google_geocoding_api_0_1_0;

    google_maps_0_5_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_10_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "google_maps";
            version = "0.5.0";
            src = fetchHex {
              pkg = "google_maps";
              version = "0.5.0";
              sha256 =
                "dab8015f2a25c50c7b339b1a31834eda9ad51c89d17361fd963084a6da1f3a63";
            };
            beamDeps  = [ httpoison_0_10_0 poison_3_1_0 ];

            meta = {
              description = ''A Google Maps API in Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sntran/ex_maps";
            };
          } // packageOverrides)
      ) {};

    google_maps = google_maps_0_5_0;

    google_sheets_2_0_10 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_8_6,
          httpoison_0_11_2,
          sweet_xml_0_6_5
        }:
          buildMix ({
            name = "google_sheets";
            version = "2.0.10";
            src = fetchHex {
              pkg = "google_sheets";
              version = "2.0.10";
              sha256 =
                "3e2aff41f1d0444accc591db7d3ab2ba32e7b25f77c18571a84c68cb117e496e";
            };
            beamDeps  = [ hackney_1_8_6 httpoison_0_11_2 sweet_xml_0_6_5 ];

            meta = {
              description = ''OTP application for fetching and polling Google
                            spreadsheet data in CSV format.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/GrandCru/GoogleSheets";
            };
          } // packageOverrides)
      ) {};

    google_sheets = google_sheets_2_0_10;

    google_token_1_0_4 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          jose_1_7_9,
          jsx_2_8_0
        }:
          buildRebar3 ({
            name = "google_token";
            version = "1.0.4";
            src = fetchHex {
              pkg = "google_token";
              version = "1.0.4";
              sha256 =
                "794f1e8b8fd1679e36ade84b0b33b8f66400d549a89af4a198e52b7e6fe6f855";
            };

            beamDeps  = [ jose_1_7_9 jsx_2_8_0 ];

            meta = {
              description = ''Google ID token verifier'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ruel/google-token-erlang";
            };
          } // packageOverrides)
      ) {};

    google_token = google_token_1_0_4;

    goomoji_translator_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "goomoji_translator";
            version = "0.0.2";
            src = fetchHex {
              pkg = "goomoji_translator";
              version = "0.0.2";
              sha256 =
                "b794dcccc306c4c5712895456c28012e1b9f8e8496392bafcfa9c1fc2c251f82";
            };

            meta = {
              description = ''Used to change goomoji codes into normal emoji
                            codes'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/azranel/goomoji-translator_elixir";
            };
          } // packageOverrides)
      ) {};

    goomoji_translator = goomoji_translator_0_0_2;

    gossamer_amqp_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          amqp_0_2_0_pre_2,
          json_0_3_3,
          uuid_1_1_7
        }:
          buildMix ({
            name = "gossamer_amqp";
            version = "0.1.0";
            src = fetchHex {
              pkg = "gossamer_amqp";
              version = "0.1.0";
              sha256 =
                "61abdfd6b47434b3449a17e08c2be379d9eb6b761c681963cd56f888afb78503";
            };
            beamDeps  = [ amqp_0_2_0_pre_2 json_0_3_3 uuid_1_1_7 ];

            meta = {
              description = ''Tiny event bus API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tiokksar/gossamer-amqp-elixir";
            };
          } // packageOverrides)
      ) {};

    gossamer_amqp = gossamer_amqp_0_1_0;

    goth_0_2_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_9_2,
          json_web_token_0_2_8,
          poison_2_2_0
        }:
          buildMix ({
            name = "goth";
            version = "0.2.1";
            src = fetchHex {
              pkg = "goth";
              version = "0.2.1";
              sha256 =
                "44b7c12891c141c6b52b17b26ac9f76f0abfc835a299ba9d94779a1bade6a44a";
            };
            beamDeps  = [ httpoison_0_9_2 json_web_token_0_2_8 poison_2_2_0
                      ];

            meta = {
              longDescription = ''A simple library to generate and retrieve
                                Oauth2 tokens for use with Google Cloud Service
                                accounts.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/peburrows/goth";
            };
          } // packageOverrides)
      ) {};

    goth_0_3_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          json_web_token_0_2_8,
          poison_2_2_0
        }:
          buildMix ({
            name = "goth";
            version = "0.3.2";
            src = fetchHex {
              pkg = "goth";
              version = "0.3.2";
              sha256 =
                "20c3ae83d8a0893b6931f45d58a0533dcb2d19616a948a82089bee619efd6fd7";
            };
            beamDeps  = [ httpoison_0_11_2 json_web_token_0_2_8 poison_2_2_0
                      ];

            meta = {
              longDescription = ''A simple library to generate and retrieve
                                Oauth2 tokens for use with Google Cloud Service
                                accounts.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/peburrows/goth";
            };
          } // packageOverrides)
      ) {};

    goth_0_4_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          json_web_token_0_2_8,
          poison_1_0_2
        }:
          buildMix ({
            name = "goth";
            version = "0.4.0";
            src = fetchHex {
              pkg = "goth";
              version = "0.4.0";
              sha256 =
                "6c1292af7608ff33e2e53f4f76c2e427083167d992b897836f3d4caa5ca3b859";
            };
            beamDeps  = [ httpoison_0_11_2 json_web_token_0_2_8 poison_1_0_2
                      ];

            meta = {
              longDescription = ''A simple library to generate and retrieve
                                Oauth2 tokens for use with Google Cloud Service
                                accounts.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/peburrows/goth";
            };
          } // packageOverrides)
      ) {};

    goth = goth_0_4_0;

    govtrack_0_7_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_9_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "govtrack";
            version = "0.7.3";
            src = fetchHex {
              pkg = "govtrack";
              version = "0.7.3";
              sha256 =
                "203ab8d09ac425866f08aa95e75592b60232f79f91540871de0adc3287083346";
            };
            beamDeps  = [ httpoison_0_9_2 poison_2_2_0 ];

            meta = {
              longDescription = ''An elixir wrapper for the govtrack.us API
                                that provides programmatic access to information
                                about the U.S. Congress.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/walterbm/govtrack-elixir";
            };
          } // packageOverrides)
      ) {};

    govtrack = govtrack_0_7_3;

    gpb_3_18_8 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex }:
          buildErlangMk ({
            name = "gpb";
            version = "3.18.8";
            src = fetchHex {
              pkg = "gpb";
              version = "3.18.8";
              sha256 =
                "44af8eadd3edc030684d36ea6964926af6d95aa32e105a02fcc2cd2e1b436694";
            };

            meta = {
              description = ''A compiler for Google protocol buffer definitions
                            files for Erlang.'';
              license = stdenv.lib.licenses.lpgl1;
              homepage = "https://github.com/tomas-abrahamsson/gpb";
            };
          } // packageOverrides)
      ) {};

    gpb_3_26_3 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex }:
          buildErlangMk ({
            name = "gpb";
            version = "3.26.3";
            src = fetchHex {
              pkg = "gpb";
              version = "3.26.3";
              sha256 =
                "8146111c96d82d4c6cfb4b144a21013d1b14517f7eeaae1ebd7e8f4260cc3e2d";
            };

            meta = {
              description = ''A compiler for Google protocol buffer definitions
                            files for Erlang.'';
              license = stdenv.lib.licenses.lpgl1;
              homepage = "https://github.com/tomas-abrahamsson/gpb";
            };
          } // packageOverrides)
      ) {};

    gpb_3_27_0 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex }:
          buildErlangMk ({
            name = "gpb";
            version = "3.27.0";
            src = fetchHex {
              pkg = "gpb";
              version = "3.27.0";
              sha256 =
                "0cba31d6c98c18a6c936cb52e0d0f7a6a757e7ed6201bf3281a73289a2901074";
            };

            meta = {
              description = ''A compiler for Google protocol buffer definitions
                            files for Erlang.'';
              license = stdenv.lib.licenses.lpgl1;
              homepage = "https://github.com/tomas-abrahamsson/gpb";
            };
          } // packageOverrides)
      ) {};

    gpb = gpb_3_27_0;

    gpio_rpi_0_2_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, elixir_make_0_4_0
        }:
          buildMix ({
            name = "gpio_rpi";
            version = "0.2.0";
            src = fetchHex {
              pkg = "gpio_rpi";
              version = "0.2.0";
              sha256 =
                "a5a27b43149c4ebb9be97329a52b8a29991d7045d2d158ecee766e33db85e0e6";
            };
            beamDeps  = [ elixir_make_0_4_0 ];

            meta = {
              description = ''Elixir access to the GPIO interface on Raspberry
                            PI>'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/Hermanverschooten/gpio_rpi";
            };
          } // packageOverrides)
      ) {};

    gpio_rpi = gpio_rpi_0_2_0;

    gproc_0_3_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "gproc";
            version = "0.3.1";
            src = fetchHex {
              pkg = "gproc";
              version = "0.3.1";
              sha256 =
                "3c449925a5cbf57cc40d13c6c282bc1080b5ed3bad97e1acdbe969fd63a65fce";
            };

            meta = {
              description = ''Extended process registry for Erlang'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/uwiger/gproc";
            };
          } // packageOverrides)
      ) {};

    gproc_0_5_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "gproc";
            version = "0.5.0";
            src = fetchHex {
              pkg = "gproc";
              version = "0.5.0";
              sha256 =
                "5bc0fa4e999a6665b92ce57a7f12d7e9d1c26bfc39b0f657994be05cd3818b18";
            };

            meta = {
              description = ''Extended process registry for Erlang'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/uwiger/gproc";
            };
          } // packageOverrides)
      ) {};

    gproc_0_6_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "gproc";
            version = "0.6.1";
            src = fetchHex {
              pkg = "gproc";
              version = "0.6.1";
              sha256 =
                "5506435afbc62de6beb2ade24356a2a6c26c2046e250f845f0676589e86e96ab";
            };

            meta = {
              description = ''Extended process registry for Erlang'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/uwiger/gproc";
            };
          } // packageOverrides)
      ) {};

    gproc = gproc_0_6_1;

    gpx_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, sweet_xml_0_6_5 }:
          buildMix ({
            name = "gpx";
            version = "0.1.0";
            src = fetchHex {
              pkg = "gpx";
              version = "0.1.0";
              sha256 =
                "d4de0c3adfc06dbdb1069e10416981ea94ca4ca7c8f294908ed0fe0f2ec23f31";
            };
            beamDeps  = [ sweet_xml_0_6_5 ];

            meta = {
              description = ''A GPX parsing library.'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    gpx = gpx_0_1_0;

    graditar_2_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          color_utils_0_2_0,
          xml_builder_0_0_9
        }:
          buildMix ({
            name = "graditar";
            version = "2.0.0";
            src = fetchHex {
              pkg = "graditar";
              version = "2.0.0";
              sha256 =
                "e4f8d46c246a1e85190dbd7e2d9ce3f65c1c05ee2760c036e8cbdfbc4e7f6fdd";
            };
            beamDeps  = [ color_utils_0_2_0 xml_builder_0_0_9 ];

            meta = {
              description = ''A set of helper modules to generate
                            gradient-based avatars.'';
              license = stdenv.lib.licenses.isc;
            };
          } // packageOverrides)
      ) {};

    graditar = graditar_2_0_0;

    graffinite_0_4_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          calendar_0_17_2,
          decimal_1_3_1,
          httpoison_0_11_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "graffinite";
            version = "0.4.0";
            src = fetchHex {
              pkg = "graffinite";
              version = "0.4.0";
              sha256 =
                "80cfcc207861c14a5637152bde9a6aace3175fdab2d192c81b7e856f7cdcf95e";
            };
            beamDeps  = [
                          calendar_0_17_2
                          decimal_1_3_1
                          httpoison_0_11_2
                          poison_2_2_0
                        ];

            meta = {
              description = ''Get exchange rates from National Bank of
                            Poland.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/adamniedzielski/graffinite";
            };
          } // packageOverrides)
      ) {};

    graffinite = graffinite_0_4_0;

    granderl_0_1_5 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "granderl";
            version = "0.1.5";
            src = fetchHex {
              pkg = "granderl";
              version = "0.1.5";
              sha256 =
                "0641473f29bc3211c832a6dd3adaa04544a5dffc1c62372556946f236df2dad6";
            };
            compilePorts = true;

            meta = {
              description = ''Fast-and-loose PRNG experiments'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/tokenrove/granderl";
            };
          } // packageOverrides)
      ) {};

    granderl = granderl_0_1_5;

    graphene_client_ex_0_4_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exconstructor_1_1_0,
          flow_0_12_0,
          gen_stage_0_12_0,
          poison_2_2_0,
          websocket_client_1_2_1
        }:
          buildMix ({
            name = "graphene_client_ex";
            version = "0.4.0";
            src = fetchHex {
              pkg = "graphene_client_ex";
              version = "0.4.0";
              sha256 =
                "4fb926ed2cdd824f54e4db163ff349049982dbdb1e8eb62c87443829e906fcfa";
            };
            beamDeps  = [
                          exconstructor_1_1_0
                          flow_0_12_0
                          gen_stage_0_12_0
                          poison_2_2_0
                          websocket_client_1_2_1
                        ];

            meta = {
              description = ''Elixir websockets library and utilities for
                            Bitshares/Graphene 2.0 blockchain'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/cyberpunk-ventures/graphene_client_ex";
            };
          } // packageOverrides)
      ) {};

    graphene_client_ex = graphene_client_ex_0_4_0;

    graphex_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "graphex";
            version = "0.2.1";
            src = fetchHex {
              pkg = "graphex";
              version = "0.2.1";
              sha256 =
                "9279db515110de152479903488b1df6ad2de409f5b48d00fac55211bfab2e728";
            };

            meta = {
              description = ''A task graph execution library for elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/stocks29/graphex";
            };
          } // packageOverrides)
      ) {};

    graphex = graphex_0_2_1;

    graphiter_1_0_5 = callPackage
      (
        {
          buildErlangMk, packageOverrides ? {}, fetchHex, supervisor3_1_1_5
        }:
          buildErlangMk ({
            name = "graphiter";
            version = "1.0.5";
            src = fetchHex {
              pkg = "graphiter";
              version = "1.0.5";
              sha256 =
                "4a6a753a77451a0badda5c0b684c4ee33ca473dc30a15f7d2fa8b476d60436a3";
            };
            beamDeps  = [ supervisor3_1_1_5 ];

            meta = {
              description = ''Graphite (carbon) metrics reporter for Erlang'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/klarna/graphite-erlang";
            };
          } // packageOverrides)
      ) {};

    graphiter_1_0_6 = callPackage
      (
        {
          buildErlangMk, packageOverrides ? {}, fetchHex, supervisor3_1_1_5
        }:
          buildErlangMk ({
            name = "graphiter";
            version = "1.0.6";
            src = fetchHex {
              pkg = "graphiter";
              version = "1.0.6";
              sha256 =
                "09921ccc3a4ddcb8b69be07b0a2a76ce1c39e9929972666bfffa53628db6bdf9";
            };
            beamDeps  = [ supervisor3_1_1_5 ];

            meta = {
              description = ''Graphite (carbon) metrics reporter for Erlang'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/klarna/graphite-erlang";
            };
          } // packageOverrides)
      ) {};

    graphiter = graphiter_1_0_6;

    graphitex_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "graphitex";
            version = "0.2.0";
            src = fetchHex {
              pkg = "graphitex";
              version = "0.2.0";
              sha256 =
                "377fca944d79fd0e472b2e90cf3fd8d9ad8d7723d42bd4e7ebc82dc01b63acef";
            };

            meta = {
              description = ''Graphite tcp client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/msoedov/graphitex";
            };
          } // packageOverrides)
      ) {};

    graphitex = graphitex_0_2_0;

    graphixir_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "graphixir";
            version = "0.0.1";
            src = fetchHex {
              pkg = "graphixir";
              version = "0.0.1";
              sha256 =
                "8d355dc2ac225c2d74f15707908103ca051c74ef1668abf5240f6d3582750518";
            };

            meta = {
              description = ''Graphite framework for elixir'';

            };
          } // packageOverrides)
      ) {};

    graphixir = graphixir_0_0_1;

    graphmath_1_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "graphmath";
            version = "1.0.3";
            src = fetchHex {
              pkg = "graphmath";
              version = "1.0.3";
              sha256 =
                "4223ed3463b7919806c86d647155d507b02cb71001e770dd4a652c3190cc3ca9";
            };

            meta = {
              longDescription = ''Graphmath is a vector and matrix library for
                                doing 2D and 3D mathemtical operations.'';
              license = with stdenv.lib.licenses; [ free wtfpl free ];
              homepage = "https://github.com/crertel/graphmath";
            };
          } // packageOverrides)
      ) {};

    graphmath = graphmath_1_0_3;

    graphql_0_3_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "graphql";
            version = "0.3.2";
            src = fetchHex {
              pkg = "graphql";
              version = "0.3.2";
              sha256 =
                "08b635bfe8383ccb6b250c9b586322e79dda2edac42f541f44730cc5fa218007";
            };

            meta = {
              description = ''GraphQL Elixir implementation'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/graphql-elixir/graphql";
            };
          } // packageOverrides)
      ) {};

    graphql = graphql_0_3_2;

    graphql_erlang_0_2_10 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "graphql_erlang";
            version = "0.2.10";
            src = fetchHex {
              pkg = "graphql_erlang";
              version = "0.2.10";
              sha256 =
                "90d08b4df700cf6a9645e6b5ec8821e57a2ecbbd561664b5f234b3b833497052";
            };

            meta = {
              description = ''GraphQL Erlang Implementation'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/graphql-erlang/graphql";
            };
          } // packageOverrides)
      ) {};

    graphql_erlang = graphql_erlang_0_2_10;

    graphql_ex_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "graphql_ex";
            version = "0.0.1";
            src = fetchHex {
              pkg = "graphql_ex";
              version = "0.0.1";
              sha256 =
                "51884d5275d354b915db03eb390e858ead88b3f3e4f699b2fa7dc8eb442bc343";
            };
             meta = {    };
          } // packageOverrides)
      ) {};

    graphql_ex = graphql_ex_0_0_1;

    graphql_parser_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_1_5_2 }:
          buildMix ({
            name = "graphql_parser";
            version = "0.0.3";
            src = fetchHex {
              pkg = "graphql_parser";
              version = "0.0.3";
              sha256 =
                "c54d6d3a4d5daba22559bc306e3e52cb8d78d3a93738f615c16e405ad56ac6a9";
            };
            beamDeps  = [ poison_1_5_2 ];

            meta = {
              longDescription = ''An elixir interface for libgraphqlparser
                                implemented as a NIF for parsing GraphQL.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/aarvay/graphql_parser";
            };
          } // packageOverrides)
      ) {};

    graphql_parser = graphql_parser_0_0_3;

    graphql_relay_0_5_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          graphql_0_3_2,
          poison_1_0_2
        }:
          buildMix ({
            name = "graphql_relay";
            version = "0.5.0";
            src = fetchHex {
              pkg = "graphql_relay";
              version = "0.5.0";
              sha256 =
                "7f7f75bf456c966fefa9e128e3a7bd44a87e40fbceff10e59e341827371ca428";
            };
            beamDeps  = [ graphql_0_3_2 poison_1_0_2 ];

            meta = {
              description = ''Relay helpers for GraphQL Elixir'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/graphql-elixir/graphql_relay";
            };
          } // packageOverrides)
      ) {};

    graphql_relay = graphql_relay_0_5_0;

    graphvix_0_5_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "graphvix";
            version = "0.5.0";
            src = fetchHex {
              pkg = "graphvix";
              version = "0.5.0";
              sha256 =
                "b000d53297e2fadf6d37cc392d22d71dbbbce7ddd23736e7673753e1d7157ce8";
            };

            meta = {
              description = ''Graphviz in Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mikowitz/graphvix";
            };
          } // packageOverrides)
      ) {};

    graphvix = graphvix_0_5_0;

    grapple_1_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          gen_stage_0_12_0,
          graphql_0_3_2,
          httpoison_0_9_2
        }:
          buildMix ({
            name = "grapple";
            version = "1.2.0";
            src = fetchHex {
              pkg = "grapple";
              version = "1.2.0";
              sha256 =
                "a3adcb2714e0306818ad323b19b3c5d4d08ca16d2b3eb3ae82de2ce721a8c0b0";
            };
            beamDeps  = [ gen_stage_0_12_0 graphql_0_3_2 httpoison_0_9_2 ];

            meta = {
              description = ''Webhook magic in Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/camirmas/grapple";
            };
          } // packageOverrides)
      ) {};

    grapple = grapple_1_2_0;

    gravatar_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gravatar";
            version = "0.1.0";
            src = fetchHex {
              pkg = "gravatar";
              version = "0.1.0";
              sha256 =
                "4fab4a0313312d4319496662b55f25d3aabaa740ef3d084456425db8c9bdb4fd";
            };

            meta = {
              description = ''Gravatar URLs generator'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pilu/gravatar";
            };
          } // packageOverrides)
      ) {};

    gravatar = gravatar_0_1_0;

    gravatarify_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gravatarify";
            version = "0.1.0";
            src = fetchHex {
              pkg = "gravatarify";
              version = "0.1.0";
              sha256 =
                "d11f416611ed802d72e57f649c74f17c6dbf0e751da87e355cbfd14d4047d17e";
            };

            meta = {
              description = ''Gravatar images with an ease'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/shiroyasha/gravatarify";
            };
          } // packageOverrides)
      ) {};

    gravatarify = gravatarify_0_1_0;

    gravity_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gravity";
            version = "1.0.0";
            src = fetchHex {
              pkg = "gravity";
              version = "1.0.0";
              sha256 =
                "402422079e4dda7da7c8edc8df1dac8a4db6f6b0125b3caa432d01c4f8e38c04";
            };

            meta = {
              description = ''Elixir client for the Gravatar API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/yosriady/gravity";
            };
          } // packageOverrides)
      ) {};

    gravity = gravity_1_0_0;

    gray_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gray";
            version = "0.0.2";
            src = fetchHex {
              pkg = "gray";
              version = "0.0.2";
              sha256 =
                "95b071e0742ed10298c5d0ff027aec3eaadf3a807ed5e88bd4d2861a5220be62";
            };

            meta = {
              longDescription = ''Package to help you operate with [gray codes]
                                (https://en.wikipedia.org/wiki/Gray_code)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hashd/gray";
            };
          } // packageOverrides)
      ) {};

    gray = gray_0_0_2;

    greenhouse_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exjsx_3_2_1,
          httpoison_0_11_2,
          timex_3_0_5
        }:
          buildMix ({
            name = "greenhouse";
            version = "0.0.1";
            src = fetchHex {
              pkg = "greenhouse";
              version = "0.0.1";
              sha256 =
                "7b32075492339d6ef03572891287689d48d938f36e19601433f47b4ad2f75b5d";
            };
            beamDeps  = [ exjsx_3_2_1 httpoison_0_11_2 timex_3_0_5 ];

            meta = {
              description = ''Elixir library for access the Greenhouse Harvest
                            API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jeffweiss/greenhouse";
            };
          } // packageOverrides)
      ) {};

    greenhouse = greenhouse_0_0_1;

    griffin_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_0_4,
          graphql_0_3_2,
          plug_1_3_5
        }:
          buildMix ({
            name = "griffin";
            version = "0.1.0";
            src = fetchHex {
              pkg = "griffin";
              version = "0.1.0";
              sha256 =
                "cb5f5e8db75da83103d7ae734ad8019fb859975f4434ff64577ff4b33e5b74f6";
            };
            beamDeps  = [ cowboy_1_0_4 graphql_0_3_2 plug_1_3_5 ];

            meta = {
              description = ''A WIP Elixir(script) framework'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/craigspaeth/griffin";
            };
          } // packageOverrides)
      ) {};

    griffin = griffin_0_1_0;

    griffinmbtest_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "griffinmbtest";
            version = "0.1.0";
            src = fetchHex {
              pkg = "griffinmbtest";
              version = "0.1.0";
              sha256 =
                "7debeda0f07d87b3ef014b4bcce7a688ad497c2121b9f98ee119550235bc6a10";
            };

            meta = {
              description = ''Desc'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/GriffinMB";
            };
          } // packageOverrides)
      ) {};

    griffinmbtest = griffinmbtest_0_1_0;

    griffinmbtest1_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "griffinmbtest1";
            version = "0.1.0";
            src = fetchHex {
              pkg = "griffinmbtest1";
              version = "0.1.0";
              sha256 =
                "9854ebb742d294bcc6c969c4ef7034d2a371fca625fefa6142d33fbf88c66d9b";
            };

            meta = {
              description = ''Desc'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/GriffinMB";
            };
          } // packageOverrides)
      ) {};

    griffinmbtest1 = griffinmbtest1_0_1_0;

    griffintest_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "griffintest";
            version = "0.1.1";
            src = fetchHex {
              pkg = "griffintest";
              version = "0.1.1";
              sha256 =
                "e9674334cf6f45dd482a3ed85bc2b9e43c4489d7fb7b16fc09ff9bccf5707524";
            };

            meta = {
              description = ''Desc'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/GriffinMB";
            };
          } // packageOverrides)
      ) {};

    griffintest = griffintest_0_1_1;

    group_manager_0_0_8 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, chatter_0_0_15 }:
          buildMix ({
            name = "group_manager";
            version = "0.0.8";
            src = fetchHex {
              pkg = "group_manager";
              version = "0.0.8";
              sha256 =
                "69d9de842663ed764a8f6792c6a0f5a378e717e302058b9050b4a58be0d14cdf";
            };
            beamDeps  = [ chatter_0_0_15 ];

            meta = {
              longDescription = ''GroupManager is extracted from the ScaleSmall
                                project as a standalone piece. This can be used
                                independently to manage a set of nodes and
                                coordinate a common goal expressed as integer
                                ranges.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dbeck/groupman_ex/";
            };
          } // packageOverrides)
      ) {};

    group_manager = group_manager_0_0_8;

    group_me_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_6_1,
          httpoison_0_9_2,
          plug_1_3_5,
          poison_2_2_0,
          socket_0_3_12,
          uuid_1_1_7
        }:
          buildMix ({
            name = "group_me";
            version = "0.1.1";
            src = fetchHex {
              pkg = "group_me";
              version = "0.1.1";
              sha256 =
                "5cf3472c25d9a98b84fc59c61b34c35ea7cd3fc570b54520a4acb845873d0fea";
            };
            beamDeps  = [
                          hackney_1_6_1
                          httpoison_0_9_2
                          plug_1_3_5
                          poison_2_2_0
                          socket_0_3_12
                          uuid_1_1_7
                        ];

            meta = {
              description = ''A library for interacting with the GroupMe
                            API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dustinsmith1024/group_me";
            };
          } // packageOverrides)
      ) {};

    group_me = group_me_0_1_1;

    grovepi_0_4_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, elixir_ale_1_0_0 }:
          buildMix ({
            name = "grovepi";
            version = "0.4.0";
            src = fetchHex {
              pkg = "grovepi";
              version = "0.4.0";
              sha256 =
                "5958d3f79e226761f3321986cc41c17275ac91f0811ed1e175bdb8759d538169";
            };
            beamDeps  = [ elixir_ale_1_0_0 ];

            meta = {
              description = ''Use Dexter Industries` GrovePi+ and GrovePiZero
                            boards and many Grove sensors.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/fhunleth/grovepi";
            };
          } // packageOverrides)
      ) {};

    grovepi = grovepi_0_4_0;

    growl_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "growl";
            version = "0.0.2";
            src = fetchHex {
              pkg = "growl";
              version = "0.0.2";
              sha256 =
                "0b43fba8d18349b5bd507b457016298cfafea4a50831e8ce944569b45d3bceb8";
            };

            meta = {
              longDescription = ''# Growl A simple wrapper to the command line
                                interface for the [Growl OSX notification
                                system](http://growl.info/). ## Setup ```Elixir
                                defp deps do [ {:growl, github:
                                \"zhallett/growl\"} ] ``` ## Usage Within the
                                script you would like to create a `growl`
                                notification, make the module call as follows:
                                ```Elixir Growl.notify(\"This is a
                                notification\") ``` The API accepts messages in
                                a string format, as well as a list. If the first
                                argument is a list, the first object is the
                                title line, with subsequent lines being the body
                                of the notification. ```Elixir
                                Growl.notify([\"Example\", \"This is an example
                                notification\"]) ``` would give the following
                                notification: ![Forced
                                Update](https://github.com/zhallett/growl/blob/master/multi_line_notification.png?raw=true
                                \"Multi-Line notification Screenshot\")) ##
                                Contributing 1. Fork it 2. Create your feature
                                branch (`git checkout -b my-new-feature`) 3.
                                Commit your changes (`git commit -am `Add some
                                feature``) 4. Push to the branch (`git push
                                origin my-new-feature`) 5. Create new Pull
                                Request '';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/zhallett/growl";
            };
          } // packageOverrides)
      ) {};

    growl = growl_0_0_2;

    gtfs_0_3_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, csv_1_4_4 }:
          buildMix ({
            name = "gtfs";
            version = "0.3.1";
            src = fetchHex {
              pkg = "gtfs";
              version = "0.3.1";
              sha256 =
                "9a4fede279aa81a016f57e8569611c6a0f79b409c699ff04e2ca60a782e9b497";
            };
            beamDeps  = [ csv_1_4_4 ];

            meta = {
              description = ''A library for parsing a GTFS folder into a
                            hierarchy of structured data'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bhelx/gtfs";
            };
          } // packageOverrides)
      ) {};

    gtfs = gtfs_0_3_1;

    gtin_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gtin";
            version = "0.1.0";
            src = fetchHex {
              pkg = "gtin";
              version = "0.1.0";
              sha256 =
                "b3112d92e1defe64aa6823b61227e12e2a6eb9bfd59ade1d1b4e48752c6c1a95";
            };

            meta = {
              description = ''Elixir datatype and common functions for Global
                            Trade Item Numbers (GTIN).'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dreuter/elixir-gtin";
            };
          } // packageOverrides)
      ) {};

    gtin = gtin_0_1_0;

    gtin_testdb_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gtin_testdb";
            version = "0.1.0";
            src = fetchHex {
              pkg = "gtin_testdb";
              version = "0.1.0";
              sha256 =
                "744190b5c286e52070b43f8302f283f5d93ed8414ba2e5f41189aa4a80ac527b";
            };

            meta = {
              description = ''A small database of GTIN (EAN-13, EAN-8, ISBN)
                            samples.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dreuter/elixir-gtin";
            };
          } // packageOverrides)
      ) {};

    gtin_testdb = gtin_testdb_0_1_0;

    guardian_0_10_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          jose_1_8_4,
          plug_1_3_5,
          poison_1_5_2,
          uuid_1_1_7
        }:
          buildMix ({
            name = "guardian";
            version = "0.10.1";
            src = fetchHex {
              pkg = "guardian";
              version = "0.10.1";
              sha256 =
                "741aaa989ab656317a247d1db4dcd8e3efbd840b4d451bed7a37504ffdba6dc9";
            };
            beamDeps  = [ jose_1_8_4 plug_1_3_5 poison_1_5_2 uuid_1_1_7 ];

            meta = {
              description = ''Elixir Authentication framework'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ueberauth/guardian";
            };
          } // packageOverrides)
      ) {};

    guardian_0_14_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          jose_1_8_4,
          phoenix_1_3_0_rc_2,
          plug_1_3_5,
          poison_3_1_0,
          uuid_1_1_7
        }:
          buildMix ({
            name = "guardian";
            version = "0.14.4";
            src = fetchHex {
              pkg = "guardian";
              version = "0.14.4";
              sha256 =
                "139195ae7f7637f487fede955af086424dc518b1befcbe7d04ff7f3d946ae9cf";
            };
            beamDeps  = [
                          jose_1_8_4
                          phoenix_1_3_0_rc_2
                          plug_1_3_5
                          poison_3_1_0
                          uuid_1_1_7
                        ];

            meta = {
              description = ''Elixir Authentication framework'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ueberauth/guardian";
            };
          } // packageOverrides)
      ) {};

    guardian = guardian_0_14_4;

    guardian_0_9_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          jose_1_8_4,
          plug_1_3_5,
          poison_1_5_2,
          uuid_1_1_7
        }:
          buildMix ({
            name = "guardian";
            version = "0.9.1";
            src = fetchHex {
              pkg = "guardian";
              version = "0.9.1";
              sha256 =
                "9a79ae386f777774ab2910007cd30b20e2ea8da51c0712ec07f8cc8a13dfe293";
            };
            beamDeps  = [ jose_1_8_4 plug_1_3_5 poison_1_5_2 uuid_1_1_7 ];

            meta = {
              description = ''Elixir Authentication framework'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ueberauth/guardian";
            };
          } // packageOverrides)
      ) {};

    guardian_db_0_8_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_4,
          guardian_0_14_4,
          postgrex_1_0_0_rc_1
        }:
          buildMix ({
            name = "guardian_db";
            version = "0.8.0";
            src = fetchHex {
              pkg = "guardian_db";
              version = "0.8.0";
              sha256 =
                "7dfab4a9bdb911959488d7dfb221f230c4540d6cd01e8bef067891ef67ba1b8f";
            };
            beamDeps  = [ ecto_2_1_4 guardian_0_14_4 postgrex_1_0_0_rc_1 ];

            meta = {
              description = ''DB tracking for token validity'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hassox/guardian_db";
            };
          } // packageOverrides)
      ) {};

    guardian_db = guardian_db_0_8_0;

    guardsafe_0_5_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "guardsafe";
            version = "0.5.1";
            src = fetchHex {
              pkg = "guardsafe";
              version = "0.5.1";
              sha256 =
                "20ef887c5db75ab6aabc2558c23e8b423990653b04de13c07cd52520d5ac9032";
            };

            meta = {
              description = ''Macros expanding into code that can be safely
                            used in guard clauses.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/DevL/guardsafe";
            };
          } // packageOverrides)
      ) {};

    guardsafe = guardsafe_0_5_1;

    gun_1_0_0_pre_1 = callPackage
      (
        {
          buildErlangMk,
          packageOverrides ? {},
          fetchHex,
          cowlib_1_3_0,
          ranch_1_1_0
        }:
          buildErlangMk ({
            name = "gun";
            version = "1.0.0-pre.1";
            src = fetchHex {
              pkg = "gun";
              version = "1.0.0-pre.1";
              sha256 =
                "53aca19e83b15127aa4e299435823b367d5ba6797852984af6c2b9b493be9d56";
            };
            beamDeps  = [ cowlib_1_3_0 ranch_1_1_0 ];

            meta = {
              description = ''HTTP/1.1, HTTP/2 and Websocket client for
                            Erlang/OTP.'';
              license = stdenv.lib.licenses.isc;
            };
          } // packageOverrides)
      ) {};

    gun_1_0_0_pre_2 = callPackage
      (
        {
          buildErlangMk,
          packageOverrides ? {},
          fetchHex,
          cowlib_1_3_0,
          ranch_1_3_2
        }:
          buildErlangMk ({
            name = "gun";
            version = "1.0.0-pre.2";
            src = fetchHex {
              pkg = "gun";
              version = "1.0.0-pre.2";
              sha256 =
                "d0ffc21b381ff36ce10d71a16fc4f676a56b9457c314068e8a8537f1d96071b0";
            };
            beamDeps  = [ cowlib_1_3_0 ranch_1_3_2 ];

            meta = {
              description = ''HTTP/1.1, HTTP/2 and Websocket client for
                            Erlang/OTP.'';
              license = stdenv.lib.licenses.isc;
            };
          } // packageOverrides)
      ) {};

    gun = gun_1_0_0_pre_2;

    gungnir_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "gungnir";
            version = "0.1.0";
            src = fetchHex {
              pkg = "gungnir";
              version = "0.1.0";
              sha256 =
                "eac7c5c9974aae592de967a586e9d8934ee718fd66fd60618f0415d6ca7c933f";
            };

            meta = {
              description = ''Gives some useful functions. The idea is based on
                            Ruby on Rails` Active Support.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kenta-s/gungnir";
            };
          } // packageOverrides)
      ) {};

    gungnir = gungnir_0_1_0;

    guri_0_2_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_8_3,
          poison_1_5_2,
          websocket_client_1_2_1
        }:
          buildMix ({
            name = "guri";
            version = "0.2.1";
            src = fetchHex {
              pkg = "guri";
              version = "0.2.1";
              sha256 =
                "7fa0f2ebff111c368895798041d982f00eec34589d93f10bb323bb5a09e1f888";
            };
            beamDeps  = [ httpoison_0_8_3 poison_1_5_2 websocket_client_1_2_1
                      ];

            meta = {
              description = ''Automate tasks and keep everyone in the loop with
                            Guri'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/elvio/guri";
            };
          } // packageOverrides)
      ) {};

    guri = guri_0_2_1;

    gurka_0_1_8 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "gurka";
            version = "0.1.8";
            src = fetchHex {
              pkg = "gurka";
              version = "0.1.8";
              sha256 =
                "15d8eedd8ea18f61df3c934b430f94482b2a436a9dd9e2f32b936ef6480cc00a";
            };

            meta = {
              description = ''Erlang implementation of Cucumber'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    gurka = gurka_0_1_8;

    gutenex_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, imagineer_0_3_0 }:
          buildMix ({
            name = "gutenex";
            version = "0.2.0";
            src = fetchHex {
              pkg = "gutenex";
              version = "0.2.0";
              sha256 =
                "5c8ab30570d7ddcd6cdb2eeaf1d3eba4db83f6ef955f4030f05cf476cbce79fa";
            };
            beamDeps  = [ imagineer_0_3_0 ];

            meta = {
              description = ''PDF Generation in Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/SenecaSystems/gutenex";
            };
          } // packageOverrides)
      ) {};

    gutenex = gutenex_0_2_0;

    hackney_1_3_0 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          idna_5_0_1,
          ssl_verify_hostname_1_0_6
        }:
          buildRebar3 ({
            name = "hackney";
            version = "1.3.0";
            src = fetchHex {
              pkg = "hackney";
              version = "1.3.0";
              sha256 =
                "900db54f233b822651a1b3a86edb323c8acd1eb8895701d4a98776e2e5a02d7e";
            };

            beamDeps  = [ idna_5_0_1 ssl_verify_hostname_1_0_6 ];

            meta = {
              description = ''simple HTTP client'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/benoitc/hackney";
            };
          } // packageOverrides)
      ) {};

    hackney_1_3_1 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          idna_5_0_1,
          ssl_verify_hostname_1_0_6
        }:
          buildRebar3 ({
            name = "hackney";
            version = "1.3.1";
            src = fetchHex {
              pkg = "hackney";
              version = "1.3.1";
              sha256 =
                "1a6316daceae744758fc88f2961e68c5a8b6cf1e1f49a28fc2caea6d27581add";
            };

            beamDeps  = [ idna_5_0_1 ssl_verify_hostname_1_0_6 ];

            meta = {
              description = ''simple HTTP client'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/benoitc/hackney";
            };
          } // packageOverrides)
      ) {};

    hackney_1_3_2 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          idna_5_0_1,
          ssl_verify_hostname_1_0_6
        }:
          buildRebar3 ({
            name = "hackney";
            version = "1.3.2";
            src = fetchHex {
              pkg = "hackney";
              version = "1.3.2";
              sha256 =
                "9b811cff637b29f9c7e2c61abf01986c85cd4f64a9422315fd803993b4e82615";
            };

            beamDeps  = [ idna_5_0_1 ssl_verify_hostname_1_0_6 ];

            meta = {
              description = ''simple HTTP client'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/benoitc/hackney";
            };
          } // packageOverrides)
      ) {};

    hackney_1_4_10 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          certifi_0_3_0,
          idna_1_1_0,
          mimerl_1_0_2,
          ssl_verify_hostname_1_0_5
        }:
          buildRebar3 ({
            name = "hackney";
            version = "1.4.10";
            src = fetchHex {
              pkg = "hackney";
              version = "1.4.10";
              sha256 =
                "dbdda6c342984ab0f35c5099dfab4b419a77771d096089a9173bf11ab6a0f7bf";
            };

            beamDeps  = [
                          certifi_0_3_0
                          idna_1_1_0
                          mimerl_1_0_2
                          ssl_verify_hostname_1_0_5
                        ];

            meta = {
              description = ''simple HTTP client'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/benoitc/hackney";
            };
          } // packageOverrides)
      ) {};

    hackney_1_4_4 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          certifi_0_1_1,
          idna_1_0_2,
          mimerl_1_0_0,
          ssl_verify_hostname_1_0_5
        }:
          buildRebar3 ({
            name = "hackney";
            version = "1.4.4";
            src = fetchHex {
              pkg = "hackney";
              version = "1.4.4";
              sha256 =
                "c8ab2436556d6bce7e85a85adec67f6abeb8c7508668a3e29750be3c4bf4e3a8";
            };

            beamDeps  = [
                          certifi_0_1_1
                          idna_1_0_2
                          mimerl_1_0_0
                          ssl_verify_hostname_1_0_5
                        ];

            meta = {
              description = ''simple HTTP client'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/benoitc/hackney";
            };
          } // packageOverrides)
      ) {};

    hackney_1_4_8 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          certifi_0_3_0,
          idna_1_0_3,
          mimerl_1_0_2,
          ssl_verify_hostname_1_0_5
        }:
          buildRebar3 ({
            name = "hackney";
            version = "1.4.8";
            src = fetchHex {
              pkg = "hackney";
              version = "1.4.8";
              sha256 =
                "7c212741163cec1cf38ad845bd71efafcbf81365cf754c978b354c6375dc4da2";
            };

            beamDeps  = [
                          certifi_0_3_0
                          idna_1_0_3
                          mimerl_1_0_2
                          ssl_verify_hostname_1_0_5
                        ];

            meta = {
              description = ''simple HTTP client'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/benoitc/hackney";
            };
          } // packageOverrides)
      ) {};

    hackney_1_6_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          certifi_0_4_0,
          idna_1_2_0,
          metrics_1_0_1,
          mimerl_1_0_2,
          ssl_verify_fun_1_1_0
        }:
          buildMix ({
            name = "hackney";
            version = "1.6.0";
            src = fetchHex {
              pkg = "hackney";
              version = "1.6.0";
              sha256 =
                "8b517f17c794ab611815042d24e149daafbd898d63aac8baf6750b890261c716";
            };
            beamDeps  = [
                          certifi_0_4_0
                          idna_1_2_0
                          metrics_1_0_1
                          mimerl_1_0_2
                          ssl_verify_fun_1_1_0
                        ];

            meta = {
              description = ''simple HTTP client'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/benoitc/hackney";
            };
          } // packageOverrides)
      ) {};

    hackney_1_6_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          certifi_0_4_0,
          idna_1_2_0,
          metrics_1_0_1,
          mimerl_1_0_2,
          ssl_verify_fun_1_1_0
        }:
          buildMix ({
            name = "hackney";
            version = "1.6.1";
            src = fetchHex {
              pkg = "hackney";
              version = "1.6.1";
              sha256 =
                "bf0cf3f8a4bb588b14d20613a888c786655b2eb20255e328dd33f129b2d5b184";
            };
            beamDeps  = [
                          certifi_0_4_0
                          idna_1_2_0
                          metrics_1_0_1
                          mimerl_1_0_2
                          ssl_verify_fun_1_1_0
                        ];

            meta = {
              description = ''simple HTTP client'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/benoitc/hackney";
            };
          } // packageOverrides)
      ) {};

    hackney_1_6_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          certifi_0_7_0,
          idna_1_2_0,
          metrics_1_0_1,
          mimerl_1_0_2,
          ssl_verify_fun_1_1_1
        }:
          buildMix ({
            name = "hackney";
            version = "1.6.3";
            src = fetchHex {
              pkg = "hackney";
              version = "1.6.3";
              sha256 =
                "b2c483bc28ca6fd02b15a23e98156757b7de0dc1863427b058f46f1ad6c5cc4c";
            };
            beamDeps  = [
                          certifi_0_7_0
                          idna_1_2_0
                          metrics_1_0_1
                          mimerl_1_0_2
                          ssl_verify_fun_1_1_1
                        ];

            meta = {
              description = ''simple HTTP client'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/benoitc/hackney";
            };
          } // packageOverrides)
      ) {};

    hackney_1_6_5 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          certifi_0_7_0,
          idna_1_2_0,
          metrics_1_0_1,
          mimerl_1_0_2,
          ssl_verify_fun_1_1_1
        }:
          buildRebar3 ({
            name = "hackney";
            version = "1.6.5";
            src = fetchHex {
              pkg = "hackney";
              version = "1.6.5";
              sha256 =
                "0a9f657b4af1f45c77eed9053a091c5cf5d249ea77029a35a44c02ae5d85096f";
            };

            beamDeps  = [
                          certifi_0_7_0
                          idna_1_2_0
                          metrics_1_0_1
                          mimerl_1_0_2
                          ssl_verify_fun_1_1_1
                        ];

            meta = {
              description = ''simple HTTP client'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/benoitc/hackney";
            };
          } // packageOverrides)
      ) {};

    hackney_1_6_6 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          certifi_1_0_0,
          idna_4_0_0,
          metrics_1_0_1,
          mimerl_1_0_2,
          ssl_verify_fun_1_1_1
        }:
          buildRebar3 ({
            name = "hackney";
            version = "1.6.6";
            src = fetchHex {
              pkg = "hackney";
              version = "1.6.6";
              sha256 =
                "6c8293db002ecd6f6126f1048fe6c11f89404f8b2fcdd43343e2a7267db87d7b";
            };

            beamDeps  = [
                          certifi_1_0_0
                          idna_4_0_0
                          metrics_1_0_1
                          mimerl_1_0_2
                          ssl_verify_fun_1_1_1
                        ];

            meta = {
              description = ''simple HTTP client'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/benoitc/hackney";
            };
          } // packageOverrides)
      ) {};

    hackney_1_7_1 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          certifi_1_0_0,
          idna_4_0_0,
          metrics_1_0_1,
          mimerl_1_0_2,
          ssl_verify_fun_1_1_1
        }:
          buildRebar3 ({
            name = "hackney";
            version = "1.7.1";
            src = fetchHex {
              pkg = "hackney";
              version = "1.7.1";
              sha256 =
                "ec8309cb6d42251513492ef683d212c614d78b20594e5f4d89a05d8411dd0dea";
            };

            beamDeps  = [
                          certifi_1_0_0
                          idna_4_0_0
                          metrics_1_0_1
                          mimerl_1_0_2
                          ssl_verify_fun_1_1_1
                        ];

            meta = {
              description = ''simple HTTP client'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/benoitc/hackney";
            };
          } // packageOverrides)
      ) {};

    hackney_1_8_0 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          certifi_1_1_0,
          idna_4_0_0,
          metrics_1_0_1,
          mimerl_1_0_2,
          ssl_verify_fun_1_1_1
        }:
          buildRebar3 ({
            name = "hackney";
            version = "1.8.0";
            src = fetchHex {
              pkg = "hackney";
              version = "1.8.0";
              sha256 =
                "0cb8724402a04397003ad5daaef663698c9448ce312a1f3ba911b89109bfe168";
            };

            beamDeps  = [
                          certifi_1_1_0
                          idna_4_0_0
                          metrics_1_0_1
                          mimerl_1_0_2
                          ssl_verify_fun_1_1_1
                        ];

            meta = {
              description = ''simple HTTP client'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/benoitc/hackney";
            };
          } // packageOverrides)
      ) {};

    hackney_1_8_6 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          certifi_1_2_1,
          idna_5_0_2,
          metrics_1_0_1,
          mimerl_1_0_2,
          ssl_verify_fun_1_1_1
        }:
          buildRebar3 ({
            name = "hackney";
            version = "1.8.6";
            src = fetchHex {
              pkg = "hackney";
              version = "1.8.6";
              sha256 =
                "677281a6eae416f4ca7980c8dfd1ee85c7cf445ed932c5d7f7909946d1cac37a";
            };

            beamDeps  = [
                          certifi_1_2_1
                          idna_5_0_2
                          metrics_1_0_1
                          mimerl_1_0_2
                          ssl_verify_fun_1_1_1
                        ];

            meta = {
              description = ''simple HTTP client'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/benoitc/hackney";
            };
          } // packageOverrides)
      ) {};

    hackney = hackney_1_8_6;

    haiku_0_3_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "haiku";
            version = "0.3.1";
            src = fetchHex {
              pkg = "haiku";
              version = "0.3.1";
              sha256 =
                "accf418f42835901a582d40a05bb1efab18cdd47ab53e97a1ab04a0cf820333e";
            };

            meta = {
              longDescription = ''Generates memorable names similar to Xaddress
                                or Heroku. Supports custom words, custom
                                delimiters, and custom reducer functions.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/yosriady/haiku";
            };
          } // packageOverrides)
      ) {};

    haiku = haiku_0_3_1;

    haikunator_1_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "haikunator";
            version = "1.1.0";
            src = fetchHex {
              pkg = "haikunator";
              version = "1.1.0";
              sha256 =
                "163adc1300003f1506a9f1d1cf9c61d2bac3c15bc06bd29da3d54e0603d1ba1e";
            };

            meta = {
              longDescription = ''Generate Heroku-like memorable random names
                                to use in your apps or anywhere else.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/knrz/Haikunator";
            };
          } // packageOverrides)
      ) {};

    haikunator = haikunator_1_1_0;

    hairnet_1_0_0 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, base64url_0_0_1
        }:
          buildRebar3 ({
            name = "hairnet";
            version = "1.0.0";
            src = fetchHex {
              pkg = "hairnet";
              version = "1.0.0";
              sha256 =
                "b3f15cdb7d9e6183a5cde401ded684c88cc2ea09dca75facf82b5281f4596606";
            };

            beamDeps  = [ base64url_0_0_1 ];

            meta = {
              description = ''An Erlang library wrapping AES-GCM (AEAD) crypto
                            in a Fernet-like interface'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/ferd/hairnet/";
            };
          } // packageOverrides)
      ) {};

    hairnet = hairnet_1_0_0;

    hamcrest_0_1_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "hamcrest";
            version = "0.1.3";
            src = fetchHex {
              pkg = "hamcrest";
              version = "0.1.3";
              sha256 =
                "cc91c4d87a84e386dcac8f3aafb0e28f80ba3cef0b0ce006f11284e35b5ff08d";
            };

            meta = {
              description = ''Erlang port of Hamcrest'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/hyperthunk/hamcrest-erlang";
            };
          } // packageOverrides)
      ) {};

    hamcrest = hamcrest_0_1_3;

    haphazard_0_4_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, plug_1_3_5 }:
          buildMix ({
            name = "haphazard";
            version = "0.4.0";
            src = fetchHex {
              pkg = "haphazard";
              version = "0.4.0";
              sha256 =
                "f42c985963ca96efad33808026a5fafbfc71688b8969b20f5d0af0c19b43b07a";
            };
            beamDeps  = [ plug_1_3_5 ];

            meta = {
              description = ''A configurable plug for caching.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/digitalnatives/haphazard";
            };
          } // packageOverrides)
      ) {};

    haphazard = haphazard_0_4_0;

    happy_1_3_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "happy";
            version = "1.3.1";
            src = fetchHex {
              pkg = "happy";
              version = "1.3.1";
              sha256 =
                "cab2736d0bea4d3d7363d03f9d01a484d7fc4c190b5bb7172f97123b64338398";
            };

            meta = {
              longDescription = ''Happy path programming in elixir. Alternative
                                to ok_jose, elixir`s 1.2 `with` keyword and that
                                kind of stuff.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/vic/happy";
            };
          } // packageOverrides)
      ) {};

    happy = happy_1_3_1;

    happy_with_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "happy_with";
            version = "1.0.0";
            src = fetchHex {
              pkg = "happy_with";
              version = "1.0.0";
              sha256 =
                "19db11818cdee01f63a09a65fc5c395652203ef3b0d8491796b304d5c64c49d7";
            };

            meta = {
              longDescription = ''Tiny syntax sugar around Elixir`s `with`
                                special form. Dont use commas around with
                                expressions.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/vic/happy_with";
            };
          } // packageOverrides)
      ) {};

    happy_with = happy_with_1_0_0;

    harakiri_1_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "harakiri";
            version = "1.1.1";
            src = fetchHex {
              pkg = "harakiri";
              version = "1.1.1";
              sha256 =
                "d36622e89d63c87e00e8001dc7d0230e82221a2ab771429d523ef14e0c934879";
            };

            meta = {
              description = ''Help applications do things to themselves.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rubencaro/harakiri";
            };
          } // packageOverrides)
      ) {};

    harakiri = harakiri_1_1_1;

    hare_0_1_9 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          amqp19_0_1_5,
          connection_1_0_4
        }:
          buildMix ({
            name = "hare";
            version = "0.1.9";
            src = fetchHex {
              pkg = "hare";
              version = "0.1.9";
              sha256 =
                "20bdfb1246cc8e633d7784088f194807df6e60c602038a8b3b63c328ebddd305";
            };
            beamDeps  = [ amqp19_0_1_5 connection_1_0_4 ];

            meta = {
              description = ''Some abstractions to interact with a AMQP
                            broker'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/jcabotc/hare";
            };
          } // packageOverrides)
      ) {};

    hare = hare_0_1_9;

    harmonex_0_4_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "harmonex";
            version = "0.4.0";
            src = fetchHex {
              pkg = "harmonex";
              version = "0.4.0";
              sha256 =
                "74d8379af26677d411162669cc9dc00db176ae7ce011467cda0daf8adc668001";
            };

            meta = {
              description = ''A collection of tools for music theory —
                            pronounced “harmonics”'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/njonsson/harmonex";
            };
          } // packageOverrides)
      ) {};

    harmonex = harmonex_0_4_0;

    harnais_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "harnais";
            version = "0.2.0";
            src = fetchHex {
              pkg = "harnais";
              version = "0.2.0";
              sha256 =
                "e288cc275c076ab00393f7b84ebcd7a4b094b292403dc039ff16c02cf0408b12";
            };

            meta = {
              description = ''harnais: A harness for testing Elixir code.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ianrumford/harnais";
            };
          } // packageOverrides)
      ) {};

    harnais = harnais_0_2_0;

    harvest_0_0_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "harvest";
            version = "0.0.3";
            src = fetchHex {
              pkg = "harvest";
              version = "0.0.3";
              sha256 =
                "a9b52f37959a97e876603da5a34a0683e9e4a8e534fb7c672175602768fc812a";
            };
            beamDeps  = [ httpoison_0_11_2 poison_2_2_0 ];

            meta = {
              description = ''Harvest Time Tracking API wrapper written in
                            Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/luishurtado/harvest";
            };
          } // packageOverrides)
      ) {};

    harvest = harvest_0_0_3;

    hash_n_cache_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "hash_n_cache";
            version = "0.0.2";
            src = fetchHex {
              pkg = "hash_n_cache";
              version = "0.0.2";
              sha256 =
                "3cd95f04cd6017894b1829307e568a72a3d42c6b70379c37b86c80ab0a6f68ec";
            };

            meta = {
              longDescription = ''A simple utility to hash an erlang term, and
                                cache the term in ETS with the hash as the key
                                and the term as the value.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/elbow-jason/hash_n_cache";
            };
          } // packageOverrides)
      ) {};

    hash_n_cache = hash_n_cache_0_0_2;

    hash_ring_0_4_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "hash_ring";
            version = "0.4.0";
            src = fetchHex {
              pkg = "hash_ring";
              version = "0.4.0";
              sha256 =
                "97f7b4252e660ae3c66fd163277267d3445cfea097342027fe6cc3512fdafd16";
            };

            meta = {
              description = ''Consistent Hash Ring'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sile/hash_ring";
            };
          } // packageOverrides)
      ) {};

    hash_ring = hash_ring_0_4_0;

    hash_ring_ex_1_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "hash_ring_ex";
            version = "1.1.2";
            src = fetchHex {
              pkg = "hash_ring_ex";
              version = "1.1.2";
              sha256 =
                "f33c2f7cc134d9ab1b91d961395b3a2b4d3d47b12b16c4e9d964bc3b57b7d573";
            };

            meta = {
              description = ''A consistent hash-ring implemention for Elixir.
                            '';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/reset/hash-ring-ex";
            };
          } // packageOverrides)
      ) {};

    hash_ring_ex = hash_ring_ex_1_1_2;

    hasher_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "hasher";
            version = "0.1.0";
            src = fetchHex {
              pkg = "hasher";
              version = "0.1.0";
              sha256 =
                "cca07878463c65204105e4eecf3bc0c19fb4e0e65ed75b72343945e720548b46";
            };

            meta = {
              description = ''Provides absolutely simple password hashing
                            functions (pure Elixir)'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/eugzol/hasher";
            };
          } // packageOverrides)
      ) {};

    hasher = hasher_0_1_0;

    hashfs_0_4_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, uuid_1_1_7 }:
          buildMix ({
            name = "hashfs";
            version = "0.4.0";
            src = fetchHex {
              pkg = "hashfs";
              version = "0.4.0";
              sha256 =
                "ee5854aaae7405b7050a2876243c057253644794694bac9cedec7491d6efcdfa";
            };
            beamDeps  = [ uuid_1_1_7 ];

            meta = {
              description = ''A simple content-addressable file system'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/PaperDB/elixir-hashfs";
            };
          } // packageOverrides)
      ) {};

    hashfs = hashfs_0_4_0;

    hashids_2_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "hashids";
            version = "2.0.3";
            src = fetchHex {
              pkg = "hashids";
              version = "2.0.3";
              sha256 =
                "cbe7df3322dc9059e0b454ea09f1e3037235ec934ab57badb13e2ce09c1e5982";
            };

            meta = {
              description = ''Hashids lets you obfuscate numerical identifiers
                            via reversible mapping.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/alco/hashids-elixir";
            };
          } // packageOverrides)
      ) {};

    hashids = hashids_2_0_3;

    hashids_erlang_1_0_5 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "hashids_erlang";
            version = "1.0.5";
            src = fetchHex {
              pkg = "hashids_erlang";
              version = "1.0.5";
              sha256 =
                "a3d25663443994fd6591c5e63e791a3774283fd992ef92e3072eaf0a7909dada";
            };

            meta = {
              description = ''Hashids for erlang'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/snaiper80/hashids-erlang";
            };
          } // packageOverrides)
      ) {};

    hashids_erlang = hashids_erlang_1_0_5;

    hashpipe_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "hashpipe";
            version = "0.1.0";
            src = fetchHex {
              pkg = "hashpipe";
              version = "0.1.0";
              sha256 =
                "c07c37a89635097b921d4180f1f225913f552c60a5e1b784f273307746291644";
            };

            meta = {
              description = ''Minimalist testing and code documentation tool
                            for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dbatori/hashpipe";
            };
          } // packageOverrides)
      ) {};

    hashpipe = hashpipe_0_1_0;

    having_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "having";
            version = "0.1.0";
            src = fetchHex {
              pkg = "having";
              version = "0.1.0";
              sha256 =
                "307e3471463fb437e42aa1384e0c20e2c18a42ba2f2ddc95a066f5da5965fd23";
            };

            meta = {
              description = ''Haskell like `where` sugar for Elixir. A
                            pipe-able `with` special form.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/vic/having";
            };
          } // packageOverrides)
      ) {};

    having = having_0_1_0;

    hbasex_0_1_6 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poolboy_1_5_1 }:
          buildMix ({
            name = "hbasex";
            version = "0.1.6";
            src = fetchHex {
              pkg = "hbasex";
              version = "0.1.6";
              sha256 =
                "b1a6dcb372eb8f6062f19c9ee6f41436eb508fa4b2a90be6c501f175ce8adfa9";
            };
            beamDeps  = [ poolboy_1_5_1 ];

            meta = {
              description = ''A HBase driver for Elixir using HBase Rest and
                            Thrift Interface (v2)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/adrienmo/hbasex";
            };
          } // packageOverrides)
      ) {};

    hbasex = hbasex_0_1_6;

    hdr_histogram_0_2_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "hdr_histogram";
            version = "0.2.0";
            src = fetchHex {
              pkg = "hdr_histogram";
              version = "0.2.0";
              sha256 =
                "42b6d038deeb6a6b695f5f18842afef240b2510e433bc08b21c9b3daa99a221e";
            };
            compilePorts = true;
            buildPlugins  = [ pc ];


            meta = {
              description = ''High Dynamic Range Histogram Erlang/OTP
                            library'';
              license = with stdenv.lib.licenses; [ cc0 bsd3 ];
              homepage = "https://github.com/HdrHistogram/hdr_histogram_erl";
            };
          } // packageOverrides)
      ) {};

    hdr_histogram = hdr_histogram_0_2_0;

    heap_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "heap";
            version = "1.0.1";
            src = fetchHex {
              pkg = "heap";
              version = "1.0.1";
              sha256 =
                "e37eea45f14fa0e019620e9061d39cdfcdc906bd58952d34e5ad499e4c52c2af";
            };

            meta = {
              longDescription = ''Small composable Heap implementation. Heaps
                                sort elements at insert time. They`re good for:
                                * Scientific computing * Statistics * Priority
                                queues'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jamesotron/heap";
            };
          } // packageOverrides)
      ) {};

    heap = heap_1_0_1;

    heapq_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "heapq";
            version = "0.0.1";
            src = fetchHex {
              pkg = "heapq";
              version = "0.0.1";
              sha256 =
                "60bc20c109360c6899203f4015fae42c9e5a4f82707f76b064e10d6da135d4fd";
            };

            meta = {
              description = ''A Heap-based Priority Queue Implementation in
                            Elixir.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/takscape/elixir-heapq";
            };
          } // packageOverrides)
      ) {};

    heapq = heapq_0_0_1;

    hedwig_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "hedwig";
            version = "1.0.0";
            src = fetchHex {
              pkg = "hedwig";
              version = "1.0.0";
              sha256 =
                "d5eba976504c251e7ccd40c8b38ae40ebf71ec362b1da3782394870e43c8078d";
            };

            meta = {
              description = ''An adapter-based chat bot framework'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hedwig-im/hedwig";
            };
          } // packageOverrides)
      ) {};

    hedwig = hedwig_1_0_0;

    hedwig_api_ai_0_1_0_beta_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ex_api_ai_0_1_0 }:
          buildMix ({
            name = "hedwig_api_ai";
            version = "0.1.0-beta.0";
            src = fetchHex {
              pkg = "hedwig_api_ai";
              version = "0.1.0-beta.0";
              sha256 =
                "978f47cc88a68c5fe5d8b8f1264577fcbd4ece56f8d23be1f44950b6e51f40c6";
            };
            beamDeps  = [ ex_api_ai_0_1_0 ];

            meta = {
              description = ''Bringing NLU to hedwig with a little help from
                            @api_ai'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/enilsen16/hedwig_api_ai";
            };
          } // packageOverrides)
      ) {};

    hedwig_api_ai = hedwig_api_ai_0_1_0_beta_0;

    hedwig_brain_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, redix_0_6_1 }:
          buildMix ({
            name = "hedwig_brain";
            version = "0.1.0";
            src = fetchHex {
              pkg = "hedwig_brain";
              version = "0.1.0";
              sha256 =
                "a4f4c51210214a1f613a61d75df839d1f30495011317ad187884abdfafa7ea47";
            };
            beamDeps  = [ redix_0_6_1 ];

            meta = {
              longDescription = ''Simple key-value persistence for Hedwig
                                responders, `Hedwig.Brain` stores lists of
                                arbitrary terms under binary keys.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/stevegrossi/hedwig_brain";
            };
          } // packageOverrides)
      ) {};

    hedwig_brain = hedwig_brain_0_1_0;

    hedwig_flowdock_0_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          connection_1_0_4,
          gun_1_0_0_pre_1,
          poison_2_2_0
        }:
          buildMix ({
            name = "hedwig_flowdock";
            version = "0.1.2";
            src = fetchHex {
              pkg = "hedwig_flowdock";
              version = "0.1.2";
              sha256 =
                "f47b1236cfbe86c7012bc428483d772076bc518352b13aec115de1743b1faf97";
            };
            beamDeps  = [ connection_1_0_4 gun_1_0_0_pre_1 poison_2_2_0 ];

            meta = {
              description = ''A Flowdock adapter for Hedwig'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/supernullset/hedwig_flowdock";
            };
          } // packageOverrides)
      ) {};

    hedwig_flowdock = hedwig_flowdock_0_1_2;

    hedwig_giphy_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hedwig_1_0_0,
          httpoison_0_11_2
        }:
          buildMix ({
            name = "hedwig_giphy";
            version = "0.1.0";
            src = fetchHex {
              pkg = "hedwig_giphy";
              version = "0.1.0";
              sha256 =
                "23e069c6f5ef5ba46a5238e3b9ce779ab8f546c5e1556d534f880c3b2b677b02";
            };
            beamDeps  = [ hedwig_1_0_0 httpoison_0_11_2 ];

            meta = {
              description = ''Respond with an appropriate GIF from Giphy.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/stevegrossi/hedwig_giphy";
            };
          } // packageOverrides)
      ) {};

    hedwig_giphy = hedwig_giphy_0_1_0;

    hedwig_github_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hedwig_1_0_0,
          tentacat_0_6_2
        }:
          buildMix ({
            name = "hedwig_github";
            version = "0.1.1";
            src = fetchHex {
              pkg = "hedwig_github";
              version = "0.1.1";
              sha256 =
                "c93a7465f6068fb69aef88ea06e9827da64b4bdc6bdaabb3221727fdb6a4ac49";
            };
            beamDeps  = [ hedwig_1_0_0 tentacat_0_6_2 ];

            meta = {
              description = ''A GitHub responder for Hedwig.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/shotat/hedwig_github";
            };
          } // packageOverrides)
      ) {};

    hedwig_github = hedwig_github_0_1_1;

    hedwig_hipchat_0_9_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hedwig_1_0_0,
          romeo_0_7_0
        }:
          buildMix ({
            name = "hedwig_hipchat";
            version = "0.9.4";
            src = fetchHex {
              pkg = "hedwig_hipchat";
              version = "0.9.4";
              sha256 =
                "4d42f307e1c9fd91a47808476a1c278997c6990a69db41f6ed081b61a69056f4";
            };
            beamDeps  = [ hedwig_1_0_0 romeo_0_7_0 ];

            meta = {
              description = ''A HipChat adapter for Hedwig'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jwarlander/hedwig_hipchat";
            };
          } // packageOverrides)
      ) {};

    hedwig_hipchat = hedwig_hipchat_0_9_4;

    hedwig_irc_0_1_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exirc_0_10_0,
          hedwig_1_0_0
        }:
          buildMix ({
            name = "hedwig_irc";
            version = "0.1.3";
            src = fetchHex {
              pkg = "hedwig_irc";
              version = "0.1.3";
              sha256 =
                "efa515fa99305ba9031f4268861712efca17ac7d8ea16b84a250cd829be32e7a";
            };
            beamDeps  = [ exirc_0_10_0 hedwig_1_0_0 ];

            meta = {
              description = ''An IRC adapter for Hedwig'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jeffweiss/hedwig_irc";
            };
          } // packageOverrides)
      ) {};

    hedwig_irc = hedwig_irc_0_1_3;

    hedwig_messenger_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          hedwig_1_0_0,
          httpoison_0_11_2,
          plug_1_3_5,
          poison_3_1_0
        }:
          buildMix ({
            name = "hedwig_messenger";
            version = "0.1.0";
            src = fetchHex {
              pkg = "hedwig_messenger";
              version = "0.1.0";
              sha256 =
                "9976ed368f5c4a9e456bf594ad4522acfcf864bed5b770674a7ef94bfeaf64dc";
            };
            beamDeps  = [
                          cowboy_1_1_2
                          hedwig_1_0_0
                          httpoison_0_11_2
                          plug_1_3_5
                          poison_3_1_0
                        ];

            meta = {
              description = ''A facebook messenger adapter for hedwig'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/enilsen16/hedwig_messenger";
            };
          } // packageOverrides)
      ) {};

    hedwig_messenger = hedwig_messenger_0_1_0;

    hedwig_mopidy_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hedwig_1_0_0,
          mopidy_0_3_0
        }:
          buildMix ({
            name = "hedwig_mopidy";
            version = "0.0.2";
            src = fetchHex {
              pkg = "hedwig_mopidy";
              version = "0.0.2";
              sha256 =
                "321a17a4687d7d2411e20a12e78255dd7a2f0ac02ce18895a242c3d94f635f2a";
            };
            beamDeps  = [ hedwig_1_0_0 mopidy_0_3_0 ];

            meta = {
              description = ''A Mopidy responder for Hedwig'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/trestrantham/hedwig_mopidy";
            };
          } // packageOverrides)
      ) {};

    hedwig_mopidy = hedwig_mopidy_0_0_2;

    hedwig_simple_responders_0_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          flip_text_0_1_2,
          hedwig_1_0_0,
          httpoison_0_10_0,
          poison_3_1_0,
          timex_3_1_15,
          tzdata_0_5_12
        }:
          buildMix ({
            name = "hedwig_simple_responders";
            version = "0.1.2";
            src = fetchHex {
              pkg = "hedwig_simple_responders";
              version = "0.1.2";
              sha256 =
                "4261c2487897778308dbbd79f36fea4c4121ef1174bc5a178ba6b9c2a0baa47c";
            };
            beamDeps  = [
                          flip_text_0_1_2
                          hedwig_1_0_0
                          httpoison_0_10_0
                          poison_3_1_0
                          timex_3_1_15
                          tzdata_0_5_12
                        ];

            meta = {
              description = ''A collection of simple responders for Hedwig'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/labzero/hedwig_simple_responders";
            };
          } // packageOverrides)
      ) {};

    hedwig_simple_responders = hedwig_simple_responders_0_1_2;

    hedwig_slack_1_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_8_6,
          hedwig_1_0_0,
          poison_3_1_0,
          websocket_client_1_2_1
        }:
          buildMix ({
            name = "hedwig_slack";
            version = "1.0.0";
            src = fetchHex {
              pkg = "hedwig_slack";
              version = "1.0.0";
              sha256 =
                "7aff2e8b2a5117dd88f9e1edb81a71544960af317db8b853666d96bc7f1d1852";
            };
            beamDeps  = [
                          hackney_1_8_6
                          hedwig_1_0_0
                          poison_3_1_0
                          websocket_client_1_2_1
                        ];

            meta = {
              description = ''A Slack adapter for Hedwig'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hedwig-im/hedwig_slack";
            };
          } // packageOverrides)
      ) {};

    hedwig_slack = hedwig_slack_1_0_0;

    hedwig_sms_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          hedwig_1_0_0,
          httpoison_0_8_3,
          plug_1_3_5
        }:
          buildMix ({
            name = "hedwig_sms";
            version = "0.1.0";
            src = fetchHex {
              pkg = "hedwig_sms";
              version = "0.1.0";
              sha256 =
                "8346fa9661b2584d43478b38fe6cf31e171cf5cc411985e69f54a9461402c586";
            };
            beamDeps  = [
                          cowboy_1_1_2 hedwig_1_0_0 httpoison_0_8_3 plug_1_3_5
                        ];

            meta = {
              description = ''A SMS adapter for Hedwig'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bryanjos/hedwig_sms";
            };
          } // packageOverrides)
      ) {};

    hedwig_sms = hedwig_sms_0_1_0;

    hedwig_sonar_0_1_6 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          ex_sonar_1_0_3,
          httpoison_0_11_2,
          plug_1_3_5,
          poison_2_2_0
        }:
          buildMix ({
            name = "hedwig_sonar";
            version = "0.1.6";
            src = fetchHex {
              pkg = "hedwig_sonar";
              version = "0.1.6";
              sha256 =
                "0130059d3a2e801e7a0bb7afa7b18309c25146e72c6dce735c35c618f655f5ca";
            };
            beamDeps  = [
                          cowboy_1_1_2
                          ex_sonar_1_0_3
                          httpoison_0_11_2
                          plug_1_3_5
                          poison_2_2_0
                        ];

            meta = {
              description = ''SendSonar Webhooks + Hedwig'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/enilsen16/hedwig_sonar";
            };
          } // packageOverrides)
      ) {};

    hedwig_sonar = hedwig_sonar_0_1_6;

    hedwig_xmpp_1_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hedwig_1_0_0,
          romeo_0_7_0
        }:
          buildMix ({
            name = "hedwig_xmpp";
            version = "1.0.0";
            src = fetchHex {
              pkg = "hedwig_xmpp";
              version = "1.0.0";
              sha256 =
                "bbacdf89ad245465e98f953b5b590068c44fc7b28808cfbb51118e83b286e723";
            };
            beamDeps  = [ hedwig_1_0_0 romeo_0_7_0 ];

            meta = {
              description = ''An XMPP adapter for Hedwig'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hedwig-im/hedwig_xmpp";
            };
          } // packageOverrides)
      ) {};

    hedwig_xmpp = hedwig_xmpp_1_0_0;

    heimdall_0_5_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_0_4,
          httpoison_0_9_2,
          plug_1_3_5,
          rackla_1_2_1
        }:
          buildMix ({
            name = "heimdall";
            version = "0.5.0";
            src = fetchHex {
              pkg = "heimdall";
              version = "0.5.0";
              sha256 =
                "5079abafbb7cad18c9eba39582fd0b827e761821e4f4c489f5b92a3cc114e826";
            };
            beamDeps  = [
                          cowboy_1_0_4 httpoison_0_9_2 plug_1_3_5 rackla_1_2_1
                        ];

            meta = {
              description = ''API gateway for Marathon/Mesos'';
              license = stdenv.lib.licenses.mit;
              homepage = "http://github.com/iOffice/heimdall";
            };
          } // packageOverrides)
      ) {};

    heimdall = heimdall_0_5_0;

    hello_world_header_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          plug_1_1_7
        }:
          buildMix ({
            name = "hello_world_header";
            version = "0.0.1";
            src = fetchHex {
              pkg = "hello_world_header";
              version = "0.0.1";
              sha256 =
                "caddb7712a66326face465231cf3bfe9210a62787cf5f499f9fbcc04e4695242";
            };
            beamDeps  = [ cowboy_1_1_2 plug_1_1_7 ];

            meta = {
              description = ''Demo plug used for tutorial purposes.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cultivatehq/hello_world_header";
            };
          } // packageOverrides)
      ) {};

    hello_world_header = hello_world_header_0_0_1;

    henchman_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "henchman";
            version = "0.3.0";
            src = fetchHex {
              pkg = "henchman";
              version = "0.3.0";
              sha256 =
                "b8615e43885a5b4bc42578259d4c8d6e712902608475bb545fff8be4cc87ea34";
            };

            meta = {
              description = ''Set of helpers for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/elepunk/henchman";
            };
          } // packageOverrides)
      ) {};

    henchman = henchman_0_3_0;

    hermes_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, chronos_1_5_1 }:
          buildMix ({
            name = "hermes";
            version = "0.1.0";
            src = fetchHex {
              pkg = "hermes";
              version = "0.1.0";
              sha256 =
                "f28880392a8b1b027c58c387870099f854f842fdeb1f7a0ba94a0b1ca07643bf";
            };
            beamDeps  = [ chronos_1_5_1 ];

            meta = {
              longDescription = ''Is a mailer component for sending & recieving
                                emails. The name comes from the greek messanger
                                of the gods.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/nurugger07/hemes";
            };
          } // packageOverrides)
      ) {};

    hermes = hermes_0_1_0;

    heroku_crashdumps_0_1_0 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex }:
          buildErlangMk ({
            name = "heroku_crashdumps";
            version = "0.1.0";
            src = fetchHex {
              pkg = "heroku_crashdumps";
              version = "0.1.0";
              sha256 =
                "35752433969f850ec851b1fd8153719d14c9d11fdf2473664ec261822da1c4bc";
            };

            meta = {
              description = ''Configure crash dump output location'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/heroku/heroku_crashdumps";
            };
          } // packageOverrides)
      ) {};

    heroku_crashdumps = heroku_crashdumps_0_1_0;

    hex2bin_1_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "hex2bin";
            version = "1.0.0";
            src = fetchHex {
              pkg = "hex2bin";
              version = "1.0.0";
              sha256 =
                "e7012d1d9aadd26e680f0983d26fb8923707f05fac9688f19f530fa3795e716f";
            };

            meta = {
              description = ''Hex string/binary conversion utilities'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/aesedepece/hex2bin";
            };
          } // packageOverrides)
      ) {};

    hex2bin = hex2bin_1_0_0;

    hex_math_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "hex_math";
            version = "0.0.2";
            src = fetchHex {
              pkg = "hex_math";
              version = "0.0.2";
              sha256 =
                "1dd9284c402d06bcd63ccb8df6022342defb2de4bd666066ed409e3b3c47761b";
            };

            meta = {
              description = ''Library for working with hex grids.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tjcelaya/hex_math";
            };
          } // packageOverrides)
      ) {};

    hex_math = hex_math_0_0_2;

    hex_searcher_1_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          floki_0_9_0,
          httpotion_2_2_1,
          ibrowse_4_4_0,
          table_rex_0_8_2
        }:
          buildMix ({
            name = "hex_searcher";
            version = "1.0.0";
            src = fetchHex {
              pkg = "hex_searcher";
              version = "1.0.0";
              sha256 =
                "26d2097aa0f950c67ea55822e15cfec26976f76a60ec51d758af9d60126b3538";
            };
            beamDeps  = [
                          floki_0_9_0
                          httpotion_2_2_1
                          ibrowse_4_4_0
                          table_rex_0_8_2
                        ];

            meta = {
              description = ''Search hex packages from terminal'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nguyenvinhlinh/HexSearcher";
            };
          } // packageOverrides)
      ) {};

    hex_searcher = hex_searcher_1_0_0;

    hexate_0_6_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "hexate";
            version = "0.6.1";
            src = fetchHex {
              pkg = "hexate";
              version = "0.6.1";
              sha256 =
                "667c429c0970e3097107c9fafcc645636302888388845d78a3947a739fd946b7";
            };

            meta = {
              description = ''A simple module for working with hex strings in
                            Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rjsamson/hexate";
            };
          } // packageOverrides)
      ) {};

    hexate = hexate_0_6_1;

    hexbot_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "hexbot";
            version = "0.0.1";
            src = fetchHex {
              pkg = "hexbot";
              version = "0.0.1";
              sha256 =
                "f9b8c9805468f7b93fa88440f1e75d8ed2fc3b7d11a68c455abf81efcc31590c";
            };

            meta = {
              description = ''A hubot-like bot framework for chatops.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tombell/hexbot";
            };
          } // packageOverrides)
      ) {};

    hexbot = hexbot_0_0_1;

    hexdocset_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, floki_0_9_0 }:
          buildMix ({
            name = "hexdocset";
            version = "1.0.0";
            src = fetchHex {
              pkg = "hexdocset";
              version = "1.0.0";
              sha256 =
                "846ed02411d759710f0f72a401d81a67cbc181421e461d3246540b3d471044be";
            };
            beamDeps  = [ floki_0_9_0 ];

            meta = {
              description = ''Convert hex doc to Dash.app`s docset format.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/yesmeck/hexdocset";
            };
          } // packageOverrides)
      ) {};

    hexdocset = hexdocset_1_0_0;

    hexgrid_2_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "hexgrid";
            version = "2.1.0";
            src = fetchHex {
              pkg = "hexgrid";
              version = "2.1.0";
              sha256 =
                "221cbcfd7774a989042cf063906234bc6f43a2609e8ad81e165e5bec3ab1e852";
            };

            meta = {
              description = ''Create Hexagonal grids and Maps. Useful if you`re
                            building Hex-based games.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rayalex/hex";
            };
          } // packageOverrides)
      ) {};

    hexgrid = hexgrid_2_1_0;

    hexoku_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          jsex_2_0_0
        }:
          buildMix ({
            name = "hexoku";
            version = "0.1.0";
            src = fetchHex {
              pkg = "hexoku";
              version = "0.1.0";
              sha256 =
                "39c24660842061d71922df5f87ac4fa065b3f18f64a4f438d40495ffeb9d711b";
            };
            beamDeps  = [ httpoison_0_11_2 jsex_2_0_0 ];

            meta = {
              description = ''Heroku API client and Heroku Mix tasks for Elixir
                            projects. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/JonGretar/Hexoku";
            };
          } // packageOverrides)
      ) {};

    hexoku = hexoku_0_1_0;

    hid_0_1_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "hid";
            version = "0.1.4";
            src = fetchHex {
              pkg = "hid";
              version = "0.1.4";
              sha256 =
                "c0661b1ef4399bc52259cd87a34cb092914652df08194d8e12a97ee4313c1e96";
            };

            meta = {
              longDescription = ''NIF wrapper of hidapi library for
                                reading/writing from/to USB HID devices
                                (http://www.signal11.us/oss/hidapi/).'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    hid = hid_0_1_4;

    himamo_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "himamo";
            version = "0.1.0";
            src = fetchHex {
              pkg = "himamo";
              version = "0.1.0";
              sha256 =
                "97ef35d04c26102e7b6800f4c129a7d275ae19764293085ee128ac83f06b64a3";
            };

            meta = {
              description = ''Discrete Hidden Markov Models.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mfilej/himamo";
            };
          } // packageOverrides)
      ) {};

    himamo = himamo_0_1_0;

    hipchat_elixir_0_2_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, hackney_1_6_3 }:
          buildMix ({
            name = "hipchat_elixir";
            version = "0.2.2";
            src = fetchHex {
              pkg = "hipchat_elixir";
              version = "0.2.2";
              sha256 =
                "d99162e75c2d5b5b70a3fb58ae161cd71d39b03afd61774f9a131d495bd87882";
            };
            beamDeps  = [ hackney_1_6_3 ];

            meta = {
              description = ''HiChat client library for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ymtszw/hipchat_elixir";
            };
          } // packageOverrides)
      ) {};

    hipchat_elixir = hipchat_elixir_0_2_2;

    hipchat_logger_backend_0_1_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_1_5_2
        }:
          buildMix ({
            name = "hipchat_logger_backend";
            version = "0.1.3";
            src = fetchHex {
              pkg = "hipchat_logger_backend";
              version = "0.1.3";
              sha256 =
                "464a89e3f70a41f640a1c347492f26fb9a560edd3522c3285550823aecbc7cf6";
            };
            beamDeps  = [ httpoison_0_11_2 poison_1_5_2 ];

            meta = {
              description = ''A logger backend for posting errors to
                            HipChat.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/fbcouch/hipchat_logger_backend";
            };
          } // packageOverrides)
      ) {};

    hipchat_logger_backend = hipchat_logger_backend_0_1_3;

    hipster_jesus_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "hipster_jesus";
            version = "0.1.0";
            src = fetchHex {
              pkg = "hipster_jesus";
              version = "0.1.0";
              sha256 =
                "f7f29f0b53168b521d40635e5452cddcff879585d7930e13e3072039d04ebb23";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              longDescription = ''A simple wrapper for
                                [HipsterJesus](http://hipsterjesus.com/), a
                                service that generates \"lorem ipsum\"-like text
                                in hipster lingo.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dnlsandiego/hipster_jesus";
            };
          } // packageOverrides)
      ) {};

    hipster_jesus = hipster_jesus_0_1_0;

    histogrex_0_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "histogrex";
            version = "0.0.4";
            src = fetchHex {
              pkg = "histogrex";
              version = "0.0.4";
              sha256 =
                "623f087a10ad72e256e4883a550aaccb89be0301a8c0b22bafc33d3a795e7239";
            };

            meta = {
              description = ''Concurrent High Dynamic Range (HDR) Histogram'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/2nd/histogrex";
            };
          } // packageOverrides)
      ) {};

    histogrex = histogrex_0_0_4;

    hivent_1_0_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exredis_0_2_5,
          gen_stage_0_12_0,
          poison_2_2_0,
          timex_3_1_15,
          uuid_1_1_7
        }:
          buildMix ({
            name = "hivent";
            version = "1.0.3";
            src = fetchHex {
              pkg = "hivent";
              version = "1.0.3";
              sha256 =
                "05cc9f572c81ec32a9d4078e6888706545277e16bda8f161abb381dcb89cf591";
            };
            beamDeps  = [
                          exredis_0_2_5
                          gen_stage_0_12_0
                          poison_2_2_0
                          timex_3_1_15
                          uuid_1_1_7
                        ];

            meta = {
              description = ''An event stream that aggregates facts about your
                            application.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/inf0rmer/ex-hivent";
            };
          } // packageOverrides)
      ) {};

    hivent = hivent_1_0_3;

    hkdf_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "hkdf";
            version = "0.1.0";
            src = fetchHex {
              pkg = "hkdf";
              version = "0.1.0";
              sha256 =
                "4447f33ca64a8c32bb9e5cc15f8d1373430f63d1eaa20e4ab91ba31a4ca8372c";
            };

            meta = {
              description = ''HMAC-based key derivation function.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sschneider1207/hkdf";
            };
          } // packageOverrides)
      ) {};

    hkdf = hkdf_0_1_0;

    hlc_2_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "hlc";
            version = "2.0.0";
            src = fetchHex {
              pkg = "hlc";
              version = "2.0.0";
              sha256 =
                "460ac04654e920e068d1fd17aec1f78b1879cc42ac7f3def7497f0d1cc5056ad";
            };

            meta = {
              description = ''hybrid logical clock'';

              homepage = "https://github.com/barrel-db/hlc";
            };
          } // packageOverrides)
      ) {};

    hlc = hlc_2_0_0;

    hlj_upyun_0_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_9_2,
          mime_1_1_0,
          poison_2_2_0
        }:
          buildMix ({
            name = "hlj_upyun";
            version = "0.1.2";
            src = fetchHex {
              pkg = "hlj_upyun";
              version = "0.1.2";
              sha256 =
                "592225aa5c6f9c89d54a1ff40f1cee6183ee99cfb5adaa50afb0853521a9b14e";
            };
            beamDeps  = [ httpoison_0_9_2 mime_1_1_0 poison_2_2_0 ];

            meta = {
              description = ''A community version of Upyun SDK, released by
                            Helijia.com.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/qhwa/elixir-upyun";
            };
          } // packageOverrides)
      ) {};

    hlj_upyun = hlj_upyun_0_1_2;

    hmc5883l_0_5_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          dialyze_0_1_4,
          elixir_ale_0_7_0,
          mon_handler_1_0_2,
          multidef_0_2_1
        }:
          buildMix ({
            name = "hmc5883l";
            version = "0.5.0";
            src = fetchHex {
              pkg = "hmc5883l";
              version = "0.5.0";
              sha256 =
                "cbda55c14a5e1fc5accd49de948331c5dc264286c6ecd58c348cb54c66fe6fa4";
            };
            beamDeps  = [
                          dialyze_0_1_4
                          elixir_ale_0_7_0
                          mon_handler_1_0_2
                          multidef_0_2_1
                        ];

            meta = {
              longDescription = ''OTP application for reading the HMC5883L
                                3-axis magnetometer. Magnetic heading is read at
                                approx. 13hz (every 75ms)'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/tattdcodemonkey/hmc5883l";
            };
          } // packageOverrides)
      ) {};

    hmc5883l = hmc5883l_0_5_0;

    hoax_0_11_2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "hoax";
            version = "0.11.2";
            src = fetchHex {
              pkg = "hoax";
              version = "0.11.2";
              sha256 =
                "fca0d9056201e671719736b4f86fe2b8da6f8b42d88b28b1bcb2b307586928a8";
            };

            meta = {
              description = ''Yet another mocking library for Erlang'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/xenolinguist/hoax";
            };
          } // packageOverrides)
      ) {};

    hoax = hoax_0_11_2;

    hobot_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "hobot";
            version = "0.1.2";
            src = fetchHex {
              pkg = "hobot";
              version = "0.1.2";
              sha256 =
                "37ea5815afe00d860439f66406f543c450a65704f507f49acae288ce69c25ed5";
            };

            meta = {
              description = ''A bot framework for ErlangVM(beam)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/niku/hobot";
            };
          } // packageOverrides)
      ) {};

    hobot = hobot_0_1_2;

    hobot_output_console_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, hobot_0_1_2 }:
          buildMix ({
            name = "hobot_output_console";
            version = "0.1.0";
            src = fetchHex {
              pkg = "hobot_output_console";
              version = "0.1.0";
              sha256 =
                "e52c4097471ed0eb0fe12e316dc54cfe9767b3210450eb1e582d63ab47a2b190";
            };
            beamDeps  = [ hobot_0_1_2 ];

            meta = {
              description = ''An output plugin which writes messages to a
                            console for hobot'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/niku/hobot_output_console";
            };
          } // packageOverrides)
      ) {};

    hobot_output_console = hobot_output_console_0_1_0;

    holiday_jp_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "holiday_jp";
            version = "0.2.1";
            src = fetchHex {
              pkg = "holiday_jp";
              version = "0.2.1";
              sha256 =
                "d182f0d25a2f48eb427af3eeb8dff7913e9dce7aceb947bf4ab2e0749496950c";
            };

            meta = {
              description = ''Japanese holiday.'';
              license = stdenv.lib.licenses.gpl3;
              homepage = "https://github.com/ne-sachirou/holiday_jp-elixir";
            };
          } // packageOverrides)
      ) {};

    holiday_jp = holiday_jp_0_2_1;

    holidays_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "holidays";
            version = "0.2.1";
            src = fetchHex {
              pkg = "holidays";
              version = "0.2.1";
              sha256 =
                "9a622689921cd4b62a6a1c51f72ca08d9adfe9a7b43adf941d9ffd61be5d08e5";
            };

            meta = {
              description = ''Application for finding which holidays fall on
                            given dates.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/CoderDennis/holidays";
            };
          } // packageOverrides)
      ) {};

    holidays = holidays_0_2_1;

    honeybadger_0_6_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_5_0,
          plug_1_3_5,
          poison_1_0_2
        }:
          buildMix ({
            name = "honeybadger";
            version = "0.6.3";
            src = fetchHex {
              pkg = "honeybadger";
              version = "0.6.3";
              sha256 =
                "442e69f60f43d8db26248f91135b41ed52d111491ad84b1f89d42aa89d7c423e";
            };
            beamDeps  = [ httpoison_0_5_0 plug_1_3_5 poison_1_0_2 ];

            meta = {
              longDescription = ''Elixir client, Plug and error_logger for
                                integrating with the Honeybadger.io exception
                                tracker'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/honeybadger-io/honeybadger-elixir";
            };
          } // packageOverrides)
      ) {};

    honeybadger = honeybadger_0_6_3;

    honeydew_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "honeydew";
            version = "0.0.2";
            src = fetchHex {
              pkg = "honeydew";
              version = "0.0.2";
              sha256 =
                "f7ea414bde1edaa8e9f969910d5638b98ba1a7a456eb0af3a12911dcbd72f5b1";
            };

            meta = {
              description = ''Pluggable local/remote job queue + worker pool
                            with permanent workers.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/koudelka/elixir-honeydew";
            };
          } // packageOverrides)
      ) {};

    honeydew_1_0_0_rc7 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "honeydew";
            version = "1.0.0-rc7";
            src = fetchHex {
              pkg = "honeydew";
              version = "1.0.0-rc7";
              sha256 =
                "3c7a4a2f722782e99e32cabd16aa359eb928e4cdfa295433fdc9d5c3b0f08ddb";
            };

            meta = {
              description = ''Pluggable local/remote job queue + worker pool
                            with permanent workers.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/koudelka/elixir-honeydew";
            };
          } // packageOverrides)
      ) {};

    honeydew = honeydew_1_0_0_rc7;

    honeywell_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_9_2,
          oauth2_0_7_0,
          poison_2_2_0
        }:
          buildMix ({
            name = "honeywell";
            version = "0.1.1";
            src = fetchHex {
              pkg = "honeywell";
              version = "0.1.1";
              sha256 =
                "1ff9fd0cba24b7770cca0a09f0f29dda1c1233308aa45d56a42458776ae3ace9";
            };
            beamDeps  = [ httpoison_0_9_2 oauth2_0_7_0 poison_2_2_0 ];

            meta = {
              description = ''Client library for the Honeywell Round and Water
                            Leak & Freeze Detector APIs.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jeffutter/honeywell-elixir";
            };
          } // packageOverrides)
      ) {};

    honeywell = honeywell_0_1_1;

    hooks_2_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "hooks";
            version = "2.0.1";
            src = fetchHex {
              pkg = "hooks";
              version = "2.0.1";
              sha256 =
                "168f642ed02d31ec281555b51e44115291de41ca06c21e9ffbf9ab105f3aa742";
            };

            meta = {
              description = ''generic plugin & hook system'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/barrel-db/hooks";
            };
          } // packageOverrides)
      ) {};

    hooks = hooks_2_0_1;

    hoover_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "hoover";
            version = "0.1.0";
            src = fetchHex {
              pkg = "hoover";
              version = "0.1.0";
              sha256 =
                "1e4903ed6638555f0f89dbe7a3168a1691051f382a2c269e1f9befedce31d47a";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''A collection of functions that hoove (aka fetch)
                            data from remote sources.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/amorphid/hoover-elixir";
            };
          } // packageOverrides)
      ) {};

    hoover = hoover_0_1_0;

    hora_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "hora";
            version = "0.1.0";
            src = fetchHex {
              pkg = "hora";
              version = "0.1.0";
              sha256 =
                "6a439f5fedaeac88d738b5af949e95a28bd82c98a048de249a972b83c445cf9e";
            };

            meta = {
              description = ''Extensible password management'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sticksnleaves/hora";
            };
          } // packageOverrides)
      ) {};

    hora = hora_0_1_0;

    horatio_0_2_0_rc1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "horatio";
            version = "0.2.0-rc1";
            src = fetchHex {
              pkg = "horatio";
              version = "0.2.0-rc1";
              sha256 =
                "57f8ae922576856a495509248ad473425d2495b443bcbd1f5795bc1ec09c38cb";
            };

            meta = {
              longDescription = ''The rational and most trusted friend of the
                                tragic hero, Floating Point (rational numbers in
                                LFE)'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/lfex/horatio";
            };
          } // packageOverrides)
      ) {};

    horatio = horatio_0_2_0_rc1;

    hound_1_0_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_8_6,
          poison_3_1_0
        }:
          buildMix ({
            name = "hound";
            version = "1.0.3";
            src = fetchHex {
              pkg = "hound";
              version = "1.0.3";
              sha256 =
                "deda51938ea32040751cb8d11e68f95d6ead938f1c97d2d0172205a3b4a92c28";
            };
            beamDeps  = [ hackney_1_8_6 poison_3_1_0 ];

            meta = {
              description = ''Webdriver library for integration testing and
                            browser automation'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/HashNuke/hound";
            };
          } // packageOverrides)
      ) {};

    hound = hound_1_0_3;

    hpack_1_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "hpack";
            version = "1.0.3";
            src = fetchHex {
              pkg = "hpack";
              version = "1.0.3";
              sha256 =
                "5fb1e9b29c6ccec55ea487294a0f7ec44da62a500d17e2780a3c7d42b2480089";
            };

            meta = {
              longDescription = ''Implementation of the
                                [HPack](https://http2.github.io/http2-spec/compression.html)
                                protocol, a compression format for efficiently
                                representing HTTP header fields, to be used in
                                HTTP/2.'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    hpack = hpack_1_0_3;

    hpack_erl_0_2_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "hpack_erl";
            version = "0.2.3";
            src = fetchHex {
              pkg = "hpack_erl";
              version = "0.2.3";
              sha256 =
                "06f580167c4b8b8a6429040df36cc93bba6d571faeaec1b28816523379cbb23a";
            };

            meta = {
              description = ''HPACK Implementation'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/joedevivo/hpack";
            };
          } // packageOverrides)
      ) {};

    hpack_erl = hpack_erl_0_2_3;

    hr_0_2_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          comeonin_1_6_0,
          joken_0_16_1,
          linguist_0_1_5,
          oauth2_0_3_0,
          phoenix_1_3_0_rc_2,
          phoenix_ecto_1_2_0,
          phoenix_html_2_9_3,
          plug_1_3_5,
          yyid_0_1_2
        }:
          buildMix ({
            name = "hr";
            version = "0.2.2";
            src = fetchHex {
              pkg = "hr";
              version = "0.2.2";
              sha256 =
                "67d02f62bffda952dbaf80cfea85601f31c39e04d3bf90da7a08b89e1bce71df";
            };
            beamDeps  = [
                          comeonin_1_6_0
                          joken_0_16_1
                          linguist_0_1_5
                          oauth2_0_3_0
                          phoenix_1_3_0_rc_2
                          phoenix_ecto_1_2_0
                          phoenix_html_2_9_3
                          plug_1_3_5
                          yyid_0_1_2
                        ];

            meta = {
              description = ''User accounts for Phoenix. Supports OAuth, JWT
                            and forms out of the box'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zensavona/hr";
            };
          } // packageOverrides)
      ) {};

    hr = hr_0_2_2;

    hrafn_0_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          plug_1_3_5,
          poison_1_0_2,
          uuid_1_1_7
        }:
          buildMix ({
            name = "hrafn";
            version = "0.1.2";
            src = fetchHex {
              pkg = "hrafn";
              version = "0.1.2";
              sha256 =
                "0e313d6d5c1a8546df5d1f69fda729ebc4e55243c4b75c663e7258693fb3d773";
            };
            beamDeps  = [ httpoison_0_11_2 plug_1_3_5 poison_1_0_2 uuid_1_1_7
                      ];

            meta = {
              description = ''Hrafn client for Twined projects'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/twined/hrafn";
            };
          } // packageOverrides)
      ) {};

    hrafn = hrafn_0_1_2;

    hstore_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          apex_0_3_7,
          postgrex_0_6_0
        }:
          buildMix ({
            name = "hstore";
            version = "0.0.2";
            src = fetchHex {
              pkg = "hstore";
              version = "0.0.2";
              sha256 =
                "bd5040285c29162685f4db37ef3ad30c2bb473f5c54fe03ef29b4383cf23504a";
            };
            beamDeps  = [ apex_0_3_7 postgrex_0_6_0 ];

            meta = {
              longDescription = ''A collection of encoders and decoders for
                                hstore data type support for Postgrex. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/senecasystems/hstore";
            };
          } // packageOverrides)
      ) {};

    hstore = hstore_0_0_2;

    html5ever_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, rustler_0_9_0 }:
          buildMix ({
            name = "html5ever";
            version = "0.1.1";
            src = fetchHex {
              pkg = "html5ever";
              version = "0.1.1";
              sha256 =
                "8b3910ea0efb9dbdf5f45148f1fdedeb9b054e437eab04791ddda6b366a62755";
            };
            beamDeps  = [ rustler_0_9_0 ];

            meta = {
              description = ''NIF binding of html5ever using rustler.'';
              license = with stdenv.lib.licenses; [ mit asl20 ];
              homepage = "https://github.com/hansihe/html5ever_elixir";
            };
          } // packageOverrides)
      ) {};

    html5ever_0_4_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, rustler_0_9_0 }:
          buildMix ({
            name = "html5ever";
            version = "0.4.0";
            src = fetchHex {
              pkg = "html5ever";
              version = "0.4.0";
              sha256 =
                "105a26829bac894842a1fcbaa15b71e5fad9d4a1112320baf91bd6cff0817b46";
            };
            beamDeps  = [ rustler_0_9_0 ];

            meta = {
              description = ''NIF binding of html5ever using rustler.'';
              license = with stdenv.lib.licenses; [ mit asl20 ];
              homepage = "https://github.com/hansihe/html5ever_elixir";
            };
          } // packageOverrides)
      ) {};

    html5ever = html5ever_0_4_0;

    html_builder_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "html_builder";
            version = "0.1.1";
            src = fetchHex {
              pkg = "html_builder";
              version = "0.1.1";
              sha256 =
                "7cba41180419a26e2fb8ff1c075efcdf31e4079e06144d58623c32c1de3835d9";
            };

            meta = {
              description = ''generate html in elixir with simple data
                            structures'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/camshaft/html_builder";
            };
          } // packageOverrides)
      ) {};

    html_builder = html_builder_0_1_1;

    html_entities_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "html_entities";
            version = "0.3.0";
            src = fetchHex {
              pkg = "html_entities";
              version = "0.3.0";
              sha256 =
                "93811511394efeee964f6e7df3b72b37ad39c1d185030c3561aebf1c15c4d995";
            };

            meta = {
              description = ''Decode and encode HTML entities in a string.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/martinsvalin/html_entities";
            };
          } // packageOverrides)
      ) {};

    html_entities = html_entities_0_3_0;

    html_sanitize_ex_1_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, mochiweb_2_15_0 }:
          buildMix ({
            name = "html_sanitize_ex";
            version = "1.3.0";
            src = fetchHex {
              pkg = "html_sanitize_ex";
              version = "1.3.0";
              sha256 =
                "abfb393ad888d57700f4d0f119c2643c8a9d98856f9b8a92001be7efad1419d6";
            };
            beamDeps  = [ mochiweb_2_15_0 ];

            meta = {
              description = ''HTML sanitizer for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rrrene/html_sanitize_ex";
            };
          } // packageOverrides)
      ) {};

    html_sanitize_ex = html_sanitize_ex_1_3_0;

    html_sanitize_ex_1_3_0_rc3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, mochiweb_2_15_0 }:
          buildMix ({
            name = "html_sanitize_ex";
            version = "1.3.0-rc3";
            src = fetchHex {
              pkg = "html_sanitize_ex";
              version = "1.3.0-rc3";
              sha256 =
                "d7dc38c0118fc395fe1326aa74801dba66fef8295c82798d5889af4d575fc59c";
            };
            beamDeps  = [ mochiweb_2_15_0 ];

            meta = {
              description = ''HTML sanitizer for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rrrene/html_sanitize_ex";
            };
          } // packageOverrides)
      ) {};

    html_to_image_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, porcelain_2_0_3 }:
          buildMix ({
            name = "html_to_image";
            version = "0.1.3";
            src = fetchHex {
              pkg = "html_to_image";
              version = "0.1.3";
              sha256 =
                "3caf46507b11a396c39c868de1475d4ef74e0633f8b3ee0acb9ee4e214b25827";
            };
            beamDeps  = [ porcelain_2_0_3 ];

            meta = {
              description = ''Elixir wrapper around `wkhtmltoimage` tool for
                            converting HTML into images'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/koss-lebedev/html_to_image";
            };
          } // packageOverrides)
      ) {};

    html_to_image = html_to_image_0_1_3;

    html_to_pdf_0_5_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "html_to_pdf";
            version = "0.5.2";
            src = fetchHex {
              pkg = "html_to_pdf";
              version = "0.5.2";
              sha256 =
                "7adcde56c221e8f2447837d3b5983775f53071035d9ce9f179635a5e94c795e3";
            };

            meta = {
              description = ''Super simple library for turning raw HTML or
                            webpages into beautiful PDFs.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mattweldon/html_to_pdf";
            };
          } // packageOverrides)
      ) {};

    html_to_pdf = html_to_pdf_0_5_2;

    htpasswd_1_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          apache_passwd_md5_1_0_0
        }:
          buildMix ({
            name = "htpasswd";
            version = "1.0.2";
            src = fetchHex {
              pkg = "htpasswd";
              version = "1.0.2";
              sha256 =
                "0c9006a42eae68ac2f561e5876c0fd8083560c57da099ffa6c828eeb00246bba";
            };
            beamDeps  = [ apache_passwd_md5_1_0_0 ];

            meta = {
              longDescription = ''Provides basic htpasswd(1) functions as a
                                library: encode and check passwords in MD5, SHA,
                                crypt, or plaintext format, add to and delete
                                from htaccess files. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kevinmontuori/Apache.htpasswd";
            };
          } // packageOverrides)
      ) {};

    htpasswd = htpasswd_1_0_2;

    http_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          dialyze_0_1_4,
          earmark_0_1_19,
          ex_doc_0_15_1,
          excoveralls_0_7_0,
          pool_0_0_2
        }:
          buildMix ({
            name = "http";
            version = "0.0.1";
            src = fetchHex {
              pkg = "http";
              version = "0.0.1";
              sha256 =
                "1ee497d4ec73290e5d9b9effab88786716185550bd65822e7a31c32d1a044a96";
            };
            beamDeps  = [
                          dialyze_0_1_4
                          earmark_0_1_19
                          ex_doc_0_15_1
                          excoveralls_0_7_0
                          pool_0_0_2
                        ];

            meta = {
              description = ''HTTP server for Elixir Not currently working, but
                            close :) '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/slogsdon/http";
            };
          } // packageOverrides)
      ) {};

    http = http_0_0_1;

    http2_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "http2";
            version = "0.0.2";
            src = fetchHex {
              pkg = "http2";
              version = "0.0.2";
              sha256 =
                "fd8354d9c7800223ffcb66c2c359a40a5be3809ea4e3b2046fee253a5d049250";
            };

            meta = {
              description = ''HPACK implementation for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kiennt/hpack";
            };
          } // packageOverrides)
      ) {};

    http2 = http2_0_0_2;

    http_basic_auth_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          plug_1_3_5
        }:
          buildMix ({
            name = "http_basic_auth";
            version = "0.1.0";
            src = fetchHex {
              pkg = "http_basic_auth";
              version = "0.1.0";
              sha256 =
                "92f30a9c4e31836ee45c421af53366e6299afe5827a8554e76478d114be425e0";
            };
            beamDeps  = [ cowboy_1_1_2 plug_1_3_5 ];

            meta = {
              description = ''HTTP Basic Authentication Plug'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/raycheung/http_basic_auth";
            };
          } // packageOverrides)
      ) {};

    http_basic_auth = http_basic_auth_0_1_0;

    http_client_0_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_9_2,
          httpoison_form_data_0_1_1,
          poison_2_2_0
        }:
          buildMix ({
            name = "http_client";
            version = "0.1.2";
            src = fetchHex {
              pkg = "http_client";
              version = "0.1.2";
              sha256 =
                "3b086577241623529fced7feaa633b76a83a82bd9ae00491a505a3ed23434e57";
            };
            beamDeps  = [
                          httpoison_0_9_2 httpoison_form_data_0_1_1 poison_2_2_0
                        ];

            meta = {
              longDescription = ''A wrapper around HTTPoison with Poison and
                                HTTPoisonFormData for formatting payloads.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/asonix/http-client-elixir";
            };
          } // packageOverrides)
      ) {};

    http_client = http_client_0_1_2;

    http_digex_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "http_digex";
            version = "0.0.1";
            src = fetchHex {
              pkg = "http_digex";
              version = "0.0.1";
              sha256 =
                "43bca23be7809bd4e2a5efa23d294117457192c98bd1cdf6b90b61285bc4109a";
            };

            meta = {
              description = ''A module to create basic digest http auth
                            header'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/techgaun/http_digex";
            };
          } // packageOverrides)
      ) {};

    http_digex = http_digex_0_0_1;

    http_message_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "http_message";
            version = "0.1.0";
            src = fetchHex {
              pkg = "http_message";
              version = "0.1.0";
              sha256 =
                "c4c7506449140fed7d8c865414deb1318077b6096d86bf87c74d74fd2c23f04d";
            };

            meta = {
              description = ''Parse and create HTTP messages'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jamen/http-message";
            };
          } // packageOverrides)
      ) {};

    http_message = http_message_0_1_0;

    http_params_serializer_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "http_params_serializer";
            version = "0.1.1";
            src = fetchHex {
              pkg = "http_params_serializer";
              version = "0.1.1";
              sha256 =
                "7d6c2184814b7232130a3193c9832827c5eeaaae928155d96863ec426da6ce69";
            };

            meta = {
              longDescription = ''A small library to serialize deeply nested
                                datastructures into HTTP parameters that most
                                backends do understand'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/ruby2elixir/http_params_serializer";
            };
          } // packageOverrides)
      ) {};

    http_params_serializer = http_params_serializer_0_1_1;

    http_proxy_1_1_5 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          exjsx_3_2_1,
          hackney_1_6_5,
          plug_1_3_5
        }:
          buildMix ({
            name = "http_proxy";
            version = "1.1.5";
            src = fetchHex {
              pkg = "http_proxy";
              version = "1.1.5";
              sha256 =
                "e579aa0218af34360e1eee09d7bc83cb48ff10bb8b501f3b9ac07610773c0ef5";
            };
            beamDeps  = [ cowboy_1_1_2 exjsx_3_2_1 hackney_1_6_5 plug_1_3_5
                      ];

            meta = {
              description = ''Multi port HTTP Proxy and support record/play
                            request.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/KazuCocoa/http_proxy";
            };
          } // packageOverrides)
      ) {};

    http_proxy = http_proxy_1_1_5;

    http_router_0_10_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          plug_1_3_5,
          poison_3_1_0,
          xml_builder_0_1_1
        }:
          buildMix ({
            name = "http_router";
            version = "0.10.0";
            src = fetchHex {
              pkg = "http_router";
              version = "0.10.0";
              sha256 =
                "202e6b8b51d4d24192fbcf95c860b6342e2503811be932b76e932d50513f7e5e";
            };
            beamDeps  = [
                          cowboy_1_1_2 plug_1_3_5 poison_3_1_0 xml_builder_0_1_1
                        ];

            meta = {
              longDescription = ''HTTP Router with various macros to assist in
                                developing your application and organizing your
                                code'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/sugar-framework/elixir-http-router";
            };
          } // packageOverrides)
      ) {};

    http_router = http_router_0_10_0;

    http_signature_1_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "http_signature";
            version = "1.1.0";
            src = fetchHex {
              pkg = "http_signature";
              version = "1.1.0";
              sha256 =
                "3e6036d9c29289ed0e35dd6f41821dec9061ce20aad3c4d35dcbae8c84eb3baa";
            };

            meta = {
              description = ''Erlang and Elixir implementations of Joyent`s
                            HTTP Signature Scheme.'';
              license = stdenv.lib.licenses.mpl20;
              homepage =
                "https://github.com/potatosalad/erlang-http_signature";
            };
          } // packageOverrides)
      ) {};

    http_signature = http_signature_1_1_0;

    http_status_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "http_status";
            version = "0.2.1";
            src = fetchHex {
              pkg = "http_status";
              version = "0.2.1";
              sha256 =
                "179edcf5226b26d9e19faa652a6348ec2dd6473391dfac214e542752f94c5637";
            };

            meta = {
              description = ''Every HTTP response status for Elixir
                            applications'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/CrowdHailer/raxx/tree/master/http_status";
            };
          } // packageOverrides)
      ) {};

    http_status = http_status_0_2_1;

    httparrot_1_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          con_cache_0_12_0,
          cowboy_1_1_2,
          exjsx_3_0_2
        }:
          buildMix ({
            name = "httparrot";
            version = "1.0.1";
            src = fetchHex {
              pkg = "httparrot";
              version = "1.0.1";
              sha256 =
                "d36898d8b5c2c8b65212a6b0465439440688e7300cec230d2a47ec9599af54b0";
            };
            beamDeps  = [ con_cache_0_12_0 cowboy_1_1_2 exjsx_3_0_2 ];

            meta = {
              description = ''HTTP Request & Response Server. An incomplete
                            clone of http://httpbin.org'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/edgurgel/httparrot";
            };
          } // packageOverrides)
      ) {};

    httparrot = httparrot_1_0_1;

    httpc_aws_0_1_3 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          jsx_2_8_0,
          meck_0_8_4
        }:
          buildRebar3 ({
            name = "httpc_aws";
            version = "0.1.3";
            src = fetchHex {
              pkg = "httpc_aws";
              version = "0.1.3";
              sha256 =
                "d771549f8466a185adc4985e30cfc2a53bb8c9bb02ecf0eef1be02c254689523";
            };

            beamDeps  = [ jsx_2_8_0 meck_0_8_4 ];

            meta = {
              description = ''A light-weight, relatively unopinionated AWS API
                            client'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/gmr/httpc-aws";
            };
          } // packageOverrides)
      ) {};

    httpc_aws = httpc_aws_0_1_3;

    httpehaviour_0_9_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, hackney_1_8_6 }:
          buildMix ({
            name = "httpehaviour";
            version = "0.9.0";
            src = fetchHex {
              pkg = "httpehaviour";
              version = "0.9.0";
              sha256 =
                "54e93dcf0e62d392781078cf029478194797fe67c98dffe99a91b5d5ec33e4e5";
            };
            beamDeps  = [ hackney_1_8_6 ];

            meta = {
              description = ''Yet Yet Another HTTP client for Elixir powered by
                            hackney'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/edgurgel/httpehaviour";
            };
          } // packageOverrides)
      ) {};

    httpehaviour = httpehaviour_0_9_0;

    httpipe_0_9_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "httpipe";
            version = "0.9.0";
            src = fetchHex {
              pkg = "httpipe";
              version = "0.9.0";
              sha256 =
                "1db9917b41a2a678278d627c2374a1842ba55ee4003d056d7246e28de6a7ba71";
            };

            meta = {
              longDescription = ''HTTPipe is an adapter-driven HTTP library for
                                Elixir that provides a way to build composable
                                HTTP requests.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/davidantaramian/httpipe";
            };
          } // packageOverrides)
      ) {};

    httpipe = httpipe_0_9_0;

    httpipe_adapters_hackney_0_11_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_3_0,
          httpipe_0_9_0
        }:
          buildMix ({
            name = "httpipe_adapters_hackney";
            version = "0.11.0";
            src = fetchHex {
              pkg = "httpipe_adapters_hackney";
              version = "0.11.0";
              sha256 =
                "a9c2d8e162469a78052b52b6771e4c8b34cff27ac7bec1948d1631b35c9d28e7";
            };
            beamDeps  = [ hackney_1_3_0 httpipe_0_9_0 ];

            meta = {
              description = ''Hackney-based adapter for HTTPipe'';
              license = stdenv.lib.licenses.isc;
              homepage =
                "https://github.com/davidantaramian/httpipe_adapters_hackney";
            };
          } // packageOverrides)
      ) {};

    httpipe_adapters_hackney = httpipe_adapters_hackney_0_11_0;

    httplacebo_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "httplacebo";
            version = "0.1.0";
            src = fetchHex {
              pkg = "httplacebo";
              version = "0.1.0";
              sha256 =
                "0f1873e65bb97227d43b5c6fc2138f33ef83f90cd068d9a9aee06ed8ef44a7ec";
            };

            meta = {
              description = ''The `do nothing` HTTP client for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/guilleiguaran/httplacebo";
            };
          } // packageOverrides)
      ) {};

    httplacebo = httplacebo_0_1_0;

    httpoison_0_10_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, hackney_1_6_6 }:
          buildMix ({
            name = "httpoison";
            version = "0.10.0";
            src = fetchHex {
              pkg = "httpoison";
              version = "0.10.0";
              sha256 =
                "c42ceaa5656870e635fcafc073a21007f0b70fb1fd79809764ac108bc2b24b83";
            };
            beamDeps  = [ hackney_1_6_6 ];

            meta = {
              description = ''Yet Another HTTP client for Elixir powered by
                            hackney'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/edgurgel/httpoison";
            };
          } // packageOverrides)
      ) {};

    httpoison_0_11_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, hackney_1_8_6 }:
          buildMix ({
            name = "httpoison";
            version = "0.11.2";
            src = fetchHex {
              pkg = "httpoison";
              version = "0.11.2";
              sha256 =
                "5dfd296f1deca14329e9ef864db14f91c56c61a1ad297dde8365d108b6f2ce3d";
            };
            beamDeps  = [ hackney_1_8_6 ];

            meta = {
              description = ''Yet Another HTTP client for Elixir powered by
                            hackney'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/edgurgel/httpoison";
            };
          } // packageOverrides)
      ) {};

    httpoison = httpoison_0_11_2;

    httpoison_0_5_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, hackney_1_3_0 }:
          buildMix ({
            name = "httpoison";
            version = "0.5.0";
            src = fetchHex {
              pkg = "httpoison";
              version = "0.5.0";
              sha256 =
                "dce013c94341366b6584368ff8d15a64265783d97d114368fb794ded5eb98e5c";
            };
            beamDeps  = [ hackney_1_3_0 ];

            meta = {
              description = ''Yet Another HTTP client for Elixir powered by
                            hackney'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/edgurgel/httpoison";
            };
          } // packageOverrides)
      ) {};

    httpoison_0_6_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, hackney_1_8_6 }:
          buildMix ({
            name = "httpoison";
            version = "0.6.2";
            src = fetchHex {
              pkg = "httpoison";
              version = "0.6.2";
              sha256 =
                "9d9a2d8f69b3c165db1a611989a14d8e13a66ef15d627fa17bb9acee8344e785";
            };
            beamDeps  = [ hackney_1_8_6 ];

            meta = {
              description = ''Yet Another HTTP client for Elixir powered by
                            hackney'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/edgurgel/httpoison";
            };
          } // packageOverrides)
      ) {};

    httpoison_0_7_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, hackney_1_3_2 }:
          buildMix ({
            name = "httpoison";
            version = "0.7.1";
            src = fetchHex {
              pkg = "httpoison";
              version = "0.7.1";
              sha256 =
                "ad146f8a1e8cb81d50337ca62bd83a80fc1e3df768b93a9ed4c497c3a554c9b0";
            };
            beamDeps  = [ hackney_1_3_2 ];

            meta = {
              description = ''Yet Another HTTP client for Elixir powered by
                            hackney'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/edgurgel/httpoison";
            };
          } // packageOverrides)
      ) {};

    httpoison_0_7_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, hackney_1_3_2 }:
          buildMix ({
            name = "httpoison";
            version = "0.7.5";
            src = fetchHex {
              pkg = "httpoison";
              version = "0.7.5";
              sha256 =
                "a9b32452df3c4671c012953d6bb15e3a52bbb41b618f72cbd464e8c9320847c9";
            };
            beamDeps  = [ hackney_1_3_2 ];

            meta = {
              description = ''Yet Another HTTP client for Elixir powered by
                            hackney'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/edgurgel/httpoison";
            };
          } // packageOverrides)
      ) {};

    httpoison_0_8_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, hackney_1_4_10 }:
          buildMix ({
            name = "httpoison";
            version = "0.8.0";
            src = fetchHex {
              pkg = "httpoison";
              version = "0.8.0";
              sha256 =
                "7a6455689233867da40f285e9e3bcce506cd0c60b1094e1c449de76a46b9e50b";
            };
            beamDeps  = [ hackney_1_4_10 ];

            meta = {
              description = ''Yet Another HTTP client for Elixir powered by
                            hackney'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/edgurgel/httpoison";
            };
          } // packageOverrides)
      ) {};

    httpoison_0_8_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, hackney_1_6_6 }:
          buildMix ({
            name = "httpoison";
            version = "0.8.3";
            src = fetchHex {
              pkg = "httpoison";
              version = "0.8.3";
              sha256 =
                "74f2103e6eff47dcc2b288e37f42629874df3e4a4dce5fbc9dea508de4785e06";
            };
            beamDeps  = [ hackney_1_6_6 ];

            meta = {
              description = ''Yet Another HTTP client for Elixir powered by
                            hackney'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/edgurgel/httpoison";
            };
          } // packageOverrides)
      ) {};

    httpoison_0_9_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, hackney_1_6_6 }:
          buildMix ({
            name = "httpoison";
            version = "0.9.2";
            src = fetchHex {
              pkg = "httpoison";
              version = "0.9.2";
              sha256 =
                "edccf20b43da7dabd2f9f2776edc9e18280c0655b2218f4b823900d0d622cbdc";
            };
            beamDeps  = [ hackney_1_6_6 ];

            meta = {
              description = ''Yet Another HTTP client for Elixir powered by
                            hackney'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/edgurgel/httpoison";
            };
          } // packageOverrides)
      ) {};

    httpoison_form_data_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "httpoison_form_data";
            version = "0.1.1";
            src = fetchHex {
              pkg = "httpoison_form_data";
              version = "0.1.1";
              sha256 =
                "8adc31311d37bad8800515ca7f9708c017b1688b96b3a862bd4ecd9d5c355dd6";
            };

            meta = {
              longDescription = ''A library for building Multipart and
                                URLEncoded structures from Elixir structures for
                                HTTPoison and Hackney.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/spiceworks/httpoison-form-data";
            };
          } // packageOverrides)
      ) {};

    httpoison_form_data = httpoison_form_data_0_1_1;

    httpotion_2_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ibrowse_4_4_0 }:
          buildMix ({
            name = "httpotion";
            version = "2.2.1";
            src = fetchHex {
              pkg = "httpotion";
              version = "2.2.1";
              sha256 =
                "04892b72e8889af42153c3a77d9c94d0f460f245a90789d8b51f994dbb28a355";
            };
            beamDeps  = [ ibrowse_4_4_0 ];

            meta = {
              description = ''Fancy HTTP client for Elixir, based on
                            ibrowse.'';
              license = stdenv.lib.licenses.unlicense;
              homepage = "https://github.com/myfreeweb/httpotion";
            };
          } // packageOverrides)
      ) {};

    httpotion_2_2_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ibrowse_4_4_0 }:
          buildMix ({
            name = "httpotion";
            version = "2.2.2";
            src = fetchHex {
              pkg = "httpotion";
              version = "2.2.2";
              sha256 =
                "47c6b6c535592547366fe16bfa175385e7de09eecbb2dc6b0f2cea526ef45fbd";
            };
            beamDeps  = [ ibrowse_4_4_0 ];

            meta = {
              description = ''Fancy HTTP client for Elixir, based on
                            ibrowse.'';
              license = stdenv.lib.licenses.unlicense;
              homepage = "https://github.com/myfreeweb/httpotion";
            };
          } // packageOverrides)
      ) {};

    httpotion_3_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ibrowse_4_4_0 }:
          buildMix ({
            name = "httpotion";
            version = "3.0.2";
            src = fetchHex {
              pkg = "httpotion";
              version = "3.0.2";
              sha256 =
                "aab8afaeab8f9f3496abbd2d210b66d32f68c30d8500747f9bfcdbd71f2299af";
            };
            beamDeps  = [ ibrowse_4_4_0 ];

            meta = {
              description = ''Fancy HTTP client for Elixir, based on
                            ibrowse.'';
              license = stdenv.lib.licenses.unlicense;
              homepage = "https://github.com/myfreeweb/httpotion";
            };
          } // packageOverrides)
      ) {};

    httpotion = httpotion_3_0_2;

    httpotion_cache_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cachex_2_1_0,
          httpotion_3_0_2
        }:
          buildMix ({
            name = "httpotion_cache";
            version = "0.1.0";
            src = fetchHex {
              pkg = "httpotion_cache";
              version = "0.1.0";
              sha256 =
                "4d8a8a72ecf15e79b753fd6d02bf7af528461d243b751420a0461f66895544a4";
            };
            beamDeps  = [ cachex_2_1_0 httpotion_3_0_2 ];

            meta = {
              description = ''Extension to HTTPotion for caching http
                            requests.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/dmitryzuev/httpotion_cache";
            };
          } // packageOverrides)
      ) {};

    httpotion_cache = httpotion_cache_0_1_0;

    httprot_0_2_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          datastructures_0_2_8,
          socket_0_3_12
        }:
          buildMix ({
            name = "httprot";
            version = "0.2.2";
            src = fetchHex {
              pkg = "httprot";
              version = "0.2.2";
              sha256 =
                "fb36d107d4870987a7d62d10c4954bfc9a936d69fd5a2255c258b37543f180cd";
            };
            beamDeps  = [ datastructures_0_2_8 socket_0_3_12 ];

            meta = {
              description = ''HTTP client library'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/meh/httprot";
            };
          } // packageOverrides)
      ) {};

    httprot = httprot_0_2_2;

    huami_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "huami";
            version = "0.0.1";
            src = fetchHex {
              pkg = "huami";
              version = "0.0.1";
              sha256 =
                "c12f38e24e7b085422e5f57c991792cd5045bd083574b1cca0458d8f2dfae40d";
            };

            meta = {
              description = ''A CLI version of flower password writing in
                            Elixir. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/yesmeck/huami.ex";
            };
          } // packageOverrides)
      ) {};

    huami = huami_0_0_1;

    hub_0_2_1 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, phoenix_pubsub_1_0_1
        }:
          buildMix ({
            name = "hub";
            version = "0.2.1";
            src = fetchHex {
              pkg = "hub";
              version = "0.2.1";
              sha256 =
                "60a53d6bb9af21300bf8883ce01162ac9b2834f7e89c482fc6f221ce28f531d2";
            };
            beamDeps  = [ phoenix_pubsub_1_0_1 ];

            meta = {
              longDescription = ''Hub is a PubSub hub with pattern matching
                                subscription. It builds on top of
                                phoenix_pubsub, but phoenix is not required to
                                use Hub.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/vesta-merkur/hub";
            };
          } // packageOverrides)
      ) {};

    hub = hub_0_2_1;

    hubspotex_0_0_6 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_9_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "hubspotex";
            version = "0.0.6";
            src = fetchHex {
              pkg = "hubspotex";
              version = "0.0.6";
              sha256 =
                "02418b72c3b4f7a2d9c2c48cc63f75c172b1190ef2c9f9353408035e1c8b73ef";
            };
            beamDeps  = [ httpoison_0_9_2 poison_2_2_0 ];

            meta = {
              description = ''Hubspot API wrapper'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ryanwinchester/hubspotex";
            };
          } // packageOverrides)
      ) {};

    hubspotex = hubspotex_0_0_6;

    huex_0_6_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "huex";
            version = "0.6.3";
            src = fetchHex {
              pkg = "huex";
              version = "0.6.3";
              sha256 =
                "5ed7907ee1c0c792863f713f89a089b5be0733cf9999d04fda36ec5f5444906a";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''Elixir client for Philips Hue connected light
                            bulbs'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/xavier/huex";
            };
          } // packageOverrides)
      ) {};

    huex = huex_0_6_3;

    hufflehoff_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "hufflehoff";
            version = "0.0.1";
            src = fetchHex {
              pkg = "hufflehoff";
              version = "0.0.1";
              sha256 =
                "f10c6ffceb3b6d161ff5aa4dfeb8fe77affabf073f0bc7059d8296a4256093f2";
            };

            meta = {
              description = ''A Huffman encoder/decoder for HTTP/2 headers.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sideshow/hufflehoff";
            };
          } // packageOverrides)
      ) {};

    hufflehoff = hufflehoff_0_0_1;

    huffman_1_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "huffman";
            version = "1.1.1";
            src = fetchHex {
              pkg = "huffman";
              version = "1.1.1";
              sha256 =
                "6983b0eebb29e6f7b4e971cf46e04ebcf52f073ca97f7ed29b5c0de68d58c496";
            };

            meta = {
              description = ''Huffman encoding and decoding.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/SenecaSystems/huffman";
            };
          } // packageOverrides)
      ) {};

    huffman = huffman_1_1_1;

    hulaaki_0_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "hulaaki";
            version = "0.0.4";
            src = fetchHex {
              pkg = "hulaaki";
              version = "0.0.4";
              sha256 =
                "f1ca49170386190d57dfe21fd3df6f614d44277c6b23c2807d5988c9eb925821";
            };

            meta = {
              description = ''An MQTT 3.1.1 client library written in
                            Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/suvash/hulaaki";
            };
          } // packageOverrides)
      ) {};

    hulaaki = hulaaki_0_0_4;

    hunter_0_4_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_10_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "hunter";
            version = "0.4.1";
            src = fetchHex {
              pkg = "hunter";
              version = "0.4.1";
              sha256 =
                "5a6327701639a9a20fcaec197a2e8db431ed77c8766a9fa4c703da18bfc6279f";
            };
            beamDeps  = [ httpoison_0_10_0 poison_3_1_0 ];

            meta = {
              description = ''Elixir client for Mastodon, a GNU
                            social-compatible micro-blogging service'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/milmazz/hunter";
            };
          } // packageOverrides)
      ) {};

    hunter = hunter_0_4_1;

    hut_1_2_0 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex }:
          buildErlangMk ({
            name = "hut";
            version = "1.2.0";
            src = fetchHex {
              pkg = "hut";
              version = "1.2.0";
              sha256 =
                "097ba947258873dfb4c7697b44677f3ac87dac76ad4a30c0440afefbc18eb233";
            };

            meta = {
              description = ''helper library for making Erlang libraries
                            logging framework agnostic'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tolbrino/hut";
            };
          } // packageOverrides)
      ) {};

    hut = hut_1_2_0;

    hyde_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, exredis_0_2_5 }:
          buildMix ({
            name = "hyde";
            version = "0.0.1";
            src = fetchHex {
              pkg = "hyde";
              version = "0.0.1";
              sha256 =
                "d4424adbf13e2aecafa38f73318885f56bd70eb8e5fede22858af8cf76e2475e";
            };
            beamDeps  = [ exredis_0_2_5 ];

            meta = {
              longDescription = ''Feature Toggles for Elixir - Basic Redis
                                backed feature toggles for individual users or
                                named groups'';

              homepage = "https://github.com/beautifulcode/hyde";
            };
          } // packageOverrides)
      ) {};

    hyde = hyde_0_0_1;

    hydra_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_0_4,
          httpoison_0_8_3,
          plug_1_3_5,
          poison_1_5_2,
          porcelain_2_0_3
        }:
          buildMix ({
            name = "hydra";
            version = "0.0.1";
            src = fetchHex {
              pkg = "hydra";
              version = "0.0.1";
              sha256 =
                "ea35ec756dfaa0390ba53a0313bb50b924517f746922a98e3489bddf8e066b7d";
            };
            beamDeps  = [
                          cowboy_1_0_4
                          httpoison_0_8_3
                          plug_1_3_5
                          poison_1_5_2
                          porcelain_2_0_3
                        ];

            meta = {
              description = ''A multi-headed beast: API gateway, request cache,
                            and data transformations'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/doomspork/hydra";
            };
          } // packageOverrides)
      ) {};

    hydra = hydra_0_0_1;

    hyperbuffs_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exprotobuf_1_2_7,
          phoenix_1_3_0_rc_2,
          plug_protobufs_0_1_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "hyperbuffs";
            version = "0.1.0";
            src = fetchHex {
              pkg = "hyperbuffs";
              version = "0.1.0";
              sha256 =
                "cac221622c0891b76afbe3004161152803a6541a5062ff28102e7834ed0e65a3";
            };
            beamDeps  = [
                          exprotobuf_1_2_7
                          phoenix_1_3_0_rc_2
                          plug_protobufs_0_1_0
                          poison_3_1_0
                        ];

            meta = {
              longDescription = ''HyperBuffs is an Elixir library which
                                strongly connects Phoenix to Protobuf
                                definitions. Based on content negotiation from
                                incoming requests, your controllers will
                                seamlessly accept and respond in either JSON or
                                Protobuf.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hayesgm/hyperbuffs";
            };
          } // packageOverrides)
      ) {};

    hyperbuffs = hyperbuffs_0_1_0;

    hypermedia_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "hypermedia";
            version = "0.0.1";
            src = fetchHex {
              pkg = "hypermedia";
              version = "0.0.1";
              sha256 =
                "595c174772c45206f293f61b338105e61d96dba1436b07ed5b3b12eb07842721";
            };

            meta = {
              description = ''A Elixir library for creating HAL/JSON Hypermedia
                            APIs'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jurriaan/hypermedia";
            };
          } // packageOverrides)
      ) {};

    hypermedia = hypermedia_0_0_1;

    hypermock_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, meck_0_8_4 }:
          buildMix ({
            name = "hypermock";
            version = "0.0.2";
            src = fetchHex {
              pkg = "hypermock";
              version = "0.0.2";
              sha256 =
                "dbb7ad24f651a3bb99475f39f9b0d6b7e9b3f959d8a80577ea6c803a5b548516";
            };
            beamDeps  = [ meck_0_8_4 ];

            meta = {    };
          } // packageOverrides)
      ) {};

    hypermock = hypermock_0_0_2;

    hypex_1_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "hypex";
            version = "1.1.0";
            src = fetchHex {
              pkg = "hypex";
              version = "1.1.0";
              sha256 =
                "32e153bee0dabea8941940711c9ed9a7e15c50fc3d474c5b75b14359fb408363";
            };

            meta = {
              description = ''Fast HyperLogLog implementation for
                            Elixir/Erlang'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zackehh/hypex";
            };
          } // packageOverrides)
      ) {};

    hypex = hypex_1_1_0;

    i18n_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exprintf_0_1_6,
          tipo_0_0_6
        }:
          buildMix ({
            name = "i18n";
            version = "0.0.2";
            src = fetchHex {
              pkg = "i18n";
              version = "0.0.2";
              sha256 =
                "d3fbaccb502540565a9659fd21cff930b12ee698bfdac6d3df6487e2c101891f";
            };
            beamDeps  = [ exprintf_0_1_6 tipo_0_0_6 ];

            meta = {
              description = ''i18n locale translations helpers'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nathanfaucett/ex-i18n";
            };
          } // packageOverrides)
      ) {};

    i18n = i18n_0_0_2;

    iam_role_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, jsone_1_4_3 }:
          buildMix ({
            name = "iam_role";
            version = "1.0.0";
            src = fetchHex {
              pkg = "iam_role";
              version = "1.0.0";
              sha256 =
                "acfc5d5c5130a36dfb2b460f790bd9e32bf39274f17333bd65c28d216983761d";
            };
            beamDeps  = [ jsone_1_4_3 ];

            meta = {
              description = ''Application for automatically fetching AWS IAM
                            role security credentials.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tsharju/iam_role";
            };
          } // packageOverrides)
      ) {};

    iam_role = iam_role_1_0_0;

    iban_tools_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "iban_tools";
            version = "0.1.0";
            src = fetchHex {
              pkg = "iban_tools";
              version = "0.1.0";
              sha256 =
                "ab9e625f29210055542c530cd3e4debf63722e8eca7a8e19b29ba5a443280dc3";
            };

            meta = {
              longDescription = ''Iban validation and helpers
                                https://en.wikipedia.org/wiki/International_Bank_Account_Number'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/pikender/iban_tools";
            };
          } // packageOverrides)
      ) {};

    iban_tools = iban_tools_0_1_0;

    ibm_push_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_6_1,
          httpoison_0_9_2,
          poison_2_2_0,
          uuid_1_1_7
        }:
          buildMix ({
            name = "ibm_push";
            version = "0.1.1";
            src = fetchHex {
              pkg = "ibm_push";
              version = "0.1.1";
              sha256 =
                "7d2916825e27309ef3eb3a266ca825454b8db2cc66b160d7680b46c379ac950c";
            };
            beamDeps  = [
                          hackney_1_6_1 httpoison_0_9_2 poison_2_2_0 uuid_1_1_7
                        ];

            meta = {
              description = ''Wrapper to use IBM Bluemix Push notification REST
                            API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/eyrmedical/ibm_push";
            };
          } // packageOverrides)
      ) {};

    ibm_push = ibm_push_0_1_1;

    ibrowse_4_2_2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "ibrowse";
            version = "4.2.2";
            src = fetchHex {
              pkg = "ibrowse";
              version = "4.2.2";
              sha256 =
                "b800cb7442bcc852c6832821e9d0a7098ff626e1415bddaeff4596640b31c0ae";
            };

            meta = {
              description = ''Erlang HTTP client application'';
              license = with stdenv.lib.licenses; [ free bsd3 ];
              homepage = "https://github.com/cmullaparthi/ibrowse";
            };
          } // packageOverrides)
      ) {};

    ibrowse_4_4_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "ibrowse";
            version = "4.4.0";
            src = fetchHex {
              pkg = "ibrowse";
              version = "4.4.0";
              sha256 =
                "6a8e5988872086f0506bef68311493551ac5beae7c06ba2a00d5e9f97a60f1c2";
            };

            meta = {
              description = ''Erlang HTTP client application'';
              license = with stdenv.lib.licenses; [ free bsd3 ];
              homepage = "https://github.com/cmullaparthi/ibrowse";
            };
          } // packageOverrides)
      ) {};

    ibrowse = ibrowse_4_4_0;

    icalendar_0_2_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, timex_3_1_15 }:
          buildMix ({
            name = "icalendar";
            version = "0.2.2";
            src = fetchHex {
              pkg = "icalendar";
              version = "0.2.2";
              sha256 =
                "c9267f59f9962d1fd696e803c8efe26562d63b52dd01c3871bdc4a078d5d7a3d";
            };
            beamDeps  = [ timex_3_1_15 ];

            meta = {
              description = ''An ICalendar file generator'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lpil/icalendar";
            };
          } // packageOverrides)
      ) {};

    icalendar = icalendar_0_2_2;

    icndb_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exconstructor_1_0_2,
          httpoison_0_9_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "icndb";
            version = "0.1.0";
            src = fetchHex {
              pkg = "icndb";
              version = "0.1.0";
              sha256 =
                "6aa19e19a46082f48fec1816acb88f6093a5d13ab2e4e9f31de040a48e120827";
            };
            beamDeps  = [ exconstructor_1_0_2 httpoison_0_9_2 poison_3_1_0 ];

            meta = {
              description = ''API client for ICNDB API written in Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/MatUrbanski/icndb";
            };
          } // packageOverrides)
      ) {};

    icndb = icndb_0_1_0;

    iconv_1_0_5 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, p1_utils_1_0_9
        }:
          buildRebar3 ({
            name = "iconv";
            version = "1.0.5";
            src = fetchHex {
              pkg = "iconv";
              version = "1.0.5";
              sha256 =
                "367f1e64d0be0b89c991b9c51ff59b9bf83bc70f13297e8da2e9e7a8f7d3b81d";
            };
            compilePorts = true;

            beamDeps  = [ p1_utils_1_0_9 ];

            meta = {
              description = ''Fast encoding conversion library for Erlang /
                            Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/processone/iconv";
            };
          } // packageOverrides)
      ) {};

    iconv = iconv_1_0_5;

    id3v2_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "id3v2";
            version = "0.1.2";
            src = fetchHex {
              pkg = "id3v2";
              version = "0.1.2";
              sha256 =
                "62a6ae8dfaf3d45c385861106153e1e91a3d8118580e92a2841977e4686ffe44";
            };

            meta = {
              description = ''ID3v2 tag header reading'';
              license = stdenv.lib.licenses.zlib;
              homepage = "https://github.com/Cheezmeister/elixir-id3v2";
            };
          } // packageOverrides)
      ) {};

    id3v2 = id3v2_0_1_2;

    idconex_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "idconex";
            version = "0.2.0";
            src = fetchHex {
              pkg = "idconex";
              version = "0.2.0";
              sha256 =
                "28165ffac73a144fd3f10c664c73002747adc89c58e19f705b6697d1af5a890d";
            };

            meta = {
              longDescription = ''Identicon library with different hashing
                                algorithms and variable grid- and
                                image-sizes.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/code-bio/idconex";
            };
          } // packageOverrides)
      ) {};

    idconex = idconex_0_2_0;

    identicon_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "identicon";
            version = "0.2.0";
            src = fetchHex {
              pkg = "identicon";
              version = "0.2.0";
              sha256 =
                "38b11bb3ed2c76956fcbf8673be8cbf6570ef8a85d92b51ce45304ed0368d88c";
            };

            meta = {
              description = ''Elixir library for generating 5x5 symmetrical
                            identicons'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/rbishop/identicon";
            };
          } // packageOverrides)
      ) {};

    identicon = identicon_0_2_0;

    idfk_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, timex_3_0_5 }:
          buildMix ({
            name = "idfk";
            version = "0.1.0";
            src = fetchHex {
              pkg = "idfk";
              version = "0.1.0";
              sha256 =
                "dab162904f49c852db763719364d5b3e6d75bfc319fe3d8f5179c6bb656acf6d";
            };
            beamDeps  = [ timex_3_0_5 ];

            meta = {
              description = ''The library of Elixir chunks of code that didn`t
                            clearly belong anywhere else.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/amorphid/idfk";
            };
          } // packageOverrides)
      ) {};

    idfk = idfk_0_1_0;

    idl_1_0_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "idl";
            version = "1.0.1";
            src = fetchHex {
              pkg = "idl";
              version = "1.0.1";
              sha256 =
                "228032d6adcbdb5f2d3654fca757eb4be5deeb7741dcfea4eaf7137f3969ccf3";
            };

            meta = {
              description = ''Rebar3 IDL Compiler'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sebastiw/rebar3_idl_compiler";
            };
          } // packageOverrides)
      ) {};

    idl = idl_1_0_1;

    idna_1_0_2 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex }:
          buildErlangMk ({
            name = "idna";
            version = "1.0.2";
            src = fetchHex {
              pkg = "idna";
              version = "1.0.2";
              sha256 =
                "a5d645e307aa4f67efe31682f720b7eaf431ab148b3d6fb66cbaf6314499610f";
            };

            meta = {
              description = ''A pure Erlang IDNA implementation'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/benoitc/erlang-idna";
            };
          } // packageOverrides)
      ) {};

    idna_1_0_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "idna";
            version = "1.0.3";
            src = fetchHex {
              pkg = "idna";
              version = "1.0.3";
              sha256 =
                "357d489a51112db4f216034406834f9172b3c0ff5a12f83fb28b25ca271541d1";
            };

            meta = {
              description = ''A pure Erlang IDNA implementation'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/benoitc/erlang-idna";
            };
          } // packageOverrides)
      ) {};

    idna_1_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "idna";
            version = "1.1.0";
            src = fetchHex {
              pkg = "idna";
              version = "1.1.0";
              sha256 =
                "d399393011cd2fa93761d70199b604b2f055bcf6cb45cac922870e122d2eb2fe";
            };

            meta = {
              description = ''A pure Erlang IDNA implementation'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/benoitc/erlang-idna";
            };
          } // packageOverrides)
      ) {};

    idna_1_2_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "idna";
            version = "1.2.0";
            src = fetchHex {
              pkg = "idna";
              version = "1.2.0";
              sha256 =
                "1d724cdafb66397e61774ead242c9b725de7033cde8ea98fa4a91e64ac5ef5b3";
            };

            meta = {
              description = ''A pure Erlang IDNA implementation'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/benoitc/erlang-idna";
            };
          } // packageOverrides)
      ) {};

    idna_4_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "idna";
            version = "4.0.0";
            src = fetchHex {
              pkg = "idna";
              version = "4.0.0";
              sha256 =
                "f1b699f7275728538da7b5e35679f9e0f41ad8e0a49896e6a27b61867ed344eb";
            };

            meta = {
              description = ''A pure Erlang IDNA implementation'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/benoitc/erlang-idna";
            };
          } // packageOverrides)
      ) {};

    idna_5_0_1 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          unicode_util_compat_0_1_0
        }:
          buildRebar3 ({
            name = "idna";
            version = "5.0.1";
            src = fetchHex {
              pkg = "idna";
              version = "5.0.1";
              sha256 =
                "29acfb9d25192b024ffca72beba29eec77ec48f3a0db8a124662c0b58bdc533d";
            };

            beamDeps  = [ unicode_util_compat_0_1_0 ];

            meta = {
              description = ''A pure Erlang IDNA implementation'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/benoitc/erlang-idna";
            };
          } // packageOverrides)
      ) {};

    idna_5_0_2 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          unicode_util_compat_0_2_0
        }:
          buildRebar3 ({
            name = "idna";
            version = "5.0.2";
            src = fetchHex {
              pkg = "idna";
              version = "5.0.2";
              sha256 =
                "352278f34e274a2e000b20e41aa74d6bc9a622407dc043b550a3cd3b7ac5457d";
            };

            beamDeps  = [ unicode_util_compat_0_2_0 ];

            meta = {
              description = ''A pure Erlang IDNA implementation'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/benoitc/erlang-idna";
            };
          } // packageOverrides)
      ) {};

    idna = idna_5_0_2;

    ieex_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ieex";
            version = "0.0.3";
            src = fetchHex {
              pkg = "ieex";
              version = "0.0.3";
              sha256 =
                "c448a86c7979bc75f98e9eb32473041975fb633bc9715f1965958e4a9dbbd1ff";
            };

            meta = {
              description = ''Biblioteca para validacao de Inscricao
                            Estadual'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/edmaarcosta/IEEx";
            };
          } // packageOverrides)
      ) {};

    ieex = ieex_0_0_3;

    ielixir_0_9_5 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_1_0_1,
          sqlite_ecto_0_5_0
        }:
          buildMix ({
            name = "ielixir";
            version = "0.9.5";
            src = fetchHex {
              pkg = "ielixir";
              version = "0.9.5";
              sha256 =
                "77dae7b4b147da21161b6de0662d3bdeb13d15b12866b2e67add5ec3c550b7ce";
            };
            beamDeps  = [ ecto_1_0_1 sqlite_ecto_0_5_0 ];

            meta = {
              description = ''Jupyter`s kernel for Elixir programming
                            language'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/pprzetacznik/ielixir";
            };
          } // packageOverrides)
      ) {};

    ielixir = ielixir_0_9_5;

    ieq_gateway_0_1_4 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, nerves_uart_0_1_2
        }:
          buildMix ({
            name = "ieq_gateway";
            version = "0.1.4";
            src = fetchHex {
              pkg = "ieq_gateway";
              version = "0.1.4";
              sha256 =
                "f58264ca1d8fbfc3912209c4d4914898794a6f6e9ca5a36c61acfe1a12206d5b";
            };
            beamDeps  = [ nerves_uart_0_1_2 ];

            meta = {
              description = ''A Client for the RFM69-USB-Gateway and Indoor Air
                            Quality Sensor'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/NationalAssociationOfRealtors/ieq_gateway";
            };
          } // packageOverrides)
      ) {};

    ieq_gateway = ieq_gateway_0_1_4;

    ierl_0_1_2 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          getopt_0_8_2,
          jupyter_0_1_0,
          lager_3_4_2,
          lfe_1_2_0
        }:
          buildRebar3 ({
            name = "ierl";
            version = "0.1.2";
            src = fetchHex {
              pkg = "ierl";
              version = "0.1.2";
              sha256 =
                "4f980fb253aa9514481e63af2d9ef4d21b182ed9b97f32803f6d952571cd9550";
            };

            beamDeps  = [ getopt_0_8_2 jupyter_0_1_0 lager_3_4_2 lfe_1_2_0 ];

            meta = {
              description = ''Erlang jupyter frontend tool to install and run
                            kernels'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/filmor/ierl";
            };
          } // packageOverrides)
      ) {};

    ierl = ierl_0_1_2;

    if_ok_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "if_ok";
            version = "0.1.1";
            src = fetchHex {
              pkg = "if_ok";
              version = "0.1.1";
              sha256 =
                "adf8bfee4febed3c4634faa18d71d08ba0ee29ba2ccc7663810c4a21aa386b81";
            };

            meta = {
              longDescription = ''if_ok is a small utility library that let`s
                                you create pipelines that expect ok tuples to
                                continue in a very readable way.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jfrolich/if_ok";
            };
          } // packageOverrides)
      ) {};

    if_ok = if_ok_0_1_1;

    iframe_headers_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          plug_1_3_5
        }:
          buildMix ({
            name = "iframe_headers";
            version = "0.1.0";
            src = fetchHex {
              pkg = "iframe_headers";
              version = "0.1.0";
              sha256 =
                "90826a6dd3e9f5cddf2000b6ccdf84ea3328c87dbf60c86978f11d92b5c5a99c";
            };
            beamDeps  = [ cowboy_1_1_2 plug_1_3_5 ];

            meta = {
              description = ''Set HTTP headers to work inside an iframe.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/fleveque/iframe_headers";
            };
          } // packageOverrides)
      ) {};

    iframe_headers = iframe_headers_0_1_0;

    ifttt_oauth_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, oauth2_0_9_1 }:
          buildMix ({
            name = "ifttt_oauth";
            version = "0.0.1";
            src = fetchHex {
              pkg = "ifttt_oauth";
              version = "0.0.1";
              sha256 =
                "9029506687be770891b3fb54d9e39bab9dd0f65a9551c6b335a3b0a60dc3026c";
            };
            beamDeps  = [ oauth2_0_9_1 ];

            meta = {
              longDescription = ''A simple Elixir wrapper around
                                scrogson/oauth2 to retrieve IFTTT Bearer tokens
                                from their mobile api.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nickgal/ifttt_oauth";
            };
          } // packageOverrides)
      ) {};

    ifttt_oauth = ifttt_oauth_0_0_1;

    igc_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "igc";
            version = "0.1.0";
            src = fetchHex {
              pkg = "igc";
              version = "0.1.0";
              sha256 =
                "ef7a01ef1dc99947b780088dcc8723313a0bd08d433c44061e4377ca39426c96";
            };

            meta = {
              description = ''Library for parsing IGC paragliding track
                            files.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/balexand/igc";
            };
          } // packageOverrides)
      ) {};

    igc = igc_0_1_0;

    ignorant_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ignorant";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ignorant";
              version = "0.1.0";
              sha256 =
                "663c912ac9a50b147d18c18fde4fc5529e77c61658f5724488b8566787bbb5a7";
            };

            meta = {
              description = ''Selectively ignore parts of a data structure to
                            allow for partial comparison.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/campezzi/ignorant";
            };
          } // packageOverrides)
      ) {};

    ignorant = ignorant_0_1_0;

    iland_0_1_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_9_2,
          poison_2_2_0,
          timex_3_1_15
        }:
          buildMix ({
            name = "iland";
            version = "0.1.3";
            src = fetchHex {
              pkg = "iland";
              version = "0.1.3";
              sha256 =
                "8c7157ad75d7d503cffab4224fe643c58c94cf99bd06501560caeb3fbf78a1af";
            };
            beamDeps  = [ httpoison_0_9_2 poison_2_2_0 timex_3_1_15 ];

            meta = {
              description = ''Elixir SDK for the iland cloud api
                            (https://api.ilandcloud.com)'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/ilanddev/elixir-sdk";
            };
          } // packageOverrides)
      ) {};

    iland = iland_0_1_3;

    image64_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "image64";
            version = "0.0.2";
            src = fetchHex {
              pkg = "image64";
              version = "0.0.2";
              sha256 =
                "d7d0aea09060ed6f73a2985e5915bd52f2a40dfebd578fdfe79fa5462e9fb628";
            };

            meta = {
              description = ''A tool for working with base64 encoded images'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/Mechasparrow/image64";
            };
          } // packageOverrides)
      ) {};

    image64 = image64_0_0_2;

    image_lib_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          relax_yaml_0_1_4,
          timex_3_1_15
        }:
          buildMix ({
            name = "image_lib";
            version = "0.1.0";
            src = fetchHex {
              pkg = "image_lib";
              version = "0.1.0";
              sha256 =
                "265c9ddc13cb7f8331ebf64c1e9058202f4ce4b2ab40232aa6e7871690b6cc87";
            };
            beamDeps  = [ relax_yaml_0_1_4 timex_3_1_15 ];

            meta = {
              description = ''Image Lib with some tools'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gialib/image_lib";
            };
          } // packageOverrides)
      ) {};

    image_lib = image_lib_0_1_0;

    imagineer_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, apex_1_0_0 }:
          buildMix ({
            name = "imagineer";
            version = "0.3.0";
            src = fetchHex {
              pkg = "imagineer";
              version = "0.3.0";
              sha256 =
                "2bee9fd5743dd63befd19c0587f58e9ab681bb40f7da7d2be8a3b987168e888b";
            };
            beamDeps  = [ apex_1_0_0 ];

            meta = {
              description = ''Image processing in Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/SenecaSystems/imagineer";
            };
          } // packageOverrides)
      ) {};

    imagineer = imagineer_0_3_0;

    imgex_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "imgex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "imgex";
              version = "0.1.0";
              sha256 =
                "783e78b0624b87d1431d8acaa790998ac75d8654312e5799eff7b12956246c49";
            };

            meta = {
              description = ''Unofficial client library for generating imgix
                            URLs in Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ianwalter/imgex";
            };
          } // packageOverrides)
      ) {};

    imgex = imgex_0_1_0;

    immortal_0_2_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "immortal";
            version = "0.2.2";
            src = fetchHex {
              pkg = "immortal";
              version = "0.2.2";
              sha256 =
                "51d02fde433738a1cc1b935d4972a73c1f660f98a278aedef9f9b78cf1abd954";
            };

            meta = {
              description = ''Helpers for fault-tolerant OTP applications'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/danielberkompas/immortal";
            };
          } // packageOverrides)
      ) {};

    immortal = immortal_0_2_2;

    inaka_aleppo_1_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "inaka_aleppo";
            version = "1.0.0";
            src = fetchHex {
              pkg = "inaka_aleppo";
              version = "1.0.0";
              sha256 =
                "06754b98702607ec742d8315b2e79188b38fbb60e3f1a1582de5673e230f74d4";
            };

            meta = {
              description = ''Aleppo: ALternative Erlang Pre-ProcessOr'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/inaka/aleppo";
            };
          } // packageOverrides)
      ) {};

    inaka_aleppo = inaka_aleppo_1_0_0;

    inaka_emysql_0_4_4 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "inaka_emysql";
            version = "0.4.4";
            src = fetchHex {
              pkg = "inaka_emysql";
              version = "0.4.4";
              sha256 =
                "9dec179b85e91523ff23942ff77716f98a58650087446d478cbc56160ab80ee3";
            };

            meta = {
              description = ''Emysql - Erlang MySQL driver'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/inaka/Emysql";
            };
          } // packageOverrides)
      ) {};

    inaka_emysql = inaka_emysql_0_4_4;

    inaka_iso8601_1_1_2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "inaka_iso8601";
            version = "1.1.2";
            src = fetchHex {
              pkg = "inaka_iso8601";
              version = "1.1.2";
              sha256 =
                "8964665b3edbc8c4b390512d9de429a550cc32ff3fa3583f2e6f14925127d480";
            };

            meta = {
              description = ''ISO 8601 date parser and formatter.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/inaka/erlang_iso8601";
            };
          } // packageOverrides)
      ) {};

    inaka_iso8601 = inaka_iso8601_1_1_2;

    inaka_mixer_0_1_5 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "inaka_mixer";
            version = "0.1.5";
            src = fetchHex {
              pkg = "inaka_mixer";
              version = "0.1.5";
              sha256 =
                "37af35b1c17a94a0cb643cba23cba2ca68d6fe51c3ad8337629d4c3c017cc912";
            };

            meta = {
              description = ''Mix in public functions from external modules'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/inaka/mixer";
            };
          } // packageOverrides)
      ) {};

    inaka_mixer = inaka_mixer_0_1_5;

    inch_ex_0_5_6 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_1_0_2 }:
          buildMix ({
            name = "inch_ex";
            version = "0.5.6";
            src = fetchHex {
              pkg = "inch_ex";
              version = "0.5.6";
              sha256 =
                "7123ca0450686a61416a06cd38e26af18fd0f8c1cff5214770a957c6e0724338";
            };
            beamDeps  = [ poison_1_0_2 ];

            meta = {
              description = ''Provides a Mix task that gives you hints where to
                            improve your inline docs'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rrrene/inch_ex";
            };
          } // packageOverrides)
      ) {};

    inch_ex = inch_ex_0_5_6;

    inch_test_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          earmark_1_2_2,
          ex_doc_0_16_1,
          inch_ex_0_5_6
        }:
          buildMix ({
            name = "inch_test";
            version = "0.0.1";
            src = fetchHex {
              pkg = "inch_test";
              version = "0.0.1";
              sha256 =
                "41405c11b22fad3f3b49127f881c2c4c79b206c04b8cb77268828380779a374d";
            };
            beamDeps  = [ earmark_1_2_2 ex_doc_0_16_1 inch_ex_0_5_6 ];

            meta = {    };
          } // packageOverrides)
      ) {};

    inch_test = inch_test_0_0_1;

    indefinite_article_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "indefinite_article";
            version = "0.0.1";
            src = fetchHex {
              pkg = "indefinite_article";
              version = "0.0.1";
              sha256 =
                "cb59d3373c5ff05693f74f445e7807d1fe5c38b9cfa6bcedfd9efedb4a0861ae";
            };

            meta = {
              description = ''Returns you the indefinite article of a string
                            (*a* banana, *an* apple, etc)'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/Buyapowa/indefinite_article";
            };
          } // packageOverrides)
      ) {};

    indefinite_article = indefinite_article_0_0_1;

    indiana_0_1_5 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          atmo_0_1_0,
          bureaucrat_0_1_4,
          ecto_2_1_4,
          httpoison_0_9_2,
          phoenix_1_3_0_rc_2
        }:
          buildMix ({
            name = "indiana";
            version = "0.1.5";
            src = fetchHex {
              pkg = "indiana";
              version = "0.1.5";
              sha256 =
                "07c931c97d8ef34b5154315c5e486a11d3225201f146a08c22a91a21f0bf64d1";
            };
            beamDeps  = [
                          atmo_0_1_0
                          bureaucrat_0_1_4
                          ecto_2_1_4
                          httpoison_0_9_2
                          phoenix_1_3_0_rc_2
                        ];

            meta = {
              description = ''A metrics library to make connecting with New
                            Relic easier.'';
              license = stdenv.lib.licenses.mit;
              homepage = "http://github.com/zbarnes757/indiana";
            };
          } // packageOverrides)
      ) {};

    indiana = indiana_0_1_5;

    indifferent_0_9_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "indifferent";
            version = "0.9.1";
            src = fetchHex {
              pkg = "indifferent";
              version = "0.9.1";
              sha256 =
                "67f416db72f482d9b1a5ad7fcdad25a448f3eb6138ed6096f638a77a83577fb5";
            };

            meta = {
              description = ''Indifferent access on maps/lists/tuples with
                            custom key transforms.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/vic/indifferent";
            };
          } // packageOverrides)
      ) {};

    indifferent = indifferent_0_9_1;

    inet_cidr_1_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "inet_cidr";
            version = "1.0.2";
            src = fetchHex {
              pkg = "inet_cidr";
              version = "1.0.2";
              sha256 =
                "5543bbe0fd45cd3717ce54c06911d4f50df39461308e42315054dc54ad987f2a";
            };

            meta = {
              longDescription = ''Classless Inter-Domain Routing (CIDR) library
                                for Elixir Compatible with Erlang`s :inet module
                                and support for IPv4 and IPv6'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/cobenian/inet_cidr";
            };
          } // packageOverrides)
      ) {};

    inet_cidr = inet_cidr_1_0_2;

    inet_tcp_dist_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, dns_0_0_4 }:
          buildMix ({
            name = "inet_tcp_dist";
            version = "0.1.3";
            src = fetchHex {
              pkg = "inet_tcp_dist";
              version = "0.1.3";
              sha256 =
                "7640cf5c43e0d78bb689d06bbe062d4b3ee07064c79a495f55d007ecc54f9901";
            };
            beamDeps  = [ dns_0_0_4 ];

            meta = {
              longDescription = ''This module replaces the standard
                                `:inet_tcp_dist` from Erlang and introduces a
                                new callback. The EPMD module is required to
                                have `address_and_port_please(node)` implemented
                                which should return `{ip, port}`. It is not
                                checked during compilation since the callback is
                                done dynamically.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tverlaan/inet_tcp_dist";
            };
          } // packageOverrides)
      ) {};

    inet_tcp_dist = inet_tcp_dist_0_1_3;

    infix_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "infix";
            version = "0.1.0";
            src = fetchHex {
              pkg = "infix";
              version = "0.1.0";
              sha256 =
                "d539c9e490f6a881f0c8c764c9662bb4b4b4e8426d688d758425d559b9734d28";
            };

            meta = {
              description = ''Native infix operators that uses Protocols'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/imranismail/infix";
            };
          } // packageOverrides)
      ) {};

    infix = infix_0_1_0;

    inflect_0_0_11 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "inflect";
            version = "0.0.11";
            src = fetchHex {
              pkg = "inflect";
              version = "0.0.11";
              sha256 =
                "36636ccb31b1ca9f34d95af8fff97aa68d34d925c5128dc8f04fc77764fa208a";
            };

            meta = {
              description = ''case sensitive regular expression for splitting
                            strings'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nathanfaucett/ex-inflect";
            };
          } // packageOverrides)
      ) {};

    inflect = inflect_0_0_11;

    inflections_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, inflector_0_0_11 }:
          buildMix ({
            name = "inflections";
            version = "0.0.1";
            src = fetchHex {
              pkg = "inflections";
              version = "0.0.1";
              sha256 =
                "f1fe5f35313eb1bd6bfc3a0d5e3bd169a31bfbf09021b9928ecfff3052731efc";
            };
            beamDeps  = [ inflector_0_0_11 ];

            meta = {
              description = ''inflector helpers for managing different
                            locales'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nathanfaucett/ex-inflections";
            };
          } // packageOverrides)
      ) {};

    inflections = inflections_0_0_1;

    inflections_en_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          inflections_0_0_1,
          inflector_0_0_11
        }:
          buildMix ({
            name = "inflections_en";
            version = "0.0.1";
            src = fetchHex {
              pkg = "inflections_en";
              version = "0.0.1";
              sha256 =
                "28c8e2f52974879499ea039bc8bf369b75e978f4ee60de8641e7efdef575bd77";
            };
            beamDeps  = [ inflections_0_0_1 inflector_0_0_11 ];

            meta = {
              description = ''inflector english rules'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nathanfaucett/ex-inflections_en";
            };
          } // packageOverrides)
      ) {};

    inflections_en = inflections_en_0_0_1;

    inflections_es_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          inflections_0_0_1,
          inflector_0_0_11
        }:
          buildMix ({
            name = "inflections_es";
            version = "0.0.1";
            src = fetchHex {
              pkg = "inflections_es";
              version = "0.0.1";
              sha256 =
                "28c6323f851d2287f77d7dd0b888e9888f5f785ff105a356078aff4a46544495";
            };
            beamDeps  = [ inflections_0_0_1 inflector_0_0_11 ];

            meta = {
              description = ''inflector spanish rules'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nathanfaucett/ex-inflections_es";
            };
          } // packageOverrides)
      ) {};

    inflections_es = inflections_es_0_0_1;

    inflector_0_0_11 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "inflector";
            version = "0.0.11";
            src = fetchHex {
              pkg = "inflector";
              version = "0.0.11";
              sha256 =
                "4abd1e267d0df9536d3f54c579d74a0951fbbc6100e4b034a0905d99296a9e08";
            };

            meta = {
              description = ''simple rule based inflector'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nathanfaucett/ex-inflector";
            };
          } // packageOverrides)
      ) {};

    inflector = inflector_0_0_11;

    inflectorex_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "inflectorex";
            version = "0.1.2";
            src = fetchHex {
              pkg = "inflectorex";
              version = "0.1.2";
              sha256 =
                "28221bcbfe2769dc880c2b60199af81dd5135ad99969dd58ef8091eebc5d2ea9";
            };

            meta = {
              description = ''Singularize and pluralize english nouns.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/girishramnani/inflector";
            };
          } // packageOverrides)
      ) {};

    inflectorex = inflectorex_0_1_2;

    inflex_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "inflex";
            version = "0.3.0";
            src = fetchHex {
              pkg = "inflex";
              version = "0.3.0";
              sha256 =
                "2cb9896a2572eb0989d92d7d98653829e079ccb804aa1b98beafff7678275852";
            };

            meta = {
              description = ''An Elixir library for handling word
                            inflections.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/nurugger07/inflex";
            };
          } // packageOverrides)
      ) {};

    inflex_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "inflex";
            version = "1.0.0";
            src = fetchHex {
              pkg = "inflex";
              version = "1.0.0";
              sha256 =
                "549ebe94420051cdf845028372d1f89c8fbdd7b5f5ddd51e0619b827b7be6793";
            };

            meta = {
              description = ''An Elixir library for handling word
                            inflections.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/nurugger07/inflex";
            };
          } // packageOverrides)
      ) {};

    inflex_1_4_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "inflex";
            version = "1.4.1";
            src = fetchHex {
              pkg = "inflex";
              version = "1.4.1";
              sha256 =
                "d316fecd9db83db97828bbcbdb689f5c412e3aaf658329cf479cad5baa856c92";
            };

            meta = {
              description = ''An Elixir library for handling word
                            inflections.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/nurugger07/inflex";
            };
          } // packageOverrides)
      ) {};

    inflex_1_5_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "inflex";
            version = "1.5.0";
            src = fetchHex {
              pkg = "inflex";
              version = "1.5.0";
              sha256 =
                "d48609edc5bb7901b95dcc00c1e38f259e8006904865a028954ccfe9336a3384";
            };

            meta = {
              description = ''An Elixir library for handling word
                            inflections.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/nurugger07/inflex";
            };
          } // packageOverrides)
      ) {};

    inflex_1_6_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "inflex";
            version = "1.6.0";
            src = fetchHex {
              pkg = "inflex";
              version = "1.6.0";
              sha256 =
                "e5ca9ea3243530188340a3777b65ea340dbcb1d960cd5a03015e4f936ed2d2ca";
            };

            meta = {
              description = ''An Elixir library for handling word
                            inflections.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/nurugger07/inflex";
            };
          } // packageOverrides)
      ) {};

    inflex_1_7_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "inflex";
            version = "1.7.0";
            src = fetchHex {
              pkg = "inflex";
              version = "1.7.0";
              sha256 =
                "34c4ef27e94866799da4919e4544890d8822a04de9b1203cea8b0174c5b3abfd";
            };

            meta = {
              description = ''An Elixir library for handling word
                            inflections.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/nurugger07/inflex";
            };
          } // packageOverrides)
      ) {};

    inflex_1_8_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "inflex";
            version = "1.8.1";
            src = fetchHex {
              pkg = "inflex";
              version = "1.8.1";
              sha256 =
                "f9d542ec03df73be5106a72357572728d83c4f1f6824d0a080bdf472784c49e6";
            };

            meta = {
              description = ''An Elixir library for handling word
                            inflections.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/nurugger07/inflex";
            };
          } // packageOverrides)
      ) {};

    inflex = inflex_1_8_1;

    influxdb_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, jsone_1_4_3 }:
          buildMix ({
            name = "influxdb";
            version = "0.2.1";
            src = fetchHex {
              pkg = "influxdb";
              version = "0.2.1";
              sha256 =
                "7f4c4601ed3d72d2339cd1232deecb18d5c8df605548a9313073332008a62c42";
            };
            beamDeps  = [ jsone_1_4_3 ];

            meta = {
              description = ''InfluxDB client library'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/kopera/erlang-influxdb";
            };
          } // packageOverrides)
      ) {};

    influxdb = influxdb_0_2_1;

    infobip_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          erlsom_1_4_1,
          httpoison_0_11_2,
          xml_builder_0_0_9
        }:
          buildMix ({
            name = "infobip";
            version = "0.1.1";
            src = fetchHex {
              pkg = "infobip";
              version = "0.1.1";
              sha256 =
                "0a59d019c915243df67663018f165cd6980330a8a3f787a371c30819114dcde2";
            };
            beamDeps  = [ erlsom_1_4_1 httpoison_0_11_2 xml_builder_0_0_9 ];

            meta = {
              description = ''A simple Infobip REST API client for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/craigp/elixir-infobip";
            };
          } // packageOverrides)
      ) {};

    infobip = infobip_0_1_1;

    informant_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "informant";
            version = "0.1.0";
            src = fetchHex {
              pkg = "informant";
              version = "0.1.0";
              sha256 =
                "381a54f8889e4d5bb7acdda95ace768aca105938cfd2c9d8c0b7dc275baa06b0";
            };

            meta = {
              description = ''Distributes state and events to subscribers'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ghitchens/informant";
            };
          } // packageOverrides)
      ) {};

    informant = informant_0_1_0;

    infuse_0_3_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_0_4,
          fs_3_4_0,
          mime_1_1_0,
          plug_1_3_5,
          simplates_0_2_0
        }:
          buildMix ({
            name = "infuse";
            version = "0.3.2";
            src = fetchHex {
              pkg = "infuse";
              version = "0.3.2";
              sha256 =
                "9a61aabd0c0849156531964599f7098afccf1579d761bd5af630690a566ad9ac";
            };
            beamDeps  = [
                          cowboy_1_0_4
                          fs_3_4_0
                          mime_1_1_0
                          plug_1_3_5
                          simplates_0_2_0
                        ];

            meta = {
              description = ''A simple web framework that serves from the
                            filesystem using Simplates!'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/LawfulGood/infuse";
            };
          } // packageOverrides)
      ) {};

    infuse = infuse_0_3_2;

    ini_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ini";
            version = "0.0.1";
            src = fetchHex {
              pkg = "ini";
              version = "0.0.1";
              sha256 =
                "96b86cf664ca8247cdad166c29251ef4ddc156f16f906bdf2ea1c37831fbf804";
            };

            meta = {
              description = ''Module to parse ini files.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nathanjohnson320/ini";
            };
          } // packageOverrides)
      ) {};

    ini = ini_0_0_1;

    injectanator_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "injectanator";
            version = "0.0.1";
            src = fetchHex {
              pkg = "injectanator";
              version = "0.0.1";
              sha256 =
                "41fe02e73e351dca98a2bbc5dc5b032f4f442dd1d25a73420185ad8ac28797e4";
            };

            meta = {
              description = ''Dependency injection for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Gwash3189/spyanator";
            };
          } // packageOverrides)
      ) {};

    injectanator = injectanator_0_0_1;

    injex_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "injex";
            version = "1.0.1";
            src = fetchHex {
              pkg = "injex";
              version = "1.0.1";
              sha256 =
                "22d5a8399e1b4db6575449d832ca5dd42e6a3c86c5c336ba502a4756ded90565";
            };

            meta = {
              description = ''A simple way to describe dependencies that can be
                            replaced at test time.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/blatyo/injex";
            };
          } // packageOverrides)
      ) {};

    injex = injex_1_0_1;

    ink_0_7_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_3_1_0 }:
          buildMix ({
            name = "ink";
            version = "0.7.2";
            src = fetchHex {
              pkg = "ink";
              version = "0.7.2";
              sha256 =
                "532d6e47df21103ff2f0130bd90d0b6f9f09d881278c9e1b8706708206eae2ed";
            };
            beamDeps  = [ poison_3_1_0 ];

            meta = {
              description = ''A backend for the Elixir Logger that logs JSON
                            and can filter sensitive data.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ivx/ink";
            };
          } // packageOverrides)
      ) {};

    ink = ink_0_7_2;

    inquisitor_0_5_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "inquisitor";
            version = "0.5.0";
            src = fetchHex {
              pkg = "inquisitor";
              version = "0.5.0";
              sha256 =
                "a01c20d4502d92215504351ab332cfac4b7680053a4ed878080f203a3969520e";
            };

            meta = {
              description = ''Easily build extendable and composable Ecto
                            queries.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dockyard/inquisitor";
            };
          } // packageOverrides)
      ) {};

    inquisitor = inquisitor_0_5_0;

    inquisitor_jsonapi_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_4,
          inquisitor_0_5_0
        }:
          buildMix ({
            name = "inquisitor_jsonapi";
            version = "0.1.0";
            src = fetchHex {
              pkg = "inquisitor_jsonapi";
              version = "0.1.0";
              sha256 =
                "ac0f3ea677b7d314101d2f995f0623c0f7a307ed85be8afcff7b17e6ee77b757";
            };
            beamDeps  = [ ecto_2_1_4 inquisitor_0_5_0 ];

            meta = {
              description = ''JSON API Handlers for Inquisitor'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/DockYard/inquisitor_jsonapi";
            };
          } // packageOverrides)
      ) {};

    inquisitor_jsonapi = inquisitor_jsonapi_0_1_0;

    insert_ordered_set_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "insert_ordered_set";
            version = "0.0.1";
            src = fetchHex {
              pkg = "insert_ordered_set";
              version = "0.0.1";
              sha256 =
                "78ebc47d780aa1e8fabce7d4f4d5f3b9c90e1443514ad830b32f7c5184f87634";
            };

            meta = {
              longDescription = ''Provides a data structure with the following
                                properties: 1. Contains unique values. 2. O(1)
                                manipulation operations (e.g. insert, delete) by
                                using an underlying Map. 3. Preserves insertion
                                order when converting to a list. Allows reverse
                                insertion ordering.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/localshred/insert_ordered_set";
            };
          } // packageOverrides)
      ) {};

    insert_ordered_set = insert_ordered_set_0_0_1;

    insight_0_1_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_8_3,
          poison_1_5_2
        }:
          buildMix ({
            name = "insight";
            version = "0.1.4";
            src = fetchHex {
              pkg = "insight";
              version = "0.1.4";
              sha256 =
                "97b4bfd6f0b595b3febca7ea2f0bdf5cb429c18309f7acc8a2a308847aaded07";
            };
            beamDeps  = [ httpoison_0_8_3 poison_1_5_2 ];

            meta = {
              description = ''Elixir package for consuming any Insight-powered
                            Bitcoin explorer.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/stampery/elixir-insight";
            };
          } // packageOverrides)
      ) {};

    insight = insight_0_1_4;

    insights_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "insights";
            version = "0.0.2";
            src = fetchHex {
              pkg = "insights";
              version = "0.0.2";
              sha256 =
                "92794ab7ba760a7b17ffac1f98ecff1a848148d15a1d9fabe58b0150767cddbd";
            };

            meta = {
              longDescription = ''Insights is a wrapper for sending and data
                                capture for keen.io or others adapters'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/gullitmiranda/insights";
            };
          } // packageOverrides)
      ) {};

    insights = insights_0_0_2;

    inspector_gadget_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "inspector_gadget";
            version = "0.2.0";
            src = fetchHex {
              pkg = "inspector_gadget";
              version = "0.2.0";
              sha256 =
                "d2e68b4d76122372924562b53bb4db26e89e9d6d76ec029cadb62e90fcbb2639";
            };

            meta = {
              description = ''Helpers for debugging & inspecting code flow'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/expede/inspector_gadget";
            };
          } // packageOverrides)
      ) {};

    inspector_gadget = inspector_gadget_0_2_0;

    insta_scrapex_0_5_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "insta_scrapex";
            version = "0.5.2";
            src = fetchHex {
              pkg = "insta_scrapex";
              version = "0.5.2";
              sha256 =
                "db34c90df2c1cf8fbef34b62b3c37b5f0099c403905e22eb2ff0e15098f40c17";
            };
            beamDeps  = [ httpoison_0_11_2 poison_2_2_0 ];

            meta = {
              description = ''Scrapes Instagram JSON and HTML endpoints without
                            an API key'';
              license = stdenv.lib.licenses.unlicense;
              homepage = "https://github.com/preciz/insta_scrapex";
            };
          } // packageOverrides)
      ) {};

    insta_scrapex = insta_scrapex_0_5_2;

    instream_0_12_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_8_6,
          poison_1_0_2,
          poolboy_1_5_1
        }:
          buildMix ({
            name = "instream";
            version = "0.12.0";
            src = fetchHex {
              pkg = "instream";
              version = "0.12.0";
              sha256 =
                "bc970b6b52d01039292056aa5796289efde0828621ae009870e96146df0803b1";
            };
            beamDeps  = [ hackney_1_8_6 poison_1_0_2 poolboy_1_5_1 ];

            meta = {
              description = ''InfluxDB driver for Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/mneudert/instream";
            };
          } // packageOverrides)
      ) {};

    instream_0_15_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_8_6,
          poison_1_0_2,
          poolboy_1_5_1
        }:
          buildMix ({
            name = "instream";
            version = "0.15.0";
            src = fetchHex {
              pkg = "instream";
              version = "0.15.0";
              sha256 =
                "e6c9ab69c5a055401edefaff7b3bfe67ad554fa12162d0285d146866a68351f8";
            };
            beamDeps  = [ hackney_1_8_6 poison_1_0_2 poolboy_1_5_1 ];

            meta = {
              description = ''InfluxDB driver for Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/mneudert/instream";
            };
          } // packageOverrides)
      ) {};

    instream = instream_0_15_0;

    instrumental_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "instrumental";
            version = "0.1.3";
            src = fetchHex {
              pkg = "instrumental";
              version = "0.1.3";
              sha256 =
                "26d3c6dcd2b04d716266afa9d12ba193fc1f038d21c67178e50f77ef1671acec";
            };

            meta = {
              description = ''An Elixir client for Instrumental
                            (http://instrumentalapp.com).'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/undeadlabs/instrumental-ex";
            };
          } // packageOverrides)
      ) {};

    instrumental = instrumental_0_1_3;

    integer_to_ip_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          earmark_1_2_2,
          ex_doc_0_15_1
        }:
          buildMix ({
            name = "integer_to_ip";
            version = "0.1.0";
            src = fetchHex {
              pkg = "integer_to_ip";
              version = "0.1.0";
              sha256 =
                "325a41c646d65591577e661068bbaa6e2dc1b7f74527d1dfbf167da1c942009d";
            };
            beamDeps  = [ earmark_1_2_2 ex_doc_0_15_1 ];

            meta = {
              longDescription = ''Integer to ip address (and the opposite) for
                                Elixir. This module helps you to get an ip
                                address with an integer (and the opposite)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jpcweb/integer_to_ip.ex";
            };
          } // packageOverrides)
      ) {};

    integer_to_ip = integer_to_ip_0_1_0;

    intellij_elixir_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, exrm_0_14_17 }:
          buildMix ({
            name = "intellij_elixir";
            version = "0.1.2";
            src = fetchHex {
              pkg = "intellij_elixir";
              version = "0.1.2";
              sha256 =
                "023e970e20ef19dbd6e818708c687faf9b47b525b9771bc910a4e48adc101a46";
            };
            beamDeps  = [ exrm_0_14_17 ];

            meta = {
              longDescription = ''IntellijElixir allows intellij-elixir to ask
                                Elixir for the native quoted form of code to
                                check that intellij-elixir`s quoted form
                                matches. '';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/KronicDeth/intellij_elixir";
            };
          } // packageOverrides)
      ) {};

    intellij_elixir = intellij_elixir_0_1_2;

    interactor_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ecto_1_0_1 }:
          buildMix ({
            name = "interactor";
            version = "0.1.0";
            src = fetchHex {
              pkg = "interactor";
              version = "0.1.0";
              sha256 =
                "0fafd2573b25e3708db9ee3671f18eb76fd73ca2d1a8f3c5a7e0701a74a083ae";
            };
            beamDeps  = [ ecto_1_0_1 ];

            meta = {
              longDescription = ''Interactor provides an opinionated interface
                                for performing complex user interactions.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/AgilionApps/interactor";
            };
          } // packageOverrides)
      ) {};

    interactor = interactor_0_1_0;

    intercom_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          estree_2_6_0,
          httpoison_0_8_3
        }:
          buildMix ({
            name = "intercom";
            version = "0.0.1";
            src = fetchHex {
              pkg = "intercom";
              version = "0.0.1";
              sha256 =
                "0fc69d88d99f7efefcfb6bf2086ca600735f4a5248efd61725504bf3e3e573d0";
            };
            beamDeps  = [ estree_2_6_0 httpoison_0_8_3 ];

            meta = {
              longDescription = ''Elixir helpers for generating the Intercom
                                snippet and interacting with the Intercom API'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/intercom/intercom-elixir";
            };
          } // packageOverrides)
      ) {};

    intercom = intercom_0_0_1;

    inwx_domrobot_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_10_0,
          xmlrpc_1_1_0
        }:
          buildMix ({
            name = "inwx_domrobot";
            version = "0.1.0";
            src = fetchHex {
              pkg = "inwx_domrobot";
              version = "0.1.0";
              sha256 =
                "6adcfbf1faef0d9d49662d3f4f46a6be28a9fcad0aba5e874de412f1ed90ff77";
            };
            beamDeps  = [ httpoison_0_10_0 xmlrpc_1_1_0 ];

            meta = {
              description = ''Simple interface for INWX DomRobot in Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cybrox/inwx-domrobot-elixir";
            };
          } // packageOverrides)
      ) {};

    inwx_domrobot = inwx_domrobot_0_1_0;

    inxect_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "inxect";
            version = "0.1.2";
            src = fetchHex {
              pkg = "inxect";
              version = "0.1.2";
              sha256 =
                "8c4d32546bed4c32032825024075e964c3d673a7f4fd356b397039897f6ca204";
            };

            meta = {
              description = ''Package to make dependency injection easier, see
                            documentation for more infos'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/baseclass/inxect";
            };
          } // packageOverrides)
      ) {};

    inxect = inxect_0_1_2;

    io_ansi_table_0_2_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "io_ansi_table";
            version = "0.2.3";
            src = fetchHex {
              pkg = "io_ansi_table";
              version = "0.2.3";
              sha256 =
                "43607edaeae0a35a25bb9a30e77a9b957f11533dab74dfe4454cb4e59d8c3beb";
            };

            meta = {
              longDescription = ''Prints data to STDOUT in a table with borders
                                and colors. Can choose a table style among the
                                35 already predefined.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/RaymondLoranger/io_ansi_table";
            };
          } // packageOverrides)
      ) {};

    io_ansi_table = io_ansi_table_0_2_3;

    ioffice_logglix_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, httpoison_0_9_2 }:
          buildMix ({
            name = "ioffice_logglix";
            version = "0.0.1";
            src = fetchHex {
              pkg = "ioffice_logglix";
              version = "0.0.1";
              sha256 =
                "4308b56473afb294d2b669c7349ecb8bb9ccee685436da17525a1c6d01469ecd";
            };
            beamDeps  = [ httpoison_0_9_2 ];

            meta = {
              description = ''Elixir loggly is a backend that forwards all log
                            messages to the Loggly service.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pragmaticivan/logglix";
            };
          } // packageOverrides)
      ) {};

    ioffice_logglix = ioffice_logglix_0_0_1;

    iona_0_2_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          briefly_0_3_0,
          porcelain_2_0_3
        }:
          buildMix ({
            name = "iona";
            version = "0.2.1";
            src = fetchHex {
              pkg = "iona";
              version = "0.2.1";
              sha256 =
                "6c990a1a3dcf144f26d5ce773b4f4538c53ed259c775818991bd28f516317bd5";
            };
            beamDeps  = [ briefly_0_3_0 porcelain_2_0_3 ];

            meta = {
              description = ''Document generation using LaTeX'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/CargoSense/iona";
            };
          } // packageOverrides)
      ) {};

    iona = iona_0_2_1;

    ip2country_1_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ip2country";
            version = "1.1.0";
            src = fetchHex {
              pkg = "ip2country";
              version = "1.1.0";
              sha256 =
                "3b8d9df1cbd3915c323a820b450816c224756164434417f54312cb66263dd45d";
            };

            meta = {
              description = ''IP -> Country Code converted with built-in
                            database.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/grych/ip2country";
            };
          } // packageOverrides)
      ) {};

    ip2country = ip2country_1_1_0;

    ip2location_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poolboy_1_5_1 }:
          buildMix ({
            name = "ip2location";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ip2location";
              version = "0.1.0";
              sha256 =
                "77e059326d6c3f1348c53b3486dfa59d2b0ad90c999f51da86cabbb2d0099685";
            };
            beamDeps  = [ poolboy_1_5_1 ];

            meta = {
              description = ''An Elixir library for the IP2Location
                            database.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/nazipov/ip2location-elixir";
            };
          } // packageOverrides)
      ) {};

    ip2location = ip2location_0_1_0;

    ip2location_elixir_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ip2location_elixir";
            version = "0.1.1";
            src = fetchHex {
              pkg = "ip2location_elixir";
              version = "0.1.1";
              sha256 =
                "4b6c2e55547186ffc5a646d7b31ad557ae456ae1736222707cd98ee3e86a1e8d";
            };

            meta = {
              description = ''Interface for accessing IP2Location Binary Format
                            databases.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/danielgracia/ip2location-elixir";
            };
          } // packageOverrides)
      ) {};

    ip2location_elixir = ip2location_elixir_0_1_1;

    ip2locationdata_0_0_5 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "ip2locationdata";
            version = "0.0.5";
            src = fetchHex {
              pkg = "ip2locationdata";
              version = "0.0.5";
              sha256 =
                "e2b01f8baed7be22c1a0460e54b983b5d3e9380b8ea8a1ec0dca6f5d6e30ef50";
            };

            meta = {
              description = ''Periodically fetches the free IP2Location
                            databases'';
              license = stdenv.lib.licenses.mpl20;
              homepage =
                "https://github.com/potatosalad/erlang-ip2locationdata";
            };
          } // packageOverrides)
      ) {};

    ip2locationdata = ip2locationdata_0_0_5;

    ipa_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ipa";
            version = "0.0.3";
            src = fetchHex {
              pkg = "ipa";
              version = "0.0.3";
              sha256 =
                "ff365e6ec32ae9159877fb464c6754387fe97168e15a0ce7de346106ec6d75a6";
            };

            meta = {
              longDescription = ''A pale, hoppy library for working with IP
                                Addresses. Validate and transform IPv4 addresses
                                and subnet masks.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bordeltabernacle/IPA";
            };
          } // packageOverrides)
      ) {};

    ipa = ipa_0_0_3;

    ipgeobase_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          floki_0_17_2,
          httpotion_2_2_2,
          iconv_1_0_5
        }:
          buildMix ({
            name = "ipgeobase";
            version = "0.0.1";
            src = fetchHex {
              pkg = "ipgeobase";
              version = "0.0.1";
              sha256 =
                "6887e702879f9402d4441f9f0851d4506509928c6bdd1bab6676baa44d81967a";
            };
            beamDeps  = [ floki_0_17_2 httpotion_2_2_2 iconv_1_0_5 ];

            meta = {
              description = ''Find Russian and Ukraine city by IP address.
                            Source http://ipgeobase.ru/'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sergey-chechaev/elixir_ipgeobase";
            };
          } // packageOverrides)
      ) {};

    ipgeobase = ipgeobase_0_0_1;

    iplist_1_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cidr_1_1_0,
          earmark_1_2_2
        }:
          buildMix ({
            name = "iplist";
            version = "1.0.2";
            src = fetchHex {
              pkg = "iplist";
              version = "1.0.2";
              sha256 =
                "fae5b5accc8b7a7618c2d1fbf94607ce6e79ca3b493da6643dbb1bd92be30bd4";
            };
            beamDeps  = [ cidr_1_1_0 earmark_1_2_2 ];

            meta = {
              description = ''Library and CLI tool to expand IPv4 ranges to
                            lists of IP numbers'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/digitalronin/iplist";
            };
          } // packageOverrides)
      ) {};

    iplist = iplist_1_0_2;

    iptables_0_1_6 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "iptables";
            version = "0.1.6";
            src = fetchHex {
              pkg = "iptables";
              version = "0.1.6";
              sha256 =
                "6776d0dd1ecd9701d0a0de72fc71df5f50d4e8be98e027ffba3b3b581149fac4";
            };

            meta = {
              description = ''iptables wrapper for erlang'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/vitorenesduarte/erlang-iptables";
            };
          } // packageOverrides)
      ) {};

    iptables = iptables_0_1_6;

    iptools_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "iptools";
            version = "0.0.2";
            src = fetchHex {
              pkg = "iptools";
              version = "0.0.2";
              sha256 =
                "33bf27bc72094bbc4e67c664c979e5cebfe17c5369c91fc2e2610cc726b252db";
            };

            meta = {
              description = ''A set of functions for validating and
                            transforming IPv4 addresses'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/blackfist/iptools";
            };
          } // packageOverrides)
      ) {};

    iptools = iptools_0_0_2;

    irc_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "irc";
            version = "0.1.0";
            src = fetchHex {
              pkg = "irc";
              version = "0.1.0";
              sha256 =
                "cf0692519e6032cda7c376b8762e3fbe2000464daa089a1de0784e98821762c2";
            };

            meta = {
              longDescription = ''A library for working with irc messages. This
                                is not a client and won`t handle your connection
                                for you, but rather this gives you the
                                flexibility to use whatever transport you
                                need.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/derpydev/irc";
            };
          } // packageOverrides)
      ) {};

    irc = irc_0_1_0;

    irc_parser_0_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "irc_parser";
            version = "0.1.0";
            src = fetchHex {
              pkg = "irc_parser";
              version = "0.1.0";
              sha256 =
                "ce2f16e52ea3c46214ec1d429cff8ffd6c65fbce7d6e56627826a9eedd4bd2f5";
            };

            meta = {
              description = ''IRC parser'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/bkerley/irc_parser";
            };
          } // packageOverrides)
      ) {};

    irc_parser = irc_parser_0_1_0;

    is_chinese_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "is_chinese";
            version = "1.0.0";
            src = fetchHex {
              pkg = "is_chinese";
              version = "1.0.0";
              sha256 =
                "907da2e2995c104bb89152d276c41337b6c4075aa866663e3fb7ebe48da8ff62";
            };

            meta = {
              description = ''Check whether string is Chinese'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/lidashuang/is_chinese";
            };
          } // packageOverrides)
      ) {};

    is_chinese = is_chinese_1_0_0;

    is_email_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "is_email";
            version = "0.0.2";
            src = fetchHex {
              pkg = "is_email";
              version = "0.0.2";
              sha256 =
                "fefcf35b6ca506cd7d2e3d1d850b49e9a2545180db46e291845aa9fd54812d82";
            };

            meta = {
              description = ''Loosely check whether a given string is an
                            email'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/johnotander/is_email";
            };
          } // packageOverrides)
      ) {};

    is_email = is_email_0_0_2;

    is_up_1_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, httpotion_2_2_1 }:
          buildMix ({
            name = "is_up";
            version = "1.0.2";
            src = fetchHex {
              pkg = "is_up";
              version = "1.0.2";
              sha256 =
                "e73713422ef99f9788d130eec1fd880ea15cc5e023137658263fe94bd12a56e1";
            };
            beamDeps  = [ httpotion_2_2_1 ];

            meta = {
              description = ''Check whether a given url is up.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/johnotander/is_up";
            };
          } // packageOverrides)
      ) {};

    is_up = is_up_1_0_2;

    is_url_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "is_url";
            version = "0.0.1";
            src = fetchHex {
              pkg = "is_url";
              version = "0.0.1";
              sha256 =
                "4c3f86302e0c675ece51a247838f64ce88335008035463c8c20b21667399d413";
            };

            meta = {
              description = ''Validate a url'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/johnotander/is_url";
            };
          } // packageOverrides)
      ) {};

    is_url = is_url_0_0_1;

    is_x_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "is_x";
            version = "0.1.0";
            src = fetchHex {
              pkg = "is_x";
              version = "0.1.0";
              sha256 =
                "939f021426a52bce4dc90b084b6eb243cf4b07356a07b9b3af87f2e1513b8c0e";
            };

            meta = {
              longDescription = ''This module comprises of truth value
                                definitions like the whether the data is empty
                                or blank or null or nil or its length is 0 like.
                                To say in one word the extended functions of
                                value assertion functions'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/blackode/is_x";
            };
          } // packageOverrides)
      ) {};

    is_x = is_x_0_1_0;

    isaac_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "isaac";
            version = "0.0.1";
            src = fetchHex {
              pkg = "isaac";
              version = "0.0.1";
              sha256 =
                "e43c136931b8003def7cf8a9eaa49e9713ab91a76729c667591e0a4c03511fa1";
            };

            meta = {
              longDescription = ''Isaac is an elixir module for the [ISAAC
                                Stream
                                Cipher](http://burtleburtle.net/bob/rand/isaacafa.html)
                                It wraps around https://github.com/arianvp/ISAAC
                                which is a port of the ISAAC stream cipher to
                                platforms which have words bigger than 32 bits.
                                '';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/arianvp/elixir-isaac";
            };
          } // packageOverrides)
      ) {};

    isaac = isaac_0_0_1;

    isbn_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "isbn";
            version = "0.1.2";
            src = fetchHex {
              pkg = "isbn";
              version = "0.1.2";
              sha256 =
                "67635006bf98e37e624491e7899a868e34eaadf0a8ff378cabc6ef22cdfb9b2f";
            };

            meta = {
              description = ''A package to check valid ISBNs'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nithinbekal/isbn";
            };
          } // packageOverrides)
      ) {};

    isbn = isbn_0_1_2;

    isbndbex_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "isbndbex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "isbndbex";
              version = "0.1.0";
              sha256 =
                "5c9fe6840a3beadb78a3b5f8d243475258d9d117ef0976cceb0d4c464a4cf4f4";
            };
            beamDeps  = [ httpoison_0_11_2 poison_2_2_0 ];

            meta = {
              description = ''Elixir wrapper for isbndb rest api.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rcoedo/isbndbex";
            };
          } // packageOverrides)
      ) {};

    isbndbex = isbndbex_0_1_0;

    isn_2_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_4,
          postgrex_1_0_0_rc_1
        }:
          buildMix ({
            name = "isn";
            version = "2.0.0";
            src = fetchHex {
              pkg = "isn";
              version = "2.0.0";
              sha256 =
                "23ab6de2e80314bcb6aa33cbdb7634d6b6706d6f46719a9247fb40f496a368ae";
            };
            beamDeps  = [ ecto_2_1_4 postgrex_1_0_0_rc_1 ];

            meta = {
              description = ''Ecto types for the postgreSQL isn extension.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/Frost/isn";
            };
          } // packageOverrides)
      ) {};

    isn = isn_2_0_0;

    iso3166_0_0_6 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ex_csv_0_1_5,
          floki_0_17_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "iso3166";
            version = "0.0.6";
            src = fetchHex {
              pkg = "iso3166";
              version = "0.0.6";
              sha256 =
                "ec8748d649b6226aaa8d088b39c64f42bbdba6d2a12489c922540a19193eb0f5";
            };
            beamDeps  = [ ex_csv_0_1_5 floki_0_17_2 poison_2_2_0 ];

            meta = {
              longDescription = ''A library that provides a list of ISO3166
                                country names, two letter abbreviations, three
                                letter abbreviations, and functions for
                                converting between them.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/joelpm/iso3166ex";
            };
          } // packageOverrides)
      ) {};

    iso3166 = iso3166_0_0_6;

    iso8601_1_2_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "iso8601";
            version = "1.2.3";
            src = fetchHex {
              pkg = "iso8601";
              version = "1.2.3";
              sha256 =
                "02a1f5be3f3ee7c62dd50dea453ab321ffb702ba302c6282805faf23c800fae6";
            };

            meta = {
              description = ''An ISO 8601 date formating and parsing library
                            for Erlang'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/erlsci/iso8601";
            };
          } // packageOverrides)
      ) {};

    iso8601 = iso8601_1_2_3;

    iso_3166_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_3_1_0 }:
          buildMix ({
            name = "iso_3166";
            version = "1.0.0";
            src = fetchHex {
              pkg = "iso_3166";
              version = "1.0.0";
              sha256 =
                "6eb27fde2963c8c15e5d8bad4c6943cee229ca19926f3aab3b22675178377202";
            };
            beamDeps  = [ poison_3_1_0 ];

            meta = {
              longDescription = ''Lookup information with ISO 3166-1 alpha-2,
                                ISO 3166-1 alpha-3 and ISO 3166-1 numeric'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ecrmnn/iso_3166";
            };
          } // packageOverrides)
      ) {};

    iso_3166 = iso_3166_1_0_0;

    iso_erlang_0_11_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "iso_erlang";
            version = "0.11.0";
            src = fetchHex {
              pkg = "iso_erlang";
              version = "0.11.0";
              sha256 =
                "93b2f523e21d53f63dc54acdd3cc2965f6af02eafbe35dbd4d82308b22d4764e";
            };

            meta = {
              longDescription = ''Fast case-insensitive validation and
                                conversion between ISO Alpha-2, Alpha-3, and
                                Numeric Country and Language Codes.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/amokhtar/iso_erlang";
            };
          } // packageOverrides)
      ) {};

    iso_erlang = iso_erlang_0_11_0;

    issuer_0_2_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, bunt_0_2_0 }:
          buildMix ({
            name = "issuer";
            version = "0.2.2";
            src = fetchHex {
              pkg = "issuer";
              version = "0.2.2";
              sha256 =
                "e2bc3226afc4ce2368dcad2fc69dbc36eb2cc8a9fa1997c4d374b6bddb18cf10";
            };
            beamDeps  = [ bunt_0_2_0 ];

            meta = {
              description = ''Adds `mix` tasks to easily issue (publish) new
                            versions.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/am-kantox/issuer";
            };
          } // packageOverrides)
      ) {};

    issuer = issuer_0_2_2;

    iteraptor_0_7_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "iteraptor";
            version = "0.7.0";
            src = fetchHex {
              pkg = "iteraptor";
              version = "0.7.0";
              sha256 =
                "16891dbfdf652b7e4b213de35ac560a4ca5eab4634b998bd2141a4abf6e38ded";
            };

            meta = {
              description = ''This small library allows the deep iteration /
                            mapping of Enumerables.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mudasobwa/iteraptor";
            };
          } // packageOverrides)
      ) {};

    iteraptor = iteraptor_0_7_0;

    itil_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "itil";
            version = "0.1.1";
            src = fetchHex {
              pkg = "itil";
              version = "0.1.1";
              sha256 =
                "4852aec00737376d70fb0927b923eb25c866c5696775b102cee448f3f538900a";
            };

            meta = {
              longDescription = ''Lazy print and log functions and utils ##
                                Examples iex> I.p \"sup\" \"sup\" :ok iex> I.p
                                \"s\",[1,2,3] \"s\" [1, 2, 3] :ok iex> I.l
                                \"s\", [1,2,4] 10:48:21.239 [info] s
                                10:48:21.242 [info] [1, 2, 4] :ok'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jschoch/itil";
            };
          } // packageOverrides)
      ) {};

    itil = itil_0_1_1;

    itk_queue_0_3_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          amqp_0_2_2,
          httpoison_0_9_2,
          poison_2_2_0,
          uuid_1_1_7
        }:
          buildMix ({
            name = "itk_queue";
            version = "0.3.1";
            src = fetchHex {
              pkg = "itk_queue";
              version = "0.3.1";
              sha256 =
                "e5ce7f5d6c392cd80c75196b47925d6c02e50cb94b4476278937a0b8b56a58a2";
            };
            beamDeps  = [ amqp_0_2_2 httpoison_0_9_2 poison_2_2_0 uuid_1_1_7
                      ];

            meta = {
              description = ''Provides convenience methods for subscribing to
                            queues and publishing messages.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/inside-track/itk_queue";
            };
          } // packageOverrides)
      ) {};

    itk_queue = itk_queue_0_3_1;

    itunes_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_8_3,
          poison_2_2_0
        }:
          buildMix ({
            name = "itunes";
            version = "0.1.0";
            src = fetchHex {
              pkg = "itunes";
              version = "0.1.0";
              sha256 =
                "357dac9cccfea3caebd96b1410a47225ee61e78f6cf0ffacdfb445c803860f86";
            };
            beamDeps  = [ httpoison_0_8_3 poison_2_2_0 ];

            meta = {
              description = ''iTunes search API wrapper'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dvcrn/itunes.ex";
            };
          } // packageOverrides)
      ) {};

    itunes = itunes_0_1_0;

    ivar_0_3_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          mimerl_1_0_2,
          poison_1_0_2
        }:
          buildMix ({
            name = "ivar";
            version = "0.3.1";
            src = fetchHex {
              pkg = "ivar";
              version = "0.3.1";
              sha256 =
                "ccd22b99b9ce69f3ed29f42b77058d06d6e42910d5f2f1dd53a3545000e0e034";
            };
            beamDeps  = [ httpoison_0_11_2 mimerl_1_0_2 poison_1_0_2 ];

            meta = {
              longDescription = ''Ivar is an adapter based HTTP client that
                                provides the ability to build composable HTTP
                                requests'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/swelham/ivar";
            };
          } // packageOverrides)
      ) {};

    ivar_0_7_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          mimerl_1_0_2,
          poison_1_0_2
        }:
          buildMix ({
            name = "ivar";
            version = "0.7.0";
            src = fetchHex {
              pkg = "ivar";
              version = "0.7.0";
              sha256 =
                "c85d3bca1c5c2f9de98bf3786c642f525f17a9ffa574b3c9b3c96830a44629b2";
            };
            beamDeps  = [ httpoison_0_11_2 mimerl_1_0_2 poison_1_0_2 ];

            meta = {
              longDescription = ''Ivar is an adapter based HTTP client that
                                provides the ability to build composable HTTP
                                requests'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/swelham/ivar";
            };
          } // packageOverrides)
      ) {};

    ivar = ivar_0_7_0;

    ja_resource_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_4,
          ja_serializer_0_12_0,
          phoenix_1_3_0_rc_2,
          plug_1_3_5
        }:
          buildMix ({
            name = "ja_resource";
            version = "0.3.0";
            src = fetchHex {
              pkg = "ja_resource";
              version = "0.3.0";
              sha256 =
                "7e5557094df10840c8354e92a10ca672b28fe4a4aef89210e114f4fa1d7afb69";
            };
            beamDeps  = [
                          ecto_2_1_4
                          ja_serializer_0_12_0
                          phoenix_1_3_0_rc_2
                          plug_1_3_5
                        ];

            meta = {
              longDescription = ''A behaviour for defining JSON-API spec
                                controllers in Phoenix. Lets you focus on your
                                data, not on boilerplate controller code. Like
                                Webmachine for Phoenix.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/vt-elixir/ja_resource";
            };
          } // packageOverrides)
      ) {};

    ja_resource = ja_resource_0_3_0;

    ja_serializer_0_12_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          inflex_1_8_1,
          plug_1_3_5,
          poison_3_1_0,
          scrivener_0_5_0
        }:
          buildMix ({
            name = "ja_serializer";
            version = "0.12.0";
            src = fetchHex {
              pkg = "ja_serializer";
              version = "0.12.0";
              sha256 =
                "6b88c2e0d4dd9ed43836f19e3a25a3affaa14520ce084a54d0a72c9fabc9ddd8";
            };
            beamDeps  = [
                          inflex_1_8_1 plug_1_3_5 poison_3_1_0 scrivener_0_5_0
                        ];

            meta = {
              longDescription = ''A serialization library implementing the
                                jsonapi.org 1.0 spec suitable for use building
                                JSON APIs in Pheonix and any other Plug based
                                framework or app.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/vt-elixir/ja_serializer";
            };
          } // packageOverrides)
      ) {};

    ja_serializer = ja_serializer_0_12_0;

    jabbax_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          plug_1_1_7,
          poison_3_1_0
        }:
          buildMix ({
            name = "jabbax";
            version = "0.1.0";
            src = fetchHex {
              pkg = "jabbax";
              version = "0.1.0";
              sha256 =
                "4db4f8ce29a08b5ee67060c8e4d57944ce13c997ea73d7f132f57692b6b70d1d";
            };
            beamDeps  = [ plug_1_1_7 poison_3_1_0 ];

            meta = {
              description = ''JSON API Building Blocks Assembly for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/surgeventures/jabbax";
            };
          } // packageOverrides)
      ) {};

    jabbax = jabbax_0_1_0;

    jack_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "jack";
            version = "0.1.0";
            src = fetchHex {
              pkg = "jack";
              version = "0.1.0";
              sha256 =
                "bffdcda3b7b144926e71e6bb7ffbcd2b42d1d16c2028fbed7401b9cefb1a9f05";
            };

            meta = {
              description = ''A shameless copy of Plug, but for general
                            purposes'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kelvinst/jack";
            };
          } // packageOverrides)
      ) {};

    jack = jack_0_1_0;

    jalaali_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "jalaali";
            version = "0.1.1";
            src = fetchHex {
              pkg = "jalaali";
              version = "0.1.1";
              sha256 =
                "03f7e0cc1a86447f816c4ca4011936cabd8caee559028c045265404d672d782d";
            };

            meta = {
              longDescription = ''A Jalaali (Jalali, Persian, Khorshidi,
                                Shamsi) calendar system implemention for
                                Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jalaali/elixir-jalaali";
            };
          } // packageOverrides)
      ) {};

    jalaali = jalaali_0_1_1;

    jam_1_0_0 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex }:
          buildErlangMk ({
            name = "jam";
            version = "1.0.0";
            src = fetchHex {
              pkg = "jam";
              version = "1.0.0";
              sha256 =
                "de30522bf37d10665159bb6527febf145ad6c52ab68bd7ba19501c71b9277d7e";
            };

            meta = {
              description = ''An Erlang date/time processing library'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/basho/jam";
            };
          } // packageOverrides)
      ) {};

    jam = jam_1_0_0;

    jamdb_oracle_0_0_7 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          db_connection_1_1_2,
          ecto_2_1_4,
          jose_1_8_4
        }:
          buildMix ({
            name = "jamdb_oracle";
            version = "0.0.7";
            src = fetchHex {
              pkg = "jamdb_oracle";
              version = "0.0.7";
              sha256 =
                "70f9a79607f059f40c4803e549114d4e9aff4d1ed70c9c8e26f86c59f026d032";
            };
            beamDeps  = [ db_connection_1_1_2 ecto_2_1_4 jose_1_8_4 ];

            meta = {
              description = ''Erlang driver and Ecto adapter for Oracle'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/erlangbureau/jamdb_oracle";
            };
          } // packageOverrides)
      ) {};

    jamdb_oracle = jamdb_oracle_0_0_7;

    janrain_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, httpoison_0_8_3 }:
          buildMix ({
            name = "janrain";
            version = "0.0.1";
            src = fetchHex {
              pkg = "janrain";
              version = "0.0.1";
              sha256 =
                "35299ee088dfd5647e7a5cd129d5011f2d6319fe53045b2a8ce3ddf70792cc78";
            };
            beamDeps  = [ httpoison_0_8_3 ];

            meta = {
              longDescription = ''A small library to help with Janrain logins.
                                Probably most useful when used in conjuction
                                with Phoenix and Guardian.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rickr/janrain";
            };
          } // packageOverrides)
      ) {};

    janrain = janrain_0_0_1;

    japan_municipality_code_1_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "japan_municipality_code";
            version = "1.0.2";
            src = fetchHex {
              pkg = "japan_municipality_code";
              version = "1.0.2";
              sha256 =
                "3bc305fcc729b771393bfd7de930bd0a954c91c0ae77bbd3c4c1270c4ad18038";
            };

            meta = {
              description = ''Elixir Library for Japan municipality key
                            converting'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hykw/japan_municipality_key";
            };
          } // packageOverrides)
      ) {};

    japan_municipality_code = japan_municipality_code_1_0_2;

    japanese_holiday_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, timex_3_0_5 }:
          buildMix ({
            name = "japanese_holiday";
            version = "0.0.2";
            src = fetchHex {
              pkg = "japanese_holiday";
              version = "0.0.2";
              sha256 =
                "3363e2062dbdad48de88d092c549e8b55eecc2d86a61168578e54e6ba9065eaf";
            };
            beamDeps  = [ timex_3_0_5 ];

            meta = {
              description = ''An elixir library for japanese holiday '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Joe-noh/japanese_holiday";
            };
          } // packageOverrides)
      ) {};

    japanese_holiday = japanese_holiday_0_0_2;

    jazz_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "jazz";
            version = "0.2.1";
            src = fetchHex {
              pkg = "jazz";
              version = "0.2.1";
              sha256 =
                "1c239947305efba0f3e48786a815fd512d49af4acf61914c03ebb18cc79c0477";
            };

            meta = {
              description = ''JSON handling library for Elixir.'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/meh/jazz";
            };
          } // packageOverrides)
      ) {};

    jazz = jazz_0_2_1;

    jc_1_2_1 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          jsone_1_2_0,
          jwalk_1_1_0,
          lager_3_2_1,
          ranch_1_1_0
        }:
          buildRebar3 ({
            name = "jc";
            version = "1.2.1";
            src = fetchHex {
              pkg = "jc";
              version = "1.2.1";
              sha256 =
                "19e51ddf75f829650bebdcb04dcb6306db46be6de24003e86c568918dacf5e1a";
            };

            beamDeps  = [ jsone_1_2_0 jwalk_1_1_0 lager_3_2_1 ranch_1_1_0 ];

            meta = {
              description = ''A simple, distributed, in-memory caching
                            system'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jr0senblum/jc";
            };
          } // packageOverrides)
      ) {};

    jc = jc_1_2_1;

    jch_0_2_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "jch";
            version = "0.2.3";
            src = fetchHex {
              pkg = "jch";
              version = "0.2.3";
              sha256 =
                "0c7190682170d7172f0051cafeea479d9a4bfa33799b6d6a52d4c986d0da82a2";
            };
            compilePorts = true;
            buildPlugins  = [ pc ];


            meta = {
              description = ''A Jump Consistent Hash library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/darach/jch-erl";
            };
          } // packageOverrides)
      ) {};

    jch = jch_0_2_3;

    jchash_0_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "jchash";
            version = "0.1.0";
            src = fetchHex {
              pkg = "jchash";
              version = "0.1.0";
              sha256 =
                "082f238e5947e7c61626f84258c9ef561a282bcef175fba26f86909cc6be6ade";
            };
            compilePorts = true;

            meta = {
              description = ''Jump Consistent Hash NIF library for
                            Erlang/Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cabol/jchash";
            };
          } // packageOverrides)
      ) {};

    jchash = jchash_0_1_0;

    jeaux_0_7_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, proper_case_1_0_2
        }:
          buildMix ({
            name = "jeaux";
            version = "0.7.0";
            src = fetchHex {
              pkg = "jeaux";
              version = "0.7.0";
              sha256 =
                "390d87ca95f6b980ee4443ff0ab26d05f7f5ed8100d71eb20e2c0e20c8fdee1e";
            };
            beamDeps  = [ proper_case_1_0_2 ];

            meta = {
              description = ''A library for validating http params and
                            queries'';
              license = stdenv.lib.licenses.mit;
              homepage = "http://github.com/zbarnes757/jeaux";
            };
          } // packageOverrides)
      ) {};

    jeaux = jeaux_0_7_0;

    jeeves_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poolboy_1_5_1 }:
          buildMix ({
            name = "jeeves";
            version = "0.1.3";
            src = fetchHex {
              pkg = "jeeves";
              version = "0.1.3";
              sha256 =
                "9ee266b4ceb786a29b5e811cce8b286301904a17082d7e2cf52936a5a6d8957a";
            };
            beamDeps  = [ poolboy_1_5_1 ];

            meta = {
              longDescription = ''Jeeves is library that transforms regular
                                modules into named or anonymous singleton or
                                pooled GenServers. Just write your business
                                functions, and Jeeves will convert them into an
                                API, a server, and potentially a pooled set of
                                workers.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/pragdave/jeeves";
            };
          } // packageOverrides)
      ) {};

    jeeves = jeeves_0_1_3;

    jequalson_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "jequalson";
            version = "0.1.1";
            src = fetchHex {
              pkg = "jequalson";
              version = "0.1.1";
              sha256 =
                "5ed0a54b8aaa457cb441b3baafc508d8be4fc90db29a0cc27980eeeb65db18ac";
            };

            meta = {
              description = ''Helpers for testing JSON responses.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dm1try/jequalson";
            };
          } // packageOverrides)
      ) {};

    jequalson = jequalson_0_1_1;

    jerb_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "jerb";
            version = "0.1.0";
            src = fetchHex {
              pkg = "jerb";
              version = "0.1.0";
              sha256 =
                "bf8949f7cb6a0a7848023878094fa218754d9d6510676997f44212405a1c16ec";
            };

            meta = {
              description = ''Lightweight job processing with GenStage.'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    jerb = jerb_0_1_0;

    jerboa_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "jerboa";
            version = "0.2.0";
            src = fetchHex {
              pkg = "jerboa";
              version = "0.2.0";
              sha256 =
                "e63d37bfddb9aef7e46355ee79c21789d54ade4105c891e8c160259387d59c9f";
            };

            meta = {
              description = ''STUN/TURN encoder, decoder and client library'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/esl/jerboa";
            };
          } // packageOverrides)
      ) {};

    jerboa_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "jerboa";
            version = "0.3.0";
            src = fetchHex {
              pkg = "jerboa";
              version = "0.3.0";
              sha256 =
                "607e24f5c6c0d74b3cde488191dc51da6aaca3c1c9ff3d0bdbd17876de6508ba";
            };

            meta = {
              description = ''STUN/TURN encoder, decoder and client library'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/esl/jerboa";
            };
          } // packageOverrides)
      ) {};

    jerboa = jerboa_0_3_0;

    jesse_1_4_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, jsx_2_8_2 }:
          buildRebar3 ({
            name = "jesse";
            version = "1.4.0";
            src = fetchHex {
              pkg = "jesse";
              version = "1.4.0";
              sha256 =
                "d35040aa00d2a50c400bba163146ce6608ea2357b6006f8ebec2769ac42935bb";
            };

            beamDeps  = [ jsx_2_8_2 ];

            meta = {
              longDescription = ''jesse (JSon Schema Erlang) is an
                                implementation of a JSON Schema validator for
                                Erlang.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/for-GET/jesse";
            };
          } // packageOverrides)
      ) {};

    jesse = jesse_1_4_0;

    jiffy_0_14_11 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "jiffy";
            version = "0.14.11";
            src = fetchHex {
              pkg = "jiffy";
              version = "0.14.11";
              sha256 =
                "1f095b7e26f01a3300d49da7df8f43977feacc3ed5a2501e665c8f4a5f03aaf5";
            };
            compilePorts = true;

            meta = {
              description = ''JSON Decoder/Encoder.'';
              license = with stdenv.lib.licenses; [ mit bsd3 ];
              homepage = "https://github.com/davisp/jiffy";
            };
          } // packageOverrides)
      ) {};

    jiffy = jiffy_0_14_11;

    jiffy_0_14_7 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "jiffy";
            version = "0.14.7";
            src = fetchHex {
              pkg = "jiffy";
              version = "0.14.7";
              sha256 =
                "2b3b0f7976dae9c8266036e0d7e0398b64ac5207e3beee4c57896e44b2c17e97";
            };
            compilePorts = true;

            meta = {
              description = ''JSON Decoder/Encoder.'';
              license = with stdenv.lib.licenses; [ mit bsd3 ];
              homepage = "https://github.com/davisp/jiffy";
            };
          } // packageOverrides)
      ) {};

    jira_0_0_8 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "jira";
            version = "0.0.8";
            src = fetchHex {
              pkg = "jira";
              version = "0.0.8";
              sha256 =
                "71c19ef23ea7351a2dc7b8f14d0c5794ff00382fa43a88a2235ec9c1741a73cb";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''An Elixir client library for JIRA + JIRA Agile /
                            Greenhopper'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jeffweiss/jira";
            };
          } // packageOverrides)
      ) {};

    jira = jira_0_0_8;

    jirex_0_0_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_9_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "jirex";
            version = "0.0.3";
            src = fetchHex {
              pkg = "jirex";
              version = "0.0.3";
              sha256 =
                "fa5085bec9fc62ab7b35b24f51e3b65afde4d2e80e2d496de41a963bac55f896";
            };
            beamDeps  = [ httpoison_0_9_2 poison_3_1_0 ];

            meta = {
              description = ''A simple client for JIRA REST API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Waasi/jirex";
            };
          } // packageOverrides)
      ) {};

    jirex = jirex_0_0_3;

    jobbit_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "jobbit";
            version = "0.3.0";
            src = fetchHex {
              pkg = "jobbit";
              version = "0.3.0";
              sha256 =
                "7b28afc7a90fd3ec49015805b154025dc77ef5034576587c81401aef7efd74fb";
            };

            meta = {
              description = ''Execute tasks without crashing the parent
                            process.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/elbow-jason/jobbit";
            };
          } // packageOverrides)
      ) {};

    jobbit = jobbit_0_3_0;

    jobspool_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, uuid_1_1_7 }:
          buildMix ({
            name = "jobspool";
            version = "0.1.1";
            src = fetchHex {
              pkg = "jobspool";
              version = "0.1.1";
              sha256 =
                "5ff710028910b30ee2fc845d0d3fbce85be1baffecb08f3392537122122dfba0";
            };
            beamDeps  = [ uuid_1_1_7 ];

            meta = {
              description = ''Simple Elixir jobs pool'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/flupke/exjobspool";
            };
          } // packageOverrides)
      ) {};

    jobspool = jobspool_0_1_1;

    johanna_0_2_7 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "johanna";
            version = "0.2.7";
            src = fetchHex {
              pkg = "johanna";
              version = "0.2.7";
              sha256 =
                "a50339720238f5e67a39c4806437dc0b4a9959c5b6905ff9dd245b08305fbc26";
            };

            meta = {
              longDescription = ''**The wrapper for `erlcron` to be used in
                                Elixir projects.** Original erlang library:
                                https://github.com/erlware/erlcron'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/am-kantox/johanna";
            };
          } // packageOverrides)
      ) {};

    johanna = johanna_0_2_7;

    joken_0_13_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "joken";
            version = "0.13.1";
            src = fetchHex {
              pkg = "joken";
              version = "0.13.1";
              sha256 =
                "f9fd7803403651c891332aabc1f97ca87ad8f01be1262d5a9a51da7987e08163";
            };

            meta = {
              description = ''JWT Library for Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/bryanjos/joken";
            };
          } // packageOverrides)
      ) {};

    joken_0_16_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          jose_1_8_4,
          plug_1_3_5,
          poison_1_5_2
        }:
          buildMix ({
            name = "joken";
            version = "0.16.1";
            src = fetchHex {
              pkg = "joken";
              version = "0.16.1";
              sha256 =
                "a804bfd350f61688f6ce8d9898bc17fd4b59990c054debeea44234d53048d93d";
            };
            beamDeps  = [ jose_1_8_4 plug_1_3_5 poison_1_5_2 ];

            meta = {
              description = ''JWT Library for Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/bryanjos/joken";
            };
          } // packageOverrides)
      ) {};

    joken_1_3_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          jose_1_8_4,
          plug_1_3_5,
          poison_1_0_2
        }:
          buildMix ({
            name = "joken";
            version = "1.3.2";
            src = fetchHex {
              pkg = "joken";
              version = "1.3.2";
              sha256 =
                "d1045af57526130287b9d8be3bb88e949bc5dd4b167e2b4425db65fa323099c3";
            };
            beamDeps  = [ jose_1_8_4 plug_1_3_5 poison_1_0_2 ];

            meta = {
              description = ''JWT Library for Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/bryanjos/joken";
            };
          } // packageOverrides)
      ) {};

    joken_1_5_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          jose_1_8_4,
          plug_1_3_5,
          poison_1_0_2
        }:
          buildMix ({
            name = "joken";
            version = "1.5.0";
            src = fetchHex {
              pkg = "joken";
              version = "1.5.0";
              sha256 =
                "b161e49dcf44b060407979fbc9c8085c3350f8fda4c60b25c0d5748a7f595aaf";
            };
            beamDeps  = [ jose_1_8_4 plug_1_3_5 poison_1_0_2 ];

            meta = {
              description = ''JWT Library for Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/bryanjos/joken";
            };
          } // packageOverrides)
      ) {};

    joken = joken_1_5_0;

    joker_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "joker";
            version = "0.2.0";
            src = fetchHex {
              pkg = "joker";
              version = "0.2.0";
              sha256 =
                "a593ff26113bf184ece44164450df61ebddeca9ed064f97c62fd8fff0169c1a6";
            };

            meta = {
              description = ''Socket acceptor pool for TCP protocol written in
                            Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/0x00evil/joker";
            };
          } // packageOverrides)
      ) {};

    joker = joker_0_2_0;

    jolt_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          plug_1_3_5,
          poison_1_5_2
        }:
          buildMix ({
            name = "jolt";
            version = "0.1.0";
            src = fetchHex {
              pkg = "jolt";
              version = "0.1.0";
              sha256 =
                "922498b234a1b0a813255d3abf5caa64a9afdc41eb4d8d71f87d71c41fe792e8";
            };
            beamDeps  = [ cowboy_1_1_2 plug_1_3_5 poison_1_5_2 ];

            meta = {
              longDescription = ''A full REST JSON API with zero coding,
                                powered by Elixir. It is intended to be used as
                                a command-line tool (just run mix escript.build
                                first).'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/clarkware/jolt";
            };
          } // packageOverrides)
      ) {};

    jolt = jolt_0_1_0;

    jorel_mix_0_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "jorel_mix";
            version = "0.0.4";
            src = fetchHex {
              pkg = "jorel_mix";
              version = "0.0.4";
              sha256 =
                "b2c2cfb7a406b725f175831337cbe10b294d2a7f2f24499f852338558b8aa2e5";
            };

            meta = {
              description = ''Just anOther RELease assembler'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/emedia-project/jorel_mix";
            };
          } // packageOverrides)
      ) {};

    jorel_mix = jorel_mix_0_0_4;

    jose_1_7_9 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, base64url_0_0_1 }:
          buildMix ({
            name = "jose";
            version = "1.7.9";
            src = fetchHex {
              pkg = "jose";
              version = "1.7.9";
              sha256 =
                "0efaac15223e7cd29773296214ab3b85700d2cd1354c931342750aa1afaf6146";
            };
            beamDeps  = [ base64url_0_0_1 ];

            meta = {
              description = ''JSON Object Signing and Encryption (JOSE) for
                            Erlang and Elixir.'';
              license = stdenv.lib.licenses.mpl20;
              homepage = "https://github.com/potatosalad/erlang-jose";
            };
          } // packageOverrides)
      ) {};

    jose_1_8_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, base64url_0_0_1 }:
          buildMix ({
            name = "jose";
            version = "1.8.4";
            src = fetchHex {
              pkg = "jose";
              version = "1.8.4";
              sha256 =
                "d28c8e54f06d7a668e98ca9e5b9b2b56764bdd95b69e9185e8209a3e880f10a0";
            };
            beamDeps  = [ base64url_0_0_1 ];

            meta = {
              description = ''JSON Object Signing and Encryption (JOSE) for
                            Erlang and Elixir.'';
              license = stdenv.lib.licenses.mpl20;
              homepage = "https://github.com/potatosalad/erlang-jose";
            };
          } // packageOverrides)
      ) {};

    jose = jose_1_8_4;

    jsex_2_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, jsx_2_8_2 }:
          buildMix ({
            name = "jsex";
            version = "2.0.0";
            src = fetchHex {
              pkg = "jsex";
              version = "2.0.0";
              sha256 =
                "98c1501645e31efdbcbb6172983d4deb1335de993966197e6a4343492fa7d872";
            };
            beamDeps  = [ jsx_2_8_2 ];

            meta = {
              description = ''json for elixir '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/talentdeficit/jsex";
            };
          } // packageOverrides)
      ) {};

    jsex = jsex_2_0_0;

    json_0_3_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "json";
            version = "0.3.3";
            src = fetchHex {
              pkg = "json";
              version = "0.3.3";
              sha256 =
                "d1986548847189b51f1efb65d196e6ab9f2e88a6878a363aec0e3c77e2550616";
            };

            meta = {
              description = ''Native Elixir library for JSON encoding and
                            decoding'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/cblage/elixir-json";
            };
          } // packageOverrides)
      ) {};

    json_1_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "json";
            version = "1.0.2";
            src = fetchHex {
              pkg = "json";
              version = "1.0.2";
              sha256 =
                "630b87a43d5ad5292867fd8a6731d97b3c833a0b968cd20319b70920fef1406b";
            };

            meta = {
              description = ''Native Elixir library for JSON encoding and
                            decoding'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/cblage/elixir-json";
            };
          } // packageOverrides)
      ) {};

    json = json_1_0_2;

    json_api_assert_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "json_api_assert";
            version = "0.0.2";
            src = fetchHex {
              pkg = "json_api_assert";
              version = "0.0.2";
              sha256 =
                "f3c2f6b7821ea7f63f06fbe0c795f3be3a1e5b08d5b35a2ec76a5f430ffc7c9d";
            };

            meta = {
              description = ''assertions for JSON API payload'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/DockYard/json_api_assert";
            };
          } // packageOverrides)
      ) {};

    json_api_assert = json_api_assert_0_0_2;

    json_diff_ex_0_5_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "json_diff_ex";
            version = "0.5.3";
            src = fetchHex {
              pkg = "json_diff_ex";
              version = "0.5.3";
              sha256 =
                "97bd615bc47c2632ab4e0a321636869eb21caea44f3abe42c376af4b6360770c";
            };

            meta = {
              description = ''Diff and patch for JSON in Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/olafura/json_diff_ex";
            };
          } // packageOverrides)
      ) {};

    json_diff_ex = json_diff_ex_0_5_3;

    json_feed_0_1_0_alpha = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_3_1_0 }:
          buildMix ({
            name = "json_feed";
            version = "0.1.0-alpha";
            src = fetchHex {
              pkg = "json_feed";
              version = "0.1.0-alpha";
              sha256 =
                "0caf0d9781c3e9e2e404983a12b09f87b398dcaa2da4b537caf738e55ef4e4ed";
            };
            beamDeps  = [ poison_3_1_0 ];

            meta = {
              description = ''A JSON Feed implementation in Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/murielsilveira/json_feed_elixir";
            };
          } // packageOverrides)
      ) {};

    json_feed = json_feed_0_1_0_alpha;

    json_hyperschema_client_builder_0_8_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ex_json_schema_0_5_5,
          exjsx_3_2_1,
          httpoison_0_11_2
        }:
          buildMix ({
            name = "json_hyperschema_client_builder";
            version = "0.8.1";
            src = fetchHex {
              pkg = "json_hyperschema_client_builder";
              version = "0.8.1";
              sha256 =
                "1cb25dad26c4bcc3867fd9de65a047f4aac6006d9be424079ae83c3ce6846d9e";
            };
            beamDeps  = [ ex_json_schema_0_5_5 exjsx_3_2_1 httpoison_0_11_2
                      ];

            meta = {
              description = ''Generate HTTP clients based on JSON
                            Hyperschemas'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/cantierecreativo/json_hyperschema_client_builder";
            };
          } // packageOverrides)
      ) {};

    json_hyperschema_client_builder =
      json_hyperschema_client_builder_0_8_1;

    json_logex_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_3_0_0 }:
          buildMix ({
            name = "json_logex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "json_logex";
              version = "0.1.0";
              sha256 =
                "132a9c4e377b0f10644179e1a9500f4286f8660cb66c9a7bb0a13c3dbbab0bf1";
            };
            beamDeps  = [ poison_3_0_0 ];

            meta = {
              longDescription = ''JSONLogex is a custom backend for Elixir`s
                                Logger. It outputs log events in JSON format to
                                the standard console.'';
              license = with stdenv.lib.licenses; [ asl20 free ];
              homepage = "https://github.com/BBVA/json-logex.git";
            };
          } // packageOverrides)
      ) {};

    json_logex = json_logex_0_1_0;

    json_logger_0_6_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, json_0_3_3 }:
          buildMix ({
            name = "json_logger";
            version = "0.6.0";
            src = fetchHex {
              pkg = "json_logger";
              version = "0.6.0";
              sha256 =
                "4b3aaa23c2d0fec4fe4ba7c001ec6a72b1ae36f0268ede87557c59663843a0c3";
            };
            beamDeps  = [ json_0_3_3 ];

            meta = {
              description = ''A simple library for logging with JSON, best
                            suited with Logstash.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/LeeroyDing/json_logger";
            };
          } // packageOverrides)
      ) {};

    json_logger = json_logger_0_6_0;

    json_pointer_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "json_pointer";
            version = "0.0.2";
            src = fetchHex {
              pkg = "json_pointer";
              version = "0.0.2";
              sha256 =
                "150b37bc4ff689758f17aee180fbf8f7226c3eeff7d28a782e6f0a74f859417e";
            };

            meta = {
              longDescription = ''Implementation of RFC 6901 which defines a
                                string syntax for identifying a specific value
                                within a JSON document'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/xavier/json_pointer";
            };
          } // packageOverrides)
      ) {};

    json_pointer = json_pointer_0_0_2;

    json_schema_validator_0_2_1 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, ex_json_schema_0_5_5
        }:
          buildMix ({
            name = "json_schema_validator";
            version = "0.2.1";
            src = fetchHex {
              pkg = "json_schema_validator";
              version = "0.2.1";
              sha256 =
                "17b403c6822e5ea353acbbea5add4b405a88228a56701d325c8d6e560e93677a";
            };
            beamDeps  = [ ex_json_schema_0_5_5 ];

            meta = {
              description = ''A thin wrapper around a Json Schema Validator.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/findmypast/json-schema-validator";
            };
          } // packageOverrides)
      ) {};

    json_schema_validator = json_schema_validator_0_2_1;

    json_stream_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, jsx_2_8_2 }:
          buildMix ({
            name = "json_stream";
            version = "0.0.1";
            src = fetchHex {
              pkg = "json_stream";
              version = "0.0.1";
              sha256 =
                "07e2283f7f211f50d4fa686f1814f7a8b9637cfe3f358f6f15332489b2b7f2ab";
            };
            beamDeps  = [ jsx_2_8_2 ];

            meta = {
              longDescription = ''Small but useful wrapper above erlang `jsx`
                                to stream json elements from an Elixir binary
                                stream.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/awetzel/json_stream";
            };
          } // packageOverrides)
      ) {};

    json_stream = json_stream_0_0_1;

    json_to_xml_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          poison_3_1_0,
          xml_builder_0_1_1
        }:
          buildMix ({
            name = "json_to_xml";
            version = "0.3.0";
            src = fetchHex {
              pkg = "json_to_xml";
              version = "0.3.0";
              sha256 =
                "bbf22d793d8af37c7e763eff54d8f3c5020e67bf8c52e67867ab9a1107c97625";
            };
            beamDeps  = [ poison_3_1_0 xml_builder_0_1_1 ];

            meta = {
              description = ''JSON to XML converter for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/semlabs/json_to_xml";
            };
          } // packageOverrides)
      ) {};

    json_to_xml = json_to_xml_0_3_0;

    json_web_token_0_2_8 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_3_1_0 }:
          buildMix ({
            name = "json_web_token";
            version = "0.2.8";
            src = fetchHex {
              pkg = "json_web_token";
              version = "0.2.8";
              sha256 =
                "5e67c268245d6e045266ae7338f2297ebb0769a850664a42070cf7cd91542eee";
            };
            beamDeps  = [ poison_3_1_0 ];

            meta = {
              description = ''Elixir implementation of the JSON Web Token
                            (JWT), RFC 7519'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/garyf/json_web_token_ex";
            };
          } // packageOverrides)
      ) {};

    json_web_token = json_web_token_0_2_8;

    jsonapi_0_4_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, plug_1_3_5 }:
          buildMix ({
            name = "jsonapi";
            version = "0.4.2";
            src = fetchHex {
              pkg = "jsonapi";
              version = "0.4.2";
              sha256 =
                "9704bef0bbd0ce366ab618329bcc8e8d7f93b9155c5cfe0e85da18f42e831eb6";
            };
            beamDeps  = [ plug_1_3_5 ];

            meta = {
              longDescription = ''Fully functional JSONAPI V1 Serializer as
                                well as a QueryParser for Plug based projects
                                and applications.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jeregrine/jsonapi";
            };
          } // packageOverrides)
      ) {};

    jsonapi = jsonapi_0_4_2;

    jsone_1_2_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "jsone";
            version = "1.2.0";
            src = fetchHex {
              pkg = "jsone";
              version = "1.2.0";
              sha256 =
                "a60e74284d3a923cde65c00a39dd4542fd7da7c22e8385c0378ad419c54b2e08";
            };

            meta = {
              description = ''Erlang JSON Library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sile/jsone";
            };
          } // packageOverrides)
      ) {};

    jsone_1_2_2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "jsone";
            version = "1.2.2";
            src = fetchHex {
              pkg = "jsone";
              version = "1.2.2";
              sha256 =
                "253c18c7dc6fc27290b1f507f3adc6863f4396b099d0eb396e3c0e58dcfe0ee4";
            };

            meta = {
              description = ''Erlang JSON Library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sile/jsone";
            };
          } // packageOverrides)
      ) {};

    jsone_1_2_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "jsone";
            version = "1.2.3";
            src = fetchHex {
              pkg = "jsone";
              version = "1.2.3";
              sha256 =
                "629369e718a50a2fcb23c210b6f2eb2fd08b0a6a2c5edade4fca24cda368ac13";
            };

            meta = {
              description = ''Erlang JSON Library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sile/jsone";
            };
          } // packageOverrides)
      ) {};

    jsone_1_3_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "jsone";
            version = "1.3.1";
            src = fetchHex {
              pkg = "jsone";
              version = "1.3.1";
              sha256 =
                "ec2e0af56e9ff4b3b941012bd2f479ba1b0b46a722e427b23e3b5e9a74aa1e07";
            };

            meta = {
              description = ''Erlang JSON Library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sile/jsone";
            };
          } // packageOverrides)
      ) {};

    jsone_1_3_2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "jsone";
            version = "1.3.2";
            src = fetchHex {
              pkg = "jsone";
              version = "1.3.2";
              sha256 =
                "5466341a2899b3258ae8a88543d0bdcfeb2a2932c731c1668f13d33155115e19";
            };

            meta = {
              description = ''Erlang JSON Library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sile/jsone";
            };
          } // packageOverrides)
      ) {};

    jsone_1_4_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "jsone";
            version = "1.4.0";
            src = fetchHex {
              pkg = "jsone";
              version = "1.4.0";
              sha256 =
                "f5c71a945f8dd7e8c4ff46d9a5ef1cb354a70d1311d282eef9240c42279d35ce";
            };

            meta = {
              description = ''Erlang JSON Library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sile/jsone";
            };
          } // packageOverrides)
      ) {};

    jsone_1_4_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "jsone";
            version = "1.4.3";
            src = fetchHex {
              pkg = "jsone";
              version = "1.4.3";
              sha256 =
                "bdbf938f096d3f39a0693b5bfdf3e26bc07004d9b337f8ccb4244073b452b9e3";
            };

            meta = {
              description = ''Erlang JSON Library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sile/jsone";
            };
          } // packageOverrides)
      ) {};

    jsone = jsone_1_4_3;

    jsonrpc2_1_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_8_6,
          jiffy_0_14_11,
          plug_1_3_5,
          poison_1_0_2,
          ranch_1_4_0,
          shackle_0_5_1
        }:
          buildMix ({
            name = "jsonrpc2";
            version = "1.0.1";
            src = fetchHex {
              pkg = "jsonrpc2";
              version = "1.0.1";
              sha256 =
                "62c0e6199c9548dbbc75b6eaaa732670c753d4e2343d9be6ffdee3f3166c8340";
            };
            beamDeps  = [
                          hackney_1_8_6
                          jiffy_0_14_11
                          plug_1_3_5
                          poison_1_0_2
                          ranch_1_4_0
                          shackle_0_5_1
                        ];

            meta = {
              description = ''JSON-RPC 2.0 for Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/fanduel/jsonrpc2-elixir";
            };
          } // packageOverrides)
      ) {};

    jsonrpc2 = jsonrpc2_1_0_1;

    jsurl_ex_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "jsurl_ex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "jsurl_ex";
              version = "0.1.0";
              sha256 =
                "f26e46668bff25f7705d8cb58c38ac106988e98d60219cff57ce936666f85078";
            };

            meta = {
              description = ''Package to work with the jsurl format'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tuvistavie/jsurl_ex";
            };
          } // packageOverrides)
      ) {};

    jsurl_ex = jsurl_ex_0_1_0;

    jsx_1_4_5 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "jsx";
            version = "1.4.5";
            src = fetchHex {
              pkg = "jsx";
              version = "1.4.5";
              sha256 =
                "ff5115611c5dd789cebe3addc07d18b86340f701c52ad063caba6fe8da3a489b";
            };

            meta = {
              longDescription = ''an erlang application for consuming,
                                producing and manipulating json. inspired by
                                yajl'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/talentdeficit/jsx";
            };
          } // packageOverrides)
      ) {};

    jsx_2_5_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, mixunit_0_9_2 }:
          buildMix ({
            name = "jsx";
            version = "2.5.3";
            src = fetchHex {
              pkg = "jsx";
              version = "2.5.3";
              sha256 =
                "528ab2fdadbcfe95a44ddb831724ee28d48bd3dbd11f2e8109874c855c43dd12";
            };
            beamDeps  = [ mixunit_0_9_2 ];

            meta = {
              longDescription = ''an erlang application for consuming,
                                producing and manipulating json. inspired by
                                yajl'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/talentdeficit/jsx";
            };
          } // packageOverrides)
      ) {};

    jsx_2_6_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "jsx";
            version = "2.6.2";
            src = fetchHex {
              pkg = "jsx";
              version = "2.6.2";
              sha256 =
                "6bfccb6461cc3c7d5cc63f3e69ffeb2f1f8de50eca5980065311c056a69a907f";
            };

            meta = {
              longDescription = ''an erlang application for consuming,
                                producing and manipulating json. inspired by
                                yajl'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/talentdeficit/jsx";
            };
          } // packageOverrides)
      ) {};

    jsx_2_7_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "jsx";
            version = "2.7.1";
            src = fetchHex {
              pkg = "jsx";
              version = "2.7.1";
              sha256 =
                "52d0e8bda0c8624bc59c3119236eb49bb66289702ea3d59ad76fd2a56cdf9089";
            };

            meta = {
              longDescription = ''an erlang application for consuming,
                                producing and manipulating json. inspired by
                                yajl'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/talentdeficit/jsx";
            };
          } // packageOverrides)
      ) {};

    jsx_2_8_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "jsx";
            version = "2.8.0";
            src = fetchHex {
              pkg = "jsx";
              version = "2.8.0";
              sha256 =
                "a8ba15d5bac2c48b2be1224a0542ad794538d79e2cc16841a4e24ca75f0f8378";
            };

            meta = {
              longDescription = ''an erlang application for consuming,
                                producing and manipulating json. inspired by
                                yajl'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/talentdeficit/jsx";
            };
          } // packageOverrides)
      ) {};

    jsx_2_8_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "jsx";
            version = "2.8.1";
            src = fetchHex {
              pkg = "jsx";
              version = "2.8.1";
              sha256 =
                "0b963582fe53d31b717eb78198c2f6f2f19e36e390cf490bf47b0b25e8022305";
            };

            meta = {
              longDescription = ''an erlang application for consuming,
                                producing and manipulating json. inspired by
                                yajl'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/talentdeficit/jsx";
            };
          } // packageOverrides)
      ) {};

    jsx_2_8_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "jsx";
            version = "2.8.2";
            src = fetchHex {
              pkg = "jsx";
              version = "2.8.2";
              sha256 =
                "b4c5d3230b397c8d95579e4a3d72826bb6463160130ccf4182f5be8579b5f44c";
            };

            meta = {
              longDescription = ''an erlang application for consuming,
                                producing and manipulating json. inspired by
                                yajl'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/talentdeficit/jsx";
            };
          } // packageOverrides)
      ) {};

    jsx = jsx_2_8_2;

    jsxd_0_1_10 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "jsxd";
            version = "0.1.10";
            src = fetchHex {
              pkg = "jsxd";
              version = "0.1.10";
              sha256 =
                "f71a8238f08a1dee130e8959ff5343524891fa6531392667a5b911cead5f5082";
            };

            meta = {
              description = ''jsx data structire traversing and modification
                            library.'';
              license = stdenv.lib.licenses.cddl;
              homepage = "https://github.com/Licenser/jsxd";
            };
          } // packageOverrides)
      ) {};

    jsxd_0_2_4 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "jsxd";
            version = "0.2.4";
            src = fetchHex {
              pkg = "jsxd";
              version = "0.2.4";
              sha256 =
                "a5b20ec3324e981a57e213ca4824c56885029bc0be135de2de92c82d6af3fcf1";
            };

            meta = {
              description = ''jsx data structire traversing and modification
                            library.'';
              license = stdenv.lib.licenses.cddl;
              homepage = "https://github.com/Licenser/jsxd";
            };
          } // packageOverrides)
      ) {};

    jsxd = jsxd_0_2_4;

    jsxn_0_2_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, jsx_2_8_2 }:
          buildRebar3 ({
            name = "jsxn";
            version = "0.2.1";
            src = fetchHex {
              pkg = "jsxn";
              version = "0.2.1";
              sha256 =
                "122a52538dc34ddf4a6efcaeb9744fc948d132f3608e96f109a0d1a054fd1f57";
            };

            beamDeps  = [ jsx_2_8_2 ];

            meta = {
              description = ''jsx but with maps'';

              homepage = "https://github.com/talentdeficit/jsxn";
            };
          } // packageOverrides)
      ) {};

    jsxn = jsxn_0_2_1;

    juicy_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, rustler_0_8_0 }:
          buildMix ({
            name = "juicy";
            version = "0.1.0";
            src = fetchHex {
              pkg = "juicy";
              version = "0.1.0";
              sha256 =
                "5c83b6c898d784ddcf6c93363d9b402700eb42cf0d356823067284ea42e01aed";
            };
            beamDeps  = [ rustler_0_8_0 ];

            meta = {
              description = ''A fast JSON parser for Elixir with some extra
                            features Edit'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/hansihe/juicy";
            };
          } // packageOverrides)
      ) {};

    juicy = juicy_0_1_0;

    julia_port_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "julia_port";
            version = "0.1.0";
            src = fetchHex {
              pkg = "julia_port";
              version = "0.1.0";
              sha256 =
                "a687b018c6c5c2623d9648aa8444de4abff3b282dd38d98b7c5b973c1973cee3";
            };

            meta = {
              longDescription = ''example project to invoke julia functions in
                                elixir to do scientific computing using port and
                                metaprogramming'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cjen07/julia_port";
            };
          } // packageOverrides)
      ) {};

    julia_port = julia_port_0_1_0;

    jumbo_1_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "jumbo";
            version = "1.0.2";
            src = fetchHex {
              pkg = "jumbo";
              version = "1.0.2";
              sha256 =
                "d4ca163c8e8bf9c53b55d5f572ecefa9f149b0ca3df3f7f2e557f586e2e18f3a";
            };

            meta = {
              description = ''Reliable, OTP-style, lightweight job processing
                            queue'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mspanc/jumbo";
            };
          } // packageOverrides)
      ) {};

    jumbo = jumbo_1_0_2;

    junit_formatter_1_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "junit_formatter";
            version = "1.3.0";
            src = fetchHex {
              pkg = "junit_formatter";
              version = "1.3.0";
              sha256 =
                "11bf686caf13982bc0dc7aa991faa56d5c167216903c2f36d3af4ac0a73ba0cc";
            };

            meta = {
              longDescription = ''An ExUnit.Formatter that produces an XML
                                report of the tests run in the project _build
                                dir. It is a good fit with Jenkins test
                                reporting plugin, for example.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/victorolinasc/junit-formatter";
            };
          } // packageOverrides)
      ) {};

    junit_formatter = junit_formatter_1_3_0;

    jupyter_0_1_0 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          chumak_1_2_0,
          gproc_0_6_1,
          iso8601_1_2_3,
          jsx_2_8_2,
          lager_3_4_2,
          uuid_erl_1_7_1
        }:
          buildRebar3 ({
            name = "jupyter";
            version = "0.1.0";
            src = fetchHex {
              pkg = "jupyter";
              version = "0.1.0";
              sha256 =
                "a15828759f388eee8deb1a5033f1bc30395e4c1add237ca07429fe26698ef0bf";
            };

            beamDeps  = [
                          chumak_1_2_0
                          gproc_0_6_1
                          iso8601_1_2_3
                          jsx_2_8_2
                          lager_3_4_2
                          uuid_erl_1_7_1
                        ];

            meta = {
              description = ''Library to create jupyter kernels in Erlang'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/filmor/erlang-jupyter";
            };
          } // packageOverrides)
      ) {};

    jupyter = jupyter_0_1_0;

    juspay_api_library_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_8_6,
          httpoison_0_9_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "juspay_api_library";
            version = "0.1.0";
            src = fetchHex {
              pkg = "juspay_api_library";
              version = "0.1.0";
              sha256 =
                "c18c96192e08ed523fd65103a4357d0ab272cb2a85bd8206d238c2e5c56bd637";
            };
            beamDeps  = [ hackney_1_8_6 httpoison_0_9_2 poison_2_2_0 ];

            meta = {
              description = ''Elixir bindings for the Juspay Express Checkout
                            API`s'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    juspay_api_library = juspay_api_library_0_1_0;

    juspay_expresscheckout_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_8_6,
          httpoison_0_9_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "juspay_expresscheckout";
            version = "0.1.0";
            src = fetchHex {
              pkg = "juspay_expresscheckout";
              version = "0.1.0";
              sha256 =
                "0992ea606429939b0b9bd0841c6e852738ca415ff37c98596496fd6027d96dfd";
            };
            beamDeps  = [ hackney_1_8_6 httpoison_0_9_2 poison_2_2_0 ];

            meta = {
              description = ''Elixir bindings for the Juspay Express Checkout
                            API`s'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    juspay_expresscheckout = juspay_expresscheckout_0_1_0;

    jvalid_0_6_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          distillery_1_4_0,
          nex_json_schema_0_7_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "jvalid";
            version = "0.6.0";
            src = fetchHex {
              pkg = "jvalid";
              version = "0.6.0";
              sha256 =
                "d2e35b9e36b092d9e6d4c3818a6ba791ca1f5bc9201e56ca5c2f4dd3315bce17";
            };
            beamDeps  = [ distillery_1_4_0 nex_json_schema_0_7_0 poison_3_1_0
                      ];

            meta = {
              description = ''Json Schema validation helper, that allows to
                            store schemes in a separate files.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/Nebo15/jvalid";
            };
          } // packageOverrides)
      ) {};

    jvalid = jvalid_0_6_0;

    jwalk_1_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "jwalk";
            version = "1.1.0";
            src = fetchHex {
              pkg = "jwalk";
              version = "1.1.0";
              sha256 =
                "10c150910ba3539583887cb2b5c3f70d602138471e6f6b5c22498aa18ed654e1";
            };

            meta = {
              longDescription = ''Helper module for working with Erlang
                                representations of JSON, handling eep-18, map,
                                mochijson-style and proplists representations'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jr0senblum/jwalk";
            };
          } // packageOverrides)
      ) {};

    jwalk_1_1_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "jwalk";
            version = "1.1.3";
            src = fetchHex {
              pkg = "jwalk";
              version = "1.1.3";
              sha256 =
                "94d003dd7284e3b051fa66914e504e8da1c776c716ea82c52f2e182bad190689";
            };

            meta = {
              longDescription = ''Helper module for working with Erlang
                                representations of JSON, handling eep-18, map,
                                mochijson-style and proplists representations'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jr0senblum/jwalk";
            };
          } // packageOverrides)
      ) {};

    jwalk = jwalk_1_1_3;

    jwerl_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, jsx_2_6_2 }:
          buildMix ({
            name = "jwerl";
            version = "0.1.1";
            src = fetchHex {
              pkg = "jwerl";
              version = "0.1.1";
              sha256 =
                "7d493a78d1801773de1e3ce77dbb65ba01b59b7a883d051265917dc003b38bdb";
            };
            beamDeps  = [ jsx_2_6_2 ];

            meta = {
              description = ''JWT Library for Erlang and Elixir'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/emedia-project/jwerl";
            };
          } // packageOverrides)
      ) {};

    jwerl = jwerl_0_1_1;

    jwt_0_1_3 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          base64url_0_0_1,
          jsx_2_8_0
        }:
          buildRebar3 ({
            name = "jwt";
            version = "0.1.3";
            src = fetchHex {
              pkg = "jwt";
              version = "0.1.3";
              sha256 =
                "c7d4bc7ec2c8662b19ac0650e5b9f3e040620e4a1b7b97547fefe74e94371766";
            };

            beamDeps  = [ base64url_0_0_1 jsx_2_8_0 ];

            meta = {
              description = ''Erlang JWT library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/artemeff/jwt";
            };
          } // packageOverrides)
      ) {};

    jwt = jwt_0_1_3;

    jwt_claims_0_0_4 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, json_web_token_0_2_8
        }:
          buildMix ({
            name = "jwt_claims";
            version = "0.0.4";
            src = fetchHex {
              pkg = "jwt_claims";
              version = "0.0.4";
              sha256 =
                "34e77c4c8044026646f23c2017ed9cf76d540b8f3c24d141f1c20d62543278cc";
            };
            beamDeps  = [ json_web_token_0_2_8 ];

            meta = {
              description = ''Elixir implementation of JWT registered claims,
                            RFC 7519'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/garyf/jwt_claims_ex";
            };
          } // packageOverrides)
      ) {};

    jwt_claims = jwt_claims_0_0_4;

    jwtex_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_1_3_1 }:
          buildMix ({
            name = "jwtex";
            version = "0.0.1";
            src = fetchHex {
              pkg = "jwtex";
              version = "0.0.1";
              sha256 =
                "5b8b826e8543e323f62a0e8cb2fb5714d8e7110ecce97419cd0a4a656fa411cf";
            };
            beamDeps  = [ poison_1_3_1 ];

            meta = {
              description = ''JWT decoding library for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "http://github.com/mschae/jwtex";
            };
          } // packageOverrides)
      ) {};

    jwtex = jwtex_0_0_1;

    k6_bytea_1_1_5 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "k6_bytea";
            version = "1.1.5";
            src = fetchHex {
              pkg = "k6_bytea";
              version = "1.1.5";
              sha256 =
                "1ce4ca84bbe45890bc3c07809f8e01fb80c4613226fbd318aaac73d4cd233132";
            };
            compilePorts = true;
            buildPlugins  = [ pc ];


            meta = {
              description = ''A mutable byte array for Erlang.'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    k6_bytea = k6_bytea_1_1_5;

    kadabra_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hpack_erl_0_2_3,
          scribe_0_5_0
        }:
          buildMix ({
            name = "kadabra";
            version = "0.2.0";
            src = fetchHex {
              pkg = "kadabra";
              version = "0.2.0";
              sha256 =
                "30028c3a297535960825368c3fbac84e0b1e62e6d4b6e113533f7a5f0d7c843b";
            };
            beamDeps  = [ hpack_erl_0_2_3 scribe_0_5_0 ];

            meta = {
              description = ''HTTP/2 client for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/codedge-llc/kadabra";
            };
          } // packageOverrides)
      ) {};

    kadabra = kadabra_0_2_0;

    kafe_2_2_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          bristow_0_2_2,
          bucs_1_0_10,
          doteki_1_0_5,
          lager_3_2_4,
          metrics_2_2_0,
          poolgirl_1_1_2
        }:
          buildMix ({
            name = "kafe";
            version = "2.2.1";
            src = fetchHex {
              pkg = "kafe";
              version = "2.2.1";
              sha256 =
                "9d9c46ecf0f0b0a0e0422b05b6aef12e195f35d3d1014c5709ce9719c69c6223";
            };
            beamDeps  = [
                          bristow_0_2_2
                          bucs_1_0_10
                          doteki_1_0_5
                          lager_3_2_4
                          metrics_2_2_0
                          poolgirl_1_1_2
                        ];

            meta = {
              description = ''A Kafka client for Erlang and Elixir'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/botsunit/kafe";
            };
          } // packageOverrides)
      ) {};

    kafe = kafe_2_2_1;

    kaffe_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, brod_2_5_0 }:
          buildMix ({
            name = "kaffe";
            version = "1.0.0";
            src = fetchHex {
              pkg = "kaffe";
              version = "1.0.0";
              sha256 =
                "de715e0af788b7d6aa3512f45d2c8239ee0811b97025e78d641dbcf884009dfd";
            };
            beamDeps  = [ brod_2_5_0 ];

            meta = {
              longDescription = ''An opinionated Elixir wrapper around brod,
                                the Erlang Kafka client, that supports encrypted
                                connections to Heroku Kafka out of the box.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/spreedly/kaffe";
            };
          } // packageOverrides)
      ) {};

    kaffe = kaffe_1_0_0;

    kafka_consumer_1_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          gproc_0_6_1,
          kafka_ex_0_6_3,
          poolboy_1_5_1
        }:
          buildMix ({
            name = "kafka_consumer";
            version = "1.2.0";
            src = fetchHex {
              pkg = "kafka_consumer";
              version = "1.2.0";
              sha256 =
                "0d58d393b6c24c89793f605236d5419a3af3ab8ac99c3d040761bf66780c2fb9";
            };
            beamDeps  = [ gproc_0_6_1 kafka_ex_0_6_3 poolboy_1_5_1 ];

            meta = {
              description = ''Consumer for Kafka using brod'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/anoskov/kafka-consumer";
            };
          } // packageOverrides)
      ) {};

    kafka_consumer = kafka_consumer_1_2_0;

    kafka_ex_0_6_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "kafka_ex";
            version = "0.6.3";
            src = fetchHex {
              pkg = "kafka_ex";
              version = "0.6.3";
              sha256 =
                "921c86af13ee79352fd4f0d66e9142c01567be98e424beab288add832e04a23b";
            };

            meta = {
              description = ''Kafka client for Elixir/Erlang.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kafkaex/kafka_ex";
            };
          } // packageOverrides)
      ) {};

    kafka_ex_0_6_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "kafka_ex";
            version = "0.6.4";
            src = fetchHex {
              pkg = "kafka_ex";
              version = "0.6.4";
              sha256 =
                "d9a9a4313243eaacb36c366afe48a9eb5007f9eb8afb512cb342cd894328cfd9";
            };

            meta = {
              description = ''Kafka client for Elixir/Erlang.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kafkaex/kafka_ex";
            };
          } // packageOverrides)
      ) {};

    kafka_ex_0_6_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "kafka_ex";
            version = "0.6.5";
            src = fetchHex {
              pkg = "kafka_ex";
              version = "0.6.5";
              sha256 =
                "66bfbc0d46d9d564b913da7dfbcdcedff03898218bbd94d88509a53b1cbe0302";
            };

            meta = {
              description = ''Kafka client for Elixir/Erlang.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kafkaex/kafka_ex";
            };
          } // packageOverrides)
      ) {};

    kafka_ex = kafka_ex_0_6_5;

    kafka_ex_mock_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          kafka_ex_0_6_4,
          meck_0_8_4
        }:
          buildMix ({
            name = "kafka_ex_mock";
            version = "0.1.0";
            src = fetchHex {
              pkg = "kafka_ex_mock";
              version = "0.1.0";
              sha256 =
                "2bf1b3415aed1fe9480deceb35a006a1cd427d850e7d7738f6b0fd9cb41924de";
            };
            beamDeps  = [ kafka_ex_0_6_4 meck_0_8_4 ];

            meta = {
              description = ''KafkaEx Mock'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/artemeff/kafka_ex_mock";
            };
          } // packageOverrides)
      ) {};

    kafka_ex_mock = kafka_ex_mock_0_1_0;

    kafka_genstage_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          brod_2_3_7,
          gen_stage_0_11_0
        }:
          buildMix ({
            name = "kafka_genstage";
            version = "0.1.1";
            src = fetchHex {
              pkg = "kafka_genstage";
              version = "0.1.1";
              sha256 =
                "27fab0b6dc853f559fb60ebded79ca71b40f70bcca92880ff54bbd0951c70b39";
            };
            beamDeps  = [ brod_2_3_7 gen_stage_0_11_0 ];

            meta = {
              description = ''A module that makes a kafka topic act as a
                            GenState producer'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/jdalberg/kafka_genstage";
            };
          } // packageOverrides)
      ) {};

    kafka_genstage = kafka_genstage_0_1_1;

    kafka_impl_0_4_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, kafka_ex_0_6_5 }:
          buildMix ({
            name = "kafka_impl";
            version = "0.4.2";
            src = fetchHex {
              pkg = "kafka_impl";
              version = "0.4.2";
              sha256 =
                "a8a50a538d14187e39b1e0104db7399f665625873d0d2c6e5e1c2d961315da4a";
            };
            beamDeps  = [ kafka_ex_0_6_5 ];

            meta = {
              description = ''A wrapper around KafkaEx so you can mock it in
                            test.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/avvo/kafka_impl";
            };
          } // packageOverrides)
      ) {};

    kafka_impl = kafka_impl_0_4_2;

    kafka_logger_backend_0_1_10 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          brod_2_3_7,
          poison_2_2_0
        }:
          buildMix ({
            name = "kafka_logger_backend";
            version = "0.1.10";
            src = fetchHex {
              pkg = "kafka_logger_backend";
              version = "0.1.10";
              sha256 =
                "f223c2c1034290d8058b158dba2a48136cf38afa6531ed2862672409cc031f9b";
            };
            beamDeps  = [ brod_2_3_7 poison_2_2_0 ];

            meta = {
              description = ''A backend for Logger that logs to Kafka using
                            Brod'';
              license = stdenv.lib.licenses.artistic1;
              homepage = "https://github.com/jdalberg/logger_kafka_backend";
            };
          } // packageOverrides)
      ) {};

    kafka_logger_backend = kafka_logger_backend_0_1_10;

    kafka_protocol_0_9_1 = callPackage
      (
        {
          buildErlangMk, packageOverrides ? {}, fetchHex, snappyer_1_2_0
        }:
          buildErlangMk ({
            name = "kafka_protocol";
            version = "0.9.1";
            src = fetchHex {
              pkg = "kafka_protocol";
              version = "0.9.1";
              sha256 =
                "76b4f6a7c63c1226cc2b3bf66f94c05605f781ca527145f335538329adc8be38";
            };
            beamDeps  = [ snappyer_1_2_0 ];

            meta = {
              description = ''Kafka protocol library for Erlang/Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/klarna/kafka_protocol";
            };
          } // packageOverrides)
      ) {};

    kafka_protocol_0_9_2 = callPackage
      (
        {
          buildErlangMk, packageOverrides ? {}, fetchHex, snappyer_1_2_0
        }:
          buildErlangMk ({
            name = "kafka_protocol";
            version = "0.9.2";
            src = fetchHex {
              pkg = "kafka_protocol";
              version = "0.9.2";
              sha256 =
                "bd23d353c19eff9059c747b5b26cc4f4451e29124a67ae1541b0085e9081a764";
            };
            beamDeps  = [ snappyer_1_2_0 ];

            meta = {
              description = ''Kafka protocol library for Erlang/Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/klarna/kafka_protocol";
            };
          } // packageOverrides)
      ) {};

    kafka_protocol = kafka_protocol_0_9_2;

    kafkerl_2_1_0 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          epocxy_1_1_0,
          lager_3_2_1,
          parse_trans_3_0_0,
          validerl_2_0_1
        }:
          buildRebar3 ({
            name = "kafkerl";
            version = "2.1.0";
            src = fetchHex {
              pkg = "kafkerl";
              version = "2.1.0";
              sha256 =
                "08eb2f4786fb7ea5edd1f26a378d00d4a2a449929cd54b06b924edcf1e0b339d";
            };

            beamDeps  = [
                          epocxy_1_1_0
                          lager_3_2_1
                          parse_trans_3_0_0
                          validerl_2_0_1
                        ];

            meta = {
              description = ''Apache Kafka 0.8.2 high performance
                            producer/consumer for erlang.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/hernanrivasacosta/kafkerl";
            };
          } // packageOverrides)
      ) {};

    kafkerl = kafkerl_2_1_0;

    kaguya_0_5_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "kaguya";
            version = "0.5.1";
            src = fetchHex {
              pkg = "kaguya";
              version = "0.5.1";
              sha256 =
                "6c4b172e2dd58c664457a831cae476422eaa2d01a53ac752811a3b35a05c889e";
            };

            meta = {
              longDescription = ''A small, powerful, and modular IRC bot
                                framework. Using a flexible macro based routing
                                system, modules can be easily created and
                                used.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/Luminarys/Kaguya";
            };
          } // packageOverrides)
      ) {};

    kaguya = kaguya_0_5_1;

    kalecto_0_3_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_1_0_1,
          kalends_0_6_5
        }:
          buildMix ({
            name = "kalecto";
            version = "0.3.3";
            src = fetchHex {
              pkg = "kalecto";
              version = "0.3.3";
              sha256 =
                "c83d417718f626eb43ffa5527ea25fa5348f6f24f7930d27db7556759094eb1b";
            };
            beamDeps  = [ ecto_1_0_1 kalends_0_6_5 ];

            meta = {
              longDescription = ''Library for using Kalends with Ecto. This
                                lets you save Kalends types in Ecto and work
                                with date-times in multiple timezones. '';

              homepage = "https://github.com/lau/kalecto";
            };
          } // packageOverrides)
      ) {};

    kalecto = kalecto_0_3_3;

    kalends_0_6_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, tzdata_0_5_3 }:
          buildMix ({
            name = "kalends";
            version = "0.6.5";
            src = fetchHex {
              pkg = "kalends";
              version = "0.6.5";
              sha256 =
                "b16621edbccdbe5d3f76efe03dab59292f3782d0d7e29bbe2de9943e49968fe2";
            };
            beamDeps  = [ tzdata_0_5_3 ];

            meta = {
              longDescription = ''Kalends is a datetime library in pure Elixir
                                with up-to-date timezone support using the Olson
                                database. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lau/kalends";
            };
          } // packageOverrides)
      ) {};

    kalends = kalends_0_6_5;

    kane_0_3_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          goth_0_4_0,
          httpoison_0_11_2,
          poison_1_0_2
        }:
          buildMix ({
            name = "kane";
            version = "0.3.4";
            src = fetchHex {
              pkg = "kane";
              version = "0.3.4";
              sha256 =
                "91a3c2f68270a43bea67af40e5fadbe39cb4669fbe6b61604e24764d34bc7284";
            };
            beamDeps  = [ goth_0_4_0 httpoison_0_11_2 poison_1_0_2 ];

            meta = {
              longDescription = ''A library for interacting with Google Cloud
                                Pub/Sub (PubSub). Supports both publication and
                                pull subscription'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/peburrows/kane";
            };
          } // packageOverrides)
      ) {};

    kane = kane_0_3_4;

    kanin_0_6_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "kanin";
            version = "0.6.0";
            src = fetchHex {
              pkg = "kanin";
              version = "0.6.0";
              sha256 =
                "efc7fbf801a71d894fde546617b8c7fb80523f399939decb1b0617e2c3d63adb";
            };

            meta = {
              description = ''An LFE Wrapper for the Erlang RabbitMQ (AMQP)
                            Client'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/lfex/kanin";
            };
          } // packageOverrides)
      ) {};

    kanin = kanin_0_6_0;

    kaper_0_0_6 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_9_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "kaper";
            version = "0.0.6";
            src = fetchHex {
              pkg = "kaper";
              version = "0.0.6";
              sha256 =
                "3a3b60a17fe92bee568ea8411437000fec0213a14c0ebe5dd6f1444843b0b854";
            };
            beamDeps  = [ httpoison_0_9_2 poison_2_2_0 ];

            meta = {
              description = ''Elixir Kapacitor Client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/muxinc/kaper";
            };
          } // packageOverrides)
      ) {};

    kaper = kaper_0_0_6;

    kare_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "kare";
            version = "1.0.0";
            src = fetchHex {
              pkg = "kare";
              version = "1.0.0";
              sha256 =
                "ad3e05e1dba000005b8c1f6e7724eb6160ccf4c8a77bbcc376bbacd9c780ce9d";
            };

            meta = {
              description = ''Function currying in Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/yosriady/kare";
            };
          } // packageOverrides)
      ) {};

    kare = kare_1_0_0;

    katana_0_4_0 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, elvis_core_0_3_5
        }:
          buildRebar3 ({
            name = "katana";
            version = "0.4.0";
            src = fetchHex {
              pkg = "katana";
              version = "0.4.0";
              sha256 =
                "3eeaacc6284694292e192ee62e89b75f01e9be0e37f9a9b4a15933192d77d4c1";
            };

            beamDeps  = [ elvis_core_0_3_5 ];

            meta = {
              longDescription = ''Erlang grab bag of useful functions. It
                                should have been called swiss army knife but
                                katanas are deadlier'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/inaka/erlang-katana";
            };
          } // packageOverrides)
      ) {};

    katana = katana_0_4_0;

    katana_code_0_1_0 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, inaka_aleppo_1_0_0
        }:
          buildRebar3 ({
            name = "katana_code";
            version = "0.1.0";
            src = fetchHex {
              pkg = "katana_code";
              version = "0.1.0";
              sha256 =
                "347ed38b7ddd81d779f7ccc9cc21438a59ecd01d4c85e4b7542969b6228e10b9";
            };

            beamDeps  = [ inaka_aleppo_1_0_0 ];

            meta = {
              description = ''Functions useful for processing Erlang code.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/inaka/katana-code";
            };
          } // packageOverrides)
      ) {};

    katana_code = katana_code_0_1_0;

    katana_test_0_1_1 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          elvis_core_0_3_2,
          xref_runner_1_0_0
        }:
          buildRebar3 ({
            name = "katana_test";
            version = "0.1.1";
            src = fetchHex {
              pkg = "katana_test";
              version = "0.1.1";
              sha256 =
                "8f5f792e2aa76589a4da71b49eaee399af265a73bd5cf8c0fa8664f34dff420c";
            };

            beamDeps  = [ elvis_core_0_3_2 xref_runner_1_0_0 ];

            meta = {
              description = ''Modules and test suites to improve Erlang
                            testing.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/inaka/katana-test";
            };
          } // packageOverrides)
      ) {};

    katana_test = katana_test_0_1_1;

    katipo_0_5_0 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          cowlib_1_0_0,
          metrics_1_1_0,
          worker_pool_2_2_3
        }:
          buildRebar3 ({
            name = "katipo";
            version = "0.5.0";
            src = fetchHex {
              pkg = "katipo";
              version = "0.5.0";
              sha256 =
                "6473ba44b25c7d76d76f48af8184ccb89b4c362403d0e245a3a1fd0c07bc27a2";
            };
            compilePorts = true;
            buildPlugins  = [ coveralls ];

            beamDeps  = [ cowlib_1_0_0 metrics_1_1_0 worker_pool_2_2_3 ];

            meta = {
              description = ''HTTP client based on libcurl'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/puzza007/katipo";
            };
          } // packageOverrides)
      ) {};

    katipo = katipo_0_5_0;

    kavenegar_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_8_3,
          poison_2_2_0
        }:
          buildMix ({
            name = "kavenegar";
            version = "0.0.1";
            src = fetchHex {
              pkg = "kavenegar";
              version = "0.0.1";
              sha256 =
                "cdc313808888fc237c3503e670dc5cee44ea07445ead9ddbb125182ce45f5655";
            };
            beamDeps  = [ httpoison_0_8_3 poison_2_2_0 ];

            meta = {
              description = ''elixir module for kavenegar.com'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/rezam90/kavenegar-ex";
            };
          } // packageOverrides)
      ) {};

    kavenegar = kavenegar_0_0_1;

    kazan_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_1_0_2,
          yaml_elixir_1_3_0
        }:
          buildMix ({
            name = "kazan";
            version = "0.3.0";
            src = fetchHex {
              pkg = "kazan";
              version = "0.3.0";
              sha256 =
                "df05883b8c574e39a563cb2f42aff1e03fe01e3784337cd10d978d401e650079";
            };
            beamDeps  = [ httpoison_0_11_2 poison_1_0_2 yaml_elixir_1_3_0 ];

            meta = {
              description = ''Kubernetes API client for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/obmarg/kazan";
            };
          } // packageOverrides)
      ) {};

    kazan = kazan_0_3_0;

    kcl_0_6_6 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          curve25519_0_1_4,
          ed25519_0_2_5,
          poly1305_0_4_5,
          salsa20_0_3_4
        }:
          buildMix ({
            name = "kcl";
            version = "0.6.6";
            src = fetchHex {
              pkg = "kcl";
              version = "0.6.6";
              sha256 =
                "4470b99394dc32ea015e586e66a031e4df1ab8ad8329b49b8ca79c41711c3c16";
            };
            beamDeps  = [
                          curve25519_0_1_4
                          ed25519_0_2_5
                          poly1305_0_4_5
                          salsa20_0_3_4
                        ];

            meta = {
              description = ''KCl - a less savory pure Elixir NaCl (libsodium)
                            crypto suite substitute'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mwmiller/kcl";
            };
          } // packageOverrides)
      ) {};

    kcl_1_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          curve25519_1_0_0,
          ed25519_1_0_1,
          poly1305_1_0_0,
          salsa20_1_0_0
        }:
          buildMix ({
            name = "kcl";
            version = "1.0.0";
            src = fetchHex {
              pkg = "kcl";
              version = "1.0.0";
              sha256 =
                "68e91c0f68a4aba11fcde0800cb5eb8ed2c79b44d588b97e1eac733238357cbd";
            };
            beamDeps  = [
                          curve25519_1_0_0
                          ed25519_1_0_1
                          poly1305_1_0_0
                          salsa20_1_0_0
                        ];

            meta = {
              description = ''KCl - a less savory pure Elixir NaCl (libsodium)
                            crypto suite substitute'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mwmiller/kcl";
            };
          } // packageOverrides)
      ) {};

    kcl = kcl_1_0_0;

    keccak_2_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, hex2bin_1_0_0 }:
          buildRebar3 ({
            name = "keccak";
            version = "2.0.0";
            src = fetchHex {
              pkg = "keccak";
              version = "2.0.0";
              sha256 =
                "fefed280344c2abeea55894efc0c1077bcd55c138c5d68e86892760517e72c95";
            };
            compilePorts = true;

            beamDeps  = [ hex2bin_1_0_0 ];

            meta = {
              description = ''Keccak (SHA-3) hash function NIF'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/aesedepece/sha3";
            };
          } // packageOverrides)
      ) {};

    keccak = keccak_2_0_0;

    keccakf1600_2_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "keccakf1600";
            version = "2.0.0";
            src = fetchHex {
              pkg = "keccakf1600";
              version = "2.0.0";
              sha256 =
                "bf381475f5d1daf1df2f46bf24d1d4b91debb638b5a6b014cdce40e32eee8f07";
            };
            compilePorts = true;

            meta = {
              description = ''Keccak-f[1600] asynchronous port driver'';
              license = stdenv.lib.licenses.mpl20;
              homepage = "https://github.com/potatosalad/erlang-keccakf1600";
            };
          } // packageOverrides)
      ) {};

    keccakf1600 = keccakf1600_2_0_0;

    keelless_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_4_4,
          httpoison_0_8_3,
          poison_1_5_2
        }:
          buildMix ({
            name = "keelless";
            version = "0.1.0";
            src = fetchHex {
              pkg = "keelless";
              version = "0.1.0";
              sha256 =
                "b038600bb0520975a052fe6852a2dcd0dbd1069309134c617519079037d6927e";
            };
            beamDeps  = [ hackney_1_4_4 httpoison_0_8_3 poison_1_5_2 ];

            meta = {
              description = ''Keen IO API for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hpyhacking/keelless";
            };
          } // packageOverrides)
      ) {};

    keelless = keelless_0_1_0;

    keenex_1_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_1_0_2
        }:
          buildMix ({
            name = "keenex";
            version = "1.0.1";
            src = fetchHex {
              pkg = "keenex";
              version = "1.0.1";
              sha256 =
                "7ad3288bdaa339b5616a56cf34ca59e3b181290e114a2de8be355e5b1ea79b9a";
            };
            beamDeps  = [ httpoison_0_11_2 poison_1_0_2 ];

            meta = {
              description = ''Keen.io API Client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bryanjos/keenex";
            };
          } // packageOverrides)
      ) {};

    keenex = keenex_1_0_1;

    kennitala_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "kennitala";
            version = "1.0.0";
            src = fetchHex {
              pkg = "kennitala";
              version = "1.0.0";
              sha256 =
                "8f22c152fb5de86455d4570ec23f96b3ee110c8f7243e9fd7ffd85fbccf63838";
            };

            meta = {
              longDescription = ''Elixir library for validating and handling
                                the Icelandic Kennitala identity number.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/JonGretar/Kennitala.ex";
            };
          } // packageOverrides)
      ) {};

    kennitala = kennitala_1_0_0;

    kerosene_0_7_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_4,
          phoenix_html_2_9_3,
          plug_1_3_5
        }:
          buildMix ({
            name = "kerosene";
            version = "0.7.0";
            src = fetchHex {
              pkg = "kerosene";
              version = "0.7.0";
              sha256 =
                "141b7cd59760f8883a8c28ab7fa701a1498cd91e2061a8d63764a913c0ab6b06";
            };
            beamDeps  = [ ecto_2_1_4 phoenix_html_2_9_3 plug_1_3_5 ];

            meta = {
              description = ''Pagination for Ecto and Phoenix.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/elixirdrops/kerosene";
            };
          } // packageOverrides)
      ) {};

    kerosene = kerosene_0_7_0;

    key2value_1_5_4 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "key2value";
            version = "1.5.4";
            src = fetchHex {
              pkg = "key2value";
              version = "1.5.4";
              sha256 =
                "73e8d1db769e85404cdb9a74f031b627cacbf058e591928fb7eb651b35363083";
            };

            meta = {
              description = ''Erlang 2-way Map'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/okeuday/key2value";
            };
          } // packageOverrides)
      ) {};

    key2value_1_6_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "key2value";
            version = "1.6.0";
            src = fetchHex {
              pkg = "key2value";
              version = "1.6.0";
              sha256 =
                "108b22e4fca0fa6a4fa18a301c0af8afe00582b70d70a09020641fb2e0488732";
            };

            meta = {
              description = ''Erlang 2-way Map'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/okeuday/key2value";
            };
          } // packageOverrides)
      ) {};

    key2value_1_7_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "key2value";
            version = "1.7.1";
            src = fetchHex {
              pkg = "key2value";
              version = "1.7.1";
              sha256 =
                "daca21b349dc8cc279a3383726e700769b692acabb412f11fd9dc38aa74d9157";
            };

            meta = {
              description = ''Erlang 2-way Map'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/okeuday/key2value";
            };
          } // packageOverrides)
      ) {};

    key2value = key2value_1_7_1;

    key_sigil_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "key_sigil";
            version = "0.1.0";
            src = fetchHex {
              pkg = "key_sigil";
              version = "0.1.0";
              sha256 =
                "ab9e709296856ce96a70e46560760ffe6911fdd7737f41cd295822e45f617a41";
            };

            meta = {
              description = ''~K sigil to boost Keyword list creation'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/rodrigues/key_sigil";
            };
          } // packageOverrides)
      ) {};

    key_sigil = key_sigil_0_1_0;

    key_tools_0_4_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "key_tools";
            version = "0.4.1";
            src = fetchHex {
              pkg = "key_tools";
              version = "0.4.1";
              sha256 =
                "1a5afce636176481acec2db91066e68af5bf3c512327292a14078ca1aad1a57e";
            };

            meta = {
              description = ''Simple functions for coercing Elixir Maps:
                            atomizing, snake_casing, etc.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/EthanML/key_tools_ex";
            };
          } // packageOverrides)
      ) {};

    key_tools = key_tools_0_4_1;

    key_value_parser_1_0_6 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "key_value_parser";
            version = "1.0.6";
            src = fetchHex {
              pkg = "key_value_parser";
              version = "1.0.6";
              sha256 =
                "eb6338cde5714c3f441af194493feaa7d0291943df11cf39f233003dec0a76c2";
            };

            meta = {
              description = ''A simple key value parser'';
              license = stdenv.lib.licenses.unlicense;
              homepage = "https://github.com/timberio/key-value-parser-elixir";
            };
          } // packageOverrides)
      ) {};

    key_value_parser = key_value_parser_1_0_6;

    keymaster_0_0_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          plug_1_3_5,
          poison_2_2_0
        }:
          buildMix ({
            name = "keymaster";
            version = "0.0.3";
            src = fetchHex {
              pkg = "keymaster";
              version = "0.0.3";
              sha256 =
                "93ba90778f0dbe162fde8584c1510a61fcbf0f08d20ed24ea8548a3f84790fa8";
            };
            beamDeps  = [ plug_1_3_5 poison_2_2_0 ];

            meta = {
              description = ''An opinionated OAuth 2.0 server for Elixir
                            projects.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/austinsmorris/keymaster";
            };
          } // packageOverrides)
      ) {};

    keymaster = keymaster_0_0_3;

    keys1value_1_5_4 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "keys1value";
            version = "1.5.4";
            src = fetchHex {
              pkg = "keys1value";
              version = "1.5.4";
              sha256 =
                "76b4fdd99aa4d6eb33ae9748463b76f47129120cf2349c6713c3e47e96a908ce";
            };

            meta = {
              description = ''Erlang Set Associative Map For Key Lists'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/okeuday/keys1value";
            };
          } // packageOverrides)
      ) {};

    keys1value_1_6_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "keys1value";
            version = "1.6.0";
            src = fetchHex {
              pkg = "keys1value";
              version = "1.6.0";
              sha256 =
                "bdb05f53e541663d12afc3fb43621fa0cf630622f9f10cee3b96f34b6c4b53a9";
            };

            meta = {
              description = ''Erlang Set Associative Map For Key Lists'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/okeuday/keys1value";
            };
          } // packageOverrides)
      ) {};

    keys1value_1_7_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "keys1value";
            version = "1.7.1";
            src = fetchHex {
              pkg = "keys1value";
              version = "1.7.1";
              sha256 =
                "4d683d1c327a98cb7a590efacd9e8549deb4419c67a3acc81a3882d045311470";
            };

            meta = {
              description = ''Erlang Set Associative Map For Key Lists'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/okeuday/keys1value";
            };
          } // packageOverrides)
      ) {};

    keys1value = keys1value_1_7_1;

    kia11y_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_1_0_2
        }:
          buildMix ({
            name = "kia11y";
            version = "0.1.1";
            src = fetchHex {
              pkg = "kia11y";
              version = "0.1.1";
              sha256 =
                "6c4bb294283407fb3371d63b37086bcfb2800c5e7e909d48f0ec01b6840e5dfc";
            };
            beamDeps  = [ httpoison_0_11_2 poison_1_0_2 ];

            meta = {
              description = ''Elixir client for the AccessLint Service A11Y
                            Checker'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jaimeiniesta/kia11y";
            };
          } // packageOverrides)
      ) {};

    kia11y = kia11y_0_1_1;

    kickbox_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_8_6,
          plug_1_3_5,
          poison_3_1_0
        }:
          buildMix ({
            name = "kickbox";
            version = "0.1.0";
            src = fetchHex {
              pkg = "kickbox";
              version = "0.1.0";
              sha256 =
                "f965ac53377f0369ef994ee22c9c4f45156fd2722aa5215301deda9441cf42fb";
            };
            beamDeps  = [ hackney_1_8_6 plug_1_3_5 poison_3_1_0 ];

            meta = {
              description = ''A Kickbox API client written in Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pablo-co/kickbox-elixir";
            };
          } // packageOverrides)
      ) {};

    kickbox = kickbox_0_1_0;

    kindred_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ex_rated_1_2_2,
          httpoison_0_8_3,
          poison_2_0_1
        }:
          buildMix ({
            name = "kindred";
            version = "0.0.1";
            src = fetchHex {
              pkg = "kindred";
              version = "0.0.1";
              sha256 =
                "48b229e007f3d6d06e38f49c85598c20fb6e76d92afd441a86fdee931c2f5fc2";
            };
            beamDeps  = [ ex_rated_1_2_2 httpoison_0_8_3 poison_2_0_1 ];

            meta = {
              description = ''League of Legends API client written in Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/matthewferderber/kindred";
            };
          } // packageOverrides)
      ) {};

    kindred = kindred_0_0_1;

    kinja_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_8_3,
          poison_2_2_0
        }:
          buildMix ({
            name = "kinja";
            version = "0.0.1";
            src = fetchHex {
              pkg = "kinja";
              version = "0.0.1";
              sha256 =
                "97b68a603fb5e665f07aac0396ee53d28690bdc42845c38b23741675c053b761";
            };
            beamDeps  = [ httpoison_0_8_3 poison_2_2_0 ];

            meta = {
              description = ''A wrapper for the Kinja API.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/adampash/kinjaex";
            };
          } // packageOverrides)
      ) {};

    kinja = kinja_0_0_1;

    kitchen_sink_1_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "kitchen_sink";
            version = "1.0.2";
            src = fetchHex {
              pkg = "kitchen_sink";
              version = "1.0.2";
              sha256 =
                "9eb26e81b265f6ba6f7f120077f61ea5d3305ee0f21169fdfa6d328de0086471";
            };

            meta = {
              description = ''Mixins for Elixir namespaces and Misc utility
                            functions'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/planswell/kitchen-sink";
            };
          } // packageOverrides)
      ) {};

    kitchen_sink = kitchen_sink_1_0_2;

    kitsune_0_5_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_1_5_2 }:
          buildMix ({
            name = "kitsune";
            version = "0.5.2";
            src = fetchHex {
              pkg = "kitsune";
              version = "0.5.2";
              sha256 =
                "f8d48f1f3abe89aa9df7b37bc59c9bfa5932142d076d5322f97e92ec732bf993";
            };
            beamDeps  = [ poison_1_5_2 ];

            meta = {
              longDescription = ''Kitsune is an Elixir library for transforming
                                the representation of data inspired by
                                Representable.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/edubkendo/kitsune";
            };
          } // packageOverrides)
      ) {};

    kitsune = kitsune_0_5_2;

    kitto_0_6_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_0_4,
          fs_3_4_0,
          httpoison_0_11_2,
          plug_1_3_5,
          poison_3_1_0
        }:
          buildMix ({
            name = "kitto";
            version = "0.6.0";
            src = fetchHex {
              pkg = "kitto";
              version = "0.6.0";
              sha256 =
                "f49eecd48c59122107e35cbf3829a6b1139943652c9fe35f15b7bc3261a60626";
            };
            beamDeps  = [
                          cowboy_1_0_4
                          fs_3_4_0
                          httpoison_0_11_2
                          plug_1_3_5
                          poison_3_1_0
                        ];

            meta = {
              description = ''Framework for creating interactive dashboards'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kittoframework/kitto";
            };
          } // packageOverrides)
      ) {};

    kitto = kitto_0_6_0;

    kla_0_8_0_rc4 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "kla";
            version = "0.8.0-rc4";
            src = fetchHex {
              pkg = "kla";
              version = "0.8.0-rc4";
              sha256 =
                "844d1638b71613b5e8e5b50c3431786d22166351b901dbdc79de7d0b3144e9f7";
            };

            meta = {
              description = ''An LFE Wrapper Library used to Dress Up Erlang
                            Libraries in a Lispy Costume'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/lfex/kla";
            };
          } // packageOverrides)
      ) {};

    kla = kla_0_8_0_rc4;

    kmv_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          heap_1_0_1,
          murmur_1_0_0
        }:
          buildMix ({
            name = "kmv";
            version = "0.1.0";
            src = fetchHex {
              pkg = "kmv";
              version = "0.1.0";
              sha256 =
                "a420f74fc4dd80f71a038ffe4ab38f8315d926ede3375659ae9d53fa22b267d1";
            };
            beamDeps  = [ heap_1_0_1 murmur_1_0_0 ];

            meta = {
              description = ''K-minimum value sketch to estimate cardinality of
                            sets.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/joshwalters/kmv";
            };
          } // packageOverrides)
      ) {};

    kmv = kmv_0_1_0;

    knine_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "knine";
            version = "0.0.1";
            src = fetchHex {
              pkg = "knine";
              version = "0.0.1";
              sha256 =
                "0128ea6b7b9f5e5cea73f4d4654bd4d65f54dab6c0c7a71f60475a576acc5eea";
            };

            meta = {
              description = ''Knine is a deamon to monitor a service
                            availability in different perspectives.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/alisinabh/Knine";
            };
          } // packageOverrides)
      ) {};

    knine = knine_0_0_1;

    knit_0_4_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, exconstructor_1_0_2
        }:
          buildMix ({
            name = "knit";
            version = "0.4.0";
            src = fetchHex {
              pkg = "knit";
              version = "0.4.0";
              sha256 =
                "1d37b89d9d9ee403eccdba2437fde4a004fbf496decb1bb227c95a65443c00a6";
            };
            beamDeps  = [ exconstructor_1_0_2 ];

            meta = {
              description = ''Transforms string maps into nested structs: knits
                            strings into something useful.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/AssetAvenue/knit";
            };
          } // packageOverrides)
      ) {};

    knit = knit_0_4_0;

    kong_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "kong";
            version = "0.0.1";
            src = fetchHex {
              pkg = "kong";
              version = "0.0.1";
              sha256 =
                "12882da3d41d61c925b337237499b2d13c8bc462898c3ed145f7ebc6dc95795f";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''Simple wrapper around the Kong Admin REST API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/stephlow/kong";
            };
          } // packageOverrides)
      ) {};

    kong = kong_0_0_1;

    kovacs_0_9_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "kovacs";
            version = "0.9.2";
            src = fetchHex {
              pkg = "kovacs";
              version = "0.9.2";
              sha256 =
                "0d6fc6830f0d22e793b2472d8808e86384596e26b7bdd17becba3af7f0a8495e";
            };

            meta = {
              longDescription = ''Kovacs - A simple ExUnit test runner It will
                                monitor the file system and run test files when
                                it detects changes. '';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/antp/kovacs";
            };
          } // packageOverrides)
      ) {};

    kovacs = kovacs_0_9_2;

    kramit_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, earmark_0_2_1 }:
          buildMix ({
            name = "kramit";
            version = "0.0.1";
            src = fetchHex {
              pkg = "kramit";
              version = "0.0.1";
              sha256 =
                "26a7c5f52aaf93994868aeeeffeafb5b921dcfbccd82bc7a9471bbec01baa479";
            };
            beamDeps  = [ earmark_0_2_1 ];

            meta = {
              description = ''A HTML5 focused Markdown superset'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/iwantmyname/kramit";
            };
          } // packageOverrides)
      ) {};

    kramit = kramit_0_0_1;

    kronky_0_2_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          absinthe_1_3_1,
          ecto_2_1_4
        }:
          buildMix ({
            name = "kronky";
            version = "0.2.2";
            src = fetchHex {
              pkg = "kronky";
              version = "0.2.2";
              sha256 =
                "9fa7bf33f7201ab4104fef066974a2f37b9655160a294eb36a66577a6518ffba";
            };
            beamDeps  = [ absinthe_1_3_1 ecto_2_1_4 ];

            meta = {
              longDescription = ''Utilities to return ecto validation error
                                messages in an absinthe graphql response.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Ethelo/kronky";
            };
          } // packageOverrides)
      ) {};

    kronky = kronky_0_2_2;

    kronos_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, mizur_1_0_1 }:
          buildMix ({
            name = "kronos";
            version = "1.0.0";
            src = fetchHex {
              pkg = "kronos";
              version = "1.0.0";
              sha256 =
                "2b20434dde14b3b80765e81d6b59c86a45fe0535f7e6df80f10ddce1ce7bd8bb";
            };
            beamDeps  = [ mizur_1_0_1 ];

            meta = {
              longDescription = ''Kronos is a library to facilitate simple
                                arithmetic operations between timestamps. This
                                library is based on Mizur to type values.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/xvw/kronos";
            };
          } // packageOverrides)
      ) {};

    kronos = kronos_1_0_0;

    kronos_ecto_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_4,
          kronos_1_0_0
        }:
          buildMix ({
            name = "kronos_ecto";
            version = "0.1.0";
            src = fetchHex {
              pkg = "kronos_ecto";
              version = "0.1.0";
              sha256 =
                "c0d1280e8f35bac38b8fecd6ae1fa517d0c53e7fceb941371901f2accac7a79e";
            };
            beamDeps  = [ ecto_2_1_4 kronos_1_0_0 ];

            meta = {
              description = ''Provide Custom Types for Kronos.t (simple
                            timestamps).'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/xvw/kronos_ecto";
            };
          } // packageOverrides)
      ) {};

    kronos_ecto = kronos_ecto_0_1_0;

    krpc_protocol_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, bencodex_1_0_0 }:
          buildMix ({
            name = "krpc_protocol";
            version = "0.0.3";
            src = fetchHex {
              pkg = "krpc_protocol";
              version = "0.0.3";
              sha256 =
                "f439c77d3b21f786031f7e41a14d43cd935765e0b5ad5c97dcedd01566303149";
            };
            beamDeps  = [ bencodex_1_0_0 ];

            meta = {
              longDescription = ''KRPCProtocol is an elixir package for
                                decoding and encoding mainline DHT messages.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cit/krpc_protocol";
            };
          } // packageOverrides)
      ) {};

    krpc_protocol = krpc_protocol_0_0_3;

    krypto_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "krypto";
            version = "0.1.1";
            src = fetchHex {
              pkg = "krypto";
              version = "0.1.1";
              sha256 =
                "a50ff259416c941bc02e6ce5abf9f12e446c9e49cc7bf8ca9e74b2da1ee5866b";
            };

            meta = {
              longDescription = ''Crypto implementation in Elixir, using Erlang
                                crypto, public_key and OpenSSL ports.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/elefthei/krypto";
            };
          } // packageOverrides)
      ) {};

    krypto = krypto_0_1_1;

    ksuid_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ksuid";
            version = "0.1.1";
            src = fetchHex {
              pkg = "ksuid";
              version = "0.1.1";
              sha256 =
                "67ba5eab42172702e5c1a80222ae04993be19cc68b400d8f00c5ded2e438bde3";
            };

            meta = {
              description = ''ksuid is a zero dependency Elixir library for
                            generating KSUIDs.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/girishramnani/elixir-ksuid";
            };
          } // packageOverrides)
      ) {};

    ksuid = ksuid_0_1_1;

    kubex_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_1_5_2
        }:
          buildMix ({
            name = "kubex";
            version = "0.1.1";
            src = fetchHex {
              pkg = "kubex";
              version = "0.1.1";
              sha256 =
                "b0bd22246731b1c4d4d7f832cd0015fd6586022c779fb6672f45a648da7dcf79";
            };
            beamDeps  = [ httpoison_0_11_2 poison_1_5_2 ];

            meta = {
              description = ''Kubernetes integration for and in pure Elixir.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/ingerslevio/kubex";
            };
          } // packageOverrides)
      ) {};

    kubex = kubex_0_1_1;

    kunaio_ex_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_10_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "kunaio_ex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "kunaio_ex";
              version = "0.1.0";
              sha256 =
                "8b3d6214da63161b2683bc1d26d9e5856556f49d647c0079e92149fe4d0a834b";
            };
            beamDeps  = [ httpoison_0_10_0 poison_3_1_0 ];

            meta = {
              description = ''Elixir HTTP client library and utilities for
                            Kuna.io'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cyberpunk-ventures/kunaio_ex";
            };
          } // packageOverrides)
      ) {};

    kunaio_ex = kunaio_ex_0_1_0;

    kvs_2_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "kvs";
            version = "2.1.0";
            src = fetchHex {
              pkg = "kvs";
              version = "2.1.0";
              sha256 =
                "c06382e4dbe8a7dc58201187ddd303e5b1e546713da3a3813863fe62e63dc4c7";
            };

            meta = {
              description = ''Erlang Abstract Database'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/synrc/kvs";
            };
          } // packageOverrides)
      ) {};

    kvs = kvs_2_1_0;

    kvx_0_1_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ex2ms_1_5_0,
          ex_shards_0_2_0
        }:
          buildMix ({
            name = "kvx";
            version = "0.1.3";
            src = fetchHex {
              pkg = "kvx";
              version = "0.1.3";
              sha256 =
                "9f06fd3b2b9b941637ef6b56b841063149b616c6ba92119b64cf9ce47f038e9c";
            };
            beamDeps  = [ ex2ms_1_5_0 ex_shards_0_2_0 ];

            meta = {
              description = ''Simple Elixir in-memory Key/Value Store using
                            `cabol/ex_shards`.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cabol/kvx";
            };
          } // packageOverrides)
      ) {};

    kvx = kvx_0_1_3;

    kwfuns_0_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "kwfuns";
            version = "0.0.4";
            src = fetchHex {
              pkg = "kwfuns";
              version = "0.0.4";
              sha256 =
                "ce1ac52be8d3c3cb7c77fc339eaa877a190899e889bf97cdb92e01922fd52b54";
            };

            meta = {
              longDescription = ''Macros to create functions with syntax based
                                keyword parameters with default values defkw
                                make_list_elem( parent, text, spaced: false,
                                type: :ul ) do ... end translates to def
                                make_list_elem( parent, text, keywords \\ [] )
                                do some_code_with( spaces, typed) end'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/RobertDober/lab42_defkw";
            };
          } // packageOverrides)
      ) {};

    kwfuns = kwfuns_0_0_4;

    kylie_1_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_6_1,
          jsx_2_8_1,
          worker_pool_2_2_1
        }:
          buildMix ({
            name = "kylie";
            version = "1.0.0";
            src = fetchHex {
              pkg = "kylie";
              version = "1.0.0";
              sha256 =
                "444a620ed3af7ad4d7d1c8d45d268d8e17c904a24208bedd6cc8bcdce0006e5c";
            };
            beamDeps  = [ hackney_1_6_1 jsx_2_8_1 worker_pool_2_2_1 ];

            meta = {
              description = ''Kylie is a Erlang application for Cayley graph
                            data base'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/davecaos/kylie";
            };
          } // packageOverrides)
      ) {};

    kylie = kylie_1_0_0;

    laboratory_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, plug_1_3_5 }:
          buildMix ({
            name = "laboratory";
            version = "0.0.1";
            src = fetchHex {
              pkg = "laboratory";
              version = "0.0.1";
              sha256 =
                "62534dd98cd5470395fd1d3a0dcd0e82188c9ea4aec094ed5ee916bf6ae4ba48";
            };
            beamDeps  = [ plug_1_3_5 ];

            meta = {
              description = ''Cookie based dev feature toggles for Plug-based
                            web apps'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/code-mancers/laboratory";
            };
          } // packageOverrides)
      ) {};

    laboratory = laboratory_0_0_1;

    lager_2_1_1 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, goldrush_0_1_9
        }:
          buildRebar3 ({
            name = "lager";
            version = "2.1.1";
            src = fetchHex {
              pkg = "lager";
              version = "2.1.1";
              sha256 =
                "5eb1c17ff0f8692285b7648ef5d827d492b8d7554da782afc300ebb4861d5aba";
            };

            beamDeps  = [ goldrush_0_1_9 ];

            meta = {
              description = ''Erlang logging framework'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/erlang-lager/lager";
            };
          } // packageOverrides)
      ) {};

    lager_3_0_1 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, goldrush_0_1_7
        }:
          buildRebar3 ({
            name = "lager";
            version = "3.0.1";
            src = fetchHex {
              pkg = "lager";
              version = "3.0.1";
              sha256 =
                "d32c9233105b72dc5c1f6a8fe9a33cc205ecccc359c4449950060cee5a329e35";
            };

            beamDeps  = [ goldrush_0_1_7 ];

            meta = {
              description = ''Erlang logging framework'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/erlang-lager/lager";
            };
          } // packageOverrides)
      ) {};

    lager_3_0_2 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, goldrush_0_1_7
        }:
          buildRebar3 ({
            name = "lager";
            version = "3.0.2";
            src = fetchHex {
              pkg = "lager";
              version = "3.0.2";
              sha256 =
                "527f3b233e01b6cb68780c14ef675ed08ec02247dc029cacecbb56c78dfca100";
            };

            beamDeps  = [ goldrush_0_1_7 ];

            meta = {
              description = ''Erlang logging framework'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/erlang-lager/lager";
            };
          } // packageOverrides)
      ) {};

    lager_3_2_1 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, goldrush_0_1_8
        }:
          buildRebar3 ({
            name = "lager";
            version = "3.2.1";
            src = fetchHex {
              pkg = "lager";
              version = "3.2.1";
              sha256 =
                "09a751789852094bf1ffad239a602bc47829da13ca5937b9d12df27470692095";
            };

            beamDeps  = [ goldrush_0_1_8 ];

            meta = {
              description = ''Erlang logging framework'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/erlang-lager/lager";
            };
          } // packageOverrides)
      ) {};

    lager_3_2_4 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, goldrush_0_1_9
        }:
          buildRebar3 ({
            name = "lager";
            version = "3.2.4";
            src = fetchHex {
              pkg = "lager";
              version = "3.2.4";
              sha256 =
                "eec0b676776adcfc4f281add4acad1806b2f399774eaaa30f9ec47d2b7881b58";
            };

            beamDeps  = [ goldrush_0_1_9 ];

            meta = {
              description = ''Erlang logging framework'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/erlang-lager/lager";
            };
          } // packageOverrides)
      ) {};

    lager_3_4_2 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, goldrush_0_1_9
        }:
          buildRebar3 ({
            name = "lager";
            version = "3.4.2";
            src = fetchHex {
              pkg = "lager";
              version = "3.4.2";
              sha256 =
                "3ab0fc58e3bb5a9601fb9ad8779e40e15d86d262b61f1ff1b37d007abe3579ec";
            };

            beamDeps  = [ goldrush_0_1_9 ];

            meta = {
              description = ''Erlang logging framework'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/erlang-lager/lager";
            };
          } // packageOverrides)
      ) {};

    lager_3_5_0 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, goldrush_0_1_9
        }:
          buildRebar3 ({
            name = "lager";
            version = "3.5.0";
            src = fetchHex {
              pkg = "lager";
              version = "3.5.0";
              sha256 =
                "08cd5bf0fa9b85b3d97d3d47865c715c82824689b246eef1da28b23104bbec81";
            };

            beamDeps  = [ goldrush_0_1_9 ];

            meta = {
              description = ''Erlang logging framework'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/erlang-lager/lager";
            };
          } // packageOverrides)
      ) {};

    lager = lager_3_5_0;

    lager2json_1_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          jsx_2_8_2,
          rfc3339_0_2_2
        }:
          buildMix ({
            name = "lager2json";
            version = "1.0.2";
            src = fetchHex {
              pkg = "lager2json";
              version = "1.0.2";
              sha256 =
                "f417eca4b2edc9a06494f61c3afaf1918ebbe7a3ea13780df79ca68edb914f67";
            };
            beamDeps  = [ jsx_2_8_2 rfc3339_0_2_2 ];

            meta = {
              description = ''a lager formatter that produces json'';
              license = with stdenv.lib.licenses; [ asl20 mit ];
              homepage = "https://github.com/talentdeficit/lager2json";
            };
          } // packageOverrides)
      ) {};

    lager2json = lager2json_1_0_2;

    lager_graylog_0_1_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, lager_3_2_4 }:
          buildRebar3 ({
            name = "lager_graylog";
            version = "0.1.1";
            src = fetchHex {
              pkg = "lager_graylog";
              version = "0.1.1";
              sha256 =
                "f079f7761e543c33ddd34d3b4edbfe3d29bf0d9bb58eefb0e716f6efc5c129fc";
            };

            beamDeps  = [ lager_3_2_4 ];

            meta = {
              description = ''An Erlang lager_graylog library'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/esl/lager_graylog";
            };
          } // packageOverrides)
      ) {};

    lager_graylog = lager_graylog_0_1_1;

    lager_hipchat_0_2_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, lager_3_0_2 }:
          buildRebar3 ({
            name = "lager_hipchat";
            version = "0.2.1";
            src = fetchHex {
              pkg = "lager_hipchat";
              version = "0.2.1";
              sha256 =
                "edd010d21b2982ca51cea6843bb81168702d02a3760dd591d6efe1fdcac5a8df";
            };

            beamDeps  = [ lager_3_0_2 ];

            meta = {
              description = ''HipChat backend for Lager'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/synlay/lager_hipchat";
            };
          } // packageOverrides)
      ) {};

    lager_hipchat = lager_hipchat_0_2_1;

    lager_json_formatter_0_2_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "lager_json_formatter";
            version = "0.2.4";
            src = fetchHex {
              pkg = "lager_json_formatter";
              version = "0.2.4";
              sha256 =
                "53c73d5d0ccfc0688473f883d3880490a4c25cde5effd9d97afd680bb02479da";
            };

            meta = {
              description = ''JSON formatter for Lager'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/G-Corp/lager_json_formatter";
            };
          } // packageOverrides)
      ) {};

    lager_json_formatter = lager_json_formatter_0_2_4;

    lager_logger_1_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, lager_3_5_0 }:
          buildMix ({
            name = "lager_logger";
            version = "1.0.4";
            src = fetchHex {
              pkg = "lager_logger";
              version = "1.0.4";
              sha256 =
                "74c4de30aa1ff8ffe3f4f9c77d4d6389578b467c15af3b07d15b8c6a7ad6eaac";
            };
            beamDeps  = [ lager_3_5_0 ];

            meta = {
              longDescription = ''LagerLogger is a lager backend that forwards
                                all log messages to Elixir`s Logger.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/PSPDFKit-labs/lager_logger";
            };
          } // packageOverrides)
      ) {};

    lager_logger = lager_logger_1_0_4;

    lager_logstash_backend_0_1_1 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          jsx_2_8_0,
          lager_3_2_4
        }:
          buildRebar3 ({
            name = "lager_logstash_backend";
            version = "0.1.1";
            src = fetchHex {
              pkg = "lager_logstash_backend";
              version = "0.1.1";
              sha256 =
                "37dd37e2e1f0dfa3faad39e9f5e8a4a6d696d4b9f4f4d8193db5189a7b7933f8";
            };

            beamDeps  = [ jsx_2_8_0 lager_3_2_4 ];

            meta = {
              description = ''Lager Logstash Logging Backend'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/inaka/lager_logstash_backend.git";
            };
          } // packageOverrides)
      ) {};

    lager_logstash_backend = lager_logstash_backend_0_1_1;

    lager_watchdog_0_1_10 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, lager_2_1_1 }:
          buildRebar3 ({
            name = "lager_watchdog";
            version = "0.1.10";
            src = fetchHex {
              pkg = "lager_watchdog";
              version = "0.1.10";
              sha256 =
                "ac2a5f7d519fa69fff3d41c5c19419552085346f98de4378ca38efa81c322a94";
            };

            beamDeps  = [ lager_2_1_1 ];

            meta = {
              description = ''lager provider to send data to watchdog.'';
              license = stdenv.lib.licenses.cddl;
              homepage = "https://github.com/project-fifo/lager_watchdog";
            };
          } // packageOverrides)
      ) {};

    lager_watchdog = lager_watchdog_0_1_10;

    lang_tags_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "lang_tags";
            version = "0.1.0";
            src = fetchHex {
              pkg = "lang_tags";
              version = "0.1.0";
              sha256 =
                "9bd5b585a73ce471adb7ea28e0dbb63c07290db80212f669b01877b8ad0f6d3d";
            };

            meta = {
              description = ''Work with IANA language tags in Elixir (BCP47 /
                            RFC5646)'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/milmazz/lang_tags";
            };
          } // packageOverrides)
      ) {};

    lang_tags = lang_tags_0_1_0;

    language_names_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "language_names";
            version = "0.1.0";
            src = fetchHex {
              pkg = "language_names";
              version = "0.1.0";
              sha256 =
                "8da91bc0bf03769052eebcf1ff94933f29513e1595941f7c258d5d1fb89b9082";
            };

            meta = {
              description = ''Language names, written in each language Edit'';

              homepage = "https://github.com/manastech/language-names-elixir";
            };
          } // packageOverrides)
      ) {};

    language_names = language_names_0_1_0;

    lasp_support_0_0_2 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          lager_3_4_2,
          time_compat_0_0_1
        }:
          buildRebar3 ({
            name = "lasp_support";
            version = "0.0.2";
            src = fetchHex {
              pkg = "lasp_support";
              version = "0.0.2";
              sha256 =
                "9e192fc90861d36e48665630cb8666305b55d3739d663c17bad13ab99fc26a77";
            };

            beamDeps  = [ lager_3_4_2 time_compat_0_0_1 ];

            meta = {
              description = ''Support libraries for Lasp from Riak Core.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/lasp-lang/partisan";
            };
          } // packageOverrides)
      ) {};

    lasp_support = lasp_support_0_0_2;

    lasse_1_1_0 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex }:
          buildErlangMk ({
            name = "lasse";
            version = "1.1.0";
            src = fetchHex {
              pkg = "lasse";
              version = "1.1.0";
              sha256 =
                "53e70ea9031f7583331a9f9bdbb29da933e591e5c4cce521b4bf85c68e7f3385";
            };

            meta = {
              description = ''Lasse: Server-Sent Event handler for Cowboy.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/inaka/lasse";
            };
          } // packageOverrides)
      ) {};

    lasse = lasse_1_1_0;

    latlong_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "latlong";
            version = "0.1.0";
            src = fetchHex {
              pkg = "latlong";
              version = "0.1.0";
              sha256 =
                "30cc1d72b5580d93880082d21995a72e697e5c7560b4d99a5b67619d260276c7";
            };

            meta = {
              description = ''Latitude, Longitude Parser'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/bengtson/latlong";
            };
          } // packageOverrides)
      ) {};

    latlong = latlong_0_1_0;

    lazy_integer_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ecto_2_0_0_rc_6 }:
          buildMix ({
            name = "lazy_integer";
            version = "1.0.0";
            src = fetchHex {
              pkg = "lazy_integer";
              version = "1.0.0";
              sha256 =
                "d5e6afc8b159b394456bdebe48823af2c9f2aa382575ee696d8943c3d8334c65";
            };
            beamDeps  = [ ecto_2_0_0_rc_6 ];

            meta = {
              description = ''Ecto type to cast floats or strings to integers
                            for your schemas.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/danielzendejas/lazy_integer";
            };
          } // packageOverrides)
      ) {};

    lazy_integer = lazy_integer_1_0_0;

    lazy_lists_0_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "lazy_lists";
            version = "0.1.0";
            src = fetchHex {
              pkg = "lazy_lists";
              version = "0.1.0";
              sha256 =
                "36d68dc8428a741230d6ff074b2018379b1559d32597e43076a1719b1c26e271";
            };

            meta = {
              description = ''Lazy Lists'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/plux/lazy_lists";
            };
          } // packageOverrides)
      ) {};

    lazy_lists = lazy_lists_0_1_0;

    lazymaru_0_2_5 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_0_4,
          plug_1_1_7,
          poison_1_3_1
        }:
          buildMix ({
            name = "lazymaru";
            version = "0.2.5";
            src = fetchHex {
              pkg = "lazymaru";
              version = "0.2.5";
              sha256 =
                "aeb7d963ddcd48791014922dc93030b182ee1fb13b7efbe041190c92cf1e939e";
            };
            beamDeps  = [ cowboy_1_0_4 plug_1_1_7 poison_1_3_1 ];

            meta = {
              description = ''Elixir copy of grape for creating REST-like
                            APIs.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/falood/lazymaru";
            };
          } // packageOverrides)
      ) {};

    lazymaru = lazymaru_0_2_5;

    lb_17_6_12 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "lb";
            version = "17.6.12";
            src = fetchHex {
              pkg = "lb";
              version = "17.6.12";
              sha256 =
                "a05d3edc22d5a2cd05aa16d8a93be05a65fd03b092210cafc42f30046f8f062a";
            };

            meta = {
              description = ''Load-Balancer for spreading Erlang messages.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/Pouriya-Jahanbakhsh/lb";
            };
          } // packageOverrides)
      ) {};

    lb = lb_17_6_12;

    lbm_kv_0_0_2 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex }:
          buildErlangMk ({
            name = "lbm_kv";
            version = "0.0.2";
            src = fetchHex {
              pkg = "lbm_kv";
              version = "0.0.2";
              sha256 =
                "456a8261581ff03df4a9b00a1aa2a4928b90de6d011a592d68af22c6a68b9c52";
            };

            meta = {
              description = ''A simple, distributed, Mnesia-based
                            key-value-store.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lindenbaum/lbm_kv";
            };
          } // packageOverrides)
      ) {};

    lbm_kv = lbm_kv_0_0_2;

    lcfg_0_5_0_rc3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "lcfg";
            version = "0.5.0-rc3";
            src = fetchHex {
              pkg = "lcfg";
              version = "0.5.0-rc3";
              sha256 =
                "427f49d13482c825eb1d956e68dfde2f076461c0448dcafddb7dc4166b27c148";
            };

            meta = {
              description = ''An LFE library for managing and using lfe.config
                            files'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/lfex/lcfg";
            };
          } // packageOverrides)
      ) {};

    lcfg = lcfg_0_5_0_rc3;

    ldap_ex_0_2_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ldap_ex";
            version = "0.2.4";
            src = fetchHex {
              pkg = "ldap_ex";
              version = "0.2.4";
              sha256 =
                "5ecdbce6e0243f92ce012b4fdf7daff4bbf6e748d37e028a4674e1ec87d81dbe";
            };

            meta = {
              longDescription = ''This is a binary instead of char_list version
                                of the stock Erlang :eldap library.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/OvermindDL1/ldap_ex";
            };
          } // packageOverrides)
      ) {};

    ldap_ex = ldap_ex_0_2_4;

    leaderboard_0_2_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "leaderboard";
            version = "0.2.2";
            src = fetchHex {
              pkg = "leaderboard";
              version = "0.2.2";
              sha256 =
                "a8bc2be035ee7b0ee64c6cbbaa07f211cfe6c8f1a04dd67a9cfc5da4fd2871d8";
            };

            meta = {
              description = ''Leaderboard based on ETS tables'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jur0/leaderboard";
            };
          } // packageOverrides)
      ) {};

    leaderboard = leaderboard_0_2_2;

    leaf_through_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ecto_2_1_4 }:
          buildMix ({
            name = "leaf_through";
            version = "0.1.0";
            src = fetchHex {
              pkg = "leaf_through";
              version = "0.1.0";
              sha256 =
                "f9c59b7638c03a33761281c83a619aa12abf332cdd7f42fa5e23965f4249a7d4";
            };
            beamDeps  = [ ecto_2_1_4 ];

            meta = {
              description = ''Painless pagination for Ecto queries.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/gentlelionstudios/leaf_through";
            };
          } // packageOverrides)
      ) {};

    leaf_through = leaf_through_0_1_0;

    leaseweb_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "leaseweb";
            version = "0.1.0";
            src = fetchHex {
              pkg = "leaseweb";
              version = "0.1.0";
              sha256 =
                "63dd6e35b791b22133b667001730726d1061f371448926eac4c8392163575ded";
            };

            meta = {
              description = ''Elixir Wrapper for Leaseweb infrastructure.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ahamtech/elixir-leaseweb";
            };
          } // packageOverrides)
      ) {};

    leaseweb = leaseweb_0_1_0;

    ledx_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, elixir_ale_0_5_2 }:
          buildMix ({
            name = "ledx";
            version = "0.0.1";
            src = fetchHex {
              pkg = "ledx";
              version = "0.0.1";
              sha256 =
                "f468e65572b7c9dcb6c906678c873194818bb1dd78ce35b7dddd9397df4f81a6";
            };
            beamDeps  = [ elixir_ale_0_5_2 ];

            meta = {
              description = ''Ledx is a simple library for interfacing with
                            LEDs on embedded platforms.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/danmarcab/ledx";
            };
          } // packageOverrides)
      ) {};

    ledx = ledx_0_0_1;

    left_pad_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "left_pad";
            version = "0.0.3";
            src = fetchHex {
              pkg = "left_pad";
              version = "0.0.3";
              sha256 =
                "9b14a4b7f84f320175bd2ed2f24754a62206fdd67d90117602876c415cf22374";
            };

            meta = {
              description = ''Pad a string to the left with any number of
                            characters.'';
              license = stdenv.lib.licenses.mpl20;
              homepage = "https://github.com/folz/left_pad.ex";
            };
          } // packageOverrides)
      ) {};

    left_pad = left_pad_0_0_3;

    leftpad_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "leftpad";
            version = "1.0.1";
            src = fetchHex {
              pkg = "leftpad";
              version = "1.0.1";
              sha256 =
                "88e4cd8039461f2558f6e8378d834772b9315554080c5b729d65472209824a89";
            };

            meta = {
              description = ''left pad for elixir, because why not?
                            ¯\\_(ツ)_/¯'';
              license = stdenv.lib.licenses.unlicense;
              homepage = "https://github.com/colinrymer/leftpad.ex";
            };
          } // packageOverrides)
      ) {};

    leftpad = leftpad_1_0_1;

    legs_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "legs";
            version = "0.1.0";
            src = fetchHex {
              pkg = "legs";
              version = "0.1.0";
              sha256 =
                "606cfffe68d33949885de3b792e7704aa8aa89903b13837576eb6fd3d88995c1";
            };

            meta = {
              description = ''An opinionated bot framework that gets out of
                            your way when you need it to.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hazelhq";
            };
          } // packageOverrides)
      ) {};

    legs = legs_0_1_0;

    lens_0_3_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "lens";
            version = "0.3.1";
            src = fetchHex {
              pkg = "lens";
              version = "0.3.1";
              sha256 =
                "2cd17997ed8f86d9e7d019044854f3a23538d246de7ceb7acce0884f1dc0ea1b";
            };

            meta = {
              description = ''A utility for working with nested data
                            structures.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/obrok/lens";
            };
          } // packageOverrides)
      ) {};

    lens = lens_0_3_1;

    less_verifies_alexa_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          certifi_1_2_1,
          httpotion_3_0_2,
          plug_1_3_5
        }:
          buildMix ({
            name = "less_verifies_alexa";
            version = "0.1.0";
            src = fetchHex {
              pkg = "less_verifies_alexa";
              version = "0.1.0";
              sha256 =
                "e8904fb4251c4430b3fd7cadefd3fec9a3d0a0d8cf0142eeb1daf54d11a75538";
            };
            beamDeps  = [ certifi_1_2_1 httpotion_3_0_2 plug_1_3_5 ];

            meta = {
              description = ''A plug that validates requests from Amazon`s
                            Alexa service.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/LessEverything/less_verifies_alexa";
            };
          } // packageOverrides)
      ) {};

    less_verifies_alexa = less_verifies_alexa_0_1_0;

    lessonly_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_8_3,
          poison_2_2_0
        }:
          buildMix ({
            name = "lessonly";
            version = "0.0.1";
            src = fetchHex {
              pkg = "lessonly";
              version = "0.0.1";
              sha256 =
                "a7c53da4a3153043a36636e9c9b188e7bad54caac4c994705afe4d47fd2ef111";
            };
            beamDeps  = [ httpoison_0_8_3 poison_2_2_0 ];

            meta = {
              description = ''An Elixir wrapper for the Lesson.ly API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/stevegrossi/lessonly-elixir";
            };
          } // packageOverrides)
      ) {};

    lessonly = lessonly_0_0_1;

    letsencrypt_0_8_1 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          elli_1_0_5,
          erlang_color_1_0_0,
          getopt_0_8_2,
          jiffy_0_14_7,
          shotgun_0_3_0,
          yamerl_0_4_0
        }:
          buildRebar3 ({
            name = "letsencrypt";
            version = "0.8.1";
            src = fetchHex {
              pkg = "letsencrypt";
              version = "0.8.1";
              sha256 =
                "013a98749c414cd1e104198523bc0176b135a7166943cc01534f3c5f9cbdbfa6";
            };

            buildPlugins  = [ rebar3_auto ];

            beamDeps  = [
                          elli_1_0_5
                          erlang_color_1_0_0
                          getopt_0_8_2
                          jiffy_0_14_7
                          shotgun_0_3_0
                          yamerl_0_4_0
                        ];

            meta = {
              description = ''A letsencrypt.org client library for Erlang'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/gbour/letsencrypt-erlang";
            };
          } // packageOverrides)
      ) {};

    letsencrypt = letsencrypt_0_8_1;

    levaindoc_0_7_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "levaindoc";
            version = "0.7.0";
            src = fetchHex {
              pkg = "levaindoc";
              version = "0.7.0";
              sha256 =
                "6e9c5e58b0ca8883be5669925fbe6423234fa3fdefa53d48ecc19932f5927cb0";
            };

            meta = {
              description = ''Lightweight LFE wrapper for pandoc.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/quasiquoting/levaindoc";
            };
          } // packageOverrides)
      ) {};

    levaindoc = levaindoc_0_7_0;

    level_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "level";
            version = "1.0.0";
            src = fetchHex {
              pkg = "level";
              version = "1.0.0";
              sha256 =
                "42d54a840e79af5833e5ae335b374699c46d996053f2f3480e181a57cad2ae62";
            };

            meta = {
              longDescription = ''Level implements various helper functions and
                                data types for working with Googles Level data
                                store. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gausby/level";
            };
          } // packageOverrides)
      ) {};

    level = level_1_0_0;

    lex_luthor_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "lex_luthor";
            version = "0.1.1";
            src = fetchHex {
              pkg = "lex_luthor";
              version = "0.1.1";
              sha256 =
                "2f26a7104ca4e5e147fc760b50fca9719d6ae80a8aec42fba522690b69dc0d01";
            };

            meta = {
              longDescription = ''LexLuthor is a Lexer in Elixir (say that 10
                                times fast) which uses macros to generate a
                                reusable lexers. Good times.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jamesotron/lex_luthor";
            };
          } // packageOverrides)
      ) {};

    lex_luthor = lex_luthor_0_1_1;

    lexicon_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "lexicon";
            version = "0.1.2";
            src = fetchHex {
              pkg = "lexicon";
              version = "0.1.2";
              sha256 =
                "c16d48f628de2470bba421332bc4d0a8034472cd06cf28527621f2f23d3ece1a";
            };

            meta = {
              description = ''A lexicon (word list) implemented in Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rtvu/lexicon";
            };
          } // packageOverrides)
      ) {};

    lexicon = lexicon_0_1_2;

    lfe_1_2_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "lfe";
            version = "1.2.0";
            src = fetchHex {
              pkg = "lfe";
              version = "1.2.0";
              sha256 =
                "38506f04bf2698ade1b2dd8ce4fdeafdb73ff460a5988741af20629da3731f18";
            };

            meta = {
              description = ''Lisp Flavored Erlang (LFE)'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/rvirding/lfe";
            };
          } // packageOverrides)
      ) {};

    lfe = lfe_1_2_0;

    lfsr_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "lfsr";
            version = "0.0.2";
            src = fetchHex {
              pkg = "lfsr";
              version = "0.0.2";
              sha256 =
                "8a14455bd0ce5c6b7dc56bf1027007c67e48979b49b70e09372cc36769d16b90";
            };

            meta = {
              description = ''Elixir implementation of a binary Galois Linear
                            Feedback Shift Register. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pma/lfsr";
            };
          } // packageOverrides)
      ) {};

    lfsr = lfsr_0_0_2;

    lheap_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "lheap";
            version = "1.0.0";
            src = fetchHex {
              pkg = "lheap";
              version = "1.0.0";
              sha256 =
                "6c8272fbfc7f7fff73fb641cec2c4a3be1417bf6711ae555e4d6e0cae51050d9";
            };

            meta = {
              description = ''Leftist heap in Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sotojuan/lheap";
            };
          } // packageOverrides)
      ) {};

    lheap = lheap_1_0_0;

    lhttpc_1_3_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "lhttpc";
            version = "1.3.0";
            src = fetchHex {
              pkg = "lhttpc";
              version = "1.3.0";
              sha256 =
                "ddd2bd4b85159bc987c954b14877168e6a3c3e516105702189776e97c50296a4";
            };

            meta = {
              description = ''Lightweight HTTP Client'';
              license = stdenv.lib.licenses.bsd3;
            };
          } // packageOverrides)
      ) {};

    lhttpc_1_4_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "lhttpc";
            version = "1.4.0";
            src = fetchHex {
              pkg = "lhttpc";
              version = "1.4.0";
              sha256 =
                "26d5a12b63fedb3e862a816a472258007dc1e85b75a9bcdb0223425e39827777";
            };

            meta = {
              description = ''Lightweight HTTP Client'';
              license = stdenv.lib.licenses.bsd3;
            };
          } // packageOverrides)
      ) {};

    lhttpc_1_5_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "lhttpc";
            version = "1.5.3";
            src = fetchHex {
              pkg = "lhttpc";
              version = "1.5.3";
              sha256 =
                "609a442e84e8291c0e06e858ae4596349ca03683f576b55f54c499dfffb8890e";
            };

            meta = {
              description = ''Lightweight HTTP Client'';
              license = stdenv.lib.licenses.bsd3;
            };
          } // packageOverrides)
      ) {};

    lhttpc = lhttpc_1_5_3;

    lib_combin_0_1_5 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "lib_combin";
            version = "0.1.5";
            src = fetchHex {
              pkg = "lib_combin";
              version = "0.1.5";
              sha256 =
                "d565215b9e5b3b1ef0b1a5dedd0cc41aea0814d6ead6191584b5961c9db874d5";
            };

            meta = {
              description = ''Basic combinatorics for Erlang lists and maps.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/joergen7/lib_combin";
            };
          } // packageOverrides)
      ) {};

    lib_combin = lib_combin_0_1_5;

    libcalculatorfinance_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "libcalculatorfinance";
            version = "0.0.1";
            src = fetchHex {
              pkg = "libcalculatorfinance";
              version = "0.0.1";
              sha256 =
                "cc8b37a76225dba5d07c596bc185d1402679a674e189423798c2150d91cda121";
            };

            meta = {
              longDescription = ''Elixir library that contains functions that
                                help with financial calculations, related to
                                trading and investing.'';
              license = stdenv.lib.licenses.bsd3;
              homepage =
                "https://github.com/rockwolf/libcalculatorfinance-ex/tree/0.0.1";
            };
          } // packageOverrides)
      ) {};

    libcalculatorfinance = libcalculatorfinance_0_0_1;

    libchunter_0_1_48 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          fifo_spec_0_1_32,
          lager_3_2_4
        }:
          buildRebar3 ({
            name = "libchunter";
            version = "0.1.48";
            src = fetchHex {
              pkg = "libchunter";
              version = "0.1.48";
              sha256 =
                "b4905d9c192cd19820915d9fb73cf8dde5d1d09f9a8496b370d70743f30c1f44";
            };

            beamDeps  = [ fifo_spec_0_1_32 lager_3_2_4 ];

            meta = {
              description = ''Chunter interface library.'';
              license = stdenv.lib.licenses.cddl;
              homepage = "https://github.com/project-fifo/libchunter";
            };
          } // packageOverrides)
      ) {};

    libchunter = libchunter_0_1_48;

    libcluster_2_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_3_1_0 }:
          buildMix ({
            name = "libcluster";
            version = "2.1.1";
            src = fetchHex {
              pkg = "libcluster";
              version = "2.1.1";
              sha256 =
                "270699bec0ddbfc616b56c2cebec6ab3e02b84e1a5db2325f148251db6177c40";
            };
            beamDeps  = [ poison_3_1_0 ];

            meta = {
              description = ''Automatic Erlang cluster formation and management
                            for Elixir/Erlang applications'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bitwalker/libcluster";
            };
          } // packageOverrides)
      ) {};

    libcluster = libcluster_2_1_1;

    libdecaf_0_0_4 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "libdecaf";
            version = "0.0.4";
            src = fetchHex {
              pkg = "libdecaf";
              version = "0.0.4";
              sha256 =
                "e4cdc48f8e0634b8b8507b2245667a3fa7dd4dab1dbb01f508e7ca880667a05d";
            };
            compilePorts = true;

            meta = {
              longDescription = ''libdecaf NIF for ECDH (X25519, X448), EdDSA
                                (Ed25519, Ed25519ph, Ed448, Ed448ph),
                                curve25519, curve448'';
              license = stdenv.lib.licenses.mpl20;
              homepage = "https://github.com/potatosalad/erlang-libdecaf";
            };
          } // packageOverrides)
      ) {};

    libdecaf = libdecaf_0_0_4;

    libex_config_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "libex_config";
            version = "0.2.0";
            src = fetchHex {
              pkg = "libex_config";
              version = "0.2.0";
              sha256 =
                "27534209d8661d597017426922d64267f2452baac36866ba0bb470792f55292d";
            };

            meta = {
              description = ''LibEx.Config exposes helpers around accessing OTP
                            application configuration. '';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/reset/libex-config";
            };
          } // packageOverrides)
      ) {};

    libex_config = libex_config_0_2_0;

    libgraph_0_6_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "libgraph";
            version = "0.6.3";
            src = fetchHex {
              pkg = "libgraph";
              version = "0.6.3";
              sha256 =
                "bd591deea8ce9ab568b40c7a77776031872b2e422f0002a0730a9762e20a6173";
            };

            meta = {
              description = ''A high-performance graph datastructure library
                            for Elixir projects'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bitwalker/libgraph";
            };
          } // packageOverrides)
      ) {};

    libgraph = libgraph_0_6_3;

    libhowl_0_1_39 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          fifo_spec_0_1_32,
          lager_3_2_4,
          mdns_client_lib_0_1_43
        }:
          buildRebar3 ({
            name = "libhowl";
            version = "0.1.39";
            src = fetchHex {
              pkg = "libhowl";
              version = "0.1.39";
              sha256 =
                "42e3a0ffc33947b9c8339d3f2e7dfe2846ca1e93467fac5e58c6d3f5598a5860";
            };

            beamDeps  = [ fifo_spec_0_1_32 lager_3_2_4 mdns_client_lib_0_1_43
                      ];

            meta = {
              description = ''howl client library'';
              license = stdenv.lib.licenses.cddl;
              homepage = "https://github.com/project-fifo/libhowl";
            };
          } // packageOverrides)
      ) {};

    libhowl = libhowl_0_1_39;

    libleofs_0_1_2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, jsx_1_4_5 }:
          buildRebar3 ({
            name = "libleofs";
            version = "0.1.2";
            src = fetchHex {
              pkg = "libleofs";
              version = "0.1.2";
              sha256 =
                "62c39168e30a94e6bf0c3b3677995f5735ca03358465a6756db01a75c4e5c04b";
            };

            beamDeps  = [ jsx_1_4_5 ];

            meta = {
              description = ''LeoFS management library.'';
              license = stdenv.lib.licenses.cddl;
              homepage = "https://github.com/project-fifo/libleofs";
            };
          } // packageOverrides)
      ) {};

    libleofs = libleofs_0_1_2;

    librex_1_0_2 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, secure_random_0_5_1
        }:
          buildMix ({
            name = "librex";
            version = "1.0.2";
            src = fetchHex {
              pkg = "librex";
              version = "1.0.2";
              sha256 =
                "859a61bce3372ed3128057165c621ca414dfa95da9146664d7e365709f8d4828";
            };
            beamDeps  = [ secure_random_0_5_1 ];

            meta = {
              description = ''Convert office documents to other formats using
                            LibreOffice'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ricn/librex";
            };
          } // packageOverrides)
      ) {};

    librex = librex_1_0_2;

    libring_1_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "libring";
            version = "1.0.2";
            src = fetchHex {
              pkg = "libring";
              version = "1.0.2";
              sha256 =
                "7ab20772d027c9f5b9f3548179f4bfb716703e2d290a743657c75486dc00977f";
            };

            meta = {
              description = ''A fast consistent hash ring implementation in
                            Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bitwalker/libring";
            };
          } // packageOverrides)
      ) {};

    libring = libring_1_0_2;

    libsnarl_0_3_40 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          fifo_spec_0_1_27,
          lager_3_0_2,
          libsnarlmatch_0_1_7,
          mdns_client_lib_0_1_33,
          oauth2_erlang_0_6_1
        }:
          buildRebar3 ({
            name = "libsnarl";
            version = "0.3.40";
            src = fetchHex {
              pkg = "libsnarl";
              version = "0.3.40";
              sha256 =
                "fd574da4318b2732dd275fed371d13cd6ed4d0424e7acc3e0429ea97859fabbf";
            };

            beamDeps  = [
                          fifo_spec_0_1_27
                          lager_3_0_2
                          libsnarlmatch_0_1_7
                          mdns_client_lib_0_1_33
                          oauth2_erlang_0_6_1
                        ];

            meta = {
              description = ''snarl interface library'';
              license = stdenv.lib.licenses.cddl;
              homepage = "https://github.com/project-fifo/libsnarl";
            };
          } // packageOverrides)
      ) {};

    libsnarl_0_3_52 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          fifo_spec_0_1_32,
          lager_3_2_4,
          libsnarlmatch_0_1_8,
          mdns_client_lib_0_1_43,
          oauth2_erlang_0_6_1
        }:
          buildRebar3 ({
            name = "libsnarl";
            version = "0.3.52";
            src = fetchHex {
              pkg = "libsnarl";
              version = "0.3.52";
              sha256 =
                "cf6d5871968eb2cb92ac8e7ec5aca00a9e3c13c6bc846e8e768bce176a1766dd";
            };

            beamDeps  = [
                          fifo_spec_0_1_32
                          lager_3_2_4
                          libsnarlmatch_0_1_8
                          mdns_client_lib_0_1_43
                          oauth2_erlang_0_6_1
                        ];

            meta = {
              description = ''snarl interface library'';
              license = stdenv.lib.licenses.cddl;
              homepage = "https://github.com/project-fifo/libsnarl";
            };
          } // packageOverrides)
      ) {};

    libsnarl = libsnarl_0_3_52;

    libsnarlmatch_0_1_7 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "libsnarlmatch";
            version = "0.1.7";
            src = fetchHex {
              pkg = "libsnarlmatch";
              version = "0.1.7";
              sha256 =
                "72e9bcf7968e75774393778146ac6596116f1c60136dd607ad249183684ee380";
            };

            meta = {
              description = ''permission matcher library'';
              license = stdenv.lib.licenses.cddl;
              homepage = "https://github.com/project-fifo/libsnarlmatch";
            };
          } // packageOverrides)
      ) {};

    libsnarlmatch_0_1_8 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "libsnarlmatch";
            version = "0.1.8";
            src = fetchHex {
              pkg = "libsnarlmatch";
              version = "0.1.8";
              sha256 =
                "ba6424445cc2e3b321f33077fc21214a00dafc754ea74896c34e4f9cb33a8c00";
            };

            meta = {
              description = ''permission matcher library'';
              license = stdenv.lib.licenses.cddl;
              homepage = "https://github.com/project-fifo/libsnarlmatch";
            };
          } // packageOverrides)
      ) {};

    libsnarlmatch = libsnarlmatch_0_1_8;

    libsniffle_0_3_52 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          fifo_spec_0_1_32,
          lager_3_2_4,
          mdns_client_lib_0_1_43
        }:
          buildRebar3 ({
            name = "libsniffle";
            version = "0.3.52";
            src = fetchHex {
              pkg = "libsniffle";
              version = "0.3.52";
              sha256 =
                "8790ea268991ac71329660868f8185bf9c94ed968d27d96cc9bd6ef03730c0c9";
            };

            beamDeps  = [ fifo_spec_0_1_32 lager_3_2_4 mdns_client_lib_0_1_43
                      ];

            meta = {
              description = ''Sniffle API'';
              license = stdenv.lib.licenses.cddl;
              homepage = "https://github.com/project-fifo/libsniffle";
            };
          } // packageOverrides)
      ) {};

    libsniffle = libsniffle_0_3_52;

    libsodium_0_0_10 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "libsodium";
            version = "0.0.10";
            src = fetchHex {
              pkg = "libsodium";
              version = "0.0.10";
              sha256 =
                "1f47b9b7e8f0fb18fd0ab6292ef3c5397f1237d832012f96d6e1e74fe9d104ed";
            };
            compilePorts = true;

            meta = {
              description = ''libsodium port driver'';
              license = stdenv.lib.licenses.mpl20;
              homepage = "https://github.com/potatosalad/erlang-libsodium";
            };
          } // packageOverrides)
      ) {};

    libsodium = libsodium_0_0_10;

    lifx_0_1_7 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "lifx";
            version = "0.1.7";
            src = fetchHex {
              pkg = "lifx";
              version = "0.1.7";
              sha256 =
                "6ba161d87f41e924a263182d0754f4f3e7bbf68b9b4c0e834edb497d902673a3";
            };
            beamDeps  = [ cowboy_1_1_2 poison_2_2_0 ];

            meta = {
              description = ''A Client for Lifx LAN API'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/NationalAssociationOfRealtors/lifx";
            };
          } // packageOverrides)
      ) {};

    lifx = lifx_0_1_7;

    limiter_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, con_cache_0_12_0 }:
          buildMix ({
            name = "limiter";
            version = "0.1.2";
            src = fetchHex {
              pkg = "limiter";
              version = "0.1.2";
              sha256 =
                "cd6554563ddb4c136fb159839d30cbf4a244acb57376c379796265c3cb20a07a";
            };
            beamDeps  = [ con_cache_0_12_0 ];

            meta = {
              description = ''GCRA rate limiter'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jur0/limiter";
            };
          } // packageOverrides)
      ) {};

    limiter = limiter_0_1_2;

    lindel_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, elastix_0_4_0 }:
          buildMix ({
            name = "lindel";
            version = "0.1.0";
            src = fetchHex {
              pkg = "lindel";
              version = "0.1.0";
              sha256 =
                "71ab2e76abf1ebe81330fa7a14f9394d03a60c9df7daca415074ed1814144e1f";
            };
            beamDeps  = [ elastix_0_4_0 ];

            meta = {
              description = ''Elastix convenience wrapper thing'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/mneudert/lindel";
            };
          } // packageOverrides)
      ) {};

    lindel = lindel_0_1_0;

    line_message_0_3_11 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_3_0_2,
          maru_0_10_6
        }:
          buildMix ({
            name = "line_message";
            version = "0.3.11";
            src = fetchHex {
              pkg = "line_message";
              version = "0.3.11";
              sha256 =
                "7aa7a6e1697a83addae4556ccf5d78ae12bf73cd5325a73b5f343bcd6b41cd21";
            };
            beamDeps  = [ httpotion_3_0_2 maru_0_10_6 ];

            meta = {
              description = ''Line Messaging API for elixir to build line app
                            quickly'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/ccmikechen/line-message";
            };
          } // packageOverrides)
      ) {};

    line_message = line_message_0_3_11;

    line_notify_client_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_9_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "line_notify_client";
            version = "0.3.0";
            src = fetchHex {
              pkg = "line_notify_client";
              version = "0.3.0";
              sha256 =
                "52f0242f637c389a252584bd424197cc8464cf701a48bfcd0dd48cc189ff63b8";
            };
            beamDeps  = [ httpoison_0_9_2 poison_3_1_0 ];

            meta = {
              description = ''Client for LINE Notify.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/takkanm/line_notify_client";
            };
          } // packageOverrides)
      ) {};

    line_notify_client = line_notify_client_0_3_0;

    lineo_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "lineo";
            version = "0.1.0";
            src = fetchHex {
              pkg = "lineo";
              version = "0.1.0";
              sha256 =
                "842733d2aae3b8cfadf3acfe456241eb3434e68984d1fdbb7be15e335591e21c";
            };

            meta = {
               license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/camshaft/lineo";
            };
          } // packageOverrides)
      ) {};

    lineo = lineo_0_1_0;

    linguist_0_1_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "linguist";
            version = "0.1.5";
            src = fetchHex {
              pkg = "linguist";
              version = "0.1.5";
              sha256 =
                "d8b0665512a800854152082f6d56142e56e5da5f5b0d879298117b7dfd55ba97";
            };

            meta = {
              description = ''Elixir Internationalization library '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/chrismccord/linguist";
            };
          } // packageOverrides)
      ) {};

    linguist = linguist_0_1_5;

    link_preview_1_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          floki_0_10_1,
          html_entities_0_3_0,
          mogrify_0_5_1,
          tempfile_0_1_0,
          tesla_0_7_1
        }:
          buildMix ({
            name = "link_preview";
            version = "1.0.1";
            src = fetchHex {
              pkg = "link_preview";
              version = "1.0.1";
              sha256 =
                "e368bf6f4b1574b2e87b7a8b7ccce3425f81737dc1686f7763ffee0a22cec709";
            };
            beamDeps  = [
                          floki_0_10_1
                          html_entities_0_3_0
                          mogrify_0_5_1
                          tempfile_0_1_0
                          tesla_0_7_1
                        ];

            meta = {
              longDescription = ''LinkPreview is a package that tries to
                                receive meta information from given http(s)
                                address. Generated page struct includes website
                                title, description, images and more.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/appunite/link_preview";
            };
          } // packageOverrides)
      ) {};

    link_preview = link_preview_1_0_1;

    link_preview_generator_0_0_5 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          floki_0_10_1,
          httpoison_0_11_2,
          mogrify_0_5_1,
          tempfile_0_1_0
        }:
          buildMix ({
            name = "link_preview_generator";
            version = "0.0.5";
            src = fetchHex {
              pkg = "link_preview_generator";
              version = "0.0.5";
              sha256 =
                "95b9f2a03b03bce5b20e520e2dff3de91eff9ebd962a60b318d2bec9e7931a43";
            };
            beamDeps  = [
                          floki_0_10_1
                          httpoison_0_11_2
                          mogrify_0_5_1
                          tempfile_0_1_0
                        ];

            meta = {
              longDescription = ''LinkPreviewGenerator is a package that tries
                                to receive meta information from given http(s)
                                address'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/appunite/link_preview_generator";
            };
          } // packageOverrides)
      ) {};

    link_preview_generator = link_preview_generator_0_0_5;

    link_shrinkex_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "link_shrinkex";
            version = "1.0.0";
            src = fetchHex {
              pkg = "link_shrinkex";
              version = "1.0.0";
              sha256 =
                "2c7d99b23849f90d9aec8cd4f9960c6c198351735eda754288b778fe0e5f7e82";
            };

            meta = {
              description = ''Google`s URL Shortener API for Elixir. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jonahoffline/link_shrinkex";
            };
          } // packageOverrides)
      ) {};

    link_shrinkex = link_shrinkex_1_0_0;

    liquid_0_6_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, timex_3_1_15 }:
          buildMix ({
            name = "liquid";
            version = "0.6.1";
            src = fetchHex {
              pkg = "liquid";
              version = "0.6.1";
              sha256 =
                "f77dee938cb34f9410a72ee3f1c14bfabeced116db7cfdbd9e2e9316ab248288";
            };
            beamDeps  = [ timex_3_1_15 ];

            meta = {
              description = ''Liquid implementation in elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nulian/liquid-elixir";
            };
          } // packageOverrides)
      ) {};

    liquid = liquid_0_6_1;

    livecoin_ex_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_2_0_1
        }:
          buildMix ({
            name = "livecoin_ex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "livecoin_ex";
              version = "0.1.0";
              sha256 =
                "56628b7ec8c37364771f384b87b87568ff66307b2b7d7444d9d2b33a17f14e06";
            };
            beamDeps  = [ httpoison_0_11_2 poison_2_0_1 ];

            meta = {
              longDescription = ''livecoin.net API client for Elixir/Erlang.
                                Provides access to ticker and trading data for
                                cryptocurrency pairs'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cyberpunk-ventures/livecoin_ex";
            };
          } // packageOverrides)
      ) {};

    livecoin_ex = livecoin_ex_0_1_0;

    ljson_0_6_0_rc1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "ljson";
            version = "0.6.0-rc1";
            src = fetchHex {
              pkg = "ljson";
              version = "0.6.0-rc1";
              sha256 =
                "365a2703199adf574894dcb4038da3708455f48682c90d6d920389eb5412de0c";
            };

            meta = {
              description = ''An LFE library which provides a unified JSON
                            experience'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/lfex/ljson";
            };
          } // packageOverrides)
      ) {};

    ljson = ljson_0_6_0_rc1;

    lkn_prelude_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "lkn_prelude";
            version = "0.1.1";
            src = fetchHex {
              pkg = "lkn_prelude";
              version = "0.1.1";
              sha256 =
                "93bf543851eaa04cd450971531531b725a13fc348d22a4d0b57b0af80ed1e375";
            };

            meta = {
              description = ''An opiniated yet generic prelude for lkn.'';
              license = stdenv.lib.licenses.gpl3;
            };
          } // packageOverrides)
      ) {};

    lkn_prelude = lkn_prelude_0_1_1;

    lmgtfy_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, hound_1_0_3 }:
          buildMix ({
            name = "lmgtfy";
            version = "0.1.0";
            src = fetchHex {
              pkg = "lmgtfy";
              version = "0.1.0";
              sha256 =
                "b53cd46d8ad2af118d9e976183854fc5a6aa2be89b04c440b4b2e0db61260e40";
            };
            beamDeps  = [ hound_1_0_3 ];

            meta = {
              description = ''A simple library which searches Google. Requires
                            phantomjs on the PATH.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zensavona/domainatrex";
            };
          } // packageOverrides)
      ) {};

    lmgtfy = lmgtfy_0_1_0;

    load_log_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "load_log";
            version = "0.1.0";
            src = fetchHex {
              pkg = "load_log";
              version = "0.1.0";
              sha256 =
                "846d21226b8ffee7a66faea6c770d06774e34649e521465d43dd04d4b251799e";
            };

            meta = {
              description = ''A simple OTP application that records CPU loadavg
                            data'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Dalgona/load_log";
            };
          } // packageOverrides)
      ) {};

    load_log = load_log_0_1_0;

    lob_0_1_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          chacha20_0_3_6,
          poison_3_1_0
        }:
          buildMix ({
            name = "lob";
            version = "0.1.4";
            src = fetchHex {
              pkg = "lob";
              version = "0.1.4";
              sha256 =
                "8ac97b9241c84cd2a88d0c6b19ae9dbc2a94596054223ef6649c67131824791f";
            };
            beamDeps  = [ chacha20_0_3_6 poison_3_1_0 ];

            meta = {
              description = ''Length-Object-Binary (LOB) Packet Encoding'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mwmiller/lob_ex";
            };
          } // packageOverrides)
      ) {};

    lob = lob_0_1_4;

    localitydispatcher_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, gen_stage_0_11_0 }:
          buildMix ({
            name = "localitydispatcher";
            version = "0.1.1";
            src = fetchHex {
              pkg = "localitydispatcher";
              version = "0.1.1";
              sha256 =
                "4a85940b562e0e89702e90f9449f01923b51abf544f211ad2d6607111fff3962";
            };
            beamDeps  = [ gen_stage_0_11_0 ];

            meta = {
              description = ''A GenStage dispatcher to route events based on
                            some notion of locality'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rozap/localitydispatcher";
            };
          } // packageOverrides)
      ) {};

    localitydispatcher = localitydispatcher_0_1_1;

    locker_1_0_8 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, proper_1_1_1_beta
        }:
          buildRebar3 ({
            name = "locker";
            version = "1.0.8";
            src = fetchHex {
              pkg = "locker";
              version = "1.0.8";
              sha256 =
                "9cf9890e6b12dab7b8d1997c455348742db6caf2eaac3b64c514cd4e8dca2b56";
            };

            beamDeps  = [ proper_1_1_1_beta ];

            meta = {
              longDescription = ''Distributed de-centralized consistent
                                in-memory key-value store written in Erlang.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/wooga/locker";
            };
          } // packageOverrides)
      ) {};

    locker = locker_1_0_8;

    lodash_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "lodash";
            version = "0.0.3";
            src = fetchHex {
              pkg = "lodash";
              version = "0.0.3";
              sha256 =
                "aa13bf3cd513b327917790bbd1a2f4ef0097001eb2f10aeb17387da32d6b766d";
            };

            meta = {
              description = ''Lodash implementation for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/MQuy/elixir-lodash";
            };
          } // packageOverrides)
      ) {};

    lodash = lodash_0_0_3;

    lodestoner_ex_1_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          floki_0_11_0,
          httpoison_0_9_2
        }:
          buildMix ({
            name = "lodestoner_ex";
            version = "1.0.0";
            src = fetchHex {
              pkg = "lodestoner_ex";
              version = "1.0.0";
              sha256 =
                "9f8956bf6922ee7137198c5f94f176a2fa2271a8ed2955b6fa5edb3bbd214d7c";
            };
            beamDeps  = [ floki_0_11_0 httpoison_0_9_2 ];

            meta = {
              longDescription = ''A webpage scraper for Lodestone, the
                                character information site for Final Fantasy
                                XIV.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dkolb/lodestoner_ex";
            };
          } // packageOverrides)
      ) {};

    lodestoner_ex = lodestoner_ex_1_0_0;

    lofi_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "lofi";
            version = "0.1.1";
            src = fetchHex {
              pkg = "lofi";
              version = "0.1.1";
              sha256 =
                "90b042d95527eb68bdff347912b4ac5c7d55b8986c17afe37ef3cb4de815189d";
            };

            meta = {
              description = ''Parse #Lofi content, a friendly yet flexible
                            format.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/RoyalIcing/lofi-elixir";
            };
          } // packageOverrides)
      ) {};

    lofi = lofi_0_1_1;

    logfmt_3_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "logfmt";
            version = "3.2.0";
            src = fetchHex {
              pkg = "logfmt";
              version = "3.2.0";
              sha256 =
                "541acbaef84d2c4d0d81530cb4d24081e71ee85f18f3b40378357dd8a24e3074";
            };

            meta = {
              description = ''Logfmt is a module for encoding and decoding
                            logfmt-style log lines.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jclem/logfmt-elixir";
            };
          } // packageOverrides)
      ) {};

    logfmt = logfmt_3_2_0;

    logger_2k17_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "logger_2k17";
            version = "0.1.0";
            src = fetchHex {
              pkg = "logger_2k17";
              version = "0.1.0";
              sha256 =
                "e2c680a423bda5dcbf4bf32a940e46e8d9ca080da659b6bccac088f4a48981d4";
            };

            meta = {
              longDescription = ''Finally a logger module for 2k17. Replaces
                                Logger with a new and fresh module with
                                meaningful methods like `fyi` and `omg` instead
                                of `info` and `error`.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/davejlong/logger_2k17";
            };
          } // packageOverrides)
      ) {};

    logger_2k17 = logger_2k17_0_1_0;

    logger_backends_json_0_5_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, config_ext_0_3_0 }:
          buildMix ({
            name = "logger_backends_json";
            version = "0.5.0";
            src = fetchHex {
              pkg = "logger_backends_json";
              version = "0.5.0";
              sha256 =
                "51cda23997514299a8fdc4563ece7bf4a5467fb648d2baa626142aef3f7787bd";
            };
            beamDeps  = [ config_ext_0_3_0 ];

            meta = {
              longDescription = ''Yet another (but flexible) JSON backend for
                                Logger. Pick whatever json encoder you want
                                (poison, json, exjsx) or provide your own.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/driv3r/logger_backends_json";
            };
          } // packageOverrides)
      ) {};

    logger_backends_json = logger_backends_json_0_5_0;

    logger_datadog_backend_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ex_statsd_0_5_3 }:
          buildMix ({
            name = "logger_datadog_backend";
            version = "0.1.1";
            src = fetchHex {
              pkg = "logger_datadog_backend";
              version = "0.1.1";
              sha256 =
                "c3a5c6f5854fb35646e1efc55cd1ca804095a5f933205f397bd5f6d615dc63b9";
            };
            beamDeps  = [ ex_statsd_0_5_3 ];

            meta = {
              description = ''a datadog backend for ExLogger'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/matteosister/logger_datadog_backend";
            };
          } // packageOverrides)
      ) {};

    logger_datadog_backend = logger_datadog_backend_0_1_1;

    logger_file_backend_0_0_9 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "logger_file_backend";
            version = "0.0.9";
            src = fetchHex {
              pkg = "logger_file_backend";
              version = "0.0.9";
              sha256 =
                "8b949da9ef2abd18235fcd37067d44465da44e6ba7c05e111ea74493db211b8a";
            };

            meta = {
              description = ''Simple logger backend that writes to a file'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/onkel-dirtus/logger_file_backend";
            };
          } // packageOverrides)
      ) {};

    logger_file_backend = logger_file_backend_0_0_9;

    logger_json_0_4_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_3_1_0 }:
          buildMix ({
            name = "logger_json";
            version = "0.4.0";
            src = fetchHex {
              pkg = "logger_json";
              version = "0.4.0";
              sha256 =
                "3d8daddb5e4e55aa914afd59b85a986169aabf046c2d19f64c15cfc1edb08400";
            };
            beamDeps  = [ poison_3_1_0 ];

            meta = {
              description = ''Console Logger back-end that outputs in JSON
                            format.'';
              license = with stdenv.lib.licenses; [ mit free ];
              homepage = "https://github.com/Nebo15/logger_json";
            };
          } // packageOverrides)
      ) {};

    logger_json = logger_json_0_4_0;

    logger_json_file_backend_0_1_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_1_0_2 }:
          buildMix ({
            name = "logger_json_file_backend";
            version = "0.1.5";
            src = fetchHex {
              pkg = "logger_json_file_backend";
              version = "0.1.5";
              sha256 =
                "6b1f1c9a53eec4741bb1332f7ecc152186fca6688862379202614180cc2cd096";
            };
            beamDeps  = [ poison_1_0_2 ];

            meta = {
              description = ''Logger backend that write a json map per line to
                            a file'';
              license = stdenv.lib.licenses.isc;
              homepage =
                "https://github.com/xflagstudio/elixir_logger_json_file_backend";
            };
          } // packageOverrides)
      ) {};

    logger_json_file_backend = logger_json_file_backend_0_1_5;

    logger_kafka_backend_0_1_12 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          brod_2_3_7,
          poison_2_2_0
        }:
          buildMix ({
            name = "logger_kafka_backend";
            version = "0.1.12";
            src = fetchHex {
              pkg = "logger_kafka_backend";
              version = "0.1.12";
              sha256 =
                "488786dd55307bbdac368167cc9422cf0182715c8c660e70acd28bb0ab55af3e";
            };
            beamDeps  = [ brod_2_3_7 poison_2_2_0 ];

            meta = {
              description = ''A backend for Logger that logs to Kafka using
                            Brod'';
              license = stdenv.lib.licenses.artistic1;
              homepage = "https://github.com/jdalberg/logger_kafka_backend";
            };
          } // packageOverrides)
      ) {};

    logger_kafka_backend = logger_kafka_backend_0_1_12;

    logger_lager_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, lager_3_5_0 }:
          buildMix ({
            name = "logger_lager";
            version = "0.1.2";
            src = fetchHex {
              pkg = "logger_lager";
              version = "0.1.2";
              sha256 =
                "b7919f2dc9951e0661b6a1d5ac58a9760461b5cdefc520e529a9876486c13db3";
            };
            beamDeps  = [ lager_3_5_0 ];

            meta = {
              description = ''Logger backend that forwards messages to lager'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/artemeff/logger_lager";
            };
          } // packageOverrides)
      ) {};

    logger_lager = logger_lager_0_1_2;

    logger_lager_backend_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, lager_3_5_0 }:
          buildMix ({
            name = "logger_lager_backend";
            version = "0.1.0";
            src = fetchHex {
              pkg = "logger_lager_backend";
              version = "0.1.0";
              sha256 =
                "eb382bc640ee1bea62314db56c971517b1fe5700ef3e62edef13607143c0bfbf";
            };
            beamDeps  = [ lager_3_5_0 ];

            meta = {
              description = ''A Logger backend that forwards messages to
                            lager'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/jonathanperret/logger_lager_backend";
            };
          } // packageOverrides)
      ) {};

    logger_lager_backend = logger_lager_backend_0_1_0;

    logger_logentries_backend_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "logger_logentries_backend";
            version = "0.0.1";
            src = fetchHex {
              pkg = "logger_logentries_backend";
              version = "0.0.1";
              sha256 =
                "f3db38f7ab4dc40cd8078bf4cad79ce2a1e759f0f7f2b2dee4fbc3abb8fe3d7e";
            };

            meta = {
              longDescription = ''A Logger backend to support the Logentries
                                service (logentries.com) TCP input log
                                mechanism'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/sysdia-solutions/logger_logentries_backend";
            };
          } // packageOverrides)
      ) {};

    logger_logentries_backend = logger_logentries_backend_0_0_1;

    logger_loggly_backend_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, httpoison_0_8_3 }:
          buildMix ({
            name = "logger_loggly_backend";
            version = "0.2.0";
            src = fetchHex {
              pkg = "logger_loggly_backend";
              version = "0.2.0";
              sha256 =
                "111d0e256ace86e2af366b1afc7152b4aadd3cd6c093d5d2b119c08a84395fd6";
            };
            beamDeps  = [ httpoison_0_8_3 ];

            meta = {
              description = ''Loggly logger backend'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/joeyfeldberg/loggly_backend";
            };
          } // packageOverrides)
      ) {};

    logger_loggly_backend = logger_loggly_backend_0_2_0;

    logger_logstash_backend_4_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exjsx_3_2_1,
          timex_3_1_15
        }:
          buildMix ({
            name = "logger_logstash_backend";
            version = "4.0.0";
            src = fetchHex {
              pkg = "logger_logstash_backend";
              version = "4.0.0";
              sha256 =
                "6993da0b1b8246705e9b0d142cce227864ed63166ab6eeae5ca4488fff69f363";
            };
            beamDeps  = [ exjsx_3_2_1 timex_3_1_15 ];

            meta = {
              description = ''Logstash UDP producer backend for Logger.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/marcelog/logger_logstash_backend";
            };
          } // packageOverrides)
      ) {};

    logger_logstash_backend = logger_logstash_backend_4_0_0;

    logger_multicast_backend_0_2_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "logger_multicast_backend";
            version = "0.2.2";
            src = fetchHex {
              pkg = "logger_multicast_backend";
              version = "0.2.2";
              sha256 =
                "eb4c41ae152abbcaeb656d4abfe319911c5474c7e1b43c93e9e42cd3659f482f";
            };

            meta = {
              description = ''A Logger backend that logs via Multicast UDP'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/ghitchens/logger_multicast_backend";
            };
          } // packageOverrides)
      ) {};

    logger_multicast_backend = logger_multicast_backend_0_2_2;

    logger_papertrail_backend_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "logger_papertrail_backend";
            version = "0.2.1";
            src = fetchHex {
              pkg = "logger_papertrail_backend";
              version = "0.2.1";
              sha256 =
                "faf9cd7d96871dac79f0ec49c0ac243cac65d1068449e0187892570648a84025";
            };

            meta = {
              description = ''A Papertrail backend for Elixir Logger'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/larskrantz/logger_papertrail_backend";
            };
          } // packageOverrides)
      ) {};

    logger_papertrail_backend = logger_papertrail_backend_0_2_1;

    logger_statsd_0_1_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          buffer_0_3_11,
          ex_statsd_0_5_3
        }:
          buildMix ({
            name = "logger_statsd";
            version = "0.1.4";
            src = fetchHex {
              pkg = "logger_statsd";
              version = "0.1.4";
              sha256 =
                "8833309877797ca17eab664e019aac990a5ec48345a58c0f9e36e1cfece65450";
            };
            beamDeps  = [ buffer_0_3_11 ex_statsd_0_5_3 ];

            meta = {
              description = ''Error logger backend for statsd'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/steffenix/logger_statsd";
            };
          } // packageOverrides)
      ) {};

    logger_statsd = logger_statsd_0_1_4;

    logger_streaming_backend_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          eml_0_7_1
        }:
          buildMix ({
            name = "logger_streaming_backend";
            version = "0.1.0";
            src = fetchHex {
              pkg = "logger_streaming_backend";
              version = "0.1.0";
              sha256 =
                "59d4c1da583ca50e0960b754558d6de277a3a43df5c129f834c49689ac3af12e";
            };
            beamDeps  = [ cowboy_1_1_2 eml_0_7_1 ];

            meta = {
              longDescription = ''A backend for the Elixir Logger that streams
                                logs over HTTP, with per-stream log level and
                                filtering based on metadata'';
              license = stdenv.lib.licenses.free;
              homepage =
                "https://github.com/SimonWoolf/logger-streaming-backend";
            };
          } // packageOverrides)
      ) {};

    logger_streaming_backend = logger_streaming_backend_0_1_0;

    logglix_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, httpoison_0_11_2 }:
          buildMix ({
            name = "logglix";
            version = "0.1.0";
            src = fetchHex {
              pkg = "logglix";
              version = "0.1.0";
              sha256 =
                "61293a90b6c112dd7bbc68a0563379b8bee1a138712c001fc84169fb9e9d641f";
            };
            beamDeps  = [ httpoison_0_11_2 ];

            meta = {
              description = ''Elixir loggly is a backend that forwards all log
                            messages to the Loggly service.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pragmaticivan/logglix";
            };
          } // packageOverrides)
      ) {};

    logglix = logglix_0_1_0;

    logi_0_5_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "logi";
            version = "0.5.0";
            src = fetchHex {
              pkg = "logi";
              version = "0.5.0";
              sha256 =
                "45619004d3735f27e6f397ba0696c5fc6ea1ee89e037fd50847d975e0330de8f";
            };

            meta = {
              description = ''A Logger Interface Library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sile/logi";
            };
          } // packageOverrides)
      ) {};

    logi = logi_0_5_0;

    logi_ex_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, logi_0_5_0 }:
          buildMix ({
            name = "logi_ex";
            version = "0.1.1";
            src = fetchHex {
              pkg = "logi_ex";
              version = "0.1.1";
              sha256 =
                "1f880e8cc27aadca0e8fa34047a006be1e007b6aa1a41054606b383f8aee2900";
            };
            beamDeps  = [ logi_0_5_0 ];

            meta = {
              description = ''A logger interface library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sile/logi_ex";
            };
          } // packageOverrides)
      ) {};

    logi_ex = logi_ex_0_1_1;

    logi_stdlib_0_1_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, logi_0_5_0 }:
          buildRebar3 ({
            name = "logi_stdlib";
            version = "0.1.1";
            src = fetchHex {
              pkg = "logi_stdlib";
              version = "0.1.1";
              sha256 =
                "8c6b888865f2e3759b977f2c911bd43a21b0918cdc8d98a8a74dc431a4d5ccfb";
            };

            beamDeps  = [ logi_0_5_0 ];

            meta = {
              description = ''Standard Library for logi'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sile/logi_stdlib";
            };
          } // packageOverrides)
      ) {};

    logi_stdlib = logi_stdlib_0_1_1;

    logi_stdlib_ex_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          logi_ex_0_1_1,
          logi_stdlib_0_1_1
        }:
          buildMix ({
            name = "logi_stdlib_ex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "logi_stdlib_ex";
              version = "0.1.0";
              sha256 =
                "9cf7885daf14c16c6abc05c314c318f7e10c021229b5d7db5e16e66dc6f98c77";
            };
            beamDeps  = [ logi_ex_0_1_1 logi_stdlib_0_1_1 ];

            meta = {
              description = ''The standard library for logi_ex'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sile/logi_stdlib_ex";
            };
          } // packageOverrides)
      ) {};

    logi_stdlib_ex = logi_stdlib_ex_0_1_0;

    logic_monitor_0_0_9 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_3_0_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "logic_monitor";
            version = "0.0.9";
            src = fetchHex {
              pkg = "logic_monitor";
              version = "0.0.9";
              sha256 =
                "bdf8d2fd0b280afd2af123e726721a59cf1471426ce4dfd86dfef7d5de4dacae";
            };
            beamDeps  = [ httpotion_3_0_2 poison_3_1_0 ];

            meta = {
              description = ''Elixir wrapper for Logic Monitor REST api. Uses
                            LMv1 API Token Authentication.'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/TheFirstAvenger/elixir-logic_monitor.git";
            };
          } // packageOverrides)
      ) {};

    logic_monitor = logic_monitor_0_0_9;

    logjam_0_5_0_rc2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "logjam";
            version = "0.5.0-rc2";
            src = fetchHex {
              pkg = "logjam";
              version = "0.5.0-rc2";
              sha256 =
                "1e8f35c4401a29795029a4db9c8b901617b44b64e4b53cd378b7a28bc5add87b";
            };

            meta = {
              description = ''A Logging Library for LFE (lager wrapper)'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/lfex/logjam";
            };
          } // packageOverrides)
      ) {};

    logjam = logjam_0_5_0_rc2;

    logoot_1_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, uuid_1_1_7 }:
          buildMix ({
            name = "logoot";
            version = "1.0.2";
            src = fetchHex {
              pkg = "logoot";
              version = "1.0.2";
              sha256 =
                "bc2de14ea9549b41cf18e8849419dad0fc9720025c0a4fce7d40659c800bd104";
            };
            beamDeps  = [ uuid_1_1_7 ];

            meta = {
              description = ''An implementation of the Logoot CRDT'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/usecanvas/logoot_ex";
            };
          } // packageOverrides)
      ) {};

    logoot = logoot_1_0_2;

    logstash_json_0_5_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          blocking_queue_1_3_0,
          connection_1_0_4,
          poison_3_1_0
        }:
          buildMix ({
            name = "logstash_json";
            version = "0.5.1";
            src = fetchHex {
              pkg = "logstash_json";
              version = "0.5.1";
              sha256 =
                "6626e425b18274c674be3ee9d8522d0ecc25b0a08bd5a5db5809911f51d16831";
            };
            beamDeps  = [ blocking_queue_1_3_0 connection_1_0_4 poison_3_1_0
                      ];

            meta = {
              description = ''Formats logs as JSON, forwards to Logstash via
                            TCP, or to console.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/svetob/logstash-json";
            };
          } // packageOverrides)
      ) {};

    logstash_json = logstash_json_0_5_1;

    logster_0_6_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          plug_1_3_5,
          poison_1_0_2
        }:
          buildMix ({
            name = "logster";
            version = "0.6.0";
            src = fetchHex {
              pkg = "logster";
              version = "0.6.0";
              sha256 =
                "b4f1c316c04cd0ff437343408402b20a7a56f6beffc829d8b22389a941537e97";
            };
            beamDeps  = [ plug_1_3_5 poison_1_0_2 ];

            meta = {
              longDescription = ''Easily parsable single-line plain text and
                                JSON logger for Plug and Phoenix applications'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/navinpeiris/logster";
            };
          } // packageOverrides)
      ) {};

    logster = logster_0_6_0;

    loise_1_1_0_rc2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "loise";
            version = "1.1.0-rc2";
            src = fetchHex {
              pkg = "loise";
              version = "1.1.0-rc2";
              sha256 =
                "01f246c5c26a937060cd56d39356b399e4e16fff5b7e28c36aafbfa3d4fe1e00";
            };

            meta = {
              description = ''A noise-generator for LFE'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/lfex/loise";
            };
          } // packageOverrides)
      ) {};

    loise = loise_1_1_0_rc2;

    loki_1_2_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "loki";
            version = "1.2.2";
            src = fetchHex {
              pkg = "loki";
              version = "1.2.2";
              sha256 =
                "d24b0449a57027ecccc2fadb3440b74644aad085de35ce1c599e53c694307519";
            };

            meta = {
              description = ''Loki is a toolkit for building powerful
                            command-line interfaces.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/khusnetdinov/loki";
            };
          } // packageOverrides)
      ) {};

    loki = loki_1_2_2;

    lolcat_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          colorful_0_6_0,
          quickrand_1_7_1
        }:
          buildMix ({
            name = "lolcat";
            version = "0.0.1";
            src = fetchHex {
              pkg = "lolcat";
              version = "0.0.1";
              sha256 =
                "884799d2e7f294a6a5455e19c9816592d7b1314cefaba18952876fef0c4a10af";
            };
            beamDeps  = [ colorful_0_6_0 quickrand_1_7_1 ];

            meta = {
              description = ''The clone of lolcat. written in elixir '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/restartr/ex-lolcat";
            };
          } // packageOverrides)
      ) {};

    lolcat = lolcat_0_0_1;

    lonely_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "lonely";
            version = "0.3.0";
            src = fetchHex {
              pkg = "lonely";
              version = "0.3.0";
              sha256 =
                "b28bb3c2aef9b99a7eed4ec86a7d323269fb72ffbcc4b93b22e33e41d71b08a7";
            };

            meta = {
              description = ''Helpers to pipe through results (`{:ok, a} |
                            {:error, e}`).'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/arnau/lonely";
            };
          } // packageOverrides)
      ) {};

    lonely = lonely_0_3_0;

    loom_0_0_10 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "loom";
            version = "0.0.10";
            src = fetchHex {
              pkg = "loom";
              version = "0.0.10";
              sha256 =
                "f32cf0fe1c14efb9b4fda15285a5d331b64e952da7a0561c66f7e2b671d36cb8";
            };

            meta = {
              description = ''A modern CRDT library that uses protocols to
                            create composable CRDTs.'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/asonge/loom";
            };
          } // packageOverrides)
      ) {};

    loom = loom_0_0_10;

    loqui_0_2_10 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, cowboy_1_0_4 }:
          buildMix ({
            name = "loqui";
            version = "0.2.10";
            src = fetchHex {
              pkg = "loqui";
              version = "0.2.10";
              sha256 =
                "788acaa67e9688b52affca73a8d8b286cb7ee1d26cbcd9924d7e9c6b84053f92";
            };
            beamDeps  = [ cowboy_1_0_4 ];

            meta = {
              description = ''An RPC Transport Layer - with minimal
                            bullshit.'';

            };
          } // packageOverrides)
      ) {};

    loqui = loqui_0_2_10;

    lqueue_1_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "lqueue";
            version = "1.1.0";
            src = fetchHex {
              pkg = "lqueue";
              version = "1.1.0";
              sha256 =
                "67d65be5912b4625d5736c2fb44bb91f74263fc59568e2cc582102dddc8b5716";
            };

            meta = {
              description = ''Double-ended queue with limited length'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jur0/lqueue";
            };
          } // packageOverrides)
      ) {};

    lqueue = lqueue_1_1_0;

    lric_0_3_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "lric";
            version = "0.3.0";
            src = fetchHex {
              pkg = "lric";
              version = "0.3.0";
              sha256 =
                "07d3ca602dbea07c3e3a55fee136900dd0d50a75b078ec394805473197d19a86";
            };

            meta = {
              description = ''Riak & Riak CS client wrappers for LFE'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/lfex/lric";
            };
          } // packageOverrides)
      ) {};

    lric = lric_0_3_0;

    lru_2_3_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "lru";
            version = "2.3.1";
            src = fetchHex {
              pkg = "lru";
              version = "2.3.1";
              sha256 =
                "af4ded316a713df96a03f39bfe25dd00fb050d073f64fd39cc091f603f3b9794";
            };

            meta = {
              description = ''implements a fixed-size LRU cache'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://gitlab.com/barrel-db/erlang-lru";
            };
          } // packageOverrides)
      ) {};

    lru = lru_2_3_1;

    lru_cache_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "lru_cache";
            version = "0.1.1";
            src = fetchHex {
              pkg = "lru_cache";
              version = "0.1.1";
              sha256 =
                "b463d1ba255f03354d545b4b6bcb6f6a8d4e3e6b50d8b1058d3060eb31be1b49";
            };

            meta = {
              description = ''ETS-based LRU Cache'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/arago/lru_cache";
            };
          } // packageOverrides)
      ) {};

    lru_cache = lru_cache_0_1_1;

    ltest_0_10_0_rc6 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "ltest";
            version = "0.10.0-rc6";
            src = fetchHex {
              pkg = "ltest";
              version = "0.10.0-rc6";
              sha256 =
                "7b605910a1cfadde4f0d14b3c6bfbff727a7f0e7a0da5801bac44764299ce35d";
            };

            meta = {
              description = ''A Testing Framework for LFE'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/lfex/ltest";
            };
          } // packageOverrides)
      ) {};

    ltest = ltest_0_10_0_rc6;

    ltsv_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ltsv";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ltsv";
              version = "0.1.0";
              sha256 =
                "62e56251331da6cf5b95de9ecf6e0984749b0ba935356397151fa19f2491a449";
            };

            meta = {
              description = ''A Labeled Tab-separated Values Parser'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ma2gedev/ltsvex";
            };
          } // packageOverrides)
      ) {};

    ltsv = ltsv_0_1_0;

    luerl_0_3_0 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex }:
          buildErlangMk ({
            name = "luerl";
            version = "0.3.0";
            src = fetchHex {
              pkg = "luerl";
              version = "0.3.0";
              sha256 =
                "95eef5fbeaa0a93e601b584af53f22f983bd109bb5ebcfb5fa09c2a04a492c99";
            };

            meta = {
              description = ''Luerl - an implementation of Lua on Erlang'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/rvirding/luerl";
            };
          } // packageOverrides)
      ) {};

    luerl = luerl_0_3_0;

    luger_1_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, pre_plug_1_0_1 }:
          buildMix ({
            name = "luger";
            version = "1.0.2";
            src = fetchHex {
              pkg = "luger";
              version = "1.0.2";
              sha256 =
                "88bb1dd496f524785f86059dbd1d372d512158bda7f8fc594deb749cec5559aa";
            };
            beamDeps  = [ pre_plug_1_0_1 ];

            meta = {
              description = ''Handy logging plug for Elixir with IP and status
                            support'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zackehh/luger";
            };
          } // packageOverrides)
      ) {};

    luger = luger_1_0_2;

    luhn_0_3_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "luhn";
            version = "0.3.1";
            src = fetchHex {
              pkg = "luhn";
              version = "0.3.1";
              sha256 =
                "86aba88228660238ad981b92cb7a0e92be04772fc54fe5effb338c94b3b7d9fa";
            };

            meta = {
              description = ''Luhn algorithm in Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ma2gedev/luhn_ex";
            };
          } // packageOverrides)
      ) {};

    luhn = luhn_0_3_1;

    luhnatex_0_5_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "luhnatex";
            version = "0.5.1";
            src = fetchHex {
              pkg = "luhnatex";
              version = "0.5.1";
              sha256 =
                "f08bb73777cd8a12780ea12697064c942a08184074512d4e593443da74526eed";
            };

            meta = {
              description = ''Luhn algorithm in Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/my-flow/luhnatex";
            };
          } // packageOverrides)
      ) {};

    luhnatex = luhnatex_0_5_1;

    lumber_0_1_9 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, murk_0_5_1 }:
          buildMix ({
            name = "lumber";
            version = "0.1.9";
            src = fetchHex {
              pkg = "lumber";
              version = "0.1.9";
              sha256 =
                "c34b52d51c179f835d6e3edef5698dc3665dad4fc833c8d243fe99f9f588123e";
            };
            beamDeps  = [ murk_0_5_1 ];

            meta = {
              longDescription = ''Phoenix Channel interface builder, input /
                                output type checker, and Elm Channel code
                                generator.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/kwrooijen/lumber";
            };
          } // packageOverrides)
      ) {};

    lumber = lumber_0_1_9;

    luna_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ex_json_schema_0_5_5,
          phoenix_1_3_0_rc_2,
          poison_2_2_0,
          xml_builder_0_0_9
        }:
          buildMix ({
            name = "luna";
            version = "0.3.0";
            src = fetchHex {
              pkg = "luna";
              version = "0.3.0";
              sha256 =
                "e6be8e4b05a9322efe9d27021a49451583fd661c4e31b5a8410be6c218c4f90e";
            };
            beamDeps  = [
                          ex_json_schema_0_5_5
                          phoenix_1_3_0_rc_2
                          poison_2_2_0
                          xml_builder_0_0_9
                        ];

            meta = {
              description = ''Utility library for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/aktsk/luna";
            };
          } // packageOverrides)
      ) {};

    luna = luna_0_3_0;

    lutil_0_10_0_rc6 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "lutil";
            version = "0.10.0-rc6";
            src = fetchHex {
              pkg = "lutil";
              version = "0.10.0-rc6";
              sha256 =
                "dc26b486e448bfb06ecaaddd5c9ce6c03bd39467058fcd3d8833cc7babbffd58";
            };

            meta = {
              description = ''LFE Utility Functions and Macros'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/lfex/lutil";
            };
          } // packageOverrides)
      ) {};

    lutil = lutil_0_10_0_rc6;

    lyn_0_0_16 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          absinthe_plug_1_0_0,
          comeonin_2_1_1,
          cowboy_1_0_4,
          exos_1_0_0,
          gettext_0_10_0,
          guardian_0_9_1,
          guardian_db_0_8_0,
          inflex_1_5_0,
          json_0_3_3,
          phoenix_1_2_0_rc_1,
          phoenix_ecto_2_0_3,
          phoenix_html_2_9_3,
          poison_1_5_2,
          poolboy_1_5_1,
          postgrex_1_0_0_rc_1,
          scrivener_1_1_4,
          ueberauth_0_4_0,
          ueberauth_facebook_0_3_2,
          ueberauth_github_0_4_1,
          ueberauth_google_0_5_0,
          ueberauth_identity_0_2_3,
          ueberauth_slack_0_4_1,
          ueberauth_twitter_0_2_4
        }:
          buildMix ({
            name = "lyn";
            version = "0.0.16";
            src = fetchHex {
              pkg = "lyn";
              version = "0.0.16";
              sha256 =
                "63eeabb42336605c1fd79addbdf6a3300bb3101e019be9279f69a98c86345660";
            };
            beamDeps  = [
                          absinthe_plug_1_0_0
                          comeonin_2_1_1
                          cowboy_1_0_4
                          exos_1_0_0
                          gettext_0_10_0
                          guardian_0_9_1
                          guardian_db_0_8_0
                          inflex_1_5_0
                          json_0_3_3
                          phoenix_1_2_0_rc_1
                          phoenix_ecto_2_0_3
                          phoenix_html_2_9_3
                          poison_1_5_2
                          poolboy_1_5_1
                          postgrex_1_0_0_rc_1
                          scrivener_1_1_4
                          ueberauth_0_4_0
                          ueberauth_facebook_0_3_2
                          ueberauth_github_0_4_1
                          ueberauth_google_0_5_0
                          ueberauth_identity_0_2_3
                          ueberauth_slack_0_4_1
                          ueberauth_twitter_0_2_4
                        ];

            meta = {
              longDescription = ''This is a CMS written in Elixir. Aims to be
                                the great open-source ecommerce and/or startup
                                solution for those who are searching for a
                                performance and stability on top of modern
                                technologies like React and Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/viatsko/lyn";
            };
          } // packageOverrides)
      ) {};

    lyn = lyn_0_0_16;

    lz4_0_2_4 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "lz4";
            version = "0.2.4";
            src = fetchHex {
              pkg = "lz4";
              version = "0.2.4";
              sha256 =
                "562466f21d08b7c07528f5c8167a48029c458a85378ee5a3f4ba0ba1ffb88e62";
            };
            compilePorts = true;

            meta = {
              description = ''LZ4 bindings for Erlang'';
              license = with stdenv.lib.licenses; [ asl20 bsd2 ];
              homepage = "https://github.com/szktty/erlang-lz4.git";
            };
          } // packageOverrides)
      ) {};

    lz4 = lz4_0_2_4;

    lz_string_0_0_7 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "lz_string";
            version = "0.0.7";
            src = fetchHex {
              pkg = "lz_string";
              version = "0.0.7";
              sha256 =
                "9a0810c4f7cf0d13828e684ca5d0e6e19fe5d6547930fc6efb3a3d6b99e03af2";
            };

            meta = {
              description = ''Elixir implementation of pieroxy`s lz-string
                            compression algorithm.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/koudelka/elixir-lz-string";
            };
          } // packageOverrides)
      ) {};

    lz_string = lz_string_0_0_7;

    m2x_2_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_8_6,
          json_0_3_3
        }:
          buildMix ({
            name = "m2x";
            version = "2.0.0";
            src = fetchHex {
              pkg = "m2x";
              version = "2.0.0";
              sha256 =
                "e125cf588d48d9b04fb4a003bb62ab1a8e8df359866dba0cde6444e9fd7ce939";
            };
            beamDeps  = [ hackney_1_8_6 json_0_3_3 ];

            meta = {
              longDescription = ''Elixir client library for the AT&T M2X
                                (http://m2x.att.com) API. AT&T M2X is a
                                cloud-based fully managed time-series data
                                storage service for network connected
                                machine-to-machine (M2M) devices and the
                                Internet of Things (IoT).'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/attm2x/m2x-elixir";
            };
          } // packageOverrides)
      ) {};

    m2x = m2x_2_0_0;

    m2x_erlang_1_3_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_8_6,
          jsx_2_8_2
        }:
          buildMix ({
            name = "m2x_erlang";
            version = "1.3.1";
            src = fetchHex {
              pkg = "m2x_erlang";
              version = "1.3.1";
              sha256 =
                "873db746f4428490670b54aabcc93fda8d94c3c4e25c94a9aef7275858a8b809";
            };
            beamDeps  = [ hackney_1_8_6 jsx_2_8_2 ];

            meta = {
              longDescription = ''Erlang client library for the AT&T M2X
                                (http://m2x.att.com) API. AT&T M2X is a
                                cloud-based fully managed time-series data
                                storage service for network connected
                                machine-to-machine (M2M) devices and the
                                Internet of Things (IoT).'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/attm2x/m2x-erlang";
            };
          } // packageOverrides)
      ) {};

    m2x_erlang = m2x_erlang_1_3_1;

    maas_1_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_8_3,
          poison_2_1_0
        }:
          buildMix ({
            name = "maas";
            version = "1.0.0";
            src = fetchHex {
              pkg = "maas";
              version = "1.0.0";
              sha256 =
                "f6c2a3dd4e291b7000d45938abd975a21e055ef2eba57701ed7e0399e7a64617";
            };
            beamDeps  = [ httpoison_0_8_3 poison_2_1_0 ];

            meta = {
              description = ''A wrapper for the Mars Atmospheric Weather System
                            API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lucidstack/ex-maas";
            };
          } // packageOverrides)
      ) {};

    maas = maas_1_0_0;

    mac_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mac";
            version = "0.2.1";
            src = fetchHex {
              pkg = "mac";
              version = "0.2.1";
              sha256 =
                "33e095880fce5c57f16c53a9140b91b54ab092d9dcfe56c922e2a72fa116bf16";
            };

            meta = {
              description = ''MAC-to-vendor search for Elixir.'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/ephe-meral/mac";
            };
          } // packageOverrides)
      ) {};

    mac = mac_0_2_1;

    macpato_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "macpato";
            version = "0.1.2";
            src = fetchHex {
              pkg = "macpato";
              version = "0.1.2";
              sha256 =
                "eee465bedd032791f4751dddda21c97fc1cda24aba91c147bc29aac01988df4f";
            };

            meta = {
              description = ''Simple pattern matching on quoted expressions.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/vic/macpato";
            };
          } // packageOverrides)
      ) {};

    macpato = macpato_0_1_2;

    mad_0_9_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "mad";
            version = "0.9.0";
            src = fetchHex {
              pkg = "mad";
              version = "0.9.0";
              sha256 =
                "5eeb635094586b517f08000b059b680981c7da5527bab83e7bfa3f54176c0f1e";
            };

            meta = {
              description = ''Small and fast rebar replacement'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/synrc/mad";
            };
          } // packageOverrides)
      ) {};

    mad = mad_0_9_0;

    maester_1_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "maester";
            version = "1.0.0";
            src = fetchHex {
              pkg = "maester";
              version = "1.0.0";
              sha256 =
                "4fa324e1545ba5805d2eef2341c9554b52a51dfd79146dc13ec4b589e55efddd";
            };
            beamDeps  = [ httpoison_0_11_2 poison_2_2_0 ];

            meta = {
              description = ''An API of Ice and Fire client for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sotojuan/maester";
            };
          } // packageOverrides)
      ) {};

    maester = maester_1_0_0;

    magellan_microservice_0_1_11 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          plug_1_3_5,
          poison_3_1_0
        }:
          buildMix ({
            name = "magellan_microservice";
            version = "0.1.11";
            src = fetchHex {
              pkg = "magellan_microservice";
              version = "0.1.11";
              sha256 =
                "e245b5096204661835f9b70ccd80c86f4381f95051b4ab72c759fdfdfb4f7230";
            };
            beamDeps  = [ cowboy_1_1_2 plug_1_3_5 poison_3_1_0 ];

            meta = {
              longDescription = ''A basic microservice in Elixir. It contains a
                                server with easy to expand router, as well as an
                                application-status with http-endpoint.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/fr3dch3n/magellan-microservice";
            };
          } // packageOverrides)
      ) {};

    magellan_microservice = magellan_microservice_0_1_11;

    magic_number_0_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "magic_number";
            version = "0.0.4";
            src = fetchHex {
              pkg = "magic_number";
              version = "0.0.4";
              sha256 =
                "5b6fa41f5d24c3fd2f3cf9a96fefcf762c98bdd301158a95ab5355fe4f9eb61a";
            };

            meta = {
              description = ''MagicNumber is the module to determine a file`s
                            type from its magic number.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ishikawa/elixir-magic-number";
            };
          } // packageOverrides)
      ) {};

    magic_number = magic_number_0_0_4;

    magixir_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "magixir";
            version = "0.1.0";
            src = fetchHex {
              pkg = "magixir";
              version = "0.1.0";
              sha256 =
                "a3cfa90a97a5a3c5502ed09f1e9f5456fe57a6528c28158e058408dae8733f88";
            };

            meta = {
              description = ''Magento Elixir Tools.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jlgeering/magixir";
            };
          } // packageOverrides)
      ) {};

    magixir = magixir_0_1_0;

    magnet_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "magnet";
            version = "0.0.1";
            src = fetchHex {
              pkg = "magnet";
              version = "0.0.1";
              sha256 =
                "064af72e9422262813977752e2f7439501894bce48e5679576ceb93f6b649581";
            };

            meta = {
              description = ''A magnet-uri encoder and decoder'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/gausby/magnet";
            };
          } // packageOverrides)
      ) {};

    magnet = magnet_0_0_1;

    magneto_0_1_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ex_aws_1_0_0,
          httpoison_0_9_2,
          poison_2_2_0,
          timex_3_1_15
        }:
          buildMix ({
            name = "magneto";
            version = "0.1.3";
            src = fetchHex {
              pkg = "magneto";
              version = "0.1.3";
              sha256 =
                "eafcf25a2faaead5cae727b4e2b96c1b8f1ebad72bcf8e0b33b87463b394a4eb";
            };
            beamDeps  = [
                          ex_aws_1_0_0 httpoison_0_9_2 poison_2_2_0 timex_3_1_15
                        ];

            meta = {
              description = ''A DSL for Amazon DynamoDB'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/lucianferoiu/magneto";
            };
          } // packageOverrides)
      ) {};

    magneto = magneto_0_1_3;

    mail_0_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mail";
            version = "0.0.4";
            src = fetchHex {
              pkg = "mail";
              version = "0.0.4";
              sha256 =
                "015bb93bc3233fbf0bb28daf71963ddc290d574d9b3d63e1b45641d1a2d4571e";
            };

            meta = {
              description = ''Easily build a composable mail message'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/DockYard/elixir-mail";
            };
          } // packageOverrides)
      ) {};

    mail_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mail";
            version = "0.1.1";
            src = fetchHex {
              pkg = "mail";
              version = "0.1.1";
              sha256 =
                "bc8bcac2337c4308a265ef0d3956687772018f48dfc2b32d32acb9aea481ffb3";
            };

            meta = {
              description = ''Easily build a composable mail message'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/DockYard/elixir-mail";
            };
          } // packageOverrides)
      ) {};

    mail = mail_0_1_1;

    mailchimp_0_0_5 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_7_5,
          poison_2_1_0
        }:
          buildMix ({
            name = "mailchimp";
            version = "0.0.5";
            src = fetchHex {
              pkg = "mailchimp";
              version = "0.0.5";
              sha256 =
                "e2681ec4a99a3ba59a523e1e6369ca276399733fb34d08fd823a1e0658613de9";
            };
            beamDeps  = [ httpoison_0_7_5 poison_2_1_0 ];

            meta = {
              description = ''A basic Elixir wrapper for version 3 of the
                            MailChimp API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/duartejc/mailchimp";
            };
          } // packageOverrides)
      ) {};

    mailchimp = mailchimp_0_0_5;

    mailer_1_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          gen_smtp_0_11_0,
          timex_3_1_15
        }:
          buildMix ({
            name = "mailer";
            version = "1.3.0";
            src = fetchHex {
              pkg = "mailer";
              version = "1.3.0";
              sha256 =
                "aeabb9914d29b79e16eb3359dc6c988727adc617601b82a9cb7e4a4c03cc8cce";
            };
            beamDeps  = [ gen_smtp_0_11_0 timex_3_1_15 ];

            meta = {
              description = ''Mailer - A simple email client'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/antp/mailer";
            };
          } // packageOverrides)
      ) {};

    mailer = mailer_1_3_0;

    mailerlite_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "mailerlite";
            version = "0.2.0";
            src = fetchHex {
              pkg = "mailerlite";
              version = "0.2.0";
              sha256 =
                "77d5b35b9fb1db542c82fec8ffaaa733e07ddfa3e529fb2a5bec165c62b0ca0e";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              longDescription = ''**WORK IN PROGRESS - NOT READY FOR PRODUCTION
                                USE, CHECK BACK SOON** An Elixir wrapper for v2
                                of the MailerLite API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nathanhornby/mailerlite-elixir";
            };
          } // packageOverrides)
      ) {};

    mailerlite = mailerlite_0_2_0;

    mailgun_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_1_5_2 }:
          buildMix ({
            name = "mailgun";
            version = "0.1.2";
            src = fetchHex {
              pkg = "mailgun";
              version = "0.1.2";
              sha256 =
                "9cc828e06238045c92414db8f2e9a64a6004aca9b9a4856e5222db99bd8528e8";
            };
            beamDeps  = [ poison_1_5_2 ];

            meta = {
              description = ''Elixir Mailgun Client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/chrismccord/mailgun";
            };
          } // packageOverrides)
      ) {};

    mailgun = mailgun_0_1_2;

    mailgun_webhook_auth_1_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          plug_1_1_7
        }:
          buildMix ({
            name = "mailgun_webhook_auth";
            version = "1.0.0";
            src = fetchHex {
              pkg = "mailgun_webhook_auth";
              version = "1.0.0";
              sha256 =
                "0e6c93d8fd37fc948db0f92ee545ecbed99787dc04ceb8981e588b06ad3108eb";
            };
            beamDeps  = [ cowboy_1_1_2 plug_1_1_7 ];

            meta = {
              description = ''A Plug for validating Mailgun Webhook requests in
                            Elixir applications.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/typesend/mailgun_webhook_auth";
            };
          } // packageOverrides)
      ) {};

    mailgun_webhook_auth = mailgun_webhook_auth_1_0_0;

    mailibex_0_1_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, codepagex_0_1_4 }:
          buildMix ({
            name = "mailibex";
            version = "0.1.4";
            src = fetchHex {
              pkg = "mailibex";
              version = "0.1.4";
              sha256 =
                "e70c2d2453755b39640b5b319f471bea652543f1c9bea5914f8aa4553a459819";
            };
            beamDeps  = [ codepagex_0_1_4 ];

            meta = {
              longDescription = ''Mailibex is an email library in Elixir :
                                currently implements DKIM, SPF, DMARC, MimeMail
                                (using iconv nif for encoding), MimeType (and
                                file type detection), a simplified api to modify
                                or create mimemail as a keyword list.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/awetzel/mailibex";
            };
          } // packageOverrides)
      ) {};

    mailibex = mailibex_0_1_4;

    mailjet_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mailjet";
            version = "0.0.1";
            src = fetchHex {
              pkg = "mailjet";
              version = "0.0.1";
              sha256 =
                "99e5af5222e7d903598141fdfb8cd31fa3415d1b3375dc6fe0b812fce3b10aba";
            };

            meta = {
              description = ''Elixir Mailjet Client'';
              license = stdenv.lib.licenses.artistic1;
              homepage = "https://github.com/Ahamtech/elixir-mailjet";
            };
          } // packageOverrides)
      ) {};

    mailjet = mailjet_0_0_1;

    mailman_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          earmark_1_2_2,
          gen_smtp_0_11_0,
          httpotion_3_0_2
        }:
          buildMix ({
            name = "mailman";
            version = "0.3.0";
            src = fetchHex {
              pkg = "mailman";
              version = "0.3.0";
              sha256 =
                "a7d4f2baee1f443b6bdd106010fc5f6ec26293c50b0e29f53e7ac217633173db";
            };
            beamDeps  = [ earmark_1_2_2 gen_smtp_0_11_0 httpotion_3_0_2 ];

            meta = {
              description = ''Library providing a clean way of defining mailers
                            in Elixir apps'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kamilc/mailman";
            };
          } // packageOverrides)
      ) {};

    mailman = mailman_0_3_0;

    mailroom_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mailroom";
            version = "0.0.1";
            src = fetchHex {
              pkg = "mailroom";
              version = "0.0.1";
              sha256 =
                "9e5de8daeab7bab1b0e23ce203ff39b16caf3af04aa3aee1fd7fd28d623472cd";
            };

            meta = {
              description = ''A library for sending, receving and processing
                            emails.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/andrewtimberlake/mailroom";
            };
          } // packageOverrides)
      ) {};

    mailroom = mailroom_0_0_1;

    majremind_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "majremind";
            version = "0.0.1";
            src = fetchHex {
              pkg = "majremind";
              version = "0.0.1";
              sha256 =
                "604ba3b2142497b2384c73b2320f9738711a9cc07b4348f8e870ee6e470c4749";
            };

            meta = {
              longDescription = ''A self-maintained database of your updated
                                server which tells you which one needs to be
                                updated. It uses Disk Erlang Term Storage for
                                its internal database, located at
                                $HOME/.config/majremind/ '';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    majremind = majremind_0_0_1;

    makefile_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "makefile";
            version = "0.1.0";
            src = fetchHex {
              pkg = "makefile";
              version = "0.1.0";
              sha256 =
                "203de8ad4fb9ca958ee19d82e9c4aa42d6f0eaf435705ac295643c6122bd656e";
            };

            meta = {
              description = ''General Makefile targets for an Elixir
                            application'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/liuming/makefile.mix";
            };
          } // packageOverrides)
      ) {};

    makefile = makefile_0_1_0;

    mandrag_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, exrm_1_0_8 }:
          buildMix ({
            name = "mandrag";
            version = "0.1.1";
            src = fetchHex {
              pkg = "mandrag";
              version = "0.1.1";
              sha256 =
                "e9e9fcbb844a2a86ecd95f5f8fa7db9f6ff88f3e2a6dca2bd996f4f71bbf125d";
            };
            beamDeps  = [ exrm_1_0_8 ];

            meta = {
              description = ''A simple, extremely assumptive deploy script for
                            Phoenix apps'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cschiewek/mandrag";
            };
          } // packageOverrides)
      ) {};

    mandrag = mandrag_0_1_1;

    mandrake_0_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mandrake";
            version = "0.0.4";
            src = fetchHex {
              pkg = "mandrake";
              version = "0.0.4";
              sha256 =
                "ed672e094f68ff07c1f8e78a3c8a95af3e23a71ca90515ad441738446ee18887";
            };

            meta = {
              longDescription = ''Mandrake is a functional programming library
                                that bring something else magic in elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mbasso/mandrake";
            };
          } // packageOverrides)
      ) {};

    mandrake = mandrake_0_0_4;

    mandrill_0_5_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exjsx_3_2_1,
          httpoison_0_11_2
        }:
          buildMix ({
            name = "mandrill";
            version = "0.5.0";
            src = fetchHex {
              pkg = "mandrill";
              version = "0.5.0";
              sha256 =
                "9fb3a65d01de47cfc979a492079960506f21f8975e37e994478a70ee04c8d9a6";
            };
            beamDeps  = [ exjsx_3_2_1 httpoison_0_11_2 ];

            meta = {
              longDescription = ''A Mandrill wrapper for Elixir Requires an
                                active account with Mandrill
                                (http://mandrill.com).'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/slogsdon/mandrill-elixir";
            };
          } // packageOverrides)
      ) {};

    mandrill = mandrill_0_5_0;

    mandrillex_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_3_0,
          httpoison_0_11_2,
          jsex_2_0_0
        }:
          buildMix ({
            name = "mandrillex";
            version = "0.2.0";
            src = fetchHex {
              pkg = "mandrillex";
              version = "0.2.0";
              sha256 =
                "840bf36e545cde376797603df4109aae49d2c17b2b06f84a058fff4448d362eb";
            };
            beamDeps  = [ hackney_1_3_0 httpoison_0_11_2 jsex_2_0_0 ];

            meta = {
              longDescription = ''A Mandrill wrapper for Elixir Requires an
                                active account with Mandrill
                                (http://mandrill.com). '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/slogsdon/mandrillex";
            };
          } // packageOverrides)
      ) {};

    mandrillex = mandrillex_0_2_0;

    mangoex_0_1_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_3_0_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "mangoex";
            version = "0.1.3";
            src = fetchHex {
              pkg = "mangoex";
              version = "0.1.3";
              sha256 =
                "568c7c6d9fd7764f46608ec9cc3d673568c927f24a2b03032ade9925a0590eb9";
            };
            beamDeps  = [ httpotion_3_0_2 poison_3_1_0 ];

            meta = {
              description = ''Elixir wrapper for the MangoPay API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/overture8/mangoex";
            };
          } // packageOverrides)
      ) {};

    mangoex = mangoex_0_1_3;

    manifold_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "manifold";
            version = "1.0.0";
            src = fetchHex {
              pkg = "manifold";
              version = "1.0.0";
              sha256 =
                "2fa42b3be63899adf3ff1f4beea568795afb85e62735af6e90f2728a329a0ae7";
            };

            meta = {
              description = ''Fast batch message passing between nodes for
                            Erlang/Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hammerandchisel/manifold";
            };
          } // packageOverrides)
      ) {};

    manifold = manifold_1_0_0;

    map_diff_1_3_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, tensor_1_2_0 }:
          buildMix ({
            name = "map_diff";
            version = "1.3.1";
            src = fetchHex {
              pkg = "map_diff";
              version = "1.3.1";
              sha256 =
                "25637b6035ccf459a3d4b5d98e0115bb272deebe84da0ede3adea94246625eba";
            };
            beamDeps  = [ tensor_1_2_0 ];

            meta = {
              longDescription = ''Calculates the difference between two
                                (nested) maps, and returns a map representing
                                the patch of changes.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Qqwy/elixir_map_diff/";
            };
          } // packageOverrides)
      ) {};

    map_diff = map_diff_1_3_1;

    mapail_1_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, maptu_1_0_0 }:
          buildMix ({
            name = "mapail";
            version = "1.0.2";
            src = fetchHex {
              pkg = "mapail";
              version = "1.0.2";
              sha256 =
                "475fe8ac531a11cd755a83dac0a86a2272dc10eed0c20259019199a2900370af";
            };
            beamDeps  = [ maptu_1_0_0 ];

            meta = {
              description = ''Helper library to convert a map into a struct or
                            a struct to a struct.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/stephenmoloney/mapail";
            };
          } // packageOverrides)
      ) {};

    mapail = mapail_1_0_2;

    mappable_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mappable";
            version = "0.0.1";
            src = fetchHex {
              pkg = "mappable";
              version = "0.0.1";
              sha256 =
                "2a90b66b4626945dced7a79596287a0a2affba8b3a1096642d440084942f0293";
            };

            meta = {
              description = ''Convert different mappable types to each other in
                            Elixir'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/amberbit/mappable";
            };
          } // packageOverrides)
      ) {};

    mappable = mappable_0_0_1;

    mapsd_0_2_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "mapsd";
            version = "0.2.0";
            src = fetchHex {
              pkg = "mapsd";
              version = "0.2.0";
              sha256 =
                "7adde27e2e5edd5ed5fcad142b686f6f223f0f4e008cdb8aba0de4ff74a2132b";
            };

            meta = {
              description = ''Erlang Maps Dict API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/okeuday/mapsd";
            };
          } // packageOverrides)
      ) {};

    mapsd = mapsd_0_2_0;

    maptu_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "maptu";
            version = "1.0.0";
            src = fetchHex {
              pkg = "maptu";
              version = "1.0.0";
              sha256 =
                "a458f14a748151b3a24615927789b233eb26f06e9b34f1ee428686fee4dc232a";
            };

            meta = {
              description = ''Tiny library to convert from \"encoded\" maps to
                            Elixir structs.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/whatyouhide/maptu";
            };
          } // packageOverrides)
      ) {};

    maptu = maptu_1_0_0;

    marco_polo_0_2_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          connection_1_0_4,
          decimal_1_3_0
        }:
          buildMix ({
            name = "marco_polo";
            version = "0.2.2";
            src = fetchHex {
              pkg = "marco_polo";
              version = "0.2.2";
              sha256 =
                "a3107bb545590f4533dee040432659566b9c5ddbbbdbf7d1ee92381f450c0956";
            };
            beamDeps  = [ connection_1_0_4 decimal_1_3_0 ];

            meta = {
              description = ''Binary driver for the OrientDB database.'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/MyMedsAndMe/marco_polo";
            };
          } // packageOverrides)
      ) {};

    marco_polo = marco_polo_0_2_2;

    mariaex_0_3_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, decimal_1_3_1 }:
          buildMix ({
            name = "mariaex";
            version = "0.3.2";
            src = fetchHex {
              pkg = "mariaex";
              version = "0.3.2";
              sha256 =
                "4640d5ac72a97c6fc04ff2064a6652a73485ef3136e6abf269e16f5ffc9723a3";
            };
            beamDeps  = [ decimal_1_3_1 ];

            meta = {
              description = ''Pure elixir database driver for MariaDB /
                            MySQL.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/xerions/mariaex";
            };
          } // packageOverrides)
      ) {};

    mariaex_0_4_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, decimal_1_3_1 }:
          buildMix ({
            name = "mariaex";
            version = "0.4.4";
            src = fetchHex {
              pkg = "mariaex";
              version = "0.4.4";
              sha256 =
                "fadba91ff3719ac0fae7d454abfd812819630ea9f9aec768c5321331baa38b79";
            };
            beamDeps  = [ decimal_1_3_1 ];

            meta = {
              description = ''Pure elixir database driver for MariaDB /
                            MySQL.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/xerions/mariaex";
            };
          } // packageOverrides)
      ) {};

    mariaex_0_7_9 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          db_connection_1_0_0,
          decimal_1_3_1
        }:
          buildMix ({
            name = "mariaex";
            version = "0.7.9";
            src = fetchHex {
              pkg = "mariaex";
              version = "0.7.9";
              sha256 =
                "23107dd27ab2dce82024390f8f7c5ba594e735b825e40175d629e69cdd71fbaa";
            };
            beamDeps  = [ db_connection_1_0_0 decimal_1_3_1 ];

            meta = {
              description = ''Pure elixir database driver for MariaDB /
                            MySQL.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/xerions/mariaex";
            };
          } // packageOverrides)
      ) {};

    mariaex_0_8_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          db_connection_1_1_2,
          decimal_1_3_1
        }:
          buildMix ({
            name = "mariaex";
            version = "0.8.2";
            src = fetchHex {
              pkg = "mariaex";
              version = "0.8.2";
              sha256 =
                "09b3da0a55a1e5b65fd675c903ef09ca620562055ef7b2e8a8f0f6430ba8d81e";
            };
            beamDeps  = [ db_connection_1_1_2 decimal_1_3_1 ];

            meta = {
              description = ''Pure elixir database driver for MariaDB /
                            MySQL.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/xerions/mariaex";
            };
          } // packageOverrides)
      ) {};

    mariaex = mariaex_0_8_2;

    mark_yamill_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, yamerl_0_4_0 }:
          buildMix ({
            name = "mark_yamill";
            version = "0.2.1";
            src = fetchHex {
              pkg = "mark_yamill";
              version = "0.2.1";
              sha256 =
                "ba07e61dfbed17549c168123332e643d36deb086da7b7ae9e644fe618bd93c17";
            };
            beamDeps  = [ yamerl_0_4_0 ];

            meta = {
              description = ''A YAML decoder for Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/amorphid/mark_yamill";
            };
          } // packageOverrides)
      ) {};

    mark_yamill = mark_yamill_0_2_1;

    markaby_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "markaby";
            version = "0.1.0";
            src = fetchHex {
              pkg = "markaby";
              version = "0.1.0";
              sha256 =
                "a6052a55314f16a87a79b472aac118094f612734f895720d47bdaa800e04c200";
            };

            meta = {
              description = ''Markaby clone in Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/sanderhahn/markaby";
            };
          } // packageOverrides)
      ) {};

    markaby = markaby_0_1_0;

    marked_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "marked";
            version = "0.0.1";
            src = fetchHex {
              pkg = "marked";
              version = "0.0.1";
              sha256 =
                "6e16369d41355bef05b18f98230afe08dcb3ccfaaab168382513d86c19721035";
            };

            meta = {
              description = ''CommonMark compatible Markdown parser'';

            };
          } // packageOverrides)
      ) {};

    marked = marked_0_0_1;

    marker_2_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "marker";
            version = "2.0.3";
            src = fetchHex {
              pkg = "marker";
              version = "2.0.3";
              sha256 =
                "1197652c2872ea0054af4e19c56a735c8ebfe5f03ee54c5e74110e694d0806f6";
            };

            meta = {
              longDescription = ''Small and performant library for writing HTML
                                markup in Elixir using templates and
                                components'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/zambal/marker";
            };
          } // packageOverrides)
      ) {};

    marker = marker_2_0_3;

    markit_0_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_8_3,
          poison_2_2_0
        }:
          buildMix ({
            name = "markit";
            version = "0.1.2";
            src = fetchHex {
              pkg = "markit";
              version = "0.1.2";
              sha256 =
                "6304ceb1e7a5787555bc7d048bf3c9c0b432fe5378c6d630fb02d0bb871e57b5";
            };
            beamDeps  = [ httpoison_0_8_3 poison_2_2_0 ];

            meta = {
              description = ''Access stock market data from markit.com'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/col/markit";
            };
          } // packageOverrides)
      ) {};

    markit = markit_0_1_2;

    markit_skill_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          alexa_0_1_15,
          inflex_1_5_0,
          markit_0_1_2
        }:
          buildMix ({
            name = "markit_skill";
            version = "0.0.2";
            src = fetchHex {
              pkg = "markit_skill";
              version = "0.0.2";
              sha256 =
                "166d8ef88c08c21821dda379a053af761db4de5dff50226bfcb0e3a18fc855db";
            };
            beamDeps  = [ alexa_0_1_15 inflex_1_5_0 markit_0_1_2 ];

            meta = {
              description = ''Amazon Alexa skill that uses data from
                            Markit.com'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/col/markit_skill";
            };
          } // packageOverrides)
      ) {};

    markit_skill = markit_skill_0_0_2;

    markovian_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "markovian";
            version = "0.1.1";
            src = fetchHex {
              pkg = "markovian";
              version = "0.1.1";
              sha256 =
                "57ee08dcf69e63cfa1d86abcf19797ac95bda5e40fe494e514527cb0538e4ae3";
            };

            meta = {
              description = ''A Q-learner for the BEAM.'';
              license = stdenv.lib.licenses.mpl20;
              homepage = "https://github.com/mjs2600/Markovian";
            };
          } // packageOverrides)
      ) {};

    markovian = markovian_0_1_1;

    markovify_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "markovify";
            version = "0.3.0";
            src = fetchHex {
              pkg = "markovify";
              version = "0.3.0";
              sha256 =
                "af6a5ae4bba70a065ed5b99575ce8abce75a82b2bbf8ee39f76c6af143d4600f";
            };

            meta = {
              longDescription = ''A markov chain theory based library to
                                generate new sentences from a body of text.'';
              license = stdenv.lib.licenses.gpl3;
              homepage = "https://github.com/bka9/elixir-markovify";
            };
          } // packageOverrides)
      ) {};

    markovify = markovify_0_3_0;

    markright_0_3_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "markright";
            version = "0.3.2";
            src = fetchHex {
              pkg = "markright";
              version = "0.3.2";
              sha256 =
                "458e3d530c0d6c6c1c820062c07a6dcdbb518076aad00a5340047ebe85209131";
            };

            meta = {
              longDescription = ''**The extended, configurable markdown-like
                                syntax parser, that produces an AST.** Supports
                                the full set of `markdown`, plus extensions
                                (custom markup with a bit of elixir code to
                                handle parsing.) The AST produced is
                                understandable by
                                [`XmlBuilder`](https://github.com/joshnuss/xml_builder).'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mudasobwa/markright";
            };
          } // packageOverrides)
      ) {};

    markright = markright_0_3_2;

    marshal_0_9_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "marshal";
            version = "0.9.0";
            src = fetchHex {
              pkg = "marshal";
              version = "0.9.0";
              sha256 =
                "69b51463d4f5c20e17b1bc4767ffe6055d36024cea4c140021d12fdfbdd5e09f";
            };

            meta = {
              description = ''Parser for Ruby Marshal format version 4.8'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/barruumrex/marshal";
            };
          } // packageOverrides)
      ) {};

    marshal = marshal_0_9_0;

    maru_0_10_6 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          plug_1_3_5,
          poison_1_0_2
        }:
          buildMix ({
            name = "maru";
            version = "0.10.6";
            src = fetchHex {
              pkg = "maru";
              version = "0.10.6";
              sha256 =
                "e74fbc76713b57c6857150ae42dfb7af3680ccdf19d30fc4fd3a114d499dce7e";
            };
            beamDeps  = [ cowboy_1_1_2 plug_1_3_5 poison_1_0_2 ];

            meta = {
              description = ''REST-like API micro-framework for elixir inspired
                            by grape.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/elixir-maru/maru";
            };
          } // packageOverrides)
      ) {};

    maru_0_11_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          plug_1_3_5,
          poison_1_0_2
        }:
          buildMix ({
            name = "maru";
            version = "0.11.4";
            src = fetchHex {
              pkg = "maru";
              version = "0.11.4";
              sha256 =
                "071e080c5e564c4b0673665ca4a443eadb4fc5f574f0726d11a81d653f3f6ec3";
            };
            beamDeps  = [ cowboy_1_1_2 plug_1_3_5 poison_1_0_2 ];

            meta = {
              description = ''REST-like API micro-framework for elixir inspired
                            by grape.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/elixir-maru/maru";
            };
          } // packageOverrides)
      ) {};

    maru = maru_0_11_4;

    maru_entity_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "maru_entity";
            version = "0.2.0";
            src = fetchHex {
              pkg = "maru_entity";
              version = "0.2.0";
              sha256 =
                "e592ae76b6ec73a216a8a7e6afac4cb00a46e211be3beb52df0cd9a129f0ad60";
            };

            meta = {
              description = ''Concurrent serializer inspired by
                            grape-entity.'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/elixir-maru/maru_entity";
            };
          } // packageOverrides)
      ) {};

    maru_entity = maru_entity_0_2_0;

    maru_swagger_0_8_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, maru_0_11_4 }:
          buildMix ({
            name = "maru_swagger";
            version = "0.8.2";
            src = fetchHex {
              pkg = "maru_swagger";
              version = "0.8.2";
              sha256 =
                "cb0aacb208279b4f7394f7b55b5566ca1e73ba8de61a00b045b95569d87c4ee3";
            };
            beamDeps  = [ maru_0_11_4 ];

            meta = {
              description = ''Add swagger compliant documentation to your maru
                            API'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/elixir-maru/maru_swagger";
            };
          } // packageOverrides)
      ) {};

    maru_swagger = maru_swagger_0_8_2;

    marvel_1_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_1_5_2,
          timex_3_0_5
        }:
          buildMix ({
            name = "marvel";
            version = "1.0.0";
            src = fetchHex {
              pkg = "marvel";
              version = "1.0.0";
              sha256 =
                "7b5e99ccfa84954c2e46295aa72ab57b7511e1ec8e0bd13d1c5948efe1a0d23d";
            };
            beamDeps  = [ httpoison_0_11_2 poison_1_5_2 timex_3_0_5 ];

            meta = {
              description = ''Marvel API and CLI Client '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bryanjos/marvel";
            };
          } // packageOverrides)
      ) {};

    marvel = marvel_1_0_0;

    marvin_0_3_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_3_0_2,
          ibrowse_4_4_0,
          poison_2_2_0,
          slack_0_6_0
        }:
          buildMix ({
            name = "marvin";
            version = "0.3.1";
            src = fetchHex {
              pkg = "marvin";
              version = "0.3.1";
              sha256 =
                "1f3cd60bfb760004943f6bd4d25c20e9c2348a115a23fd4316315d2e9245db4b";
            };
            beamDeps  = [
                          httpotion_3_0_2 ibrowse_4_4_0 poison_2_2_0 slack_0_6_0
                        ];

            meta = {
              description = ''A Slack bot framework.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/willrax/marvin";
            };
          } // packageOverrides)
      ) {};

    marvin = marvin_0_3_1;

    match_trie_0_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "match_trie";
            version = "0.1.0";
            src = fetchHex {
              pkg = "match_trie";
              version = "0.1.0";
              sha256 =
                "fc500dd4dd8539871b5e6ba9bd6cc48f58e815d3fd9954ab8f6a2d0d686b9b8d";
            };

            meta = {
              description = ''ETS trie to match keys'';
              license = stdenv.lib.licenses.free;
            };
          } // packageOverrides)
      ) {};

    match_trie = match_trie_0_1_0;

    materialize_0_1_4_dev = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, phoenix_html_2_9_3
        }:
          buildMix ({
            name = "materialize";
            version = "0.1.4-dev";
            src = fetchHex {
              pkg = "materialize";
              version = "0.1.4-dev";
              sha256 =
                "4d55b1356c0e8ac7cca050e755cc2c34ab5a71353c8557030520afefe50b6c8e";
            };
            beamDeps  = [ phoenix_html_2_9_3 ];

            meta = {
              description = ''Add the materialize-css package to your
                            project.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mistim/ex_materialize";
            };
          } // packageOverrides)
      ) {};

    materialize = materialize_0_1_4_dev;

    math_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "math";
            version = "0.2.0";
            src = fetchHex {
              pkg = "math";
              version = "0.2.0";
              sha256 =
                "75557fb9743e866f743d894102da851531ffc69b4c0f8fdd12cd749acb1a6215";
            };

            meta = {
              longDescription = ''The Math module adds many useful functions
                                that extend Elixir`s standard library. - General
                                Functions • a <~> b Comparison of floats, to
                                check if they are _nearly_ equal. •
                                Math.pow(x, n) Arithmetic exponentiation. Works
                                both with integer powers and floats. •
                                Math.sqrt(x) The square root of x. •
                                Math.nth_root(x, n) The n-th root of x. •
                                Math.isqrt(x) The integer square root of x. •
                                Math.gcd(a, b) The greatest common divisor of a
                                and b. • Math.lcm(a, b) The least common
                                multiple of a and b. • Math.factorial(n) The
                                n-th factorial number. •
                                Math.k_permutations(n, k) The number of distinct
                                ways to create groups of size k from n distinct
                                elements. • Math.k_combinations(n, k) The
                                number of distinct ways to create groups of size
                                k from n distinct elements where order does not
                                matter. - Logarithms • Math.exp(x) Calculates
                                ℯ to the xth power. • Math.log(x) Calculates
                                the natural logarithm (base ℯ) of x. •
                                Math.log(x, b) Calculates the base-b logarithm
                                of x • Math.log2(x) Calculates the binary
                                logarithm (base 2) of x. • Math.log10(x)
                                Calculates the common logarithm (base 10) of x.
                                • Math.e Returns a floating-point
                                approximation of the number ℯ. - Trigonometry
                                • Math.pi Returns a floating-point
                                approximation of the number π. •
                                Math.deg2rad(x) converts from degrees to
                                radians. • Math.rad2deg(x) converts from
                                radians to degrees. • Math.sin(x) The sine of
                                x. • Math.cos(x) The cosine of x. •
                                Math.tan(x) The tangent of x. • Math.asin(x)
                                The inverse sine of x. • Math.acos(x) The
                                inverse cosine of x. • Math.atan(x) The
                                inverse tangent of x. • Math.atan2(x, y) The
                                inverse tangent of x and y. This variant returns
                                the inverse tangent in the correct quadrant, as
                                the signs of both x and y are known. •
                                Math.sinh(x) The hyperbolic sine of x. •
                                Math.cosh(x) The hyperbolic cosine of x. •
                                Math.tanh(x) The hyperbolic tangent of x. •
                                Math.asinh(x) The inverse hyperbolic sine of x.
                                • Math.acosh(x) The inverse hyperbolic cosine
                                of x. • Math.atanh(x) The inverse hyperbolic
                                tangent of x. - Working with Collections •
                                Math.Enum.product(collection) The result of
                                multiplying all elements in the passed
                                collection. • Math.Enum.mean(collection) the
                                mean of the numbers in the collection. •
                                Math.Enum.median(collection) the median of the
                                numbers in the collection.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/folz/math";
            };
          } // packageOverrides)
      ) {};

    math_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "math";
            version = "0.3.0";
            src = fetchHex {
              pkg = "math";
              version = "0.3.0";
              sha256 =
                "5f2a14eeb8ed70b14c2dcd7c09e7e7b61aaa856d1fc0f07f53bf0f3586c561c1";
            };

            meta = {
              longDescription = ''The Math module adds many useful functions
                                that extend Elixir`s standard library. - General
                                Functions • a <~> b Comparison of floats, to
                                check if they are _nearly_ equal. •
                                Math.pow(x, n) Arithmetic exponentiation. Works
                                both with integer powers and floats. •
                                Math.sqrt(x) The square root of x. •
                                Math.nth_root(x, n) The n-th root of x. •
                                Math.isqrt(x) The integer square root of x. •
                                Math.gcd(a, b) The greatest common divisor of a
                                and b. • Math.lcm(a, b) The least common
                                multiple of a and b. • Math.factorial(n) The
                                n-th factorial number. •
                                Math.k_permutations(n, k) The number of distinct
                                ways to create groups of size k from n distinct
                                elements. • Math.k_combinations(n, k) The
                                number of distinct ways to create groups of size
                                k from n distinct elements where order does not
                                matter. - Logarithms • Math.exp(x) Calculates
                                ℯ to the xth power. • Math.log(x) Calculates
                                the natural logarithm (base ℯ) of x. •
                                Math.log(x, b) Calculates the base-b logarithm
                                of x • Math.log2(x) Calculates the binary
                                logarithm (base 2) of x. • Math.log10(x)
                                Calculates the common logarithm (base 10) of x.
                                • Math.e Returns a floating-point
                                approximation of the number ℯ. - Trigonometry
                                • Math.pi Returns a floating-point
                                approximation of the number π. •
                                Math.deg2rad(x) converts from degrees to
                                radians. • Math.rad2deg(x) converts from
                                radians to degrees. • Math.sin(x) The sine of
                                x. • Math.cos(x) The cosine of x. •
                                Math.tan(x) The tangent of x. • Math.asin(x)
                                The inverse sine of x. • Math.acos(x) The
                                inverse cosine of x. • Math.atan(x) The
                                inverse tangent of x. • Math.atan2(x, y) The
                                inverse tangent of x and y. This variant returns
                                the inverse tangent in the correct quadrant, as
                                the signs of both x and y are known. •
                                Math.sinh(x) The hyperbolic sine of x. •
                                Math.cosh(x) The hyperbolic cosine of x. •
                                Math.tanh(x) The hyperbolic tangent of x. •
                                Math.asinh(x) The inverse hyperbolic sine of x.
                                • Math.acosh(x) The inverse hyperbolic cosine
                                of x. • Math.atanh(x) The inverse hyperbolic
                                tangent of x. - Working with Collections •
                                Math.Enum.product(collection) The result of
                                multiplying all elements in the passed
                                collection. • Math.Enum.mean(collection) the
                                mean of the numbers in the collection. •
                                Math.Enum.median(collection) the median of the
                                numbers in the collection.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/folz/math";
            };
          } // packageOverrides)
      ) {};

    math = math_0_3_0;

    math_combinations_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "math_combinations";
            version = "0.2.0";
            src = fetchHex {
              pkg = "math_combinations";
              version = "0.2.0";
              sha256 =
                "116c28bdcaeaa1098ac81bfd3db7968bd4ec8aaaa106a4f930306d9553894839";
            };

            meta = {
              description = ''A helper library with functions of Mathematics
                            Combinations'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/danillop/MathCombinations";
            };
          } // packageOverrides)
      ) {};

    math_combinations = math_combinations_0_2_0;

    matrix_0_3_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, exprintf_0_2_1 }:
          buildMix ({
            name = "matrix";
            version = "0.3.2";
            src = fetchHex {
              pkg = "matrix";
              version = "0.3.2";
              sha256 =
                "f75adeb594a877ff49ff58a402e37c9474fb9172c997427a9b4b57ab10100f15";
            };
            beamDeps  = [ exprintf_0_2_1 ];

            meta = {
              longDescription = ''Matrix is a linear algebra library for
                                manipulating dense matrices. Its primary design
                                goal is ease of use.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/twist-vector/elixir-matrix.git";
            };
          } // packageOverrides)
      ) {};

    matrix = matrix_0_3_2;

    maxwell_2_2_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          fuse_2_4_0,
          hackney_1_8_6,
          ibrowse_4_4_0,
          mimerl_1_0_2,
          poison_1_0_2
        }:
          buildMix ({
            name = "maxwell";
            version = "2.2.1";
            src = fetchHex {
              pkg = "maxwell";
              version = "2.2.1";
              sha256 =
                "fb4a46d1febe34140df6deab34971c190dedbd2acaaaa95d4f2ae2fae4741dbf";
            };
            beamDeps  = [
                          fuse_2_4_0
                          hackney_1_8_6
                          ibrowse_4_4_0
                          mimerl_1_0_2
                          poison_1_0_2
                        ];

            meta = {
              description = ''Maxwell is an HTTP client adapter.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zhongwencool/maxwell";
            };
          } // packageOverrides)
      ) {};

    maxwell = maxwell_2_2_1;

    maxwell_request_id_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, maxwell_2_2_1 }:
          buildMix ({
            name = "maxwell_request_id";
            version = "0.1.0";
            src = fetchHex {
              pkg = "maxwell_request_id";
              version = "0.1.0";
              sha256 =
                "b008aa296f11235d116a9592a5fe1a8f9acab46cfa10826ce2491fc37aadc811";
            };
            beamDeps  = [ maxwell_2_2_1 ];

            meta = {
              longDescription = ''Maxwell middleware for adding x-request-id to
                                outgoing requests. It takes the :request_id
                                property from the Logger metadata and passes it
                                on under the x-request-id header in outgoing
                                http requests made through maxwell.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/doughsay/maxwell_request_id";
            };
          } // packageOverrides)
      ) {};

    maxwell_request_id = maxwell_request_id_0_1_0;

    maybe_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "maybe";
            version = "0.0.1";
            src = fetchHex {
              pkg = "maybe";
              version = "0.0.1";
              sha256 =
                "b1915afa2dd6a2db64ad7b20b41eeb2d3cb576cdbd20679594eb6ef76f612638";
            };

            meta = {
              description = ''Utils to deal with errors'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zweifisch/maybe";
            };
          } // packageOverrides)
      ) {};

    maybe = maybe_0_0_1;

    mayo_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, luhn_0_3_1 }:
          buildMix ({
            name = "mayo";
            version = "0.2.0";
            src = fetchHex {
              pkg = "mayo";
              version = "0.2.0";
              sha256 =
                "f38e8bcb9c356e0bbd8596714d0d9cd3bcf5eb7973648a38802cf05c49cbda97";
            };
            beamDeps  = [ luhn_0_3_1 ];

            meta = {
              description = ''Schema validator inspired by Joi'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tommy351/mayo";
            };
          } // packageOverrides)
      ) {};

    mayo = mayo_0_2_0;

    mazurka_1_0_6 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, mimetype_parser_0_1_2
        }:
          buildMix ({
            name = "mazurka";
            version = "1.0.6";
            src = fetchHex {
              pkg = "mazurka";
              version = "1.0.6";
              sha256 =
                "a2c63d9ef9261eb38acc9f4214a2436f1c92a97e7f59b1e0f0335997d52821da";
            };
            beamDeps  = [ mimetype_parser_0_1_2 ];

            meta = {
              description = ''hypermedia api toolkit'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/exstruct/mazurka";
            };
          } // packageOverrides)
      ) {};

    mazurka = mazurka_1_0_6;

    mazurka_dsl_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mazurka_dsl";
            version = "0.1.1";
            src = fetchHex {
              pkg = "mazurka_dsl";
              version = "0.1.1";
              sha256 =
                "2877b27736daa1f5757ff1c2b34ec35d43c8e501b5292be5f9db7de95b88ea69";
            };

            meta = {
              description = ''DSL for defining mazurka resources'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mazurka/mazurka_dsl";
            };
          } // packageOverrides)
      ) {};

    mazurka_dsl = mazurka_dsl_0_1_1;

    mazurka_mediatype_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, etude_1_0_1 }:
          buildMix ({
            name = "mazurka_mediatype";
            version = "0.2.0";
            src = fetchHex {
              pkg = "mazurka_mediatype";
              version = "0.2.0";
              sha256 =
                "4ccd8b27d6405e93cb34861f211d69b79ab46c2dbc5c7874d4ee3c580a5754bb";
            };
            beamDeps  = [ etude_1_0_1 ];

            meta = {
              description = ''mazurka mediatype interface'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mazurka/mazurka_mediatype";
            };
          } // packageOverrides)
      ) {};

    mazurka_mediatype = mazurka_mediatype_0_2_0;

    mazurka_mediatype_hyperjson_0_2_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          etude_1_0_1,
          mazurka_mediatype_0_2_0,
          poison_1_3_1
        }:
          buildMix ({
            name = "mazurka_mediatype_hyperjson";
            version = "0.2.3";
            src = fetchHex {
              pkg = "mazurka_mediatype_hyperjson";
              version = "0.2.3";
              sha256 =
                "f09489f242598ece8496f50c9dfc3d1a051b6115a654ebbb9ce5336e04b2cb8d";
            };
            beamDeps  = [ etude_1_0_1 mazurka_mediatype_0_2_0 poison_1_3_1 ];

            meta = {
              description = ''hyper+json mediatype compiler for mazurka'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/mazurka/mazurka_mediatype_hyperjson";
            };
          } // packageOverrides)
      ) {};

    mazurka_mediatype_hyperjson = mazurka_mediatype_hyperjson_0_2_3;

    mazurka_plug_0_1_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          fugue_0_1_6,
          html_builder_0_1_1,
          mazurka_1_0_6,
          plug_1_3_5,
          poison_3_1_0
        }:
          buildMix ({
            name = "mazurka_plug";
            version = "0.1.4";
            src = fetchHex {
              pkg = "mazurka_plug";
              version = "0.1.4";
              sha256 =
                "94f1e865a71845d81b3ee8a00d2231fe0e080549ade0e649484ed14a03a4f434";
            };
            beamDeps  = [
                          fugue_0_1_6
                          html_builder_0_1_1
                          mazurka_1_0_6
                          plug_1_3_5
                          poison_3_1_0
                        ];

            meta = {
              description = ''Plug integration for Mazurka'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/exstruct/mazurka_plug";
            };
          } // packageOverrides)
      ) {};

    mazurka_plug = mazurka_plug_0_1_4;

    mbu_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, fs_3_4_0 }:
          buildMix ({
            name = "mbu";
            version = "1.0.1";
            src = fetchHex {
              pkg = "mbu";
              version = "1.0.1";
              sha256 =
                "2e56938da3df3bd2086fab6178f52e56ab4c2fbf8c9ca4723be6f8132ffb342a";
            };
            beamDeps  = [ fs_3_4_0 ];

            meta = {
              longDescription = ''MBU is a collection of build utilities for
                                Mix to make it easier to build your project, for
                                example building the front end. It supports task
                                dependencies and watching directories.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/Nicd/mbu";
            };
          } // packageOverrides)
      ) {};

    mbu = mbu_1_0_1;

    mc_data_0_0_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_2_2_0 }:
          buildMix ({
            name = "mc_data";
            version = "0.0.5";
            src = fetchHex {
              pkg = "mc_data";
              version = "0.0.5";
              sha256 =
                "0ad4b4489554951f93fc9da39b8f14e5b87dada3005d6d012528cbc387d0aa27";
            };
            beamDeps  = [ poison_2_2_0 ];

            meta = {
              description = ''Provides access to data from the game
                            Minecraft.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/McEx/McData";
            };
          } // packageOverrides)
      ) {};

    mc_data = mc_data_0_0_5;

    mc_protocol_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          mc_data_0_0_5,
          proto_def_0_0_4,
          uuid_1_1_7
        }:
          buildMix ({
            name = "mc_protocol";
            version = "0.0.2";
            src = fetchHex {
              pkg = "mc_protocol";
              version = "0.0.2";
              sha256 =
                "7a72eba46d344ac1119c909c70536a8825d320290e6c5184fd6879d535df597d";
            };
            beamDeps  = [ mc_data_0_0_5 proto_def_0_0_4 uuid_1_1_7 ];

            meta = {
              longDescription = ''Implementation of the Minecraft protocol in
                                Elixir. Aims to provide functional ways to
                                interact with the minecraft protocol on all
                                levels, including packet reading and writing,
                                encryption, compression, authentication and
                                more.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hansihe/elixir_mc_protocol";
            };
          } // packageOverrides)
      ) {};

    mc_protocol = mc_protocol_0_0_2;

    mcrypt_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mcrypt";
            version = "0.1.1";
            src = fetchHex {
              pkg = "mcrypt";
              version = "0.1.1";
              sha256 =
                "1ae2ea40c51a1982538be4108c8948ba6704bc97aa84400f03f20d01357348be";
            };

            meta = {
              description = ''NIF wrapper around libmcrypt.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/system76/elixir-mcrypt";
            };
          } // packageOverrides)
      ) {};

    mcrypt = mcrypt_0_1_1;

    mcup_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mcup";
            version = "0.0.2";
            src = fetchHex {
              pkg = "mcup";
              version = "0.0.2";
              sha256 =
                "c59537882707237c961d3d69b149619ec35c808cd5e98646cbcb7985e300b975";
            };

            meta = {
              description = ''DSL for markup. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Joe-noh/mcup";
            };
          } // packageOverrides)
      ) {};

    mcup = mcup_0_0_2;

    md2_1_1_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "md2";
            version = "1.1.1";
            src = fetchHex {
              pkg = "md2";
              version = "1.1.1";
              sha256 =
                "0d71c35b9846bbe48ae49575309dd4a82d3f4472a6acb5d44109b5339d50e3f2";
            };
            compilePorts = true;

            meta = {
              description = ''An implementation of MD2 according to RFC1319.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lindenbaum/md2";
            };
          } // packageOverrides)
      ) {};

    md2 = md2_1_1_1;

    mdns_0_1_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, dns_0_0_4 }:
          buildMix ({
            name = "mdns";
            version = "0.1.5";
            src = fetchHex {
              pkg = "mdns";
              version = "0.1.5";
              sha256 =
                "be6de3bd0062564be8aed76507c17566234024d741df629db726f7e109135557";
            };
            beamDeps  = [ dns_0_0_4 ];

            meta = {
              longDescription = ''A simple mDNS (zeroconf, bonjour) server and
                                client for device discovery on your local
                                network.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/NationalAssociationOfRealtors/mdns";
            };
          } // packageOverrides)
      ) {};

    mdns = mdns_0_1_5;

    mdns_client_0_1_7 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, lager_2_1_1 }:
          buildRebar3 ({
            name = "mdns_client";
            version = "0.1.7";
            src = fetchHex {
              pkg = "mdns_client";
              version = "0.1.7";
              sha256 =
                "c707532d693bd19bed8ccd167574b6b0337f07e38b87bd7f9111d9cb9799fac2";
            };

            beamDeps  = [ lager_2_1_1 ];

            meta = {
              description = ''mDNS service discovery client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Licenser/erlang-mdns-client";
            };
          } // packageOverrides)
      ) {};

    mdns_client_0_1_8 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, lager_3_2_4 }:
          buildRebar3 ({
            name = "mdns_client";
            version = "0.1.8";
            src = fetchHex {
              pkg = "mdns_client";
              version = "0.1.8";
              sha256 =
                "0e2b8d4e7e03952d29646048cd5f44c6a6be33b51d4f891ff0e40a6138b9d305";
            };

            beamDeps  = [ lager_3_2_4 ];

            meta = {
              description = ''mDNS service discovery client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Licenser/erlang-mdns-client";
            };
          } // packageOverrides)
      ) {};

    mdns_client = mdns_client_0_1_8;

    mdns_client_lib_0_1_33 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          lager_2_1_1,
          mdns_client_0_1_7,
          pooler_1_4_0
        }:
          buildRebar3 ({
            name = "mdns_client_lib";
            version = "0.1.33";
            src = fetchHex {
              pkg = "mdns_client_lib";
              version = "0.1.33";
              sha256 =
                "9ad3723c929acbdfec70021ceb6606e59c7e6189af97652409bfc9624052e0fe";
            };

            beamDeps  = [ lager_2_1_1 mdns_client_0_1_7 pooler_1_4_0 ];

            meta = {
              description = ''client lib for mdns aware tcp servers'';
              license = stdenv.lib.licenses.cddl;
              homepage = "https://github.com/Licenser/mdns_client_lib";
            };
          } // packageOverrides)
      ) {};

    mdns_client_lib_0_1_43 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          lager_3_2_4,
          mdns_client_0_1_8,
          pooler_1_5_0
        }:
          buildRebar3 ({
            name = "mdns_client_lib";
            version = "0.1.43";
            src = fetchHex {
              pkg = "mdns_client_lib";
              version = "0.1.43";
              sha256 =
                "103ceb27f0727b8bde5d0300a3e0696b29eab152438a41fa7131145e8c781892";
            };

            beamDeps  = [ lager_3_2_4 mdns_client_0_1_8 pooler_1_5_0 ];

            meta = {
              description = ''client lib for mdns aware tcp servers'';
              license = stdenv.lib.licenses.cddl;
              homepage = "https://github.com/Licenser/mdns_client_lib";
            };
          } // packageOverrides)
      ) {};

    mdns_client_lib = mdns_client_lib_0_1_43;

    mdns_server_0_2_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "mdns_server";
            version = "0.2.0";
            src = fetchHex {
              pkg = "mdns_server";
              version = "0.2.0";
              sha256 =
                "bc9465880e15e57033960ab6820258b87134bef69032210c67e53e3718e289d0";
            };

            meta = {
              description = ''mDNS service discovery server'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Licenser/erlang-mdns-server";
            };
          } // packageOverrides)
      ) {};

    mdns_server = mdns_server_0_2_0;

    mdns_server_lib_0_2_3 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          lager_3_0_2,
          mdns_server_0_2_0,
          ranch_1_1_0
        }:
          buildRebar3 ({
            name = "mdns_server_lib";
            version = "0.2.3";
            src = fetchHex {
              pkg = "mdns_server_lib";
              version = "0.2.3";
              sha256 =
                "078775ccea5d768095716ca6bd82f657601203352495d9726f4cc080c8c07695";
            };

            beamDeps  = [ lager_3_0_2 mdns_server_0_2_0 ranch_1_1_0 ];

            meta = {
              description = ''server side for mdns client server
                            implementation'';
              license = stdenv.lib.licenses.cddl;
              homepage = "https://github.com/Licenser/mdns_server_lib";
            };
          } // packageOverrides)
      ) {};

    mdns_server_lib = mdns_server_lib_0_2_3;

    mecab_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mecab";
            version = "1.0.1";
            src = fetchHex {
              pkg = "mecab";
              version = "1.0.1";
              sha256 =
                "14a7adcda784461e1f42b856ac18d9e2f0736ff04aaeb723d8d3d6969a0a2c31";
            };

            meta = {
              description = ''Elixir bindings for MeCab, a Japanese
                            morphological analyzer.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tex2e/mecab-elixir";
            };
          } // packageOverrides)
      ) {};

    mecab = mecab_1_0_1;

    meck_0_8_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "meck";
            version = "0.8.3";
            src = fetchHex {
              pkg = "meck";
              version = "0.8.3";
              sha256 =
                "53bd3873d0193d6b2b4a165cfc4b9ffc3934355c3ba19e88239ef6a027cc02b6";
            };

            meta = {
              description = ''A mocking framework for Erlang'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/eproxus/meck";
            };
          } // packageOverrides)
      ) {};

    meck_0_8_4 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "meck";
            version = "0.8.4";
            src = fetchHex {
              pkg = "meck";
              version = "0.8.4";
              sha256 =
                "2cdfbd0edd8f62b3d2061efc03c0e490282dd2ea6de44e15d2006e83f4f8eead";
            };

            meta = {
              description = ''A mocking framework for Erlang'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/eproxus/meck";
            };
          } // packageOverrides)
      ) {};

    meck = meck_0_8_4;

    medex_0_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          consul_1_1_0,
          cowboy_1_0_4,
          plug_1_3_5
        }:
          buildMix ({
            name = "medex";
            version = "0.1.2";
            src = fetchHex {
              pkg = "medex";
              version = "0.1.2";
              sha256 =
                "dd8dd07892a4aedbe7680fa8637b1c17b7615b2aaea0b25b84acad4ed50700d2";
            };
            beamDeps  = [ consul_1_1_0 cowboy_1_0_4 plug_1_3_5 ];

            meta = {
              longDescription = ''Medical Examination - application for
                                register health check callbacks and represent
                                their state via HTTP.'';

              homepage = "https://github.com/xerions/medex";
            };
          } // packageOverrides)
      ) {};

    medex = medex_0_1_2;

    medium_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_8_6,
          poison_1_0_2,
          tesla_0_5_2
        }:
          buildMix ({
            name = "medium";
            version = "0.2.0";
            src = fetchHex {
              pkg = "medium";
              version = "0.2.0";
              sha256 =
                "4cf07e9173c8a1a82aa31de802f4993ba8bbea1d273bf086934e49c78c83d337";
            };
            beamDeps  = [ hackney_1_8_6 poison_1_0_2 tesla_0_5_2 ];

            meta = {
              description = ''An Elixir api wrapper for the Medium.com API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/roperzh/medium-sdk-elixir";
            };
          } // packageOverrides)
      ) {};

    medium = medium_0_2_0;

    medoc_1_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "medoc";
            version = "1.0.0";
            src = fetchHex {
              pkg = "medoc";
              version = "1.0.0";
              sha256 =
                "704161dbadf4d424e05ad85e9843535b8c4f61248e3f262dfe56bb3f9780a94f";
            };

            meta = {
              description = ''Runs edoc on multiple apps and stitches the
                            results together'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/drozzy/medoc";
            };
          } // packageOverrides)
      ) {};

    medoc = medoc_1_0_0;

    meeseeks_0_7_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          meeseeks_html5ever_0_6_0
        }:
          buildMix ({
            name = "meeseeks";
            version = "0.7.0";
            src = fetchHex {
              pkg = "meeseeks";
              version = "0.7.0";
              sha256 =
                "31576b151c90d123fbee8d5fc9c6199b38e3c7f7c6200f408300268091228e5b";
            };
            beamDeps  = [ meeseeks_html5ever_0_6_0 ];

            meta = {
              longDescription = ''Meeseeks is a library for parsing and
                                extracting data from HTML and XML with CSS or
                                XPath selectors.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mischov/meeseeks";
            };
          } // packageOverrides)
      ) {};

    meeseeks = meeseeks_0_7_0;

    meeseeks_html5ever_0_6_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, rustler_0_9_0 }:
          buildMix ({
            name = "meeseeks_html5ever";
            version = "0.6.0";
            src = fetchHex {
              pkg = "meeseeks_html5ever";
              version = "0.6.0";
              sha256 =
                "dab1799924b08dd0d69d7b35a7650e7e0de9736887c415dd4fc00aec03ea7761";
            };
            beamDeps  = [ rustler_0_9_0 ];

            meta = {
              description = ''Meeseeks-specific NIF binding of html5ever using
                            Rustler.'';
              license = with stdenv.lib.licenses; [ mit asl20 ];
              homepage = "https://github.com/mischov/meeseeks_html5ever";
            };
          } // packageOverrides)
      ) {};

    meeseeks_html5ever = meeseeks_html5ever_0_6_0;

    meex_1_4_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "meex";
            version = "1.4.1";
            src = fetchHex {
              pkg = "meex";
              version = "1.4.1";
              sha256 =
                "f19c85ce7f3e886a7dfff12879524c72893e845c41cfaf1d40175e8c55a92c69";
            };

            meta = {
              description = ''Fork of EEx'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/elixir-lang/elixir";
            };
          } // packageOverrides)
      ) {};

    meex = meex_1_4_1;

    mekao_0_4_3 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex }:
          buildErlangMk ({
            name = "mekao";
            version = "0.4.3";
            src = fetchHex {
              pkg = "mekao";
              version = "0.4.3";
              sha256 =
                "41f11b6a517c74147e70cef4e38b96fe0bf28ee1fea147548344983b9c92c262";
            };

            meta = {
              description = ''Simple SQL builder'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ddosia/mekao";
            };
          } // packageOverrides)
      ) {};

    mekao = mekao_0_4_3;

    meld_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "meld";
            version = "0.1.2";
            src = fetchHex {
              pkg = "meld";
              version = "0.1.2";
              sha256 =
                "3f86b810df38e0767a472829a26f92c07c986c1bcc41421eba021a5a6c174e83";
            };

            meta = {
              description = ''create real CLIs in elixir, using mix tasks'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/conflate/meld";
            };
          } // packageOverrides)
      ) {};

    meld = meld_0_1_2;

    mellon_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          plug_1_3_5,
          poison_3_1_0
        }:
          buildMix ({
            name = "mellon";
            version = "0.1.1";
            src = fetchHex {
              pkg = "mellon";
              version = "0.1.1";
              sha256 =
                "2b05fca901c0b9609cdd65cfb015a7646a9ec239cf1694ee8f1384a53a5ac0b4";
            };
            beamDeps  = [ plug_1_3_5 poison_3_1_0 ];

            meta = {
              longDescription = ''Mellon is a Plug used in authentication of
                                APIs. It`s flexible, you can define your own
                                validator etc.'';

              homepage = "https://github.com/sajmoon/mellon";
            };
          } // packageOverrides)
      ) {};

    mellon = mellon_0_1_1;

    mem_0_3_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mem";
            version = "0.3.1";
            src = fetchHex {
              pkg = "mem";
              version = "0.3.1";
              sha256 =
                "46cdfb75e126da0f84e2d25c09d0048834f25b5174bc2b0631dd4ec22a646491";
            };

            meta = {
              description = ''KV cache with TTL, Replacement and Persistence
                            support'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/falood/mem";
            };
          } // packageOverrides)
      ) {};

    mem = mem_0_3_1;

    memcache_client_1_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          connection_1_0_4,
          poison_2_1_0,
          poolboy_1_5_1
        }:
          buildMix ({
            name = "memcache_client";
            version = "1.1.0";
            src = fetchHex {
              pkg = "memcache_client";
              version = "1.1.0";
              sha256 =
                "e12d6add6d9ef817f7cf47d85c37c75c9ec81512a7ad88f23b50963048bce439";
            };
            beamDeps  = [ connection_1_0_4 poison_2_1_0 poolboy_1_5_1 ];

            meta = {
              description = ''Memcache client library utilizing the memcache
                            binary protocol.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tsharju/memcache_client";
            };
          } // packageOverrides)
      ) {};

    memcache_client = memcache_client_1_1_0;

    memcache_ex_1_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          connection_1_0_4,
          poison_2_2_0,
          poolboy_1_5_1
        }:
          buildMix ({
            name = "memcache_ex";
            version = "1.2.0";
            src = fetchHex {
              pkg = "memcache_ex";
              version = "1.2.0";
              sha256 =
                "15fff60976ae05d9b2a0376bff8cff6c84bfaeacfec3baf52f509585cd015192";
            };
            beamDeps  = [ connection_1_0_4 poison_2_2_0 poolboy_1_5_1 ];

            meta = {
              description = ''Memcache client library Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gialib/memcache_ex";
            };
          } // packageOverrides)
      ) {};

    memcache_ex = memcache_ex_1_2_0;

    memcachex_0_4_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          connection_1_0_4,
          poison_1_0_2
        }:
          buildMix ({
            name = "memcachex";
            version = "0.4.1";
            src = fetchHex {
              pkg = "memcachex";
              version = "0.4.1";
              sha256 =
                "70866129a88532e0808f00347e928463782c63fc78cfd9452296135630db7192";
            };
            beamDeps  = [ connection_1_0_4 poison_1_0_2 ];

            meta = {
              description = ''Memcached client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ananthakumaran/memcachex";
            };
          } // packageOverrides)
      ) {};

    memcachex = memcachex_0_4_1;

    memcachir_1_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          connection_1_0_4,
          poison_1_0_2,
          poolboy_1_5_1
        }:
          buildMix ({
            name = "memcachir";
            version = "1.0.2";
            src = fetchHex {
              pkg = "memcachir";
              version = "1.0.2";
              sha256 =
                "bf3e92d566f03c2f2a8a7343f1702ae91ab84bcffc12d0937c4d860d4adf4c5e";
            };
            beamDeps  = [ connection_1_0_4 poison_1_0_2 poolboy_1_5_1 ];

            meta = {
              description = ''Memcached client, with connection pooling and
                            cluster support.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/peillis/memcachir";
            };
          } // packageOverrides)
      ) {};

    memcachir = memcachir_1_0_2;

    mercadolibre_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mercadolibre";
            version = "0.0.1";
            src = fetchHex {
              pkg = "mercadolibre";
              version = "0.0.1";
              sha256 =
                "0523ee821c198e348f36a5f893c49f8841158d75c2465dcb38a384fcf568c93e";
            };

            meta = {
              description = ''An elixir wrapper for MercadoLibre.com API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/carlosipe/mercadolibre_elixir";
            };
          } // packageOverrides)
      ) {};

    mercadolibre = mercadolibre_0_0_1;

    mercury_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, httpoison_0_11_2 }:
          buildMix ({
            name = "mercury";
            version = "0.1.1";
            src = fetchHex {
              pkg = "mercury";
              version = "0.1.1";
              sha256 =
                "2672fb8bffeb6d9707599afd775acfc5ca8872e85cff436678e10ff2eee4bfb4";
            };
            beamDeps  = [ httpoison_0_11_2 ];

            meta = {
              longDescription = ''A simple wrapper for the Mercury Web Parser
                                API (https://mercury.postlight.com/web-parser/),
                                powered by HTTPoison.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/adampash/mercury_ex";
            };
          } // packageOverrides)
      ) {};

    mercury = mercury_0_1_1;

    merkle_0_2_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          rlist_0_0_2,
          sha3_2_0_0
        }:
          buildMix ({
            name = "merkle";
            version = "0.2.2";
            src = fetchHex {
              pkg = "merkle";
              version = "0.2.2";
              sha256 =
                "aca38a8866ce10c33bb6f98f780f0f920a97dc979c7af72516b22ccf03087b78";
            };
            beamDeps  = [ rlist_0_0_2 sha3_2_0_0 ];

            meta = {
              description = ''Implementation of Merkle Trees in Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/stampery/elixir-merkle";
            };
          } // packageOverrides)
      ) {};

    merkle = merkle_0_2_2;

    merkle_tree_1_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "merkle_tree";
            version = "1.1.1";
            src = fetchHex {
              pkg = "merkle_tree";
              version = "1.1.1";
              sha256 =
                "6020578ceee91ae26c63aab9bf8112fbb83cc029d25e6ad4f35b2ed4bfdcaf7a";
            };

            meta = {
              longDescription = ''A hash tree or Merkle tree is a tree in which
                                every non-leaf node is labelled with the hash of
                                the labels or values (in case of leaves) of its
                                child nodes. Hash trees are useful because they
                                allow efficient and secure verification of the
                                contents of large data structures.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/yosriady/merkle_tree";
            };
          } // packageOverrides)
      ) {};

    merkle_tree = merkle_tree_1_1_1;

    merklet_1_0_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "merklet";
            version = "1.0.1";
            src = fetchHex {
              pkg = "merklet";
              version = "1.0.1";
              sha256 =
                "c0e93dab78db8939d97a1229606cebd5794e658bf6a878225aa7f8bd244a562e";
            };

            meta = {
              description = ''Merkle Trees for data replication purposes'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ferd/merklet";
            };
          } // packageOverrides)
      ) {};

    merklet = merklet_1_0_1;

    merkletree_0_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "merkletree";
            version = "0.1.0";
            src = fetchHex {
              pkg = "merkletree";
              version = "0.1.0";
              sha256 =
                "f0d87494a4f58e368144c15ef5037ff9a2da48885620a92dee9c7f2e4b4c8972";
            };

            meta = {
              description = ''A library for creating and manipulating Merkle
                            Trees.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/carlosgaldino/merkletree";
            };
          } // packageOverrides)
      ) {};

    merkletree = merkletree_0_1_0;

    merry_christmas_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          floki_0_11_0,
          httpoison_0_10_0
        }:
          buildMix ({
            name = "merry_christmas";
            version = "0.1.0";
            src = fetchHex {
              pkg = "merry_christmas";
              version = "0.1.0";
              sha256 =
                "7aa1b02b4126be65c796d6135f53be13175d6c5d8d80f345fdda8fd1cb8ce301";
            };
            beamDeps  = [ floki_0_11_0 httpoison_0_10_0 ];

            meta = {
              description = ''Simple christmas app and library.'';
              license = stdenv.lib.licenses.asl20;
            };
          } // packageOverrides)
      ) {};

    merry_christmas = merry_christmas_0_1_0;

    message_pack_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "message_pack";
            version = "0.2.0";
            src = fetchHex {
              pkg = "message_pack";
              version = "0.2.0";
              sha256 =
                "94f31aa2734989e97562fcd1ad0b159e8571f4b97f591995bfdcbbbcfcaadd83";
            };

            meta = {
              description = ''MessagePack Implementation for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mururu/msgpack-elixir";
            };
          } // packageOverrides)
      ) {};

    message_pack = message_pack_0_2_0;

    messagepack_0_4_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "messagepack";
            version = "0.4.1";
            src = fetchHex {
              pkg = "messagepack";
              version = "0.4.1";
              sha256 =
                "cdf2d4a2af846a8c3cd43a9f80082883ff7c2c5e221ec078375102db0fb5ca2f";
            };

            meta = {
              description = ''MessagePack for Erlang / Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/tomaon/messagepack";
            };
          } // packageOverrides)
      ) {};

    messagepack = messagepack_0_4_1;

    messenger_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_8_3,
          poison_1_5_2
        }:
          buildMix ({
            name = "messenger";
            version = "0.0.2";
            src = fetchHex {
              pkg = "messenger";
              version = "0.0.2";
              sha256 =
                "dda5b1bde69852ac8f2ae7f2d10d55209fd7b6babfc4e664779e3204a9e258b8";
            };
            beamDeps  = [ httpoison_0_8_3 poison_1_5_2 ];

            meta = {
              description = ''Facebook messenger API client for Elixir'';

            };
          } // packageOverrides)
      ) {};

    messenger = messenger_0_0_2;

    messenger_bot_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          plug_1_3_5,
          poison_3_1_0
        }:
          buildMix ({
            name = "messenger_bot";
            version = "0.2.0";
            src = fetchHex {
              pkg = "messenger_bot";
              version = "0.2.0";
              sha256 =
                "a1c46b56930007828b2cde7ca9d85f9424a8d82533d967329e943d37f01a9bad";
            };
            beamDeps  = [ httpoison_0_11_2 plug_1_3_5 poison_3_1_0 ];

            meta = {
              description = ''Facebook Messenger chatbot client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mustafaturan/messenger_bot";
            };
          } // packageOverrides)
      ) {};

    messenger_bot = messenger_bot_0_2_0;

    meta_0_0_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, forms_0_0_1 }:
          buildRebar3 ({
            name = "meta";
            version = "0.0.1";
            src = fetchHex {
              pkg = "meta";
              version = "0.0.1";
              sha256 =
                "9aa1be58e265a16eafb9092d9675427672721ca9d3c924664e561b0857c6dcb8";
            };

            beamDeps  = [ forms_0_0_1 ];

            meta = {
              description = ''A metaprogramming library for Erlang'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/efcasado/forms";
            };
          } // packageOverrides)
      ) {};

    meta = meta_0_0_1;

    meta_inspector_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_8_3,
          poison_2_2_0
        }:
          buildMix ({
            name = "meta_inspector";
            version = "0.0.2";
            src = fetchHex {
              pkg = "meta_inspector";
              version = "0.0.2";
              sha256 =
                "60edc00c2af5ab30e2abebe5f40614421fde2861e147147b33ae54bf4beb180a";
            };
            beamDeps  = [ httpoison_0_8_3 poison_2_2_0 ];

            meta = {
              description = ''HTTP Metadata inspector'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    meta_inspector = meta_inspector_0_0_2;

    meta_pid_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "meta_pid";
            version = "0.2.1";
            src = fetchHex {
              pkg = "meta_pid";
              version = "0.2.1";
              sha256 =
                "6d6e3597fa235554f181f0ed09e62571fd9963d1e32fa640f812b75c9318904a";
            };

            meta = {
              longDescription = ''Library providing scaffolding for storing
                                process-specific information for duration of
                                process` lifespan'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/avvo/meta_pid";
            };
          } // packageOverrides)
      ) {};

    meta_pid = meta_pid_0_2_1;

    metainvestigator_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, floki_0_17_2 }:
          buildMix ({
            name = "metainvestigator";
            version = "0.0.3";
            src = fetchHex {
              pkg = "metainvestigator";
              version = "0.0.3";
              sha256 =
                "774b3973090491a9a342a68c5cf099c98581ae0f1b1d313a08a7d2030d541781";
            };
            beamDeps  = [ floki_0_17_2 ];

            meta = {
              description = ''A library for web scraping, inspired by
                            MetaInspector'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nekova/metainvestigator";
            };
          } // packageOverrides)
      ) {};

    metainvestigator = metainvestigator_0_0_3;

    metal_0_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "metal";
            version = "0.1.0";
            src = fetchHex {
              pkg = "metal";
              version = "0.1.0";
              sha256 =
                "8a4a25c53fa92afc9756b6534ce51d2b22381879327eb874002efe2f6b13bc69";
            };

            meta = {
              description = ''Lightweight server behaviour'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lpgauth/metal";
            };
          } // packageOverrides)
      ) {};

    metal_0_1_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "metal";
            version = "0.1.1";
            src = fetchHex {
              pkg = "metal";
              version = "0.1.1";
              sha256 =
                "88b82b634998a1a768dedcd372c2f7e657b19445325c0af5ccbac62c77210f1d";
            };

            meta = {
              description = ''Lightweight server behaviour'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lpgauth/metal";
            };
          } // packageOverrides)
      ) {};

    metal = metal_0_1_1;

    metatags_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ex_doc_0_15_1,
          phoenix_html_2_9_3
        }:
          buildMix ({
            name = "metatags";
            version = "0.1.0";
            src = fetchHex {
              pkg = "metatags";
              version = "0.1.0";
              sha256 =
                "dea237d6c6e15a66cbec1c8ee7d28ec2b578f81ef1ab3beaa3ad35f94ff26482";
            };
            beamDeps  = [ ex_doc_0_15_1 phoenix_html_2_9_3 ];

            meta = {
              longDescription = ''Metatags provides an easy to work with API to
                                set default and page specific metatags on a
                                page.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mintcore/metatags";
            };
          } // packageOverrides)
      ) {};

    metatags = metatags_0_1_0;

    meteo_stick_0_2_4 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, nerves_uart_0_1_2
        }:
          buildMix ({
            name = "meteo_stick";
            version = "0.2.4";
            src = fetchHex {
              pkg = "meteo_stick";
              version = "0.2.4";
              sha256 =
                "92f8f62455a5be09c461aa7f09722d54d4acb75d345daf2d7e4fefb8f9566b52";
            };
            beamDeps  = [ nerves_uart_0_1_2 ];

            meta = {
              description = ''A Client for the MeteoStick USB Stick'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/NationalAssociationOfRealtors/meteo_stick";
            };
          } // packageOverrides)
      ) {};

    meteo_stick = meteo_stick_0_2_4;

    meter_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, httpoison_0_11_2 }:
          buildMix ({
            name = "meter";
            version = "0.2.0";
            src = fetchHex {
              pkg = "meter";
              version = "0.2.0";
              sha256 =
                "40258a8a265321d760b6da529dcbe4c5722bfd0e40c877b6921d3d21e98fefd5";
            };
            beamDeps  = [ httpoison_0_11_2 ];

            meta = {
              description = ''Track your elixir application on google
                            analytycs'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/carlo-colombo/meter";
            };
          } // packageOverrides)
      ) {};

    meter = meter_0_2_0;

    method_missing_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "method_missing";
            version = "0.1.0";
            src = fetchHex {
              pkg = "method_missing";
              version = "0.1.0";
              sha256 =
                "2b05a0f0d88eb4b8d315f460e3ba9ad8b015078645fa96180adb0f63b399b359";
            };

            meta = {
              description = ''method_missing is an Elixir library for dynamic
                            code execution.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/andrewvy/method_missing";
            };
          } // packageOverrides)
      ) {};

    method_missing = method_missing_0_1_0;

    metrex_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "metrex";
            version = "0.2.0";
            src = fetchHex {
              pkg = "metrex";
              version = "0.2.0";
              sha256 =
                "bebf485ee9b872456a91f855942070e13b6cd9264ac4bbd9f2a75cf94df6856d";
            };

            meta = {
              description = ''Simple metrics for elixir apps'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mustafaturan/metrex";
            };
          } // packageOverrides)
      ) {};

    metrex = metrex_0_2_0;

    metrics_1_0_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "metrics";
            version = "1.0.1";
            src = fetchHex {
              pkg = "metrics";
              version = "1.0.1";
              sha256 =
                "69b09adddc4f74a40716ae54d140f93beb0fb8978d8636eaded0c31b6f099f16";
            };

            meta = {
              description = ''A generic interface to different metrics systems
                            in Erlang.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/benoitc/erlang-metrics";
            };
          } // packageOverrides)
      ) {};

    metrics_1_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "metrics";
            version = "1.1.0";
            src = fetchHex {
              pkg = "metrics";
              version = "1.1.0";
              sha256 =
                "48bd4774cef5bd88680cf71c9db46acbe5a80f23072cb2a0a42e8f7d5bd33549";
            };

            meta = {
              description = ''A generic interface to different metrics systems
                            in Erlang.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/benoitc/erlang-metrics";
            };
          } // packageOverrides)
      ) {};

    metrics_2_2_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "metrics";
            version = "2.2.0";
            src = fetchHex {
              pkg = "metrics";
              version = "2.2.0";
              sha256 =
                "2f010f01db360c316c0e8645b68e5ec676f4ba36d2c6297fdd44739c918f575c";
            };

            meta = {
              description = ''A generic interface to different metrics systems
                            in Erlang.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/benoitc/erlang-metrics";
            };
          } // packageOverrides)
      ) {};

    metrics_2_4_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "metrics";
            version = "2.4.0";
            src = fetchHex {
              pkg = "metrics";
              version = "2.4.0";
              sha256 =
                "b78169ba63d3d519c43240b7221c221a140754b66f68c8b99690ae12fc7ebf0b";
            };

            meta = {
              description = ''A generic interface to different metrics systems
                            in Erlang.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/benoitc/erlang-metrics";
            };
          } // packageOverrides)
      ) {};

    metrics = metrics_2_4_0;

    metrics_reader_0_1_13 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          folsom_0_8_3,
          lager_3_2_4
        }:
          buildRebar3 ({
            name = "metrics_reader";
            version = "0.1.13";
            src = fetchHex {
              pkg = "metrics_reader";
              version = "0.1.13";
              sha256 =
                "fa2fc08be0aaaac35d007acb122764b987355c18a3a35f73e1bf645981f1efae";
            };

            beamDeps  = [ folsom_0_8_3 lager_3_2_4 ];

            meta = {
              description = ''Expose Erlang application Folsom metrics to the
                            console'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dataloop/metrics-reader";
            };
          } // packageOverrides)
      ) {};

    metrics_reader = metrics_reader_0_1_13;

    metrics_statsd_1_0_6 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          metrics_1_0_1,
          statix_1_0_0
        }:
          buildMix ({
            name = "metrics_statsd";
            version = "1.0.6";
            src = fetchHex {
              pkg = "metrics_statsd";
              version = "1.0.6";
              sha256 =
                "3e2fe4c852d651a2ff9dd9f2d4aff1a1a43245e765207d42e6d2c4794be8237c";
            };
            beamDeps  = [ metrics_1_0_1 statix_1_0_0 ];

            meta = {
              longDescription = ''`metrics_statsd` provides an Elixir wrapper
                                around the [Erlang metrics app from
                                Hackney](https://github.com/benoitc/erlang-metrics)
                                and adds a reporting module for Statsd.'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/martinrehfeld/elixir-metrics-statsd";
            };
          } // packageOverrides)
      ) {};

    metrics_statsd = metrics_statsd_1_0_6;

    metrix_0_4_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, logfmt_3_2_0 }:
          buildMix ({
            name = "metrix";
            version = "0.4.2";
            src = fetchHex {
              pkg = "metrix";
              version = "0.4.2";
              sha256 =
                "37eb7fde58d55639003514b65dccc5cf977af1261a96311b83825c30ea1c5fea";
            };
            beamDeps  = [ logfmt_3_2_0 ];

            meta = {
              longDescription = ''Metrix is a library to log custom application
                                metrics, in a well-structured, human *and*
                                machine readable format, for use by downstream
                                log processing systems (like Librato, Reimann,
                                etc...)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rwdaigle/metrix";
            };
          } // packageOverrides)
      ) {};

    metrix = metrix_0_4_2;

    metro2_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, timex_3_1_15 }:
          buildMix ({
            name = "metro2";
            version = "0.1.1";
            src = fetchHex {
              pkg = "metro2";
              version = "0.1.1";
              sha256 =
                "8742300a4e553098c2a5e7c46426ded84c2ee24947d95b0ade3c3f99e5be1e0f";
            };
            beamDeps  = [ timex_3_1_15 ];

            meta = {
              longDescription = ''This library follows the METRO 2 ® data
                                reporting format, which is a data reporting
                                format for consumer credit account data
                                furnishers.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dominikknafelj/metro2";
            };
          } // packageOverrides)
      ) {};

    metro2 = metro2_0_1_1;

    mex_0_0_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mex";
            version = "0.0.5";
            src = fetchHex {
              pkg = "mex";
              version = "0.0.5";
              sha256 =
                "52765dc6f5d0b03dba9f08424b85cfbc96f873dfc769cdb6a26ac391ad3344e3";
            };

            meta = {
              description = ''Macro-expansion display helper for IEx.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mrluc/mex";
            };
          } // packageOverrides)
      ) {};

    mex = mex_0_0_5;

    mgmepi_0_9_0 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex }:
          buildErlangMk ({
            name = "mgmepi";
            version = "0.9.0";
            src = fetchHex {
              pkg = "mgmepi";
              version = "0.9.0";
              sha256 =
                "021263b973de04f6c20ccd08bf99fb4f24921cc52384f1f17210935b94c4a45c";
            };

            meta = {
              description = ''MySQL Cluster Management API (mgmapi) for
                            Erlang'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/tomaon/mgmepi";
            };
          } // packageOverrides)
      ) {};

    mgmepi = mgmepi_0_9_0;

    microformats2_0_0_8 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          floki_0_17_2,
          httpotion_3_0_2
        }:
          buildMix ({
            name = "microformats2";
            version = "0.0.8";
            src = fetchHex {
              pkg = "microformats2";
              version = "0.0.8";
              sha256 =
                "77890627fadff1c0ccdb58aa26b335f2c78201ca1281cfe28b7941fb3e8115e6";
            };
            beamDeps  = [ floki_0_17_2 httpotion_3_0_2 ];

            meta = {
              description = ''A microformats2 parser
                            (http://microformats.org/wiki/microformats-2) for
                            Elixir'';
              license = stdenv.lib.licenses.agpl3;
              homepage = "https://github.com/ckruse/microformats2-elixir";
            };
          } // packageOverrides)
      ) {};

    microformats2 = microformats2_0_0_8;

    microscope_1_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          mime_1_1_0
        }:
          buildMix ({
            name = "microscope";
            version = "1.0.0";
            src = fetchHex {
              pkg = "microscope";
              version = "1.0.0";
              sha256 =
                "a10c6c73bdb996fe9c852451bdc51d230aa99d3f6ece86e90c882abc1978849f";
            };
            beamDeps  = [ cowboy_1_1_2 mime_1_1_0 ];

            meta = {
              description = ''A simple static web server written in Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Dalgona/microscope";
            };
          } // packageOverrides)
      ) {};

    microscope = microscope_1_0_0;

    migratrex_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ecto_2_1_4 }:
          buildMix ({
            name = "migratrex";
            version = "0.0.1";
            src = fetchHex {
              pkg = "migratrex";
              version = "0.0.1";
              sha256 =
                "fdb45ba2ebdc95b751486144501c140ad6dd4f18f07f5532c9697552f51c0f2f";
            };
            beamDeps  = [ ecto_2_1_4 ];

            meta = {
              description = ''Build Ecto models and tests from existing
                            database (Postgresql)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/andrewtimberlake/migratrex";
            };
          } // packageOverrides)
      ) {};

    migratrex = migratrex_0_0_1;

    milkpotion_0_0_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ex_rated_1_3_1,
          httpoison_0_11_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "milkpotion";
            version = "0.0.4";
            src = fetchHex {
              pkg = "milkpotion";
              version = "0.0.4";
              sha256 =
                "c5ec7df5fe2c560699fa4e5ef4f1bb6c9d7afcc28529b9d3dd3204ba313000bf";
            };
            beamDeps  = [ ex_rated_1_3_1 httpoison_0_11_2 poison_2_2_0 ];

            meta = {
              description = ''milkpotion is an api wrapper for Remember the
                            Milk'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/croesnick/milkpotion.git";
            };
          } // packageOverrides)
      ) {};

    milkpotion = milkpotion_0_0_4;

    milliseconds_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "milliseconds";
            version = "0.0.1";
            src = fetchHex {
              pkg = "milliseconds";
              version = "0.0.1";
              sha256 =
                "6f82b9f47590e96ed90761d6eb331a9c11a40b68216d5e4867420899420035f0";
            };

            meta = {
              longDescription = '' Simple library to work with milliseconds.
                                Convert text to milliseconds: convert(\"2d\")
                                Convert milliseconds to text: convert(8640000)
                                Calculate future time: future_time(\"6hrs\") '';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/davebryson/elixir_milliseconds";
            };
          } // packageOverrides)
      ) {};

    milliseconds = milliseconds_0_0_1;

    mime_1_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mime";
            version = "1.1.0";
            src = fetchHex {
              pkg = "mime";
              version = "1.1.0";
              sha256 =
                "33dd09e615daab5668c15cc3a33829892728fdbed910ab0c0a0edb06b45fc54d";
            };

            meta = {
              description = ''A MIME type module for Elixir'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/elixir-lang/mime";
            };
          } // packageOverrides)
      ) {};

    mime = mime_1_1_0;

    mime_types_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mime_types";
            version = "0.1.1";
            src = fetchHex {
              pkg = "mime_types";
              version = "0.1.1";
              sha256 =
                "46b4f4a52deda3ac9fa48ae6e3582efb851d6c72de4a11e4dfcc7e386dab710b";
            };

            meta = {
              description = ''A toolbelt for working with MIME types in
                            Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/christhekeele/mime_types";
            };
          } // packageOverrides)
      ) {};

    mime_types = mime_types_0_1_1;

    mimerl_1_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "mimerl";
            version = "1.0.0";
            src = fetchHex {
              pkg = "mimerl";
              version = "1.0.0";
              sha256 =
                "a30b01104a29bd3a363db8646e4ce0f7980f9ecd23a98707c46c3ced918c41b4";
            };

            meta = {
              description = ''Library to handle mimetypes'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/benoitc/mimerl";
            };
          } // packageOverrides)
      ) {};

    mimerl_1_0_2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "mimerl";
            version = "1.0.2";
            src = fetchHex {
              pkg = "mimerl";
              version = "1.0.2";
              sha256 =
                "7a4c8e1115a2732a67d7624e28cf6c9f30c66711a9e92928e745c255887ba465";
            };

            meta = {
              description = ''Library to handle mimetypes'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/benoitc/mimerl";
            };
          } // packageOverrides)
      ) {};

    mimerl_1_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "mimerl";
            version = "1.1.0";
            src = fetchHex {
              pkg = "mimerl";
              version = "1.1.0";
              sha256 =
                "def0f1922a5dcdeeee6e4f41139b364e7f0f40239774b528a0986b12bcb42ddc";
            };

            meta = {
              description = ''Library to handle mimetypes'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/benoitc/mimerl";
            };
          } // packageOverrides)
      ) {};

    mimerl = mimerl_1_1_0;

    mimetype_parser_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mimetype_parser";
            version = "0.1.2";
            src = fetchHex {
              pkg = "mimetype_parser";
              version = "0.1.2";
              sha256 =
                "c495521cad6cf49fb79098e68e921c58955312df46c9c5aa5abab44224c2647d";
            };

            meta = {
              description = ''parse mimetypes'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/camshaft/mimetype_parser";
            };
          } // packageOverrides)
      ) {};

    mimetype_parser = mimetype_parser_0_1_2;

    mimex_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mimex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "mimex";
              version = "0.1.0";
              sha256 =
                "68858d5fb6a59780c3b94a445fd994856c3f1d0f3ed8dff6a95b6aa80027e4de";
            };

            meta = {
              description = ''MIME type utilities for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hex-sh/mimex";
            };
          } // packageOverrides)
      ) {};

    mimex = mimex_0_1_0;

    minify_response_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          floki_0_9_0,
          plug_1_3_5
        }:
          buildMix ({
            name = "minify_response";
            version = "0.1.0";
            src = fetchHex {
              pkg = "minify_response";
              version = "0.1.0";
              sha256 =
                "3c268012d615b3820cda76a48ed0d2fd49cceeda4375c17cea6dc2ea1c1a877d";
            };
            beamDeps  = [ floki_0_9_0 plug_1_3_5 ];

            meta = {
              description = ''A Plug that minifies response body'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pilu/minify_response";
            };
          } // packageOverrides)
      ) {};

    minify_response = minify_response_0_1_0;

    minmaxlist_0_0_7 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "minmaxlist";
            version = "0.0.7";
            src = fetchHex {
              pkg = "minmaxlist";
              version = "0.0.7";
              sha256 =
                "5a6e9661d1340dd3bba5c964a8edb11d9ddaa571b4c9dfa77ecb91770ef6c60f";
            };

            meta = {
              longDescription = ''Elixir library extending `Enum.min_by/2`,
                                `Enum.max_by/2` and `Enum.min_max_by/2` to
                                return a list of results instead of just one.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/seantanly/elixir-minmaxlist";
            };
          } // packageOverrides)
      ) {};

    minmaxlist = minmaxlist_0_0_7;

    minmay_1_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "minmay";
            version = "1.2.0";
            src = fetchHex {
              pkg = "minmay";
              version = "1.2.0";
              sha256 =
                "f6a9ae49444a42590e3fa68dd9d9a4299aeeca01454038f8d39399036d9db822";
            };

            meta = {
              longDescription = ''Minmay is a Erlang application for
                                translating a file extention to MIME type or
                                vice versa'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/davecaos/minmay";
            };
          } // packageOverrides)
      ) {};

    minmay = minmay_1_2_0;

    misc_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "misc";
            version = "0.3.0";
            src = fetchHex {
              pkg = "misc";
              version = "0.3.0";
              sha256 =
                "3a0543a900002f2c533e42b3c67133c12d29da870382552f0df8320790b33a55";
            };

            meta = {
              longDescription = ''- Some miscellaneous functions in Elixir to
                                start to get used to the syntax and functional
                                programming style.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jackmarchant/misc";
            };
          } // packageOverrides)
      ) {};

    misc = misc_0_3_0;

    misc_random_0_2_6 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "misc_random";
            version = "0.2.6";
            src = fetchHex {
              pkg = "misc_random";
              version = "0.2.6";
              sha256 =
                "4fe3db3bddcf55d93404fa9f5bf006800d54bfeb78bcf583376750d28ac0d7bc";
            };

            meta = {
              longDescription = ''This is a very thin wrapper around erlang`s
                                random:uniform method. It allows you to create
                                random strings or numbers.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gutschilla/elixir-helper-random";
            };
          } // packageOverrides)
      ) {};

    misc_random = misc_random_0_2_6;

    misha_cafex_0_0_6 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          consul_1_0_3,
          erlzk_0_6_3
        }:
          buildMix ({
            name = "misha_cafex";
            version = "0.0.6";
            src = fetchHex {
              pkg = "misha_cafex";
              version = "0.0.6";
              sha256 =
                "aeaf472db3ab5750703e784af2c300b3fc1a66cc176ec38e28326c783ab13aa1";
            };
            beamDeps  = [ consul_1_0_3 erlzk_0_6_3 ];

            meta = {
              description = ''Cafex is a pure Elixir implementation of Kafka
                            client.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/upyun/cafex";
            };
          } // packageOverrides)
      ) {};

    misha_cafex = misha_cafex_0_0_6;

    mix_apidoc_0_4_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_1_0_2 }:
          buildMix ({
            name = "mix_apidoc";
            version = "0.4.0";
            src = fetchHex {
              pkg = "mix_apidoc";
              version = "0.4.0";
              sha256 =
                "9d617e942ce689f25e0a8e0563cc35e9fdb7e41a6a77751d15ed0d04b12d5a5b";
            };
            beamDeps  = [ poison_1_0_2 ];

            meta = {
              longDescription = ''A mix task that triggers apidoc to create
                                documentation for RESTful web APIs from inline
                                code annotations.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sldab/mix_apidoc";
            };
          } // packageOverrides)
      ) {};

    mix_apidoc = mix_apidoc_0_4_0;

    mix_deps_tree_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mix_deps_tree";
            version = "0.1.0";
            src = fetchHex {
              pkg = "mix_deps_tree";
              version = "0.1.0";
              sha256 =
                "de19ea3eebf578080263f25fdf6a248fdc460aa86e41d582cc0d0379329fa6b6";
            };

            meta = {
              description = ''Mix task to print dependency tree of an
                            application to a terminal'';

              homepage = "https://github.com/liveforeverx/mix_deps_tree";
            };
          } // packageOverrides)
      ) {};

    mix_deps_tree = mix_deps_tree_0_1_0;

    mix_dia_compiler_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mix_dia_compiler";
            version = "0.2.0";
            src = fetchHex {
              pkg = "mix_dia_compiler";
              version = "0.2.0";
              sha256 =
                "8732996312601c87d61004c7ad60cbe417233cfa81a6e6379e63f84bd72df9e3";
            };

            meta = {
              description = ''Diameter source files compiler for Mix and
                            Elixir.'';
              license = stdenv.lib.licenses.mpl20;
              homepage = "https://github.com/xerions/mix_dia_compiler";
            };
          } // packageOverrides)
      ) {};

    mix_dia_compiler = mix_dia_compiler_0_2_0;

    mix_docker_0_3_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, distillery_1_1_2 }:
          buildMix ({
            name = "mix_docker";
            version = "0.3.2";
            src = fetchHex {
              pkg = "mix_docker";
              version = "0.3.2";
              sha256 =
                "72ffd7e8506707e3ddbf2d25a7a8bfed58551ddce244c0725a819d31aef1b6cc";
            };
            beamDeps  = [ distillery_1_1_2 ];

            meta = {
              description = ''Put your Elixir app production release inside
                            minimal docker image'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/recruitee/mix_docker";
            };
          } // packageOverrides)
      ) {};

    mix_docker_0_4_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, distillery_1_4_0 }:
          buildMix ({
            name = "mix_docker";
            version = "0.4.2";
            src = fetchHex {
              pkg = "mix_docker";
              version = "0.4.2";
              sha256 =
                "a2b26947f0756c38f504fb68cfa93d06d6a340e95d523c966031045f398ec565";
            };
            beamDeps  = [ distillery_1_4_0 ];

            meta = {
              description = ''Put your Elixir app production release inside
                            minimal docker image'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/recruitee/mix_docker";
            };
          } // packageOverrides)
      ) {};

    mix_docker = mix_docker_0_4_2;

    mix_erlang_tasks_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mix_erlang_tasks";
            version = "0.1.0";
            src = fetchHex {
              pkg = "mix_erlang_tasks";
              version = "0.1.0";
              sha256 =
                "95d2839c422c482a70c08a8702da8242f86b773f8ab6e8602a4eb72da8da04ed";
            };

            meta = {
              longDescription = ''This project provides a few Mix tasks that
                                make it more convenient to use Mix as a build
                                tool and package manager when developing
                                applications in Erlang.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/alco/mix-erlang-tasks";
            };
          } // packageOverrides)
      ) {};

    mix_erlang_tasks = mix_erlang_tasks_0_1_0;

    mix_eunit_0_3_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, eunit_formatters_0_3_1
        }:
          buildMix ({
            name = "mix_eunit";
            version = "0.3.0";
            src = fetchHex {
              pkg = "mix_eunit";
              version = "0.3.0";
              sha256 =
                "da776cf400b200992cc1e8240a608eb0969ec505cd4272a16d5f077c3d6922fb";
            };
            beamDeps  = [ eunit_formatters_0_3_1 ];

            meta = {
              description = ''A mix task to run eunit tests, works for umbrella
                            projects'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dantswain/mix_eunit";
            };
          } // packageOverrides)
      ) {};

    mix_eunit = mix_eunit_0_3_0;

    mix_generator_0_1_9 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          mix_templates_0_1_13,
          private_0_1_1
        }:
          buildMix ({
            name = "mix_generator";
            version = "0.1.9";
            src = fetchHex {
              pkg = "mix_generator";
              version = "0.1.9";
              sha256 =
                "1c4b734a4fc3114b2ad97e133615f22cfee5c535193aeef1df4bf9a9a19997e1";
            };
            beamDeps  = [ mix_templates_0_1_13 private_0_1_1 ];

            meta = {
              longDescription = ''This application adds a `gen` task to mix,
                                which generates project trees. Unlike `mix new`,
                                it can be fully customized. You can create
                                private variants for your own use, and publish
                                public ones that can be shared.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/pragdave/mix_task_gen";
            };
          } // packageOverrides)
      ) {};

    mix_generator = mix_generator_0_1_9;

    mix_info_0_7_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mix_info";
            version = "0.7.2";
            src = fetchHex {
              pkg = "mix_info";
              version = "0.7.2";
              sha256 =
                "7b4430ea649bb0c978f3b761403c068b08d9781c3f325c3f0dc57c1b44f395a2";
            };

            meta = {
              longDescription = ''A mix task that counts directories, files,
                                lines of code, modules, functions etc and
                                displays the results.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pskordilakis/mix_info";
            };
          } // packageOverrides)
      ) {};

    mix_info = mix_info_0_7_2;

    mix_npm_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mix_npm";
            version = "0.3.0";
            src = fetchHex {
              pkg = "mix_npm";
              version = "0.3.0";
              sha256 =
                "6ba66f3aa68a579cefa2d9cf2018c11216e60ad35b9a7ea203b1664b089d78d7";
            };

            meta = {
              description = ''Mix tasks to run NPM commands.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/verdammelt/mix_npm";
            };
          } // packageOverrides)
      ) {};

    mix_npm = mix_npm_0_3_0;

    mix_script_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mix_script";
            version = "0.2.0";
            src = fetchHex {
              pkg = "mix_script";
              version = "0.2.0";
              sha256 =
                "3191d3882878f251509ce2b6cc40d049db0d6a69939c1f89c69f5a8df478cda3";
            };

            meta = {
              description = ''A build utility that allows you to to use mix
                            packages in an elixir script.'';
              license = stdenv.lib.licenses.mit;
              homepage = "http://github.com/minhajuddin/mix_script";
            };
          } // packageOverrides)
      ) {};

    mix_script = mix_script_0_2_0;

    mix_task_archive_deps_0_4_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mix_task_archive_deps";
            version = "0.4.0";
            src = fetchHex {
              pkg = "mix_task_archive_deps";
              version = "0.4.0";
              sha256 =
                "9d1d518ff14e66d406e3a114fbe5326cf676a4ee78bb4352c3d969ab089a8db2";
            };

            meta = {
              description = ''Mix task to create archives for a project
                            dependencies and elixir itself'';
              license = stdenv.lib.licenses.mpl11;
              homepage = "https://github.com/hairyhum/mix_task_archive_deps";
            };
          } // packageOverrides)
      ) {};

    mix_task_archive_deps = mix_task_archive_deps_0_4_0;

    mix_templates_0_1_13 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, private_0_1_1 }:
          buildMix ({
            name = "mix_templates";
            version = "0.1.13";
            src = fetchHex {
              pkg = "mix_templates";
              version = "0.1.13";
              sha256 =
                "ff9e5707e7d39dfa9f3e93654f369d11fd93c53a46d840445735771deba76b5b";
            };
            beamDeps  = [ private_0_1_1 ];

            meta = {
              longDescription = ''A modular, open templating system, designed
                                for use with `mix gen`. You care about this if:
                                ① you`d like different templates than the ones
                                built in to mix, ② you`d like to create your
                                own templates, or ③ you have created a package
                                such as Phoenix or Nerves that needs its own
                                project setup.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/pragdave/mix_templates";
            };
          } // packageOverrides)
      ) {};

    mix_templates = mix_templates_0_1_13;

    mix_test_notify_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, notifier_0_0_1 }:
          buildMix ({
            name = "mix_test_notify";
            version = "0.1.1";
            src = fetchHex {
              pkg = "mix_test_notify";
              version = "0.1.1";
              sha256 =
                "4ef52e17d1d464e18db53855c7bf2e10e5f340ab2a1a1d57acc1936b68a613cc";
            };
            beamDeps  = [ notifier_0_0_1 ];

            meta = {
              longDescription = ''OSX notifications for mix test. Best when
                                used with the most excellent mix test.watch.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/apdunston/mix_test_notify";
            };
          } // packageOverrides)
      ) {};

    mix_test_notify = mix_test_notify_0_1_1;

    mix_test_watch_0_2_6 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, fs_3_4_0 }:
          buildMix ({
            name = "mix_test_watch";
            version = "0.2.6";
            src = fetchHex {
              pkg = "mix_test_watch";
              version = "0.2.6";
              sha256 =
                "b7019e9a0eba42bc98f15be9c1402f23c2b0dab7b67e71bba8bc5b337b0ab273";
            };
            beamDeps  = [ fs_3_4_0 ];

            meta = {
              description = ''Automatically run tests when files change'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lpil/mix-test.watch";
            };
          } // packageOverrides)
      ) {};

    mix_test_watch_0_4_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, fs_3_4_0 }:
          buildMix ({
            name = "mix_test_watch";
            version = "0.4.0";
            src = fetchHex {
              pkg = "mix_test_watch";
              version = "0.4.0";
              sha256 =
                "16727a93e29d2c863c99c29410250089be46ca11713c4199a98bd444394f5950";
            };
            beamDeps  = [ fs_3_4_0 ];

            meta = {
              description = ''Automatically run tests when files change'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lpil/mix-test.watch";
            };
          } // packageOverrides)
      ) {};

    mix_test_watch = mix_test_watch_0_4_0;

    mixgraph_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_2_2_2,
          json_0_3_3
        }:
          buildMix ({
            name = "mixgraph";
            version = "0.0.1";
            src = fetchHex {
              pkg = "mixgraph";
              version = "0.0.1";
              sha256 =
                "0c911c4e300d7e5196ff9d427b9d66d935d540309cb8a54a397641f7059f1700";
            };
            beamDeps  = [ httpotion_2_2_2 json_0_3_3 ];

            meta = {
              description = ''Create an interactive dependency graph for any
                            hex package published in hex.pm'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sivsushruth/mixgraph";
            };
          } // packageOverrides)
      ) {};

    mixgraph = mixgraph_0_0_1;

    mixpanel_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, exjsx_3_1_0 }:
          buildMix ({
            name = "mixpanel";
            version = "0.0.3";
            src = fetchHex {
              pkg = "mixpanel";
              version = "0.0.3";
              sha256 =
                "7b81d80d3705e5d4451951984bac49d476e3c79131138e9ffb66538f9c51a56e";
            };
            beamDeps  = [ exjsx_3_1_0 ];

            meta = {
              description = ''A client for the Mixpanel HTTP API. See
                            mixpanel.com.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/michihuber/mixpanel_ex";
            };
          } // packageOverrides)
      ) {};

    mixpanel = mixpanel_0_0_3;

    mixpanel_api_ex_0_8_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "mixpanel_api_ex";
            version = "0.8.4";
            src = fetchHex {
              pkg = "mixpanel_api_ex";
              version = "0.8.4";
              sha256 =
                "6a97ccdbddc30ac9e9d8cd460294f9b212f92eb80a199116d3473a46421411f5";
            };
            beamDeps  = [ httpoison_0_11_2 poison_2_2_0 ];

            meta = {
              description = ''Elixir client for the Mixpanel API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/agevio/mixpanel_api_ex";
            };
          } // packageOverrides)
      ) {};

    mixpanel_api_ex = mixpanel_api_ex_0_8_4;

    mixpanel_data_client_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_1_3_1
        }:
          buildMix ({
            name = "mixpanel_data_client";
            version = "0.0.2";
            src = fetchHex {
              pkg = "mixpanel_data_client";
              version = "0.0.2";
              sha256 =
                "7f3bbd608ae18153655f27bd50ea01ad85630d6c1cc6ab9ed336e95419f06c86";
            };
            beamDeps  = [ httpoison_0_11_2 poison_1_3_1 ];

            meta = {
              description = ''Client library for interacting with the Mixpanel
                            Data API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jeregrine/mixpanel_data_client";
            };
          } // packageOverrides)
      ) {};

    mixpanel_data_client = mixpanel_data_client_0_0_2;

    mixstar_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          netrc_0_0_2
        }:
          buildMix ({
            name = "mixstar";
            version = "0.0.1";
            src = fetchHex {
              pkg = "mixstar";
              version = "0.0.1";
              sha256 =
                "d7f9014711d04049c90a8f835857d1bde04647b326d1ec949e2a90477f4d4a39";
            };
            beamDeps  = [ httpoison_0_11_2 netrc_0_0_2 ];

            meta = {
              description = ''MixStar starred GitHub repository that depends on
                            your project'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ma2gedev/mix-star";
            };
          } // packageOverrides)
      ) {};

    mixstar = mixstar_0_0_1;

    mixunit_0_9_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mixunit";
            version = "0.9.2";
            src = fetchHex {
              pkg = "mixunit";
              version = "0.9.2";
              sha256 =
                "2c0e66d10d479ec95c636d2de1db04cba03574282182af0df49c297230b22d43";
            };

            meta = {
              description = ''an eunit task for mix'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/talentdeficit/mixunit";
            };
          } // packageOverrides)
      ) {};

    mixunit = mixunit_0_9_2;

    mizur_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mizur";
            version = "1.0.1";
            src = fetchHex {
              pkg = "mizur";
              version = "1.0.1";
              sha256 =
                "c2518c04d2c505b4929052a613697187c518d64ca56647d0931e6a1514e65ba0";
            };

            meta = {
              longDescription = ''Mizur is a module for transforming other
                                modules into metric systems. These modules
                                (metric systems) make it possible to use
                                functions to create values enclosed in a metric
                                system and functions to manipulate these
                                values.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/xvw/mizur";
            };
          } // packageOverrides)
      ) {};

    mizur = mizur_1_0_1;

    mldht_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          bencodex_1_0_0,
          krpc_protocol_0_0_3
        }:
          buildMix ({
            name = "mldht";
            version = "0.0.1";
            src = fetchHex {
              pkg = "mldht";
              version = "0.0.1";
              sha256 =
                "73a68c76776b6f4c094892d647a7ffc6a2c030def69b8236954ad93b4206b7e9";
            };
            beamDeps  = [ bencodex_1_0_0 krpc_protocol_0_0_3 ];

            meta = {
              longDescription = ''Distributed Hash Table (DHT) is a storage and
                                lookup system based on a peer-to-peer (P2P)
                                system. The file sharing protocol BitTorrent
                                makes use of a DHT to find new peers without
                                using a central tracker. MLDHT, in particular,
                                is an elixir package that provides a mainline
                                DHT implementation according to BEP 05.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cit/MLDHT";
            };
          } // packageOverrides)
      ) {};

    mldht = mldht_0_0_1;

    mmExchangeRate_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_2_2_1,
          jsx_2_8_2
        }:
          buildMix ({
            name = "mmExchangeRate";
            version = "0.0.1";
            src = fetchHex {
              pkg = "mmExchangeRate";
              version = "0.0.1";
              sha256 =
                "6daf6e74bf3ce8f9d7cc19b18b023d700201a847dde94a0eef1f263ce65efbac";
            };
            beamDeps  = [ httpotion_2_2_1 jsx_2_8_2 ];

            meta = {
              longDescription = ''A simple exchange rate checker and calculator
                                based on Central Bank of Myanmar Api. '';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/Arkar-Aung/mmExchangeRate";
            };
          } // packageOverrides)
      ) {};

    mmExchangeRate = mmExchangeRate_0_0_1;

    mmath_0_2_17 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "mmath";
            version = "0.2.17";
            src = fetchHex {
              pkg = "mmath";
              version = "0.2.17";
              sha256 =
                "55bb75af8797ddce5fda57d99acb0473cabc9120b4dc35abde7cd330a74139c8";
            };
            compilePorts = true;
            buildPlugins  = [ pc ];


            meta = {
              description = ''math library for metric sequences and binary
                            arrays.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dalmatinerdb/mmath";
            };
          } // packageOverrides)
      ) {};

    mmath = mmath_0_2_17;

    mnemonex_1_1_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, the_fuzz_0_3_0 }:
          buildMix ({
            name = "mnemonex";
            version = "1.1.4";
            src = fetchHex {
              pkg = "mnemonex";
              version = "1.1.4";
              sha256 =
                "9596ae1ebd20746a8ee90c151242a12bc2dd36b527c97c9b6dd73e83b8fc1fdb";
            };
            beamDeps  = [ the_fuzz_0_3_0 ];

            meta = {
              description = ''mnemonicode encoder/decoder'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mwmiller/mnemonex";
            };
          } // packageOverrides)
      ) {};

    mnemonex = mnemonex_1_1_4;

    mnemonic_slugs_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mnemonic_slugs";
            version = "0.0.3";
            src = fetchHex {
              pkg = "mnemonic_slugs";
              version = "0.0.3";
              sha256 =
                "d5dc54475a11a62df7bb686fc2983647f789defaeb0ca9fccdc6dd5c3ad40daf";
            };

            meta = {
              description = ''MnemonicSlugs is an Elixir library for generating
                            memorable slugs.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/devshane/mnemonic_slugs";
            };
          } // packageOverrides)
      ) {};

    mnemonic_slugs = mnemonic_slugs_0_0_3;

    mnemonix_0_8_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mnemonix";
            version = "0.8.1";
            src = fetchHex {
              pkg = "mnemonix";
              version = "0.8.1";
              sha256 =
                "7436234918133a39ab6ad060dae3d34ff288932cfab923ef17af9a2b213f95f3";
            };

            meta = {
              description = ''A unified interface to key/value stores.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/christhekeele/mnemonix";
            };
          } // packageOverrides)
      ) {};

    mnemonix = mnemonix_0_8_1;

    mnesiam_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mnesiam";
            version = "0.1.1";
            src = fetchHex {
              pkg = "mnesiam";
              version = "0.1.1";
              sha256 =
                "6e0b12961260aeb7413cc831bfb5458dfd40e0a194911af03f5db2754a6788bc";
            };

            meta = {
              description = ''Mnesiam is a Mnesia db manager for painless
                            Mnesia clustering.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/mustafaturan/mnesiam";
            };
          } // packageOverrides)
      ) {};

    mnesiam = mnesiam_0_1_1;

    mobiledoc_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mobiledoc";
            version = "0.0.2";
            src = fetchHex {
              pkg = "mobiledoc";
              version = "0.0.2";
              sha256 =
                "2d2f9285c9ac446163bb021e59179f2b336f60ce3089a17d67dc0e3df5a124aa";
            };

            meta = {
              description = ''An HTML renderer for the Mobiledoc format used by
                            the Mobiledoc Kit editor.'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/zeppelin/mobiledoc-renderer-elixir";
            };
          } // packageOverrides)
      ) {};

    mobiledoc = mobiledoc_0_0_2;

    mobiledoc_text_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mobiledoc_text";
            version = "0.0.3";
            src = fetchHex {
              pkg = "mobiledoc_text";
              version = "0.0.3";
              sha256 =
                "b0dfe0c28925cd9f2833c8c0f6b6e735edb35067a9376dd1662571b5876b09e0";
            };

            meta = {
              description = ''An HTML renderer for the Mobiledoc format used by
                            the Mobiledoc Kit editor.'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/zkwentz/mobiledoc-text-renderer-elixir";
            };
          } // packageOverrides)
      ) {};

    mobiledoc_text = mobiledoc_text_0_0_3;

    mochicow_0_6_4 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_0_4,
          mochiweb_2_15_0
        }:
          buildRebar3 ({
            name = "mochicow";
            version = "0.6.4";
            src = fetchHex {
              pkg = "mochicow";
              version = "0.6.4";
              sha256 =
                "7e9608f5fe2554e52b608b1b3a9d645ec3d6ce13961aa19b3522d27a84060739";
            };

            beamDeps  = [ cowboy_1_0_4 mochiweb_2_15_0 ];

            meta = {
              description = ''mochiweb adapter for cowboy'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/benoitc/mochicow";
            };
          } // packageOverrides)
      ) {};

    mochicow = mochicow_0_6_4;

    mochiweb_2_12_2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "mochiweb";
            version = "2.12.2";
            src = fetchHex {
              pkg = "mochiweb";
              version = "2.12.2";
              sha256 =
                "d3e681d4054b74a96cf2efcd09e94157ab83a5f55ddc4ce69f90b8144673bd7a";
            };

            meta = {
              description = ''MochiMedia Web Server'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mochi/mochiweb";
            };
          } // packageOverrides)
      ) {};

    mochiweb_2_15_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "mochiweb";
            version = "2.15.0";
            src = fetchHex {
              pkg = "mochiweb";
              version = "2.15.0";
              sha256 =
                "b960d1cbcf40a30963eeee90ab7aeae074cbfa9a238561fb4434add1afc3075c";
            };

            meta = {
              description = ''MochiMedia Web Server'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mochi/mochiweb";
            };
          } // packageOverrides)
      ) {};

    mochiweb = mochiweb_2_15_0;

    mochiweb_html_2_15_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "mochiweb_html";
            version = "2.15.0";
            src = fetchHex {
              pkg = "mochiweb_html";
              version = "2.15.0";
              sha256 =
                "7651a4ef29bd6d69819b37b6aa12c7616c5cf75e67ccd849cfb499e2bbbf0ce6";
            };

            meta = {
              description = ''Mochiweb HTML parser'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/philss/mochiweb_html";
            };
          } // packageOverrides)
      ) {};

    mochiweb_html = mochiweb_html_2_15_0;

    mochiweb_util_0_1_0 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex }:
          buildErlangMk ({
            name = "mochiweb_util";
            version = "0.1.0";
            src = fetchHex {
              pkg = "mochiweb_util";
              version = "0.1.0";
              sha256 =
                "9f50c84bf723b6f256f283c9a9e67ed0583a81b3372659fd66b9dcc195eac330";
            };

            meta = {
              description = ''Mochiweb util'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kivra/mochiweb_util";
            };
          } // packageOverrides)
      ) {};

    mochiweb_util = mochiweb_util_0_1_0;

    mock_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, meck_0_8_4 }:
          buildMix ({
            name = "mock";
            version = "0.1.3";
            src = fetchHex {
              pkg = "mock";
              version = "0.1.3";
              sha256 =
                "bf7cf50d528394d870cdecac4920ab719cec0af98eff95759b57cab0e5ee143e";
            };
            beamDeps  = [ meck_0_8_4 ];

            meta = {
              longDescription = ''A mocking libary for the Elixir language. We
                                use the Erlang meck library to provide module
                                mocking functionality for Elixir. It uses macros
                                in Elixir to expose the functionality in a
                                convenient manner for integrating in Elixir
                                tests.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jjh42/mock";
            };
          } // packageOverrides)
      ) {};

    mock_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, meck_0_8_4 }:
          buildMix ({
            name = "mock";
            version = "0.2.1";
            src = fetchHex {
              pkg = "mock";
              version = "0.2.1";
              sha256 =
                "d440b817e4e3505fe2d17963b7e783ae72875011dc6ac757c21904a8cc3578ac";
            };
            beamDeps  = [ meck_0_8_4 ];

            meta = {
              longDescription = ''A mocking libary for the Elixir language. We
                                use the Erlang meck library to provide module
                                mocking functionality for Elixir. It uses macros
                                in Elixir to expose the functionality in a
                                convenient manner for integrating in Elixir
                                tests.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jjh42/mock";
            };
          } // packageOverrides)
      ) {};

    mock = mock_0_2_1;

    mockgyver_0_12_0 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          eunit_addons_0_3_0,
          parse_trans_3_0_0
        }:
          buildRebar3 ({
            name = "mockgyver";
            version = "0.12.0";
            src = fetchHex {
              pkg = "mockgyver";
              version = "0.12.0";
              sha256 =
                "04e2964285e1fdea58476c608c66c8d49e14e950f9c6f770cba60c7b9889f64e";
            };

            beamDeps  = [ eunit_addons_0_3_0 parse_trans_3_0_0 ];

            meta = {
              description = ''Mocking library'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/klajo/mockgyver";
            };
          } // packageOverrides)
      ) {};

    mockgyver = mockgyver_0_12_0;

    mockingbird_0_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, httpoison_0_11_2 }:
          buildMix ({
            name = "mockingbird";
            version = "0.0.4";
            src = fetchHex {
              pkg = "mockingbird";
              version = "0.0.4";
              sha256 =
                "a1b6cce722abe7fae9d3e41876a3698cebf307f42752f9cad325b8d2e4978deb";
            };
            beamDeps  = [ httpoison_0_11_2 ];

            meta = {
              description = ''Mockingbird helps you create API consumers that
                            are easy to test.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/Driftrock/mockingbird";
            };
          } // packageOverrides)
      ) {};

    mockingbird = mockingbird_0_0_4;

    modbus_0_3_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "modbus";
            version = "0.3.4";
            src = fetchHex {
              pkg = "modbus";
              version = "0.3.4";
              sha256 =
                "aea3eea95e90c99464a7d938beb219f37e5d3748f07bd8fdebac458b80e66d88";
            };

            meta = {
              description = ''Modbus library with TCP Master & Slave
                            implementation.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/samuelventura/modbus/";
            };
          } // packageOverrides)
      ) {};

    modbus_0_3_7 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "modbus";
            version = "0.3.7";
            src = fetchHex {
              pkg = "modbus";
              version = "0.3.7";
              sha256 =
                "df9bd4ff52cdac4b78cf425137bbfc438e2ad56b256c0c34da01f6ddf334f0ef";
            };

            meta = {
              description = ''Modbus library with TCP Master & Slave
                            implementation.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/samuelventura/modbus/";
            };
          } // packageOverrides)
      ) {};

    modbus = modbus_0_3_7;

    modbus_tcp_server_1_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "modbus_tcp_server";
            version = "1.1.0";
            src = fetchHex {
              pkg = "modbus_tcp_server";
              version = "1.1.0";
              sha256 =
                "53e4b812497559ab6abf5c22c77636ff0b3f174c55251704f49621590a9b3903";
            };

            meta = {
              description = ''A Modbus TCP Server Implementation'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    modbus_tcp_server = modbus_tcp_server_1_1_0;

    module_mocker_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "module_mocker";
            version = "0.2.0";
            src = fetchHex {
              pkg = "module_mocker";
              version = "0.2.0";
              sha256 =
                "ce8aa59f0c58ce7d333a1853f6a3a106fe0cbbe79f6f9aeb72370d66ed454f5b";
            };

            meta = {
              longDescription = ''ModuleMocker allows to use different module
                                in development and test environment. It allows
                                convention to mock module for test'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rohanpujaris/module_mocker";
            };
          } // packageOverrides)
      ) {};

    module_mocker = module_mocker_0_2_0;

    moebius_2_0_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          inflex_1_5_0,
          poison_2_0_1,
          poolboy_1_5_1,
          postgrex_0_11_2,
          timex_3_0_5
        }:
          buildMix ({
            name = "moebius";
            version = "2.0.3";
            src = fetchHex {
              pkg = "moebius";
              version = "2.0.3";
              sha256 =
                "fc64bb3ab737c92ce1f3b3bae3c1afb55ef17fee1ebe8a366577d19f31241c4f";
            };
            beamDeps  = [
                          inflex_1_5_0
                          poison_2_0_1
                          poolboy_1_5_1
                          postgrex_0_11_2
                          timex_3_0_5
                        ];

            meta = {
              description = ''A functional approach to data access with
                            Elixir'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/robconery/moebius";
            };
          } // packageOverrides)
      ) {};

    moebius_3_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          inflex_1_5_0,
          poison_3_0_0,
          poolboy_1_5_1,
          postgrex_0_13_3
        }:
          buildMix ({
            name = "moebius";
            version = "3.0.1";
            src = fetchHex {
              pkg = "moebius";
              version = "3.0.1";
              sha256 =
                "f9c84ebc8efb864268ad7a0d8de70c577bc7a7f5bd987765d1fccc7d03767dd0";
            };
            beamDeps  = [
                          inflex_1_5_0
                          poison_3_0_0
                          poolboy_1_5_1
                          postgrex_0_13_3
                        ];

            meta = {
              description = ''A functional approach to data access with
                            Elixir'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/robconery/moebius";
            };
          } // packageOverrides)
      ) {};

    moebius = moebius_3_0_1;

    mogrify_0_5_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mogrify";
            version = "0.5.1";
            src = fetchHex {
              pkg = "mogrify";
              version = "0.5.1";
              sha256 =
                "11731d9141aa746eac65f69fe54f85c5820de359ac7e658aab3f53ef2143d4cc";
            };

            meta = {
              description = ''ImageMagick command line wrapper.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/route/mogrify";
            };
          } // packageOverrides)
      ) {};

    mogrify_0_5_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mogrify";
            version = "0.5.4";
            src = fetchHex {
              pkg = "mogrify";
              version = "0.5.4";
              sha256 =
                "d3a91bd0041a4ea83443f7c1537aeb6dd3edcc27207a9f796e72a20508828fc4";
            };

            meta = {
              description = ''ImageMagick command line wrapper.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/route/mogrify";
            };
          } // packageOverrides)
      ) {};

    mogrify = mogrify_0_5_4;

    mogrify_draw_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, mogrify_0_5_4 }:
          buildMix ({
            name = "mogrify_draw";
            version = "0.1.1";
            src = fetchHex {
              pkg = "mogrify_draw";
              version = "0.1.1";
              sha256 =
                "3f2e05b6cfa8cdef027bbf3ba14a36253694bac7322a0109b5af019b00665238";
            };
            beamDeps  = [ mogrify_0_5_4 ];

            meta = {
              description = ''A wrapper of the imagemagick draw functionality
                            on top of mogrify'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zamith/mogrify_draw";
            };
          } // packageOverrides)
      ) {};

    mogrify_draw = mogrify_draw_0_1_1;

    moip_0_4_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0,
          secure_random_0_5_1
        }:
          buildMix ({
            name = "moip";
            version = "0.4.0";
            src = fetchHex {
              pkg = "moip";
              version = "0.4.0";
              sha256 =
                "ec90f841322fcc18dc2ba11f4daff785b8238ca341e757e30e006214ef05aa55";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 secure_random_0_5_1
                      ];

            meta = {
              description = ''Moip Elixir SDK'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/frederico/moip-sdk-elixir";
            };
          } // packageOverrides)
      ) {};

    moip = moip_0_4_0;

    moip_ex_0_2_7 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_9_2,
          poison_1_0_2
        }:
          buildMix ({
            name = "moip_ex";
            version = "0.2.7";
            src = fetchHex {
              pkg = "moip_ex";
              version = "0.2.7";
              sha256 =
                "6295209440635c7994d784b39a30782fb36fa92fe8490b280147215042f65a14";
            };
            beamDeps  = [ httpoison_0_9_2 poison_1_0_2 ];

            meta = {
              description = ''Lib para lidar com o Moip pagamentos
                            (https://www.moip.com.br/).'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/AnderLuiz/moip_ex";
            };
          } // packageOverrides)
      ) {};

    moip_ex = moip_ex_0_2_7;

    mojoauth_1_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, timex_3_0_5 }:
          buildMix ({
            name = "mojoauth";
            version = "1.0.2";
            src = fetchHex {
              pkg = "mojoauth";
              version = "1.0.2";
              sha256 =
                "72d8b3fdff6d6571d7dcc9ad46b249823c84e0321920a0e9d6f39ee5f9fc2f23";
            };
            beamDeps  = [ timex_3_0_5 ];

            meta = {
              longDescription = ''MojoAuth is a set of standard approaches to
                                cross-app authentication based on HMAC.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/adhearsion/mojo-auth.ex";
            };
          } // packageOverrides)
      ) {};

    mojoauth = mojoauth_1_0_2;

    molasses_0_3_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_4,
          exredis_0_2_5,
          mongodb_0_4_0,
          postgrex_1_0_0_rc_1
        }:
          buildMix ({
            name = "molasses";
            version = "0.3.1";
            src = fetchHex {
              pkg = "molasses";
              version = "0.3.1";
              sha256 =
                "31c4d05b91a29c0079034d86dcf99f584d500c55cdf51194978dce2cb6610c17";
            };
            beamDeps  = [
                          ecto_2_1_4
                          exredis_0_2_5
                          mongodb_0_4_0
                          postgrex_1_0_0_rc_1
                        ];

            meta = {
              longDescription = ''A feature toggle library using redis. It
                                allows to roll out to users based on a
                                percentage of users or alternatively to a set of
                                users or user ids'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/securingsincity/molasses";
            };
          } // packageOverrides)
      ) {};

    molasses = molasses_0_3_1;

    molliex_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "molliex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "molliex";
              version = "0.1.0";
              sha256 =
                "34e15112b3b5ee98008238102f8d4678230d127070000e6940223e6b4221c002";
            };

            meta = {
              description = ''Placeholder for Mollie Client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/uberous/molliex";
            };
          } // packageOverrides)
      ) {};

    molliex = molliex_0_1_0;

    mom_0_5_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          poison_3_1_0,
          uuid_1_1_7
        }:
          buildMix ({
            name = "mom";
            version = "0.5.0";
            src = fetchHex {
              pkg = "mom";
              version = "0.5.0";
              sha256 =
                "77f55aeb3630aa979b221209d1c48575ccf870a6ddafd67a94a0594b1241685f";
            };
            beamDeps  = [ poison_3_1_0 uuid_1_1_7 ];

            meta = {
              description = ''Message Oriented Middleware for Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/serverboards/elixir-mom";
            };
          } // packageOverrides)
      ) {};

    mom = mom_0_5_0;

    moment_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "moment";
            version = "0.1.0";
            src = fetchHex {
              pkg = "moment";
              version = "0.1.0";
              sha256 =
                "0cc098c8ba88f768ffd41e4bc4bb45b559d49361a2f8f7a39c686020da3f1842";
            };

            meta = {
              description = ''Parse, validate, manipulate, and display dates in
                            Elixir.'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/atabary/moment";
            };
          } // packageOverrides)
      ) {};

    moment = moment_0_1_0;

    momento_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "momento";
            version = "0.1.2";
            src = fetchHex {
              pkg = "momento";
              version = "0.1.2";
              sha256 =
                "31380b7d9f17c8ebb51b274526fedb61d6c220e6e4d6ebe9bdd8bcaa3586677e";
            };

            meta = {
              longDescription = ''Momento is an Elixir port of Moment.js for
                                the purpose of parsing, validating,
                                manipulating, and formatting dates.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mathewdgardner/momento";
            };
          } // packageOverrides)
      ) {};

    momento = momento_0_1_2;

    mon_handler_1_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, dialyze_0_2_1 }:
          buildMix ({
            name = "mon_handler";
            version = "1.0.2";
            src = fetchHex {
              pkg = "mon_handler";
              version = "1.0.2";
              sha256 =
                "d18942f95750b94e3da1d9fca7a2ea4b1b1d27c017feff76cb109b29bb308f58";
            };
            beamDeps  = [ dialyze_0_2_1 ];

            meta = {
              longDescription = ''A minimal GenServer that monitors a given
                                GenEvent handler. This server will handle exits
                                of the Handler and attempt to re-add it to the
                                manager when unexpected exits occur. Exits for
                                :normal, :shutdown or :swapped reasons will not
                                attempt a re-add to the manager.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tattdcodemonkey/mon_handler";
            };
          } // packageOverrides)
      ) {};

    mon_handler = mon_handler_1_0_2;

    monad_1_0_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "monad";
            version = "1.0.5";
            src = fetchHex {
              pkg = "monad";
              version = "1.0.5";
              sha256 =
                "d8ebe20971160e96bd6cdf11b5e8b5c24b70fddde3d198e5f7c3b5ebfbc78d6e";
            };

            meta = {
              description = ''Monads and do-syntax for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rmies/monad";
            };
          } // packageOverrides)
      ) {};

    monad = monad_1_0_5;

    monadex_1_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "monadex";
            version = "1.1.2";
            src = fetchHex {
              pkg = "monadex";
              version = "1.1.2";
              sha256 =
                "18c952a570015c222c9ba09e9ecf18aab761c0728e946d0af39fc3af6ba5fb1c";
            };

            meta = {
              description = ''Improve pipelines with monads.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rob-brown/MonadEx";
            };
          } // packageOverrides)
      ) {};

    monadex = monadex_1_1_2;

    mondo_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          plug_1_3_5,
          poison_2_2_0
        }:
          buildMix ({
            name = "mondo";
            version = "0.2.0";
            src = fetchHex {
              pkg = "mondo";
              version = "0.2.0";
              sha256 =
                "8e4ad2d98134b9a3e2e732f244def736f61b9556f1cfe290278e75e2f50ec5eb";
            };
            beamDeps  = [ httpoison_0_11_2 plug_1_3_5 poison_2_2_0 ];

            meta = {
              description = ''An Elixir client for the Mondo API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/stevedomin/mondo_elixir";
            };
          } // packageOverrides)
      ) {};

    mondo = mondo_0_2_0;

    monetized_0_5_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          decimal_1_3_1,
          ecto_2_1_4,
          poison_1_0_2
        }:
          buildMix ({
            name = "monetized";
            version = "0.5.0";
            src = fetchHex {
              pkg = "monetized";
              version = "0.5.0";
              sha256 =
                "2e64927993753d0cbfc84a9051a7838a900d4fb52a93c42fbcb89d6b17a7303d";
            };
            beamDeps  = [ decimal_1_3_1 ecto_2_1_4 poison_1_0_2 ];

            meta = {
              description = ''A lightweight solution for handling and storing
                            money.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/theocodes/monetized";
            };
          } // packageOverrides)
      ) {};

    monetized = monetized_0_5_0;

    monex_0_1_6 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "monex";
            version = "0.1.6";
            src = fetchHex {
              pkg = "monex";
              version = "0.1.6";
              sha256 =
                "3a62fe00ce874f8022d9889ddcb8a5b306d7884794c214c724d838292904f20c";
            };

            meta = {
              description = ''Monadic types collection Currently implemented: *
                            Option * Result'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/youroff/monex";
            };
          } // packageOverrides)
      ) {};

    monex = monex_0_1_6;

    money_1_2_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_1_0_1,
          phoenix_html_2_9_3
        }:
          buildMix ({
            name = "money";
            version = "1.2.1";
            src = fetchHex {
              pkg = "money";
              version = "1.2.1";
              sha256 =
                "a45f2c2ffd41b1b118c9bc46076977165fe9b81f322a7fbc38817641d01ab548";
            };
            beamDeps  = [ ecto_1_0_1 phoenix_html_2_9_3 ];

            meta = {
              longDescription = ''Elixir library for working with Money safer,
                                easier, and fun, is an interpretation of the
                                Fowler`s Money pattern in fun.prog.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/liuggio/money";
            };
          } // packageOverrides)
      ) {};

    money = money_1_2_1;

    moneyex_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "moneyex";
            version = "0.1.1";
            src = fetchHex {
              pkg = "moneyex";
              version = "0.1.1";
              sha256 =
                "bbaa9ead237a63c88e27997916e617bfb1fc2bc7adba4eecd15dd7ed62ce5fae";
            };

            meta = {
              description = ''A library for working with money in elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/alvarolizama/moneyex";
            };
          } // packageOverrides)
      ) {};

    moneyex = moneyex_0_1_1;

    mongo_0_5_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, bson_0_4_4 }:
          buildMix ({
            name = "mongo";
            version = "0.5.4";
            src = fetchHex {
              pkg = "mongo";
              version = "0.5.4";
              sha256 =
                "fb6e0ed11bd2f193e12d0f905eb1968525b52dc99441ecbbf90c7745df246ed8";
            };
            beamDeps  = [ bson_0_4_4 ];

            meta = {
              description = ''MongoDB driver for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/checkiz/elixir-mongo";
            };
          } // packageOverrides)
      ) {};

    mongo = mongo_0_5_4;

    mongo_ecto_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_0_rc_5,
          mongodb_0_3_0
        }:
          buildMix ({
            name = "mongo_ecto";
            version = "0.2.0";
            src = fetchHex {
              pkg = "mongo_ecto";
              version = "0.2.0";
              sha256 =
                "a9fca274a8622a984b2e04351cbad572448e51cd25068b95bbd3c68298fce016";
            };
            beamDeps  = [ ecto_2_1_0_rc_5 mongodb_0_3_0 ];

            meta = {
              description = ''MongoDB adapter for Ecto 2'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/etroynov/mongo_ecto";
            };
          } // packageOverrides)
      ) {};

    mongo_ecto = mongo_ecto_0_2_0;

    mongodb_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          connection_1_0_4,
          db_connection_1_1_2
        }:
          buildMix ({
            name = "mongodb";
            version = "0.3.0";
            src = fetchHex {
              pkg = "mongodb";
              version = "0.3.0";
              sha256 =
                "ab8077d1cfeab7e6734222af3803aaf06f00dc69d3eac8514b2cab2daa137609";
            };
            beamDeps  = [ connection_1_0_4 db_connection_1_1_2 ];

            meta = {
              description = ''MongoDB driver for Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ankhers/mongodb";
            };
          } // packageOverrides)
      ) {};

    mongodb_0_4_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          connection_1_0_4,
          db_connection_1_1_2
        }:
          buildMix ({
            name = "mongodb";
            version = "0.4.0";
            src = fetchHex {
              pkg = "mongodb";
              version = "0.4.0";
              sha256 =
                "ce562c52675052dda7cdb17431df480c8fb8ae18a4e383ce53a4ba0af0371ee0";
            };
            beamDeps  = [ connection_1_0_4 db_connection_1_1_2 ];

            meta = {
              description = ''MongoDB driver for Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ankhers/mongodb";
            };
          } // packageOverrides)
      ) {};

    mongodb = mongodb_0_4_0;

    mongodb_ecto_0_1_5 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_1_0_7,
          mongodb_0_3_0
        }:
          buildMix ({
            name = "mongodb_ecto";
            version = "0.1.5";
            src = fetchHex {
              pkg = "mongodb_ecto";
              version = "0.1.5";
              sha256 =
                "a9e5bba0f62aa4db01bbc9c0d4e03e17fd0a5458889a5f5c4186f2e1a452cd71";
            };
            beamDeps  = [ ecto_1_0_7 mongodb_0_3_0 ];

            meta = {
              description = ''MongoDB adapter for Ecto'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/michalmuskala/mongodb_ecto";
            };
          } // packageOverrides)
      ) {};

    mongodb_ecto = mongodb_ecto_0_1_5;

    mongoman_0_3_6 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_3_1_0 }:
          buildMix ({
            name = "mongoman";
            version = "0.3.6";
            src = fetchHex {
              pkg = "mongoman";
              version = "0.3.6";
              sha256 =
                "54cd5c5a892945f1078f16956b21d76ec8bf47d3d031c832ee9d7a2dd18f14e5";
            };
            beamDeps  = [ poison_3_1_0 ];

            meta = {
              description = ''Configures and starts local or distributed
                            MongoDB clusters'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/vertify/mongoman";
            };
          } // packageOverrides)
      ) {};

    mongoman = mongoman_0_3_6;

    mongox_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          connection_1_0_4,
          poolboy_1_5_1
        }:
          buildMix ({
            name = "mongox";
            version = "0.2.0";
            src = fetchHex {
              pkg = "mongox";
              version = "0.2.0";
              sha256 =
                "be17dc310ba225dc1470b62f71065f2e7298c7ad498341e49f54ed05ffe2cc34";
            };
            beamDeps  = [ connection_1_0_4 poolboy_1_5_1 ];

            meta = {
              description = ''MongoDB driver for Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/emerleite/mongox";
            };
          } // packageOverrides)
      ) {};

    mongox = mongox_0_2_0;

    mongox_ecto_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_0_0_rc_6,
          mongox_0_2_0
        }:
          buildMix ({
            name = "mongox_ecto";
            version = "0.2.0";
            src = fetchHex {
              pkg = "mongox_ecto";
              version = "0.2.0";
              sha256 =
                "0fc8e069b6a1f98ffaac68d43060ff6dc7ea36d288e6d9ecb42f6801c5690a61";
            };
            beamDeps  = [ ecto_2_0_0_rc_6 mongox_0_2_0 ];

            meta = {
              description = ''MongoDB adapter for Ecto'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/emerleite/mongox_ecto";
            };
          } // packageOverrides)
      ) {};

    mongox_ecto = mongox_ecto_0_2_0;

    monk_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "monk";
            version = "0.1.3";
            src = fetchHex {
              pkg = "monk";
              version = "0.1.3";
              sha256 =
                "35e6a2eea7090612fa25a003fb95ac120f27087f203445bbc33ac18682ddd724";
            };

            meta = {
              description = ''Monk helps to distinguish good from evil with an
                            simple ok/error monad'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/niahoo/monk";
            };
          } // packageOverrides)
      ) {};

    monk = monk_0_1_3;

    monzo_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          plug_1_3_5,
          poison_2_2_0
        }:
          buildMix ({
            name = "monzo";
            version = "0.3.0";
            src = fetchHex {
              pkg = "monzo";
              version = "0.3.0";
              sha256 =
                "3c0fe97ccf3a13e2de600dbea28609e8a6338cdd81a437edca7f4a5a9d17e612";
            };
            beamDeps  = [ httpoison_0_11_2 plug_1_3_5 poison_2_2_0 ];

            meta = {
              description = ''An Elixir client for the Monzo API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/stevedomin/monzo_elixir";
            };
          } // packageOverrides)
      ) {};

    monzo = monzo_0_3_0;

    mopidy_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_3_0_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "mopidy";
            version = "0.3.0";
            src = fetchHex {
              pkg = "mopidy";
              version = "0.3.0";
              sha256 =
                "5a5d5068d47d42aa950298e515dbe410b58eeecda921604a318523f43c376198";
            };
            beamDeps  = [ httpotion_3_0_2 poison_2_2_0 ];

            meta = {
              description = ''A Mopidy client library for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/trestrantham/mopidy";
            };
          } // packageOverrides)
      ) {};

    mopidy = mopidy_0_3_0;

    morph_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "morph";
            version = "0.1.0";
            src = fetchHex {
              pkg = "morph";
              version = "0.1.0";
              sha256 =
                "a20a6bfda56cb8f2d9904e2ea4b2b0a4159ab2692181919f6eb4fe9f52abf3f2";
            };

            meta = {
              description = ''Lightweight string transformations for Elixir.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/cmoncrief/elixir-morph";
            };
          } // packageOverrides)
      ) {};

    morph = morph_0_1_0;

    morphix_0_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "morphix";
            version = "0.0.4";
            src = fetchHex {
              pkg = "morphix";
              version = "0.0.4";
              sha256 =
                "a1405a47e3b1b95f95bf73678a6c6855821d018c1445cf33be8271387b0aa8cd";
            };

            meta = {
              longDescription = ''Morphix is a small package of convenience
                                methods for working with Maps, Tuples, and
                                Lists.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/philosodad/morphix.git";
            };
          } // packageOverrides)
      ) {};

    morphix = morphix_0_0_4;

    morse_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "morse";
            version = "1.0.1";
            src = fetchHex {
              pkg = "morse";
              version = "1.0.1";
              sha256 =
                "42f8a1cc1817003de0e003dbb57813cb479f0d74d9354ade82463d17dc1bc10e";
            };

            meta = {
              description = ''Morse code encoder and decoder'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sotojuan/morse";
            };
          } // packageOverrides)
      ) {};

    morse = morse_1_0_1;

    mortgage_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mortgage";
            version = "0.0.2";
            src = fetchHex {
              pkg = "mortgage";
              version = "0.0.2";
              sha256 =
                "fbd6e7dcf2d8213b4b1ab3b00904482a6aadf32625245bdc02eb76b7cd265173";
            };

            meta = {
              description = ''A set of functions for working with mortgages and
                            mortgage notes.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/geolessel/mortgage";
            };
          } // packageOverrides)
      ) {};

    mortgage = mortgage_0_0_2;

    motor_hat_0_6_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, elixir_ale_0_5_2 }:
          buildMix ({
            name = "motor_hat";
            version = "0.6.1";
            src = fetchHex {
              pkg = "motor_hat";
              version = "0.6.1";
              sha256 =
                "f555e0ec59ee95d4dc6c14cbc3d9d12014f9bd7882c776dde715b9b1674ffa79";
            };
            beamDeps  = [ elixir_ale_0_5_2 ];

            meta = {
              longDescription = ''Elixir implementation of the pyhton motor_hat
                                library from Adafruit for there motor_hat board.
                                Library:
                                https://github.com/adafruit/Adafruit-Motor-HAT-Python-Library
                                Board: https://www.adafruit.com/product/2348'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/matthewphilyaw/motor_hat";
            };
          } // packageOverrides)
      ) {};

    motor_hat = motor_hat_0_6_1;

    movi_0_1_1 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, nerves_uart_0_1_2
        }:
          buildMix ({
            name = "movi";
            version = "0.1.1";
            src = fetchHex {
              pkg = "movi";
              version = "0.1.1";
              sha256 =
                "9816a9d9f066ef55b6cacc73c37efe3054a764fd9dda6e3fd730c19f08476149";
            };
            beamDeps  = [ nerves_uart_0_1_2 ];

            meta = {
              description = ''A library for communicating with the Audeme
                            MOVI™ Voice Control Shield'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/NationalAssociationOfRealtors/movi";
            };
          } // packageOverrides)
      ) {};

    movi = movi_0_1_1;

    moxie_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "moxie";
            version = "0.0.1";
            src = fetchHex {
              pkg = "moxie";
              version = "0.0.1";
              sha256 =
                "193e18ce0888f01fe2b43d0dcf79af5f48e50eba3a73609703cb4c04bea2ae46";
            };

            meta = {
               license = stdenv.lib.licenses.free;
              homepage = "https://github.com/molossus/moxie";
            };
          } // packageOverrides)
      ) {};

    moxie = moxie_0_0_1;

    mpinyin_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mpinyin";
            version = "0.0.2";
            src = fetchHex {
              pkg = "mpinyin";
              version = "0.0.2";
              sha256 =
                "1de0911391e6a76a91166f5210d4254165692ea28c00d4f153763d0a5757cb92";
            };

            meta = {
              description = ''Pinyin module for Elixir. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Hor/mpinyin";
            };
          } // packageOverrides)
      ) {};

    mpinyin = mpinyin_0_0_2;

    mpower_1_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_8_3,
          poison_2_2_0
        }:
          buildMix ({
            name = "mpower";
            version = "1.0.1";
            src = fetchHex {
              pkg = "mpower";
              version = "1.0.1";
              sha256 =
                "d08a6ec51f1da683507ed08d0787a726eb3e56dd16084fffc279a5391fa02014";
            };
            beamDeps  = [ httpoison_0_8_3 poison_2_2_0 ];

            meta = {
              description = ''Elixir wrapper for MPowerPayments API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/abakhi/mpower";
            };
          } // packageOverrides)
      ) {};

    mpower = mpower_1_0_1;

    mq_0_4_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "mq";
            version = "0.4.0";
            src = fetchHex {
              pkg = "mq";
              version = "0.4.0";
              sha256 =
                "79c3eab0ea43a68a410dd05214a5cc335ed0ef040625743375a24c6ef018a3c7";
            };

            meta = {
              description = ''Voxoz MQ'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/voxoz/mq";
            };
          } // packageOverrides)
      ) {};

    mq = mq_0_4_0;

    mqtt_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mqtt";
            version = "0.2.1";
            src = fetchHex {
              pkg = "mqtt";
              version = "0.2.1";
              sha256 =
                "35541de432b69785e70eab69a3c6949f1b3a76b3b17ecd97afd54d74f7854924";
            };

            meta = {
              description = ''Erlang/Elixir low level MQTT protocol
                            implementation'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/kopera/erlang-mqtt";
            };
          } // packageOverrides)
      ) {};

    mqtt = mqtt_0_2_1;

    mr_roboto_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, httpoison_0_8_3 }:
          buildMix ({
            name = "mr_roboto";
            version = "1.0.0";
            src = fetchHex {
              pkg = "mr_roboto";
              version = "1.0.0";
              sha256 =
                "80c5af8f07bd85f28b60e350a5cfc92d1a5c2bcde9a0c3d93fcaa378a033a371";
            };
            beamDeps  = [ httpoison_0_8_3 ];

            meta = {
              description = ''A simple robots.txt service'';

            };
          } // packageOverrides)
      ) {};

    mr_roboto = mr_roboto_1_0_0;

    mr_t_0_6_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, exfswatch_0_2_1 }:
          buildMix ({
            name = "mr_t";
            version = "0.6.0";
            src = fetchHex {
              pkg = "mr_t";
              version = "0.6.0";
              sha256 =
                "daff99c127ef18ec7687b66978c0a81cd602356d9cbc9f62e8095060f15419c5";
            };
            beamDeps  = [ exfswatch_0_2_1 ];

            meta = {
              description = ''Instant code-reloader and test runner for Elixir
                            in one package'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ruby2elixir/mr_t";
            };
          } // packageOverrides)
      ) {};

    mr_t = mr_t_0_6_0;

    ms_luis_1_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ivar_0_3_1,
          poison_3_1_0
        }:
          buildMix ({
            name = "ms_luis";
            version = "1.0.0";
            src = fetchHex {
              pkg = "ms_luis";
              version = "1.0.0";
              sha256 =
                "f51fda0bbfd21675d49bdd823cbf5bfdc18b57dfd6db72af0e0afc101a42df82";
            };
            beamDeps  = [ ivar_0_3_1 poison_3_1_0 ];

            meta = {
              description = ''A small library that can send requests to the
                            Microsoft LUIS service.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/swelham/ms_luis";
            };
          } // packageOverrides)
      ) {};

    ms_luis = ms_luis_1_0_0;

    msgpack_0_3_5 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "msgpack";
            version = "0.3.5";
            src = fetchHex {
              pkg = "msgpack";
              version = "0.3.5";
              sha256 =
                "7985c0d666853ee553210329e76c3a356d18a7990b5c1f412da0b68100fc1b23";
            };

            meta = {
              description = ''MessagePack serializer/deserializer'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "http://msgpack.org";
            };
          } // packageOverrides)
      ) {};

    msgpack_0_6_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "msgpack";
            version = "0.6.0";
            src = fetchHex {
              pkg = "msgpack";
              version = "0.6.0";
              sha256 =
                "07d0fdab2f3874fc1a4e41259aff98cc52dac6011e327cf181a07a584f2e4084";
            };

            meta = {
              description = ''MessagePack serializer/deserializer'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "http://msgpack.org";
            };
          } // packageOverrides)
      ) {};

    msgpack_0_7_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "msgpack";
            version = "0.7.0";
            src = fetchHex {
              pkg = "msgpack";
              version = "0.7.0";
              sha256 =
                "4649353da003e6f438d105e4b1e0f17757f6f5ec8687a6f30875ff3ac4ce2a51";
            };

            meta = {
              description = ''MessagePack serializer/deserializer'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "http://msgpack.org";
            };
          } // packageOverrides)
      ) {};

    msgpack = msgpack_0_7_0;

    msgpack_rpc_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, msgpax_0_8_2 }:
          buildMix ({
            name = "msgpack_rpc";
            version = "0.1.2";
            src = fetchHex {
              pkg = "msgpack_rpc";
              version = "0.1.2";
              sha256 =
                "34eff7cf53f08141d52fd3d4b8446c3bf620f11ddf82e45d2aea3ce5df4ad4fb";
            };
            beamDeps  = [ msgpax_0_8_2 ];

            meta = {
              description = ''Tiny STDIO port wrapper for Msgpax RPC'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/dm1try/msgpack_rpc";
            };
          } // packageOverrides)
      ) {};

    msgpack_rpc = msgpack_rpc_0_1_2;

    msgpack_rpc_erlang_0_6_4 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          msgpack_0_3_5,
          ranch_1_2_1
        }:
          buildRebar3 ({
            name = "msgpack_rpc_erlang";
            version = "0.6.4";
            src = fetchHex {
              pkg = "msgpack_rpc_erlang";
              version = "0.6.4";
              sha256 =
                "f95100b51109db888ca4ff57041df5822e53feaf1b72743531ccad3ebbd04b6b";
            };

            beamDeps  = [ msgpack_0_3_5 ranch_1_2_1 ];

            meta = {
              description = ''MessagePack RPC client/server suite'';
              license = stdenv.lib.licenses.apsl20;
              homepage =
                "https://github.com/stampery/msgpack-rpc-erlang/tree/hexpm";
            };
          } // packageOverrides)
      ) {};

    msgpack_rpc_erlang = msgpack_rpc_erlang_0_6_4;

    msgpax_0_8_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "msgpax";
            version = "0.8.2";
            src = fetchHex {
              pkg = "msgpax";
              version = "0.8.2";
              sha256 =
                "aa0baa382383160d90275a1b5d8f72c457a2feed89cbb1bd080a5c3821389507";
            };

            meta = {
              longDescription = ''This library provides an API for serializing
                                and de-serializing Elixir terms using the
                                MessagePack format.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/lexmag/msgpax";
            };
          } // packageOverrides)
      ) {};

    msgpax_1_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, plug_1_3_5 }:
          buildMix ({
            name = "msgpax";
            version = "1.1.0";
            src = fetchHex {
              pkg = "msgpax";
              version = "1.1.0";
              sha256 =
                "3376a01d1abf74cd3543036e85f33f7af0e80c044699abd30f6c576c043823d8";
            };
            beamDeps  = [ plug_1_3_5 ];

            meta = {
              longDescription = ''This library provides an API for serializing
                                and de-serializing Elixir terms using the
                                MessagePack format.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/lexmag/msgpax";
            };
          } // packageOverrides)
      ) {};

    msgpax_2_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, plug_1_3_5 }:
          buildMix ({
            name = "msgpax";
            version = "2.0.0";
            src = fetchHex {
              pkg = "msgpax";
              version = "2.0.0";
              sha256 =
                "2c4c7a075c59c91706112efc74817f1c8741c595178052c9715f410cf460517e";
            };
            beamDeps  = [ plug_1_3_5 ];

            meta = {
              longDescription = ''This library provides an API for serializing
                                and de-serializing Elixir terms using the
                                MessagePack format.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/lexmag/msgpax";
            };
          } // packageOverrides)
      ) {};

    msgpax = msgpax_2_0_0;

    mson_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, earmark_1_2_2 }:
          buildMix ({
            name = "mson";
            version = "0.1.0";
            src = fetchHex {
              pkg = "mson";
              version = "0.1.0";
              sha256 =
                "b96aaa825b091cf95410ec729cce67ac5a2b333579e9e341e36de2e6a00f9c4d";
            };
            beamDeps  = [ earmark_1_2_2 ];

            meta = {
              description = ''Define your structs in Markdown together with
                            documentation'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tverlaan/mson";
            };
          } // packageOverrides)
      ) {};

    mson = mson_0_1_0;

    mssql_ecto_0_1_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_4,
          mssqlex_0_6_7
        }:
          buildMix ({
            name = "mssql_ecto";
            version = "0.1.4";
            src = fetchHex {
              pkg = "mssql_ecto";
              version = "0.1.4";
              sha256 =
                "2124d99346842790633f751c637b07911c25ef2defa9eef116caa3b8cb44d28b";
            };
            beamDeps  = [ ecto_2_1_4 mssqlex_0_6_7 ];

            meta = {
              description = ''Ecto Adapter for Microsoft SQL Server. Using
                            Mssqlex.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/findmypast-oss/mssql_ecto";
            };
          } // packageOverrides)
      ) {};

    mssql_ecto = mssql_ecto_0_1_4;

    mssqlex_0_6_7 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          db_connection_1_1_2,
          decimal_1_3_1
        }:
          buildMix ({
            name = "mssqlex";
            version = "0.6.7";
            src = fetchHex {
              pkg = "mssqlex";
              version = "0.6.7";
              sha256 =
                "eac22fdbc556fc769df7ad317a0c3a8a6a7c5d69f01129b74609b6fdf36fb643";
            };
            beamDeps  = [ db_connection_1_1_2 decimal_1_3_1 ];

            meta = {
              description = ''Adapter to Microsoft SQL Server. Using
                            DBConnection and ODBC.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/findmypast-oss/mssqlex";
            };
          } // packageOverrides)
      ) {};

    mssqlex = mssqlex_0_6_7;

    mstore_0_3_3 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          ebitmap_0_1_5,
          mmath_0_2_17,
          trie_1_6_0
        }:
          buildRebar3 ({
            name = "mstore";
            version = "0.3.3";
            src = fetchHex {
              pkg = "mstore";
              version = "0.3.3";
              sha256 =
                "34d37fc5d47507c2e48f7792d3bdc43cd9d4863f282d462a1deb1b604ac7fd8f";
            };

            beamDeps  = [ ebitmap_0_1_5 mmath_0_2_17 trie_1_6_0 ];

            meta = {
              description = ''Fast, flat metric store.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dalmatinerdb/mstore";
            };
          } // packageOverrides)
      ) {};

    mstore = mstore_0_3_3;

    mt940_1_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          decimal_1_3_0,
          timex_3_0_5,
          tzdata_0_5_3
        }:
          buildMix ({
            name = "mt940";
            version = "1.0.0";
            src = fetchHex {
              pkg = "mt940";
              version = "1.0.0";
              sha256 =
                "19f2cb4e258df7de9c1fd10133299361d7651f2856d859b7f83ffa722646c020";
            };
            beamDeps  = [ decimal_1_3_0 timex_3_0_5 tzdata_0_5_3 ];

            meta = {
              description = ''MT940/MT942 parser for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/my-flow/mt940";
            };
          } // packageOverrides)
      ) {};

    mt940_1_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          decimal_1_3_1,
          timex_3_1_15,
          tzdata_0_5_3
        }:
          buildMix ({
            name = "mt940";
            version = "1.1.2";
            src = fetchHex {
              pkg = "mt940";
              version = "1.1.2";
              sha256 =
                "fe19b61ae5d7ee9eb203e512f3db1ca11245778c997e9246545787fb95360e65";
            };
            beamDeps  = [ decimal_1_3_1 timex_3_1_15 tzdata_0_5_3 ];

            meta = {
              description = ''MT940/MT942 parser for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/my-flow/mt940";
            };
          } // packageOverrides)
      ) {};

    mt940 = mt940_1_1_2;

    mtg_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_10_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "mtg";
            version = "0.2.0";
            src = fetchHex {
              pkg = "mtg";
              version = "0.2.0";
              sha256 =
                "2a3977459007bb33aaacfedbba97e1857d5dda24fc20d72110e29319788d1629";
            };
            beamDeps  = [ httpoison_0_10_0 poison_3_1_0 ];

            meta = {
              description = ''Client for magicthegathering.io'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    mtg = mtg_0_2_0;

    mtg_api_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_10_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "mtg_api";
            version = "0.1.0";
            src = fetchHex {
              pkg = "mtg_api";
              version = "0.1.0";
              sha256 =
                "7f6901dea16dea6a7a4e3935d270446b58948481e1d31dfff730d6d2afa3a8a1";
            };
            beamDeps  = [ httpoison_0_10_0 poison_3_1_0 ];

            meta = {
              description = ''Magic the Gathering API Wrapper'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/naps62/mtg-sdk-elixir";
            };
          } // packageOverrides)
      ) {};

    mtg_api = mtg_api_0_1_0;

    mtproto_57_3_2_beta = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          connection_1_0_4,
          tl_57_1_0_rc
        }:
          buildMix ({
            name = "mtproto";
            version = "57.3.2-beta";
            src = fetchHex {
              pkg = "mtproto";
              version = "57.3.2-beta";
              sha256 =
                "d1b6ffa7d911d6caa2e5d2e0d91b815c89658a7c36e63334c366cf3738157725";
            };
            beamDeps  = [ connection_1_0_4 tl_57_1_0_rc ];

            meta = {
              description = ''MTProto transport for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ccsteam/mtproto";
            };
          } // packageOverrides)
      ) {};

    mtproto = mtproto_57_3_2_beta;

    mtx_1_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "mtx";
            version = "1.0.0";
            src = fetchHex {
              pkg = "mtx";
              version = "1.0.0";
              sha256 =
                "3bdcb209fe3cdfc5a6b5b95f619ecd123b7ee1d9203ace2178c8ff73be5bb90f";
            };

            meta = {
              description = ''Metrics Client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/synrc/mtx";
            };
          } // packageOverrides)
      ) {};

    mtx = mtx_1_0_0;

    mudblood_0_0_7 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_4,
          phoenix_1_3_0_rc_2
        }:
          buildMix ({
            name = "mudblood";
            version = "0.0.7";
            src = fetchHex {
              pkg = "mudblood";
              version = "0.0.7";
              sha256 =
                "0f5db59131b9899ddefa98d88924061025c95be2f01c2fdef345ce73877051d0";
            };
            beamDeps  = [ ecto_2_1_4 phoenix_1_3_0_rc_2 ];

            meta = {
              description = ''A DRY way to get CRUD.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/onyxrev/mudblood";
            };
          } // packageOverrides)
      ) {};

    mudblood = mudblood_0_0_7;

    multidef_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "multidef";
            version = "0.2.1";
            src = fetchHex {
              pkg = "multidef";
              version = "0.2.1";
              sha256 =
                "719dfdb9206ea34fc7b49c282b30adab752f9d1efb22678907d54fa0b54c50c6";
            };

            meta = {
              longDescription = ''Lets you define multiple heads for the same
                                function: defmodule Test do import MultiDef mdef
                                fred do { :init, val } -> fred {:double, val} {
                                :double, val } -> IO.puts(val*2) a, b -> a+b end
                                end IO.inspect Test.fred 1, 2 #=> 3 IO.inspect
                                Test.fred { :init, 4 } #=> 8 '';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/pragdave/mdef";
            };
          } // packageOverrides)
      ) {};

    multidef = multidef_0_2_1;

    multipartable_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "multipartable";
            version = "0.1.0";
            src = fetchHex {
              pkg = "multipartable";
              version = "0.1.0";
              sha256 =
                "75afb8341c2c51ac24bf6cf8eef4260fd1b22382fbf3815523f6267a363f439b";
            };

            meta = {
              description = ''Build a simple or nested multipart form body'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/peiyee/elixir-multipartable";
            };
          } // packageOverrides)
      ) {};

    multipartable = multipartable_0_1_0;

    multiplex_0_1_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, phoenix_1_3_0_rc_2
        }:
          buildMix ({
            name = "multiplex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "multiplex";
              version = "0.1.0";
              sha256 =
                "6a7fa66ef9ae2a2073164e8c0afef962a66d7c5503e5cbdc6f47fd722d02aa3b";
            };
            beamDeps  = [ phoenix_1_3_0_rc_2 ];

            meta = {
              description = ''Phoenix router macro to dispatch multiple HTTP
                            methods to a Plug'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/christopheradams/multiplex";
            };
          } // packageOverrides)
      ) {};

    multiplex = multiplex_0_1_0;

    multiset_0_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "multiset";
            version = "0.0.4";
            src = fetchHex {
              pkg = "multiset";
              version = "0.0.4";
              sha256 =
                "f713b5102d17963fc516e0017725d716dade0b1fec979f0e3a53b8d203748c45";
            };

            meta = {
              description = ''Multisets for Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/hilverd/multiset-elixir";
            };
          } // packageOverrides)
      ) {};

    multiset = multiset_0_0_4;

    multiverse_0_4_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          plug_1_3_5,
          timex_3_1_15
        }:
          buildMix ({
            name = "multiverse";
            version = "0.4.3";
            src = fetchHex {
              pkg = "multiverse";
              version = "0.4.3";
              sha256 =
                "54ec506747ccc6d0c3587b01efe2cca28f530f1a3f3d0e1e3cfb321e89b475f7";
            };
            beamDeps  = [ plug_1_3_5 timex_3_1_15 ];

            meta = {
              longDescription = ''Plug that allows to add version compatibility
                                layers via API request/response Gateways.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Nebo15/multiverse";
            };
          } // packageOverrides)
      ) {};

    multiverse = multiverse_0_4_3;

    murdoch_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          goth_0_2_1,
          httpoison_0_8_3,
          poison_1_5_2
        }:
          buildMix ({
            name = "murdoch";
            version = "0.0.1";
            src = fetchHex {
              pkg = "murdoch";
              version = "0.0.1";
              sha256 =
                "77ec44ca76d6b4a14df7222104a36cb29ed25f7d52fb3ffe30807ddc82a2d9ad";
            };
            beamDeps  = [ goth_0_2_1 httpoison_0_8_3 poison_1_5_2 ];

            meta = {
              longDescription = ''A library for interacting with Google Cloud
                                Pub/Sub (PubSub). Supports both publication and
                                pull subscription'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/peburrows/murdoch";
            };
          } // packageOverrides)
      ) {};

    murdoch = murdoch_0_0_1;

    murk_0_5_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "murk";
            version = "0.5.1";
            src = fetchHex {
              pkg = "murk";
              version = "0.5.1";
              sha256 =
                "74e4c41b52938759a45926c5f1853242fb6c49985c20b210d6dfe54f917c3347";
            };

            meta = {
              description = ''Murk is an Elixir data type validation
                            library.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/kwrooijen/murk";
            };
          } // packageOverrides)
      ) {};

    murk = murk_0_5_1;

    murmur_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "murmur";
            version = "0.2.1";
            src = fetchHex {
              pkg = "murmur";
              version = "0.2.1";
              sha256 =
                "7e38b2f136d4e8039abb88f6cbdf50c939408d3819be4b18b639a968ee9c2bce";
            };

            meta = {
              longDescription = ''Murmur is a pure Elixir implementation of the
                                non-cryptographic hash Murmur3. It aims to
                                implement the x86_32bit, x86_128bit and
                                x64_128bit variants.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gmcabrita/murmur";
            };
          } // packageOverrides)
      ) {};

    murmur_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "murmur";
            version = "1.0.0";
            src = fetchHex {
              pkg = "murmur";
              version = "1.0.0";
              sha256 =
                "5e81af1fe3c7a166830e5a695e2f2253a5255888c2f510d206d103914b4e28da";
            };

            meta = {
              longDescription = ''Murmur is a pure Elixir implementation of the
                                non-cryptographic hash Murmur3. It aims to
                                implement the x86_32bit, x86_128bit and
                                x64_128bit variants.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gmcabrita/murmur";
            };
          } // packageOverrides)
      ) {};

    murmur = murmur_1_0_0;

    musiccast_0_2_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          html_entities_0_3_0,
          httpoison_0_11_2,
          plug_1_3_5,
          poison_3_1_0,
          sweet_xml_0_6_5
        }:
          buildMix ({
            name = "musiccast";
            version = "0.2.2";
            src = fetchHex {
              pkg = "musiccast";
              version = "0.2.2";
              sha256 =
                "af22cdf7e68dc96190eaa2a96c07e2024e98159c98db6deb73b51501130cd38c";
            };
            beamDeps  = [
                          html_entities_0_3_0
                          httpoison_0_11_2
                          plug_1_3_5
                          poison_3_1_0
                          sweet_xml_0_6_5
                        ];

            meta = {
              description = ''Yamaha MusicCast™ implementation'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/almightycouch/musiccast";
            };
          } // packageOverrides)
      ) {};

    musiccast = musiccast_0_2_2;

    mustache_0_3_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mustache";
            version = "0.3.1";
            src = fetchHex {
              pkg = "mustache";
              version = "0.3.1";
              sha256 =
                "8dc92b9b92a0d7449628f4fc981f8018a16a5b8c9907249e59db461482dac143";
            };

            meta = {
              description = ''Mustache templates for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/schultyy/Mustache.ex";
            };
          } // packageOverrides)
      ) {};

    mustache = mustache_0_3_1;

    mustachex_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mustachex";
            version = "0.0.1";
            src = fetchHex {
              pkg = "mustachex";
              version = "0.0.1";
              sha256 =
                "356a7268e609c77a5b02d4ea4d98a189684a07709ec7db2dafd2b34da79bb402";
            };

            meta = {
              description = ''Mustache for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jui/mustachex";
            };
          } // packageOverrides)
      ) {};

    mustachex = mustachex_0_0_1;

    mutant_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mutant";
            version = "0.0.3";
            src = fetchHex {
              pkg = "mutant";
              version = "0.0.3";
              sha256 =
                "25586e3ae1d61e969350154a7c788f8a25234176cb4e2fe6fae8d92771c9f0e6";
            };

            meta = {
              description = ''Now you can create mutable structs, use this with
                            care and only as a last resort'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/mrkaspa/Mutant";
            };
          } // packageOverrides)
      ) {};

    mutant = mutant_0_0_3;

    mutation_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mutation";
            version = "0.1.0";
            src = fetchHex {
              pkg = "mutation";
              version = "0.1.0";
              sha256 =
                "811a0590dc1eda89fd047097d3b237233935c31e7e6d40fdc5bc5ac96c90fd2a";
            };

            meta = {
              description = ''Mutation testing for Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/jordipolo/mutation";
            };
          } // packageOverrides)
      ) {};

    mutation = mutation_0_1_0;

    mws_client_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          csv_1_4_4,
          elixir_xml_to_map_0_1_1,
          httpoison_0_9_2,
          inflex_1_7_0
        }:
          buildMix ({
            name = "mws_client";
            version = "0.0.1";
            src = fetchHex {
              pkg = "mws_client";
              version = "0.0.1";
              sha256 =
                "5462b398eeed662ed61fb9aa3fc59f8c8de029688b2dce677602a84873df3bd7";
            };
            beamDeps  = [
                          csv_1_4_4
                          elixir_xml_to_map_0_1_1
                          httpoison_0_9_2
                          inflex_1_7_0
                        ];

            meta = {
              description = ''An Amazon MWS API client in Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/homanchou/elixir-amazon-mws-client";
            };
          } // packageOverrides)
      ) {};

    mws_client = mws_client_0_0_1;

    mx_tool_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mx_tool";
            version = "0.1.0";
            src = fetchHex {
              pkg = "mx_tool";
              version = "0.1.0";
              sha256 =
                "8406504ec7ab312611357a56e0f26b2b53beb57dd2215834487d3581e42cdafa";
            };

            meta = {
              description = ''Find the mail exchanger for a given hostname.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nsweeting/mx_tool";
            };
          } // packageOverrides)
      ) {};

    mx_tool = mx_tool_0_1_0;

    my_sports_feeds_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cachex_2_1_0,
          httpoison_0_11_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "my_sports_feeds";
            version = "0.1.1";
            src = fetchHex {
              pkg = "my_sports_feeds";
              version = "0.1.1";
              sha256 =
                "b6b2b510aee7bd30826c91b1411571b8fed8de238ac45f6a7b5ad1785950a59f";
            };
            beamDeps  = [ cachex_2_1_0 httpoison_0_11_2 poison_2_2_0 ];

            meta = {
              description = ''A HTTP API wrapper for mysportsfeeds.com'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dustinsmith1024/my_sports_feeds";
            };
          } // packageOverrides)
      ) {};

    my_sports_feeds = my_sports_feeds_0_1_1;

    mynumber_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mynumber";
            version = "1.0.0";
            src = fetchHex {
              pkg = "mynumber";
              version = "1.0.0";
              sha256 =
                "9d95bd6c7a2178c1fe3b9dc2712a6d9567885389a1a20b27518ea6067deeb0f7";
            };

            meta = {
              description = ''Mynumber Validation for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cncgl/elixir_mynumber";
            };
          } // packageOverrides)
      ) {};

    mynumber = mynumber_1_0_0;

    mysql_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "mysql";
            version = "1.0.0";
            src = fetchHex {
              pkg = "mysql";
              version = "1.0.0";
              sha256 =
                "34b8e9252e150d329798a0d7f7054f40c08703ccdd7e37dfc5116fe388513251";
            };

            meta = {
              description = ''MySQL/OTP – MySQL driver for Erlang/OTP'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/mysql-otp/mysql-otp";
            };
          } // packageOverrides)
      ) {};

    mysql = mysql_1_0_0;

    mysqlex_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, mysql_1_0_0 }:
          buildMix ({
            name = "mysqlex";
            version = "0.0.1";
            src = fetchHex {
              pkg = "mysqlex";
              version = "0.0.1";
              sha256 =
                "5df9c80e9ff9a61fe9ddb4c8883963686f66e21168b64acfa55b14c50e9305ee";
            };
            beamDeps  = [ mysql_1_0_0 ];

            meta = {
              longDescription = ''An Ecto-compatible wrapper around the
                                mysql-otp library.
                                https://github.com/mysql-otp/mysql-otp'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/tjheeta/mysqlex";
            };
          } // packageOverrides)
      ) {};

    mysqlex = mysqlex_0_0_1;

    mysqlex_pool_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          mysqlex_0_0_1,
          poolboy_1_5_1
        }:
          buildMix ({
            name = "mysqlex_pool";
            version = "0.2.0";
            src = fetchHex {
              pkg = "mysqlex_pool";
              version = "0.2.0";
              sha256 =
                "eafcd123a24e9707a7487ec97692e9960edb60d963b156d6cdacf86740d0eef5";
            };
            beamDeps  = [ mysqlex_0_0_1 poolboy_1_5_1 ];

            meta = {
              description = ''A warpper for mysqlex to add connection pooling
                            with poolboy'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mpneuried/mysqlex_pool";
            };
          } // packageOverrides)
      ) {};

    mysqlex_pool = mysqlex_pool_0_2_0;

    n2o_4_4_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "n2o";
            version = "4.4.0";
            src = fetchHex {
              pkg = "n2o";
              version = "4.4.0";
              sha256 =
                "f1fe7c5a03024b3909688c2a639a5c4fff598fef4fbc9f55428dc43f942c5d37";
            };

            meta = {
              description = ''Voxoz MQ'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/voxoz/mq";
            };
          } // packageOverrides)
      ) {};

    n2o = n2o_4_4_0;

    nabo_0_0_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          earmark_1_1_1,
          poison_3_1_0
        }:
          buildMix ({
            name = "nabo";
            version = "0.0.4";
            src = fetchHex {
              pkg = "nabo";
              version = "0.0.4";
              sha256 =
                "d1148772725f5d049f642fff8110987d7999b6208bc2a64189cf86577f981fbd";
            };
            beamDeps  = [ earmark_1_1_1 poison_3_1_0 ];

            meta = {
              description = ''A dead simple, extendable and fast blog engine in
                            Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/qcam/nabo";
            };
          } // packageOverrides)
      ) {};

    nabo = nabo_0_0_4;

    nacl_0_3_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "nacl";
            version = "0.3.0";
            src = fetchHex {
              pkg = "nacl";
              version = "0.3.0";
              sha256 =
                "83a626d0ddd17a9c9528aa57a79e0e19746a42def007bc48c4984f0905098a7b";
            };
            compilePorts = true;

            meta = {
              description = ''Erlang-NaCl hex package'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tonyg/erlang-nacl";
            };
          } // packageOverrides)
      ) {};

    nacl = nacl_0_3_0;

    nadia_0_4_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "nadia";
            version = "0.4.2";
            src = fetchHex {
              pkg = "nadia";
              version = "0.4.2";
              sha256 =
                "cba41b43cfcb6731ac40779656bd8d1a5936bf632a20c1a0e701a2f0e02c0fa6";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''Telegram Bot API Wrapper written in Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zhyu/nadia";
            };
          } // packageOverrides)
      ) {};

    nadia = nadia_0_4_2;

    naive_bayes_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "naive_bayes";
            version = "0.1.3";
            src = fetchHex {
              pkg = "naive_bayes";
              version = "0.1.3";
              sha256 =
                "4b65f199852dcb95ba483b7eeae0afed36931418854aadf6b8235197a985d29e";
            };

            meta = {
              description = ''An Elixir implementation of Naive Bayes'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ashleyw/naive_bayes";
            };
          } // packageOverrides)
      ) {};

    naive_bayes = naive_bayes_0_1_3;

    named_args_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "named_args";
            version = "0.1.0";
            src = fetchHex {
              pkg = "named_args";
              version = "0.1.0";
              sha256 =
                "d90285d6fab53c66762e6b3cec655d79df24251e8ed277faa4b308d6f2789c1e";
            };

            meta = {
              description = ''Ensures default maps and keyword lists have the
                            defaults specified.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mgwidmann/named_args";
            };
          } // packageOverrides)
      ) {};

    named_args = named_args_0_1_0;

    narp_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "narp";
            version = "0.0.1";
            src = fetchHex {
              pkg = "narp";
              version = "0.0.1";
              sha256 =
                "90800be330ed49563b24d891a578678865ce108cd77fa2427e09dbb6b1bac737";
            };

            meta = {
              description = ''Narp is an easy and flexible way to authorize
                            function calls in elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/faber-lotto/narp";
            };
          } // packageOverrides)
      ) {};

    narp = narp_0_0_1;

    nat_set_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "nat_set";
            version = "0.0.1";
            src = fetchHex {
              pkg = "nat_set";
              version = "0.0.1";
              sha256 =
                "cc6ed65c754153d7c98c9825370780831cfbe638d162cb4ae2178eadcdd00611";
            };

            meta = {
              description = ''Represent sets of natural numbers compactly in
                            Elixir using bitwise operations'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/hilverd/nat-set-elixir";
            };
          } // packageOverrides)
      ) {};

    nat_set = nat_set_0_0_1;

    nativegen_0_4_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "nativegen";
            version = "0.4.1";
            src = fetchHex {
              pkg = "nativegen";
              version = "0.4.1";
              sha256 =
                "54c36ca3c0333f04b84f8b15fa028fcecfe77614954c78e87b22ed56e977f46f";
            };

            meta = {
              description = ''Accessible REST API code generator for native
                            app.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/yoavlt/nativegen";
            };
          } // packageOverrides)
      ) {};

    nativegen = nativegen_0_4_1;

    nats_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          json_0_3_3,
          poolboy_1_5_1
        }:
          buildMix ({
            name = "nats";
            version = "0.0.1";
            src = fetchHex {
              pkg = "nats";
              version = "0.0.1";
              sha256 =
                "5568e91f56f65388ad6cb92ddbd70cec5227dadea9d12ec558e93bfe71c9bf78";
            };
            beamDeps  = [ json_0_3_3 poolboy_1_5_1 ];

            meta = {
              description = ''A NATS client written in elixir supporting
                            pub/sub for microservices'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/aforward/elixir_nats";
            };
          } // packageOverrides)
      ) {};

    nats = nats_0_0_1;

    nats_ex_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          gproc_0_6_1,
          poison_2_2_0
        }:
          buildMix ({
            name = "nats_ex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "nats_ex";
              version = "0.1.0";
              sha256 =
                "6f7df3570e82d21a629ec08531c868ccef1bdd4f3b00cfc0d5fcad2a0e8d58e9";
            };
            beamDeps  = [ gproc_0_6_1 poison_2_2_0 ];

            meta = {
              description = ''A pure Elixir Client library for Nats.io
                            messaging system'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/iamd3vil/nats_ex";
            };
          } // packageOverrides)
      ) {};

    nats_ex = nats_ex_0_1_0;

    nats_msg_0_4_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "nats_msg";
            version = "0.4.1";
            src = fetchHex {
              pkg = "nats_msg";
              version = "0.4.1";
              sha256 =
                "8e21a78bf2ae76d7702bcc03eb87bdddac1b99edebfc99db98e8e94a7a5361c4";
            };

            meta = {
              description = ''Pure Erlang NATS Protocol Message
                            Encoder/Decoder'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/yuce/nats_msg";
            };
          } // packageOverrides)
      ) {};

    nats_msg = nats_msg_0_4_1;

    natsio_0_1_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "natsio";
            version = "0.1.4";
            src = fetchHex {
              pkg = "natsio";
              version = "0.1.4";
              sha256 =
                "3ed391e3e5f494828da2cb4949e661df782004cfe8273b9f1685ba4bc858187e";
            };

            meta = {
              description = ''NATS framework for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nats-io/elixir-nats";
            };
          } // packageOverrides)
      ) {};

    natsio = natsio_0_1_4;

    natural_sort_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "natural_sort";
            version = "0.3.0";
            src = fetchHex {
              pkg = "natural_sort";
              version = "0.3.0";
              sha256 =
                "6c3476edf395c487a8b55d104458e0f029ca2adb7a0373d12a7a08643f7e7172";
            };

            meta = {
              description = ''Sort a list of strings containing numbers in a
                            natural manner. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/DanCouper/natural_sort";
            };
          } // packageOverrides)
      ) {};

    natural_sort = natural_sort_0_3_0;

    naughtygram_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exprintf_0_1_6,
          floki_0_17_2,
          httpoison_0_7_5,
          poison_1_5_2
        }:
          buildMix ({
            name = "naughtygram";
            version = "0.2.0";
            src = fetchHex {
              pkg = "naughtygram";
              version = "0.2.0";
              sha256 =
                "7ae4fb6518c06116139bc6a1fe6e3e52fe590acc4d5dc487c01fc2878ba6819d";
            };
            beamDeps  = [
                          exprintf_0_1_6
                          floki_0_17_2
                          httpoison_0_7_5
                          poison_1_5_2
                        ];

            meta = {
              description = ''Instagram Private API client library for
                            Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zensavona/naughtygram";
            };
          } // packageOverrides)
      ) {};

    naughtygram = naughtygram_0_2_0;

    navigation_history_0_2_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, plug_1_3_5 }:
          buildMix ({
            name = "navigation_history";
            version = "0.2.2";
            src = fetchHex {
              pkg = "navigation_history";
              version = "0.2.2";
              sha256 =
                "0dd23cee7bcb6eb6d0d42a2d41ca36929637213f6fdda3132ef78f2ea0a17a40";
            };
            beamDeps  = [ plug_1_3_5 ];

            meta = {
              description = ''Navigation history tracking plug'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/tuvistavie/plug-navigation-history";
            };
          } // packageOverrides)
      ) {};

    navigation_history = navigation_history_0_2_2;

    navigation_tree_0_4_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "navigation_tree";
            version = "0.4.4";
            src = fetchHex {
              pkg = "navigation_tree";
              version = "0.4.4";
              sha256 =
                "a4e6aad3224ad9c463a1ac0412463a18ac71b7a78ea16303ad72f43f1fb217c6";
            };

            meta = {
              longDescription = ''A navigation tree representation with helpers
                                to generate HTML out of it - depending of
                                userroles. Also creates nice HTML navbars for
                                Bootstrap. Implemented as Agent to hold config
                                state.'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/gutschilla/elixir-navigation-tree";
            };
          } // packageOverrides)
      ) {};

    navigation_tree = navigation_tree_0_4_4;

    nconf_0_0_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "nconf";
            version = "0.0.1";
            src = fetchHex {
              pkg = "nconf";
              version = "0.0.1";
              sha256 =
                "5f8cb9c7b779552861abeddd7985d55b71dafccdbaaa85f9630162082022ca9a";
            };

            meta = {
              description = ''Nested Configuration Manager for Erlang
                            Applications.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/inaka/nconf";
            };
          } // packageOverrides)
      ) {};

    nconf = nconf_0_0_1;

    nd_index_1_7_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "nd_index";
            version = "1.7.1";
            src = fetchHex {
              pkg = "nd_index";
              version = "1.7.1";
              sha256 =
                "6ff8679385111064b0b1b8eaec1edbc754872a69e02f1131ec5ce17b58c58d1e";
            };

            meta = {
              description = ''Erlang N-dimensional Index Iterator'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/okeuday/nd_index";
            };
          } // packageOverrides)
      ) {};

    nd_index = nd_index_1_7_1;

    ndc_ex_sdk_0_2_30 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_9_2,
          pipe_0_0_2,
          timex_3_0_5,
          xml_builder_plus_0_0_4,
          xml_to_keyword_0_0_3
        }:
          buildMix ({
            name = "ndc_ex_sdk";
            version = "0.2.30";
            src = fetchHex {
              pkg = "ndc_ex_sdk";
              version = "0.2.30";
              sha256 =
                "4a4e362805b3cf328aedd81663882fd59a5d821fb9c9a975e2cdf783c43506cc";
            };
            beamDeps  = [
                          httpoison_0_9_2
                          pipe_0_0_2
                          timex_3_0_5
                          xml_builder_plus_0_0_4
                          xml_to_keyword_0_0_3
                        ];

            meta = {
              longDescription = ''This is an Elixir package that wrapps any
                                NDC-compliant API. It`s host-agnostic and quite
                                flexible-through-configuration so that it can
                                reach NDC hosts with a certain flexibility'';
              license = stdenv.lib.licenses.free;
            };
          } // packageOverrides)
      ) {};

    ndc_ex_sdk = ndc_ex_sdk_0_2_30;

    nearest_neighbour_algorithm_1_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "nearest_neighbour_algorithm";
            version = "1.0.3";
            src = fetchHex {
              pkg = "nearest_neighbour_algorithm";
              version = "1.0.3";
              sha256 =
                "d1067ac664de719c4e2fcd2ace4dfbf4bb6185fff4b900d36f5ab4f64399c097";
            };

            meta = {
              description = ''Nearest neighbour algorithm written in Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/HenrikFricke/elixir-nearest-neighbour-algorithm";
            };
          } // packageOverrides)
      ) {};

    nearest_neighbour_algorithm = nearest_neighbour_algorithm_1_0_3;

    neat_ex_1_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, json_0_3_3 }:
          buildMix ({
            name = "neat_ex";
            version = "1.1.1";
            src = fetchHex {
              pkg = "neat_ex";
              version = "1.1.1";
              sha256 =
                "7e1f36672d36d0de7eb1181e5ac20e1949c6319b91c2c2297d3b13e373e13624";
            };
            beamDeps  = [ json_0_3_3 ];

            meta = {
              longDescription = ''This project provides the means to define,
                                simulate, and serialize
                                Artificial-Neural-Networks (ANNs), as well as
                                the means to develop them through use of the
                                Neuro-Evolution of Augmenting Toplogies (NEAT)
                                algorithm created by Dr. Kenneth Stanley.
                                Neuro-Evolution, unlike back-propogation, easily
                                allows the usage of recurrent neural networks
                                instead of just feed-forward networks, and
                                fitness functions instead of just training data.
                                Additionally, since NEAT augments topologies,
                                all the engine needs to start is the
                                input/output layout, and a fitness function.'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    neat_ex = neat_ex_1_1_1;

    nebula_0_1_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "nebula";
            version = "0.1.1";
            src = fetchHex {
              pkg = "nebula";
              version = "0.1.1";
              sha256 =
                "95ebe614d358919d2ad48022a09d9cfb207defeb3e6d79d837102338d86a90dc";
            };

            meta = {
              description = ''Library for colored output in Erlang'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/lk-geimfari/nebula";
            };
          } // packageOverrides)
      ) {};

    nebula = nebula_0_1_1;

    nectar_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "nectar";
            version = "0.0.1";
            src = fetchHex {
              pkg = "nectar";
              version = "0.0.1";
              sha256 =
                "dffc5f1c68c83d9eb83ca1c8868d923beaccfdf36ae2e5122dc7bc8edd5665f5";
            };

            meta = {
              description = ''Placeholder package for nectar ecommerce'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    nectar = nectar_0_0_1;

    neo4j_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_4_10,
          jiffy_0_14_11
        }:
          buildMix ({
            name = "neo4j";
            version = "0.3.0";
            src = fetchHex {
              pkg = "neo4j";
              version = "0.3.0";
              sha256 =
                "93b07252e5216dbccedda19a28873ab5352f59a3c0f257b85a14d3b4e47d3cf7";
            };
            beamDeps  = [ hackney_1_4_10 jiffy_0_14_11 ];

            meta = {
              longDescription = ''Erlang client library for Neo4J This is a
                                lightweight wrapper for Neo4j REST API. Exposes
                                all of the functionality exposed by Neo4J REST
                                API. Please refer to README to see if you need
                                version 0.2.1 or 0.3'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dmitriid/neo4j-erlang";
            };
          } // packageOverrides)
      ) {};

    neo4j = neo4j_0_3_0;

    neo4j_sips_0_2_18 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          con_cache_0_11_1,
          httpoison_0_11_2,
          poison_1_0_2,
          poolboy_1_5_1
        }:
          buildMix ({
            name = "neo4j_sips";
            version = "0.2.18";
            src = fetchHex {
              pkg = "neo4j_sips";
              version = "0.2.18";
              sha256 =
                "d0f936d78844be6429d40054b03357205161dd59d479a07623b4f6314c908070";
            };
            beamDeps  = [
                          con_cache_0_11_1
                          httpoison_0_11_2
                          poison_1_0_2
                          poolboy_1_5_1
                        ];

            meta = {
              description = ''A very simple and versatile Neo4J Elixir
                            driver'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/florinpatrascu/neo4j_sips";
            };
          } // packageOverrides)
      ) {};

    neo4j_sips = neo4j_sips_0_2_18;

    neo4j_sips_models_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          chronos_1_7_0,
          inflex_1_8_1,
          neo4j_sips_0_2_18,
          timex_3_0_5
        }:
          buildMix ({
            name = "neo4j_sips_models";
            version = "0.1.1";
            src = fetchHex {
              pkg = "neo4j_sips_models";
              version = "0.1.1";
              sha256 =
                "6572993cd5acdcdf77490d608236c869ce0cda2931beda2a272f85f2f1831759";
            };
            beamDeps  = [
                          chronos_1_7_0
                          inflex_1_8_1
                          neo4j_sips_0_2_18
                          timex_3_0_5
                        ];

            meta = {
              description = ''Add Models support to the Neo4J Elixir driver'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/florinpatrascu/neo4j_sips_models";
            };
          } // packageOverrides)
      ) {};

    neo4j_sips_models = neo4j_sips_models_0_1_1;

    neonmob_0_0_0_dev0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exjsx_3_2_1,
          httpoison_0_11_2
        }:
          buildMix ({
            name = "neonmob";
            version = "0.0.0-dev0";
            src = fetchHex {
              pkg = "neonmob";
              version = "0.0.0-dev0";
              sha256 =
                "2d85f92c8b099160c343af8389f3ec123c2ea993d0dceb50659f3174718d36a6";
            };
            beamDeps  = [ exjsx_3_2_1 httpoison_0_11_2 ];

            meta = {
              description = ''An API client for NeonMob.com'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sgerrand/neonmob.ex";
            };
          } // packageOverrides)
      ) {};

    neonmob = neonmob_0_0_0_dev0;

    neotoma_1_7_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "neotoma";
            version = "1.7.3";
            src = fetchHex {
              pkg = "neotoma";
              version = "1.7.3";
              sha256 =
                "2da322b9b1567ffa0706a7f30f6bbbde70835ae44a1050615f4b4a3d436e0f28";
            };

            meta = {
              description = ''PEG/Packrat toolkit and parser-generator.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/seancribbs/neotoma";
            };
          } // packageOverrides)
      ) {};

    neotoma = neotoma_1_7_3;

    neotomex_0_1_6 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "neotomex";
            version = "0.1.6";
            src = fetchHex {
              pkg = "neotomex";
              version = "0.1.6";
              sha256 =
                "7fc92fd4d406393b40fcb1df8706dde72799a95b98a02235c4e8c64b6f0aac69";
            };

            meta = {
              description = ''A PEG parser/transformer with a pleasant Elixir
                            DSL.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/jtmoulia/neotomex";
            };
          } // packageOverrides)
      ) {};

    neotomex = neotomex_0_1_6;

    nerves_0_4_8 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, distillery_1_4_0 }:
          buildMix ({
            name = "nerves";
            version = "0.4.8";
            src = fetchHex {
              pkg = "nerves";
              version = "0.4.8";
              sha256 =
                "72b24daa3b4e436d75e66e28bfc4bea52efb48db3dd7cb5cc73e7f00572f19a7";
            };
            beamDeps  = [ distillery_1_4_0 ];

            meta = {
              longDescription = ''Nerves - Create firmware for embedded devices
                                like Raspberry Pi, BeagleBone Black, and more'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/nerves-project/nerves";
            };
          } // packageOverrides)
      ) {};

    nerves_0_5_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, distillery_1_4_0 }:
          buildMix ({
            name = "nerves";
            version = "0.5.2";
            src = fetchHex {
              pkg = "nerves";
              version = "0.5.2";
              sha256 =
                "1a5ef607dfb61094fb1005b04f30121f1d7e7510f0d8668dc397e3f758d66d3f";
            };
            beamDeps  = [ distillery_1_4_0 ];

            meta = {
              longDescription = ''Nerves - Create firmware for embedded devices
                                like Raspberry Pi, BeagleBone Black, and more'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/nerves-project/nerves";
            };
          } // packageOverrides)
      ) {};

    nerves = nerves_0_5_2;

    nerves_firmware_0_4_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "nerves_firmware";
            version = "0.4.0";
            src = fetchHex {
              pkg = "nerves_firmware";
              version = "0.4.0";
              sha256 =
                "5f7105e32e3adef3465d901c1e440322cdf2855c8a19de03fc595defdf7adafd";
            };

            meta = {
              description = ''Manage and update firmware on a Nerves device'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/nerves-project/nerves_firmware";
            };
          } // packageOverrides)
      ) {};

    nerves_firmware = nerves_firmware_0_4_0;

    nerves_firmware_http_0_4_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          exjsx_4_0_0,
          nerves_firmware_0_4_0
        }:
          buildMix ({
            name = "nerves_firmware_http";
            version = "0.4.1";
            src = fetchHex {
              pkg = "nerves_firmware_http";
              version = "0.4.1";
              sha256 =
                "bfbd3062c727b89df7568f1d1a37bedc1271da38fcd2084d8ba2b215254d852b";
            };
            beamDeps  = [ cowboy_1_1_2 exjsx_4_0_0 nerves_firmware_0_4_0 ];

            meta = {
              description = ''Update firmware on a Nerves device over HTTP'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/nerves-project/nerves_firmware_http";
            };
          } // packageOverrides)
      ) {};

    nerves_firmware_http = nerves_firmware_http_0_4_1;

    nerves_grove_0_5_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, elixir_ale_0_5_7 }:
          buildMix ({
            name = "nerves_grove";
            version = "0.5.0";
            src = fetchHex {
              pkg = "nerves_grove";
              version = "0.5.0";
              sha256 =
                "1a2ffb47e8e62a1d63e6743156492717b801a60b281890719f35eff3c23697b9";
            };
            beamDeps  = [ elixir_ale_0_5_7 ];

            meta = {
              description = ''Grove module support for Nerves.'';
              license = stdenv.lib.licenses.publicDomain;
              homepage = "https://github.com/bendiken/nerves_grove";
            };
          } // packageOverrides)
      ) {};

    nerves_grove = nerves_grove_0_5_0;

    nerves_interim_wifi_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          elixir_make_0_4_0,
          nerves_network_interface_0_4_0,
          nerves_wpa_supplicant_0_3_0
        }:
          buildMix ({
            name = "nerves_interim_wifi";
            version = "0.2.0";
            src = fetchHex {
              pkg = "nerves_interim_wifi";
              version = "0.2.0";
              sha256 =
                "d9b05c66a994cc89d8478a375ed49e68469dc21f7bcdb96365e87232b6360147";
            };
            beamDeps  = [
                          elixir_make_0_4_0
                          nerves_network_interface_0_4_0
                          nerves_wpa_supplicant_0_3_0
                        ];

            meta = {
              description = ''Manage WiFi network connections.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/nerves-project/nerves_interim_wifi";
            };
          } // packageOverrides)
      ) {};

    nerves_interim_wifi = nerves_interim_wifi_0_2_0;

    nerves_io_neopixel_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "nerves_io_neopixel";
            version = "0.2.0";
            src = fetchHex {
              pkg = "nerves_io_neopixel";
              version = "0.2.0";
              sha256 =
                "662ca0af01330399eba9aff9806c086027ec5b3a2e235af4cd909282a6d09afa";
            };

            meta = {
              description = ''Drive WS2812B \"NeoPixel\" RGB LED strips from a
                            Raspberry Pi using Elixir.'';
              license = with stdenv.lib.licenses; [ mit bsd2 ];
              homepage = "https://github.com/GregMefford/nerves_io_neopixel";
            };
          } // packageOverrides)
      ) {};

    nerves_io_neopixel = nerves_io_neopixel_0_2_0;

    nerves_io_nfc_0_1_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, elixir_make_0_4_0
        }:
          buildMix ({
            name = "nerves_io_nfc";
            version = "0.1.0";
            src = fetchHex {
              pkg = "nerves_io_nfc";
              version = "0.1.0";
              sha256 =
                "89015627ed83793564f9a288681863bfa767f2b6997bfe5a098ae12c71c39da2";
            };
            beamDeps  = [ elixir_make_0_4_0 ];

            meta = {
              description = ''Elixir access to LibNFC-compatible USB NFC
                            readers'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/arjan/nerves_io_nfc";
            };
          } // packageOverrides)
      ) {};

    nerves_io_nfc = nerves_io_nfc_0_1_0;

    nerves_io_pn532_0_1_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, nerves_uart_0_1_2
        }:
          buildMix ({
            name = "nerves_io_pn532";
            version = "0.1.0";
            src = fetchHex {
              pkg = "nerves_io_pn532";
              version = "0.1.0";
              sha256 =
                "264faa172c2d3147d891c86a6441a030409b65a51dfaf11e09b411ad58cb8827";
            };
            beamDeps  = [ nerves_uart_0_1_2 ];

            meta = {
              description = ''Elixir library to work with the NXP PN532 RFID
                            module.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jmerriweather/nerves_io_pn532";
            };
          } // packageOverrides)
      ) {};

    nerves_io_pn532 = nerves_io_pn532_0_1_0;

    nerves_io_rc522_0_1_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, elixir_make_0_4_0
        }:
          buildMix ({
            name = "nerves_io_rc522";
            version = "0.1.0";
            src = fetchHex {
              pkg = "nerves_io_rc522";
              version = "0.1.0";
              sha256 =
                "b943a3fb15b0fec6b35e2023b859ed5a93f2ca5d981a75e26a60d0be75d17f63";
            };
            beamDeps  = [ elixir_make_0_4_0 ];

            meta = {
              description = ''Elixir access to the RC522 RFID reader module
                            over SPI'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/arjan/nerves_io_rc522";
            };
          } // packageOverrides)
      ) {};

    nerves_io_rc522 = nerves_io_rc522_0_1_0;

    nerves_leds_0_8_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "nerves_leds";
            version = "0.8.0";
            src = fetchHex {
              pkg = "nerves_leds";
              version = "0.8.0";
              sha256 =
                "6620aecec1a4ce95b60f30b56b2080195376ed811a119821e33f2bb626c97c4a";
            };

            meta = {
              description = ''Functions to drive LEDs on embedded systems'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nerves-project/nerves_leds";
            };
          } // packageOverrides)
      ) {};

    nerves_leds = nerves_leds_0_8_0;

    nerves_neopixel_0_3_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, elixir_make_0_3_0
        }:
          buildMix ({
            name = "nerves_neopixel";
            version = "0.3.0";
            src = fetchHex {
              pkg = "nerves_neopixel";
              version = "0.3.0";
              sha256 =
                "7d1fac68ff13fe224bcde95ed7e44afd9572e53d73c8ce8d6da3d775d126e036";
            };
            beamDeps  = [ elixir_make_0_3_0 ];

            meta = {
              description = ''Drive WS2812B \"NeoPixel\" RGB LED strips from a
                            Raspberry Pi using Elixir.'';
              license = with stdenv.lib.licenses; [ mit bsd2 ];
              homepage = "https://github.com/GregMefford/nerves_neopixel";
            };
          } // packageOverrides)
      ) {};

    nerves_neopixel = nerves_neopixel_0_3_0;

    nerves_network_interface_0_4_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, elixir_make_0_4_0
        }:
          buildMix ({
            name = "nerves_network_interface";
            version = "0.4.0";
            src = fetchHex {
              pkg = "nerves_network_interface";
              version = "0.4.0";
              sha256 =
                "dc17f4309e0291c9e7f4fdb3760b2093aa71193b63ca4a33c0308c4f5ee2885e";
            };
            beamDeps  = [ elixir_make_0_4_0 ];

            meta = {
              description = ''Discover, setup, and get stats on network
                            interfaces.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/nerves-project/nerves_network_interface";
            };
          } // packageOverrides)
      ) {};

    nerves_network_interface = nerves_network_interface_0_4_0;

    nerves_networking_0_6_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "nerves_networking";
            version = "0.6.0";
            src = fetchHex {
              pkg = "nerves_networking";
              version = "0.6.0";
              sha256 =
                "5f32927e03aa9345d5c5b63ee20b6d41eda613dffb63437c85979850192ed7ea";
            };

            meta = {
              description = ''Nerves Networking Module'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nerves-project/nerves_networking";
            };
          } // packageOverrides)
      ) {};

    nerves_networking = nerves_networking_0_6_0;

    nerves_ntp_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "nerves_ntp";
            version = "0.1.1";
            src = fetchHex {
              pkg = "nerves_ntp";
              version = "0.1.1";
              sha256 =
                "d718d4fc14f7538793eeb524a5f4ff2987c1eee37bab054e62c4000169f2cfad";
            };

            meta = {
              description = ''OTP application to sync time using busybox `ntpd`
                            command.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/evokly/nerves_ntp";
            };
          } // packageOverrides)
      ) {};

    nerves_ntp = nerves_ntp_0_1_1;

    nerves_runtime_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          elixir_make_0_4_0,
          gen_stage_0_12_0
        }:
          buildMix ({
            name = "nerves_runtime";
            version = "0.2.0";
            src = fetchHex {
              pkg = "nerves_runtime";
              version = "0.2.0";
              sha256 =
                "949c14ffe158303623c830d808b7c3eb1f7b4d0b2f405fc08a067e8c2dbcb8f2";
            };
            beamDeps  = [ elixir_make_0_4_0 gen_stage_0_12_0 ];

            meta = {
              description = ''Small, general runtime libraries and utilities
                            for Nerves devices'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/nerves-project/nerves_runtime";
            };
          } // packageOverrides)
      ) {};

    nerves_runtime = nerves_runtime_0_2_0;

    nerves_ssdp_client_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "nerves_ssdp_client";
            version = "0.1.3";
            src = fetchHex {
              pkg = "nerves_ssdp_client";
              version = "0.1.3";
              sha256 =
                "e970b8a7547c4d11c31ff0e6ab8543795b551659f03b9edc6df0e0720a3cc972";
            };

            meta = {
              description = ''Client for Simple Service Discovery Protocol'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/nerves-project/nerves_ssdp_client";
            };
          } // packageOverrides)
      ) {};

    nerves_ssdp_client = nerves_ssdp_client_0_1_3;

    nerves_ssdp_server_0_2_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "nerves_ssdp_server";
            version = "0.2.2";
            src = fetchHex {
              pkg = "nerves_ssdp_server";
              version = "0.2.2";
              sha256 =
                "701ed559f683a4853c02f5811ed76a01058f349bd1924922ee874363376716a0";
            };

            meta = {
              description = ''Client for Simple Service Discovery Protocol'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/nerves-project/nerves_ssdp_server";
            };
          } // packageOverrides)
      ) {};

    nerves_ssdp_server = nerves_ssdp_server_0_2_2;

    nerves_system_0_1_8 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "nerves_system";
            version = "0.1.8";
            src = fetchHex {
              pkg = "nerves_system";
              version = "0.1.8";
              sha256 =
                "df5d37b852c5b48ef81ab1af99c0d4758a08fb380b47ebc6d158abeb4e06154a";
            };

            meta = {
              longDescription = ''Elixir compilers and scripts for building
                                Nerves Systems. For useable system
                                configurations see nerves_system_*'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/nerves-project/nerves_system";
            };
          } // packageOverrides)
      ) {};

    nerves_system = nerves_system_0_1_8;

    nerves_system_ag150_0_7_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          nerves_system_0_1_8,
          nerves_system_br_0_10_1,
          nerves_toolchain_i586_unknown_linux_gnu_0_8_0_rc_0
        }:
          buildMix ({
            name = "nerves_system_ag150";
            version = "0.7.0";
            src = fetchHex {
              pkg = "nerves_system_ag150";
              version = "0.7.0";
              sha256 =
                "23d896bed59e2c1e7b0c63ad50fc1006a6b0266ad4b340f752c358048f76a090";
            };
            beamDeps  = [
                          nerves_system_0_1_8
                          nerves_system_br_0_10_1
                          nerves_toolchain_i586_unknown_linux_gnu_0_8_0_rc_0
                        ];

            meta = {
              description = ''Nerves System - AG150
                            http://www.logicsupply.com/ag150/?___store=en_us'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/nerves-project/nerves_system_ag150";
            };
          } // packageOverrides)
      ) {};

    nerves_system_ag150 = nerves_system_ag150_0_7_0;

    nerves_system_alix_0_7_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          nerves_system_0_1_8,
          nerves_system_br_0_10_1,
          nerves_toolchain_i586_unknown_linux_gnu_0_8_0_rc_0
        }:
          buildMix ({
            name = "nerves_system_alix";
            version = "0.7.0";
            src = fetchHex {
              pkg = "nerves_system_alix";
              version = "0.7.0";
              sha256 =
                "8cde97cdcae3ee8eac895aa78b54ed9164c98a3c950a19e2f81ac7f132e41b0a";
            };
            beamDeps  = [
                          nerves_system_0_1_8
                          nerves_system_br_0_10_1
                          nerves_toolchain_i586_unknown_linux_gnu_0_8_0_rc_0
                        ];

            meta = {
              description = ''Nerves System - Alix
                            http://www.pcengines.ch/alix.htm'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/nerves-project/nerves_system_alix";
            };
          } // packageOverrides)
      ) {};

    nerves_system_alix = nerves_system_alix_0_7_0;

    nerves_system_bbb_0_12_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          nerves_0_5_2,
          nerves_system_br_0_10_1,
          nerves_toolchain_arm_unknown_linux_gnueabihf_0_10_0
        }:
          buildMix ({
            name = "nerves_system_bbb";
            version = "0.12.0";
            src = fetchHex {
              pkg = "nerves_system_bbb";
              version = "0.12.0";
              sha256 =
                "7056c426fed48a660cd2186a954f42d2172c45e2bf04583b18a8e9ef2b7f5c6b";
            };
            beamDeps  = [
                          nerves_0_5_2
                          nerves_system_br_0_10_1
                          nerves_toolchain_arm_unknown_linux_gnueabihf_0_10_0
                        ];

            meta = {
              description = ''Nerves System - BeagleBone Black, BeagleBone
                            Green'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/nerves-project/nerves_system_bbb";
            };
          } // packageOverrides)
      ) {};

    nerves_system_bbb = nerves_system_bbb_0_12_0;

    nerves_system_br_0_10_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "nerves_system_br";
            version = "0.10.1";
            src = fetchHex {
              pkg = "nerves_system_br";
              version = "0.10.1";
              sha256 =
                "d28e8b5bb32b2a72bfa1bc33f47786f45a97840306ee04e23978da9475e91a3a";
            };

            meta = {
              description = ''Nerves System BR - Buildroot based build platform
                            for Nerves Systems'';
              license = with stdenv.lib.licenses; [ asl20 free ];
              homepage = "https://github.com/nerves-project/nerves_system_br";
            };
          } // packageOverrides)
      ) {};

    nerves_system_br_0_11_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "nerves_system_br";
            version = "0.11.1";
            src = fetchHex {
              pkg = "nerves_system_br";
              version = "0.11.1";
              sha256 =
                "95be6a22ce2e03b043d957ad964ad78f0bedcb4452126019b73c37ed41c26662";
            };

            meta = {
              description = ''Nerves System BR - Buildroot based build platform
                            for Nerves Systems'';
              license = with stdenv.lib.licenses; [ asl20 free ];
              homepage = "https://github.com/nerves-project/nerves_system_br";
            };
          } // packageOverrides)
      ) {};

    nerves_system_br_0_12_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "nerves_system_br";
            version = "0.12.0";
            src = fetchHex {
              pkg = "nerves_system_br";
              version = "0.12.0";
              sha256 =
                "cfe42151880a4c91a75a64b37a7ff585c7ab1c336a8662ffe4ca61b78e6e3deb";
            };

            meta = {
              description = ''Nerves System BR - Buildroot based build platform
                            for Nerves Systems'';
              license = with stdenv.lib.licenses; [ asl20 free ];
              homepage = "https://github.com/nerves-project/nerves_system_br";
            };
          } // packageOverrides)
      ) {};

    nerves_system_br = nerves_system_br_0_12_0;

    nerves_system_ev3_0_11_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          nerves_0_5_2,
          nerves_system_br_0_10_1,
          nerves_toolchain_armv5tejl_unknown_linux_musleabi_0_10_0
        }:
          buildMix ({
            name = "nerves_system_ev3";
            version = "0.11.0";
            src = fetchHex {
              pkg = "nerves_system_ev3";
              version = "0.11.0";
              sha256 =
                "fa05b3fe14192aa5d92a214600b1b93c3fffa9c20dc5b7540ddd479c0b1a8b1a";
            };
            beamDeps  = [
                          nerves_0_5_2
                          nerves_system_br_0_10_1
                          nerves_toolchain_armv5tejl_unknown_linux_musleabi_0_10_0
                        ];

            meta = {
              longDescription = ''Nerves System - Lego Mindstorms EV3
                                http://www.lego.com/en-us/mindstorms/about-ev3'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/nerves-project/nerves_system_ev3";
            };
          } // packageOverrides)
      ) {};

    nerves_system_ev3 = nerves_system_ev3_0_11_0;

    nerves_system_galileo_0_7_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          nerves_system_0_1_8,
          nerves_system_br_0_10_1,
          nerves_toolchain_i586_unknown_linux_gnu_0_8_0_rc_0
        }:
          buildMix ({
            name = "nerves_system_galileo";
            version = "0.7.0";
            src = fetchHex {
              pkg = "nerves_system_galileo";
              version = "0.7.0";
              sha256 =
                "9888795ad2f84534efc1626635ad36c75c2cc27937e44b083265ed2378715e1f";
            };
            beamDeps  = [
                          nerves_system_0_1_8
                          nerves_system_br_0_10_1
                          nerves_toolchain_i586_unknown_linux_gnu_0_8_0_rc_0
                        ];

            meta = {
              longDescription = ''Nerves System - Intel Galileo Gen2
                                http://www.intel.com/content/www/us/en/embedded/products/galileo/galileo-overview.html'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/nerves-project/nerves_system_galileo";
            };
          } // packageOverrides)
      ) {};

    nerves_system_galileo = nerves_system_galileo_0_7_0;

    nerves_system_linkit_0_11_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          nerves_0_5_2,
          nerves_system_br_0_10_1,
          nerves_toolchain_mipsel_unknown_linux_musl_0_10_0
        }:
          buildMix ({
            name = "nerves_system_linkit";
            version = "0.11.0";
            src = fetchHex {
              pkg = "nerves_system_linkit";
              version = "0.11.0";
              sha256 =
                "418d18ffa680213b92736e09f1c1f1569d22a3d5d54d0210d517486b9cf0d636";
            };
            beamDeps  = [
                          nerves_0_5_2
                          nerves_system_br_0_10_1
                          nerves_toolchain_mipsel_unknown_linux_musl_0_10_0
                        ];

            meta = {
              description = ''Nerves System - LinkIt Smart'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/nerves-project/nerves_system_linkit";
            };
          } // packageOverrides)
      ) {};

    nerves_system_linkit = nerves_system_linkit_0_11_0;

    nerves_system_qemu_arm_0_11_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          nerves_0_5_2,
          nerves_system_br_0_10_1,
          nerves_toolchain_arm_unknown_linux_gnueabihf_0_10_0
        }:
          buildMix ({
            name = "nerves_system_qemu_arm";
            version = "0.11.0";
            src = fetchHex {
              pkg = "nerves_system_qemu_arm";
              version = "0.11.0";
              sha256 =
                "6794372dcf96691b896cf9f25d8b0d3c56c2fbc37391b5bf5741b4d2f724ef50";
            };
            beamDeps  = [
                          nerves_0_5_2
                          nerves_system_br_0_10_1
                          nerves_toolchain_arm_unknown_linux_gnueabihf_0_10_0
                        ];

            meta = {
              description = ''Nerves System - QEMU Arm'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/nerves-project/nerves_system_qemu_arm";
            };
          } // packageOverrides)
      ) {};

    nerves_system_qemu_arm = nerves_system_qemu_arm_0_11_0;

    nerves_system_rpi_0_12_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          nerves_0_5_2,
          nerves_system_br_0_10_1,
          nerves_toolchain_armv6_rpi_linux_gnueabi_0_10_0
        }:
          buildMix ({
            name = "nerves_system_rpi";
            version = "0.12.0";
            src = fetchHex {
              pkg = "nerves_system_rpi";
              version = "0.12.0";
              sha256 =
                "5addce526d5f5e010b59cfec8964bcf66f4059f03e47165d4db57b72c3860adb";
            };
            beamDeps  = [
                          nerves_0_5_2
                          nerves_system_br_0_10_1
                          nerves_toolchain_armv6_rpi_linux_gnueabi_0_10_0
                        ];

            meta = {
              description = ''Nerves System - Raspberry Pi A+ / B+ / B'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/nerves-project/nerves_system_rpi";
            };
          } // packageOverrides)
      ) {};

    nerves_system_rpi = nerves_system_rpi_0_12_0;

    nerves_system_rpi0_0_13_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          nerves_0_5_2,
          nerves_system_br_0_11_1,
          nerves_toolchain_armv6_rpi_linux_gnueabi_0_10_0
        }:
          buildMix ({
            name = "nerves_system_rpi0";
            version = "0.13.0";
            src = fetchHex {
              pkg = "nerves_system_rpi0";
              version = "0.13.0";
              sha256 =
                "ee27a2650312773005c73d4e2ab46669c94f551f63d243ad0fc9ee3909cc555e";
            };
            beamDeps  = [
                          nerves_0_5_2
                          nerves_system_br_0_11_1
                          nerves_toolchain_armv6_rpi_linux_gnueabi_0_10_0
                        ];

            meta = {
              description = ''Nerves System - Raspberry Pi Zero and Zero W'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/nerves-project/nerves_system_rpi0";
            };
          } // packageOverrides)
      ) {};

    nerves_system_rpi0 = nerves_system_rpi0_0_13_0;

    nerves_system_rpi2_0_12_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          nerves_0_5_2,
          nerves_system_br_0_10_1,
          nerves_toolchain_arm_unknown_linux_gnueabihf_0_10_0
        }:
          buildMix ({
            name = "nerves_system_rpi2";
            version = "0.12.1";
            src = fetchHex {
              pkg = "nerves_system_rpi2";
              version = "0.12.1";
              sha256 =
                "d835f528d9b51e22d19962dfbd7df07e573ffd816fad3b70e9024e2d8f32757e";
            };
            beamDeps  = [
                          nerves_0_5_2
                          nerves_system_br_0_10_1
                          nerves_toolchain_arm_unknown_linux_gnueabihf_0_10_0
                        ];

            meta = {
              description = ''Nerves System - Raspberry Pi 2 B'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/nerves-project/nerves_system_rpi2";
            };
          } // packageOverrides)
      ) {};

    nerves_system_rpi2 = nerves_system_rpi2_0_12_1;

    nerves_system_rpi3_0_12_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          nerves_0_5_2,
          nerves_system_br_0_10_1,
          nerves_toolchain_arm_unknown_linux_gnueabihf_0_10_0
        }:
          buildMix ({
            name = "nerves_system_rpi3";
            version = "0.12.0";
            src = fetchHex {
              pkg = "nerves_system_rpi3";
              version = "0.12.0";
              sha256 =
                "5bc2059c3b9dc92d313ad79eac298f8275e20f266bb1c40470432e62bfda607e";
            };
            beamDeps  = [
                          nerves_0_5_2
                          nerves_system_br_0_10_1
                          nerves_toolchain_arm_unknown_linux_gnueabihf_0_10_0
                        ];

            meta = {
              description = ''Nerves System - Raspberry Pi 3 B'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/nerves-project/nerves_system_rpi3";
            };
          } // packageOverrides)
      ) {};

    nerves_system_rpi3 = nerves_system_rpi3_0_12_0;

    nerves_system_rpi3_pigpio_0_9_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          nerves_0_4_8,
          nerves_system_br_0_10_1,
          nerves_toolchain_arm_unknown_linux_gnueabihf_0_10_0
        }:
          buildMix ({
            name = "nerves_system_rpi3_pigpio";
            version = "0.9.1";
            src = fetchHex {
              pkg = "nerves_system_rpi3_pigpio";
              version = "0.9.1";
              sha256 =
                "3e33ddd4b4623a32061d982e163a2eb2547b3c2a580e09ec59c6b9537e4431e4";
            };
            beamDeps  = [
                          nerves_0_4_8
                          nerves_system_br_0_10_1
                          nerves_toolchain_arm_unknown_linux_gnueabihf_0_10_0
                        ];

            meta = {
              longDescription = ''Nerves System - Raspberry Pi 3 B with pigpio
                                support (https://github.com/joan2937/pigpio)'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/vascokk/nerves_system_rpi3_pigpio";
            };
          } // packageOverrides)
      ) {};

    nerves_system_rpi3_pigpio = nerves_system_rpi3_pigpio_0_9_1;

    nerves_toolchain_0_7_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "nerves_toolchain";
            version = "0.7.1";
            src = fetchHex {
              pkg = "nerves_toolchain";
              version = "0.7.1";
              sha256 =
                "21a6ed13ae2489f9322381054755926df218bc150c3ac37e34915840944571cc";
            };

            meta = {
              longDescription = ''Elixir compilers and scripts for building
                                Nerves Toolchains. For useable toolchain
                                configurations see nerves_toolchain_*'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/nerves-project/nerves_toolchain";
            };
          } // packageOverrides)
      ) {};

    nerves_toolchain = nerves_toolchain_0_7_1;

    nerves_toolchain_aarch64_unknown_linux_gnueabi_0_10_0
    =
    callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          nerves_0_5_2,
          nerves_toolchain_ctng_0_9_0
        }:
          buildMix ({
            name = "nerves_toolchain_aarch64_unknown_linux_gnueabi";
            version = "0.10.0";
            src = fetchHex {
              pkg = "nerves_toolchain_aarch64_unknown_linux_gnueabi";
              version = "0.10.0";
              sha256 =
                "04fba24fa38e42e9f62db236ca1ad4fe147e480d69cd01c0a7a7875fc45c11e5";
            };
            beamDeps  = [ nerves_0_5_2 nerves_toolchain_ctng_0_9_0 ];

            meta = {
              description = ''Nerves Toolchain - aarch64_unknown_linux_gnu'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/nerves-project/toolchains/nerves_toolchain_aarch64_unknown_linux_gnueabi";
            };
          } // packageOverrides)
      ) {};

    nerves_toolchain_aarch64_unknown_linux_gnueabi =
      nerves_toolchain_aarch64_unknown_linux_gnueabi_0_10_0;

    nerves_toolchain_arm_unknown_linux_gnueabi_0_7_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          nerves_toolchain_0_7_1,
          nerves_toolchain_ctng_0_9_0
        }:
          buildMix ({
            name = "nerves_toolchain_arm_unknown_linux_gnueabi";
            version = "0.7.1";
            src = fetchHex {
              pkg = "nerves_toolchain_arm_unknown_linux_gnueabi";
              version = "0.7.1";
              sha256 =
                "1de056d3497490061aa0c524176f8190f30125a39b6cbd2dad904960b6d73217";
            };
            beamDeps  = [ nerves_toolchain_0_7_1 nerves_toolchain_ctng_0_9_0
                      ];

            meta = {
              description = ''Nerves Toolchain - arm-unknown-linux-gnueabi'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/nerves-project/toolchains/nerves_toolchain_arm_unknown_linux_gnueabi";
            };
          } // packageOverrides)
      ) {};

    nerves_toolchain_arm_unknown_linux_gnueabi =
      nerves_toolchain_arm_unknown_linux_gnueabi_0_7_1;

    nerves_toolchain_arm_unknown_linux_gnueabihf_0_10_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          nerves_0_5_2,
          nerves_toolchain_ctng_0_9_0
        }:
          buildMix ({
            name = "nerves_toolchain_arm_unknown_linux_gnueabihf";
            version = "0.10.0";
            src = fetchHex {
              pkg = "nerves_toolchain_arm_unknown_linux_gnueabihf";
              version = "0.10.0";
              sha256 =
                "dbcb7a44266c66dbb989502f5049bc87921bcc45b187125723f7fe1c5bcb094f";
            };
            beamDeps  = [ nerves_0_5_2 nerves_toolchain_ctng_0_9_0 ];

            meta = {
              description = ''Nerves Toolchain - arm-unknown-linux-gnueabihf'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/nerves-project/toolchains/nerves_toolchain_arm_unknown_linux_gnueabihf";
            };
          } // packageOverrides)
      ) {};

    nerves_toolchain_arm_unknown_linux_gnueabihf =
      nerves_toolchain_arm_unknown_linux_gnueabihf_0_10_0;

    nerves_toolchain_armv5tejl_unknown_linux_musleabi_0_10_0
    =
    callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          nerves_0_5_2,
          nerves_toolchain_ctng_0_9_0
        }:
          buildMix ({
            name = "nerves_toolchain_armv5tejl_unknown_linux_musleabi";
            version = "0.10.0";
            src = fetchHex {
              pkg = "nerves_toolchain_armv5tejl_unknown_linux_musleabi";
              version = "0.10.0";
              sha256 =
                "42d7e23d8d6cfc1dfeb756e61f04216533f439727f266e2ccab950ad5afac98e";
            };
            beamDeps  = [ nerves_0_5_2 nerves_toolchain_ctng_0_9_0 ];

            meta = {
              description = ''Nerves Toolchain -
                            armv5tejl-unknown-linux-musleabi'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/nerves-project/toolchains/nerves_toolchain_armv5tejl_unknown_linux_musl";
            };
          } // packageOverrides)
      ) {};

    nerves_toolchain_armv5tejl_unknown_linux_musleabi =
      nerves_toolchain_armv5tejl_unknown_linux_musleabi_0_10_0;

    nerves_toolchain_armv6_rpi_linux_gnueabi_0_10_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          nerves_0_5_2,
          nerves_toolchain_ctng_0_9_0
        }:
          buildMix ({
            name = "nerves_toolchain_armv6_rpi_linux_gnueabi";
            version = "0.10.0";
            src = fetchHex {
              pkg = "nerves_toolchain_armv6_rpi_linux_gnueabi";
              version = "0.10.0";
              sha256 =
                "8dce9d0b83c7c211d140cad9e07cbacdd55815e409b0e38ca68475587f3140d9";
            };
            beamDeps  = [ nerves_0_5_2 nerves_toolchain_ctng_0_9_0 ];

            meta = {
              description = ''Nerves Toolchain - armv6-rpi-linux-gnueabi'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/nerves-project/toolchains/nerves_toolchain_armv6_rpi_linux_gnueabi";
            };
          } // packageOverrides)
      ) {};

    nerves_toolchain_armv6_rpi_linux_gnueabi =
      nerves_toolchain_armv6_rpi_linux_gnueabi_0_10_0;

    nerves_toolchain_ctng_0_8_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "nerves_toolchain_ctng";
            version = "0.8.0";
            src = fetchHex {
              pkg = "nerves_toolchain_ctng";
              version = "0.8.0";
              sha256 =
                "cde24d09a47c4419f8ca01b1790932561db445c9648940e8b8e7a607a5b35221";
            };

            meta = {
              description = ''Nerves Toolchain CTNG - Toolchain Platform'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/nerves-project/toolchains";
            };
          } // packageOverrides)
      ) {};

    nerves_toolchain_ctng_0_9_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "nerves_toolchain_ctng";
            version = "0.9.0";
            src = fetchHex {
              pkg = "nerves_toolchain_ctng";
              version = "0.9.0";
              sha256 =
                "e06521faf341a92578ff086f248b8da51c523409969eaafd2ee789c584dd0e6c";
            };

            meta = {
              description = ''Nerves Toolchain CTNG - Toolchain Platform'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/nerves-project/toolchains";
            };
          } // packageOverrides)
      ) {};

    nerves_toolchain_ctng = nerves_toolchain_ctng_0_9_0;

    nerves_toolchain_i586_unknown_linux_gnu_0_8_0_rc_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          nerves_0_4_8,
          nerves_toolchain_ctng_0_8_0
        }:
          buildMix ({
            name = "nerves_toolchain_i586_unknown_linux_gnu";
            version = "0.8.0-rc.0";
            src = fetchHex {
              pkg = "nerves_toolchain_i586_unknown_linux_gnu";
              version = "0.8.0-rc.0";
              sha256 =
                "cb5adfd9d910653d95b8cecf09060891ab4d7e86108a7ffdf4180055699de56b";
            };
            beamDeps  = [ nerves_0_4_8 nerves_toolchain_ctng_0_8_0 ];

            meta = {
              description = ''Nerves Toolchain - i586-unknown-linux-gnu'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/nerves-project/toolchains/nerves_toolchain_i586_unknown_linux_gnu";
            };
          } // packageOverrides)
      ) {};

    nerves_toolchain_i586_unknown_linux_gnu_0_9_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          nerves_0_4_8,
          nerves_toolchain_ctng_0_8_0
        }:
          buildMix ({
            name = "nerves_toolchain_i586_unknown_linux_gnu";
            version = "0.9.0";
            src = fetchHex {
              pkg = "nerves_toolchain_i586_unknown_linux_gnu";
              version = "0.9.0";
              sha256 =
                "0edaf49b2b4e4518873f803a6b9e3c774a3436aed47f6b71685336d5ba1ac8a6";
            };
            beamDeps  = [ nerves_0_4_8 nerves_toolchain_ctng_0_8_0 ];

            meta = {
              description = ''Nerves Toolchain - i586-unknown-linux-gnu'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/nerves-project/toolchains/nerves_toolchain_i586_unknown_linux_gnu";
            };
          } // packageOverrides)
      ) {};

    nerves_toolchain_i586_unknown_linux_gnu =
      nerves_toolchain_i586_unknown_linux_gnu_0_9_0;

    nerves_toolchain_mipsel_unknown_linux_musl_0_10_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          nerves_0_5_2,
          nerves_toolchain_ctng_0_9_0
        }:
          buildMix ({
            name = "nerves_toolchain_mipsel_unknown_linux_musl";
            version = "0.10.0";
            src = fetchHex {
              pkg = "nerves_toolchain_mipsel_unknown_linux_musl";
              version = "0.10.0";
              sha256 =
                "2ebbd9c8847d6882205b0d01c094318cb987e5c343d1a0a11cef87c6ad8a8e66";
            };
            beamDeps  = [ nerves_0_5_2 nerves_toolchain_ctng_0_9_0 ];

            meta = {
              description = ''Nerves Toolchain - mipsel-unknown-linux-musl'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/nerves-project/toolchains/nerves_toolchain_mipsel_unknown_linux_musl";
            };
          } // packageOverrides)
      ) {};

    nerves_toolchain_mipsel_unknown_linux_musl =
      nerves_toolchain_mipsel_unknown_linux_musl_0_10_0;

    nerves_toolchain_x86_64_unknown_linux_gnu_0_10_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          nerves_0_5_2,
          nerves_toolchain_ctng_0_9_0
        }:
          buildMix ({
            name = "nerves_toolchain_x86_64_unknown_linux_gnu";
            version = "0.10.0";
            src = fetchHex {
              pkg = "nerves_toolchain_x86_64_unknown_linux_gnu";
              version = "0.10.0";
              sha256 =
                "cc9df9d88d97ed06b8f30c6de76996c186bfbfd069de3c4c7dddb6b63771b4ac";
            };
            beamDeps  = [ nerves_0_5_2 nerves_toolchain_ctng_0_9_0 ];

            meta = {
              description = ''Nerves Toolchain - x86_64-unknown-linux-gnu'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/nerves-project/toolchains/nerves_toolchain_x86_64_unknown_linux_gnu";
            };
          } // packageOverrides)
      ) {};

    nerves_toolchain_x86_64_unknown_linux_gnu =
      nerves_toolchain_x86_64_unknown_linux_gnu_0_10_0;

    nerves_toolchain_x86_64_unknown_linux_musl_0_8_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          nerves_0_4_8,
          nerves_toolchain_ctng_0_8_0
        }:
          buildMix ({
            name = "nerves_toolchain_x86_64_unknown_linux_musl";
            version = "0.8.0";
            src = fetchHex {
              pkg = "nerves_toolchain_x86_64_unknown_linux_musl";
              version = "0.8.0";
              sha256 =
                "ee487164c8e602e7d33ff279ff6312b148dbd58146dd4f32761d85c849fb4327";
            };
            beamDeps  = [ nerves_0_4_8 nerves_toolchain_ctng_0_8_0 ];

            meta = {
              description = ''Nerves Toolchain - x86_64-unknown-linux-musl'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/nerves-project/toolchains/nerves_toolchain_x86_64_unknown_linux_musl";
            };
          } // packageOverrides)
      ) {};

    nerves_toolchain_x86_64_unknown_linux_musl =
      nerves_toolchain_x86_64_unknown_linux_musl_0_8_0;

    nerves_uart_0_1_2 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, elixir_make_0_4_0
        }:
          buildMix ({
            name = "nerves_uart";
            version = "0.1.2";
            src = fetchHex {
              pkg = "nerves_uart";
              version = "0.1.2";
              sha256 =
                "c0ed7a6c5010db0c8d1dd482642f1f96f046eeaa1295b767f69079ea6dfc4c51";
            };
            beamDeps  = [ elixir_make_0_4_0 ];

            meta = {
              description = ''Discover and use UARTs and serial ports in
                            Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/nerves-project/nerves_uart";
            };
          } // packageOverrides)
      ) {};

    nerves_uart = nerves_uart_0_1_2;

    nerves_wpa_supplicant_0_3_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, elixir_make_0_4_0
        }:
          buildMix ({
            name = "nerves_wpa_supplicant";
            version = "0.3.0";
            src = fetchHex {
              pkg = "nerves_wpa_supplicant";
              version = "0.3.0";
              sha256 =
                "28574f618d7d6b91ed9cf11c190fe630a7e73f9d868f0d7609aecfd140555845";
            };
            beamDeps  = [ elixir_make_0_4_0 ];

            meta = {
              longDescription = ''Elixir interface to the wpa_supplicant
                                daemon. The wpa_supplicant provides application
                                support for scanning for access points, managing
                                Wi-Fi connections, and handling all of the
                                security and other parameters associated with
                                Wi-Fi.'';
              license = with stdenv.lib.licenses; [ asl20 free ];
              homepage =
                "https://github.com/nerves-project/nerves_wpa_supplicant";
            };
          } // packageOverrides)
      ) {};

    nerves_wpa_supplicant = nerves_wpa_supplicant_0_3_0;

    nest_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "nest";
            version = "0.0.1";
            src = fetchHex {
              pkg = "nest";
              version = "0.0.1";
              sha256 =
                "4092651c14022a285eb4ffb8b6e9c3d6c5937729644fcc88b43f74324bc3bac3";
            };

            meta = {
              longDescription = ''A library for using the Nest API, allowing
                                integration with Nest Thermostats and other Nest
                                devices.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/adamzaninovich/nest";
            };
          } // packageOverrides)
      ) {};

    nest = nest_0_0_1;

    nested_filter_0_1_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "nested_filter";
            version = "0.1.5";
            src = fetchHex {
              pkg = "nested_filter";
              version = "0.1.5";
              sha256 =
                "df30c3dbfc3fdf45750f61d49ea6dd5e3b8f972b3b8bfb9c5a41132a28e252c7";
            };

            meta = {
              longDescription = ''Drill down into a nested map and filter out
                                keys according to user specified values'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/treble37/nested_filter";
            };
          } // packageOverrides)
      ) {};

    nested_filter = nested_filter_0_1_5;

    nested_set_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ecto_1_1_9 }:
          buildMix ({
            name = "nested_set";
            version = "0.0.2";
            src = fetchHex {
              pkg = "nested_set";
              version = "0.0.2";
              sha256 =
                "283fac1cbaf129d29a7ea6b6c050248bdc63631421d395f0b909510c3f7d2e83";
            };
            beamDeps  = [ ecto_1_1_9 ];

            meta = {
              longDescription = ''Nested Set implementation for Ecto/Phoenix.
                                It is our first attempt to make something like
                                acts_as_nested_set in rails. Still in WIP, be
                                cautious if planing to use.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/bansalakhil/elixir_nested_set";
            };
          } // packageOverrides)
      ) {};

    nested_set = nested_set_0_0_2;

    netrc_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "netrc";
            version = "0.0.2";
            src = fetchHex {
              pkg = "netrc";
              version = "0.0.2";
              sha256 =
                "a82b1702d8702a51b17e1756261b316ae3a72ac07bbf04e3a1258cc1210f6000";
            };

            meta = {
              description = ''Read netrc files'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ma2gedev/netrcex";
            };
          } // packageOverrides)
      ) {};

    netrc = netrc_0_0_2;

    netstrings_2_0_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "netstrings";
            version = "2.0.5";
            src = fetchHex {
              pkg = "netstrings";
              version = "2.0.5";
              sha256 =
                "9320b63dbcce6e3c476191088fc431907909d7ad04c5fdbbbe70c5ef9153af6a";
            };

            meta = {
              description = ''Netstrings implementaton'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mwmiller/netstrings_ex";
            };
          } // packageOverrides)
      ) {};

    netstrings = netstrings_2_0_5;

    neural_net_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "neural_net";
            version = "1.0.0";
            src = fetchHex {
              pkg = "neural_net";
              version = "1.0.0";
              sha256 =
                "164cead198d6f8e2ba396346c4c4f8ec8c5b6e6ae00d6915eec902c436779239";
            };

            meta = {
              longDescription = ''NeuralNet is an A.I. library that allows for
                                the construction and training of complex
                                recurrent neural networks. Architectures such as
                                LSTM or GRU can be specified in under 20 lines
                                of code. Any neural network that can be built
                                with the NeuralNet DSL can be trainined with
                                automatically implemented BPTT (back-propagation
                                through time).'';
              license = stdenv.lib.licenses.asl20;
            };
          } // packageOverrides)
      ) {};

    neural_net = neural_net_1_0_0;

    neural_network_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "neural_network";
            version = "0.1.3";
            src = fetchHex {
              pkg = "neural_network";
              version = "0.1.3";
              sha256 =
                "19dc33a002c7d10f762cbaaadef724ced3627cf56697c89ee63d0433e402162b";
            };

            meta = {
              longDescription = ''A neural network made up of layers of neurons
                                connected to each other to form a relationship
                                allowing it to learn.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kblake/neural_network_elixir";
            };
          } // packageOverrides)
      ) {};

    neural_network = neural_network_0_1_3;

    neuron_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "neuron";
            version = "0.2.0";
            src = fetchHex {
              pkg = "neuron";
              version = "0.2.0";
              sha256 =
                "3f6d3aff9d5de5ea98b2689ca8f5580bb1f390a23c8bd8ff1e2f792fd4d8c4d1";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''A GraphQL client for elixir.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/uesteibar/neuron";
            };
          } // packageOverrides)
      ) {};

    neuron = neuron_0_2_0;

    new_relic_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_4,
          lhttpc_1_5_3,
          phoenix_1_3_0_rc_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "new_relic";
            version = "0.1.1";
            src = fetchHex {
              pkg = "new_relic";
              version = "0.1.1";
              sha256 =
                "08fbd4d79b0f203c39653eef97071d449bc3568f8ee426b1d16d04f803ae2a9d";
            };
            beamDeps  = [
                          ecto_2_1_4
                          lhttpc_1_5_3
                          phoenix_1_3_0_rc_2
                          poison_2_2_0
                        ];

            meta = {
              description = ''Elixir library for sending metrics to New
                            Relic.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/romul/newrelic.ex";
            };
          } // packageOverrides)
      ) {};

    new_relic = new_relic_0_1_1;

    new_relixir_0_2_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_4,
          newrelic_0_1_0,
          phoenix_1_3_0_rc_2
        }:
          buildMix ({
            name = "new_relixir";
            version = "0.2.1";
            src = fetchHex {
              pkg = "new_relixir";
              version = "0.2.1";
              sha256 =
                "4523383152ae50cbe017dc6a918c751cb1dfa6cbea2273eb4cfb1154e1979b54";
            };
            beamDeps  = [ ecto_2_1_4 newrelic_0_1_0 phoenix_1_3_0_rc_2 ];

            meta = {
              description = ''New Relic tracking for Elixir applications.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/TheRealReal/new-relixir";
            };
          } // packageOverrides)
      ) {};

    new_relixir = new_relixir_0_2_1;

    newrelic_0_1_0 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          jiffy_0_14_7,
          lhttpc_1_4_0,
          statman_0_5_0
        }:
          buildRebar3 ({
            name = "newrelic";
            version = "0.1.0";
            src = fetchHex {
              pkg = "newrelic";
              version = "0.1.0";
              sha256 =
                "e0e8cee050e4af368d9bde6a749247dde4d0fdc67839df8c54a5e57c8eb882cf";
            };

            beamDeps  = [ jiffy_0_14_7 lhttpc_1_4_0 statman_0_5_0 ];

            meta = {
              description = ''Erlang library for sending metrics to New
                            Relic.'';

              homepage = "https://github.com/wooga/newrelic-erlang";
            };
          } // packageOverrides)
      ) {};

    newrelic = newrelic_0_1_0;

    news_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "news";
            version = "0.3.0";
            src = fetchHex {
              pkg = "news";
              version = "0.3.0";
              sha256 =
                "b8759a3cb0bb40e86d5a5ea65b911a066da4ec197b097be88fb67f6358838124";
            };

            meta = {
              description = ''Publish elixir and erlang new weekly'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zhongwencool/news";
            };
          } // packageOverrides)
      ) {};

    news = news_0_3_0;

    nex_json_schema_0_7_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "nex_json_schema";
            version = "0.7.0";
            src = fetchHex {
              pkg = "nex_json_schema";
              version = "0.7.0";
              sha256 =
                "37bc9595e639e2d29dcdc16c262c05df44f63cedb4f087e88313d412b194fa27";
            };

            meta = {
              longDescription = ''A JSON Schema validator with full support for
                                the draft 4 specification and zero
                                dependencies.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nebo15/nex_json_schema";
            };
          } // packageOverrides)
      ) {};

    nex_json_schema = nex_json_schema_0_7_0;

    nexmo_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_3_0_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "nexmo";
            version = "0.2.0";
            src = fetchHex {
              pkg = "nexmo";
              version = "0.2.0";
              sha256 =
                "1bc4a33bda5ebc30125ffdd642f79f8b5a0e7580c2499829cf3e4287fc1d3d59";
            };
            beamDeps  = [ httpotion_3_0_2 poison_2_2_0 ];

            meta = {
              description = ''[Work in Progress] Nexmo REST API client for
                            Elixir\"'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cbetta/nexmo-elixir";
            };
          } // packageOverrides)
      ) {};

    nexmo = nexmo_0_2_0;

    ngram_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ngram";
            version = "0.0.1";
            src = fetchHex {
              pkg = "ngram";
              version = "0.0.1";
              sha256 =
                "13185be68166d8314ae63f70eceb58a4e00b441d3294633450d4f8a7c565e218";
            };

            meta = {
              description = ''n-gram tokenization and distance calculations'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ardcore/ngram";
            };
          } // packageOverrides)
      ) {};

    ngram = ngram_0_0_1;

    nice_nickname_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_1_4_0 }:
          buildMix ({
            name = "nice_nickname";
            version = "0.0.1";
            src = fetchHex {
              pkg = "nice_nickname";
              version = "0.0.1";
              sha256 =
                "7d5c635290df8fa7a59dbaa22e519102e13ddb8ac4cae5a7a40018c9ff795b42";
            };
            beamDeps  = [ poison_1_4_0 ];

            meta = {
              description = ''A nickname generator and profanity filter for
                            Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/skylerparr/nice_nickname";
            };
          } // packageOverrides)
      ) {};

    nice_nickname = nice_nickname_0_0_1;

    nifsy_0_1_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, elixir_make_0_4_0
        }:
          buildMix ({
            name = "nifsy";
            version = "0.1.0";
            src = fetchHex {
              pkg = "nifsy";
              version = "0.1.0";
              sha256 =
                "722c681f034495f03ea56fe0e4973aa51e80a39e615a9724c2f23ea1aed80830";
            };
            beamDeps  = [ elixir_make_0_4_0 ];

            meta = {
              description = ''A nifty NIF for the FS, providing faster
                            filesystem operations.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/antipax/nifsy";
            };
          } // packageOverrides)
      ) {};

    nifsy = nifsy_0_1_0;

    nifty_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "nifty";
            version = "0.0.3";
            src = fetchHex {
              pkg = "nifty";
              version = "0.0.3";
              sha256 =
                "ef5c6ea64835d3371382c7e042c42aec0b85625b232b4b9e1f2587e1c8e5401e";
            };

            meta = {
              longDescription = ''A semi-useful tool to generate boilerplate
                                when you want to use a NIF in your project. You
                                don`t really want to use a NIF in your project,
                                until you do. Then this might save you writing
                                most of the boilerplate.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rossjones/nifty";
            };
          } // packageOverrides)
      ) {};

    nifty = nifty_0_0_3;

    nile_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "nile";
            version = "0.1.3";
            src = fetchHex {
              pkg = "nile";
              version = "0.1.3";
              sha256 =
                "73a2c8be8507bb39de74eb3fa5ae40e3c40cabef30cd884f67ab6d3400a7bea4";
            };

            meta = {
              description = ''Elixir stream extensions'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/camshaft/nile";
            };
          } // packageOverrides)
      ) {};

    nile = nile_0_1_3;

    nimble_csv_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "nimble_csv";
            version = "0.1.1";
            src = fetchHex {
              pkg = "nimble_csv";
              version = "0.1.1";
              sha256 =
                "87d021ac0144dbab7ec0c1535ca9c821e54d50b5990d6f9d8455a64183c87ebf";
            };

            meta = {
              description = ''A simple and fast CSV parsing and dumping
                            library'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/plataformatec/nimble_csv";
            };
          } // packageOverrides)
      ) {};

    nimble_csv = nimble_csv_0_1_1;

    nimbus_0_3_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, phoenix_html_2_9_3
        }:
          buildMix ({
            name = "nimbus";
            version = "0.3.0";
            src = fetchHex {
              pkg = "nimbus";
              version = "0.3.0";
              sha256 =
                "1adaa1553cf7372bd072d7cb29ca39a964af612fd59df79f9a7294577e4bfce8";
            };
            beamDeps  = [ phoenix_html_2_9_3 ];

            meta = {
              description = ''Nimbus provide more helpers for Phoenix
                            framework.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/khusnetdinov/nimbus";
            };
          } // packageOverrides)
      ) {};

    nimbus = nimbus_0_3_0;

    nimbusex_0_4_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, phoenix_html_2_9_3
        }:
          buildMix ({
            name = "nimbusex";
            version = "0.4.0";
            src = fetchHex {
              pkg = "nimbusex";
              version = "0.4.0";
              sha256 =
                "2c6b37dd0da8c7e96eed20b439e69e50773a630509ee5ea244f9ec001783cb5d";
            };
            beamDeps  = [ phoenix_html_2_9_3 ];

            meta = {
              description = ''Nimbusex provide more helpers for Phoenix
                            framework.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/khusnetdinov/nimbusex";
            };
          } // packageOverrides)
      ) {};

    nimbusex = nimbusex_0_4_0;

    nine_ball_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "nine_ball";
            version = "0.0.1";
            src = fetchHex {
              pkg = "nine_ball";
              version = "0.0.1";
              sha256 =
                "9ca54de485a41dbeecc2a80e068ebd62426e7b48e4384cfda283f1480d8afb4f";
            };

            meta = {
              description = ''nine_ball because eight_ball was taken'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/holyxiaoxin/eight_ball";
            };
          } // packageOverrides)
      ) {};

    nine_ball = nine_ball_0_0_1;

    ninjaproxies_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_1_5_2
        }:
          buildMix ({
            name = "ninjaproxies";
            version = "0.2.0";
            src = fetchHex {
              pkg = "ninjaproxies";
              version = "0.2.0";
              sha256 =
                "5524329d00944690b362d30fef9c4032c03c401cc44d0ad9e98e147f5792fade";
            };
            beamDeps  = [ httpoison_0_11_2 poison_1_5_2 ];

            meta = {
              description = ''Ninjaproxies client library for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zensavona/ninjaproxies";
            };
          } // packageOverrides)
      ) {};

    ninjaproxies = ninjaproxies_0_2_0;

    nio_google_authenticator_2_0_1 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, ecto_2_1_4, pot_0_9_5
        }:
          buildMix ({
            name = "nio_google_authenticator";
            version = "2.0.1";
            src = fetchHex {
              pkg = "nio_google_authenticator";
              version = "2.0.1";
              sha256 =
                "3795612e434a38d5ebbd9b25a0acd19823f74531234656831c3f18798020338e";
            };
            beamDeps  = [ ecto_2_1_4 pot_0_9_5 ];

            meta = {
              longDescription = ''NioGoogleAuthenticator is a collection of
                                Elixir convenience functions to generate secrets
                                and validate tokens used in conjunction with
                                Google Authenticator. It also includes functions
                                that automatically add a secret to an
                                Ecto.Changeset.'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/maxneuvians/nio_google_authenticator";
            };
          } // packageOverrides)
      ) {};

    nio_google_authenticator = nio_google_authenticator_2_0_1;

    nio_google_geocoder_0_7_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_0_0_rc_6,
          httpoison_0_8_3,
          poison_1_5_2
        }:
          buildMix ({
            name = "nio_google_geocoder";
            version = "0.7.0";
            src = fetchHex {
              pkg = "nio_google_geocoder";
              version = "0.7.0";
              sha256 =
                "ba551ad6138b133d6b90ac96c0443aa31724084049059bf15710dac4c1f3e701";
            };
            beamDeps  = [ ecto_2_0_0_rc_6 httpoison_0_8_3 poison_1_5_2 ];

            meta = {
              longDescription = ''NioGoogleGeocoder is a collection of Elixir
                                convenience functions to geocode a single, or
                                list of, addresses. It also includes a function
                                that automatically adds a geo location to an
                                `Ecto.Changeset`.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/maxneuvians/nio_google_geocoder";
            };
          } // packageOverrides)
      ) {};

    nio_google_geocoder = nio_google_geocoder_0_7_0;

    nitro_1_4_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "nitro";
            version = "1.4.0";
            src = fetchHex {
              pkg = "nitro";
              version = "1.4.0";
              sha256 =
                "837c4dc184d298143a495f1466f970737a9efc1c05e73f837ff4ea79f2e7643f";
            };

            meta = {
              description = ''NITRO HTML5 Enterprise DSL'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/synrc/nitro";
            };
          } // packageOverrides)
      ) {};

    nitro = nitro_1_4_0;

    nitroglycerin_0_2_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "nitroglycerin";
            version = "0.2.3";
            src = fetchHex {
              pkg = "nitroglycerin";
              version = "0.2.3";
              sha256 =
                "1a87724d0748ebc37f10f9a82346f029de230826aa95faff5bd631bf51a53939";
            };

            meta = {
              description = ''A library for managing one-time pad encryption'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jphastings/nitroglycerin.ex";
            };
          } // packageOverrides)
      ) {};

    nitroglycerin = nitroglycerin_0_2_3;

    njord_1_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, httpoison_0_9_2 }:
          buildMix ({
            name = "njord";
            version = "1.0.2";
            src = fetchHex {
              pkg = "njord";
              version = "1.0.2";
              sha256 =
                "bae8c58a0136bd84c02d85380a580f4e10854fe4e728771b0e6e6d2114cc90a9";
            };
            beamDeps  = [ httpoison_0_9_2 ];

            meta = {
              description = ''Wrapper around HTTPoison to build client REST API
                            libraries as specifications.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gmtprime/njord";
            };
          } // packageOverrides)
      ) {};

    njord = njord_1_0_2;

    nlocks_1_1_2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "nlocks";
            version = "1.1.2";
            src = fetchHex {
              pkg = "nlocks";
              version = "1.1.2";
              sha256 =
                "004f6ea8adc19d1fb7cdabb805108ab2529609117ab08ff4b5897fb06fec8630";
            };

            meta = {
              description = ''Native spinlocks'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/g-andrade/nlocks";
            };
          } // packageOverrides)
      ) {};

    nlocks = nlocks_1_1_2;

    noa_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "noa";
            version = "0.1.0";
            src = fetchHex {
              pkg = "noa";
              version = "0.1.0";
              sha256 =
                "f41a165b2c1553eb45b60c052c1cbd2afc9d6f3313c5cad9741a3bde4d79dbbb";
            };

            meta = {
              description = ''OAuth2'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/handnot2/noa";
            };
          } // packageOverrides)
      ) {};

    noa = noa_0_1_0;

    noaa_observations_0_2_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_5_0,
          io_ansi_table_0_2_3,
          logger_file_backend_0_0_9
        }:
          buildMix ({
            name = "noaa_observations";
            version = "0.2.3";
            src = fetchHex {
              pkg = "noaa_observations";
              version = "0.2.3";
              sha256 =
                "a05f05d1af3406a026428ec6cf13682e12197b06e11a647d9ac328c6668e5aeb";
            };
            beamDeps  = [
                          httpoison_0_5_0
                          io_ansi_table_0_2_3
                          logger_file_backend_0_0_9
                        ];

            meta = {
              description = ''Prints NOAA Observations to STDOUT in a table
                            with borders and colors.'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/RaymondLoranger/noaa_observations";
            };
          } // packageOverrides)
      ) {};

    noaa_observations = noaa_observations_0_2_3;

    node_manager_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "node_manager";
            version = "0.1.1";
            src = fetchHex {
              pkg = "node_manager";
              version = "0.1.1";
              sha256 =
                "d39a512c825ba71c0a352f1499bab23e318045002bc622f0e61568de2f522f79";
            };

            meta = {
              description = ''Manage node connections and communications'';

              homepage = "https://github.com/fourkio/node_manager";
            };
          } // packageOverrides)
      ) {};

    node_manager = node_manager_0_1_1;

    nodefinder_1_7_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "nodefinder";
            version = "1.7.0";
            src = fetchHex {
              pkg = "nodefinder";
              version = "1.7.0";
              sha256 =
                "92692b0e39361646f3fd6dd86b3176020f9c9f7cafdb819fcbba0dfb672b2180";
            };

            meta = {
              description = ''Strategies For Automatic Node Discovery'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/okeuday/nodefinder";
            };
          } // packageOverrides)
      ) {};

    nodefinder_1_7_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "nodefinder";
            version = "1.7.1";
            src = fetchHex {
              pkg = "nodefinder";
              version = "1.7.1";
              sha256 =
                "c7f35a77f58324ada2505b95944568c1c0f2a768ae4f8a62419afb39aee2ffd3";
            };

            meta = {
              description = ''Strategies For Automatic Node Discovery'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/okeuday/nodefinder";
            };
          } // packageOverrides)
      ) {};

    nodefinder = nodefinder_1_7_1;

    noise_0_0_5 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "noise";
            version = "0.0.5";
            src = fetchHex {
              pkg = "noise";
              version = "0.0.5";
              sha256 =
                "f4150dcb6fe1f69960e5e4636b55f16ce09d02d3cffa342fcb8a85cc30fb6c37";
            };

            meta = {
              description = ''A pseudo-random noise generation library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/joshforisha/noise";
            };
          } // packageOverrides)
      ) {};

    noise = noise_0_0_5;

    nomad_0_7_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          friendly_1_0_1,
          goth_0_2_1,
          httpoison_0_8_3,
          table_rex_0_8_3
        }:
          buildMix ({
            name = "nomad";
            version = "0.7.1";
            src = fetchHex {
              pkg = "nomad";
              version = "0.7.1";
              sha256 =
                "a07945eb705795430819a84e88ee2e9f8ed7efd44f86fb93831bb140386e32d1";
            };
            beamDeps  = [
                          friendly_1_0_1
                          goth_0_2_1
                          httpoison_0_8_3
                          table_rex_0_8_3
                        ];

            meta = {
              description = ''Create cloud portable Elixir and Phoenix apps.
                            Write once, use everywhere!'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sashaafm/nomad";
            };
          } // packageOverrides)
      ) {};

    nomad = nomad_0_7_1;

    nomadex_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          poison_3_1_0,
          tesla_0_7_1
        }:
          buildMix ({
            name = "nomadex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "nomadex";
              version = "0.1.0";
              sha256 =
                "2a7d6e844b4b28961f8f1189525a3aa09c40eba5eb557a8054d7998b19f9c14b";
            };
            beamDeps  = [ poison_3_1_0 tesla_0_7_1 ];

            meta = {
              description = ''HashiCorp Nomad`s API client in Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hauleth/nomadex";
            };
          } // packageOverrides)
      ) {};

    nomadex = nomadex_0_1_0;

    normalixr_0_4_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_0_rc_5,
          exactor_2_2_3
        }:
          buildMix ({
            name = "normalixr";
            version = "0.4.0";
            src = fetchHex {
              pkg = "normalixr";
              version = "0.4.0";
              sha256 =
                "45898de612b3dd4f999ffa5d3e5611184e7e20a710b3cd9827865f358c27d951";
            };
            beamDeps  = [ ecto_2_1_0_rc_5 exactor_2_2_3 ];

            meta = {
              description = ''Normalization and backfilling Ecto Schemas'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/theemuts/normalixr";
            };
          } // packageOverrides)
      ) {};

    normalixr = normalixr_0_4_0;

    normalize_email_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, is_email_0_0_2 }:
          buildMix ({
            name = "normalize_email";
            version = "0.0.1";
            src = fetchHex {
              pkg = "normalize_email";
              version = "0.0.1";
              sha256 =
                "ac5864ecf0d002ecbc56f9296bff7c01fc1d7e2e84e2529f7726f1a068f5d584";
            };
            beamDeps  = [ is_email_0_0_2 ];

            meta = {
              description = ''Normalize an email address'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/johnotander/normalize_email";
            };
          } // packageOverrides)
      ) {};

    normalize_email = normalize_email_0_0_1;

    normalize_url_0_3_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "normalize_url";
            version = "0.3.1";
            src = fetchHex {
              pkg = "normalize_url";
              version = "0.3.1";
              sha256 =
                "7adb13a359bc407985414b06241cc86e5fab35dbd13ed92c32e031ad7925bd58";
            };

            meta = {
              description = ''Normalize a url'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/johnotander/normalize_url";
            };
          } // packageOverrides)
      ) {};

    normalize_url = normalize_url_0_3_1;

    nostrum_0_2_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          gen_stage_0_12_0,
          httpoison_0_11_2,
          poison_3_1_0,
          websocket_client_1_2_1
        }:
          buildMix ({
            name = "nostrum";
            version = "0.2.1";
            src = fetchHex {
              pkg = "nostrum";
              version = "0.2.1";
              sha256 =
                "4df5cfc73357eaf1057bf580e71a8b1ec1cbb3a6024ce4f0f42db9d300ddff7e";
            };
            beamDeps  = [
                          gen_stage_0_12_0
                          httpoison_0_11_2
                          poison_3_1_0
                          websocket_client_1_2_1
                        ];

            meta = {
              description = ''An elixir Discord library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Kraigie/nostrum/";
            };
          } // packageOverrides)
      ) {};

    nostrum = nostrum_0_2_1;

    not_markdown_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "not_markdown";
            version = "0.0.1";
            src = fetchHex {
              pkg = "not_markdown";
              version = "0.0.1";
              sha256 =
                "cd99afe4870f8ec3093575f95890ea0d5d2e0c7b1eaceed9258eb8ccd8fe7341";
            };

            meta = {
              description = ''Simple text formatting parser'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/EddyShure/not_markdown";
            };
          } // packageOverrides)
      ) {};

    not_markdown = not_markdown_0_0_1;

    not_qwerty123_1_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, gettext_0_13_1 }:
          buildMix ({
            name = "not_qwerty123";
            version = "1.2.0";
            src = fetchHex {
              pkg = "not_qwerty123";
              version = "1.2.0";
              sha256 =
                "ad940064285832d19b3e4086a76bcf26fcd319f272b98cfbe8b0ca488f9ff4ee";
            };
            beamDeps  = [ gettext_0_13_1 ];

            meta = {
              description = ''Library to check password strength and generate
                            random passwords.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/riverrun/not_qwerty123";
            };
          } // packageOverrides)
      ) {};

    not_qwerty123_2_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, gettext_0_13_1 }:
          buildMix ({
            name = "not_qwerty123";
            version = "2.0.0";
            src = fetchHex {
              pkg = "not_qwerty123";
              version = "2.0.0";
              sha256 =
                "d4f06516140d256062c1c44f8961f017ae3ead954618e45a48e6a86e2c31d142";
            };
            beamDeps  = [ gettext_0_13_1 ];

            meta = {
              description = ''Library to check password strength and generate
                            random passwords.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/riverrun/not_qwerty123";
            };
          } // packageOverrides)
      ) {};

    not_qwerty123 = not_qwerty123_2_0_0;

    notifier_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "notifier";
            version = "0.0.1";
            src = fetchHex {
              pkg = "notifier";
              version = "0.0.1";
              sha256 =
                "fb4e7fcba477a8303fc5f8b9402d0f44ea9a936814638aa527654714de2bbed7";
            };

            meta = {
              description = ''OSX notifications in a pluggable architecture for
                            other kinds of notifications.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/apdunston/notifier";
            };
          } // packageOverrides)
      ) {};

    notifier = notifier_0_0_1;

    notify_ex_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "notify_ex";
            version = "0.2.0";
            src = fetchHex {
              pkg = "notify_ex";
              version = "0.2.0";
              sha256 =
                "460c5efdd08d7fe128d0c3b70e44217a1f270d95eaac48fcd8f2fe46f84a1a29";
            };

            meta = {
              description = ''Notify_ex is just a simple wrapper around
                            `notify-send` for Unix systems.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/aguxez/notify_ex";
            };
          } // packageOverrides)
      ) {};

    notify_ex = notify_ex_0_2_0;

    number_0_5_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, decimal_1_3_1 }:
          buildMix ({
            name = "number";
            version = "0.5.1";
            src = fetchHex {
              pkg = "number";
              version = "0.5.1";
              sha256 =
                "76ac2fb1577e02d4ea92a5e75f35b13fe81e4485525ba659fbfe10a74f3f5a94";
            };
            beamDeps  = [ decimal_1_3_1 ];

            meta = {
              description = ''Convert numbers to various string formats, such
                            as currency'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/danielberkompas/number";
            };
          } // packageOverrides)
      ) {};

    number = number_0_5_1;

    numbers_3_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "numbers";
            version = "3.0.0";
            src = fetchHex {
              pkg = "numbers";
              version = "3.0.0";
              sha256 =
                "6aec789d3bf45afa9aaab5fad16b76444e52f2a12680de5b4e2ecdff643fc925";
            };

            meta = {
              longDescription = ''Numbers dispatches on any numeric type that
                                follows the `Numeric` behaviour. This allows you
                                to create composite types working with _any_
                                numeric type (Decimal, Ratio, Tensor,
                                ComplexNum, ???)!'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Qqwy/elixir_number/";
            };
          } // packageOverrides)
      ) {};

    numbers_3_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "numbers";
            version = "3.0.1";
            src = fetchHex {
              pkg = "numbers";
              version = "3.0.1";
              sha256 =
                "1868376c24b13f077f9e4d840f9ac3055414499f9388a3b0ffa3c792cead2f01";
            };

            meta = {
              longDescription = ''Numbers dispatches on any numeric type that
                                follows the `Numeric` behaviour. This allows you
                                to create composite types working with _any_
                                numeric type (Decimal, Ratio, Tensor,
                                ComplexNum, ???)!'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Qqwy/elixir_number/";
            };
          } // packageOverrides)
      ) {};

    numbers = numbers_3_0_1;

    numerix_0_4_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, flow_0_12_0 }:
          buildMix ({
            name = "numerix";
            version = "0.4.2";
            src = fetchHex {
              pkg = "numerix";
              version = "0.4.2";
              sha256 =
                "61bcf6c40905015cd16b16876ea880464ae169b7d9a180d9e1ff8bb46e1197a1";
            };
            beamDeps  = [ flow_0_12_0 ];

            meta = {
              longDescription = ''A collection of useful mathematical functions
                                in Elixir with a slant towards statistics,
                                linear algebra and machine learning'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/safwank/Numerix";
            };
          } // packageOverrides)
      ) {};

    numerix = numerix_0_4_2;

    numero_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "numero";
            version = "0.1.2";
            src = fetchHex {
              pkg = "numero";
              version = "0.1.2";
              sha256 =
                "a40bc3d7b5affcb657d0a9021a7a071219a197b28a1280c2e5d8410710f9c57b";
            };

            meta = {
              description = ''A micro library for converting non-english
                            digits.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/alisinabh/Numero";
            };
          } // packageOverrides)
      ) {};

    numero = numero_0_1_2;

    numex_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "numex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "numex";
              version = "0.1.0";
              sha256 =
                "909b358f9f294f86f279b696785a7116ea92f3d5719b134b1f457b79292f9212";
            };

            meta = {
              description = ''Collection of mathematical functions'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ponchomf/postgrex";
            };
          } // packageOverrides)
      ) {};

    numex = numex_0_1_0;

    numverify_1_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_9_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "numverify";
            version = "1.0.0";
            src = fetchHex {
              pkg = "numverify";
              version = "1.0.0";
              sha256 =
                "dff6e26862c6feecde8dd1783b10030bf7a61fd89eb0afdcfaad618577ad0f99";
            };
            beamDeps  = [ httpoison_0_9_2 poison_3_1_0 ];

            meta = {
              description = ''Numverify API client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sotojuan/numverify";
            };
          } // packageOverrides)
      ) {};

    numverify = numverify_1_0_0;

    nvim_0_4_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          logger_file_backend_0_0_9,
          msgpack_rpc_0_1_2
        }:
          buildMix ({
            name = "nvim";
            version = "0.4.2";
            src = fetchHex {
              pkg = "nvim";
              version = "0.4.2";
              sha256 =
                "b34358a9731bb9be0c14027033b9cbb2f9311bec10422c5cf25d876331e72acc";
            };
            beamDeps  = [ logger_file_backend_0_0_9 msgpack_rpc_0_1_2 ];

            meta = {
              description = ''Neovim elixir host'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/dm1try/nvim";
            };
          } // packageOverrides)
      ) {};

    nvim = nvim_0_4_2;

    oanda_api_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "oanda_api";
            version = "0.1.0";
            src = fetchHex {
              pkg = "oanda_api";
              version = "0.1.0";
              sha256 =
                "fcd9a23f31333a8e0af9d2085eab339fb80954d0b548cee05ec40f5d8bb105d4";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''Oanda Elixir client wrapper'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/danieledangeli/oanda_elixir";
            };
          } // packageOverrides)
      ) {};

    oanda_api = oanda_api_0_1_0;

    oauth2_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_8_6,
          httpoison_0_11_2,
          plug_1_3_5,
          poison_1_5_2
        }:
          buildMix ({
            name = "oauth2";
            version = "0.3.0";
            src = fetchHex {
              pkg = "oauth2";
              version = "0.3.0";
              sha256 =
                "ee23e6fb6ac84abce23713ba93f1df2fd368c9ad7b9288f0ef6fcec0e0249043";
            };
            beamDeps  = [
                          hackney_1_8_6 httpoison_0_11_2 plug_1_3_5 poison_1_5_2
                        ];

            meta = {
              description = ''An Elixir OAuth 2.0 Client Library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/scrogson/oauth2";
            };
          } // packageOverrides)
      ) {};

    oauth2_0_6_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          mimetype_parser_0_1_2,
          poison_1_0_2
        }:
          buildMix ({
            name = "oauth2";
            version = "0.6.0";
            src = fetchHex {
              pkg = "oauth2";
              version = "0.6.0";
              sha256 =
                "1fcc76a12fcaa57392c0288be90df0eabd898c0982944c67d0e84e980c423e10";
            };
            beamDeps  = [ httpoison_0_11_2 mimetype_parser_0_1_2 poison_1_0_2
                      ];

            meta = {
              description = ''An Elixir OAuth 2.0 Client Library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/scrogson/oauth2";
            };
          } // packageOverrides)
      ) {};

    oauth2_0_7_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, hackney_1_8_6 }:
          buildMix ({
            name = "oauth2";
            version = "0.7.0";
            src = fetchHex {
              pkg = "oauth2";
              version = "0.7.0";
              sha256 =
                "93a88d852ec87429a80ea1f395f328a50eb0a9fc552c3929fbf61745a74d3989";
            };
            beamDeps  = [ hackney_1_8_6 ];

            meta = {
              description = ''An Elixir OAuth 2.0 Client Library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/scrogson/oauth2";
            };
          } // packageOverrides)
      ) {};

    oauth2_0_8_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, hackney_1_8_6 }:
          buildMix ({
            name = "oauth2";
            version = "0.8.3";
            src = fetchHex {
              pkg = "oauth2";
              version = "0.8.3";
              sha256 =
                "a2ae2391d296fb15c0858a0fe6b5c24aec6ae006f4865ea5b3d8838b2de53f9e";
            };
            beamDeps  = [ hackney_1_8_6 ];

            meta = {
              description = ''An Elixir OAuth 2.0 Client Library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/scrogson/oauth2";
            };
          } // packageOverrides)
      ) {};

    oauth2_0_9_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, hackney_1_8_6 }:
          buildMix ({
            name = "oauth2";
            version = "0.9.1";
            src = fetchHex {
              pkg = "oauth2";
              version = "0.9.1";
              sha256 =
                "e727bd64908ebf2e1f113800141122d3c36ef834707f08b3ca4abca52267bbd0";
            };
            beamDeps  = [ hackney_1_8_6 ];

            meta = {
              description = ''An Elixir OAuth 2.0 Client Library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/scrogson/oauth2";
            };
          } // packageOverrides)
      ) {};

    oauth2 = oauth2_0_9_1;

    oauth2_erlang_0_6_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "oauth2_erlang";
            version = "0.6.1";
            src = fetchHex {
              pkg = "oauth2_erlang";
              version = "0.6.1";
              sha256 =
                "dc60e92de379fd27c3b9296e2368e97797233a092297d41f47f3a72846b2a974";
            };

            meta = {
              description = ''Erlang OAuth 2.0 implementation'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kivra/oauth2";
            };
          } // packageOverrides)
      ) {};

    oauth2_erlang = oauth2_erlang_0_6_1;

    oauth2_server_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          comeonin_2_6_0,
          ecto_1_1_9,
          poison_1_0_2
        }:
          buildMix ({
            name = "oauth2_server";
            version = "0.1.1";
            src = fetchHex {
              pkg = "oauth2_server";
              version = "0.1.1";
              sha256 =
                "b4bdee762f58d0bb2b11c3c6ba5e91cbaab394e5e7777bc968f86dfe0b8ed092";
            };
            beamDeps  = [ comeonin_2_6_0 ecto_1_1_9 poison_1_0_2 ];

            meta = {
              description = ''An elixir Oauth 2.0 server'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kevinbaisas/oauth2_server";
            };
          } // packageOverrides)
      ) {};

    oauth2_server = oauth2_server_0_1_1;

    oauth2cli_0_0_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_0_4,
          hackney_1_8_6,
          httpoison_0_6_2,
          plug_1_1_7,
          poison_1_5_2
        }:
          buildMix ({
            name = "oauth2cli";
            version = "0.0.4";
            src = fetchHex {
              pkg = "oauth2cli";
              version = "0.0.4";
              sha256 =
                "16645e7bb9b3af13d1187da955403ff70c0cdaded278d0c51503ea6c29172b5b";
            };
            beamDeps  = [
                          cowboy_1_0_4
                          hackney_1_8_6
                          httpoison_0_6_2
                          plug_1_1_7
                          poison_1_5_2
                        ];

            meta = {
              description = ''Simple OAuth2 client '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mgamini/oauth2cli-elixir";
            };
          } // packageOverrides)
      ) {};

    oauth2cli = oauth2cli_0_0_4;

    oauth2ex_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          exjsx_3_2_1,
          httpoison_0_11_2,
          plug_1_3_5,
          timex_3_1_15
        }:
          buildMix ({
            name = "oauth2ex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "oauth2ex";
              version = "0.1.0";
              sha256 =
                "3f8eb10138fbf074836682ce93c851e3658e10eaef7641ef01a540ba1cce53b5";
            };
            beamDeps  = [
                          cowboy_1_1_2
                          exjsx_3_2_1
                          httpoison_0_11_2
                          plug_1_3_5
                          timex_3_1_15
                        ];

            meta = {
              description = ''An OAuth 2.0 client library for elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/parroty/oauth2ex";
            };
          } // packageOverrides)
      ) {};

    oauth2ex = oauth2ex_0_1_0;

    oauther_1_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "oauther";
            version = "1.0.2";
            src = fetchHex {
              pkg = "oauther";
              version = "1.0.2";
              sha256 =
                "2b65e6408600d5daed7bb1b108533624b6c34491f0278b44013400aa7b551e4d";
            };

            meta = {
              description = ''Library to authenticate with OAuth 1.0
                            protocol.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/lexmag/oauther";
            };
          } // packageOverrides)
      ) {};

    oauther_1_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "oauther";
            version = "1.1.0";
            src = fetchHex {
              pkg = "oauther";
              version = "1.1.0";
              sha256 =
                "0bacc6728ab94365e6cc0667305c68fa279de377cdc159565931cf0912a39522";
            };

            meta = {
              description = ''Library to authenticate with OAuth 1.0
                            protocol.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/lexmag/oauther";
            };
          } // packageOverrides)
      ) {};

    oauther = oauther_1_1_0;

    oauthex_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_8_3,
          phoenix_1_3_0_rc_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "oauthex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "oauthex";
              version = "0.1.0";
              sha256 =
                "0124c7d0666dfb73305544c0e86e05cd23c036bbd476a7d23f619846d7618f5f";
            };
            beamDeps  = [ httpoison_0_8_3 phoenix_1_3_0_rc_2 poison_2_2_0 ];

            meta = {
              description = ''Oauth2 client for Phoenix.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/h1u2i3/oauthex";
            };
          } // packageOverrides)
      ) {};

    oauthex = oauthex_0_1_0;

    obelisk_0_10_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          anubis_0_1_0,
          calliope_0_3_0,
          chronos_0_3_9,
          cowboy_1_0_4,
          earmark_0_1_19,
          mock_0_1_3,
          plug_1_1_7,
          rss_0_2_1
        }:
          buildMix ({
            name = "obelisk";
            version = "0.10.0";
            src = fetchHex {
              pkg = "obelisk";
              version = "0.10.0";
              sha256 =
                "faf46188e3f79c8ac512ae104016f18d05598198feb35a09c8936c548dfba06e";
            };
            beamDeps  = [
                          anubis_0_1_0
                          calliope_0_3_0
                          chronos_0_3_9
                          cowboy_1_0_4
                          earmark_0_1_19
                          mock_0_1_3
                          plug_1_1_7
                          rss_0_2_1
                        ];

            meta = {
              longDescription = '' obelisk is a static site generator for
                                Elixir. It is inspired by jekyll, with the goal
                                of being fast and simple to use and extend. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bennyhallett/obelisk";
            };
          } // packageOverrides)
      ) {};

    obelisk = obelisk_0_10_0;

    observer_cli_1_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, recon_2_3_2 }:
          buildRebar3 ({
            name = "observer_cli";
            version = "1.1.0";
            src = fetchHex {
              pkg = "observer_cli";
              version = "1.1.0";
              sha256 =
                "c88786a07207a80b071ea38e1a71a8abd7323ecbf705660127009b2038c5a1d1";
            };

            beamDeps  = [ recon_2_3_2 ];

            meta = {
              description = ''Visualize Erlang Nodes On The Command Line'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zhongwencool/observer_cli";
            };
          } // packageOverrides)
      ) {};

    observer_cli = observer_cli_1_1_0;

    oceanex_0_2_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          bang_0_1_1,
          httpoison_0_8_3,
          poison_2_2_0
        }:
          buildMix ({
            name = "oceanex";
            version = "0.2.3";
            src = fetchHex {
              pkg = "oceanex";
              version = "0.2.3";
              sha256 =
                "a5e1dd7131d9218dc7b422bae510e296b7d4bdf3e6b6b884e3c3f7ceb58c6a09";
            };
            beamDeps  = [ bang_0_1_1 httpoison_0_8_3 poison_2_2_0 ];

            meta = {
              description = ''Digital Ocean API client.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mustafaturan/oceanex";
            };
          } // packageOverrides)
      ) {};

    oceanex = oceanex_0_2_3;

    octet_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "octet";
            version = "0.0.2";
            src = fetchHex {
              pkg = "octet";
              version = "0.0.2";
              sha256 =
                "12c7d7cff035f48139e7304913e7c227ce5bf95508ad8096ed510328d916ede3";
            };

            meta = {
              description = ''Octet string converter'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kiennt/octet";
            };
          } // packageOverrides)
      ) {};

    octet = octet_0_0_2;

    octicons_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_2_2_0 }:
          buildMix ({
            name = "octicons";
            version = "0.3.0";
            src = fetchHex {
              pkg = "octicons";
              version = "0.3.0";
              sha256 =
                "07594fd2c1fdde4d5b04c0d04e84bfa509c2492353bc443ac5fba802f390147e";
            };
            beamDeps  = [ poison_2_2_0 ];

            meta = {
              description = ''Provides the SVG versions of GitHub`s Octicons to
                            an Elixir application'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lee-dohm/octicons-ex";
            };
          } // packageOverrides)
      ) {};

    octicons = octicons_0_3_0;

    octokit_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_10_0,
          poison_1_0_2,
          timex_3_1_15
        }:
          buildMix ({
            name = "octokit";
            version = "0.2.0";
            src = fetchHex {
              pkg = "octokit";
              version = "0.2.0";
              sha256 =
                "e20e7a9e566ed128688572860370caee44f8af97c95e07e9ab2b47f0c8a45768";
            };
            beamDeps  = [ httpoison_0_10_0 poison_1_0_2 timex_3_1_15 ];

            meta = {
              description = ''An Elixir library for accessing the GitHub
                            API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lee-dohm/octokit.ex";
            };
          } // packageOverrides)
      ) {};

    octokit = octokit_0_2_0;

    odata_0_1_5 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_1_0_2
        }:
          buildMix ({
            name = "odata";
            version = "0.1.5";
            src = fetchHex {
              pkg = "odata";
              version = "0.1.5";
              sha256 =
                "fd8b4f7165c7fda7a22811b8d828be0bd0438444b48fa3da64f199ee9993090e";
            };
            beamDeps  = [ httpoison_0_11_2 poison_1_0_2 ];

            meta = {
              description = ''OData for Elixir, or something resembling it'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/craigp/elixir-odata";
            };
          } // packageOverrides)
      ) {};

    odata = odata_0_1_5;

    oddsshark_0_4_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "oddsshark";
            version = "0.4.1";
            src = fetchHex {
              pkg = "oddsshark";
              version = "0.4.1";
              sha256 =
                "b45040c3875c430b0c9536c216e95daed13211244a1c5d386f635760f592ddd5";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''OddsShark API wrapper in Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/krmannix/oddsshark";
            };
          } // packageOverrides)
      ) {};

    oddsshark = oddsshark_0_4_1;

    odgn_json_pointer_1_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "odgn_json_pointer";
            version = "1.2.0";
            src = fetchHex {
              pkg = "odgn_json_pointer";
              version = "1.2.0";
              sha256 =
                "fd99e3d11e4d2a52fd3b4ee5d3d1fb1f1d316ebaf1b7e699e563c813cc7f8e77";
            };

            meta = {
              description = ''This is an implementation of JSON Pointer (RFC
                            6901) for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/odogono/elixir-jsonpointer";
            };
          } // packageOverrides)
      ) {};

    odgn_json_pointer = odgn_json_pointer_1_2_0;

    odin_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "odin";
            version = "0.0.1";
            src = fetchHex {
              pkg = "odin";
              version = "0.0.1";
              sha256 =
                "17951e0c8c73f10b38e4110e6ecefe507b4ea6203bcea7d55e34320be60b5a4a";
            };

            meta = {
              description = ''elixir toolkit for building command-line
                            interfaces.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/plus-eg/odin";
            };
          } // packageOverrides)
      ) {};

    odin = odin_0_0_1;

    odo_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "odo";
            version = "0.1.0";
            src = fetchHex {
              pkg = "odo";
              version = "0.1.0";
              sha256 =
                "e8b52311c8f5100bfa07876c7afdb49e2be9ba10f3d34781f10be43d1c51573c";
            };

            meta = {
              longDescription = ''Odo is a simple GenServer based token bucket
                                which can be used for communicating with remote
                                APIs. It lets you know when it`s safe to
                                proceed, given a particular rate limit.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/nigelsmith/odo";
            };
          } // packageOverrides)
      ) {};

    odo = odo_0_1_0;

    odt_potion_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "odt_potion";
            version = "0.0.1";
            src = fetchHex {
              pkg = "odt_potion";
              version = "0.0.1";
              sha256 =
                "f2c429129dc1e636dbd3563750c667315aff650ddfe7aefe06991299f76f35bd";
            };

            meta = {
              description = ''Substitute placeholders in ODT`s with custom
                            information'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/andrewcottage/odt_potion";
            };
          } // packageOverrides)
      ) {};

    odt_potion = odt_potion_0_0_1;

    oembed_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exconstructor_1_1_0,
          floki_0_17_2,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "oembed";
            version = "0.1.1";
            src = fetchHex {
              pkg = "oembed";
              version = "0.1.1";
              sha256 =
                "4015c02c982221659003cb4a1a7751d38d19f9deceb415a931913b4f88840f4d";
            };
            beamDeps  = [
                          exconstructor_1_1_0
                          floki_0_17_2
                          httpoison_0_11_2
                          poison_3_1_0
                        ];

            meta = {
              description = ''oEmbed consumer library for Elixir
                            applications.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/r8/elixir-oembed";
            };
          } // packageOverrides)
      ) {};

    oembed = oembed_0_1_1;

    ofex_0_2_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          sweet_xml_0_6_5,
          timex_3_1_15
        }:
          buildMix ({
            name = "ofex";
            version = "0.2.1";
            src = fetchHex {
              pkg = "ofex";
              version = "0.2.1";
              sha256 =
                "da0568ad565774b7603179eff2f4d3763724a1ea74f4338d9b02813cfc4e83a0";
            };
            beamDeps  = [ sweet_xml_0_6_5 timex_3_1_15 ];

            meta = {
              description = ''A simple parser for Open Financial Exchange (OFX)
                            data in elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jjcarstens/ofex";
            };
          } // packageOverrides)
      ) {};

    ofex = ofex_0_2_1;

    og_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, apex_1_0_0 }:
          buildMix ({
            name = "og";
            version = "0.2.0";
            src = fetchHex {
              pkg = "og";
              version = "0.2.0";
              sha256 =
                "cdf79c94f38286079f20ebaa27e0dcd35dbeb701e0b0f0c010c187373fe0b6db";
            };
            beamDeps  = [ apex_1_0_0 ];

            meta = {
              description = ''Og is a small collection of debugging functions
                            for use during development.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/stephenmoloney/og";
            };
          } // packageOverrides)
      ) {};

    og_1_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          apex_1_0_0,
          secure_log_formatter_1_1_0
        }:
          buildMix ({
            name = "og";
            version = "1.1.1";
            src = fetchHex {
              pkg = "og";
              version = "1.1.1";
              sha256 =
                "ed2819870ac62f4f154ebbcd2030bf6c0df6951c1145c2e5f34b3a74d41e2df0";
            };
            beamDeps  = [ apex_1_0_0 secure_log_formatter_1_1_0 ];

            meta = {
              description = ''Og is a small collection of debugging functions
                            for use during development.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/stephenmoloney/og";
            };
          } // packageOverrides)
      ) {};

    og = og_1_1_1;

    oidcc_1_4_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, erljwt_1_0_0 }:
          buildRebar3 ({
            name = "oidcc";
            version = "1.4.0";
            src = fetchHex {
              pkg = "oidcc";
              version = "1.4.0";
              sha256 =
                "05d806cf38803e179de9a2f03a167acf8d388d84ba95843b89df809436b460c7";
            };

            buildPlugins  = [ rebar3_lint rebar3_run ];

            beamDeps  = [ erljwt_1_0_0 ];

            meta = {
              description = ''an easy to use OpenID Connect client library'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/indigo-dc/oidcc";
            };
          } // packageOverrides)
      ) {};

    oidcc = oidcc_1_4_0;

    oidcc_cowboy_1_4_0 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_0_4,
          oidcc_1_4_0
        }:
          buildRebar3 ({
            name = "oidcc_cowboy";
            version = "1.4.0";
            src = fetchHex {
              pkg = "oidcc_cowboy";
              version = "1.4.0";
              sha256 =
                "47051d2dc3531ca6d048cee7975a2f28f105ac68bb66b0c28cc2d4c99584d56a";
            };

            buildPlugins  = [
                              rebar3_lint rebar3_proper rebar3_auto rebar3_run
                            ];

            beamDeps  = [ cowboy_1_0_4 oidcc_1_4_0 ];

            meta = {
              description = ''OpenId Connect cowboy handler'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/indigo-dc/oidcc_cowboy";
            };
          } // packageOverrides)
      ) {};

    oidcc_cowboy = oidcc_cowboy_1_4_0;

    ojson_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ojson";
            version = "1.0.0";
            src = fetchHex {
              pkg = "ojson";
              version = "1.0.0";
              sha256 =
                "125088e64d95704194dc8b4b5095502363e0ca870b72712f61929499d3c48d00";
            };

            meta = {
              description = ''Ordered JSON (OJSON) - deterministic or stable
                            serialization'';
              license = stdenv.lib.licenses.mpl20;
              homepage = "https://github.com/potatosalad/erlang-ojson";
            };
          } // packageOverrides)
      ) {};

    ojson = ojson_1_0_0;

    ok_1_7_0_rc_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ok";
            version = "1.7.0-rc.1";
            src = fetchHex {
              pkg = "ok";
              version = "1.7.0-rc.1";
              sha256 =
                "86db408e2ebd62f36e58551672b89d0bb40de4cde07ac5005fc1a4f289d1fb78";
            };

            meta = {
              description = ''Elegant error handling in Elixir, with result
                            monads.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/CrowdHailer/OK";
            };
          } // packageOverrides)
      ) {};

    ok = ok_1_7_0_rc_1;

    ok_jose_2_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ok_jose";
            version = "2.0.0";
            src = fetchHex {
              pkg = "ok_jose";
              version = "2.0.0";
              sha256 =
                "55377aa3f9b6e563aeb14b3960e4d2a697a059799e8d8ee390059faeaab219eb";
            };

            meta = {
              description = ''Pipe functions that produce ok/error tuples.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/vic/ok_jose";
            };
          } // packageOverrides)
      ) {};

    ok_jose = ok_jose_2_0_0;

    okta_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_7_5,
          poison_1_4_0
        }:
          buildMix ({
            name = "okta";
            version = "0.0.1";
            src = fetchHex {
              pkg = "okta";
              version = "0.0.1";
              sha256 =
                "1fb857a60a917bfe9ff6b1bf87908ba8aa1387ddc4586f9b9465fe19415d825a";
            };
            beamDeps  = [ httpoison_0_7_5 poison_1_4_0 ];

            meta = {
              description = ''An Elixir Library for interfacing Okta'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/Cobenian/okta";
            };
          } // packageOverrides)
      ) {};

    okta = okta_0_0_1;

    omega_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_1_0_2 }:
          buildMix ({
            name = "omega";
            version = "0.2.0";
            src = fetchHex {
              pkg = "omega";
              version = "0.2.0";
              sha256 =
                "31096bc37f5a44addf42bac533a15e3f0e74d59a683e255e33fae79425889857";
            };
            beamDeps  = [ poison_1_0_2 ];

            meta = {
              description = ''Module wrapper for making Omise API clients.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/teerawat1992/omega";
            };
          } // packageOverrides)
      ) {};

    omega = omega_0_2_0;

    omise_0_5_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_1_0_2
        }:
          buildMix ({
            name = "omise";
            version = "0.5.1";
            src = fetchHex {
              pkg = "omise";
              version = "0.5.1";
              sha256 =
                "72048dbe00c67cacba1caf4fff1ff0b1ddb9af8eff543b6139fd2bef889d1570";
            };
            beamDeps  = [ httpoison_0_11_2 poison_1_0_2 ];

            meta = {
              description = ''Omise client library for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/omise/omise-elixir";
            };
          } // packageOverrides)
      ) {};

    omise = omise_0_5_1;

    omtt_util_1_0_7 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_4,
          gen_smtp_0_12_0
        }:
          buildMix ({
            name = "omtt_util";
            version = "1.0.7";
            src = fetchHex {
              pkg = "omtt_util";
              version = "1.0.7";
              sha256 =
                "079c1a82ff2cc6c94d704021b16665bf7be243823cbce71ed3cf1ceb1ce47715";
            };
            beamDeps  = [ ecto_2_1_4 gen_smtp_0_12_0 ];

            meta = {
              longDescription = ''Internal utils and helper snippets used
                                across our internal projects. Copy and re-use as
                                you like.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/mtdevelopment/elixir-util";
            };
          } // packageOverrides)
      ) {};

    omtt_util = omtt_util_1_0_7;

    on_maintenance_0_7_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          plug_1_3_5,
          poison_1_5_2,
          sqlitex_1_3_2
        }:
          buildMix ({
            name = "on_maintenance";
            version = "0.7.0";
            src = fetchHex {
              pkg = "on_maintenance";
              version = "0.7.0";
              sha256 =
                "55c05bc6fc417d417fd7a0cb5b6739a654eb7f22a0063677694c6026becf804c";
            };
            beamDeps  = [ cowboy_1_1_2 plug_1_3_5 poison_1_5_2 sqlitex_1_3_2
                      ];

            meta = {
              longDescription = ''Plug.OnMaintenance, an Elixir Plug, is used
                                to disable access to your application for some
                                length of time.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/wnuqui/on_maintenance";
            };
          } // packageOverrides)
      ) {};

    on_maintenance = on_maintenance_0_7_0;

    onartsipac_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "onartsipac";
            version = "0.1.0";
            src = fetchHex {
              pkg = "onartsipac";
              version = "0.1.0";
              sha256 =
                "ad6798451f3fa75ab3a1c7f666f66c4acc917c039f96a543680063b2a4d632be";
            };

            meta = {
              description = ''Saithe9v mib4ahVe AeF9aihi eor5zuSh'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    onartsipac = onartsipac_0_1_0;

    one_signal_0_0_6 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_8_3,
          poison_1_5_2
        }:
          buildMix ({
            name = "one_signal";
            version = "0.0.6";
            src = fetchHex {
              pkg = "one_signal";
              version = "0.0.6";
              sha256 =
                "d90ec5f9e43d164e2942422d3c1e9a6b26a956ea135eb1a316380e12ef6b27d1";
            };
            beamDeps  = [ httpoison_0_8_3 poison_1_5_2 ];

            meta = {
              description = ''Elixir wrapper of OneSignal'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/yoavlt/one_signal";
            };
          } // packageOverrides)
      ) {};

    one_signal = one_signal_0_0_6;

    onetime_2_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, timex_3_1_15 }:
          buildMix ({
            name = "onetime";
            version = "2.0.0";
            src = fetchHex {
              pkg = "onetime";
              version = "2.0.0";
              sha256 =
                "af582e9d21f2fbb0e77e4d2b3b0f2f361e3c26586c4e9cbd529d5276612442a7";
            };
            beamDeps  = [ timex_3_1_15 ];

            meta = {
              description = ''An onetime key-value store'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ryo33/onetime-elixir";
            };
          } // packageOverrides)
      ) {};

    onetime = onetime_2_0_0;

    oop_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "oop";
            version = "0.1.1";
            src = fetchHex {
              pkg = "oop";
              version = "0.1.1";
              sha256 =
                "8cf355eb5c3912ca8381a316bd0ac89f3f144550c0fe4d41eb1486b1f7ebc8d4";
            };

            meta = {
              description = ''OOP in Elixir!'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/wojtekmach/oop";
            };
          } // packageOverrides)
      ) {};

    oop = oop_0_1_1;

    oops_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "oops";
            version = "0.2.0";
            src = fetchHex {
              pkg = "oops";
              version = "0.2.0";
              sha256 =
                "963c0a16bc11f56621339f31d629cfb44c3a665853f65fc717f62d2f233c6e81";
            };

            meta = {
              description = ''oops'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    oops = oops_0_2_0;

    opbeat_0_4_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "opbeat";
            version = "0.4.1";
            src = fetchHex {
              pkg = "opbeat";
              version = "0.4.1";
              sha256 =
                "25bc33afbdd6d56f5d9e639977023c1a80cc66b4897f41f8bcb96487f928a5b0";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''Elixir client for opbeat'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/teodor-pripoae/opbeat";
            };
          } // packageOverrides)
      ) {};

    opbeat = opbeat_0_4_1;

    open_exchange_rates_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          currency_formatter_0_4_8,
          httpoison_0_9_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "open_exchange_rates";
            version = "0.3.0";
            src = fetchHex {
              pkg = "open_exchange_rates";
              version = "0.3.0";
              sha256 =
                "ae60500f0f524cbaf3bb7e5ac0e848f760f86f083c45aed50d247ab76316e2ad";
            };
            beamDeps  = [
                          currency_formatter_0_4_8 httpoison_0_9_2 poison_2_2_0
                        ];

            meta = {
              longDescription = ''A library that can convert currencies and
                                uses automatic updating of the currrency rates
                                using openexchangerates.org'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/smeevil/open_exchange_rates";
            };
          } // packageOverrides)
      ) {};

    open_exchange_rates = open_exchange_rates_0_3_0;

    open_graph_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, httpoison_0_11_2 }:
          buildMix ({
            name = "open_graph";
            version = "0.0.2";
            src = fetchHex {
              pkg = "open_graph";
              version = "0.0.2";
              sha256 =
                "0c3ccfea17409b57f6e81f749b074b60572ebf2dcfb06a7272f69f9b104cabca";
            };
            beamDeps  = [ httpoison_0_11_2 ];

            meta = {
              description = ''A Elixir wrapper for the Open Graph protocol.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/andrielfn/open_graph";
            };
          } // packageOverrides)
      ) {};

    open_graph = open_graph_0_0_2;

    open_graphx_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          floki_0_17_2,
          httpoison_0_8_3
        }:
          buildMix ({
            name = "open_graphx";
            version = "0.0.2";
            src = fetchHex {
              pkg = "open_graphx";
              version = "0.0.2";
              sha256 =
                "2eef951c4fbb8a01f11ed3ab6ca62dc695a84baf9ae0fbe7698058eac8020b70";
            };
            beamDeps  = [ floki_0_17_2 httpoison_0_8_3 ];

            meta = {
              description = ''Load Open Graph Protocol'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/yoavlt/open_graphx";
            };
          } // packageOverrides)
      ) {};

    open_graphx = open_graphx_0_0_2;

    opengraph_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          floki_0_11_0,
          httpoison_0_10_0
        }:
          buildMix ({
            name = "opengraph";
            version = "0.1.0";
            src = fetchHex {
              pkg = "opengraph";
              version = "0.1.0";
              sha256 =
                "75fe89bc8a096edee00921ba032bf4eaf137a437c898e40013d6c40bc97acc5e";
            };
            beamDeps  = [ floki_0_11_0 httpoison_0_10_0 ];

            meta = {
              description = ''A module for parsing OpenGraph data.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/alexander-akhmetov/opengraph";
            };
          } // packageOverrides)
      ) {};

    opengraph = opengraph_0_1_0;

    openlibrary_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          isbn_0_1_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "openlibrary";
            version = "0.1.1";
            src = fetchHex {
              pkg = "openlibrary";
              version = "0.1.1";
              sha256 =
                "06d2dedf2f22514f59cd623934960770b5ea480498fde9b4b88032b0e8d89271";
            };
            beamDeps  = [ httpoison_0_11_2 isbn_0_1_2 poison_3_1_0 ];

            meta = {
              description = ''Elixir client for Open Library REST API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nithinbekal/openlibrary";
            };
          } // packageOverrides)
      ) {};

    openlibrary = openlibrary_0_1_1;

    openmaize_2_9_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          comeonin_3_0_2,
          cowboy_1_1_2,
          ecto_2_1_4,
          not_qwerty123_1_2_0,
          plug_1_3_5,
          postgrex_1_0_0_rc_1
        }:
          buildMix ({
            name = "openmaize";
            version = "2.9.0";
            src = fetchHex {
              pkg = "openmaize";
              version = "2.9.0";
              sha256 =
                "e5c9bc402317b86a0dde014daae31ca70129c0cfda813e951337a39c9bef866b";
            };
            beamDeps  = [
                          comeonin_3_0_2
                          cowboy_1_1_2
                          ecto_2_1_4
                          not_qwerty123_1_2_0
                          plug_1_3_5
                          postgrex_1_0_0_rc_1
                        ];

            meta = {
              description = ''Authentication library for Elixir using Plug'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/riverrun/openmaize";
            };
          } // packageOverrides)
      ) {};

    openmaize_3_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          comeonin_3_0_2,
          cowboy_1_1_2,
          ecto_2_1_4,
          not_qwerty123_2_0_0,
          plug_1_3_5,
          postgrex_1_0_0_rc_1
        }:
          buildMix ({
            name = "openmaize";
            version = "3.0.1";
            src = fetchHex {
              pkg = "openmaize";
              version = "3.0.1";
              sha256 =
                "20808353bb80e8d478ed8acb82b0d9865e9c2932d3af0c5637fe72ffb5d13081";
            };
            beamDeps  = [
                          comeonin_3_0_2
                          cowboy_1_1_2
                          ecto_2_1_4
                          not_qwerty123_2_0_0
                          plug_1_3_5
                          postgrex_1_0_0_rc_1
                        ];

            meta = {
              description = ''Authentication library for Elixir using Plug'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/riverrun/openmaize";
            };
          } // packageOverrides)
      ) {};

    openmaize = openmaize_3_0_1;

    openmaize_jwt_1_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          openmaize_2_9_0,
          plug_1_3_5,
          poison_1_0_2
        }:
          buildMix ({
            name = "openmaize_jwt";
            version = "1.0.0";
            src = fetchHex {
              pkg = "openmaize_jwt";
              version = "1.0.0";
              sha256 =
                "c138324dacdc69b72c4dee52bbfbeff62354b27c258ea834cd36a1d269537948";
            };
            beamDeps  = [
                          cowboy_1_1_2 openmaize_2_9_0 plug_1_3_5 poison_1_0_2
                        ];

            meta = {
              description = ''JSON Web Token library for use with the Openmaize
                            authentication library.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/riverrun/openmaize_jwt";
            };
          } // packageOverrides)
      ) {};

    openmaize_jwt = openmaize_jwt_1_0_0;

    openstack_0_0_5 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_8_3,
          maybe_0_0_1,
          poison_1_5_2
        }:
          buildMix ({
            name = "openstack";
            version = "0.0.5";
            src = fetchHex {
              pkg = "openstack";
              version = "0.0.5";
              sha256 =
                "f3387f15fea0ae51eacc7c7b3667ac5cc611c479ae48a7ce8ea61d5ae1c6ba57";
            };
            beamDeps  = [ httpoison_0_8_3 maybe_0_0_1 poison_1_5_2 ];

            meta = {
              description = ''Openstack Client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zweifisch/openstack.ex";
            };
          } // packageOverrides)
      ) {};

    openstack = openstack_0_0_5;

    openstax_keystone_0_1_7 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          connection_1_0_4,
          httpoison_0_11_2,
          poison_2_2_0,
          timex_3_1_15
        }:
          buildMix ({
            name = "openstax_keystone";
            version = "0.1.7";
            src = fetchHex {
              pkg = "openstax_keystone";
              version = "0.1.7";
              sha256 =
                "75c388678c7642a981e27cc485dd3a8db1d6f3b9135f0acf063d2439d6e40f67";
            };
            beamDeps  = [
                          connection_1_0_4
                          httpoison_0_11_2
                          poison_2_2_0
                          timex_3_1_15
                        ];

            meta = {
              description = ''OpenStack Keystone client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mspanc/openstax_keystone";
            };
          } // packageOverrides)
      ) {};

    openstax_keystone = openstax_keystone_0_1_7;

    openstax_swift_0_2_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "openstax_swift";
            version = "0.2.2";
            src = fetchHex {
              pkg = "openstax_swift";
              version = "0.2.2";
              sha256 =
                "267eb5ea17878204629227d43f486965142eaafd2ebcb3c5f8936f8335045543";
            };
            beamDeps  = [ httpoison_0_11_2 poison_2_2_0 ];

            meta = {
              description = ''OpenStack Swift client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mspanc/openstax_swift";
            };
          } // packageOverrides)
      ) {};

    openstax_swift = openstax_swift_0_2_2;

    openstax_swift_ecto_0_2_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_4,
          file_info_0_0_2,
          openstax_swift_0_2_2,
          temp_0_4_3
        }:
          buildMix ({
            name = "openstax_swift_ecto";
            version = "0.2.3";
            src = fetchHex {
              pkg = "openstax_swift_ecto";
              version = "0.2.3";
              sha256 =
                "f5b77d5b15f689d5de5432aef2565a73f9198bfc43ab743c051e1ef921c2a358";
            };
            beamDeps  = [
                          ecto_2_1_4
                          file_info_0_0_2
                          openstax_swift_0_2_2
                          temp_0_4_3
                        ];

            meta = {
              description = ''OpenStack Swift Ecto integration'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mspanc/openstax_swift_ecto";
            };
          } // packageOverrides)
      ) {};

    openstax_swift_ecto = openstax_swift_ecto_0_2_3;

    openstex_0_3_6 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpipe_0_9_0,
          mapail_1_0_2,
          poison_1_0_2
        }:
          buildMix ({
            name = "openstex";
            version = "0.3.6";
            src = fetchHex {
              pkg = "openstex";
              version = "0.3.6";
              sha256 =
                "5e65275411f101f11f2b43604c818ab82ed149be761c6bf889b7945a6f69ce54";
            };
            beamDeps  = [ httpipe_0_9_0 mapail_1_0_2 poison_1_0_2 ];

            meta = {
              description = ''A client in elixir for making requests to
                            openstack compliant apis.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/stephenmoloney/openstex";
            };
          } // packageOverrides)
      ) {};

    openstex = openstex_0_3_6;

    openstex_adapters_ovh_0_3_8 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ex_ovh_0_3_6,
          httpipe_adapters_hackney_0_11_0,
          openstex_0_3_6
        }:
          buildMix ({
            name = "openstex_adapters_ovh";
            version = "0.3.8";
            src = fetchHex {
              pkg = "openstex_adapters_ovh";
              version = "0.3.8";
              sha256 =
                "053ac672fa19fd7fa66009e477ef1b4d344049d0e829d16ea6cf2394e66dee37";
            };
            beamDeps  = [
                          ex_ovh_0_3_6
                          httpipe_adapters_hackney_0_11_0
                          openstex_0_3_6
                        ];

            meta = {
              longDescription = ''An adapter for the openstex library for
                                making calls to the Openstack compliant OVH
                                API.'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/stephenmoloney/openstex_adapters_ovh";
            };
          } // packageOverrides)
      ) {};

    openstex_adapters_ovh = openstex_adapters_ovh_0_3_8;

    openstex_adapters_rackspace_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpipe_adapters_hackney_0_11_0,
          openstex_0_3_6
        }:
          buildMix ({
            name = "openstex_adapters_rackspace";
            version = "0.3.0";
            src = fetchHex {
              pkg = "openstex_adapters_rackspace";
              version = "0.3.0";
              sha256 =
                "c7ed82692a3158cf8aeac5e0557c9ee5b885e985b3e2f68a60e461d24f195126";
            };
            beamDeps  = [ httpipe_adapters_hackney_0_11_0 openstex_0_3_6 ];

            meta = {
              longDescription = ''An adapter for the openstex library for
                                making calls to Openstack compliant Rackspace
                                services.'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/stephenmoloney/openstex_adapters_rackspace";
            };
          } // packageOverrides)
      ) {};

    openstex_adapters_rackspace = openstex_adapters_rackspace_0_3_0;

    operator_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "operator";
            version = "0.2.0";
            src = fetchHex {
              pkg = "operator";
              version = "0.2.0";
              sha256 =
                "cb533c378569053acd021fff5970691e267830818ad70c483331da96197aa784";
            };

            meta = {
              description = ''Helpers for defining operators'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/expede/operator";
            };
          } // packageOverrides)
      ) {};

    operator = operator_0_2_0;

    optimus_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "optimus";
            version = "0.1.3";
            src = fetchHex {
              pkg = "optimus";
              version = "0.1.3";
              sha256 =
                "0ad42b7efa4232fc60c8d3d708aad6784824bc74e3f8dd13eedf3e01f0d3860d";
            };

            meta = {
              description = ''Command line option parser inspired by clap.rs'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/savonarola/optimus";
            };
          } // packageOverrides)
      ) {};

    optimus = optimus_0_1_3;

    optium_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "optium";
            version = "0.2.0";
            src = fetchHex {
              pkg = "optium";
              version = "0.2.0";
              sha256 =
                "7e2974096a0cb723e68c20b8ca901937e08097c94c01e07cc2e163dfa1ed5e60";
            };

            meta = {
              description = ''Library for validating arguments passed in
                            keyword lists'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/arkgil/optium";
            };
          } // packageOverrides)
      ) {};

    optium = optium_0_2_0;

    ordered_list_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ordered_list";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ordered_list";
              version = "0.1.0";
              sha256 =
                "6b6410f35d1bda7335fc0c5f16e2b6f5a6a8c162363073931347dc184521159d";
            };

            meta = {
              description = ''Sorting and reordering positions in a list.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/aarondufall/ordered_list";
            };
          } // packageOverrides)
      ) {};

    ordered_list = ordered_list_0_1_0;

    orientex_0_0_13 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, db_connection_1_1_2
        }:
          buildMix ({
            name = "orientex";
            version = "0.0.13";
            src = fetchHex {
              pkg = "orientex";
              version = "0.0.13";
              sha256 =
                "c91fc2aad872ba3d5e80bfda3fb2765d73d9c87d49edcefd0b7248f00242cd67";
            };
            beamDeps  = [ db_connection_1_1_2 ];

            meta = {
              description = ''An OrientDB network binary protocol driver for
                            Elixir 1.3+ using DBConnection.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/austinsmorris/orientex";
            };
          } // packageOverrides)
      ) {};

    orientex = orientex_0_0_13;

    os_utils_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "os_utils";
            version = "0.3.0";
            src = fetchHex {
              pkg = "os_utils";
              version = "0.3.0";
              sha256 =
                "b49e32630b3f198b5fe4f6858aa03d1236d659564f98d522c9e646c045e13b64";
            };

            meta = {
              description = ''OS utilities for Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/orderthruchaos/os_utils";
            };
          } // packageOverrides)
      ) {};

    os_utils = os_utils_0_3_0;

    osc_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "osc";
            version = "0.1.2";
            src = fetchHex {
              pkg = "osc";
              version = "0.1.2";
              sha256 =
                "8cdd8be5e266bf8d99602a7637d6526380d97f704ec600f32be1b4d71d78f4c8";
            };

            meta = {
              description = ''OSC encoder/decoder for elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/camshaft/osc_ex";
            };
          } // packageOverrides)
      ) {};

    osc = osc_0_1_2;

    osrm_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "osrm";
            version = "0.1.0";
            src = fetchHex {
              pkg = "osrm";
              version = "0.1.0";
              sha256 =
                "9249ef101b434f68ca7f247e7ba01400e049de9da899c658dd6ea61e638669e3";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''Elixir bindings for OSRM.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/smart-commut/osrm-elixir";
            };
          } // packageOverrides)
      ) {};

    osrm = osrm_0_1_0;

    ot_ex_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ot_ex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ot_ex";
              version = "0.1.0";
              sha256 =
                "8b66a33554617a6feef8f70e20ce77a46c5c730d213adae6afbf60398ecd1c24";
            };

            meta = {
              longDescription = ''OT provides libraries for operational
                                transformation, which is a method of achieving
                                consistency in a collaborative software
                                system.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/jclem/ot_ex";
            };
          } // packageOverrides)
      ) {};

    ot_ex = ot_ex_0_1_0;

    otter_0_3_0 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          ibrowse_4_2_2,
          otter_lib_0_1_0
        }:
          buildRebar3 ({
            name = "otter";
            version = "0.3.0";
            src = fetchHex {
              pkg = "otter";
              version = "0.3.0";
              sha256 =
                "8a960b6b91441f87ff782456614d57d37ed69e1ba2f5c8f093878eaaedb03078";
            };

            beamDeps  = [ ibrowse_4_2_2 otter_lib_0_1_0 ];

            meta = {
              description = ''OpenTracing Toolkit for ERlang'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/bluehouse-technology/otter";
            };
          } // packageOverrides)
      ) {};

    otter = otter_0_3_0;

    otter_lib_0_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "otter_lib";
            version = "0.1.0";
            src = fetchHex {
              pkg = "otter_lib";
              version = "0.1.0";
              sha256 =
                "84d0508b600539a218e008705b2af09c56e76b54b164860953ea10b14dff48c1";
            };

            meta = {
              description = ''Library with otter common functions'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/bluehouse-technology/otter_lib";
            };
          } // packageOverrides)
      ) {};

    otter_lib_0_1_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "otter_lib";
            version = "0.1.1";
            src = fetchHex {
              pkg = "otter_lib";
              version = "0.1.1";
              sha256 =
                "b467b2d0be600bc374a6fea4dbf679b60727152b39b4659ac067fc895cb4d236";
            };

            meta = {
              description = ''Library with otter common functions'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/bluehouse-technology/otter_lib";
            };
          } // packageOverrides)
      ) {};

    otter_lib = otter_lib_0_1_1;

    otter_srv_0_1_0 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          otter_lib_0_1_1
        }:
          buildRebar3 ({
            name = "otter_srv";
            version = "0.1.0";
            src = fetchHex {
              pkg = "otter_srv";
              version = "0.1.0";
              sha256 =
                "f5466899e8e9a2dcd161bd9aecd551db287eddb76bd243629922eb094a4eca3f";
            };

            beamDeps  = [ cowboy_1_1_2 otter_lib_0_1_1 ];

            meta = {
              description = ''OpenTracing Erlang Server'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/bluehouse-technology/otter_srv";
            };
          } // packageOverrides)
      ) {};

    otter_srv = otter_srv_0_1_0;

    otters_0_2_8 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          dynamic_compile_1_0_0,
          ibrowse_4_4_0
        }:
          buildRebar3 ({
            name = "otters";
            version = "0.2.8";
            src = fetchHex {
              pkg = "otters";
              version = "0.2.8";
              sha256 =
                "9c9d14c5370ef621cea980165e9f0ac223accb44e2cbf7521312b4c18c4db982";
            };

            beamDeps  = [ dynamic_compile_1_0_0 ibrowse_4_4_0 ];

            meta = {
              description = ''OpenTracing Toolkit for Erlang'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/project-fifo/otters";
            };
          } // packageOverrides)
      ) {};

    otters = otters_0_2_8;

    otterx_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, otters_0_2_8 }:
          buildMix ({
            name = "otterx";
            version = "0.1.0";
            src = fetchHex {
              pkg = "otterx";
              version = "0.1.0";
              sha256 =
                "3475ec4b08fbabfdacefa190fccc327a0de244320280b1fccd05c6e97a210cee";
            };
            beamDeps  = [ otters_0_2_8 ];

            meta = {
              description = ''OpenTracing library for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/project-fifo/otterx";
            };
          } // packageOverrides)
      ) {};

    otterx = otterx_0_1_0;

    overpass_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_7_5,
          jsx_2_8_2,
          sweet_xml_0_6_4
        }:
          buildMix ({
            name = "overpass";
            version = "0.1.1";
            src = fetchHex {
              pkg = "overpass";
              version = "0.1.1";
              sha256 =
                "6a664bd17e7612825fd7c3a0c3e0039412d83ac6d459c84018caf07e800cb6a8";
            };
            beamDeps  = [ httpoison_0_7_5 jsx_2_8_2 sweet_xml_0_6_4 ];

            meta = {
              description = ''A Elixir wrapper to access the Overpass API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/CodeforChemnitz/elixir-overpass";
            };
          } // packageOverrides)
      ) {};

    overpass = overpass_0_1_1;

    overpex_0_3_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0,
          sweet_xml_0_6_5
        }:
          buildMix ({
            name = "overpex";
            version = "0.3.1";
            src = fetchHex {
              pkg = "overpex";
              version = "0.3.1";
              sha256 =
                "25c007d8ec576209fce7b1cabf469e1337bcfb60e750ceb1b9cfd247a529f904";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 sweet_xml_0_6_5 ];

            meta = {
              description = ''Simple wrapper for the Overpass API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/brunoasantos/overpex";
            };
          } // packageOverrides)
      ) {};

    overpex = overpex_0_3_1;

    oxr_0_3_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_8_3,
          poison_2_2_0
        }:
          buildMix ({
            name = "oxr";
            version = "0.3.1";
            src = fetchHex {
              pkg = "oxr";
              version = "0.3.1";
              sha256 =
                "85b9525da74c1c36c3e8121d4db79775fc62ba27bb34be1f7f4b5615c70dc57c";
            };
            beamDeps  = [ httpoison_0_8_3 poison_2_2_0 ];

            meta = {
              description = ''A thin API wrapper for Open Exchange Rates
                            (https://openexchangerates.org)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/marksilvis/oxr-elixir";
            };
          } // packageOverrides)
      ) {};

    oxr = oxr_0_3_1;

    oxygen_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, gproc_0_6_1 }:
          buildMix ({
            name = "oxygen";
            version = "0.1.2";
            src = fetchHex {
              pkg = "oxygen";
              version = "0.1.2";
              sha256 =
                "9c275014893c3eb813d2a68f5b58ae39eddc4392ce47803b23606c38e7b7ac82";
            };
            beamDeps  = [ gproc_0_6_1 ];

            meta = {
              description = ''Named GenServer'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Nebo15/oxygen";
            };
          } // packageOverrides)
      ) {};

    oxygen = oxygen_0_1_2;

    p1_mysql_1_0_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "p1_mysql";
            version = "1.0.3";
            src = fetchHex {
              pkg = "p1_mysql";
              version = "1.0.3";
              sha256 =
                "04a46a214e7e3204b2b46534df6962e14e8e9479edcd4951d11486c9e0c1c5fc";
            };

            meta = {
              description = ''Pure Erlang MySQL driver'';
              license = with stdenv.lib.licenses; [ free asl20 ];
              homepage = "https://github.com/processone/p1_mysql";
            };
          } // packageOverrides)
      ) {};

    p1_mysql = p1_mysql_1_0_3;

    p1_oauth2_0_6_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "p1_oauth2";
            version = "0.6.1";
            src = fetchHex {
              pkg = "p1_oauth2";
              version = "0.6.1";
              sha256 =
                "304923dcaf1edcc84b7f3f6fab1d5235777604ec3334453cf50de1060300e002";
            };

            meta = {
              description = ''Erlang OAuth 2.0 implementation'';
              license = with stdenv.lib.licenses; [ mit asl20 ];
              homepage = "https://github.com/processone/p1_oauth2";
            };
          } // packageOverrides)
      ) {};

    p1_oauth2 = p1_oauth2_0_6_1;

    p1_pgsql_1_1_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "p1_pgsql";
            version = "1.1.3";
            src = fetchHex {
              pkg = "p1_pgsql";
              version = "1.1.3";
              sha256 =
                "c007d4afd7d3e8accbee8d483cd7c29ef28b716d53d455d01a44fa9c277fa75f";
            };

            meta = {
              description = ''PostgreSQL driver'';
              license = with stdenv.lib.licenses; [ epl10 asl20 ];
              homepage = "https://github.com/processone/p1_pgsql";
            };
          } // packageOverrides)
      ) {};

    p1_pgsql = p1_pgsql_1_1_3;

    p1_stringprep_1_0_1 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, p1_utils_1_0_3
        }:
          buildRebar3 ({
            name = "p1_stringprep";
            version = "1.0.1";
            src = fetchHex {
              pkg = "p1_stringprep";
              version = "1.0.1";
              sha256 =
                "e36ce6434010eba2fb6fc18bf4ba65797be3bba17a686f79a2326d26614071c0";
            };
            compilePorts = true;

            beamDeps  = [ p1_utils_1_0_3 ];

            meta = {
              description = ''Fast Stringprep Erlang / Elixir implementation'';
              license = with stdenv.lib.licenses; [ asl20 free ];
              homepage = "https://github.com/processone/stringprep";
            };
          } // packageOverrides)
      ) {};

    p1_stringprep = p1_stringprep_1_0_1;

    p1_utils_1_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "p1_utils";
            version = "1.0.0";
            src = fetchHex {
              pkg = "p1_utils";
              version = "1.0.0";
              sha256 =
                "b2c6316286b071f2f667fb1c59b44fe0c996917515fa93374a4a3264affc5105";
            };

            meta = {
              description = ''Erlang utility modules from ProcessOne'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/processone/p1_utils";
            };
          } // packageOverrides)
      ) {};

    p1_utils_1_0_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "p1_utils";
            version = "1.0.3";
            src = fetchHex {
              pkg = "p1_utils";
              version = "1.0.3";
              sha256 =
                "6bf7dc7108eee70e036ea745faf5f55b4354e267f14371ea13338f58ce402d5e";
            };

            meta = {
              description = ''Erlang utility modules from ProcessOne'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/processone/p1_utils";
            };
          } // packageOverrides)
      ) {};

    p1_utils_1_0_9 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "p1_utils";
            version = "1.0.9";
            src = fetchHex {
              pkg = "p1_utils";
              version = "1.0.9";
              sha256 =
                "c1cd52d653bc567774684006b51f797b4369ad658a68f952d5ca5efc37da896a";
            };

            meta = {
              description = ''Erlang utility modules from ProcessOne'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/processone/p1_utils";
            };
          } // packageOverrides)
      ) {};

    p1_utils = p1_utils_1_0_9;

    p1_xml_1_1_1 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, p1_utils_1_0_0
        }:
          buildRebar3 ({
            name = "p1_xml";
            version = "1.1.1";
            src = fetchHex {
              pkg = "p1_xml";
              version = "1.1.1";
              sha256 =
                "ab68956163cc5ff8c749c503507a36c543841259e78c58a2bbe0ebe76a0b7ce3";
            };
            compilePorts = true;

            beamDeps  = [ p1_utils_1_0_0 ];

            meta = {
              description = ''XML parsing library. Now obsolete. Use fast_xml
                            instead'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/processone/xml";
            };
          } // packageOverrides)
      ) {};

    p1_xml = p1_xml_1_1_1;

    p1_xmlrpc_1_15_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "p1_xmlrpc";
            version = "1.15.1";
            src = fetchHex {
              pkg = "p1_xmlrpc";
              version = "1.15.1";
              sha256 =
                "4bca3009ad6b6c37c30255e3d63191a188e0fc6b6db41a428fe111d699d1a330";
            };

            meta = {
              description = ''XML-RPC server'';
              license = with stdenv.lib.licenses; [ bsd2 asl20 ];
              homepage = "https://github.com/processone/p1_xmlrpc";
            };
          } // packageOverrides)
      ) {};

    p1_xmlrpc = p1_xmlrpc_1_15_1;

    paasaa_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "paasaa";
            version = "0.2.0";
            src = fetchHex {
              pkg = "paasaa";
              version = "0.2.0";
              sha256 =
                "964b685acff0bc68874ab8ef58359264962143895a479843c05e838af594b803";
            };

            meta = {
              description = ''Natural language detection'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/minibikini/paasaa";
            };
          } // packageOverrides)
      ) {};

    paasaa = paasaa_0_2_0;

    pace_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pace";
            version = "0.1.1";
            src = fetchHex {
              pkg = "pace";
              version = "0.1.1";
              sha256 =
                "0f3a321d43ffea13373fb5e86304a106b894aee8f2e637dd1505d7458a8b4053";
            };

            meta = {
              description = ''Lightweight elixir performance analysis
                            library.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/samontea/pace";
            };
          } // packageOverrides)
      ) {};

    pace = pace_0_1_1;

    pact_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pact";
            version = "0.2.0";
            src = fetchHex {
              pkg = "pact";
              version = "0.2.0";
              sha256 =
                "a19000dcfd6c6b220e508ed44e9040d83e4814db2f6f74b11de1a4597a8de05e";
            };

            meta = {
              description = ''Elixir dependency registry for better testing and
                            cleaner code'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/BlakeWilliams/pact";
            };
          } // packageOverrides)
      ) {};

    pact = pact_0_2_0;

    paddle_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "paddle";
            version = "0.1.1";
            src = fetchHex {
              pkg = "paddle";
              version = "0.1.1";
              sha256 =
                "6c138a5919e6ce39f04035642ca61dcdcb2bcc1566bb3da39335ef3b433df419";
            };

            meta = {
              description = ''A library simplifying LDAP usage'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ClubNix/paddle";
            };
          } // packageOverrides)
      ) {};

    paddle = paddle_0_1_1;

    pagarmex_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_8_3,
          poison_2_2_0
        }:
          buildMix ({
            name = "pagarmex";
            version = "0.1.1";
            src = fetchHex {
              pkg = "pagarmex";
              version = "0.1.1";
              sha256 =
                "f47f83820678b800073e0d1de033704c80f9ef157c6aeeac6af80d946b5a5aba";
            };
            beamDeps  = [ httpoison_0_8_3 poison_2_2_0 ];

            meta = {
              description = ''A PagarMe Library for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gullitmiranda/pagarmex";
            };
          } // packageOverrides)
      ) {};

    pagarmex = pagarmex_0_1_1;

    page_object_0_4_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hound_1_0_3,
          inflex_1_7_0
        }:
          buildMix ({
            name = "page_object";
            version = "0.4.0";
            src = fetchHex {
              pkg = "page_object";
              version = "0.4.0";
              sha256 =
                "59ad6c9c8af17fbdae4eef9093a8030ce42fd01ef111fdf56e93efbe4b8fa3da";
            };
            beamDeps  = [ hound_1_0_3 inflex_1_7_0 ];

            meta = {
              longDescription = ''page_object is a DSL implementing a Page
                                Object pattern for automated testing in Elixir.
                                The API for page_object is inspired by
                                ember-cli-page-object. The package relies on
                                hound to provide web page interaction.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/samueljseay/page_object";
            };
          } // packageOverrides)
      ) {};

    page_object = page_object_0_4_0;

    pagerduty_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pagerduty";
            version = "0.0.1";
            src = fetchHex {
              pkg = "pagerduty";
              version = "0.0.1";
              sha256 =
                "5623afee7239a38dfeed365cb6ec42209611d453e9a7a8981fd5bfcf7f5dade5";
            };

            meta = {
              description = ''A few sentences (a paragraph) describing the
                            project.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/veverkap/pagerduty";
            };
          } // packageOverrides)
      ) {};

    pagerduty = pagerduty_0_0_1;

    pagexduty_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exjsx_3_1_0,
          httpoison_0_11_2
        }:
          buildMix ({
            name = "pagexduty";
            version = "0.1.0";
            src = fetchHex {
              pkg = "pagexduty";
              version = "0.1.0";
              sha256 =
                "7292a63eeb27637ff19f91f50910d2bbbc860e1eb0413aa5a5035ef32b41b232";
            };
            beamDeps  = [ exjsx_3_1_0 httpoison_0_11_2 ];

            meta = {
              description = ''A Pagerduty client for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ride/pagexduty";
            };
          } // packageOverrides)
      ) {};

    pagexduty = pagexduty_0_1_0;

    paginex_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "paginex";
            version = "0.0.1";
            src = fetchHex {
              pkg = "paginex";
              version = "0.0.1";
              sha256 =
                "4fdc1a0bb02fbd910d24c59caae6d5793fd24a2a29d6498c04a332095e616770";
            };

            meta = {
              description = ''Exposes a pagination struct that can be helpful
                            to render the pagination html.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bhserna/paginex";
            };
          } // packageOverrides)
      ) {};

    paginex = paginex_0_0_1;

    pagseguro_ex_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          floki_0_10_1,
          httpotion_3_0_2
        }:
          buildMix ({
            name = "pagseguro_ex";
            version = "0.1.1";
            src = fetchHex {
              pkg = "pagseguro_ex";
              version = "0.1.1";
              sha256 =
                "81e4289a2aecfb4d0634902d75c3b00b3bcc92381dfb627ca1883d13f1458ba7";
            };
            beamDeps  = [ floki_0_10_1 httpotion_3_0_2 ];

            meta = {
              description = ''Pagseguro Elixir wrapper'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kuruminapp/pagseguro_ex";
            };
          } // packageOverrides)
      ) {};

    pagseguro_ex = pagseguro_ex_0_1_1;

    painstaking_0_5_12 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, exoddic_1_3_5 }:
          buildMix ({
            name = "painstaking";
            version = "0.5.12";
            src = fetchHex {
              pkg = "painstaking";
              version = "0.5.12";
              sha256 =
                "723a13647214c0e2e2325593553961ad38b6596bfac765a0a2a53e3b1129e9e0";
            };
            beamDeps  = [ exoddic_1_3_5 ];

            meta = {
              description = ''Bet stake sizing recommendations'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mwmiller/painstaking";
            };
          } // packageOverrides)
      ) {};

    painstaking = painstaking_0_5_12;

    pairs_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pairs";
            version = "0.1.0";
            src = fetchHex {
              pkg = "pairs";
              version = "0.1.0";
              sha256 =
                "667f01a081771f3e3a89e69a7c29a457d8e71e5c1dc84395f26e74f8e6af2656";
            };

            meta = {
              description = ''Pairs is a small library that makes it easy to
                            create pairs from two lists.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/sebastiangeiger/pairs";
            };
          } // packageOverrides)
      ) {};

    pairs = pairs_0_1_0;

    paladin_client_0_2_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          guardian_0_14_4,
          httpoison_0_11_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "paladin_client";
            version = "0.2.2";
            src = fetchHex {
              pkg = "paladin_client";
              version = "0.2.2";
              sha256 =
                "ba75673ae113945b50a950e99ca2ff0ab4f156cfca630f5438a56c18c098ba4f";
            };
            beamDeps  = [ guardian_0_14_4 httpoison_0_11_2 poison_2_2_0 ];

            meta = {
              description = ''Provides helper functions and a Read-Through
                            cache for interacting with Paladin'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/opendoor-labs/paladin_client";
            };
          } // packageOverrides)
      ) {};

    paladin_client = paladin_client_0_2_2;

    palette_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "palette";
            version = "0.0.2";
            src = fetchHex {
              pkg = "palette";
              version = "0.0.2";
              sha256 =
                "0ad5bbd207b4462078888882b494de937690659bb72ca34ff247b1c9c4784033";
            };

            meta = {
              description = ''A handy library for colouring strings.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lpil/palette";
            };
          } // packageOverrides)
      ) {};

    palette = palette_0_0_2;

    pandex_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pandex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "pandex";
              version = "0.1.0";
              sha256 =
                "a9c6b401be16af5f385c4ff8fc7e3eb9686e2829b0855854de428ff2bd23e34f";
            };

            meta = {
              longDescription = ''Pandex is a lightweight Elixir wrapper for
                                [Pandoc](http://pandoc.org). Pandex enables you
                                to convert Markdown, CommonMark, HTML, Latex,
                                json, html to HTML, HTML5, opendocument, rtf,
                                texttile, asciidoc, markdown, json and others.
                                Pandex has no dependencies other than Pandoc
                                itself.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/filterkaapi/pandex";
            };
          } // packageOverrides)
      ) {};

    pandex = pandex_0_1_0;

    pane_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pane";
            version = "0.1.1";
            src = fetchHex {
              pkg = "pane";
              version = "0.1.1";
              sha256 =
                "fb545a9cb1a4e4a4efc6aaf803a1582cbe4bac632d840d4bad903cf65bcee9d8";
            };

            meta = {
              description = ''Paginated printer for IEx.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/codedge-llc/pane";
            };
          } // packageOverrides)
      ) {};

    pane = pane_0_1_1;

    pangu_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pangu";
            version = "0.1.0";
            src = fetchHex {
              pkg = "pangu";
              version = "0.1.0";
              sha256 =
                "2634cc2463421757aca0a76665de83940d4fda12f8ed316ae929bb29f64d06c5";
            };

            meta = {
              description = ''Paranoid text spacing in Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cataska/pangu.ex";
            };
          } // packageOverrides)
      ) {};

    pangu = pangu_0_1_0;

    paper_trail_0_7_5 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_4,
          poison_3_1_0,
          postgrex_0_13_3
        }:
          buildMix ({
            name = "paper_trail";
            version = "0.7.5";
            src = fetchHex {
              pkg = "paper_trail";
              version = "0.7.5";
              sha256 =
                "ad009afe7a828662b44bf80ed8e1896f6c90d977981843489b9241a3a3fba43a";
            };
            beamDeps  = [ ecto_2_1_4 poison_3_1_0 postgrex_0_13_3 ];

            meta = {
              longDescription = ''Track and record all the changes in your
                                database. Revert back to anytime in history.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/izelnakri/paper_trail";
            };
          } // packageOverrides)
      ) {};

    paper_trail = paper_trail_0_7_5;

    parabaikElixirConverter_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "parabaikElixirConverter";
            version = "0.0.1";
            src = fetchHex {
              pkg = "parabaikElixirConverter";
              version = "0.0.1";
              sha256 =
                "ac72f871ac393ca2e42d11f9103019f6270209b1b0fe58d6f110f5dd66c387e4";
            };

            meta = {
              longDescription = ''ParabaikElixirConverter is just a Elixir
                                version of Parabaik converter. It can convert
                                from Unicode to Zawgyi-One and Zawgyi-One to
                                Unicode vice versa. '';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/Arkar-Aung/ParabaikElixirConverter";
            };
          } // packageOverrides)
      ) {};

    parabaikElixirConverter = parabaikElixirConverter_0_0_1;

    paracusia_0_2_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "paracusia";
            version = "0.2.3";
            src = fetchHex {
              pkg = "paracusia";
              version = "0.2.3";
              sha256 =
                "c77c11e10462610da46fe4091e0d8ebaa2a954c3d30798445745e6e58a655437";
            };

            meta = {
              description = ''MPD client library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nroi/paracusia";
            };
          } // packageOverrides)
      ) {};

    paracusia = paracusia_0_2_3;

    parallel_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "parallel";
            version = "0.0.3";
            src = fetchHex {
              pkg = "parallel";
              version = "0.0.3";
              sha256 =
                "d9b5e98c1892f5376b4dfa28c48a3a17029f86a28d1f9ec2f7c1a2747f256a4d";
            };

            meta = {
              description = ''Straightforward parallel processing for Elixir'';

              homepage = "https://github.com/Anonyfox/parallel";
            };
          } // packageOverrides)
      ) {};

    parallel = parallel_0_0_3;

    parallel_enum_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "parallel_enum";
            version = "0.1.0";
            src = fetchHex {
              pkg = "parallel_enum";
              version = "0.1.0";
              sha256 =
                "bda4d45b19ab36df9f51478aa9b7aa6cfe0d1955cfd2710da951eff31274520c";
            };

            meta = {
              description = ''A parallel enum processing library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/exosite/elixir_parallel_enum";
            };
          } // packageOverrides)
      ) {};

    parallel_enum = parallel_enum_0_1_0;

    parallel_stream_1_0_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "parallel_stream";
            version = "1.0.5";
            src = fetchHex {
              pkg = "parallel_stream";
              version = "1.0.5";
              sha256 =
                "9ee9ac36325cadff357e5fdb79c27465074db67f9af00f407e15bf649239950a";
            };

            meta = {
              description = ''Parallel stream operations for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/beatrichartz/parallel_stream";
            };
          } // packageOverrides)
      ) {};

    parallel_stream = parallel_stream_1_0_5;

    parallex_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "parallex";
            version = "0.1.2";
            src = fetchHex {
              pkg = "parallex";
              version = "0.1.2";
              sha256 =
                "a3c1c43df32399d8eeaa9dae9b0b0d56ed914fe3f1b7023bacd89ebf1d0c6fb4";
            };

            meta = {
              longDescription = ''Some concurrent versions of common Enum
                                functions. Might be useful if the applied
                                functions are calculation heavy.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ryanwinchester/parallex";
            };
          } // packageOverrides)
      ) {};

    parallex = parallex_0_1_2;

    params_2_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ecto_2_1_4 }:
          buildMix ({
            name = "params";
            version = "2.0.2";
            src = fetchHex {
              pkg = "params";
              version = "2.0.2";
              sha256 =
                "719eab48b6040d42fa4f3cdc0b685053cc0ba35c623b7ef1c9031c2d0f9d85ce";
            };
            beamDeps  = [ ecto_2_1_4 ];

            meta = {
              description = ''Parameter structure validation and casting with
                            Ecto.Schema.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/vic/params";
            };
          } // packageOverrides)
      ) {};

    params = params_2_0_2;

    paratize_2_1_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "paratize";
            version = "2.1.4";
            src = fetchHex {
              pkg = "paratize";
              version = "2.1.4";
              sha256 =
                "c537a7c94c67f5f5e464f3983015a5ac97a61662f143e71a37b984b40e3e81ab";
            };

            meta = {
              description = ''Elixir library providing some handy parallel
                            processing facilities.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/seantanly/elixir-paratize";
            };
          } // packageOverrides)
      ) {};

    paratize = paratize_2_1_4;

    parse_client_0_2_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exjsx_3_0_2,
          httpoison_0_5_0
        }:
          buildMix ({
            name = "parse_client";
            version = "0.2.3";
            src = fetchHex {
              pkg = "parse_client";
              version = "0.2.3";
              sha256 =
                "b80b259f9645ea4767824d47c12f719faf51a8031c4162f316fbe99a77b45c23";
            };
            beamDeps  = [ exjsx_3_0_2 httpoison_0_5_0 ];

            meta = {
              description = ''Elixir client for the parse.com REST API '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/elixircnx/parse_elixir_client";
            };
          } // packageOverrides)
      ) {};

    parse_client = parse_client_0_2_3;

    parse_torrent_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          bencode_0_3_0,
          earmark_0_2_1
        }:
          buildMix ({
            name = "parse_torrent";
            version = "0.2.0";
            src = fetchHex {
              pkg = "parse_torrent";
              version = "0.2.0";
              sha256 =
                "444d49f20ede110e33e0817134ef3f0b843a7af01c88e9c168acc4892ae2d320";
            };
            beamDeps  = [ bencode_0_3_0 earmark_0_2_1 ];

            meta = {
              description = ''Parses a .torrent file and returns a map'';
              license = stdenv.lib.licenses.unlicense;
              homepage = "https://github.com/preciz/parse_torrent";
            };
          } // packageOverrides)
      ) {};

    parse_torrent = parse_torrent_0_2_0;

    parse_trans_2_9_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, edown_0_8_1 }:
          buildRebar3 ({
            name = "parse_trans";
            version = "2.9.0";
            src = fetchHex {
              pkg = "parse_trans";
              version = "2.9.0";
              sha256 =
                "dda020976ad4aafe051ce785c0460a71a11b8b6b8c08a98e2c45b83edfdf2978";
            };

            beamDeps  = [ edown_0_8_1 ];

            meta = {
              description = ''Parse transform library'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/uwiger/parse_trans";
            };
          } // packageOverrides)
      ) {};

    parse_trans_3_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "parse_trans";
            version = "3.0.0";
            src = fetchHex {
              pkg = "parse_trans";
              version = "3.0.0";
              sha256 =
                "5495a3309051df7f510bc1fdabda92dff5417186a8f66d4419aad6ba0af5f0cb";
            };

            meta = {
              description = ''Parse transform library'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/uwiger/parse_trans";
            };
          } // packageOverrides)
      ) {};

    parse_trans = parse_trans_3_0_0;

    parselix_0_5_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "parselix";
            version = "0.5.0";
            src = fetchHex {
              pkg = "parselix";
              version = "0.5.0";
              sha256 =
                "f37f0c98ae3115bcb6b72ca9da128b1908ab1ec0fb0195a6f0b365ab12ba35d5";
            };

            meta = {
              description = ''A parser combinator library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ryo33/Parselix";
            };
          } // packageOverrides)
      ) {};

    parselix = parselix_0_5_0;

    parsex_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_1_1_1
        }:
          buildMix ({
            name = "parsex";
            version = "0.0.2";
            src = fetchHex {
              pkg = "parsex";
              version = "0.0.2";
              sha256 =
                "024657ae8d29eba99caf90276ac2d7f27cf435a543d4036859fd4ab6ffbceb75";
            };
            beamDeps  = [ httpoison_0_11_2 poison_1_1_1 ];

            meta = {
              description = ''ParsEx is an Elixir HTTP Client for communicating
                            with Parse.com`s Restful API '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/maarek/ParsEx";
            };
          } // packageOverrides)
      ) {};

    parsex = parsex_0_0_2;

    parsey_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "parsey";
            version = "0.0.2";
            src = fetchHex {
              pkg = "parsey";
              version = "0.0.2";
              sha256 =
                "1750ddf3a3c99f6bd4635057ec66b5b07209c78dc653c0de439626ddf8c49576";
            };

            meta = {
              description = ''A library to parse non-complex nested inputs with
                            a given ruleset.'';
              license = stdenv.lib.licenses.bsd2;
              homepage = "https://github.com/ScrimpyCat/Parsey";
            };
          } // packageOverrides)
      ) {};

    parsey = parsey_0_0_2;

    particle_0_1_7 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          gen_stage_0_12_0,
          hackney_1_8_6,
          poison_2_2_0
        }:
          buildMix ({
            name = "particle";
            version = "0.1.7";
            src = fetchHex {
              pkg = "particle";
              version = "0.1.7";
              sha256 =
                "6a3ebc3f1c9521453d6958d5f975347227d7573e0eebb7a48b89862afba33ed2";
            };
            beamDeps  = [ gen_stage_0_12_0 hackney_1_8_6 poison_2_2_0 ];

            meta = {
              description = ''Client library for the Particle Cloud API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jeffutter/particle-elixir";
            };
          } // packageOverrides)
      ) {};

    particle = particle_0_1_7;

    pascal_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pascal";
            version = "0.1.0";
            src = fetchHex {
              pkg = "pascal";
              version = "0.1.0";
              sha256 =
                "160235cbcb0ebfce74e3c6b9206a9e1775d149b352cfc6e854ee45d7de3befeb";
            };

            meta = {
              description = ''Provides a set of functions that calculate
                            Pascal`s triangles.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/kana-sama/pascal";
            };
          } // packageOverrides)
      ) {};

    pascal = pascal_0_1_0;

    pass_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          json_web_token_0_2_8,
          plug_1_3_5
        }:
          buildMix ({
            name = "pass";
            version = "0.3.0";
            src = fetchHex {
              pkg = "pass";
              version = "0.3.0";
              sha256 =
                "e2d44e9a94ce802b0723cd6e8c149c85c696e8ff3bf939f4c81ebd08938d0496";
            };
            beamDeps  = [ json_web_token_0_2_8 plug_1_3_5 ];

            meta = {
              description = ''A simple authentication manager for Plug
                            applications.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/elixir-extracts/pass";
            };
          } // packageOverrides)
      ) {};

    pass = pass_0_3_0;

    passport_0_0_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          comeonin_2_6_0,
          phoenix_1_2_0_rc_1
        }:
          buildMix ({
            name = "passport";
            version = "0.0.4";
            src = fetchHex {
              pkg = "passport";
              version = "0.0.4";
              sha256 =
                "10e8e42cfd5fa834d7c3c3276c39274a3824100f2ffeed26adb4ed8475f0be91";
            };
            beamDeps  = [ comeonin_2_6_0 phoenix_1_2_0_rc_1 ];

            meta = {
              description = ''Provides authentication for phoenix
                            applications'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/opendrops/passport";
            };
          } // packageOverrides)
      ) {};

    passport = passport_0_0_4;

    passwordless_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "passwordless";
            version = "0.1.0";
            src = fetchHex {
              pkg = "passwordless";
              version = "0.1.0";
              sha256 =
                "e0b010826572401058bea71f5123870db86a6ef416a7d94d9d9246c2f895a6e0";
            };

            meta = {
              description = ''Token-based authentication library for Elixir.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/endersstocker/passwordless";
            };
          } // packageOverrides)
      ) {};

    passwordless = passwordless_0_1_0;

    pathway_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_1_5_2 }:
          buildMix ({
            name = "pathway";
            version = "0.1.0";
            src = fetchHex {
              pkg = "pathway";
              version = "0.1.0";
              sha256 =
                "ae734bc8db0d91c0876e15b7e22e8d7616701eff94b1bd2930d2783a1b11c01d";
            };
            beamDeps  = [ poison_1_5_2 ];

            meta = {
              description = ''A HTTP client library for the Trak.io REST API.
                            '';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/novabyte/pathway";
            };
          } // packageOverrides)
      ) {};

    pathway = pathway_0_1_0;

    patiently_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "patiently";
            version = "0.1.0";
            src = fetchHex {
              pkg = "patiently";
              version = "0.1.0";
              sha256 =
                "1f3e8bfc52a479c51d9af83a53f276ac1b4f2ae2bc3482c808d5193dc1e50089";
            };

            meta = {
              description = ''Helpers for waiting on asynchronous events'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dantswain/patiently";
            };
          } // packageOverrides)
      ) {};

    patiently = patiently_0_1_0;

    pattern_tap_0_2_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pattern_tap";
            version = "0.2.2";
            src = fetchHex {
              pkg = "pattern_tap";
              version = "0.2.2";
              sha256 =
                "2d17fe4c076b12efe39a362ade88d11d8bed204009027755802213db9feb3675";
            };

            meta = {
              description = ''Macro for tapping into a pattern match while
                            using the pipe operator'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mgwidmann/elixir-pattern_tap";
            };
          } // packageOverrides)
      ) {};

    pattern_tap = pattern_tap_0_2_2;

    pavlov_0_2_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, meck_0_8_4 }:
          buildMix ({
            name = "pavlov";
            version = "0.2.3";
            src = fetchHex {
              pkg = "pavlov";
              version = "0.2.3";
              sha256 =
                "4d38e96b7581261a49f00d2046603ad3c9af6d52abd26d16bbf6a0a5a82c9643";
            };
            beamDeps  = [ meck_0_8_4 ];

            meta = {
              longDescription = ''Pavlov is a BDD library for your Elixir
                                projects, allowing you to write expressive unit
                                tests that tell the story of how your
                                application behaves. The syntax tries to follow
                                RSpec`s wherever possible.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sproutapp/pavlov";
            };
          } // packageOverrides)
      ) {};

    pavlov = pavlov_0_2_3;

    pay_day_loan_0_5_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pay_day_loan";
            version = "0.5.1";
            src = fetchHex {
              pkg = "pay_day_loan";
              version = "0.5.1";
              sha256 =
                "7eac80de84d657bdb07c5fe3552ef209d4d4d8ff22e01e2d003076a45fd80cd6";
            };

            meta = {
              description = ''Framework for building on-demand caching. Fast
                            cache now!'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/simplifi/pay_day_loan";
            };
          } // packageOverrides)
      ) {};

    pay_day_loan = pay_day_loan_0_5_1;

    pay_pal_0_0_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          oauth2_0_9_1,
          poison_3_1_0
        }:
          buildMix ({
            name = "pay_pal";
            version = "0.0.4";
            src = fetchHex {
              pkg = "pay_pal";
              version = "0.0.4";
              sha256 =
                "6b0b9e1ae60218addd907ebb5df1b2944161d9cc3e08dcea72b95e90f89bf5bd";
            };
            beamDeps  = [ httpoison_0_11_2 oauth2_0_9_1 poison_3_1_0 ];

            meta = {
              description = ''Elixir library for working with the PayPal REST
                            API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zensavona/paypal";
            };
          } // packageOverrides)
      ) {};

    pay_pal = pay_pal_0_0_4;

    payeezy_0_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_9_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "payeezy";
            version = "0.1.2";
            src = fetchHex {
              pkg = "payeezy";
              version = "0.1.2";
              sha256 =
                "06088dc71edda8d6328e1e71e20cd5824d99eafd6988ebe5dbbe974a8af48138";
            };
            beamDeps  = [ httpoison_0_9_2 poison_2_2_0 ];

            meta = {
              description = ''Payeezy API library for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/revzilla/payeezy";
            };
          } // packageOverrides)
      ) {};

    payeezy = payeezy_0_1_2;

    payjp_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "payjp";
            version = "0.1.1";
            src = fetchHex {
              pkg = "payjp";
              version = "0.1.1";
              sha256 =
                "8abe1dd8798bb60c7ffa976ace798b6c032294ee3c2f6fc3fc7c8e6449d99fb2";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''A PAY.JP Library for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/shufo/payjp-elixir";
            };
          } // packageOverrides)
      ) {};

    payjp = payjp_0_1_1;

    pbkdf2_2_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "pbkdf2";
            version = "2.0.0";
            src = fetchHex {
              pkg = "pbkdf2";
              version = "2.0.0";
              sha256 =
                "1e793ce6fdb0576613115714deae9dfc1d1537eaba74f07efb36de139774488d";
            };

            meta = {
              description = ''Erlang PBKDF2 Key Derivation Function'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/basho/erlang-pbkdf2";
            };
          } // packageOverrides)
      ) {};

    pbkdf2 = pbkdf2_2_0_0;

    pbkdf2_nif_0_4_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "pbkdf2_nif";
            version = "0.4.0";
            src = fetchHex {
              pkg = "pbkdf2_nif";
              version = "0.4.0";
              sha256 =
                "c2400a26e3c567389c18d34af2008a6212acbf397aaf1dc1fe19a05f621b92ed";
            };
            compilePorts = true;
            buildPlugins  = [ pc ];


            meta = {
              description = ''PBKDF2 NIF implementation'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/barrel-db/erlang-pbkdf2-nif";
            };
          } // packageOverrides)
      ) {};

    pbkdf2_nif = pbkdf2_nif_0_4_0;

    pc_1_6_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "pc";
            version = "1.6.0";
            src = fetchHex {
              pkg = "pc";
              version = "1.6.0";
              sha256 =
                "00a2ca6ae26d847ad1e4787ec71293af0d3eea260acf39698cc3dbf262080477";
            };

            meta = {
              description = ''a rebar3 port compiler for native code'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/blt/port_compiler";
            };
          } // packageOverrides)
      ) {};

    pc = pc_1_6_0;

    pca_predict_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exconstructor_1_1_0,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "pca_predict";
            version = "0.1.0";
            src = fetchHex {
              pkg = "pca_predict";
              version = "0.1.0";
              sha256 =
                "879e6f0c171a3993a180cf195ed9a0420582ae09df83c29416a8668f694afa9e";
            };
            beamDeps  = [ exconstructor_1_1_0 httpoison_0_11_2 poison_3_1_0
                      ];

            meta = {
              description = ''A PCA Predict API wrapper for Elixir.'';
              license = stdenv.lib.licenses.cc0;
              homepage = "https://github.com/sauce-consultants/pca_predict";
            };
          } // packageOverrides)
      ) {};

    pca_predict = pca_predict_0_1_0;

    pco_api_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "pco_api";
            version = "0.1.0";
            src = fetchHex {
              pkg = "pco_api";
              version = "0.1.0";
              sha256 =
                "ce6746e26a93c33accc9965bd3aac18c2e7a144d041e7d4968c7144683139a07";
            };
            beamDeps  = [ httpoison_0_11_2 poison_2_2_0 ];

            meta = {
              description = ''An Elixir wrapper for the Planning Center API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/geolessel/pco-api-elixir";
            };
          } // packageOverrides)
      ) {};

    pco_api = pco_api_0_1_0;

    pdf_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pdf";
            version = "0.0.1";
            src = fetchHex {
              pkg = "pdf";
              version = "0.0.1";
              sha256 =
                "400a8817cbc3d9ea48bb58f2841c338fb7fdff5b23164c4c222d6ecc54a72f7a";
            };

            meta = {
              description = ''Elixir API for generating PDF documents.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/andrewtimberlake/elixir-pdf";
            };
          } // packageOverrides)
      ) {};

    pdf = pdf_0_0_1;

    pdf2htmlex_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pdf2htmlex";
            version = "0.2.0";
            src = fetchHex {
              pkg = "pdf2htmlex";
              version = "0.2.0";
              sha256 =
                "50885e995d25362b1f25c74796c0627657147d4d10ccb4be736be3b06b8a44a3";
            };

            meta = {
              description = ''Convert PDF docs to beautiful HTML files without
                            losing text or format.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ricn/pdf2htmlex";
            };
          } // packageOverrides)
      ) {};

    pdf2htmlex = pdf2htmlex_0_2_0;

    pdf_generator_0_3_5 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          misc_random_0_2_6,
          porcelain_2_0_3
        }:
          buildMix ({
            name = "pdf_generator";
            version = "0.3.5";
            src = fetchHex {
              pkg = "pdf_generator";
              version = "0.3.5";
              sha256 =
                "207773e3f48f4263be9970cd0e7b3b74c6dd26036d42e1a46dec1cc7143c1ef9";
            };
            beamDeps  = [ misc_random_0_2_6 porcelain_2_0_3 ];

            meta = {
              longDescription = ''A wrapper for wkhtmltopdf (HTML to PDF) and
                                PDFTK (adds in encryption) for use in Elixir
                                projects.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gutschilla/elixir-pdf-generator";
            };
          } // packageOverrides)
      ) {};

    pdf_generator = pdf_generator_0_3_5;

    pe4kin_0_1_1 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_0_4,
          hackney_1_6_0,
          jiffy_0_14_7
        }:
          buildRebar3 ({
            name = "pe4kin";
            version = "0.1.1";
            src = fetchHex {
              pkg = "pe4kin";
              version = "0.1.1";
              sha256 =
                "9179ab3ee09a8d0e101a51225a09c5ea0099a3505164ec7c0cc585142a897259";
            };

            beamDeps  = [ cowboy_1_0_4 hackney_1_6_0 jiffy_0_14_7 ];

            meta = {
              description = ''Telegram messenger bot API wrapper'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/seriyps/pe4kin";
            };
          } // packageOverrides)
      ) {};

    pe4kin = pe4kin_0_1_1;

    peatio_client_1_5_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          decimal_1_3_1,
          hackney_1_4_4,
          httpoison_0_8_3,
          poison_1_5_2
        }:
          buildMix ({
            name = "peatio_client";
            version = "1.5.0";
            src = fetchHex {
              pkg = "peatio_client";
              version = "1.5.0";
              sha256 =
                "701489d2b53b76194bb8745003c2e5665045ba4132ec1020813c63671d19081e";
            };
            beamDeps  = [
                          decimal_1_3_1
                          hackney_1_4_4
                          httpoison_0_8_3
                          poison_1_5_2
                        ];

            meta = {
              description = ''Peatio Exchange compatibility API for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/peatio/peatio-client-elixir";
            };
          } // packageOverrides)
      ) {};

    peatio_client = peatio_client_1_5_0;

    peerage_1_0_2 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, deferred_config_0_1_1
        }:
          buildMix ({
            name = "peerage";
            version = "1.0.2";
            src = fetchHex {
              pkg = "peerage";
              version = "1.0.2";
              sha256 =
                "2e4767e16abfd404ed9ebc3ea3f5ec26b207d65156a06d8e95523b9a8d09cc03";
            };
            beamDeps  = [ deferred_config_0_1_1 ];

            meta = {
              longDescription = ''Easy clustering, pluggable discovery: via DNS
                                (for Kubernetes, Weave, discoverd, Swarm and
                                others), UDP multicast, or a plain list of
                                nodes. Easy extensibility for custom
                                Providers.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mrluc/peerage";
            };
          } // packageOverrides)
      ) {};

    peerage = peerage_1_0_2;

    peluquero_0_3_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          amqp_0_2_2,
          amqp_client_3_6_10,
          consul_1_1_0,
          gen_stage_0_12_0,
          httpoison_0_11_2,
          json_0_3_3,
          poolboy_1_5_1,
          rabbit_common_3_6_10,
          yaml_elixir_1_3_0
        }:
          buildMix ({
            name = "peluquero";
            version = "0.3.3";
            src = fetchHex {
              pkg = "peluquero";
              version = "0.3.3";
              sha256 =
                "9e72bf6d53bb237593ef581c2cb6fc0054e17a1446f068a1a00056fece6fdc43";
            };
            beamDeps  = [
                          amqp_0_2_2
                          amqp_client_3_6_10
                          consul_1_1_0
                          gen_stage_0_12_0
                          httpoison_0_11_2
                          json_0_3_3
                          poolboy_1_5_1
                          rabbit_common_3_6_10
                          yaml_elixir_1_3_0
                        ];

            meta = {
              longDescription = ''RabbitMQ middleware to plug into exchange
                                chain to transform data. Peluquero is reading
                                all the configured source exchanges, transforms
                                and publishes to all destination exchanges.
                                Transformers might be added in runtime using
                                `Peluquero.handler!/1`.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/am-kantox/peluquero";
            };
          } // packageOverrides)
      ) {};

    peluquero = peluquero_0_3_3;

    peon_2_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "peon";
            version = "2.0.0";
            src = fetchHex {
              pkg = "peon";
              version = "2.0.0";
              sha256 =
                "3d87e626f5d014563d1cf319c0fe8576c8eb3f4399ecc9a0d7fb2385a180aaab";
            };

            meta = {
              description = ''Use Elixir maps as a document storage format.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/supernintendo/peon";
            };
          } // packageOverrides)
      ) {};

    peon = peon_2_0_0;

    perf_agent_0_1_10 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_6_6,
          phoenix_1_3_0_rc_2
        }:
          buildMix ({
            name = "perf_agent";
            version = "0.1.10";
            src = fetchHex {
              pkg = "perf_agent";
              version = "0.1.10";
              sha256 =
                "49a6e354cf3f3c93ab7146729902b07805113416f98ce1cd75af83b316d487d4";
            };
            beamDeps  = [ hackney_1_6_6 phoenix_1_3_0_rc_2 ];

            meta = {
              description = ''Perf api tracking for Elixir applications.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/perflabs/phoenix-perf";
            };
          } // packageOverrides)
      ) {};

    perf_agent = perf_agent_0_1_10;

    permission_ex_0_4_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "permission_ex";
            version = "0.4.0";
            src = fetchHex {
              pkg = "permission_ex";
              version = "0.4.0";
              sha256 =
                "2274a7f719b0cd1471e22933885d5b6e58f8dbc4501e91d3902e68eea4da612e";
            };

            meta = {
              description = ''Permission management and checking library for
                            Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/OvermindDL1/permission_ex";
            };
          } // packageOverrides)
      ) {};

    permission_ex = permission_ex_0_4_0;

    persian_calendar_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "persian_calendar";
            version = "0.1.0";
            src = fetchHex {
              pkg = "persian_calendar";
              version = "0.1.0";
              sha256 =
                "06ee83d8b1c56783e40d9db9970f809ce51db05254ba7daba668cf29875d1128";
            };

            meta = {
              longDescription = ''Provides Persian calendar for converting
                                gregorian (milady) date to shamsi date and
                                reverse'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/SalmanAA/PersianCalendar";
            };
          } // packageOverrides)
      ) {};

    persian_calendar = persian_calendar_0_1_0;

    persistent_ets_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "persistent_ets";
            version = "0.1.0";
            src = fetchHex {
              pkg = "persistent_ets";
              version = "0.1.0";
              sha256 =
                "ab0be0f5aa6963f3d6fc712fc37341e75ca7beef46cf46ced2b66af908c9b55f";
            };

            meta = {
              description = ''Ets table backed by a persistence file'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/michalmuskala/persistent_ets";
            };
          } // packageOverrides)
      ) {};

    persistent_ets = persistent_ets_0_1_0;

    perudox_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "perudox";
            version = "0.1.0";
            src = fetchHex {
              pkg = "perudox";
              version = "0.1.0";
              sha256 =
                "f6b51a0f0229fce9b2e16d1a6327eeb37d97c070a6cae690b791971a73de6616";
            };

            meta = {
              description = ''An implementation of the Perudo / Dudo / Pirate`s
                            Dice game written in Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/hickscorp/perudox";
            };
          } // packageOverrides)
      ) {};

    perudox = perudox_0_1_0;

    peselx_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "peselx";
            version = "0.2.1";
            src = fetchHex {
              pkg = "peselx";
              version = "0.2.1";
              sha256 =
                "f2388b988c0374fe2ef1c43b96345f72a9b6f0f1f5c1b48ab92a6a95c6420f87";
            };

            meta = {
              description = ''Validator of PESEL number - Polish national ID
                            number. Checks checksum.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/Koziolek/peselx";
            };
          } // packageOverrides)
      ) {};

    peselx = peselx_0_2_1;

    pest_0_5_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "pest";
            version = "0.5.0";
            src = fetchHex {
              pkg = "pest";
              version = "0.5.0";
              sha256 =
                "60194497b7bb5a8466e41ca52addfe146c312aab61086899cf3a11fc75fb6893";
            };

            meta = {
              description = ''Primitive Erlang Security Tool'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/okeuday/pest";
            };
          } // packageOverrides)
      ) {};

    pest = pest_0_5_0;

    pet_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, yomel_0_5_0 }:
          buildMix ({
            name = "pet";
            version = "0.1.1";
            src = fetchHex {
              pkg = "pet";
              version = "0.1.1";
              sha256 =
                "5ec25c6c2337e286919c925dce46ecfa4b09311f516ecd922c71391cd4caa697";
            };
            beamDeps  = [ yomel_0_5_0 ];

            meta = {
              description = ''Account management tool compatible with pit'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Joe-noh/pet";
            };
          } // packageOverrides)
      ) {};

    pet = pet_0_1_1;

    petick_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "petick";
            version = "0.0.1";
            src = fetchHex {
              pkg = "petick";
              version = "0.0.1";
              sha256 =
                "77ca306a379109aeb98528fdc5642dccc0b66379e67058814470d0cf30053586";
            };

            meta = {
              description = ''Periodic timer'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/niku/petick";
            };
          } // packageOverrides)
      ) {};

    petick = petick_0_0_1;

    petrovich_elixir_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "petrovich_elixir";
            version = "0.0.1";
            src = fetchHex {
              pkg = "petrovich_elixir";
              version = "0.0.1";
              sha256 =
                "6e3e9951240c06819c2dc2c5c02a54e13ce1d3dcbebdd02f55d21b792a13ea61";
            };

            meta = {
              description = ''Elixir library to inflect Russian first, last,
                            and middle names.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/petrovich/petrovich_elixir";
            };
          } // packageOverrides)
      ) {};

    petrovich_elixir = petrovich_elixir_0_0_1;

    pg2pubsub_0_2_13 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pg2pubsub";
            version = "0.2.13";
            src = fetchHex {
              pkg = "pg2pubsub";
              version = "0.2.13";
              sha256 =
                "a2c3ef4dcf031c71c75781ec49236220f405e836f4ee384bdcfbbf8abd6fc4db";
            };

            meta = {
              description = ''A PubSub implementation for Elixir, using PG2
                            (Erlang process groups).'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kbremner/pg2pubsub";
            };
          } // packageOverrides)
      ) {};

    pg2pubsub = pg2pubsub_0_2_13;

    pgapp_0_0_2 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          epgsql_3_3_0,
          poolboy_1_5_1
        }:
          buildRebar3 ({
            name = "pgapp";
            version = "0.0.2";
            src = fetchHex {
              pkg = "pgapp";
              version = "0.0.2";
              sha256 =
                "454980838f69e94a123e85449364df6d6092427899a5e6a017481d2626cf9ff3";
            };

            beamDeps  = [ epgsql_3_3_0 poolboy_1_5_1 ];

            meta = {
              description = ''epgsql application'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    pgapp = pgapp_0_0_2;

    pgpool_1_1_0 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          epgsql_3_2_0,
          poolboy_1_5_1
        }:
          buildRebar3 ({
            name = "pgpool";
            version = "1.1.0";
            src = fetchHex {
              pkg = "pgpool";
              version = "1.1.0";
              sha256 =
                "87c7983511c74d1b3bb3786756080f0d1c34dac62bfdefb11058045050db5be8";
            };

            beamDeps  = [ epgsql_3_2_0 poolboy_1_5_1 ];

            meta = {
              longDescription = ''A PosgreSQL client that automatically uses
                                connection pools and reconnects in case of
                                errors.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ostinelli/pgpool";
            };
          } // packageOverrides)
      ) {};

    pgpool = pgpool_1_1_0;

    pgsql_26_0_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "pgsql";
            version = "26.0.1";
            src = fetchHex {
              pkg = "pgsql";
              version = "26.0.1";
              sha256 =
                "0ee25cbd2d991a698aae4bfa5b1e394a1001b956943059547e27b9d35dda0006";
            };

            meta = {
              description = ''pgsql driver'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/semiocast/pgsql";
            };
          } // packageOverrides)
      ) {};

    pgsql = pgsql_26_0_1;

    phasedb_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          calendar_0_12_4,
          heap_1_0_1,
          inflex_1_5_0,
          poison_2_1_0
        }:
          buildMix ({
            name = "phasedb";
            version = "0.0.2";
            src = fetchHex {
              pkg = "phasedb";
              version = "0.0.2";
              sha256 =
                "d9d7d5f7317ad0ce20da3b95e26b286d45d91a61a63a684fba42681a5ced68ee";
            };
            beamDeps  = [
                          calendar_0_12_4 heap_1_0_1 inflex_1_5_0 poison_2_1_0
                        ];

            meta = {
              description = ''A real-time time series database.'';

            };
          } // packageOverrides)
      ) {};

    phasedb = phasedb_0_0_2;

    phasedb_client_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          calendar_0_12_4,
          phasedb_0_0_2,
          poison_2_1_0,
          table_rex_0_8_3,
          websocket_client_1_2_1
        }:
          buildMix ({
            name = "phasedb_client";
            version = "0.0.1";
            src = fetchHex {
              pkg = "phasedb_client";
              version = "0.0.1";
              sha256 =
                "11019f0c5c2ecbfe578150434f064c84a54752093d004a9cc15296fa054b94fa";
            };
            beamDeps  = [
                          calendar_0_12_4
                          phasedb_0_0_2
                          poison_2_1_0
                          table_rex_0_8_3
                          websocket_client_1_2_1
                        ];

            meta = {
              description = ''A real-time time series database - command line
                            client.'';

            };
          } // packageOverrides)
      ) {};

    phasedb_client = phasedb_client_0_0_1;

    phasedb_server_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          calendar_0_12_4,
          cowboy_1_0_4,
          phasedb_0_0_2
        }:
          buildMix ({
            name = "phasedb_server";
            version = "0.0.1";
            src = fetchHex {
              pkg = "phasedb_server";
              version = "0.0.1";
              sha256 =
                "dfde579bb29ed0d805276effb4f7a27d6a302a9615881051fb25eba8cf16da05";
            };
            beamDeps  = [ calendar_0_12_4 cowboy_1_0_4 phasedb_0_0_2 ];

            meta = {
              description = ''A real-time time series database.'';

            };
          } // packageOverrides)
      ) {};

    phasedb_server = phasedb_server_0_0_1;

    phauxth_0_11_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          comeonin_3_0_2,
          cowboy_1_1_2,
          ecto_2_1_4,
          phoenix_1_1_9,
          postgrex_1_0_0_rc_1
        }:
          buildMix ({
            name = "phauxth";
            version = "0.11.0";
            src = fetchHex {
              pkg = "phauxth";
              version = "0.11.0";
              sha256 =
                "7a226e3a686f44d4fe32b2ff9af698897e22ccaae39560d75b4bacbe0b0e454f";
            };
            beamDeps  = [
                          comeonin_3_0_2
                          cowboy_1_1_2
                          ecto_2_1_4
                          phoenix_1_1_9
                          postgrex_1_0_0_rc_1
                        ];

            meta = {
              description = ''Authentication library for Phoenix, and other
                            Plug-based, web applications'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/riverrun/phauxth";
            };
          } // packageOverrides)
      ) {};

    phauxth = phauxth_0_11_0;

    phil_columns_1_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_4,
          inflex_1_8_1
        }:
          buildMix ({
            name = "phil_columns";
            version = "1.0.1";
            src = fetchHex {
              pkg = "phil_columns";
              version = "1.0.1";
              sha256 =
                "72ca79d4dae0d58ebe242af6c192eafdc1449b706714d10b7d52688c04dd1359";
            };
            beamDeps  = [ ecto_2_1_4 inflex_1_8_1 ];

            meta = {
              longDescription = ''A full featured Elixir/Ecto seeding solution
                                providing means for dev and prod seeding.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/midas/phil_columns-ex";
            };
          } // packageOverrides)
      ) {};

    phil_columns = phil_columns_1_0_1;

    phoenix_0_4_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_0_4,
          linguist_0_1_5,
          plug_0_7_0,
          poison_1_1_1
        }:
          buildMix ({
            name = "phoenix";
            version = "0.4.1";
            src = fetchHex {
              pkg = "phoenix";
              version = "0.4.1";
              sha256 =
                "b1e72759e90a814b6a5d4d94e218b2c975bd156ebdfb4c54f8dc8b590267b4e0";
            };
            beamDeps  = [ cowboy_1_0_4 linguist_0_1_5 plug_0_7_0 poison_1_1_1
                      ];

            meta = {
              longDescription = ''Productive. Reliable. Fast. A productive web
                                framework that does not compromise speed and
                                maintainability.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/phoenixframework/phoenix";
            };
          } // packageOverrides)
      ) {};

    phoenix_1_1_9 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          plug_1_1_7,
          poison_1_0_2
        }:
          buildMix ({
            name = "phoenix";
            version = "1.1.9";
            src = fetchHex {
              pkg = "phoenix";
              version = "1.1.9";
              sha256 =
                "0092123195671cf2788fd981ca3c6245f39bbc6e1d518a6d645639492dfd148f";
            };
            beamDeps  = [ cowboy_1_1_2 plug_1_1_7 poison_1_0_2 ];

            meta = {
              longDescription = ''Productive. Reliable. Fast. A productive web
                                framework that does not compromise speed and
                                maintainability.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/phoenixframework/phoenix";
            };
          } // packageOverrides)
      ) {};

    phoenix_1_2_0_rc_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          mime_1_1_0,
          phoenix_pubsub_1_0_1,
          plug_1_3_5,
          poison_1_0_2
        }:
          buildMix ({
            name = "phoenix";
            version = "1.2.0-rc.1";
            src = fetchHex {
              pkg = "phoenix";
              version = "1.2.0-rc.1";
              sha256 =
                "1c5fcaa808baab75eeb76c21b20c91b96915ea66a1b7a4f1ca829641888cb52c";
            };
            beamDeps  = [
                          cowboy_1_1_2
                          mime_1_1_0
                          phoenix_pubsub_1_0_1
                          plug_1_3_5
                          poison_1_0_2
                        ];

            meta = {
              longDescription = ''Productive. Reliable. Fast. A productive web
                                framework that does not compromise speed and
                                maintainability.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/phoenixframework/phoenix";
            };
          } // packageOverrides)
      ) {};

    phoenix_1_3_0_rc_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          phoenix_pubsub_1_0_1,
          plug_1_1_7,
          poison_1_0_2
        }:
          buildMix ({
            name = "phoenix";
            version = "1.3.0-rc.2";
            src = fetchHex {
              pkg = "phoenix";
              version = "1.3.0-rc.2";
              sha256 =
                "6170a4cb09a3520181c29f6f0c2c6e05d445b316346e732cc84ecacae7e5e544";
            };
            beamDeps  = [
                          cowboy_1_1_2
                          phoenix_pubsub_1_0_1
                          plug_1_1_7
                          poison_1_0_2
                        ];

            meta = {
              longDescription = ''Productive. Reliable. Fast. A productive web
                                framework that does not compromise speed and
                                maintainability.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/phoenixframework/phoenix";
            };
          } // packageOverrides)
      ) {};

    phoenix = phoenix_1_3_0_rc_2;

    phoenix_active_link_0_1_1 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, phoenix_html_2_9_3
        }:
          buildMix ({
            name = "phoenix_active_link";
            version = "0.1.1";
            src = fetchHex {
              pkg = "phoenix_active_link";
              version = "0.1.1";
              sha256 =
                "cb46e6866a383ec79076f63bf0b657776e15d5df32df497c23fb48d2272e3e95";
            };
            beamDeps  = [ phoenix_html_2_9_3 ];

            meta = {
              description = ''Phoenix view helper to manage \"active\" state of
                            a link'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tuvistavie/phoenix-active-link";
            };
          } // packageOverrides)
      ) {};

    phoenix_active_link = phoenix_active_link_0_1_1;

    phoenix_admin_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "phoenix_admin";
            version = "0.1.0";
            src = fetchHex {
              pkg = "phoenix_admin";
              version = "0.1.0";
              sha256 =
                "272871616ed5151e0432f79f9b389561f4d484807411f694c3dc7594dd650970";
            };

            meta = {
              description = ''Admin panel for Phoenix projects'';
              license = stdenv.lib.licenses.mit;
              homepage = "";
            };
          } // packageOverrides)
      ) {};

    phoenix_admin = phoenix_admin_0_1_0;

    phoenix_alexa_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          plug_1_3_5,
          poison_2_2_0
        }:
          buildMix ({
            name = "phoenix_alexa";
            version = "0.2.0";
            src = fetchHex {
              pkg = "phoenix_alexa";
              version = "0.2.0";
              sha256 =
                "2091b526a5e245716792e20f0897924a4f3c1fddef2e8a2c66148b71cb9db84b";
            };
            beamDeps  = [ plug_1_3_5 poison_2_2_0 ];

            meta = {
              description = ''Alexa library for Phoenix'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gabiz/phoenix_alexa";
            };
          } // packageOverrides)
      ) {};

    phoenix_alexa = phoenix_alexa_0_2_0;

    phoenix_api_docs_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          plug_1_3_5,
          poison_3_1_0
        }:
          buildMix ({
            name = "phoenix_api_docs";
            version = "0.1.0";
            src = fetchHex {
              pkg = "phoenix_api_docs";
              version = "0.1.0";
              sha256 =
                "88eda455d65a74ab649780312a3a3c93a4b65cc895799e335d778c378de0b17c";
            };
            beamDeps  = [ plug_1_3_5 poison_3_1_0 ];

            meta = {
              longDescription = ''PhoenixApiDocs generates API documentation
                                from annotations in controllers actions and
                                tests cases.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/smoku/phoenix_api_docs";
            };
          } // packageOverrides)
      ) {};

    phoenix_api_docs = phoenix_api_docs_0_1_0;

    phoenix_calendar_0_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          calendar_0_6_9,
          phoenix_html_2_9_3
        }:
          buildMix ({
            name = "phoenix_calendar";
            version = "0.1.2";
            src = fetchHex {
              pkg = "phoenix_calendar";
              version = "0.1.2";
              sha256 =
                "f22968fd2287b419bf9791845b62501bf0177630d01a92b0ba33e5f00978ca3c";
            };
            beamDeps  = [ calendar_0_6_9 phoenix_html_2_9_3 ];

            meta = {
              description = ''Integration between Phoenix & Calendar'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/lau/phoenix_calendar";
            };
          } // packageOverrides)
      ) {};

    phoenix_calendar = phoenix_calendar_0_1_2;

    phoenix_channel_client_0_1_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, websocket_client_1_2_1
        }:
          buildMix ({
            name = "phoenix_channel_client";
            version = "0.1.0";
            src = fetchHex {
              pkg = "phoenix_channel_client";
              version = "0.1.0";
              sha256 =
                "385340fe3071c642c2d0d3878a82769b6275d9b3828b053a26fe467dda305c0b";
            };
            beamDeps  = [ websocket_client_1_2_1 ];

            meta = {
              description = ''Connect to Phoenix Channels from Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/mobileoverlord/phoenix_channel_client";
            };
          } // packageOverrides)
      ) {};

    phoenix_channel_client = phoenix_channel_client_0_1_0;

    phoenix_components_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          phoenix_1_3_0_rc_2,
          phoenix_html_2_9_3
        }:
          buildMix ({
            name = "phoenix_components";
            version = "0.2.0";
            src = fetchHex {
              pkg = "phoenix_components";
              version = "0.2.0";
              sha256 =
                "2d76650c97501ffd2526de6fed3cf6b5a37053e8e17d7f0e73ea1f9f4023107c";
            };
            beamDeps  = [ phoenix_1_3_0_rc_2 phoenix_html_2_9_3 ];

            meta = {
              longDescription = ''This library helps you write encapsulated
                                bits of HTML into a single unit called component
                                in your server rendered Phoenix web site.
                                Similar to how react/ember/web components do.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mvdwg/phoenix_components";
            };
          } // packageOverrides)
      ) {};

    phoenix_components = phoenix_components_0_2_0;

    phoenix_cowboy_logging_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, cowboy_1_1_2 }:
          buildMix ({
            name = "phoenix_cowboy_logging";
            version = "1.0.0";
            src = fetchHex {
              pkg = "phoenix_cowboy_logging";
              version = "1.0.0";
              sha256 =
                "80652fcfd25d876d7a2317d823503515e04a09a8d5b355e22ecdc44ab0c5ffed";
            };
            beamDeps  = [ cowboy_1_1_2 ];

            meta = {
              description = ''Pry some information from cowboy when it fails to
                            parse requests.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pezra/phoenix_cowboy_logging";
            };
          } // packageOverrides)
      ) {};

    phoenix_cowboy_logging = phoenix_cowboy_logging_1_0_0;

    phoenix_cowboy_remove_server_header_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, cowboy_1_1_2 }:
          buildMix ({
            name = "phoenix_cowboy_remove_server_header";
            version = "0.1.0";
            src = fetchHex {
              pkg = "phoenix_cowboy_remove_server_header";
              version = "0.1.0";
              sha256 =
                "fcabac367bbe6886d1b5a74ea0d449706b168418f7ece9d3013bb9d2d44bbbbe";
            };
            beamDeps  = [ cowboy_1_1_2 ];

            meta = {
              description = ''Remove `server: Cowboy` in http headers from
                            Phoenix'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/hirocaster/phoenix_cowboy_remove_server_header";
            };
          } // packageOverrides)
      ) {};

    phoenix_cowboy_remove_server_header =
      phoenix_cowboy_remove_server_header_0_1_0;

    phoenix_default_title_0_0_2 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, phoenix_1_3_0_rc_2
        }:
          buildMix ({
            name = "phoenix_default_title";
            version = "0.0.2";
            src = fetchHex {
              pkg = "phoenix_default_title";
              version = "0.0.2";
              sha256 =
                "1404a0c59fb124fb4f3c5312e7ad20e244ac9654cfc56bf6ceadd65b96093f29";
            };
            beamDeps  = [ phoenix_1_3_0_rc_2 ];

            meta = {
              description = ''Creates automatic placeholder titles for a
                            Phoenix app layout'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ciaran/default_title";
            };
          } // packageOverrides)
      ) {};

    phoenix_default_title = phoenix_default_title_0_0_2;

    phoenix_dtl_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "phoenix_dtl";
            version = "0.0.1";
            src = fetchHex {
              pkg = "phoenix_dtl";
              version = "0.0.1";
              sha256 =
                "04e80730e1437dc624bd96207eaef064320209bb73e48915b4b52a9a01271898";
            };

            meta = {
              description = ''Phoenix Template Engine for the django template
                            language '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/andihit/phoenix_dtl";
            };
          } // packageOverrides)
      ) {};

    phoenix_dtl = phoenix_dtl_0_0_1;

    phoenix_ecto_1_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_0_0_rc_6,
          phoenix_html_2_9_3,
          poison_1_5_2
        }:
          buildMix ({
            name = "phoenix_ecto";
            version = "1.2.0";
            src = fetchHex {
              pkg = "phoenix_ecto";
              version = "1.2.0";
              sha256 =
                "8b24e0f6e5284b59359a31f3053753a76865d08cd4a32e17efd93807f4f44caf";
            };
            beamDeps  = [ ecto_2_0_0_rc_6 phoenix_html_2_9_3 poison_1_5_2 ];

            meta = {
              description = ''Integration between Phoenix & Ecto'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/phoenixframework/phoenix_ecto";
            };
          } // packageOverrides)
      ) {};

    phoenix_ecto_2_0_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_1_1_9,
          phoenix_html_2_9_3,
          poison_1_0_2
        }:
          buildMix ({
            name = "phoenix_ecto";
            version = "2.0.3";
            src = fetchHex {
              pkg = "phoenix_ecto";
              version = "2.0.3";
              sha256 =
                "5537a420d580224254c599f6e52d2e550ae87ca6db53f4c090cd48dd5abeef6b";
            };
            beamDeps  = [ ecto_1_1_9 phoenix_html_2_9_3 poison_1_0_2 ];

            meta = {
              description = ''Integration between Phoenix & Ecto'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/phoenixframework/phoenix_ecto";
            };
          } // packageOverrides)
      ) {};

    phoenix_ecto_3_0_0_rc_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_0_rc_5,
          phoenix_html_2_9_3,
          poison_1_0_2
        }:
          buildMix ({
            name = "phoenix_ecto";
            version = "3.0.0-rc.0";
            src = fetchHex {
              pkg = "phoenix_ecto";
              version = "3.0.0-rc.0";
              sha256 =
                "bdd7106b15b67286d3da1bef86a3d44c11a72f8ee6e0aeec133196a173c826d2";
            };
            beamDeps  = [ ecto_2_1_0_rc_5 phoenix_html_2_9_3 poison_1_0_2 ];

            meta = {
              description = ''Integration between Phoenix & Ecto'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/phoenixframework/phoenix_ecto";
            };
          } // packageOverrides)
      ) {};

    phoenix_ecto_3_1_0_rc_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_4,
          phoenix_html_2_9_3,
          plug_1_3_5
        }:
          buildMix ({
            name = "phoenix_ecto";
            version = "3.1.0-rc.0";
            src = fetchHex {
              pkg = "phoenix_ecto";
              version = "3.1.0-rc.0";
              sha256 =
                "088257f7afc8f5e6b7d059bc6eda29f56865e62c4e1f6f790a2168dd0109a5f9";
            };
            beamDeps  = [ ecto_2_1_4 phoenix_html_2_9_3 plug_1_3_5 ];

            meta = {
              description = ''Integration between Phoenix & Ecto'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/phoenixframework/phoenix_ecto";
            };
          } // packageOverrides)
      ) {};

    phoenix_ecto_3_2_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_4,
          phoenix_html_2_9_3,
          plug_1_3_5
        }:
          buildMix ({
            name = "phoenix_ecto";
            version = "3.2.3";
            src = fetchHex {
              pkg = "phoenix_ecto";
              version = "3.2.3";
              sha256 =
                "b91cd102fe384c62587916c6c76ae566b7f547148ac01a2f586ea74230855356";
            };
            beamDeps  = [ ecto_2_1_4 phoenix_html_2_9_3 plug_1_3_5 ];

            meta = {
              description = ''Integration between Phoenix & Ecto'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/phoenixframework/phoenix_ecto";
            };
          } // packageOverrides)
      ) {};

    phoenix_ecto = phoenix_ecto_3_2_3;

    phoenix_ember_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_4_10,
          httpoison_0_8_3,
          poison_1_5_2
        }:
          buildMix ({
            name = "phoenix_ember";
            version = "0.0.1";
            src = fetchHex {
              pkg = "phoenix_ember";
              version = "0.0.1";
              sha256 =
                "2d108380a8eb25b88b80b950b7022bc061b77b8bfd2e37769e01499d6a6d2884";
            };
            beamDeps  = [ hackney_1_4_10 httpoison_0_8_3 poison_1_5_2 ];

            meta = {
              description = ''Ember.js integration via
                            ember-phoenix/phoenix-ember'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/levanto-financial/phoenix-ember";
            };
          } // packageOverrides)
      ) {};

    phoenix_ember = phoenix_ember_0_0_1;

    phoenix_etag_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          phoenix_1_3_0_rc_2,
          plug_1_3_5
        }:
          buildMix ({
            name = "phoenix_etag";
            version = "0.1.0";
            src = fetchHex {
              pkg = "phoenix_etag";
              version = "0.1.0";
              sha256 =
                "26c2fbdc39d07efe9a30fdd7f9765328c5b2c3a99d99eedb9e83e09457841a71";
            };
            beamDeps  = [ phoenix_1_3_0_rc_2 plug_1_3_5 ];

            meta = {
              description = ''Conditional request (ETag & modified-since)
                            support for Phoenix.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/michalmuskala/phoenix_etag";
            };
          } // packageOverrides)
      ) {};

    phoenix_etag = phoenix_etag_0_1_0;

    phoenix_exceptional_1_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exceptional_2_1_0,
          phoenix_html_2_9_3
        }:
          buildMix ({
            name = "phoenix_exceptional";
            version = "1.0.1";
            src = fetchHex {
              pkg = "phoenix_exceptional";
              version = "1.0.1";
              sha256 =
                "e094ade6897773145eb73d244da1d0983b641c348025f8ec7ecadc6bc0d80475";
            };
            beamDeps  = [ exceptional_2_1_0 phoenix_html_2_9_3 ];

            meta = {
              description = ''Exceptional error/exception helpers for
                            Phoenix'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/expede/phoenix_exceptional";
            };
          } // packageOverrides)
      ) {};

    phoenix_exceptional = phoenix_exceptional_1_0_1;

    phoenix_expug_0_0_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          expug_0_8_0,
          phoenix_1_3_0_rc_2,
          phoenix_html_2_9_3
        }:
          buildMix ({
            name = "phoenix_expug";
            version = "0.0.3";
            src = fetchHex {
              pkg = "phoenix_expug";
              version = "0.0.3";
              sha256 =
                "764fb5a6dcd3001a676a31b44f09855b515ed2c534e909fb894b00b83bbe2b93";
            };
            beamDeps  = [ expug_0_8_0 phoenix_1_3_0_rc_2 phoenix_html_2_9_3
                      ];

            meta = {
              description = ''Phoenix template engine for Expug'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rstacruz/phoenix_expug";
            };
          } // packageOverrides)
      ) {};

    phoenix_expug = phoenix_expug_0_0_3;

    phoenix_facebook_messenger_0_4_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          facebook_messenger_0_4_0,
          phoenix_1_3_0_rc_2,
          poison_2_1_0
        }:
          buildMix ({
            name = "phoenix_facebook_messenger";
            version = "0.4.0";
            src = fetchHex {
              pkg = "phoenix_facebook_messenger";
              version = "0.4.0";
              sha256 =
                "9580713a22fb7ad078e95c5df2e13557777ae722c364404f30601121c9d622f3";
            };
            beamDeps  = [
                          facebook_messenger_0_4_0
                          phoenix_1_3_0_rc_2
                          poison_2_1_0
                        ];

            meta = {
              longDescription = ''PhoenixFacebookMessenger is a library that
                                easy the creation of facebook messenger bots.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/oarrabi/exrequester";
            };
          } // packageOverrides)
      ) {};

    phoenix_facebook_messenger = phoenix_facebook_messenger_0_4_0;

    phoenix_form_awesomplete_0_1_4 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, phoenix_html_2_9_3
        }:
          buildMix ({
            name = "phoenix_form_awesomplete";
            version = "0.1.4";
            src = fetchHex {
              pkg = "phoenix_form_awesomplete";
              version = "0.1.4";
              sha256 =
                "04beb0d474328f5b759908223f188e3caf373461f22056b28c21e79b40a9ebd5";
            };
            beamDeps  = [ phoenix_html_2_9_3 ];

            meta = {
              longDescription = ''Phoenix form helper that utilizes Lea Verou`s
                                autocomplete autosuggest typeahead Awesomplete
                                widget, featuring dynamic data loading using
                                ajax calls.'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/nico-amsterdam/phoenix_form_awesomplete";
            };
          } // packageOverrides)
      ) {};

    phoenix_form_awesomplete = phoenix_form_awesomplete_0_1_4;

    phoenix_gen_gulp_jspm_1_0_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, phoenix_1_3_0_rc_2
        }:
          buildMix ({
            name = "phoenix_gen_gulp_jspm";
            version = "1.0.0";
            src = fetchHex {
              pkg = "phoenix_gen_gulp_jspm";
              version = "1.0.0";
              sha256 =
                "7124ff1f232d82da40619579d2b3a5d15834f9cf3880ba3e8176cb7321b9eb59";
            };
            beamDeps  = [ phoenix_1_3_0_rc_2 ];

            meta = {
              description = ''Replaces Brunch with Gulp and adds JSPM'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bryanjos/phoenix_gen_gulp_jspm";
            };
          } // packageOverrides)
      ) {};

    phoenix_gen_gulp_jspm = phoenix_gen_gulp_jspm_1_0_0;

    phoenix_gen_socket_client_1_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "phoenix_gen_socket_client";
            version = "1.1.0";
            src = fetchHex {
              pkg = "phoenix_gen_socket_client";
              version = "1.1.0";
              sha256 =
                "9168db103569a17249aaae377e4905332324e7eb64f5d878de32bbf9a6afcd32";
            };

            meta = {
              description = ''Socket client behaviour for phoenix channels.'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/Aircloak/phoenix_gen_socket_client";
            };
          } // packageOverrides)
      ) {};

    phoenix_gen_socket_client = phoenix_gen_socket_client_1_1_0;

    phoenix_generator_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, inflex_0_3_0 }:
          buildMix ({
            name = "phoenix_generator";
            version = "0.2.1";
            src = fetchHex {
              pkg = "phoenix_generator";
              version = "0.2.1";
              sha256 =
                "2be3753fba7b4a9afa461d270ab5111d76d1e5997b8e1587344051d85b6a1a36";
            };
            beamDeps  = [ inflex_0_3_0 ];

            meta = {
              description = ''A collection of boilerplate generators for the
                            Phoenix web framework.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/etufe/phoenix_generator";
            };
          } // packageOverrides)
      ) {};

    phoenix_generator = phoenix_generator_0_2_1;

    phoenix_gon_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          phoenix_html_2_9_3,
          plug_1_3_5,
          poison_2_2_0
        }:
          buildMix ({
            name = "phoenix_gon";
            version = "0.2.0";
            src = fetchHex {
              pkg = "phoenix_gon";
              version = "0.2.0";
              sha256 =
                "fdea03c8ee1e2d7b1dc2ea626b10a6769ccac5bd1a005a18af72d11585b17d61";
            };
            beamDeps  = [ phoenix_html_2_9_3 plug_1_3_5 poison_2_2_0 ];

            meta = {
              description = ''PhoenixGon hex - your Phoenix variables in your
                            JavaScript.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/khusnetdinov/phoenix_gon";
            };
          } // packageOverrides)
      ) {};

    phoenix_gon = phoenix_gon_0_2_0;

    phoenix_haml_0_2_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          calliope_0_4_2,
          phoenix_1_3_0_rc_2,
          phoenix_html_2_9_3
        }:
          buildMix ({
            name = "phoenix_haml";
            version = "0.2.3";
            src = fetchHex {
              pkg = "phoenix_haml";
              version = "0.2.3";
              sha256 =
                "bc52d3a5800034aad469c18af317cc983b362760348ce2f50c395efc733a00ec";
            };
            beamDeps  = [
                          calliope_0_4_2 phoenix_1_3_0_rc_2 phoenix_html_2_9_3
                        ];

            meta = {
              description = ''Phoenix Template Engine for Haml'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/chrismccord/phoenix_haml";
            };
          } // packageOverrides)
      ) {};

    phoenix_haml = phoenix_haml_0_2_3;

    phoenix_html_2_9_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, plug_1_3_5 }:
          buildMix ({
            name = "phoenix_html";
            version = "2.9.3";
            src = fetchHex {
              pkg = "phoenix_html";
              version = "2.9.3";
              sha256 =
                "f090e3a75de4efd72ae2b9b016909fe673512ef04e6b72d7bf039031a64d4a52";
            };
            beamDeps  = [ plug_1_3_5 ];

            meta = {
              description = ''Phoenix.HTML functions for working with HTML
                            strings and templates'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/phoenixframework/phoenix_html";
            };
          } // packageOverrides)
      ) {};

    phoenix_html = phoenix_html_2_9_3;

    phoenix_html_sanitizer_1_1_0_rc1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          html_sanitize_ex_1_3_0_rc3,
          phoenix_html_2_9_3
        }:
          buildMix ({
            name = "phoenix_html_sanitizer";
            version = "1.1.0-rc1";
            src = fetchHex {
              pkg = "phoenix_html_sanitizer";
              version = "1.1.0-rc1";
              sha256 =
                "bf162693b595e89ab9c6b10174a224d4010809d4ee83f53a2f4d2f4c4165a680";
            };
            beamDeps  = [ html_sanitize_ex_1_3_0_rc3 phoenix_html_2_9_3 ];

            meta = {
              description = ''HTML sanitizer for Phoenix'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/elixirstatus/phoenix_html_sanitizer";
            };
          } // packageOverrides)
      ) {};

    phoenix_html_sanitizer = phoenix_html_sanitizer_1_1_0_rc1;

    phoenix_html_simplified_helpers_1_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_4,
          gettext_0_13_1,
          timex_3_1_15,
          timex_ecto_3_1_1
        }:
          buildMix ({
            name = "phoenix_html_simplified_helpers";
            version = "1.1.1";
            src = fetchHex {
              pkg = "phoenix_html_simplified_helpers";
              version = "1.1.1";
              sha256 =
                "bdc05cd661689b4415e7b8d92b8cf7565b8efe902a8c473cce445f2d156c52c8";
            };
            beamDeps  = [
                          ecto_2_1_4
                          gettext_0_13_1
                          timex_3_1_15
                          timex_ecto_3_1_1
                        ];

            meta = {
              longDescription = ''Some view helpers for phoenix html( truncate,
                                time_ago_in_words, number_with_delimiter,
                                url_for, current_page? )'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/ikeikeikeike/phoenix_html_simplified_helpers";
            };
          } // packageOverrides)
      ) {};

    phoenix_html_simplified_helpers =
      phoenix_html_simplified_helpers_1_1_1;

    phoenix_html_simplified_helpers_super_cn_1_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_4,
          gettext_0_13_1,
          timex_3_1_15,
          timex_ecto_3_1_1
        }:
          buildMix ({
            name = "phoenix_html_simplified_helpers_super_cn";
            version = "1.0.1";
            src = fetchHex {
              pkg = "phoenix_html_simplified_helpers_super_cn";
              version = "1.0.1";
              sha256 =
                "c96df32d36c17e3971f4af13e86f3c1ae3c8828dcbb2d145286e2c23c8ede1c0";
            };
            beamDeps  = [
                          ecto_2_1_4
                          gettext_0_13_1
                          timex_3_1_15
                          timex_ecto_3_1_1
                        ];

            meta = {
              longDescription = ''Some view helpers for phoenix html( truncate,
                                time_ago_in_words, number_with_delimiter,
                                url_for, current_page? )'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/ikeikeikeike/phoenix_html_simplified_helpers";
            };
          } // packageOverrides)
      ) {};

    phoenix_html_simplified_helpers_super_cn =
      phoenix_html_simplified_helpers_super_cn_1_0_1;

    phoenix_inline_svg_1_0_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, phoenix_1_3_0_rc_2
        }:
          buildMix ({
            name = "phoenix_inline_svg";
            version = "1.0.0";
            src = fetchHex {
              pkg = "phoenix_inline_svg";
              version = "1.0.0";
              sha256 =
                "525c5885685e6b84b126e654c18661618dd8eff9cb2a78782daf31bb0f9cd567";
            };
            beamDeps  = [ phoenix_1_3_0_rc_2 ];

            meta = {
              longDescription = ''An inline SVG file renderer for Phoenix
                                Framework. This package is designed to make
                                loading SVG based icons into HTML structure much
                                easeier in Phoenix Frameowrk.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nikkomiu/phoenix_inline_svg";
            };
          } // packageOverrides)
      ) {};

    phoenix_inline_svg = phoenix_inline_svg_1_0_0;

    phoenix_integration_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          floki_0_17_2,
          phoenix_1_3_0_rc_2,
          phoenix_html_2_9_3
        }:
          buildMix ({
            name = "phoenix_integration";
            version = "0.2.0";
            src = fetchHex {
              pkg = "phoenix_integration";
              version = "0.2.0";
              sha256 =
                "9061ffd21a33f0e6d87d84a058db32602e6be48b86f821e41f3c1f24942d7f7a";
            };
            beamDeps  = [ floki_0_17_2 phoenix_1_3_0_rc_2 phoenix_html_2_9_3
                      ];

            meta = {
              longDescription = ''Lightweight server-side integration test
                                functions for Phoenix. Optimized for Elixir
                                Pipes and the existing Phoenix.ConnTest
                                framework to emphasize both speed and
                                readability.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/boydm/phoenix_integration";
            };
          } // packageOverrides)
      ) {};

    phoenix_integration = phoenix_integration_0_2_0;

    phoenix_jank_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          phoenix_1_3_0_rc_2,
          plug_1_3_5
        }:
          buildMix ({
            name = "phoenix_jank";
            version = "0.2.0";
            src = fetchHex {
              pkg = "phoenix_jank";
              version = "0.2.0";
              sha256 =
                "80d883ae359b2824cd1f4c1dd0abf5c2db280851580607f11360f33f3e6e835e";
            };
            beamDeps  = [ phoenix_1_3_0_rc_2 plug_1_3_5 ];

            meta = {
              description = ''Phoenix integration with Jank front-end'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/iamvery/phoenix_jank";
            };
          } // packageOverrides)
      ) {};

    phoenix_jank = phoenix_jank_0_2_0;

    phoenix_jiffy_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, jiffy_0_14_11 }:
          buildMix ({
            name = "phoenix_jiffy";
            version = "0.2.0";
            src = fetchHex {
              pkg = "phoenix_jiffy";
              version = "0.2.0";
              sha256 =
                "9bd4e623532bfa6e055e091d54f63eef83af92eeb37773fc55db9aa369800366";
            };
            beamDeps  = [ jiffy_0_14_11 ];

            meta = {
              description = ''Jiffy adapter for Phoenix projects'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/take-five/phoenix_jiffy";
            };
          } // packageOverrides)
      ) {};

    phoenix_jiffy = phoenix_jiffy_0_2_0;

    phoenix_jsroutes_0_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "phoenix_jsroutes";
            version = "0.0.4";
            src = fetchHex {
              pkg = "phoenix_jsroutes";
              version = "0.0.4";
              sha256 =
                "a3b076936c4807a9297e1e9028dd5f1d184a6c25c9caf04d7d664f9df3e644ae";
            };

            meta = {
              description = ''Brings phoenix router helpers to your javascript
                            code.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tiagoengel/phoenix-jsroutes";
            };
          } // packageOverrides)
      ) {};

    phoenix_jsroutes = phoenix_jsroutes_0_0_4;

    phoenix_linguist_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          linguist_0_1_5,
          phoenix_1_3_0_rc_2
        }:
          buildMix ({
            name = "phoenix_linguist";
            version = "0.0.1";
            src = fetchHex {
              pkg = "phoenix_linguist";
              version = "0.0.1";
              sha256 =
                "4a27898ab733b3b55c9fe38bd7ae299a92cfb290dc7d9bc940e1af653de1b1eb";
            };
            beamDeps  = [ cowboy_1_1_2 linguist_0_1_5 phoenix_1_3_0_rc_2 ];

            meta = {
              longDescription = ''A project that integrates Phoenix with
                                Linguist, providing a plug and view helpers'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jxs/phoenix_linguist";
            };
          } // packageOverrides)
      ) {};

    phoenix_linguist = phoenix_linguist_0_0_1;

    phoenix_live_reload_1_0_8 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          fs_3_4_0,
          phoenix_1_1_9
        }:
          buildMix ({
            name = "phoenix_live_reload";
            version = "1.0.8";
            src = fetchHex {
              pkg = "phoenix_live_reload";
              version = "1.0.8";
              sha256 =
                "af4d9faeb655ef933cf66fd4d83f8bb0146ab0da30c81cfbdc2152825970fa76";
            };
            beamDeps  = [ fs_3_4_0 phoenix_1_1_9 ];

            meta = {
              description = ''Provides live-reload functionality for Phoenix'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/phoenixframework/phoenix_live_reload";
            };
          } // packageOverrides)
      ) {};

    phoenix_live_reload = phoenix_live_reload_1_0_8;

    phoenix_locale_0_0_3_rc_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          phoenix_1_1_9,
          phoenix_html_2_9_3
        }:
          buildMix ({
            name = "phoenix_locale";
            version = "0.0.3-rc.0";
            src = fetchHex {
              pkg = "phoenix_locale";
              version = "0.0.3-rc.0";
              sha256 =
                "cb5821493dc3c779101fc842c275d7cc88ee5197d2bd83b9c0ad6353a53f5e03";
            };
            beamDeps  = [ cowboy_1_1_2 phoenix_1_1_9 phoenix_html_2_9_3 ];

            meta = {
              longDescription = ''Locale functions to be integrated into
                                Phoenix projects, providing a plug and view
                                helpers. Started from
                                https://github.com/jxs/phoenix_linguist'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cabify/phoenix_locale";
            };
          } // packageOverrides)
      ) {};

    phoenix_locale = phoenix_locale_0_0_3_rc_0;

    phoenix_markdown_0_1_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          earmark_1_2_2,
          phoenix_1_3_0_rc_2,
          phoenix_html_2_9_3
        }:
          buildMix ({
            name = "phoenix_markdown";
            version = "0.1.4";
            src = fetchHex {
              pkg = "phoenix_markdown";
              version = "0.1.4";
              sha256 =
                "f977a1286c8df96174cb0ab1b928352098b8cfe6d07d4ac42efd21f931e9877c";
            };
            beamDeps  = [ earmark_1_2_2 phoenix_1_3_0_rc_2 phoenix_html_2_9_3
                      ];

            meta = {
              description = ''Phoenix Template Engine for Markdown. Uses
                            Earmark to render.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/boydm/phoenix_markdown";
            };
          } // packageOverrides)
      ) {};

    phoenix_markdown = phoenix_markdown_0_1_4;

    phoenix_microsoftbot_1_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ex_microsoftbot_1_0_0,
          phoenix_1_3_0_rc_2
        }:
          buildMix ({
            name = "phoenix_microsoftbot";
            version = "1.0.0";
            src = fetchHex {
              pkg = "phoenix_microsoftbot";
              version = "1.0.0";
              sha256 =
                "d8f450707ab53ef43c883419c5fa06ad16d7171100111bae25f8c1fdb2f162ea";
            };
            beamDeps  = [ ex_microsoftbot_1_0_0 phoenix_1_3_0_rc_2 ];

            meta = {
              longDescription = ''This library allows for easy creation of the
                                web API that the Microsoft bot framework can
                                connect to.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zabirauf/phoenix_microsoftbot";
            };
          } // packageOverrides)
      ) {};

    phoenix_microsoftbot = phoenix_microsoftbot_1_0_0;

    phoenix_mjml_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          phoenix_1_1_9,
          phoenix_html_2_9_3,
          uuid_1_1_7
        }:
          buildMix ({
            name = "phoenix_mjml";
            version = "0.1.0";
            src = fetchHex {
              pkg = "phoenix_mjml";
              version = "0.1.0";
              sha256 =
                "4f04011c9f23528fe73ecc674449604fe502a6c8371b40a5859412512bd12c84";
            };
            beamDeps  = [ phoenix_1_1_9 phoenix_html_2_9_3 uuid_1_1_7 ];

            meta = {
              description = ''Phoenix Template Engine for Mjml'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/MQuy/phoenix_mjml";
            };
          } // packageOverrides)
      ) {};

    phoenix_mjml = phoenix_mjml_0_1_0;

    phoenix_mtm_0_5_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_0_rc_5,
          phoenix_html_2_9_3,
          postgrex_1_0_0_rc_1
        }:
          buildMix ({
            name = "phoenix_mtm";
            version = "0.5.0";
            src = fetchHex {
              pkg = "phoenix_mtm";
              version = "0.5.0";
              sha256 =
                "c13895dc5760a2aa86d4e583f3ea93868b46e2d4b582340611e4cbcdb10a4422";
            };
            beamDeps  = [
                          ecto_2_1_0_rc_5 phoenix_html_2_9_3 postgrex_1_0_0_rc_1
                        ];

            meta = {
              longDescription = ''A small collection of functions to make it
                                easier working with Ecto many_to_many
                                assocations and checkbox arrays.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/adam12/phoenix_mtm";
            };
          } // packageOverrides)
      ) {};

    phoenix_mtm = phoenix_mtm_0_5_0;

    phoenix_oauth2_provider_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ex_oauth2_provider_0_2_0,
          gettext_0_13_1,
          phoenix_1_1_9
        }:
          buildMix ({
            name = "phoenix_oauth2_provider";
            version = "0.2.0";
            src = fetchHex {
              pkg = "phoenix_oauth2_provider";
              version = "0.2.0";
              sha256 =
                "0b9db57ffa2d1b832aa01c4304e599ddc54b9a53db0384102ad7ded8273492c4";
            };
            beamDeps  = [
                          ex_oauth2_provider_0_2_0 gettext_0_13_1 phoenix_1_1_9
                        ];

            meta = {
              description = ''The fastest way to set up OAuth 2.0 server in
                            your Phoenix app'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/danschultzer/phoenix_oauth2_provider";
            };
          } // packageOverrides)
      ) {};

    phoenix_oauth2_provider = phoenix_oauth2_provider_0_2_0;

    phoenix_octicons_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          octicons_0_3_0,
          phoenix_html_2_9_3
        }:
          buildMix ({
            name = "phoenix_octicons";
            version = "0.1.0";
            src = fetchHex {
              pkg = "phoenix_octicons";
              version = "0.1.0";
              sha256 =
                "5bd8b24370a79c6dcd3add0e7f0888d3b49dcc8e791ca0591fb74659e1877ff3";
            };
            beamDeps  = [ octicons_0_3_0 phoenix_html_2_9_3 ];

            meta = {
              description = ''Makes GitHub`s Octicons available to a Phoenix
                            framework application'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lee-dohm/phoenix-octicons";
            };
          } // packageOverrides)
      ) {};

    phoenix_octicons = phoenix_octicons_0_1_0;

    phoenix_pubsub_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "phoenix_pubsub";
            version = "1.0.1";
            src = fetchHex {
              pkg = "phoenix_pubsub";
              version = "1.0.1";
              sha256 =
                "4acd2f6100e6f23f1662afadc6da7342a6718876c41886bbb79acb97a50cd398";
            };

            meta = {
              description = ''Distributed PubSub and Presence platform'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/phoenixframework/phoenix_pubsub";
            };
          } // packageOverrides)
      ) {};

    phoenix_pubsub = phoenix_pubsub_1_0_1;

    phoenix_pubsub_postgres_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          poolboy_1_4_2,
          postgrex_1_0_0_rc_1
        }:
          buildMix ({
            name = "phoenix_pubsub_postgres";
            version = "0.0.2";
            src = fetchHex {
              pkg = "phoenix_pubsub_postgres";
              version = "0.0.2";
              sha256 =
                "85b43b941b8c3dcf3f967dcd5bca1e29716235398b8b6c03d52d6611d5cf82ad";
            };
            beamDeps  = [ poolboy_1_4_2 postgrex_1_0_0_rc_1 ];

            meta = {
              description = ''Postgresql PubSub adapter for Phoenix apps'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/opendrops/phoenix-pubsub-postgres";
            };
          } // packageOverrides)
      ) {};

    phoenix_pubsub_postgres = phoenix_pubsub_postgres_0_0_2;

    phoenix_pubsub_rabbitmq_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          amqp_0_2_0_pre_2,
          poolboy_1_4_2
        }:
          buildMix ({
            name = "phoenix_pubsub_rabbitmq";
            version = "0.0.1";
            src = fetchHex {
              pkg = "phoenix_pubsub_rabbitmq";
              version = "0.0.1";
              sha256 =
                "e2158052cb3adfedca953fe8318dd5633d276728cc4fae6daa54d0dd7b7401c6";
            };
            beamDeps  = [ amqp_0_2_0_pre_2 poolboy_1_4_2 ];

            meta = {
              description = ''RabbitMQ adapter for the Phoenix framework PubSub
                            layer. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pma/phoenix_pubsub_rabbitmq";
            };
          } // packageOverrides)
      ) {};

    phoenix_pubsub_rabbitmq = phoenix_pubsub_rabbitmq_0_0_1;

    phoenix_pubsub_redis_2_1_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          phoenix_pubsub_1_0_1,
          poolboy_1_2_1,
          redix_0_4_0,
          redix_pubsub_0_1_1
        }:
          buildMix ({
            name = "phoenix_pubsub_redis";
            version = "2.1.3";
            src = fetchHex {
              pkg = "phoenix_pubsub_redis";
              version = "2.1.3";
              sha256 =
                "a6d826771b4fc03b34fdf13ffbdda411955a77204a0d13776a28fd14e75903de";
            };
            beamDeps  = [
                          phoenix_pubsub_1_0_1
                          poolboy_1_2_1
                          redix_0_4_0
                          redix_pubsub_0_1_1
                        ];

            meta = {
              description = ''The Redis PubSub adapter for the Phoenix
                            framework'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/phoenixframework/phoenix_pubsub_redis";
            };
          } // packageOverrides)
      ) {};

    phoenix_pubsub_redis = phoenix_pubsub_redis_2_1_3;

    phoenix_pubsub_vernemq_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "phoenix_pubsub_vernemq";
            version = "0.0.3";
            src = fetchHex {
              pkg = "phoenix_pubsub_vernemq";
              version = "0.0.3";
              sha256 =
                "92c228aee119d21c68b0b43250414686dee16986cb4d0039608612abd0d22824";
            };

            meta = {
              description = ''The VerneMQ MQTT pubsub adapter for the Phoenix
                            framework'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/larshesel/phoenix_pubsub_vernemq";
            };
          } // packageOverrides)
      ) {};

    phoenix_pubsub_vernemq = phoenix_pubsub_vernemq_0_0_3;

    phoenix_ratchet_0_3_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          phoenix_1_3_0_rc_2,
          phoenix_html_2_9_3,
          ratchet_0_4_0
        }:
          buildMix ({
            name = "phoenix_ratchet";
            version = "0.3.1";
            src = fetchHex {
              pkg = "phoenix_ratchet";
              version = "0.3.1";
              sha256 =
                "52d41e28fcf13b0a633f13f7b756ab812bc2c0c9beceea20d6b461f91f9bca77";
            };
            beamDeps  = [ phoenix_1_3_0_rc_2 phoenix_html_2_9_3 ratchet_0_4_0
                      ];

            meta = {
              description = ''Phoenix template engine for Ratchet'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/iamvery/phoenix_ratchet";
            };
          } // packageOverrides)
      ) {};

    phoenix_ratchet_0_5_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          phoenix_1_3_0_rc_2,
          phoenix_html_2_9_3,
          ratchet_0_4_0
        }:
          buildMix ({
            name = "phoenix_ratchet";
            version = "0.5.0";
            src = fetchHex {
              pkg = "phoenix_ratchet";
              version = "0.5.0";
              sha256 =
                "5f7ab9238b0e86611b7ce2fc91b53cca73838d64d6ea12711d84a08e31c43c87";
            };
            beamDeps  = [ phoenix_1_3_0_rc_2 phoenix_html_2_9_3 ratchet_0_4_0
                      ];

            meta = {
              description = ''Phoenix template engine for Ratchet'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/iamvery/phoenix_ratchet";
            };
          } // packageOverrides)
      ) {};

    phoenix_ratchet = phoenix_ratchet_0_5_0;

    phoenix_react_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_0_rc_5,
          phoenix_1_3_0_rc_2,
          poison_2_2_0,
          poolboy_1_5_1,
          porcelain_2_0_3,
          uuid_1_1_7
        }:
          buildMix ({
            name = "phoenix_react";
            version = "0.1.0";
            src = fetchHex {
              pkg = "phoenix_react";
              version = "0.1.0";
              sha256 =
                "f9f4e0c37ccefe1fffae5aaee731ad05dfa6261dcdf37eab426fd0d3daabeca3";
            };
            beamDeps  = [
                          ecto_2_1_0_rc_5
                          phoenix_1_3_0_rc_2
                          poison_2_2_0
                          poolboy_1_5_1
                          porcelain_2_0_3
                          uuid_1_1_7
                        ];

            meta = {
              description = ''Use React as Template Engine in Phoenix
                            applications.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/quangbuule/phoenix_react";
            };
          } // packageOverrides)
      ) {};

    phoenix_react = phoenix_react_0_1_0;

    phoenix_reactor_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          phoenix_html_2_9_3,
          poison_3_1_0
        }:
          buildMix ({
            name = "phoenix_reactor";
            version = "0.1.0";
            src = fetchHex {
              pkg = "phoenix_reactor";
              version = "0.1.0";
              sha256 =
                "957175e55ee66adad437dc8ce4e63b8b4289781175467cebbd44705aabe55780";
            };
            beamDeps  = [ phoenix_html_2_9_3 poison_3_1_0 ];

            meta = {
              description = ''Library which provides an easy way to use React
                            and Phoenix framework.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jacek-adamek/phoenix_reactor";
            };
          } // packageOverrides)
      ) {};

    phoenix_reactor = phoenix_reactor_0_1_0;

    phoenix_rest_0_5_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          phoenix_1_1_9,
          plug_rest_0_12_0
        }:
          buildMix ({
            name = "phoenix_rest";
            version = "0.5.0";
            src = fetchHex {
              pkg = "phoenix_rest";
              version = "0.5.0";
              sha256 =
                "bd9ae8339cfe8913247c4524bcfecbe3a731c1c6f80886d286b3e3242114e115";
            };
            beamDeps  = [ phoenix_1_1_9 plug_rest_0_12_0 ];

            meta = {
              description = ''Resource routing and REST behaviour for Phoenix
                            applications'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/christopheradams/phoenix_rest";
            };
          } // packageOverrides)
      ) {};

    phoenix_rest = phoenix_rest_0_5_0;

    phoenix_route_documenter_0_1_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, phoenix_1_3_0_rc_2
        }:
          buildMix ({
            name = "phoenix_route_documenter";
            version = "0.1.0";
            src = fetchHex {
              pkg = "phoenix_route_documenter";
              version = "0.1.0";
              sha256 =
                "640c5e5501fc850ca2fbbb76c74acc2bf9998e18ee8300f9a3be7a50b74e0a26";
            };
            beamDeps  = [ phoenix_1_3_0_rc_2 ];

            meta = {
              longDescription = ''A package for reading a Phoenix Route Module
                                and generating a map from the output that can be
                                serialized to JSON.'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/samcdavid/phoenix_route_documenter";
            };
          } // packageOverrides)
      ) {};

    phoenix_route_documenter = phoenix_route_documenter_0_1_0;

    phoenix_session_redis_0_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          eredis_1_0_8,
          plug_1_3_5,
          poolboy_1_5_1
        }:
          buildMix ({
            name = "phoenix_session_redis";
            version = "0.1.2";
            src = fetchHex {
              pkg = "phoenix_session_redis";
              version = "0.1.2";
              sha256 =
                "b5468ab5873c48a07a84cca6b0d2fc488bd01d54c8ab760db7e7980f8bff2211";
            };
            beamDeps  = [ eredis_1_0_8 plug_1_3_5 poolboy_1_5_1 ];

            meta = {
              description = ''This library provid redis pool and
                            Plug.Session.REDIS'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/igrs/phoenix_session_redis";
            };
          } // packageOverrides)
      ) {};

    phoenix_session_redis = phoenix_session_redis_0_1_2;

    phoenix_simple_form_0_0_2 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, phoenix_html_2_9_3
        }:
          buildMix ({
            name = "phoenix_simple_form";
            version = "0.0.2";
            src = fetchHex {
              pkg = "phoenix_simple_form";
              version = "0.0.2";
              sha256 =
                "e059ada8c507168d2267d6a1db1790192c063ca5e2a3579dfd2d1b07e25e9f45";
            };
            beamDeps  = [ phoenix_html_2_9_3 ];

            meta = {
              description = ''Easy form handling for phoenix'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sbrink/phoenix_simple_form";
            };
          } // packageOverrides)
      ) {};

    phoenix_simple_form = phoenix_simple_form_0_0_2;

    phoenix_slim_0_4_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          phoenix_1_3_0_rc_2,
          phoenix_html_2_9_3,
          slim_fast_0_10_0
        }:
          buildMix ({
            name = "phoenix_slim";
            version = "0.4.1";
            src = fetchHex {
              pkg = "phoenix_slim";
              version = "0.4.1";
              sha256 =
                "4225e74608e29c93c603c6cde61766b604495e04ef65d6ca325ff1a9a492c563";
            };
            beamDeps  = [
                          phoenix_1_3_0_rc_2 phoenix_html_2_9_3 slim_fast_0_10_0
                        ];

            meta = {
              description = ''Phoenix Template Engine for Slim'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/doomspork/phoenix_slim";
            };
          } // packageOverrides)
      ) {};

    phoenix_slim = phoenix_slim_0_4_1;

    phoenix_slime_0_9_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          phoenix_1_1_9,
          phoenix_html_2_9_3,
          slime_0_16_0
        }:
          buildMix ({
            name = "phoenix_slime";
            version = "0.9.0";
            src = fetchHex {
              pkg = "phoenix_slime";
              version = "0.9.0";
              sha256 =
                "1028ba679568b6a3d4597865ca4456d0469802927efc73220a5396a42f218b1b";
            };
            beamDeps  = [
                          cowboy_1_1_2
                          phoenix_1_1_9
                          phoenix_html_2_9_3
                          slime_0_16_0
                        ];

            meta = {
              description = ''Phoenix Template Engine for Slim-like
                            templates'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/slime-lang/phoenix_slime";
            };
          } // packageOverrides)
      ) {};

    phoenix_slime = phoenix_slime_0_9_0;

    phoenix_swagger_0_6_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ex_json_schema_0_5_5,
          plug_1_3_5,
          poison_1_0_2
        }:
          buildMix ({
            name = "phoenix_swagger";
            version = "0.6.2";
            src = fetchHex {
              pkg = "phoenix_swagger";
              version = "0.6.2";
              sha256 =
                "fd6d3c001bc4ee7310c27d367a204066cb136e10be149f508bd4943c6b154bd7";
            };
            beamDeps  = [ ex_json_schema_0_5_5 plug_1_3_5 poison_1_0_2 ];

            meta = {
              longDescription = ''PhoenixSwagger is the library that provides
                                swagger integration to the phoenix web
                                framework.'';
              license = stdenv.lib.licenses.mpl20;
              homepage = "https://github.com/xerions/phoenix_swagger";
            };
          } // packageOverrides)
      ) {};

    phoenix_swagger = phoenix_swagger_0_6_2;

    phoenix_swoosh_0_1_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          phoenix_1_3_0_rc_2,
          phoenix_html_2_9_3,
          swoosh_0_8_1
        }:
          buildMix ({
            name = "phoenix_swoosh";
            version = "0.1.3";
            src = fetchHex {
              pkg = "phoenix_swoosh";
              version = "0.1.3";
              sha256 =
                "926439bb0242175cd5a52b2ffe73815886a23e9bdd4e4c980d2c87153c496f76";
            };
            beamDeps  = [ phoenix_1_3_0_rc_2 phoenix_html_2_9_3 swoosh_0_8_1
                      ];

            meta = {
              description = ''Use Swoosh to easily send emails in your Phoenix
                            project.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/swoosh/phoenix_swoosh";
            };
          } // packageOverrides)
      ) {};

    phoenix_swoosh_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          phoenix_1_3_0_rc_2,
          phoenix_html_2_9_3,
          swoosh_0_8_1
        }:
          buildMix ({
            name = "phoenix_swoosh";
            version = "0.2.0";
            src = fetchHex {
              pkg = "phoenix_swoosh";
              version = "0.2.0";
              sha256 =
                "ebf1bfa7b3c1c850c04929afe02e2e0d7ab135e0706332c865de03e761676b1f";
            };
            beamDeps  = [ phoenix_1_3_0_rc_2 phoenix_html_2_9_3 swoosh_0_8_1
                      ];

            meta = {
              description = ''Use Swoosh to easily send emails in your Phoenix
                            project.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/swoosh/phoenix_swoosh";
            };
          } // packageOverrides)
      ) {};

    phoenix_swoosh = phoenix_swoosh_0_2_0;

    phoenix_timex_1_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          phoenix_html_2_9_3,
          timex_3_0_5
        }:
          buildMix ({
            name = "phoenix_timex";
            version = "1.0.1";
            src = fetchHex {
              pkg = "phoenix_timex";
              version = "1.0.1";
              sha256 =
                "b184c6b71e7f9e588b4cccfc665b2efe27857a1b4c21b4fed5c65b200d9e55a4";
            };
            beamDeps  = [ phoenix_html_2_9_3 timex_3_0_5 ];

            meta = {
              description = ''Phoenix and Timex integration'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Paradem/phoenix_timex";
            };
          } // packageOverrides)
      ) {};

    phoenix_timex = phoenix_timex_1_0_1;

    phoenix_token_auth_0_4_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          comeonin_2_0_3,
          cowboy_1_0_4,
          ecto_2_0_0_rc_6,
          joken_0_13_1,
          mailgun_0_1_2,
          phoenix_1_2_0_rc_1,
          poison_1_4_0,
          postgrex_1_0_0_rc_1,
          secure_random_0_1_1,
          timex_3_0_5
        }:
          buildMix ({
            name = "phoenix_token_auth";
            version = "0.4.0";
            src = fetchHex {
              pkg = "phoenix_token_auth";
              version = "0.4.0";
              sha256 =
                "be1f3ed9d770b4d8650a30b6c091513d44e0c0331616366457713db77de2a620";
            };
            beamDeps  = [
                          comeonin_2_0_3
                          cowboy_1_0_4
                          ecto_2_0_0_rc_6
                          joken_0_13_1
                          mailgun_0_1_2
                          phoenix_1_2_0_rc_1
                          poison_1_4_0
                          postgrex_1_0_0_rc_1
                          secure_random_0_1_1
                          timex_3_0_5
                        ];

            meta = {
              longDescription = ''Solution for token auth in Phoenix apps.
                                Provides an api for registration, account
                                confirmation and logging in.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/manukall/phoenix_token_auth";
            };
          } // packageOverrides)
      ) {};

    phoenix_token_auth = phoenix_token_auth_0_4_0;

    phoenix_token_plug_0_2_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          phoenix_1_3_0_rc_2,
          plug_1_3_5
        }:
          buildMix ({
            name = "phoenix_token_plug";
            version = "0.2.1";
            src = fetchHex {
              pkg = "phoenix_token_plug";
              version = "0.2.1";
              sha256 =
                "7ab9db02cd7d691b4566b9aae1c17333326f76d3229db49335b9b8f19af5d5a1";
            };
            beamDeps  = [ phoenix_1_3_0_rc_2 plug_1_3_5 ];

            meta = {
              description = ''Collection of plugs for Phoenix.Token-based
                            authentication.'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/bobbypriambodo/phoenix_token_plug";
            };
          } // packageOverrides)
      ) {};

    phoenix_token_plug = phoenix_token_plug_0_2_1;

    phoenix_webpack_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "phoenix_webpack";
            version = "0.1.0";
            src = fetchHex {
              pkg = "phoenix_webpack";
              version = "0.1.0";
              sha256 =
                "9a5b53836b60bfc3baf36e9aa85b48cfc227f004419b81c195e5e08936562ba7";
            };

            meta = {
              description = ''Easily generate webpack configs for phoenix'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/keathley/phoenix_webpack";
            };
          } // packageOverrides)
      ) {};

    phoenix_webpack = phoenix_webpack_0_1_0;

    phoenixchannelclient_0_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          flow_0_12_0,
          poison_2_2_0,
          socket_0_3_12
        }:
          buildMix ({
            name = "phoenixchannelclient";
            version = "0.1.2";
            src = fetchHex {
              pkg = "phoenixchannelclient";
              version = "0.1.2";
              sha256 =
                "86192cae312f119e1907a7b33b1b67101d3fc00704250e206cfd207752b84cfc";
            };
            beamDeps  = [ flow_0_12_0 poison_2_2_0 socket_0_3_12 ];

            meta = {
              description = ''Phoenix Channel Client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ryo33/phoenix-channel-client";
            };
          } // packageOverrides)
      ) {};

    phoenixchannelclient = phoenixchannelclient_0_1_2;

    phone_0_4_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "phone";
            version = "0.4.0";
            src = fetchHex {
              pkg = "phone";
              version = "0.4.0";
              sha256 =
                "eaf35e706d3819d4be56faf5f3b8f73cc3f7502493e45cc93645dc7af4131e1b";
            };

            meta = {
              description = ''Get useful info from telephone numbers.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/fcevado/phone";
            };
          } // packageOverrides)
      ) {};

    phone = phone_0_4_0;

    php_serializer_0_9_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "php_serializer";
            version = "0.9.1";
            src = fetchHex {
              pkg = "php_serializer";
              version = "0.9.1";
              sha256 =
                "a7e7b45423e68fec0ea05107f8d00af2b0f3097e0006b73f22f1405851e1e060";
            };

            meta = {
              description = ''PHP serialize/unserialize support for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zloyrusskiy/php_serializer";
            };
          } // packageOverrides)
      ) {};

    php_serializer = php_serializer_0_9_1;

    phst_transform_1_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "phst_transform";
            version = "1.0.2";
            src = fetchHex {
              pkg = "phst_transform";
              version = "1.0.2";
              sha256 =
                "98a8a153146a8ef0604ca324ce857ff7a2f3e209dd119eb66dad964f69b4597f";
            };

            meta = {
              longDescription = ''An Elixir Protocol and implementation for
                                creating a tranform of any elixir data.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/philosophers-stone/transform";
            };
          } // packageOverrides)
      ) {};

    phst_transform = phst_transform_1_0_2;

    phubme_0_5_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_0_4,
          earmark_1_2_2,
          ex_doc_0_16_1,
          httpoison_0_11_2,
          plug_1_3_5,
          poison_1_5_2,
          slack_0_9_3
        }:
          buildMix ({
            name = "phubme";
            version = "0.5.4";
            src = fetchHex {
              pkg = "phubme";
              version = "0.5.4";
              sha256 =
                "fa83bed471dd3ed270690555e7d7d2ddc091ae5bcf27a9cfc55687361deef39e";
            };
            beamDeps  = [
                          cowboy_1_0_4
                          earmark_1_2_2
                          ex_doc_0_16_1
                          httpoison_0_11_2
                          plug_1_3_5
                          poison_1_5_2
                          slack_0_9_3
                        ];

            meta = {
              description = ''Notify mentionned github user in slack'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/benoittgt/PhubMe";
            };
          } // packageOverrides)
      ) {};

    phubme = phubme_0_5_4;

    phux_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "phux";
            version = "0.1.0";
            src = fetchHex {
              pkg = "phux";
              version = "0.1.0";
              sha256 =
                "220fa43d60cc2e72d8e56d4cce9f467d6ca29e19049e8d680352c433b3ca277d";
            };

            meta = {
              description = ''Phux helpers.'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    phux = phux_0_1_0;

    phx_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "phx";
            version = "0.1.0";
            src = fetchHex {
              pkg = "phx";
              version = "0.1.0";
              sha256 =
                "a2b180bda27add365d0fa6b5c0d8f1cd1b8a071c6344026610bba8d49f254bf6";
            };

            meta = {
              description = ''Eventual home for the phoenix installer
                            archive.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/phoenixframework/phx";
            };
          } // packageOverrides)
      ) {};

    phx = phx_0_1_0;

    picosat_0_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "picosat";
            version = "0.1.0";
            src = fetchHex {
              pkg = "picosat";
              version = "0.1.0";
              sha256 =
                "d9bfa31240906306a6dae6bdd6fb1cb452e9462a391efa63017b17b2877cab51";
            };
            compilePorts = true;

            meta = {
              description = ''Erlang bindings for PicoSAT'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tsloughter/picosat";
            };
          } // packageOverrides)
      ) {};

    picosat = picosat_0_1_0;

    pigeon_0_13_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          chatterbox_0_4_2,
          httpoison_0_11_2,
          kadabra_0_2_0,
          poison_1_0_2
        }:
          buildMix ({
            name = "pigeon";
            version = "0.13.0";
            src = fetchHex {
              pkg = "pigeon";
              version = "0.13.0";
              sha256 =
                "53bf41cfc8961ed687413aaf5609d7749106389b371a8c9a4d4a8c552b475308";
            };
            beamDeps  = [
                          chatterbox_0_4_2
                          httpoison_0_11_2
                          kadabra_0_2_0
                          poison_1_0_2
                        ];

            meta = {
              longDescription = ''HTTP2-compliant wrapper for sending iOS
                                (APNS), Android (FCM), and Amazon Android (ADM)
                                push notifications.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/codedge-llc/pigeon";
            };
          } // packageOverrides)
      ) {};

    pigeon = pigeon_0_13_0;

    piliponi_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "piliponi";
            version = "0.0.1";
            src = fetchHex {
              pkg = "piliponi";
              version = "0.0.1";
              sha256 =
                "1729646601f1f12aff154e0401063298ec54bfd745f9137a64f63384f106a645";
            };

            meta = {
              description = ''Simple mobile phone formatter for the
                            Philippines'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/wetoolaguer/piliponi";
            };
          } // packageOverrides)
      ) {};

    piliponi = piliponi_0_0_1;

    pin_elixir_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_2_2_1,
          poison_1_5_2
        }:
          buildMix ({
            name = "pin_elixir";
            version = "0.0.1";
            src = fetchHex {
              pkg = "pin_elixir";
              version = "0.0.1";
              sha256 =
                "0140eecb7c714f9dadbcec26c45e2b2d770735029b7dcf98cdba9d793d80130a";
            };
            beamDeps  = [ httpotion_2_2_1 poison_1_5_2 ];

            meta = {
              description = ''A library to wrap the Pin Payments API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mfeckie/pin_elixir";
            };
          } // packageOverrides)
      ) {};

    pin_elixir = pin_elixir_0_0_1;

    pinboardixir_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "pinboardixir";
            version = "0.2.0";
            src = fetchHex {
              pkg = "pinboardixir";
              version = "0.2.0";
              sha256 =
                "360050f089cd50515bf51a5634420beab54bb7ec3b2063d49d91179182e423d7";
            };
            beamDeps  = [ httpoison_0_11_2 poison_2_2_0 ];

            meta = {
              description = ''A Pinboard client in Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ElaWorkshop/pinboardixir";
            };
          } // packageOverrides)
      ) {};

    pinboardixir = pinboardixir_0_2_0;

    ping_plug_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          plug_1_3_5
        }:
          buildMix ({
            name = "ping_plug";
            version = "0.2.0";
            src = fetchHex {
              pkg = "ping_plug";
              version = "0.2.0";
              sha256 =
                "b2f986befc384cb940c1de261f8378ca8a07c3f307bc0e57a651e5eb68a49371";
            };
            beamDeps  = [ cowboy_1_1_2 plug_1_3_5 ];

            meta = {
              longDescription = ''A simple plug to echo message back, useful
                                with healthcheck endpoint where you just need to
                                response 200 ok.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zentetsukenz/ping_plug";
            };
          } // packageOverrides)
      ) {};

    ping_plug = ping_plug_0_2_0;

    pingboard_0_0_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exconstructor_1_1_0,
          httpoison_0_11_2,
          poison_2_0_1
        }:
          buildMix ({
            name = "pingboard";
            version = "0.0.3";
            src = fetchHex {
              pkg = "pingboard";
              version = "0.0.3";
              sha256 =
                "b5c10bca1dda309567bc8e63286539f5fe56aa4a30c8f4c10bf40d7e099a8980";
            };
            beamDeps  = [ exconstructor_1_1_0 httpoison_0_11_2 poison_2_0_1
                      ];

            meta = {
              longDescription = ''A simple and naïve attempt at an elixir
                                client for the Pingboard
                                API.(http://docs.pingboard.apiary.io/#)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jgchristopher/pingboard-elixir";
            };
          } // packageOverrides)
      ) {};

    pingboard = pingboard_0_0_3;

    pinger_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_3_0_2,
          uuid_1_1_7
        }:
          buildMix ({
            name = "pinger";
            version = "0.1.1";
            src = fetchHex {
              pkg = "pinger";
              version = "0.1.1";
              sha256 =
                "12d8812330b9d211cb18b4bf9f92d647d416f8c84816e4dffc185206ab968079";
            };
            beamDeps  = [ httpotion_3_0_2 uuid_1_1_7 ];

            meta = {
              description = ''Monitoring many URLs as you can and get the
                            realtime status for each one'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/eduardonunesp/pinger";
            };
          } // packageOverrides)
      ) {};

    pinger = pinger_0_1_1;

    pinglix_1_1_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          plug_1_3_5,
          poison_3_1_0,
          timex_3_1_15
        }:
          buildMix ({
            name = "pinglix";
            version = "1.1.3";
            src = fetchHex {
              pkg = "pinglix";
              version = "1.1.3";
              sha256 =
                "b9e44f6abb770e4a483e269611c4d7c23535bd8fae0d7f35f5aaeb4c29a027d4";
            };
            beamDeps  = [ plug_1_3_5 poison_3_1_0 timex_3_1_15 ];

            meta = {
              longDescription = ''Plug compatible health check system in Elixir
                                based on
                                https://github.com/jbarnette/pinglish.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pvdvreede/pinglix";
            };
          } // packageOverrides)
      ) {};

    pinglix = pinglix_1_1_3;

    pinky_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pinky";
            version = "0.2.0";
            src = fetchHex {
              pkg = "pinky";
              version = "0.2.0";
              sha256 =
                "acb5412a2f01c230a9ac8e40105af04fcd68862fb81bbe832b57f455e1f55844";
            };

            meta = {
              description = ''A promise library for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/codegram/pinky";
            };
          } // packageOverrides)
      ) {};

    pinky = pinky_0_2_0;

    pinterex_0_2_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ex_doc_0_16_1,
          exconstructor_1_0_2,
          poison_3_1_0,
          tesla_0_5_2
        }:
          buildMix ({
            name = "pinterex";
            version = "0.2.2";
            src = fetchHex {
              pkg = "pinterex";
              version = "0.2.2";
              sha256 =
                "aa1a90d7379a5f7a9681012f2eaad73ab383165d0ac4ced667abde3144509b35";
            };
            beamDeps  = [
                          ex_doc_0_16_1
                          exconstructor_1_0_2
                          poison_3_1_0
                          tesla_0_5_2
                        ];

            meta = {
              description = ''A simple Elixir wrapper for Pinterest API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/MitjaBezensek/pinterex";
            };
          } // packageOverrides)
      ) {};

    pinterex = pinterex_0_2_2;

    pinyin_0_1_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pinyin";
            version = "0.1.4";
            src = fetchHex {
              pkg = "pinyin";
              version = "0.1.4";
              sha256 =
                "e0fc3dc148bc938ad12f5aefabf017620eb314ca4cf045b91ad195c557d5fa96";
            };

            meta = {
              description = ''chinese pinyin library'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/lidashuang/pinyin";
            };
          } // packageOverrides)
      ) {};

    pinyin = pinyin_0_1_4;

    pipe_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pipe";
            version = "0.0.2";
            src = fetchHex {
              pkg = "pipe";
              version = "0.0.2";
              sha256 =
                "ad6d90981606bb04d040c0af49cf493417994214ce6e74ac572dc2ee67e2c064";
            };

            meta = {
              description = ''An Elixir extension that extends the pipe (|>)
                            operator through macros. '';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/batate/elixir-pipes";
            };
          } // packageOverrides)
      ) {};

    pipe = pipe_0_0_2;

    pipe_here_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pipe_here";
            version = "1.0.1";
            src = fetchHex {
              pkg = "pipe_here";
              version = "1.0.1";
              sha256 =
                "773ebe6cd558bbbc222d60716b9f170c8d4cc163a4da2b43a91f8121fa0b7e3c";
            };

            meta = {
              description = ''An Elixir macro for easily piping arguments at
                            any position.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/vic/pipe_here";
            };
          } // packageOverrides)
      ) {};

    pipe_here = pipe_here_1_0_1;

    pipe_to_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pipe_to";
            version = "0.1.2";
            src = fetchHex {
              pkg = "pipe_to";
              version = "0.1.2";
              sha256 =
                "abab0e97c6845d19200dafbfc524696d2e7778e69793ee037107d87f03731feb";
            };

            meta = {
              longDescription = ''PipeTo operator `~>` is the enhanced pipe
                                operator which can specify the target
                                position.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/taiansu/pipe_to";
            };
          } // packageOverrides)
      ) {};

    pipe_to = pipe_to_0_1_2;

    pipe_while_ok_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pipe_while_ok";
            version = "0.0.2";
            src = fetchHex {
              pkg = "pipe_while_ok";
              version = "0.0.2";
              sha256 =
                "b62708d0a0b82f421f937b99c5ff21a966e21d9a1f42ba75b8788100ac2c6567";
            };

            meta = {
              description = ''PipeWhileOk =========== Moved to
                            https://githib.com/pragdave/exlibris '';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/pragdave/pipe_while_ok";
            };
          } // packageOverrides)
      ) {};

    pipe_while_ok = pipe_while_ok_0_0_2;

    pipeline_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          effects_0_1_1,
          plug_1_2_0_rc_0
        }:
          buildMix ({
            name = "pipeline";
            version = "0.1.0";
            src = fetchHex {
              pkg = "pipeline";
              version = "0.1.0";
              sha256 =
                "c91cbeb67d9836dd644e2a678d33285bdaba01d335b814c6d404960b8b5b104f";
            };
            beamDeps  = [ effects_0_1_1 plug_1_2_0_rc_0 ];

            meta = {
              description = ''Monadic HTTP application composition for plug and
                            friends.'';
              license = stdenv.lib.licenses.cc0;
              homepage = "https://github.com/metalabdesign/pipeline";
            };
          } // packageOverrides)
      ) {};

    pipeline = pipeline_0_1_0;

    piper_0_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "piper";
            version = "0.0.4";
            src = fetchHex {
              pkg = "piper";
              version = "0.0.4";
              sha256 =
                "ddf2a124116d4dd6ba3946737450c572fbff44752f9caf6d92c1f459fc886a57";
            };

            meta = {
              description = ''Simple task router similar to Phoenix.Router and
                            Plug'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/appunite/piper";
            };
          } // packageOverrides)
      ) {};

    piper = piper_0_0_4;

    pipette_0_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, mock_0_1_3 }:
          buildMix ({
            name = "pipette";
            version = "0.0.4";
            src = fetchHex {
              pkg = "pipette";
              version = "0.0.4";
              sha256 =
                "8742ea9b115071c3aa7cec4ddacfa161ff63fd647e0491ac442cb118d7198e26";
            };
            beamDeps  = [ mock_0_1_3 ];

            meta = {
              description = ''new_data = pipette(data, template)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/liquidz/pipette";
            };
          } // packageOverrides)
      ) {};

    pipette = pipette_0_0_4;

    pipper_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pipper";
            version = "1.0.0";
            src = fetchHex {
              pkg = "pipper";
              version = "1.0.0";
              sha256 =
                "a6b5100f6bab060674e5a828dcfb1b7c12e65739186e54809a23320a5550e149";
            };

            meta = {
              description = ''Provides a \"pipe-equals\" operator'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/drewblas/pipper";
            };
          } // packageOverrides)
      ) {};

    pipper = pipper_1_0_0;

    pit_1_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pit";
            version = "1.2.0";
            src = fetchHex {
              pkg = "pit";
              version = "1.2.0";
              sha256 =
                "7a5922fb8979c12b13fb8e50b931efb6e01a1ad965f5ee1402bdb6858f9b0f5a";
            };

            meta = {
              description = ''Elixir macro for extracting or transforming
                            values inside a pipe flow.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/vic/pit";
            };
          } // packageOverrides)
      ) {};

    pit = pit_1_2_0;

    piton_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, erlport_0_9_8 }:
          buildMix ({
            name = "piton";
            version = "0.2.0";
            src = fetchHex {
              pkg = "piton";
              version = "0.2.0";
              sha256 =
                "f1fbee53c32358af298606ad7465f0d5788cbf8dbb0d63d8f3817a3264a941eb";
            };
            beamDeps  = [ erlport_0_9_8 ];

            meta = {
              description = ''Run your Python algorithms in parallel and avoid
                            the GIL'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mendrugory/piton";
            };
          } // packageOverrides)
      ) {};

    piton = piton_0_2_0;

    pixie_0_3_9 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          con_cache_0_12_0,
          cowboy_1_0_4,
          ex_doc_0_16_1,
          ex_minimatch_0_0_1,
          exredis_0_2_5,
          gproc_0_6_1,
          plug_1_3_5,
          poison_1_5_2,
          poolboy_1_5_1,
          secure_random_0_5_1,
          timex_3_1_15
        }:
          buildMix ({
            name = "pixie";
            version = "0.3.9";
            src = fetchHex {
              pkg = "pixie";
              version = "0.3.9";
              sha256 =
                "c722cf4b97031e489ce703147e7cedaa2fddf279dca405a6fb41f419b264f3f0";
            };
            beamDeps  = [
                          con_cache_0_12_0
                          cowboy_1_0_4
                          ex_doc_0_16_1
                          ex_minimatch_0_0_1
                          exredis_0_2_5
                          gproc_0_6_1
                          plug_1_3_5
                          poison_1_5_2
                          poolboy_1_5_1
                          secure_random_0_5_1
                          timex_3_1_15
                        ];

            meta = {
              description = ''Bayeux compatible server written in Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/messagerocket/pixie";
            };
          } // packageOverrides)
      ) {};

    pixie = pixie_0_3_9;

    pixie_ets_1_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ex_minimatch_0_0_1,
          u_token_0_0_2
        }:
          buildMix ({
            name = "pixie_ets";
            version = "1.0.0";
            src = fetchHex {
              pkg = "pixie_ets";
              version = "1.0.0";
              sha256 =
                "7eaf802558960523b9245f178de1e0e2634c8241320cf979d31835175caad6b5";
            };
            beamDeps  = [ ex_minimatch_0_0_1 u_token_0_0_2 ];

            meta = {
              description = ''ETS storage backend for Pixie, Elixir`s Bayeux
                            server.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/messagerocket/pixie_ets";
            };
          } // packageOverrides)
      ) {};

    pixie_ets = pixie_ets_1_0_0;

    pkcs5_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pkcs5";
            version = "1.0.0";
            src = fetchHex {
              pkg = "pkcs5";
              version = "1.0.0";
              sha256 =
                "886f69bfc3db23ab0a7b85d3fb574482ff5245f846bff00174fc55e987b8525b";
            };

            meta = {
              description = ''PKCS5 binary padding for erlang'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sonttt9/pkcs5.git";
            };
          } // packageOverrides)
      ) {};

    pkcs5 = pkcs5_1_0_0;

    pkcs7_1_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pkcs7";
            version = "1.0.2";
            src = fetchHex {
              pkg = "pkcs7";
              version = "1.0.2";
              sha256 =
                "0e4faa65411e204b7952712d58f657335109ecbb24cf79163dc96458ba8d6518";
            };

            meta = {
              description = ''PKCS7 binary padding for erlang'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/camshaft/pkcs7.erl";
            };
          } // packageOverrides)
      ) {};

    pkcs7 = pkcs7_1_0_2;

    placid_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          http_router_0_10_0,
          linguist_0_1_5,
          plug_1_3_5,
          poison_3_1_0,
          xml_builder_0_1_1
        }:
          buildMix ({
            name = "placid";
            version = "0.3.0";
            src = fetchHex {
              pkg = "placid";
              version = "0.3.0";
              sha256 =
                "e461c633d1f163bddf71e1edaabcdca1d5db2a883978956796f619f805bf479c";
            };
            beamDeps  = [
                          cowboy_1_1_2
                          http_router_0_10_0
                          linguist_0_1_5
                          plug_1_3_5
                          poison_3_1_0
                          xml_builder_0_1_1
                        ];

            meta = {
              longDescription = ''A REST toolkit for building highly-scalable
                                and fault-tolerant HTTP APIs with Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/slogsdon/placid";
            };
          } // packageOverrides)
      ) {};

    placid = placid_0_3_0;

    plaid_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_8_3,
          poison_2_2_0
        }:
          buildMix ({
            name = "plaid";
            version = "0.0.1";
            src = fetchHex {
              pkg = "plaid";
              version = "0.0.1";
              sha256 =
                "1168a916f1a2fa5528b7891fe32784a1c415dbd5fc8b05bb9a7571f887f3ee9e";
            };
            beamDeps  = [ httpoison_0_8_3 poison_2_2_0 ];

            meta = {
              description = ''Client for Plaid, the finance API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/travisjeffery/plaid";
            };
          } // packageOverrides)
      ) {};

    plaid = plaid_0_0_1;

    plaid_elixir_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_9_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "plaid_elixir";
            version = "0.3.0";
            src = fetchHex {
              pkg = "plaid_elixir";
              version = "0.3.0";
              sha256 =
                "b88fd66e38d13ac01e2e2ce71e3865f24d9550a80d4e0a78428c6bb5be24ce43";
            };
            beamDeps  = [ httpoison_0_9_2 poison_2_2_0 ];

            meta = {
              description = ''An Elixir Library for Plaid'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/wfgilman/plaid-elixir";
            };
          } // packageOverrides)
      ) {};

    plaid_elixir = plaid_elixir_0_3_0;

    plain_fsm_1_4_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "plain_fsm";
            version = "1.4.0";
            src = fetchHex {
              pkg = "plain_fsm";
              version = "1.4.0";
              sha256 =
                "e68e88c6c4a157c6afdfe0fb23faa2c8ee7cc34f4b923723a2973a2638383d12";
            };

            meta = {
              description = ''Plain_fsm library'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/uwiger/plain_fsm";
            };
          } // packageOverrides)
      ) {};

    plain_fsm = plain_fsm_1_4_0;

    plain_sitemap_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_0_0_rc_6,
          timex_3_0_5,
          xml_builder_0_0_9
        }:
          buildMix ({
            name = "plain_sitemap";
            version = "0.0.1";
            src = fetchHex {
              pkg = "plain_sitemap";
              version = "0.0.1";
              sha256 =
                "de50737e75db8b3ec62a2f2e107ab411ea94e0f6f1fd336f7ed41a55414bd083";
            };
            beamDeps  = [ ecto_2_0_0_rc_6 timex_3_0_5 xml_builder_0_0_9 ];

            meta = {
              description = ''Very simple sitemap generator for Elixir inspired
                            by sitemap_generator.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kenta-aktsk/plain_sitemap";
            };
          } // packageOverrides)
      ) {};

    plain_sitemap = plain_sitemap_0_0_1;

    plantuml_mix_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "plantuml_mix";
            version = "0.0.1";
            src = fetchHex {
              pkg = "plantuml_mix";
              version = "0.0.1";
              sha256 =
                "6d064ebc3be722642875ea5e2ce63a5678b95d96353c3605f6e83684651947f0";
            };

            meta = {
              longDescription = ''Add plantuml task to mix. Execute mix
                                plantuml --help for options. Requires that the
                                env var PLANTUML_JAR points to a valid PlantUML
                                jar file. Requires Java > 1.6 installed on the
                                system.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/binarytemple/plantuml_mix";
            };
          } // packageOverrides)
      ) {};

    plantuml_mix = plantuml_mix_0_0_1;

    plasm_1_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_1_0_1,
          postgrex_1_0_0_rc_1
        }:
          buildMix ({
            name = "plasm";
            version = "1.0.1";
            src = fetchHex {
              pkg = "plasm";
              version = "1.0.1";
              sha256 =
                "3e875b3deb7b441517c337c0244c2f3b84aeb237adfdea04d51363c928bff26c";
            };
            beamDeps  = [ ecto_1_0_1 postgrex_1_0_0_rc_1 ];

            meta = {
              description = ''Composable query convenience functions for
                            Ecto'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/facto/plasm";
            };
          } // packageOverrides)
      ) {};

    plasm = plasm_1_0_1;

    plasm_ecto_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "plasm_ecto";
            version = "0.2.0";
            src = fetchHex {
              pkg = "plasm_ecto";
              version = "0.2.0";
              sha256 =
                "0b55f2445ca3dd8a1aafdf8ab18af6c053a1f79819946c62f54d275e4ff2809c";
            };

            meta = {
              longDescription = ''Plasm generates Ecto models based on existing
                                database tables and populates the fields of the
                                model.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jhartwell/Plasm";
            };
          } // packageOverrides)
      ) {};

    plasm_ecto = plasm_ecto_0_2_0;

    playlist_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "playlist";
            version = "1.0.0";
            src = fetchHex {
              pkg = "playlist";
              version = "1.0.0";
              sha256 =
                "36eab6242934b4f22da5c413bbf25abaa72d69934a0defd780d9b863f5a5b4ba";
            };

            meta = {
              description = ''Parse playlist files'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sotojuan/playlist";
            };
          } // packageOverrides)
      ) {};

    playlist = playlist_1_0_0;

    plist_0_0_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "plist";
            version = "0.0.5";
            src = fetchHex {
              pkg = "plist";
              version = "0.0.5";
              sha256 =
                "8ab4594dc0c59a4d7027012f07404d7c2573b3399ec8be81ab1d207de8bfebb5";
            };

            meta = {
              description = ''An Elixir library to parse files in Apple`s
                            property list formats'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ciaran/plist";
            };
          } // packageOverrides)
      ) {};

    plist = plist_0_0_5;

    plivo_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_8_3,
          poison_2_1_0
        }:
          buildMix ({
            name = "plivo";
            version = "0.0.1";
            src = fetchHex {
              pkg = "plivo";
              version = "0.0.1";
              sha256 =
                "e710b4132ece4f648b772dc540dd1ba7d0fb241fe2f271639cf0764bdb024848";
            };
            beamDeps  = [ httpoison_0_8_3 poison_2_1_0 ];

            meta = {
              description = ''An elixir client for Plivo API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/aarvay/plivo-elixir";
            };
          } // packageOverrides)
      ) {};

    plivo = plivo_0_0_1;

    plogger_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "plogger";
            version = "0.1.0";
            src = fetchHex {
              pkg = "plogger";
              version = "0.1.0";
              sha256 =
                "f327e5aa18704dc5fa3c0a141e84e1a63957e0f0775129cd454f465bd3269ad1";
            };

            meta = {
              longDescription = ''Set of wrapper functions for the built-in
                                Logger functions `info`, `debug`, `warn`,
                                `error`. Because the output of the functions is
                                the same as the input, they can be inserted in a
                                sequence of functions, that are linked with the
                                pipe ( |> ) operator. It works the same as Elm`s
                                Debug.log.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pinx/plogger";
            };
          } // packageOverrides)
      ) {};

    plogger = plogger_0_1_0;

    plotka_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_6_6,
          poison_3_1_0,
          tesla_0_6_0
        }:
          buildMix ({
            name = "plotka";
            version = "0.1.0";
            src = fetchHex {
              pkg = "plotka";
              version = "0.1.0";
              sha256 =
                "059205ee00859dbe81a45b76d2cb93dbf1ba65ce0826f669e1f21a644d117879";
            };
            beamDeps  = [ hackney_1_6_6 poison_3_1_0 tesla_0_6_0 ];

            meta = {
              description = ''Elixir wrapper for GwentAPI developed using Tesla
                            HTTP client.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/AndreyIlyunin/plotka";
            };
          } // packageOverrides)
      ) {};

    plotka = plotka_0_1_0;

    plsm_2_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          mariaex_0_8_2,
          postgrex_0_13_3
        }:
          buildMix ({
            name = "plsm";
            version = "2.0.1";
            src = fetchHex {
              pkg = "plsm";
              version = "2.0.1";
              sha256 =
                "fb29234951facabcb0800e332e0266b91724fac9d5ccc0631ddf744e1f76dff4";
            };
            beamDeps  = [ mariaex_0_8_2 postgrex_0_13_3 ];

            meta = {
              longDescription = ''Plsm generates Ecto models based on existing
                                database tables and populates the fields of the
                                model.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jhartwell/Plsm";
            };
          } // packageOverrides)
      ) {};

    plsm = plsm_2_0_1;

    plug_0_7_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, cowboy_1_0_4 }:
          buildMix ({
            name = "plug";
            version = "0.7.0";
            src = fetchHex {
              pkg = "plug";
              version = "0.7.0";
              sha256 =
                "c25ceaacbdd0085653d84f8187c179e523b2edd54d393673df2d761f85795867";
            };
            beamDeps  = [ cowboy_1_0_4 ];

            meta = {
              description = ''A specification and conveniences for composable
                            modules between web applications'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/elixir-plug/plug";
            };
          } // packageOverrides)
      ) {};

    plug_1_1_7 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, cowboy_1_1_2 }:
          buildMix ({
            name = "plug";
            version = "1.1.7";
            src = fetchHex {
              pkg = "plug";
              version = "1.1.7";
              sha256 =
                "b2d6b5af65935081e806ecae7619a5aa45b76280bc7d7fe481e644ffd8b25641";
            };
            beamDeps  = [ cowboy_1_1_2 ];

            meta = {
              description = ''A specification and conveniences for composable
                            modules between web applications'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/elixir-plug/plug";
            };
          } // packageOverrides)
      ) {};

    plug_1_2_0_rc_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          mime_1_1_0
        }:
          buildMix ({
            name = "plug";
            version = "1.2.0-rc.0";
            src = fetchHex {
              pkg = "plug";
              version = "1.2.0-rc.0";
              sha256 =
                "7e4907651a0c8fef7f82f4f5ef2d4a69f67ac4c5856b77fe69430b8069a4c6ed";
            };
            beamDeps  = [ cowboy_1_1_2 mime_1_1_0 ];

            meta = {
              description = ''A specification and conveniences for composable
                            modules between web applications'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/elixir-plug/plug";
            };
          } // packageOverrides)
      ) {};

    plug_1_2_5 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          mime_1_1_0
        }:
          buildMix ({
            name = "plug";
            version = "1.2.5";
            src = fetchHex {
              pkg = "plug";
              version = "1.2.5";
              sha256 =
                "3e6dcf1b3fc2aa96630706608800705cd1a5054c4502a8f6b3fb9fe4ff75f687";
            };
            beamDeps  = [ cowboy_1_1_2 mime_1_1_0 ];

            meta = {
              description = ''A specification and conveniences for composable
                            modules between web applications'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/elixir-plug/plug";
            };
          } // packageOverrides)
      ) {};

    plug_1_3_5 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_0_2,
          mime_1_1_0
        }:
          buildMix ({
            name = "plug";
            version = "1.3.5";
            src = fetchHex {
              pkg = "plug";
              version = "1.3.5";
              sha256 =
                "141058cca1fa800128391ece7f442f71a7b42a7411e6eaa56dc8f85283c8dde7";
            };
            beamDeps  = [ cowboy_1_0_2 mime_1_1_0 ];

            meta = {
              description = ''A specification and conveniences for composable
                            modules between web applications'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/elixir-plug/plug";
            };
          } // packageOverrides)
      ) {};

    plug = plug_1_3_5;

    plug_abort_2_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          plug_1_1_7,
          poison_1_0_3
        }:
          buildMix ({
            name = "plug_abort";
            version = "2.1.1";
            src = fetchHex {
              pkg = "plug_abort";
              version = "2.1.1";
              sha256 =
                "8da98a882ea79e08443e7d26c94ee2b572560efca3f0a5922c69e508ac02d883";
            };
            beamDeps  = [ cowboy_1_1_2 plug_1_1_7 poison_1_0_3 ];

            meta = {
              description = ''Easily abort the processing of a plug stack '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/onkel-dirtus/plug_abort";
            };
          } // packageOverrides)
      ) {};

    plug_abort = plug_abort_2_1_1;

    plug_accept_language_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, plug_1_3_5 }:
          buildMix ({
            name = "plug_accept_language";
            version = "0.1.1";
            src = fetchHex {
              pkg = "plug_accept_language";
              version = "0.1.1";
              sha256 =
                "b5995f90f066eae59066297ae6ad93324ed485e21c86a90027c953157ecfd0ae";
            };
            beamDeps  = [ plug_1_3_5 ];

            meta = {
              description = ''parse the accept-language header'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/camshaft/plug_accept_language";
            };
          } // packageOverrides)
      ) {};

    plug_accept_language = plug_accept_language_0_1_1;

    plug_accesslog_0_14_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          plug_1_3_5,
          timex_3_1_15
        }:
          buildMix ({
            name = "plug_accesslog";
            version = "0.14.0";
            src = fetchHex {
              pkg = "plug_accesslog";
              version = "0.14.0";
              sha256 =
                "566455a728010f48e9de9a86bf5c7862a7cd0a345f4ad14c9d3a077948ec6891";
            };
            beamDeps  = [ cowboy_1_1_2 plug_1_3_5 timex_3_1_15 ];

            meta = {
              description = ''Plug for writing access logs'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/mneudert/plug_accesslog";
            };
          } // packageOverrides)
      ) {};

    plug_accesslog = plug_accesslog_0_14_0;

    plug_and_play_0_7_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          plug_1_3_5
        }:
          buildMix ({
            name = "plug_and_play";
            version = "0.7.0";
            src = fetchHex {
              pkg = "plug_and_play";
              version = "0.7.0";
              sha256 =
                "55503dbd902cee3db9c136a6c07805f8cff59fbcd83c2f7e167b108ff32a3c3f";
            };
            beamDeps  = [ cowboy_1_1_2 plug_1_3_5 ];

            meta = {
              longDescription = ''Set up a `Plug` application with less
                                boilerplate. `PlugAndPlay` is not a web
                                framework – it`s a small scaffold. You use
                                `Plug` as you would normally, only *sooner*.
                                Later, if you need more control, you can easily
                                replace `PlugAndPlay` piece by piece or
                                wholesale.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/henrik/plug_and_play";
            };
          } // packageOverrides)
      ) {};

    plug_and_play = plug_and_play_0_7_0;

    plug_assign_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, plug_1_1_7 }:
          buildMix ({
            name = "plug_assign";
            version = "1.0.0";
            src = fetchHex {
              pkg = "plug_assign";
              version = "1.0.0";
              sha256 =
                "293a2885e8d23fce64b9f81019882e14512d57cf82b863f9be860157e5f79708";
            };
            beamDeps  = [ plug_1_1_7 ];

            meta = {
              description = ''A simple plug to allow setting variables in a
                            connection.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nshafer/plug_assign";
            };
          } // packageOverrides)
      ) {};

    plug_assign = plug_assign_1_0_0;

    plug_attack_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, plug_1_3_5 }:
          buildMix ({
            name = "plug_attack";
            version = "0.3.0";
            src = fetchHex {
              pkg = "plug_attack";
              version = "0.3.0";
              sha256 =
                "a86673a13a4188d91f39dbd5102145bd45e3be3139cd4a7a9584c99a1b240abb";
            };
            beamDeps  = [ plug_1_3_5 ];

            meta = {
              description = ''A plug building toolkit for blocking and
                            throttling abusive requests.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/michalmuskala/plug_attack";
            };
          } // packageOverrides)
      ) {};

    plug_attack = plug_attack_0_3_0;

    plug_auth_1_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_0_4,
          plug_1_3_5
        }:
          buildMix ({
            name = "plug_auth";
            version = "1.1.0";
            src = fetchHex {
              pkg = "plug_auth";
              version = "1.1.0";
              sha256 =
                "2c59f3dbc7fd7e139dd202c132e1742b75bbfe1389dfb1bdf63bf6cba0e786a4";
            };
            beamDeps  = [ cowboy_1_0_4 plug_1_3_5 ];

            meta = {
              description = ''A collection of authentication-related plugs'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/bitgamma/plug_auth";
            };
          } // packageOverrides)
      ) {};

    plug_auth = plug_auth_1_1_0;

    plug_basic_auth_1_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          plug_1_1_7
        }:
          buildMix ({
            name = "plug_basic_auth";
            version = "1.1.0";
            src = fetchHex {
              pkg = "plug_basic_auth";
              version = "1.1.0";
              sha256 =
                "6763e5ad0f17d6693e296cc3a69c1db627f9b66bda2bcded4ddfcc84a42f0c03";
            };
            beamDeps  = [ cowboy_1_1_2 plug_1_1_7 ];

            meta = {
              description = ''A Plug for using HTTP Basic Authentication in
                            Plug applications'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/rbishop/plug_basic_auth";
            };
          } // packageOverrides)
      ) {};

    plug_basic_auth = plug_basic_auth_1_1_0;

    plug_byte_serve_0_3_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, plug_1_1_7 }:
          buildMix ({
            name = "plug_byte_serve";
            version = "0.3.2";
            src = fetchHex {
              pkg = "plug_byte_serve";
              version = "0.3.2";
              sha256 =
                "f6e4873373b3efd207877ca5f797f4ea539cf2a885aae895c6c3df73ce9b75ac";
            };
            beamDeps  = [ plug_1_1_7 ];

            meta = {
              description = ''A Plug for using HTTP Byte Serving in Plug
                            applications.'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/masteinhauser/plug_byte_serve";
            };
          } // packageOverrides)
      ) {};

    plug_byte_serve = plug_byte_serve_0_3_2;

    plug_ccsauth_1_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          plug_1_3_5,
          poison_2_2_0
        }:
          buildMix ({
            name = "plug_ccsauth";
            version = "1.0.1";
            src = fetchHex {
              pkg = "plug_ccsauth";
              version = "1.0.1";
              sha256 =
                "ccb51f2843e7d33c2abaa32821530c84af3353ca0c18ec064e4cbcb932e855ed";
            };
            beamDeps  = [ plug_1_3_5 poison_2_2_0 ];

            meta = {
              description = ''...'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    plug_ccsauth = plug_ccsauth_1_0_1;

    plug_cloudflare_1_3_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, cidr_1_1_0, plug_1_3_5
        }:
          buildMix ({
            name = "plug_cloudflare";
            version = "1.3.0";
            src = fetchHex {
              pkg = "plug_cloudflare";
              version = "1.3.0";
              sha256 =
                "641df2e40267446172c43b2f52dd9a1cbcd1f24dccd101bda29732a13335ab21";
            };
            beamDeps  = [ cidr_1_1_0 plug_1_3_5 ];

            meta = {
              description = ''Convert CloudFlare`s CF-Connecting-IP header to
                            Plug.Conn`s remote_ip field.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/c-rack/plug_cloudflare";
            };
          } // packageOverrides)
      ) {};

    plug_cloudflare = plug_cloudflare_1_3_0;

    plug_content_security_policy_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, plug_1_3_5 }:
          buildMix ({
            name = "plug_content_security_policy";
            version = "0.1.1";
            src = fetchHex {
              pkg = "plug_content_security_policy";
              version = "0.1.1";
              sha256 =
                "59d4d4c147c8d98f0b25170b8cc41d94d23c342cddac52a5e8c7d6b9ddaedfe8";
            };
            beamDeps  = [ plug_1_3_5 ];

            meta = {
              longDescription = ''A Plug module for inserting a Content
                                Security Policy header into the response.
                                Supports generating nonces as specified in CSP
                                Level 2.'';
              license = stdenv.lib.licenses.isc;
              homepage =
                "https://github.com/xtian/plug_content_security_policy";
            };
          } // packageOverrides)
      ) {};

    plug_content_security_policy =
      plug_content_security_policy_0_1_1;

    plug_contrib_0_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_0_4,
          plug_1_3_5
        }:
          buildMix ({
            name = "plug_contrib";
            version = "0.1.2";
            src = fetchHex {
              pkg = "plug_contrib";
              version = "0.1.2";
              sha256 =
                "1b15599785ca88a4248c2845f2af3758305c3b213e56bf6fefe1f59d1e99875a";
            };
            beamDeps  = [ cowboy_1_0_4 plug_1_3_5 ];

            meta = {
              description = ''An elixir plug that compresses(gzips) your
                            responses'';
              license = stdenv.lib.licenses.mit;
              homepage = "http://github.com/minhajuddin/plug_contrib";
            };
          } // packageOverrides)
      ) {};

    plug_contrib = plug_contrib_0_1_2;

    plug_cors_0_8_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_0_4,
          plug_1_3_5
        }:
          buildMix ({
            name = "plug_cors";
            version = "0.8.2";
            src = fetchHex {
              pkg = "plug_cors";
              version = "0.8.2";
              sha256 =
                "286a36b000989538c168d115f6a017aaa15a4031e4f867d300878d81c3b8c6aa";
            };
            beamDeps  = [ cowboy_1_0_4 plug_1_3_5 ];

            meta = {
              description = ''Deprecated: CORS Plug Middleware. Please use
                            corsica instead'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/bryanjos/plug_cors";
            };
          } // packageOverrides)
      ) {};

    plug_cors = plug_cors_0_8_2;

    plug_ets_cache_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          con_cache_0_12_0,
          phoenix_1_3_0_rc_2,
          plug_1_3_5
        }:
          buildMix ({
            name = "plug_ets_cache";
            version = "0.1.0";
            src = fetchHex {
              pkg = "plug_ets_cache";
              version = "0.1.0";
              sha256 =
                "ac8780450957b0e5e3cc7b307baaa71d9b76092cb789675d521dbd8c02e2af63";
            };
            beamDeps  = [ con_cache_0_12_0 phoenix_1_3_0_rc_2 plug_1_3_5 ];

            meta = {
              description = ''A simple caching system based on Plug and ETS.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/andreapavoni/plug_ets_cache";
            };
          } // packageOverrides)
      ) {};

    plug_ets_cache = plug_ets_cache_0_1_0;

    plug_exception_handler_0_0_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          plug_1_1_7
        }:
          buildMix ({
            name = "plug_exception_handler";
            version = "0.0.4";
            src = fetchHex {
              pkg = "plug_exception_handler";
              version = "0.0.4";
              sha256 =
                "477ea599e516bcf8efb399ca43ca3d9cecd50982222b1f5f259092d4c99fca28";
            };
            beamDeps  = [ cowboy_1_1_2 plug_1_1_7 ];

            meta = {
              description = ''Rescue exceptions from your plug stack'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/onkel-dirtus/plug_exception_handler";
            };
          } // packageOverrides)
      ) {};

    plug_exception_handler = plug_exception_handler_0_0_4;

    plug_forwarded_peer_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, plug_1_3_5 }:
          buildMix ({
            name = "plug_forwarded_peer";
            version = "0.0.2";
            src = fetchHex {
              pkg = "plug_forwarded_peer";
              version = "0.0.2";
              sha256 =
                "c2466e0f0ef75a0d925a957fa50dfcded2c4788fe67857a675411e7184ae5ec3";
            };
            beamDeps  = [ plug_1_3_5 ];

            meta = {
              longDescription = ''Very simple plug which reads
                                `X-Forwarded-For` or `Forwarded` header
                                according to rfc7239 and fill `conn.remote_ip`
                                with the root client ip.'';
              license = stdenv.lib.licenses.mit;
              homepage = "http://github.com/awetzel/plug_forwarded_peer";
            };
          } // packageOverrides)
      ) {};

    plug_forwarded_peer = plug_forwarded_peer_0_0_2;

    plug_fprof_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "plug_fprof";
            version = "0.0.1";
            src = fetchHex {
              pkg = "plug_fprof";
              version = "0.0.1";
              sha256 =
                "4c5e6171ab7ebb29b6d473f8c5fd758a11ade5847d31add676c944a302ab006c";
            };

            meta = {
              description = ''A Plug that adds fprof tracing to requests, to
                            allow for easy profiling.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/obmarg/plug_fprof";
            };
          } // packageOverrides)
      ) {};

    plug_fprof = plug_fprof_0_0_1;

    plug_geoip2_0_4_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          geolix_0_13_0,
          plug_1_3_5
        }:
          buildMix ({
            name = "plug_geoip2";
            version = "0.4.2";
            src = fetchHex {
              pkg = "plug_geoip2";
              version = "0.4.2";
              sha256 =
                "2a6443040e07e677b0ff7749d2cdf7797a97254466f6740aee11544a18f4993a";
            };
            beamDeps  = [ geolix_0_13_0 plug_1_3_5 ];

            meta = {
              longDescription = ''Adds geo location to a Plug connection based
                                upon the client IP address by using MaxMind`s
                                GeoIP2 database.'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    plug_geoip2 = plug_geoip2_0_4_2;

    plug_graphql_0_3_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          graphql_0_3_2,
          plug_1_1_7,
          poison_1_0_2
        }:
          buildMix ({
            name = "plug_graphql";
            version = "0.3.1";
            src = fetchHex {
              pkg = "plug_graphql";
              version = "0.3.1";
              sha256 =
                "086b88c0e2b6576462f75afea02bb46baa27dbf1ff01af8b1f4ac45444645069";
            };
            beamDeps  = [ cowboy_1_1_2 graphql_0_3_2 plug_1_1_7 poison_1_0_2
                      ];

            meta = {
              description = ''A Plug integration for GraphQL Elixir'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/graphql-elixir/plug_graphql";
            };
          } // packageOverrides)
      ) {};

    plug_graphql = plug_graphql_0_3_1;

    plug_heartbeat_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          plug_1_3_5
        }:
          buildMix ({
            name = "plug_heartbeat";
            version = "0.2.0";
            src = fetchHex {
              pkg = "plug_heartbeat";
              version = "0.2.0";
              sha256 =
                "23cb357dad510695b6bb339fdbf5d3fc8581546124f7389d63c9cf723e4ad40f";
            };
            beamDeps  = [ cowboy_1_1_2 plug_1_3_5 ];

            meta = {
              description = ''A tiny plug for responding to heartbeat requests
                            '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/whatyouhide/plug_heartbeat";
            };
          } // packageOverrides)
      ) {};

    plug_heartbeat = plug_heartbeat_0_2_0;

    plug_json_parser_0_0_6 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          plug_1_1_7,
          poison_1_1_1
        }:
          buildMix ({
            name = "plug_json_parser";
            version = "0.0.6";
            src = fetchHex {
              pkg = "plug_json_parser";
              version = "0.0.6";
              sha256 =
                "4c07f3adade5ad8730b6ec5d33d50b5dbe1a960e2be29a764b415c5234c79204";
            };
            beamDeps  = [ cowboy_1_1_2 plug_1_1_7 poison_1_1_1 ];

            meta = {
              description = ''JSON parse for Plug.Parsers '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/onkel-dirtus/plug_json_parser";
            };
          } // packageOverrides)
      ) {};

    plug_json_parser = plug_json_parser_0_0_6;

    plug_jwt_0_7_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_0_4,
          joken_0_16_1,
          plug_1_3_5
        }:
          buildMix ({
            name = "plug_jwt";
            version = "0.7.1";
            src = fetchHex {
              pkg = "plug_jwt";
              version = "0.7.1";
              sha256 =
                "a87cd8815454093c3300bdae4f2af7ec8c671fd22ce55f598309b5bed4ac3a2a";
            };
            beamDeps  = [ cowboy_1_0_4 joken_0_16_1 plug_1_3_5 ];

            meta = {
              description = ''JWT Plug Middleware'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/bryanjos/plug_jwt.git";
            };
          } // packageOverrides)
      ) {};

    plug_jwt = plug_jwt_0_7_1;

    plug_letsencrypt_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, plug_1_3_5 }:
          buildMix ({
            name = "plug_letsencrypt";
            version = "0.1.0";
            src = fetchHex {
              pkg = "plug_letsencrypt";
              version = "0.1.0";
              sha256 =
                "150656c81de8ea55bbc8cf3c7934d65681c825a3f156f9673d7a0d79c6308e10";
            };
            beamDeps  = [ plug_1_3_5 ];

            meta = {
              description = ''PlugLetsEncrypt responds to Let’s Encrypt
                            domain verification requests.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/remiprev/plug_letsencrypt";
            };
          } // packageOverrides)
      ) {};

    plug_letsencrypt = plug_letsencrypt_0_1_0;

    plug_logger_json_0_4_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          plug_1_3_5,
          poison_1_0_2
        }:
          buildMix ({
            name = "plug_logger_json";
            version = "0.4.0";
            src = fetchHex {
              pkg = "plug_logger_json";
              version = "0.4.0";
              sha256 =
                "81fc010548958e058e00d717ea44ce65a42bd78a364334f010c8ce845d3a8866";
            };
            beamDeps  = [ plug_1_3_5 poison_1_0_2 ];

            meta = {
              description = ''Elixir Plug that formats http request logs as
                            json'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/bleacherreport/plug_logger_json";
            };
          } // packageOverrides)
      ) {};

    plug_logger_json = plug_logger_json_0_4_0;

    plug_maintenance_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_0_4,
          plug_1_3_5
        }:
          buildMix ({
            name = "plug_maintenance";
            version = "0.1.0";
            src = fetchHex {
              pkg = "plug_maintenance";
              version = "0.1.0";
              sha256 =
                "95d15f5fc41f0fe4dc131e841964d0724276ded8dfbbf7ce9d5c8781fed913fe";
            };
            beamDeps  = [ cowboy_1_0_4 plug_1_3_5 ];

            meta = {
              description = ''An Elixir plug returns a service unavailable
                            response during maintenance.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/shufo/plug_maintenance";
            };
          } // packageOverrides)
      ) {};

    plug_maintenance = plug_maintenance_0_1_0;

    plug_media_type_router_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, plug_1_3_5 }:
          buildMix ({
            name = "plug_media_type_router";
            version = "0.0.3";
            src = fetchHex {
              pkg = "plug_media_type_router";
              version = "0.0.3";
              sha256 =
                "a56e1852439bf43929c6dc051796fe5ffd5a3196dce040e08ad7845cf76b6f1f";
            };
            beamDeps  = [ plug_1_3_5 ];

            meta = {
              longDescription = ''An Elixir Plug for routing requests to other
                                Plugs based on the request`s Media Type'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/danielgrieve/plug_media_type_router";
            };
          } // packageOverrides)
      ) {};

    plug_media_type_router = plug_media_type_router_0_0_3;

    plug_newrelic_0_0_7 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          newrelic_0_1_0,
          plug_1_3_5
        }:
          buildMix ({
            name = "plug_newrelic";
            version = "0.0.7";
            src = fetchHex {
              pkg = "plug_newrelic";
              version = "0.0.7";
              sha256 =
                "921725a15e1dda6f0aac1e54d40b23d548768e8c538673a0cf619f548a46adbe";
            };
            beamDeps  = [ newrelic_0_1_0 plug_1_3_5 ];

            meta = {
              description = ''Wraps New Relic transaction tracing into a
                            plug.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/manheim/amix";
            };
          } // packageOverrides)
      ) {};

    plug_newrelic = plug_newrelic_0_0_7;

    plug_offline_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, plug_1_3_5 }:
          buildMix ({
            name = "plug_offline";
            version = "0.0.3";
            src = fetchHex {
              pkg = "plug_offline";
              version = "0.0.3";
              sha256 =
                "cd460bebee6ed37004c116dce8b80409e0b9fa86aada75201daeff5484e54f80";
            };
            beamDeps  = [ plug_1_3_5 ];

            meta = {
              longDescription = ''This package provides cache manifest file
                                with digest and file or inline assets helper for
                                .eex templates.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/bonyiii/plug_offline";
            };
          } // packageOverrides)
      ) {};

    plug_offline = plug_offline_0_0_3;

    plug_pagecache_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          plug_1_3_5
        }:
          buildMix ({
            name = "plug_pagecache";
            version = "0.2.0";
            src = fetchHex {
              pkg = "plug_pagecache";
              version = "0.2.0";
              sha256 =
                "8f33202de45d772dd1f416a10d43f8e2daabf937d459e010fa9c850834e1877f";
            };
            beamDeps  = [ cowboy_1_1_2 plug_1_3_5 ];

            meta = {
              description = ''Plug for full page response caching'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/mneudert/plug_pagecache";
            };
          } // packageOverrides)
      ) {};

    plug_pagecache = plug_pagecache_0_2_0;

    plug_protobufs_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exprotobuf_1_2_7,
          plug_1_3_5
        }:
          buildMix ({
            name = "plug_protobufs";
            version = "0.1.0";
            src = fetchHex {
              pkg = "plug_protobufs";
              version = "0.1.0";
              sha256 =
                "83fb6f9053a7fa9ef24e2337f009181fa51f6d64da0e124b75e9ae9cf9f7c9ff";
            };
            beamDeps  = [ exprotobuf_1_2_7 plug_1_3_5 ];

            meta = {
              longDescription = ''A plug parser for Protobufs input. This
                                creates a simple and easy way to accept
                                Protobufs as the input to your plug projects.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hayesgm/plug_protobufs";
            };
          } // packageOverrides)
      ) {};

    plug_protobufs = plug_protobufs_0_1_0;

    plug_proxy_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          hackney_1_8_6,
          plug_1_3_5
        }:
          buildMix ({
            name = "plug_proxy";
            version = "0.3.0";
            src = fetchHex {
              pkg = "plug_proxy";
              version = "0.3.0";
              sha256 =
                "8f52e2306c87ee10d06334b85f91a3f2bb034e46051162d5911f58e8cbae7edf";
            };
            beamDeps  = [ cowboy_1_1_2 hackney_1_8_6 plug_1_3_5 ];

            meta = {
              description = ''A plug for reverse proxy server'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tommy351/plug-proxy";
            };
          } // packageOverrides)
      ) {};

    plug_proxy = plug_proxy_0_3_0;

    plug_rails_cookie_session_store_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          plug_1_3_5
        }:
          buildMix ({
            name = "plug_rails_cookie_session_store";
            version = "0.2.0";
            src = fetchHex {
              pkg = "plug_rails_cookie_session_store";
              version = "0.2.0";
              sha256 =
                "03cf7ce886603c220adca05ddc74e963da811d2a889198b950d0ad40d3c8ee99";
            };
            beamDeps  = [ cowboy_1_1_2 plug_1_3_5 ];

            meta = {
              description = ''Rails compatible Plug session store'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/cconstantin/plug_rails_cookie_session_store";
            };
          } // packageOverrides)
      ) {};

    plug_rails_cookie_session_store =
      plug_rails_cookie_session_store_0_2_0;

    plug_range_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "plug_range";
            version = "0.0.3";
            src = fetchHex {
              pkg = "plug_range";
              version = "0.0.3";
              sha256 =
                "a97dd4794547ed81dec942f6a51dab2ec6b8159d0c58ee1b1ec2ccdcf3ac55b0";
            };

            meta = {
              description = ''An elixir plug that serves HTTP range requests'';
              license = stdenv.lib.licenses.mit;
              homepage = "http://github.com/TheSquad/plug_range";
            };
          } // packageOverrides)
      ) {};

    plug_range = plug_range_0_0_3;

    plug_rate_limit_redis_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_0_4,
          plug_1_3_5,
          redix_0_6_1
        }:
          buildMix ({
            name = "plug_rate_limit_redis";
            version = "0.1.0";
            src = fetchHex {
              pkg = "plug_rate_limit_redis";
              version = "0.1.0";
              sha256 =
                "47eddbdde1dcadc169261bdba9bb0f4882e364ee197376733c85408f8d447045";
            };
            beamDeps  = [ cowboy_1_0_4 plug_1_3_5 redix_0_6_1 ];

            meta = {
              description = ''An Elixir plug rate limiting with redis.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/shufo/plug_rate_limit_redis";
            };
          } // packageOverrides)
      ) {};

    plug_rate_limit_redis = plug_rate_limit_redis_0_1_0;

    plug_recaptcha_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          plug_1_3_5,
          poison_3_1_0
        }:
          buildMix ({
            name = "plug_recaptcha";
            version = "0.2.0";
            src = fetchHex {
              pkg = "plug_recaptcha";
              version = "0.2.0";
              sha256 =
                "49cb641fc3b7e8325cf5652a35f817a34f89a4896a731a63994abaad77e222f0";
            };
            beamDeps  = [ httpoison_0_11_2 plug_1_3_5 poison_3_1_0 ];

            meta = {
              description = ''Plug module for Recaptcha needs Edit'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/alicanerdogan/plug_recaptcha";
            };
          } // packageOverrides)
      ) {};

    plug_recaptcha = plug_recaptcha_0_2_0;

    plug_redirect_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, plug_1_3_5 }:
          buildMix ({
            name = "plug_redirect";
            version = "0.1.2";
            src = fetchHex {
              pkg = "plug_redirect";
              version = "0.1.2";
              sha256 =
                "f5fb2653ed39cf843bcc3cb13ba2bf547b1f66ef7c24f963551acd0b8e1c4705";
            };
            beamDeps  = [ plug_1_3_5 ];

            meta = {
              description = ''A plug builder for redirecting requests.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lpil/plug-redirect";
            };
          } // packageOverrides)
      ) {};

    plug_redirect = plug_redirect_0_1_2;

    plug_redirect_https_0_0_7 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, plug_1_3_5 }:
          buildMix ({
            name = "plug_redirect_https";
            version = "0.0.7";
            src = fetchHex {
              pkg = "plug_redirect_https";
              version = "0.0.7";
              sha256 =
                "d77caac027dac7165084ef77c4e09c8ab94dc05d773baa8f6afbcd60b6de9543";
            };
            beamDeps  = [ plug_1_3_5 ];

            meta = {
              description = ''Plug to redirect http requests to https requests
                            behind a reverse proxy'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/stocks29/plug_redirect_https.git";
            };
          } // packageOverrides)
      ) {};

    plug_redirect_https = plug_redirect_https_0_0_7;

    plug_require_header_0_8_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          plug_1_3_5,
          poison_3_1_0
        }:
          buildMix ({
            name = "plug_require_header";
            version = "0.8.1";
            src = fetchHex {
              pkg = "plug_require_header";
              version = "0.8.1";
              sha256 =
                "f5429e7a561496c7f76cab5a6bae3898f5ff1f5f246b951122e440593f49dcf9";
            };
            beamDeps  = [ plug_1_3_5 poison_3_1_0 ];

            meta = {
              description = ''An Elixir Plug for requiring and extracting a
                            given header.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/DevL/plug_require_header";
            };
          } // packageOverrides)
      ) {};

    plug_require_header = plug_require_header_0_8_1;

    plug_response_header_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, plug_1_3_5 }:
          buildMix ({
            name = "plug_response_header";
            version = "0.2.1";
            src = fetchHex {
              pkg = "plug_response_header";
              version = "0.2.1";
              sha256 =
                "82fd11fc70d925ed5a608ac13a9f604a80e24827f6603999d6a0f3f123862048";
            };
            beamDeps  = [ plug_1_3_5 ];

            meta = {
              description = ''This plug allows manipulation of HTTP response
                            headers'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/c-rack/plug_response_header";
            };
          } // packageOverrides)
      ) {};

    plug_response_header = plug_response_header_0_2_1;

    plug_rest_0_12_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          plug_1_3_5
        }:
          buildMix ({
            name = "plug_rest";
            version = "0.12.0";
            src = fetchHex {
              pkg = "plug_rest";
              version = "0.12.0";
              sha256 =
                "0da1a447399f13a247f5e7ff321354eaef6b3e6926f4411c1b476f918464b71c";
            };
            beamDeps  = [ cowboy_1_1_2 plug_1_3_5 ];

            meta = {
              description = ''REST behaviour and Plug router for hypermedia web
                            applications'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/christopheradams/plug_rest";
            };
          } // packageOverrides)
      ) {};

    plug_rest = plug_rest_0_12_0;

    plug_ribbon_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, plug_1_3_5 }:
          buildMix ({
            name = "plug_ribbon";
            version = "0.2.1";
            src = fetchHex {
              pkg = "plug_ribbon";
              version = "0.2.1";
              sha256 =
                "34fcbffb6fc3adde6bb167506934ab19787d2fff82b6bf93918e0000159bfe9d";
            };
            beamDeps  = [ plug_1_3_5 ];

            meta = {
              description = ''Injects a ribbon to your web application
                            depending on the environment'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://git.io/plug_ribbon";
            };
          } // packageOverrides)
      ) {};

    plug_ribbon = plug_ribbon_0_2_1;

    plug_robots_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, plug_1_3_5 }:
          buildMix ({
            name = "plug_robots";
            version = "0.1.0";
            src = fetchHex {
              pkg = "plug_robots";
              version = "0.1.0";
              sha256 =
                "8fc7c4c7af995b4e89ce5480e73ff63fddcbb181c90230e4de42696b08f045f6";
            };
            beamDeps  = [ plug_1_3_5 ];

            meta = {
              description = ''An Elixir plug serving robots.txt.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/shufo/plug_robots";
            };
          } // packageOverrides)
      ) {};

    plug_robots = plug_robots_0_1_0;

    plug_runtime_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, plug_1_3_5 }:
          buildMix ({
            name = "plug_runtime";
            version = "1.0.0";
            src = fetchHex {
              pkg = "plug_runtime";
              version = "1.0.0";
              sha256 =
                "58e213a40fe339771ab93520da56c2108488cfd9e99c7e92def367567ce225a7";
            };
            beamDeps  = [ plug_1_3_5 ];

            meta = {
              longDescription = ''A simple Plug to measure the runtime of a
                                request. Results will be in the X-Runtime
                                header.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/mje113/plug_runtime";
            };
          } // packageOverrides)
      ) {};

    plug_runtime = plug_runtime_1_0_0;

    plug_secex_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, plug_1_3_5 }:
          buildMix ({
            name = "plug_secex";
            version = "0.1.2";
            src = fetchHex {
              pkg = "plug_secex";
              version = "0.1.2";
              sha256 =
                "05e500ee88409fc153f5ae253803d5a35ac8d74ae799730e7d1d7652a1501abc";
            };
            beamDeps  = [ plug_1_3_5 ];

            meta = {
              description = ''A module to insert sensible security headers'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/techgaun/plug_secex";
            };
          } // packageOverrides)
      ) {};

    plug_secex = plug_secex_0_1_2;

    plug_secure_headers_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, plug_1_3_5 }:
          buildMix ({
            name = "plug_secure_headers";
            version = "0.0.1";
            src = fetchHex {
              pkg = "plug_secure_headers";
              version = "0.0.1";
              sha256 =
                "727c5b7216aaa4bec2e0f88ed72199082820341602fad49cfc4c74477f55a905";
            };
            beamDeps  = [ plug_1_3_5 ];

            meta = {
              description = ''HTTP security headers with validatation for
                            Phoenix/Plug'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/anotherhale/plug_secure_headers";
            };
          } // packageOverrides)
      ) {};

    plug_secure_headers = plug_secure_headers_0_0_1;

    plug_session_memcached_0_3_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_0_4,
          earmark_1_2_2,
          ex_doc_0_16_1,
          plug_1_3_5
        }:
          buildMix ({
            name = "plug_session_memcached";
            version = "0.3.3";
            src = fetchHex {
              pkg = "plug_session_memcached";
              version = "0.3.3";
              sha256 =
                "f9cd5de250dbab0180166c873a50d297036d72f7cbac1a076972444c41f0b4c3";
            };
            beamDeps  = [ cowboy_1_0_4 earmark_1_2_2 ex_doc_0_16_1 plug_1_3_5
                      ];

            meta = {
              description = ''A memcached session store for use with
                            Plug.Session'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/gutschilla/plug-session-memcached";
            };
          } // packageOverrides)
      ) {};

    plug_session_memcached = plug_session_memcached_0_3_3;

    plug_session_redis_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          poolboy_1_5_1,
          redo_2_0_1
        }:
          buildMix ({
            name = "plug_session_redis";
            version = "0.1.0";
            src = fetchHex {
              pkg = "plug_session_redis";
              version = "0.1.0";
              sha256 =
                "8a101a1e36cb9212153191e44963f052b7478b0bfaff5a85e331afe0ae56dbeb";
            };
            beamDeps  = [ poolboy_1_5_1 redo_2_0_1 ];

            meta = {
              description = ''The Redis Plug.Session adapter for the Phoenix
                            framework.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/aposto/plug_session_redis";
            };
          } // packageOverrides)
      ) {};

    plug_session_redis = plug_session_redis_0_1_0;

    plug_sigaws_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          plug_1_3_5,
          sigaws_0_6_0
        }:
          buildMix ({
            name = "plug_sigaws";
            version = "0.1.1";
            src = fetchHex {
              pkg = "plug_sigaws";
              version = "0.1.1";
              sha256 =
                "d88edf00dec88ca156ff64dbe61ebc4bf61e9add4204160be91ba35ac21faba5";
            };
            beamDeps  = [ plug_1_3_5 sigaws_0_6_0 ];

            meta = {
              description = ''Elixir Plug for authenticating HTTP requests
                            using AWS Signature V4.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/handnot2/plug_sigaws";
            };
          } // packageOverrides)
      ) {};

    plug_sigaws = plug_sigaws_0_1_1;

    plug_static_index_html_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, plug_1_3_5 }:
          buildMix ({
            name = "plug_static_index_html";
            version = "0.1.2";
            src = fetchHex {
              pkg = "plug_static_index_html";
              version = "0.1.2";
              sha256 =
                "46d1a4cca3340d0e1ee575dcdb5594415ccdf7a20c93cb215e50d4c1da5054dc";
            };
            beamDeps  = [ plug_1_3_5 ];

            meta = {
              longDescription = ''Serves `index.html` pages for requests to
                                paths without a filename in Phoenix / Plug
                                applications.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mbuhot/plug_static_index_html";
            };
          } // packageOverrides)
      ) {};

    plug_static_index_html = plug_static_index_html_0_1_2;

    plug_static_ls_0_6_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, plug_1_3_5 }:
          buildMix ({
            name = "plug_static_ls";
            version = "0.6.1";
            src = fetchHex {
              pkg = "plug_static_ls";
              version = "0.6.1";
              sha256 =
                "953c58ab65b964448d2f41ba86b1a35dbec1af0315b030a4c73d4f26242e35c1";
            };
            beamDeps  = [ plug_1_3_5 ];

            meta = {
              description = ''Directory Index for Plug/Phoenix Static Assets'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/jj1bdx/plug_static_ls";
            };
          } // packageOverrides)
      ) {};

    plug_static_ls = plug_static_ls_0_6_1;

    plug_statsd_0_4_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ex_statsd_0_5_3,
          plug_1_3_5
        }:
          buildMix ({
            name = "plug_statsd";
            version = "0.4.1";
            src = fetchHex {
              pkg = "plug_statsd";
              version = "0.4.1";
              sha256 =
                "af3158b9d43101e39e22472fcea98180911298c92a735d5ff14dce309e5e30f2";
            };
            beamDeps  = [ ex_statsd_0_5_3 plug_1_3_5 ];

            meta = {
              description = ''A (Phoenix) plug for sending request counts and
                            response times to statsd'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jeffweiss/plug_statsd";
            };
          } // packageOverrides)
      ) {};

    plug_statsd = plug_statsd_0_4_1;

    plug_test_helpers_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_0_4,
          plug_1_1_7
        }:
          buildMix ({
            name = "plug_test_helpers";
            version = "0.1.0";
            src = fetchHex {
              pkg = "plug_test_helpers";
              version = "0.1.0";
              sha256 =
                "f542d679a33d42147612164ade572fa973344b4550ffcbbb0ef540492c9e97fe";
            };
            beamDeps  = [ cowboy_1_0_4 plug_1_1_7 ];

            meta = {
              description = ''Helpers to test your Plugs with ExUnit'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/xavier/plug_test_helpers";
            };
          } // packageOverrides)
      ) {};

    plug_test_helpers = plug_test_helpers_0_1_0;

    plug_url_redirector_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          plug_1_3_5
        }:
          buildMix ({
            name = "plug_url_redirector";
            version = "0.1.0";
            src = fetchHex {
              pkg = "plug_url_redirector";
              version = "0.1.0";
              sha256 =
                "87b7ef0fbb7f4c6ea5711bdae6cbdd74441126d4935fb53e8d638f7cd35f76b8";
            };
            beamDeps  = [ cowboy_1_1_2 plug_1_3_5 ];

            meta = {
              description = ''URL redirector for Plug/Phoenix'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jj1bdx/plug_url_redirector";
            };
          } // packageOverrides)
      ) {};

    plug_url_redirector = plug_url_redirector_0_1_0;

    plug_utm_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_0_4,
          plug_1_3_5
        }:
          buildMix ({
            name = "plug_utm";
            version = "0.0.2";
            src = fetchHex {
              pkg = "plug_utm";
              version = "0.0.2";
              sha256 =
                "d473d6b360f5a9189cee2a0f95c06ffb1cb9495a9bb8c729a631c2fa33ed5fc9";
            };
            beamDeps  = [ cowboy_1_0_4 plug_1_3_5 ];

            meta = {
              description = ''UTM tracking parameters to cookies'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/honeypotio/plug_utm";
            };
          } // packageOverrides)
      ) {};

    plug_utm = plug_utm_0_0_2;

    plug_wait1_0_2_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          plug_1_2_5,
          poison_2_2_0
        }:
          buildMix ({
            name = "plug_wait1";
            version = "0.2.2";
            src = fetchHex {
              pkg = "plug_wait1";
              version = "0.2.2";
              sha256 =
                "9adfc8f4e27104dc3e04dc2bcfa4465d2cb95541e6c2d051cfd6626da98e3a65";
            };
            beamDeps  = [ cowboy_1_1_2 plug_1_2_5 poison_2_2_0 ];

            meta = {
              description = ''Plug adapter for the wait1 protocol'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/wait1/plug_wait1";
            };
          } // packageOverrides)
      ) {};

    plug_wait1 = plug_wait1_0_2_2;

    plug_x_forwarded_for_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "plug_x_forwarded_for";
            version = "0.1.0";
            src = fetchHex {
              pkg = "plug_x_forwarded_for";
              version = "0.1.0";
              sha256 =
                "7a12dff0f850855ae85d70ed0e71aff5ec55dad6c52fc46d6ba21119e6183b33";
            };

            meta = {
              description = ''x-forwarded-for plug middleware'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/camshaft/plug_x_forwarded_for";
            };
          } // packageOverrides)
      ) {};

    plug_x_forwarded_for = plug_x_forwarded_for_0_1_0;

    plug_x_forwarded_proto_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, plug_1_3_5 }:
          buildMix ({
            name = "plug_x_forwarded_proto";
            version = "0.1.0";
            src = fetchHex {
              pkg = "plug_x_forwarded_proto";
              version = "0.1.0";
              sha256 =
                "b8f384d8eb6505b187e3c5993df41188eefe48ec446fe372b7db3efdff0a6aa5";
            };
            beamDeps  = [ plug_1_3_5 ];

            meta = {
              description = ''x-forwarded-proto plug middleware'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/exstruct/mazurka_plug";
            };
          } // packageOverrides)
      ) {};

    plug_x_forwarded_proto = plug_x_forwarded_proto_0_1_0;

    plugin_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "plugin";
            version = "0.1.0";
            src = fetchHex {
              pkg = "plugin";
              version = "0.1.0";
              sha256 =
                "f596a2e9e14081884a841d1805e024d435c6a27e5e38b9c64214017659560fad";
            };

            meta = {
              longDescription = ''Like Plug, only without web-specific logic
                                and without a typed Conn-datastructure'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ruby2elixir/plugin";
            };
          } // packageOverrides)
      ) {};

    plugin = plugin_0_1_0;

    plugs_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          plug_1_3_5
        }:
          buildMix ({
            name = "plugs";
            version = "0.1.1";
            src = fetchHex {
              pkg = "plugs";
              version = "0.1.1";
              sha256 =
                "d11f4122bcd3fd83ac1b442ebf908ebb1f1ad535fa305446c90cf2ce51222c07";
            };
            beamDeps  = [ cowboy_1_1_2 plug_1_3_5 ];

            meta = {
              description = ''A collection of Plug middleware for web
                            applications'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sugar-framework/plugs";
            };
          } // packageOverrides)
      ) {};

    plugs = plugs_0_1_1;

    plugsnag_1_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          bugsnag_1_5_0,
          plug_1_3_5
        }:
          buildMix ({
            name = "plugsnag";
            version = "1.3.0";
            src = fetchHex {
              pkg = "plugsnag";
              version = "1.3.0";
              sha256 =
                "526fdc07f9524980c86f14bfbb2090a36a8dcd85c51100f3fd71e48a6f68ce8f";
            };
            beamDeps  = [ bugsnag_1_5_0 plug_1_3_5 ];

            meta = {
              description = ''Bugsnag reporter for Elixir`s Plug'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jarednorman/plugsnag";
            };
          } // packageOverrides)
      ) {};

    plugsnag = plugsnag_1_3_0;

    plumber_girl_0_9_7 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "plumber_girl";
            version = "0.9.7";
            src = fetchHex {
              pkg = "plumber_girl";
              version = "0.9.7";
              sha256 =
                "c8101604ff31277d67851e3e19c541eb78e393e47c295f9fce8217b4ab1e524e";
            };

            meta = {
              description = ''PlumberGirl takes care of your Elixir piping
                            issues!'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ruby2elixir/plumber_girl";
            };
          } // packageOverrides)
      ) {};

    plumber_girl = plumber_girl_0_9_7;

    plymio_ast_0_2_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, plymio_name_0_1_1
        }:
          buildMix ({
            name = "plymio_ast";
            version = "0.2.0";
            src = fetchHex {
              pkg = "plymio_ast";
              version = "0.2.0";
              sha256 =
                "bcbc8ceff0515af283f4ed96f9f8169e50cc614a8838c1d57daf78183ee8676c";
            };
            beamDeps  = [ plymio_name_0_1_1 ];

            meta = {
              description = ''plymio_ast: Utility Functions for ASTs (Quoted
                            Forms)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ianrumford/plymio_ast";
            };
          } // packageOverrides)
      ) {};

    plymio_ast = plymio_ast_0_2_0;

    plymio_enum_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "plymio_enum";
            version = "0.1.0";
            src = fetchHex {
              pkg = "plymio_enum";
              version = "0.1.0";
              sha256 =
                "aa5ae0d54045817ef3c1d0951e1dac6efbaf3c747ba702b15d50211793eabd98";
            };

            meta = {
              description = ''plymio_enum: Utility Functions for Enumerables'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ianrumford/plymio_enum";
            };
          } // packageOverrides)
      ) {};

    plymio_enum = plymio_enum_0_1_0;

    plymio_list_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "plymio_list";
            version = "0.1.0";
            src = fetchHex {
              pkg = "plymio_list";
              version = "0.1.0";
              sha256 =
                "30156df0a3ab43176828041000f8e4d313f71481742f43a28df48cecbe64c443";
            };

            meta = {
              longDescription = ''plymio_list: Utility Functions for Lists
                                plymio is a family of utility function
                                packages'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ianrumford/plymio_list";
            };
          } // packageOverrides)
      ) {};

    plymio_list = plymio_list_0_1_0;

    plymio_name_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "plymio_name";
            version = "0.1.1";
            src = fetchHex {
              pkg = "plymio_name";
              version = "0.1.1";
              sha256 =
                "edd31acbc0fabf6c92056365f85e7446bf58dbec064522d45a2c90b65323ba7d";
            };

            meta = {
              description = ''plymio_name: Utility Functions for Names'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ianrumford/plymio_name";
            };
          } // packageOverrides)
      ) {};

    plymio_name = plymio_name_0_1_1;

    pmbag_1_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "pmbag";
            version = "1.0.0";
            src = fetchHex {
              pkg = "pmbag";
              version = "1.0.0";
              sha256 =
                "9f12262ac93faf29c00e3da5f5836086542fbcfa0539bf733ab3e5cca0d34872";
            };

            meta = {
              description = ''Erlang Private Mail Bag.'';
              license = stdenv.lib.licenses.mpl20;
              homepage = "https://github.com/potatosalad/pmbag";
            };
          } // packageOverrides)
      ) {};

    pmbag = pmbag_1_0_0;

    png_0_1_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "png";
            version = "0.1.1";
            src = fetchHex {
              pkg = "png";
              version = "0.1.1";
              sha256 =
                "f8d4a17c118dcc16bb18d0fda6e26947001f9312bc6c061d2236b424fc3dd9ea";
            };

            meta = {
              longDescription = ''A pure Erlang library for creating PNG
                                images. It can currently create 8 and 16 bit
                                RGB, RGB with alpha, indexed, grayscale and
                                grayscale with alpha images.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/yuce/png";
            };
          } // packageOverrides)
      ) {};

    png = png_0_1_1;

    pobox_1_0_2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "pobox";
            version = "1.0.2";
            src = fetchHex {
              pkg = "pobox";
              version = "1.0.2";
              sha256 =
                "372090633c2565cd645acf2d1e2354c0791d5a5dc2f74885795b8807d402fe88";
            };

            meta = {
              description = ''External buffer processes to protect against
                            mailbox overflow'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ferd/pobox/";
            };
          } // packageOverrides)
      ) {};

    pobox = pobox_1_0_2;

    pocketeer_0_1_5 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_3_0_2,
          poison_1_0_2
        }:
          buildMix ({
            name = "pocketeer";
            version = "0.1.5";
            src = fetchHex {
              pkg = "pocketeer";
              version = "0.1.5";
              sha256 =
                "d624790ad658b9da7a19aa58a5fe05cd17e8651cb12a80272c7802e0439dd2dd";
            };
            beamDeps  = [ httpotion_3_0_2 poison_1_0_2 ];

            meta = {
              description = ''An Elixir client for the Pocket API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://www.github.com/justahero/pocketeer";
            };
          } // packageOverrides)
      ) {};

    pocketeer = pocketeer_0_1_5;

    pocketex_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_1_3_1
        }:
          buildMix ({
            name = "pocketex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "pocketex";
              version = "0.1.0";
              sha256 =
                "b832df8e3f3102b69892cc5cfab4418de876a6ecc5780805458b9946aa407cbf";
            };
            beamDeps  = [ httpoison_0_11_2 poison_1_3_1 ];

            meta = {
              description = ''Pocketex is an Elixir client for the Pocket read
                            later service (getpocket.com) '';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/essenciary/pocketex";
            };
          } // packageOverrides)
      ) {};

    pocketex = pocketex_0_1_0;

    poe_api_0_2_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          concerto_0_1_5,
          concerto_plug_0_1_3,
          cowboy_1_0_4,
          fugue_0_1_6,
          mazurka_1_0_6,
          mazurka_plug_0_1_4,
          plug_1_2_5,
          plug_wait1_0_2_2,
          plug_x_forwarded_proto_0_1_0,
          poison_2_2_0
        }:
          buildMix ({
            name = "poe_api";
            version = "0.2.1";
            src = fetchHex {
              pkg = "poe_api";
              version = "0.2.1";
              sha256 =
                "16fbda65e4500be9415f2298f434711a9c0972aba78c6f33ce53c62209e875be";
            };
            beamDeps  = [
                          concerto_0_1_5
                          concerto_plug_0_1_3
                          cowboy_1_0_4
                          fugue_0_1_6
                          mazurka_1_0_6
                          mazurka_plug_0_1_4
                          plug_1_2_5
                          plug_wait1_0_2_2
                          plug_x_forwarded_proto_0_1_0
                          poison_2_2_0
                        ];

            meta = {
              longDescription = ''high-productivity collection of tools and
                                practices for rapidly writing production-ready
                                applications'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/poegroup/poe-api";
            };
          } // packageOverrides)
      ) {};

    poe_api = poe_api_0_2_1;

    poison_1_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "poison";
            version = "1.0.2";
            src = fetchHex {
              pkg = "poison";
              version = "1.0.2";
              sha256 =
                "a6cd30c541c558a69935e18f353c988f5311780a22793e071907d76301669e57";
            };

            meta = {
              description = ''An incredibly fast, pure Elixir JSON library'';
              license = stdenv.lib.licenses.cc0;
              homepage = "https://github.com/devinus/poison";
            };
          } // packageOverrides)
      ) {};

    poison_1_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "poison";
            version = "1.0.3";
            src = fetchHex {
              pkg = "poison";
              version = "1.0.3";
              sha256 =
                "632b9f5c4c2e56987f123b9f35e52b356c2de28ce7692d66becf12df10cc1012";
            };

            meta = {
              description = ''An incredibly fast, pure Elixir JSON library'';
              license = stdenv.lib.licenses.cc0;
              homepage = "https://github.com/devinus/poison";
            };
          } // packageOverrides)
      ) {};

    poison_1_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "poison";
            version = "1.1.1";
            src = fetchHex {
              pkg = "poison";
              version = "1.1.1";
              sha256 =
                "57e77cdafe34769dcc114c6c249847b66304e5489891306b9762e3211520d767";
            };

            meta = {
              description = ''An incredibly fast, pure Elixir JSON library'';
              license = stdenv.lib.licenses.cc0;
              homepage = "https://github.com/devinus/poison";
            };
          } // packageOverrides)
      ) {};

    poison_1_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "poison";
            version = "1.2.1";
            src = fetchHex {
              pkg = "poison";
              version = "1.2.1";
              sha256 =
                "7be9f3b2688efdcc689062ccd21e340ee5fd3ef9dcd142136034beb5ed1c2e23";
            };

            meta = {
              description = ''An incredibly fast, pure Elixir JSON library'';
              license = stdenv.lib.licenses.cc0;
              homepage = "https://github.com/devinus/poison";
            };
          } // packageOverrides)
      ) {};

    poison_1_3_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "poison";
            version = "1.3.1";
            src = fetchHex {
              pkg = "poison";
              version = "1.3.1";
              sha256 =
                "fbd78dd3e5abbadc17ddd89905002f6d20a03046f7555a6098d28a9f14feaf58";
            };

            meta = {
              description = ''An incredibly fast, pure Elixir JSON library'';
              license = stdenv.lib.licenses.cc0;
              homepage = "https://github.com/devinus/poison";
            };
          } // packageOverrides)
      ) {};

    poison_1_4_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "poison";
            version = "1.4.0";
            src = fetchHex {
              pkg = "poison";
              version = "1.4.0";
              sha256 =
                "b2715aaeb9f549f4e30739d43993e3c1b1053a4ed69d50c660621bdd1eb96606";
            };

            meta = {
              description = ''An incredibly fast, pure Elixir JSON library'';
              license = stdenv.lib.licenses.cc0;
              homepage = "https://github.com/devinus/poison";
            };
          } // packageOverrides)
      ) {};

    poison_1_5_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "poison";
            version = "1.5.0";
            src = fetchHex {
              pkg = "poison";
              version = "1.5.0";
              sha256 =
                "a31ffdaf77494ff12d6c2c9cb03235d4373596d2faf62ee5b99c1ae479618400";
            };

            meta = {
              description = ''An incredibly fast, pure Elixir JSON library'';
              license = stdenv.lib.licenses.cc0;
              homepage = "https://github.com/devinus/poison";
            };
          } // packageOverrides)
      ) {};

    poison_1_5_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "poison";
            version = "1.5.2";
            src = fetchHex {
              pkg = "poison";
              version = "1.5.2";
              sha256 =
                "4afc59dcadf71be7edc8b934b39f554ec7b31e2b1b1a4767383a663f86958ce3";
            };

            meta = {
              description = ''An incredibly fast, pure Elixir JSON library'';
              license = stdenv.lib.licenses.cc0;
              homepage = "https://github.com/devinus/poison";
            };
          } // packageOverrides)
      ) {};

    poison_2_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "poison";
            version = "2.0.1";
            src = fetchHex {
              pkg = "poison";
              version = "2.0.1";
              sha256 =
                "7f34906a0839f3b49b9b7647461c5144787611f599e8d743214280761699df2b";
            };

            meta = {
              description = ''An incredibly fast, pure Elixir JSON library'';
              license = stdenv.lib.licenses.cc0;
              homepage = "https://github.com/devinus/poison";
            };
          } // packageOverrides)
      ) {};

    poison_2_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "poison";
            version = "2.1.0";
            src = fetchHex {
              pkg = "poison";
              version = "2.1.0";
              sha256 =
                "002caaf939b97c84533ef0f621d3ed414ed703fcd03c91ec0dd62043df102c63";
            };

            meta = {
              description = ''An incredibly fast, pure Elixir JSON library'';
              license = stdenv.lib.licenses.cc0;
              homepage = "https://github.com/devinus/poison";
            };
          } // packageOverrides)
      ) {};

    poison_2_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "poison";
            version = "2.2.0";
            src = fetchHex {
              pkg = "poison";
              version = "2.2.0";
              sha256 =
                "519bc209e4433961284174c497c8524c001e285b79bdf80212b47a1f898084cc";
            };

            meta = {
              description = ''An incredibly fast, pure Elixir JSON library'';
              license = stdenv.lib.licenses.cc0;
              homepage = "https://github.com/devinus/poison";
            };
          } // packageOverrides)
      ) {};

    poison_3_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "poison";
            version = "3.0.0";
            src = fetchHex {
              pkg = "poison";
              version = "3.0.0";
              sha256 =
                "813db7909e9aa20b2f4d42692798beef7a430691b424d0e6b08f7cb11727c721";
            };

            meta = {
              description = ''An incredibly fast, pure Elixir JSON library'';
              license = stdenv.lib.licenses.cc0;
              homepage = "https://github.com/devinus/poison";
            };
          } // packageOverrides)
      ) {};

    poison_3_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "poison";
            version = "3.1.0";
            src = fetchHex {
              pkg = "poison";
              version = "3.1.0";
              sha256 =
                "fec8660eb7733ee4117b85f55799fd3833eb769a6df71ccf8903e8dc5447cfce";
            };

            meta = {
              description = ''An incredibly fast, pure Elixir JSON library'';
              license = stdenv.lib.licenses.cc0;
              homepage = "https://github.com/devinus/poison";
            };
          } // packageOverrides)
      ) {};

    poison = poison_3_1_0;

    pokemon_1_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exjsx_3_2_1,
          httpoison_0_9_2,
          proper_case_1_0_0
        }:
          buildMix ({
            name = "pokemon";
            version = "1.0.2";
            src = fetchHex {
              pkg = "pokemon";
              version = "1.0.2";
              sha256 =
                "4fe1f08590f714a905d9ef13b0b253e76f849d3fa77ef2e5f7f1ce485af5285c";
            };
            beamDeps  = [ exjsx_3_2_1 httpoison_0_9_2 proper_case_1_0_0 ];

            meta = {
              description = ''API wrapper around the Pokémon TCG API of
                            pokemontcg.io'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://pokemontcg.io/";
            };
          } // packageOverrides)
      ) {};

    pokemon = pokemon_1_0_2;

    pokemon_gif_1_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, credo_0_8_0_rc7 }:
          buildMix ({
            name = "pokemon_gif";
            version = "1.0.2";
            src = fetchHex {
              pkg = "pokemon_gif";
              version = "1.0.2";
              sha256 =
                "200f1900c73072868ea57eae2f1f38ea42340e9e7f7d2aa68e5b59f18be7846a";
            };
            beamDeps  = [ credo_0_8_0_rc7 ];

            meta = {
              description = ''Elixir package to get Pokemon`s gif out of an ID
                            or name.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/aguxez/pokemon_gif";
            };
          } // packageOverrides)
      ) {};

    pokemon_gif = pokemon_gif_1_0_2;

    pokemon_tcg_sdk_1_0_11 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exjsx_3_2_1,
          httpoison_0_9_2,
          proper_case_1_0_0
        }:
          buildMix ({
            name = "pokemon_tcg_sdk";
            version = "1.0.11";
            src = fetchHex {
              pkg = "pokemon_tcg_sdk";
              version = "1.0.11";
              sha256 =
                "9ee8fb89f7df86980db12dd1c09ffe6ed3da17fae822d89cca4c64aaa99d3d87";
            };
            beamDeps  = [ exjsx_3_2_1 httpoison_0_9_2 proper_case_1_0_0 ];

            meta = {
              description = ''WARNING: DO NOT USE THIS PACKAGE. USE :pokemon
                            INSTEAD.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://pokemontcg.io/";
            };
          } // packageOverrides)
      ) {};

    pokemon_tcg_sdk = pokemon_tcg_sdk_1_0_11;

    poker_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "poker";
            version = "0.0.2";
            src = fetchHex {
              pkg = "poker";
              version = "0.0.2";
              sha256 =
                "9599ef62b0a2e1b15ff2697cb1603dd7be00911d8a613e1d01cfdf8c8b5d63b3";
            };

            meta = {
              description = ''An Elixir library to work with Poker hands.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/wojtekmach/poker_elixir";
            };
          } // packageOverrides)
      ) {};

    poker = poker_0_0_2;

    poker_validator_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "poker_validator";
            version = "0.1.0";
            src = fetchHex {
              pkg = "poker_validator";
              version = "0.1.0";
              sha256 =
                "aa0f6887ae2763b017a9187c0a7de825ac4574709bd9f7190b3243b2ae7a36b0";
            };

            meta = {
              longDescription = ''Elixir validator for Texas Holdem hands, with
                                a given list of cards it returns the best
                                possible hand with its score'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dimun/poker_validator";
            };
          } // packageOverrides)
      ) {};

    poker_validator = poker_validator_0_1_0;

    pokerap_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "pokerap";
            version = "0.1.1";
            src = fetchHex {
              pkg = "pokerap";
              version = "0.1.1";
              sha256 =
                "e07888c5e9b545adac2fb92b3c17f487af244ece42e6d5b34a5f01f4d28c9ad2";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''Wrapper library for the Pokeapi
                            [http://pokeapi.co](http://pokeapi.co/)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lastcontinue/pokerap";
            };
          } // packageOverrides)
      ) {};

    pokerap = pokerap_0_1_1;

    policy_1_0_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, ecto_2_1_4, plug_1_3_5
        }:
          buildMix ({
            name = "policy";
            version = "1.0.0";
            src = fetchHex {
              pkg = "policy";
              version = "1.0.0";
              sha256 =
                "aaaa3ec3d70f6ebb9ae4e89c9553b7f627544d8f33e9cc3bbdbbdf1917193b98";
            };
            beamDeps  = [ ecto_2_1_4 plug_1_3_5 ];

            meta = {
              longDescription = ''Policy is an authorization management
                                framework for Phoenix. It aims to be minimally
                                invasive and secure by default.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/system76/policy";
            };
          } // packageOverrides)
      ) {};

    policy = policy_1_0_0;

    policy_wonk_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, plug_1_3_5 }:
          buildMix ({
            name = "policy_wonk";
            version = "0.2.0";
            src = fetchHex {
              pkg = "policy_wonk";
              version = "0.2.0";
              sha256 =
                "842729db669dc31091a82290206cffaa5540a806f6e5e327bdb3144b081b1bcc";
            };
            beamDeps  = [ plug_1_3_5 ];

            meta = {
              longDescription = ''Plug based authorization and resource
                                loading. Aimed at Phoenix, but depends only on
                                Plug. MIT license Updated to compile clean with
                                Elixir 1.4'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/boydm/policy_wonk";
            };
          } // packageOverrides)
      ) {};

    policy_wonk = policy_wonk_0_2_0;

    pollin_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          poison_3_1_0,
          secure_random_0_5_1
        }:
          buildMix ({
            name = "pollin";
            version = "0.2.0";
            src = fetchHex {
              pkg = "pollin";
              version = "0.2.0";
              sha256 =
                "d041a7e2233b8e1ea9f64fa4310528386729f0599170dbad9633a493585783f8";
            };
            beamDeps  = [ poison_3_1_0 secure_random_0_5_1 ];

            meta = {
              description = ''Simple queue implementation for webhooks and
                            event sources.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mustafaturan/pollin";
            };
          } // packageOverrides)
      ) {};

    pollin = pollin_0_2_0;

    pollution_0_9_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pollution";
            version = "0.9.1";
            src = fetchHex {
              pkg = "pollution";
              version = "0.9.1";
              sha256 =
                "6083156d68312e09ac1f71c281859c737cb86839ba78c46de1c27066f0720bf6";
            };

            meta = {
              longDescription = ''Construct streams of values by specifying
                                composable generator functions. For example
                                list(tuple(like: {atom, string})) will generate
                                a random length keyword list with random keys
                                and values. Constraints can be applied at all
                                levels.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pragdave/pollution";
            };
          } // packageOverrides)
      ) {};

    pollution = pollution_0_9_1;

    poloniex_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exconstructor_1_1_0,
          httpoison_0_11_2,
          poison_2_2_0,
          vex_0_6_0
        }:
          buildMix ({
            name = "poloniex";
            version = "0.1.1";
            src = fetchHex {
              pkg = "poloniex";
              version = "0.1.1";
              sha256 =
                "d320f6846f4609033899f7e6b6b45a0f110cd303efa69199efa295cd60a8d605";
            };
            beamDeps  = [
                          exconstructor_1_1_0
                          httpoison_0_11_2
                          poison_2_2_0
                          vex_0_6_0
                        ];

            meta = {
              longDescription = ''WIP, not stable Elixir API wrapper for
                                poloniex.com. Provides access to market data
                                including trading pairs between ETH, BTC, DOGE,
                                LTC and others.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cyberpunk-ventures/poloniex_ex";
            };
          } // packageOverrides)
      ) {};

    poloniex = poloniex_0_1_1;

    poly1305_0_4_5 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          chacha20_0_3_6,
          equivalex_1_0_0
        }:
          buildMix ({
            name = "poly1305";
            version = "0.4.5";
            src = fetchHex {
              pkg = "poly1305";
              version = "0.4.5";
              sha256 =
                "2a24b02a57d56c2b459f1d6265391843a6f3591137db7400d32b7ea26b9e3ef1";
            };
            beamDeps  = [ chacha20_0_3_6 equivalex_1_0_0 ];

            meta = {
              description = ''Poly1305 message authentication'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mwmiller/poly1305_ex";
            };
          } // packageOverrides)
      ) {};

    poly1305_1_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          chacha20_1_0_0,
          equivalex_1_0_0
        }:
          buildMix ({
            name = "poly1305";
            version = "1.0.0";
            src = fetchHex {
              pkg = "poly1305";
              version = "1.0.0";
              sha256 =
                "2eb1125b8fe11e72d756b616caf9ca554f50c2abf9aa23a58c1c0548e34bc11d";
            };
            beamDeps  = [ chacha20_1_0_0 equivalex_1_0_0 ];

            meta = {
              description = ''Poly1305 message authentication'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mwmiller/poly1305_ex";
            };
          } // packageOverrides)
      ) {};

    poly1305 = poly1305_1_0_0;

    polyglot_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "polyglot";
            version = "0.0.1";
            src = fetchHex {
              pkg = "polyglot";
              version = "0.0.1";
              sha256 =
                "83aaf990f322ea5c314b469932e87db7175374b0e0b28d078defba60dca0fb78";
            };

            meta = {
              longDescription = ''Polyglot is a localization library for Elixir
                                that provides reusable formatting rules and
                                translations for a large number of languages.'';
              license = with stdenv.lib.licenses; [ mit free ];
              homepage = "https://github.com/padde/polyglot";
            };
          } // packageOverrides)
      ) {};

    polyglot = polyglot_0_0_1;

    polygot_0_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          gettext_0_13_1,
          phoenix_1_3_0_rc_2
        }:
          buildMix ({
            name = "polygot";
            version = "0.1.2";
            src = fetchHex {
              pkg = "polygot";
              version = "0.1.2";
              sha256 =
                "2775a4ddc18480cbc895bf16ec6c23960377481f00bc11dd598dbee5858880ca";
            };
            beamDeps  = [ gettext_0_13_1 phoenix_1_3_0_rc_2 ];

            meta = {
              description = ''A library to serve your Phoenix app in differnt
                            locales'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/boudra/polygot";
            };
          } // packageOverrides)
      ) {};

    polygot = polygot_0_1_2;

    polyline_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, vector_0_1_0 }:
          buildMix ({
            name = "polyline";
            version = "0.1.1";
            src = fetchHex {
              pkg = "polyline";
              version = "0.1.1";
              sha256 =
                "fc795e55d582f3b763a808e1cbed5e8e88fafd751c1fd0e52392b60764823589";
            };
            beamDeps  = [ vector_0_1_0 ];

            meta = {
              description = ''Encoding and decoding of Polylines'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pkinney/polyline_ex";
            };
          } // packageOverrides)
      ) {};

    polyline = polyline_0_1_1;

    polyvox_id3_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "polyvox_id3";
            version = "0.2.1";
            src = fetchHex {
              pkg = "polyvox_id3";
              version = "0.2.1";
              sha256 =
                "2bb3e3b9edde6630160857563c992f7e9ea56d11d263172c95161b4275f6b48c";
            };

            meta = {
              description = ''A podcast-centric ID3 library for parsing and
                            writing ID3 tags.'';
              license = stdenv.lib.licenses.gpl3;
              homepage = "https://github.com/polyvox/polyvox_id3";
            };
          } // packageOverrides)
      ) {};

    polyvox_id3 = polyvox_id3_0_2_1;

    poniverse_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, oauth2_0_9_1 }:
          buildMix ({
            name = "poniverse";
            version = "0.1.3";
            src = fetchHex {
              pkg = "poniverse";
              version = "0.1.3";
              sha256 =
                "f1f373bb4f1362c51017a20e5083f3af9a3caf94985dd0a585c7cc35f41951d9";
            };
            beamDeps  = [ oauth2_0_9_1 ];

            meta = {
              description = ''OAuth2 Strategy to authenticate with
                            Poniverse.net'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/Poniverse/elixir-poniverse";
            };
          } // packageOverrides)
      ) {};

    poniverse = poniverse_0_1_3;

    pool_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pool";
            version = "0.0.2";
            src = fetchHex {
              pkg = "pool";
              version = "0.0.2";
              sha256 =
                "7be2ade7f9c000393d474dd96751680d5cb567cd68d3ee02c4c8e465d3a4395a";
            };

            meta = {
              description = ''Socket acceptor pool Not ready for use at this
                            time. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/slogsdon/pool";
            };
          } // packageOverrides)
      ) {};

    pool = pool_0_0_2;

    pool_ring_0_1_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pool_ring";
            version = "0.1.5";
            src = fetchHex {
              pkg = "pool_ring";
              version = "0.1.5";
              sha256 =
                "a5d965379d8cb05e772e606951ba1b33c45b58a0809ba9f44eff453ea43068ce";
            };

            meta = {
              description = ''create a pool based on a hash ring'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/camshaft/pool_ring";
            };
          } // packageOverrides)
      ) {};

    pool_ring = pool_ring_0_1_5;

    pool_sup_0_3_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, croma_0_6_2 }:
          buildMix ({
            name = "pool_sup";
            version = "0.3.1";
            src = fetchHex {
              pkg = "pool_sup";
              version = "0.3.1";
              sha256 =
                "bd38c3307ebc6f09d39b45d33384060b0b2854cc3667f7ba27339b01575aa376";
            };
            beamDeps  = [ croma_0_6_2 ];

            meta = {
              description = ''A supervisor specialized to manage pool of
                            workers'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    pool_sup = pool_sup_0_3_1;

    poolboy_1_2_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "poolboy";
            version = "1.2.1";
            src = fetchHex {
              pkg = "poolboy";
              version = "1.2.1";
              sha256 =
                "5e134d817f04e00b17187c50e7a38362812b7053591479a62f0025c45d622369";
            };

            meta = {
              description = ''A hunky Erlang worker pool factory'';
              license = with stdenv.lib.licenses; [ unlicense asl20 ];
              homepage = "https://github.com/devinus/poolboy";
            };
          } // packageOverrides)
      ) {};

    poolboy_1_4_2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "poolboy";
            version = "1.4.2";
            src = fetchHex {
              pkg = "poolboy";
              version = "1.4.2";
              sha256 =
                "6133b67251080f32ffed4f71913cd2998fd6f02fa076677aadf7278b62853938";
            };

            meta = {
              description = ''A hunky Erlang worker pool factory'';
              license = with stdenv.lib.licenses; [ unlicense asl20 ];
              homepage = "https://github.com/devinus/poolboy";
            };
          } // packageOverrides)
      ) {};

    poolboy_1_5_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "poolboy";
            version = "1.5.1";
            src = fetchHex {
              pkg = "poolboy";
              version = "1.5.1";
              sha256 =
                "8f7168911120e13419e086e78d20e4d1a6776f1eee2411ac9f790af10813389f";
            };

            meta = {
              description = ''A hunky Erlang worker pool factory'';
              license = with stdenv.lib.licenses; [ unlicense asl20 ];
              homepage = "https://github.com/devinus/poolboy";
            };
          } // packageOverrides)
      ) {};

    poolboy = poolboy_1_5_1;

    pooler_1_4_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "pooler";
            version = "1.4.0";
            src = fetchHex {
              pkg = "pooler";
              version = "1.4.0";
              sha256 =
                "08ca384be64045b257a22a3569571c9ef33dafdac44212c7f0596f255e5a0d5c";
            };

            meta = {
              description = ''An OTP Process Pool Application'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/seth/pooler";
            };
          } // packageOverrides)
      ) {};

    pooler_1_5_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "pooler";
            version = "1.5.0";
            src = fetchHex {
              pkg = "pooler";
              version = "1.5.0";
              sha256 =
                "f493b4b947967fa4250dd1f96e86a5440ecab51da114d2c256cced58ad991908";
            };

            meta = {
              description = ''An OTP Process Pool Application'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/seth/pooler";
            };
          } // packageOverrides)
      ) {};

    pooler = pooler_1_5_0;

    poolgirl_1_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, doteki_1_0_5 }:
          buildMix ({
            name = "poolgirl";
            version = "1.1.2";
            src = fetchHex {
              pkg = "poolgirl";
              version = "1.1.2";
              sha256 =
                "94292f813cdfe469e14c1517e3158925df02e9c4cc9edc878c8de3e43702f8b2";
            };
            beamDeps  = [ doteki_1_0_5 ];

            meta = {
              description = ''Erlang/Elixir worker pool'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/botsunit/poolgirl";
            };
          } // packageOverrides)
      ) {};

    poolgirl = poolgirl_1_1_2;

    pop3mail_1_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pop3mail";
            version = "1.1.0";
            src = fetchHex {
              pkg = "pop3mail";
              version = "1.1.0";
              sha256 =
                "ed5a9556037f3e8a6d7ad0cd37acc7aac8dd789b5fa97c0ccd6a62715343825c";
            };

            meta = {
              longDescription = ''Pop3 client to download email (including
                                attachments) from the inbox. Decodes multipart
                                content, quoted-printables, base64 and
                                encoded-words. Uses an Erlang pop3 client with
                                SSL support derived from the epop package. Add
                                this dependency in mix.exs: {:erlpop, github:
                                \"nico-amsterdam/erlpop\"}'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nico-amsterdam/pop3mail";
            };
          } // packageOverrides)
      ) {};

    pop3mail = pop3mail_1_1_0;

    population_0_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_10_0,
          json_1_0_2
        }:
          buildMix ({
            name = "population";
            version = "0.1.2";
            src = fetchHex {
              pkg = "population";
              version = "0.1.2";
              sha256 =
                "1672393dac7808f779bdfeb3c7b49f6953f713f48bdf5ccb7135e6ad331b7139";
            };
            beamDeps  = [ httpoison_0_10_0 json_1_0_2 ];

            meta = {
              description = ''Elixir OTP application library for the World
                            Population API (api.population.io)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Angarsk8/population.ex";
            };
          } // packageOverrides)
      ) {};

    population = population_0_1_2;

    populator_0_5_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "populator";
            version = "0.5.0";
            src = fetchHex {
              pkg = "populator";
              version = "0.5.0";
              sha256 =
                "df39fef61637692354bc65e7b952514f77b229b45a73ba8d897e2c37da796833";
            };

            meta = {
              description = ''Supervisor population control library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rubencaro/populator";
            };
          } // packageOverrides)
      ) {};

    populator = populator_0_5_0;

    porcelain_2_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "porcelain";
            version = "2.0.3";
            src = fetchHex {
              pkg = "porcelain";
              version = "2.0.3";
              sha256 =
                "dc996ab8fadbc09912c787c7ab8673065e50ea1a6245177b0c24569013d23620";
            };

            meta = {
              longDescription = ''Porcelain implements a saner approach to
                                launching and communicating with external OS
                                processes from Elixir. Built on top of Erlang`s
                                ports, it provides richer functionality and
                                simpler API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/alco/porcelain";
            };
          } // packageOverrides)
      ) {};

    porcelain = porcelain_2_0_3;

    porta_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "porta";
            version = "0.2.0";
            src = fetchHex {
              pkg = "porta";
              version = "0.2.0";
              sha256 =
                "78445cbfd6e66835511c72e5a031b07d0959a546707b94ba85a1a0468be9cf62";
            };

            meta = {
              description = ''Utilities for Phoenix and Ecto'';
              license = stdenv.lib.licenses.mpl20;
              homepage = "https://github.com/bopjesvla/porta";
            };
          } // packageOverrides)
      ) {};

    porta = porta_0_2_0;

    portal_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "portal";
            version = "0.0.1";
            src = fetchHex {
              pkg = "portal";
              version = "0.0.1";
              sha256 =
                "975d2aa4b4e155092214bee9ecc547d4c6603001c78eb824669823e1e116c84c";
            };

            meta = {
              longDescription = ''A shooting fault-tolerant doors for
                                distributed portal data-transfer application in
                                Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/josevalim/portal";
            };
          } // packageOverrides)
      ) {};

    portal = portal_0_0_1;

    porter_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "porter";
            version = "0.0.1";
            src = fetchHex {
              pkg = "porter";
              version = "0.0.1";
              sha256 =
                "81ef97a1d6eb495b6a919cdaae4268a49a3591903424d4ed00f67104d09e89dd";
            };

            meta = {
              longDescription = ''Porter provides an OTP application that runs
                                the specified system command using the Erlang
                                Port library and then streams the results back
                                to you.'';

            };
          } // packageOverrides)
      ) {};

    porter = porter_0_0_1;

    porter2_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "porter2";
            version = "0.1.0";
            src = fetchHex {
              pkg = "porter2";
              version = "0.1.0";
              sha256 =
                "5e286fc040fc03b45c3871104460d88be8394c860c664c16d88abb1d5690f508";
            };

            meta = {
              description = ''Implementation of the Porter2 stemming algorithm
                            for the english language'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/sriedel/ExPorter2";
            };
          } // packageOverrides)
      ) {};

    porter2 = porter2_0_1_0;

    porterstemmer_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "porterstemmer";
            version = "0.0.1";
            src = fetchHex {
              pkg = "porterstemmer";
              version = "0.0.1";
              sha256 =
                "8b3987cce8602d6ad16829fd4fefc848f01efcdc46d9e806059eec6a1b9d7cc8";
            };

            meta = {
              longDescription = '' Porter stemmer in Elixir. It does not stem
                                words beginning with an uppercase letter. This
                                is to prevent stemming of acronyms or names. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/frpaulas/porterstemmer.git";
            };
          } // packageOverrides)
      ) {};

    porterstemmer = porterstemmer_0_0_1;

    portmidi_5_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "portmidi";
            version = "5.1.1";
            src = fetchHex {
              pkg = "portmidi";
              version = "5.1.1";
              sha256 =
                "13f6a8c590a33cde11df440934d443c9555970f4e9270ee8b290f4d3b2f53c5d";
            };

            meta = {
              description = ''Elixir bindings to the portmidi C library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lucidstack/ex-portmidi";
            };
          } // packageOverrides)
      ) {};

    portmidi = portmidi_5_1_1;

    portnet_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "portnet";
            version = "0.1.0";
            src = fetchHex {
              pkg = "portnet";
              version = "0.1.0";
              sha256 =
                "e3af93b65425d3bf55f18828c287f635e36fc2c44904c132a37b02f951c24dd5";
            };

            meta = {
              description = ''port the net'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/portnet";
            };
          } // packageOverrides)
      ) {};

    portnet = portnet_0_1_0;

    posexional_0_4_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "posexional";
            version = "0.4.1";
            src = fetchHex {
              pkg = "posexional";
              version = "0.4.1";
              sha256 =
                "c11ac3add43a0117968307e696322d2ed0312adeab6f04cdaac18f1a1a3e1584";
            };

            meta = {
              description = ''A library to manage positional files'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/primait/posexional";
            };
          } // packageOverrides)
      ) {};

    posexional = posexional_0_4_1;

    positive_13_3_7 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex }:
          buildErlangMk ({
            name = "positive";
            version = "13.3.7";
            src = fetchHex {
              pkg = "positive";
              version = "13.3.7";
              sha256 =
                "516964039cbae4e64226d9e50787f32134f3411bc0ae8cedf26488ba004616be";
            };

            meta = {
              description = ''Library: check if an integer is positive'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jlouis/positive";
            };
          } // packageOverrides)
      ) {};

    positive = positive_13_3_7;

    posix_0_1_6 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exts_0_3_4,
          rustler_0_8_0
        }:
          buildMix ({
            name = "posix";
            version = "0.1.6";
            src = fetchHex {
              pkg = "posix";
              version = "0.1.6";
              sha256 =
                "7a3718f6d64730fbe4669ffc16745660becac4aa868799eacbc9cf47effac6d5";
            };
            beamDeps  = [ exts_0_3_4 rustler_0_8_0 ];

            meta = {
              longDescription = ''Gives the Erlang Runtime System access to
                                POSIX features of the build environment
                                (currently, errno and sigaction.)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tsutsu/elixir_posix";
            };
          } // packageOverrides)
      ) {};

    posix = posix_0_1_6;

    posix_errno_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exts_0_3_4,
          rustler_0_8_0
        }:
          buildMix ({
            name = "posix_errno";
            version = "0.1.1";
            src = fetchHex {
              pkg = "posix_errno";
              version = "0.1.1";
              sha256 =
                "d9544944edc03fca78370d88488baab6f0fd65488a97657c93deccc8e715d310";
            };
            beamDeps  = [ exts_0_3_4 rustler_0_8_0 ];

            meta = {
              description = ''Gives your Elixir programs access to the build
                            system`s `errno.h` mappings.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tsutsu/posix_errno";
            };
          } // packageOverrides)
      ) {};

    posix_errno = posix_errno_0_1_1;

    postal_ex_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, csv_1_4_4 }:
          buildMix ({
            name = "postal_ex";
            version = "0.0.1";
            src = fetchHex {
              pkg = "postal_ex";
              version = "0.0.1";
              sha256 =
                "7808ba68f9204c4d54ed84bf915d7379e48d2c42d887d450fc3b413d54a58575";
            };
            beamDeps  = [ csv_1_4_4 ];

            meta = {
              description = ''Simple postal code lookup on ets table'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jrichocean/postal_ex";
            };
          } // packageOverrides)
      ) {};

    postal_ex = postal_ex_0_0_1;

    posterize_0_13_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          postgrex_0_13_3,
          sbroker_1_0_0
        }:
          buildMix ({
            name = "posterize";
            version = "0.13.1";
            src = fetchHex {
              pkg = "posterize";
              version = "0.13.1";
              sha256 =
                "fe503a5a8ebb73cfa14d4f693f93396b0b874e192edaa1e53dcfaa11d0564779";
            };
            beamDeps  = [ postgrex_0_13_3 sbroker_1_0_0 ];

            meta = {
              description = ''erlang wrapper for the postgrex postgres
                            client'';
              license = with stdenv.lib.licenses; [ asl20 mit ];
              homepage = "https://github.com/talentdeficit/posterize";
            };
          } // packageOverrides)
      ) {};

    posterize = posterize_0_13_1;

    postgrex_0_11_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          connection_1_0_4,
          db_connection_1_1_2,
          decimal_1_3_1
        }:
          buildMix ({
            name = "postgrex";
            version = "0.11.2";
            src = fetchHex {
              pkg = "postgrex";
              version = "0.11.2";
              sha256 =
                "3c24cb3cca8e0a73d8f56b7b1db161a94a460891f451247581cdff1e425316ef";
            };
            beamDeps  = [ connection_1_0_4 db_connection_1_1_2 decimal_1_3_1
                      ];

            meta = {
              description = ''PostgreSQL driver for Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/elixir-ecto/postgrex";
            };
          } // packageOverrides)
      ) {};

    postgrex_0_13_0_rc_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          connection_1_0_4,
          db_connection_1_1_2,
          decimal_1_3_1
        }:
          buildMix ({
            name = "postgrex";
            version = "0.13.0-rc.0";
            src = fetchHex {
              pkg = "postgrex";
              version = "0.13.0-rc.0";
              sha256 =
                "265bf3d70ecad8b68bc408d0dc59ea972048cb352c047fb6b0980bda2299aec0";
            };
            beamDeps  = [ connection_1_0_4 db_connection_1_1_2 decimal_1_3_1
                      ];

            meta = {
              description = ''PostgreSQL driver for Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/elixir-ecto/postgrex";
            };
          } // packageOverrides)
      ) {};

    postgrex_0_13_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          connection_1_0_4,
          db_connection_1_1_2,
          decimal_1_3_1
        }:
          buildMix ({
            name = "postgrex";
            version = "0.13.3";
            src = fetchHex {
              pkg = "postgrex";
              version = "0.13.3";
              sha256 =
                "b5c6fcdde3e114739c902985531c2a711727c72c1ac03d757f390a4fa0beee9e";
            };
            beamDeps  = [ connection_1_0_4 db_connection_1_1_2 decimal_1_3_1
                      ];

            meta = {
              description = ''PostgreSQL driver for Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/elixir-ecto/postgrex";
            };
          } // packageOverrides)
      ) {};

    postgrex_0_5_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, decimal_1_3_0 }:
          buildMix ({
            name = "postgrex";
            version = "0.5.5";
            src = fetchHex {
              pkg = "postgrex";
              version = "0.5.5";
              sha256 =
                "ada1943d9e288db273d69a35924a5fd2bbb548787f3f816e8a58d4ac34210a88";
            };
            beamDeps  = [ decimal_1_3_0 ];

            meta = {
              description = ''PostgreSQL driver for Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/elixir-ecto/postgrex";
            };
          } // packageOverrides)
      ) {};

    postgrex_0_6_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, decimal_1_3_0 }:
          buildMix ({
            name = "postgrex";
            version = "0.6.0";
            src = fetchHex {
              pkg = "postgrex";
              version = "0.6.0";
              sha256 =
                "aa2aede73938a952ffbbe2b1173ac52c377a2055fd3e44ac1843bef782f5f8d4";
            };
            beamDeps  = [ decimal_1_3_0 ];

            meta = {
              description = ''PostgreSQL driver for Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/elixir-ecto/postgrex";
            };
          } // packageOverrides)
      ) {};

    postgrex_0_9_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, decimal_1_3_1 }:
          buildMix ({
            name = "postgrex";
            version = "0.9.1";
            src = fetchHex {
              pkg = "postgrex";
              version = "0.9.1";
              sha256 =
                "9c9a4ffca145479b343d7a51730557305425aab69e8d31cc32f348f85996fb5a";
            };
            beamDeps  = [ decimal_1_3_1 ];

            meta = {
              description = ''PostgreSQL driver for Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/elixir-ecto/postgrex";
            };
          } // packageOverrides)
      ) {};

    postgrex_1_0_0_rc_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          connection_1_0_4,
          db_connection_1_1_2,
          decimal_1_3_1
        }:
          buildMix ({
            name = "postgrex";
            version = "1.0.0-rc.1";
            src = fetchHex {
              pkg = "postgrex";
              version = "1.0.0-rc.1";
              sha256 =
                "530042214a31e644f34c74d87a2b767e4f2d2497a966f87c3ea0e3be6fb88b33";
            };
            beamDeps  = [ connection_1_0_4 db_connection_1_1_2 decimal_1_3_1
                      ];

            meta = {
              description = ''PostgreSQL driver for Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/elixir-ecto/postgrex";
            };
          } // packageOverrides)
      ) {};

    postgrex = postgrex_1_0_0_rc_1;

    pot_0_9_5 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "pot";
            version = "0.9.5";
            src = fetchHex {
              pkg = "pot";
              version = "0.9.5";
              sha256 =
                "02f574590f8f309c1d956054bc60e8bdc2a6ba463f9a939bd34a046784de8b6b";
            };

            meta = {
              longDescription = ''POT is an Erlang library for generating
                                Google Authenticator compatible one time
                                passwords.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/yuce/pot";
            };
          } // packageOverrides)
      ) {};

    pot = pot_0_9_5;

    potion_1_5_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "potion";
            version = "1.5.2";
            src = fetchHex {
              pkg = "potion";
              version = "1.5.2";
              sha256 =
                "b939a6fcca2b29aa5af7f6cae8f38da3ba25d4b69c4e03e267fd2db991aec896";
            };

            meta = {
              description = ''utility'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/su-mi-lab/potion";
            };
          } // packageOverrides)
      ) {};

    potion = potion_1_5_2;

    power_assert_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "power_assert";
            version = "0.1.1";
            src = fetchHex {
              pkg = "power_assert";
              version = "0.1.1";
              sha256 =
                "40e8e4dca847606e6b88a8c71c9b5644b356c37279f1cb33bb5c8880ac98eebc";
            };

            meta = {
              description = ''Power Assert in Elixir. Shows evaluation results
                            each expression.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ma2gedev/power_assert_ex";
            };
          } // packageOverrides)
      ) {};

    power_assert = power_assert_0_1_1;

    powerdnsex_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_9_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "powerdnsex";
            version = "0.0.2";
            src = fetchHex {
              pkg = "powerdnsex";
              version = "0.0.2";
              sha256 =
                "0bb19962ddd23e8508f22d9fd8a3385ee2ca8c4c5197119ac2485d4b9f9de605";
            };
            beamDeps  = [ httpoison_0_9_2 poison_2_2_0 ];

            meta = {
              description = ''A Client to integrate with PowerDNS API version
                            4'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/digaoddc/power_dnsex";
            };
          } // packageOverrides)
      ) {};

    powerdnsex = powerdnsex_0_0_2;

    ppg_0_1_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, evel_0_1_1 }:
          buildRebar3 ({
            name = "ppg";
            version = "0.1.3";
            src = fetchHex {
              pkg = "ppg";
              version = "0.1.3";
              sha256 =
                "8bbd51b5c1f2e08636839ad6f6151b3ad2a5c46e3fe8bdb1f33f79a2b57d1e13";
            };

            beamDeps  = [ evel_0_1_1 ];

            meta = {
              description = ''Plumtree based Process Group'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sile/ppg";
            };
          } // packageOverrides)
      ) {};

    ppg = ppg_0_1_3;

    pqueue_1_5_4 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "pqueue";
            version = "1.5.4";
            src = fetchHex {
              pkg = "pqueue";
              version = "1.5.4";
              sha256 =
                "3c8cd86c3a9ae51cf051a32026d932ee5f545ee86f023d8a936da669f0e71b85";
            };

            meta = {
              description = ''Erlang Priority Queue Implementation'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/okeuday/pqueue";
            };
          } // packageOverrides)
      ) {};

    pqueue_1_6_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "pqueue";
            version = "1.6.0";
            src = fetchHex {
              pkg = "pqueue";
              version = "1.6.0";
              sha256 =
                "5cbec6684b7257df5322e805082d9155985263a549e879828848cc791083c1de";
            };

            meta = {
              description = ''Erlang Priority Queue Implementation'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/okeuday/pqueue";
            };
          } // packageOverrides)
      ) {};

    pqueue_1_7_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "pqueue";
            version = "1.7.1";
            src = fetchHex {
              pkg = "pqueue";
              version = "1.7.1";
              sha256 =
                "684af8e9d4954698eca742553b0a24bbe56122bc43f19f9116d07b3b3d3bf910";
            };

            meta = {
              description = ''Erlang Priority Queue Implementation'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/okeuday/pqueue";
            };
          } // packageOverrides)
      ) {};

    pqueue = pqueue_1_7_1;

    pragmatic_0_1_7 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pragmatic";
            version = "0.1.7";
            src = fetchHex {
              pkg = "pragmatic";
              version = "0.1.7";
              sha256 =
                "a86e89bf594108715bf7db70ccb93eb2a020367a9bb6c441ca74d3eb92c35fa3";
            };

            meta = {
              longDescription = ''A small, simple library to deal with the
                                practical issues arising from using Elixir on
                                Windows'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/OnorioCatenacci/pragmatic";
            };
          } // packageOverrides)
      ) {};

    pragmatic = pragmatic_0_1_7;

    pre_commit_hook_1_0_6 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pre_commit_hook";
            version = "1.0.6";
            src = fetchHex {
              pkg = "pre_commit_hook";
              version = "1.0.6";
              sha256 =
                "0c08adc9977c73ecbdf4913d6ec033ea2187f4212d17739773d304c64613455f";
            };

            meta = {
              longDescription = ''PreCommitHook provides hook in
                                \".git/hooks/pre-commit\" which helps you to
                                build elixir project with these checks: * code
                                must compile * code must pass basic linting
                                (.credo.exs will be copied if it doesn`t exist)
                                * code must pass test * code must pass docs
                                generation.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tyrchen/pre_commit_hook";
            };
          } // packageOverrides)
      ) {};

    pre_commit_hook = pre_commit_hook_1_0_6;

    pre_plug_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, plug_1_3_5 }:
          buildMix ({
            name = "pre_plug";
            version = "1.0.1";
            src = fetchHex {
              pkg = "pre_plug";
              version = "1.0.1";
              sha256 =
                "ba6ff7c0def8a15c3056d5c9a55ff9af279af1a61e7623040e7f35c275ecd3f2";
            };
            beamDeps  = [ plug_1_3_5 ];

            meta = {
              description = ''Plugs with guaranteed effects in error
                            handlers'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zackehh/pre_plug";
            };
          } // packageOverrides)
      ) {};

    pre_plug = pre_plug_1_0_1;

    predicator_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "predicator";
            version = "0.1.1";
            src = fetchHex {
              pkg = "predicator";
              version = "0.1.1";
              sha256 =
                "5217a17a3f6a8be1a405de311c2fc91168a425f603ff4d6680475d61f68a780f";
            };

            meta = {
              description = ''Predicator Evaluator in elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/predicator/predicator_elixir";
            };
          } // packageOverrides)
      ) {};

    predicator = predicator_0_1_1;

    prefecture_jp_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "prefecture_jp";
            version = "0.0.3";
            src = fetchHex {
              pkg = "prefecture_jp";
              version = "0.0.3";
              sha256 =
                "b6a61c44faeb1e3ef6998d34791d00144d110ea140a5d3209943824ae15c5723";
            };

            meta = {
              description = ''PrefectureJp is a library for Japanese
                            prefecture.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ymmtmsys/prefecture_jp";
            };
          } // packageOverrides)
      ) {};

    prefecture_jp = prefecture_jp_0_0_3;

    pregao_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pregao";
            version = "0.1.0";
            src = fetchHex {
              pkg = "pregao";
              version = "0.1.0";
              sha256 =
                "efe3f8742064ef6b8b07c4cbb495ce10ad8874d84a66a2a6f3c7849b86db2b74";
            };

            meta = {
              description = ''An elixir parser for the BM&F Bovespa BDI file
                            format.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/potz/pregao";
            };
          } // packageOverrides)
      ) {};

    pregao = pregao_0_1_0;

    prelude_0_0_1 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, etude_1_0_0_beta_0
        }:
          buildMix ({
            name = "prelude";
            version = "0.0.1";
            src = fetchHex {
              pkg = "prelude";
              version = "0.0.1";
              sha256 =
                "805c5a43a043864b4793f4aeff574b88e9eaac18e49d93cb71cbd6270283bde9";
            };
            beamDeps  = [ etude_1_0_0_beta_0 ];

            meta = {
              description = ''a preprocessor/compiler toolset for erlang and
                            elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/camshaft/prelude";
            };
          } // packageOverrides)
      ) {};

    prelude = prelude_0_0_1;

    presence_0_9_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, junit_formatter_1_3_0
        }:
          buildMix ({
            name = "presence";
            version = "0.9.0";
            src = fetchHex {
              pkg = "presence";
              version = "0.9.0";
              sha256 =
                "63547662aa5f58ca0cfa342366b8112654b1e005ceb6494105d47a20ed8a5915";
            };
            beamDeps  = [ junit_formatter_1_3_0 ];

            meta = {
              description = ''This a small Elixir library to check if a value
                            is blank or not.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/wnuqui/presence";
            };
          } // packageOverrides)
      ) {};

    presence = presence_0_9_0;

    presentex_0_0_10 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "presentex";
            version = "0.0.10";
            src = fetchHex {
              pkg = "presentex";
              version = "0.0.10";
              sha256 =
                "86479a0b79146dadc3f224d2023d06d7f4f87fd455a3267bbd11759ebde1404c";
            };

            meta = {
              description = ''An Elixir -> HTML/JavaScript presentation
                            generation tool. '';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/Cobenian/Presentex";
            };
          } // packageOverrides)
      ) {};

    presentex = presentex_0_0_10;

    pretty_console_0_1_6 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pretty_console";
            version = "0.1.6";
            src = fetchHex {
              pkg = "pretty_console";
              version = "0.1.6";
              sha256 =
                "2c898182c08654dfcd8472e338cfb833c24ed0dcf47e80e2d7d48f0de8f496f6";
            };

            meta = {
              description = ''A slightly more pleasant Logger console
                            backend.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tsutsu/pretty_console";
            };
          } // packageOverrides)
      ) {};

    pretty_console = pretty_console_0_1_6;

    pretty_hex_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pretty_hex";
            version = "0.0.1";
            src = fetchHex {
              pkg = "pretty_hex";
              version = "0.0.1";
              sha256 =
                "ab91a38480049af4811ffdaf15dbee9370acb9b20cdc870281d2006a8fe928b4";
            };

            meta = {
              description = ''A binary hex dumping library in Elixir. '';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/polsab/pretty_hex";
            };
          } // packageOverrides)
      ) {};

    pretty_hex = pretty_hex_0_0_1;

    prevayler_iex_0_1_7 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "prevayler_iex";
            version = "0.1.7";
            src = fetchHex {
              pkg = "prevayler_iex";
              version = "0.1.7";
              sha256 =
                "c1fcb7487e0d7547745342c6268f69d23a1f0707c0c1b585ef7d7f5ed1e6c342";
            };

            meta = {
              longDescription = ''Simple implementation of prevalence in
                                Elixir, this project is based on prevayler
                                project
                                (https://github.com/jsampson/prevayler.git).'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/elixir-ecto/postgrex";
            };
          } // packageOverrides)
      ) {};

    prevayler_iex = prevayler_iex_0_1_7;

    pricing_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          porcelain_2_0_3,
          timex_3_0_5
        }:
          buildMix ({
            name = "pricing";
            version = "0.0.1";
            src = fetchHex {
              pkg = "pricing";
              version = "0.0.1";
              sha256 =
                "82e0438611507f600bd799c986872588f88627fdcf7a15d4031d779c9d1cd4d7";
            };
            beamDeps  = [ porcelain_2_0_3 timex_3_0_5 ];

            meta = {
              description = ''Pricing financial instruments in Elixir'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/arthurcolle/pricing";
            };
          } // packageOverrides)
      ) {};

    pricing = pricing_0_0_1;

    primal_ex_0_1_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, rustler_0_9_0 }:
          buildMix ({
            name = "primal_ex";
            version = "0.1.5";
            src = fetchHex {
              pkg = "primal_ex";
              version = "0.1.5";
              sha256 =
                "fb5fb88aa04492d18538a005537979b02c88dd646e1ceaa6fd40a32600eaa8ac";
            };
            beamDeps  = [ rustler_0_9_0 ];

            meta = {
              longDescription = ''A prime number library for Elixir, providing
                                NIF bindings for the Primal Rust library.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ddresselhaus/primal_ex";
            };
          } // packageOverrides)
      ) {};

    primal_ex = primal_ex_0_1_5;

    printex_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "printex";
            version = "0.1.2";
            src = fetchHex {
              pkg = "printex";
              version = "0.1.2";
              sha256 =
                "3b145b66e1fbc6b511f4f6fd9b46a9d182fc807445f0501f4c81495eb451bf98";
            };

            meta = {
              description = ''Console Printing with colors and backgrounds'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/blackode/printex";
            };
          } // packageOverrides)
      ) {};

    printex = printex_0_1_2;

    priority_queue_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "priority_queue";
            version = "1.0.0";
            src = fetchHex {
              pkg = "priority_queue";
              version = "1.0.0";
              sha256 =
                "ba3dc420a5898d863803455c05ad870c6b6f3adb12b50ebea6cd6aeed1b358b7";
            };

            meta = {
              description = ''Priority Queue for Elixir. Heap implementation'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ewildgoose/elixir_priority_queue";
            };
          } // packageOverrides)
      ) {};

    priority_queue = priority_queue_1_0_0;

    private_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "private";
            version = "0.1.1";
            src = fetchHex {
              pkg = "private";
              version = "0.1.1";
              sha256 =
                "f58264a3b092922b8ce190b728c707e699517fcad12c141e35ca9f2b826ba1b8";
            };

            meta = {
              description = ''Make private functions public if Mix.env is
                            :test'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/pragdave/private";
            };
          } // packageOverrides)
      ) {};

    private = private_0_1_1;

    privilegex_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "privilegex";
            version = "0.1.2";
            src = fetchHex {
              pkg = "privilegex";
              version = "0.1.2";
              sha256 =
                "63dfa7e13b097c8a4299e420f284b9605d615163c64efd709b3aac411d66a6d2";
            };

            meta = {
              longDescription = ''Privilegex is a library for changing an
                                elixir process`s privileges(setuid/setgid) from
                                the inside'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/plus3x/privilegex";
            };
          } // packageOverrides)
      ) {};

    privilegex = privilegex_0_1_2;

    process_tree_dictionary_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "process_tree_dictionary";
            version = "1.0.1";
            src = fetchHex {
              pkg = "process_tree_dictionary";
              version = "1.0.1";
              sha256 =
                "f875ac59d8df1e5951637d3ec6e33532a5109b0886f40efe94332db4915f9ea9";
            };

            meta = {
              description = ''Implements a dictionary that is scoped to a
                            process tree for Erlang and Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/seomoz/process_tree_dictionary";
            };
          } // packageOverrides)
      ) {};

    process_tree_dictionary = process_tree_dictionary_1_0_1;

    procket_0_7_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "procket";
            version = "0.7.0";
            src = fetchHex {
              pkg = "procket";
              version = "0.7.0";
              sha256 =
                "69cbd2a675f8579274f883ef8db47bdcae6c587090b8bd4ed0acd403731e89e0";
            };
            compilePorts = true;

            meta = {
              description = ''Low level socket operations'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/msantos/procket";
            };
          } // packageOverrides)
      ) {};

    procket = procket_0_7_0;

    procrastinator_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "procrastinator";
            version = "0.1.1";
            src = fetchHex {
              pkg = "procrastinator";
              version = "0.1.1";
              sha256 =
                "61b72fdad94550f9375cccf278500701525527a707014afdf8d1b885d58cded3";
            };

            meta = {
              longDescription = ''Procrastinates work until the last second or
                                until the work load has gotten so big that it
                                has to do it. Just like people!'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Podium/procrastinator";
            };
          } // packageOverrides)
      ) {};

    procrastinator = procrastinator_0_1_1;

    productive_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "productive";
            version = "0.3.0";
            src = fetchHex {
              pkg = "productive";
              version = "0.3.0";
              sha256 =
                "dd7e80d79a8821aad3384e57da05cac54173b5ff8176bc5357c2896153cc5323";
            };

            meta = {
              longDescription = ''A workflow library allowing a process to be
                                defined as steps. Think of a more generic
                                implementation of Plug.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/midas/productive";
            };
          } // packageOverrides)
      ) {};

    productive = productive_0_3_0;

    progress_bar_1_6_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "progress_bar";
            version = "1.6.1";
            src = fetchHex {
              pkg = "progress_bar";
              version = "1.6.1";
              sha256 =
                "5ab5df6a707b97bb30f141845c2c3a5347c9b77bde780d34edfe866a70734d9e";
            };

            meta = {
              description = ''Command-line progress bars and spinners.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/henrik/progress_bar";
            };
          } // packageOverrides)
      ) {};

    progress_bar = progress_bar_1_6_1;

    proj_0_2_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "proj";
            version = "0.2.2";
            src = fetchHex {
              pkg = "proj";
              version = "0.2.2";
              sha256 =
                "9463690666bfb3de662c97e9b1089c55f69a6a7a0d28314eb2659106b78730aa";
            };

            meta = {
              description = ''Elixir coordinate conversion library using
                            OSGeo`s PROJ.4'';
              license = stdenv.lib.licenses.cc0;
              homepage = "https://github.com/candygumdrop/proj";
            };
          } // packageOverrides)
      ) {};

    proj = proj_0_2_2;

    project_info_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "project_info";
            version = "1.0.0";
            src = fetchHex {
              pkg = "project_info";
              version = "1.0.0";
              sha256 =
                "749553b710d363e5b900a6d3d37da7c461b8f7a977c9da814124f5862cf209a0";
            };

            meta = {
              longDescription = ''A mix task to get info about the current mix
                                project such as name or version number. Useful
                                to automate tasks using a CI server or a build
                                script.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/nubleer/project_info";
            };
          } // packageOverrides)
      ) {};

    project_info = project_info_1_0_0;

    prometheus_3_1_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "prometheus";
            version = "3.1.1";
            src = fetchHex {
              pkg = "prometheus";
              version = "3.1.1";
              sha256 =
                "cfbaa869d058bf6152238dac74d872734a21053ce27d8522f45b7e9491694669";
            };

            buildPlugins  = [ rebar3_gpb_plugin coveralls ];


            meta = {
              description = ''Prometheus monitoring system and time series
                            database client in Erlang.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/deadtrickster/prometheus.erl";
            };
          } // packageOverrides)
      ) {};

    prometheus_3_3_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "prometheus";
            version = "3.3.1";
            src = fetchHex {
              pkg = "prometheus";
              version = "3.3.1";
              sha256 =
                "2bd23eeeec05761b2b40c04253f5fea34ca883dae3ae90db843678b41c5c96a5";
            };

            meta = {
              description = ''Prometheus monitoring system and time series
                            database client in Erlang.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/deadtrickster/prometheus.erl";
            };
          } // packageOverrides)
      ) {};

    prometheus = prometheus_3_3_1;

    prometheus_ecto_1_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_4,
          prometheus_ex_1_3_0
        }:
          buildMix ({
            name = "prometheus_ecto";
            version = "1.0.2";
            src = fetchHex {
              pkg = "prometheus_ecto";
              version = "1.0.2";
              sha256 =
                "61dd7b9bc0d59d4468d17c4a1dffa2dc94fbee9d4f5858be3f0c1167fb880ffa";
            };
            beamDeps  = [ ecto_2_1_4 prometheus_ex_1_3_0 ];

            meta = {
              description = ''Prometheus monitoring system client Ecto
                            integration. Observes queries duration.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/deadtrickster/prometheus-ecto";
            };
          } // packageOverrides)
      ) {};

    prometheus_ecto = prometheus_ecto_1_0_2;

    prometheus_ex_1_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, prometheus_3_3_1 }:
          buildMix ({
            name = "prometheus_ex";
            version = "1.1.1";
            src = fetchHex {
              pkg = "prometheus_ex";
              version = "1.1.1";
              sha256 =
                "09f2cf0c31ce6a9bf9a8e798f0fe213d4dd558409f0e2dcd150c614cfc3684aa";
            };
            beamDeps  = [ prometheus_3_3_1 ];

            meta = {
              description = ''Elixir-friendly Prometheus monitoring system
                            client.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/deadtrickster/prometheus.ex";
            };
          } // packageOverrides)
      ) {};

    prometheus_ex_1_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, prometheus_3_3_1 }:
          buildMix ({
            name = "prometheus_ex";
            version = "1.3.0";
            src = fetchHex {
              pkg = "prometheus_ex";
              version = "1.3.0";
              sha256 =
                "5428819d04b58ce1e4c8cd0f7d48dcb850ebbcab3b1c534f264cb570a017865e";
            };
            beamDeps  = [ prometheus_3_3_1 ];

            meta = {
              description = ''Elixir-friendly Prometheus monitoring system
                            client.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/deadtrickster/prometheus.ex";
            };
          } // packageOverrides)
      ) {};

    prometheus_ex = prometheus_ex_1_3_0;

    prometheus_httpd_2_0_1 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          accept_0_3_3,
          prometheus_3_3_1
        }:
          buildRebar3 ({
            name = "prometheus_httpd";
            version = "2.0.1";
            src = fetchHex {
              pkg = "prometheus_httpd";
              version = "2.0.1";
              sha256 =
                "886303eefe45e74d1a4373fd067203c52e82dd85769a0887273972a97d36a561";
            };

            beamDeps  = [ accept_0_3_3 prometheus_3_3_1 ];

            meta = {
              description = ''Prometheus.io inets httpd exporter'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/deadtrickster/prometheus_httpd";
            };
          } // packageOverrides)
      ) {};

    prometheus_httpd = prometheus_httpd_2_0_1;

    prometheus_phoenix_1_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          phoenix_1_3_0_rc_2,
          prometheus_ex_1_3_0
        }:
          buildMix ({
            name = "prometheus_phoenix";
            version = "1.0.2";
            src = fetchHex {
              pkg = "prometheus_phoenix";
              version = "1.0.2";
              sha256 =
                "f91f4327b5303d5a1b4d2ebd5289453abbd4fbfce9a456a5caf685ea8166a6eb";
            };
            beamDeps  = [ phoenix_1_3_0_rc_2 prometheus_ex_1_3_0 ];

            meta = {
              description = ''Prometheus monitoring system client Phoenix
                            instrumenter.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/deadtrickster/prometheus-phoenix";
            };
          } // packageOverrides)
      ) {};

    prometheus_phoenix = prometheus_phoenix_1_0_2;

    prometheus_plugs_1_1_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          accept_0_3_3,
          plug_1_3_5,
          prometheus_ex_1_3_0,
          prometheus_process_collector_1_0_3
        }:
          buildMix ({
            name = "prometheus_plugs";
            version = "1.1.3";
            src = fetchHex {
              pkg = "prometheus_plugs";
              version = "1.1.3";
              sha256 =
                "ca70b4a0c84ca8d4d0d3c67784e7d2ccd4ac4ca118648e870df7df1f2e9a8580";
            };
            beamDeps  = [
                          accept_0_3_3
                          plug_1_3_5
                          prometheus_ex_1_3_0
                          prometheus_process_collector_1_0_3
                        ];

            meta = {
              description = ''Prometheus monitoring system client Plugs. Http
                            metrics collector and exporter.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/deadtrickster/prometheus-plugs";
            };
          } // packageOverrides)
      ) {};

    prometheus_plugs = prometheus_plugs_1_1_3;

    prometheus_process_collector_1_0_3 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, prometheus_3_3_1
        }:
          buildRebar3 ({
            name = "prometheus_process_collector";
            version = "1.0.3";
            src = fetchHex {
              pkg = "prometheus_process_collector";
              version = "1.0.3";
              sha256 =
                "27d744a06dc1bf7c0149dac013a7db41355a6b2e1cf0ae43b65e4196e9b3d6e4";
            };
            compilePorts = true;
            buildPlugins  = [ rebar3_archive_plugin ];

            beamDeps  = [ prometheus_3_3_1 ];

            meta = {
              longDescription = ''Prometheus.io process collector. Collector
                                exports the current state of process metrics
                                including cpu, memory, file descriptor usage and
                                native threads count as well as the process
                                start and up times.'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/deadtrickster/prometheus_process_collector.erl";
            };
          } // packageOverrides)
      ) {};

    prometheus_process_collector_1_1_0 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, prometheus_3_3_1
        }:
          buildRebar3 ({
            name = "prometheus_process_collector";
            version = "1.1.0";
            src = fetchHex {
              pkg = "prometheus_process_collector";
              version = "1.1.0";
              sha256 =
                "98ab7b538127f79fe143f549e0bda50459b64dff5665d2b98ba985a40b8b835f";
            };
            compilePorts = true;
            buildPlugins  = [ rebar3_archive_plugin ];

            beamDeps  = [ prometheus_3_3_1 ];

            meta = {
              longDescription = ''Prometheus.io process collector. Collector
                                exports the current state of process metrics
                                including cpu, memory, file descriptor usage and
                                native threads count as well as the process
                                start and up times.'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/deadtrickster/prometheus_process_collector.erl";
            };
          } // packageOverrides)
      ) {};

    prometheus_process_collector =
      prometheus_process_collector_1_1_0;

    prometheus_push_0_0_1 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, prometheus_ex_1_3_0
        }:
          buildMix ({
            name = "prometheus_push";
            version = "0.0.1";
            src = fetchHex {
              pkg = "prometheus_push";
              version = "0.0.1";
              sha256 =
                "a7b93699260fa8337dcc3d7ae36a0212c9890b022039d855fc2bdba991f2431a";
            };
            beamDeps  = [ prometheus_ex_1_3_0 ];

            meta = {
              description = ''Prometheus Pushgateway client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/deadtrickster/prometheus-push";
            };
          } // packageOverrides)
      ) {};

    prometheus_push = prometheus_push_0_0_1;

    promexp_0_4_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "promexp";
            version = "0.4.3";
            src = fetchHex {
              pkg = "promexp";
              version = "0.4.3";
              sha256 =
                "deeeda72ec33e729c5b4ccfc90762b870914a14afe774449ea44fa2ecdccb682";
            };

            meta = {
              description = ''Prometheus exporter for Erlang/Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/tomaon/promexp";
            };
          } // packageOverrides)
      ) {};

    promexp = promexp_0_4_3;

    promisepay_ex_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "promisepay_ex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "promisepay_ex";
              version = "0.1.0";
              sha256 =
                "a9174572de240dafcbd4c71f2b4386053c89e57cb54ac516955f4702493d90be";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''Promisepay client library for elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/psyfear/promisepay_ex";
            };
          } // packageOverrides)
      ) {};

    promisepay_ex = promisepay_ex_0_1_0;

    prop_types_0_0_11 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, tipo_0_0_6 }:
          buildMix ({
            name = "prop_types";
            version = "0.0.11";
            src = fetchHex {
              pkg = "prop_types";
              version = "0.0.11";
              sha256 =
                "d786fbef06701e21871f39c9c1bb3354966f24cd606d1b1fd7bff1cc97d2873f";
            };
            beamDeps  = [ tipo_0_0_6 ];

            meta = {
              description = ''Property Type validations and checkers for elixir
                            apps'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bakasho/prop_types";
            };
          } // packageOverrides)
      ) {};

    prop_types = prop_types_0_0_11;

    propcheck_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, proper_1_2_0 }:
          buildMix ({
            name = "propcheck";
            version = "0.0.1";
            src = fetchHex {
              pkg = "propcheck";
              version = "0.0.1";
              sha256 =
                "201b4caf355d89a1375e68e56942fd1f7c424abcaec10e88779fc3794ee5b411";
            };
            beamDeps  = [ proper_1_2_0 ];

            meta = {
              longDescription = ''PropCheck provides property based testing and
                                is an Elixir layer around PropEr. It is also
                                inspired by Quuvic`s QuickCheck Elixir
                                library.'';
              license = stdenv.lib.licenses.gpl3;
              homepage = "https://github.com/alfert/propcheck";
            };
          } // packageOverrides)
      ) {};

    propcheck = propcheck_0_0_1;

    proper_1_1_1_beta = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "proper";
            version = "1.1.1-beta";
            src = fetchHex {
              pkg = "proper";
              version = "1.1.1-beta";
              sha256 =
                "bde5c0fef0f8d804a7c06aab4f293d19f42149e5880b3412b75efa608e86d342";
            };

            meta = {
              description = ''QuickCheck-inspired property-based testing tool
                            for Erlang.'';
              license = stdenv.lib.licenses.gpl3;
              homepage = "https://github.com/manopapad/proper";
            };
          } // packageOverrides)
      ) {};

    proper_1_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "proper";
            version = "1.2.0";
            src = fetchHex {
              pkg = "proper";
              version = "1.2.0";
              sha256 =
                "cbc3766c08337806741343d330bf4bcb826155d2141be8514c4b02858aa19fd3";
            };

            meta = {
              description = ''QuickCheck-inspired property-based testing tool
                            for Erlang.'';
              license = stdenv.lib.licenses.gpl3;
              homepage = "https://github.com/manopapad/proper";
            };
          } // packageOverrides)
      ) {};

    proper = proper_1_2_0;

    proper_case_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "proper_case";
            version = "1.0.0";
            src = fetchHex {
              pkg = "proper_case";
              version = "1.0.0";
              sha256 =
                "58fd93177992e161b90d537917f691a99cae98d4c221915d6c815eac414db329";
            };

            meta = {
              longDescription = ''An Elixir library that converts keys in maps
                                between `snake_case` and `camel_case`. Useful as
                                a plug in Phoenix for converting incoming params
                                from JavaScript`s `camelCase` to Elixir`s
                                `snake_case`'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/johnnyji/proper_case";
            };
          } // packageOverrides)
      ) {};

    proper_case_1_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "proper_case";
            version = "1.0.2";
            src = fetchHex {
              pkg = "proper_case";
              version = "1.0.2";
              sha256 =
                "c59d144a9dd2a0176e9036986503dd6518428f24a2db231d0afea0974fe40542";
            };

            meta = {
              longDescription = ''An Elixir library that converts keys in maps
                                between `snake_case` and `camel_case`. Useful as
                                a plug in Phoenix for converting incoming params
                                from JavaScript`s `camelCase` to Elixir`s
                                `snake_case`'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/johnnyji/proper_case";
            };
          } // packageOverrides)
      ) {};

    proper_case = proper_case_1_0_2;

    proplist_1_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "proplist";
            version = "1.1.0";
            src = fetchHex {
              pkg = "proplist";
              version = "1.1.0";
              sha256 =
                "6fc73362d15b4810f4979ddf72ec53c1efc020657a57b7cdd1f682bd38c08298";
            };

            meta = {
              description = ''Proplist provides the complete Keyword API, but
                            for Proplists.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/knrz/proplist";
            };
          } // packageOverrides)
      ) {};

    proplist = proplist_1_1_0;

    proquint_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "proquint";
            version = "1.0.1";
            src = fetchHex {
              pkg = "proquint";
              version = "1.0.1";
              sha256 =
                "bbfd7f8bd9f5ad8597767e9265f02b2ccf0f8da18fb6c503c544f466e5a226d3";
            };

            meta = {
              longDescription = ''An elixir package that converts ids to
                                proquints, Identifiers that are Readable,
                                Spellable, and Pronounceable. More info about
                                proquints can be found at:
                                https://arxiv.org/html/0901.4016'';
              license = stdenv.lib.licenses.mit;
              homepage = "http://github.com/minhajuddin/proquint";
            };
          } // packageOverrides)
      ) {};

    proquint = proquint_1_0_1;

    protego_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          comeonin_2_0_3,
          guardian_0_10_1
        }:
          buildMix ({
            name = "protego";
            version = "0.1.0";
            src = fetchHex {
              pkg = "protego";
              version = "0.1.0";
              sha256 =
                "7ca904f04401c681e9dade528ae2dc5033063b09e4bbf16d6b442fb642b9e048";
            };
            beamDeps  = [ comeonin_2_0_3 guardian_0_10_1 ];

            meta = {
              description = ''Flexible authentication solution for
                            Elixir/Phoenix with Guardian.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/plus-eg/protego";
            };
          } // packageOverrides)
      ) {};

    protego = protego_0_1_0;

    proto_def_0_0_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          estree_2_6_0,
          poison_2_2_0
        }:
          buildMix ({
            name = "proto_def";
            version = "0.0.4";
            src = fetchHex {
              pkg = "proto_def";
              version = "0.0.4";
              sha256 =
                "155b17cd62296cc1d5ee0333a87df4b25616a6dff7863a8e7ad219437db5a37e";
            };
            beamDeps  = [ estree_2_6_0 poison_2_2_0 ];

            meta = {
              longDescription = ''ProtoDef compiler for Elixir. (mostly)
                                Compatible with
                                https://github.com/ProtoDef-io/ProtoDef.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ProtoDef-io/elixir-protodef";
            };
          } // packageOverrides)
      ) {};

    proto_def = proto_def_0_0_4;

    proto_response_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exprotobuf_1_2_7,
          phoenix_1_3_0_rc_2
        }:
          buildMix ({
            name = "proto_response";
            version = "0.1.0";
            src = fetchHex {
              pkg = "proto_response";
              version = "0.1.0";
              sha256 =
                "de301ff4c12a24fa3c92881355203d1240414fbe3fcb12aa85cf5bb533bd4df7";
            };
            beamDeps  = [ exprotobuf_1_2_7 phoenix_1_3_0_rc_2 ];

            meta = {
              longDescription = ''Asserts the given status code, that we have
                                an application/x-protobuf response and returns
                                the decoded Protobuf.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/amatalai/proto_response";
            };
          } // packageOverrides)
      ) {};

    proto_response = proto_response_0_1_0;

    protobuf_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "protobuf";
            version = "0.1.0";
            src = fetchHex {
              pkg = "protobuf";
              version = "0.1.0";
              sha256 =
                "6f6b75cd5f6c1827b2394f448b32a55863f48a821b63998cb915d083380d8f62";
            };

            meta = {
              description = ''A pure Elixir implementation of Google
                            Protobuf.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tony612/protobuf-elixir";
            };
          } // packageOverrides)
      ) {};

    protobuf = protobuf_0_1_0;

    protobuffs_0_8_2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, meck_0_8_4 }:
          buildRebar3 ({
            name = "protobuffs";
            version = "0.8.2";
            src = fetchHex {
              pkg = "protobuffs";
              version = "0.8.2";
              sha256 =
                "b77e9d03518927b290cc5bb5cc9622a177e70289100fea9ccb57873573e54553";
            };

            beamDeps  = [ meck_0_8_4 ];

            meta = {
              longDescription = ''An implementation of Google`s Protocol
                                Buffers for Erlang, based on
                                ngerakines/erlang_protobuffs.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/basho/erlang_protobuffs";
            };
          } // packageOverrides)
      ) {};

    protobuffs_0_8_4 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, meck_0_8_4 }:
          buildRebar3 ({
            name = "protobuffs";
            version = "0.8.4";
            src = fetchHex {
              pkg = "protobuffs";
              version = "0.8.4";
              sha256 =
                "9d2e7a26102287d116e3e89c61c1daf5a6bf199288e0b5d337b17f0421d70b63";
            };

            beamDeps  = [ meck_0_8_4 ];

            meta = {
              longDescription = ''An implementation of Google`s Protocol
                                Buffers for Erlang, based on
                                ngerakines/erlang_protobuffs.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/basho/erlang_protobuffs";
            };
          } // packageOverrides)
      ) {};

    protobuffs = protobuffs_0_8_4;

    protofy_test_1_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, meck_0_8_4 }:
          buildRebar3 ({
            name = "protofy_test";
            version = "1.0.0";
            src = fetchHex {
              pkg = "protofy_test";
              version = "1.0.0";
              sha256 =
                "dd2fc3e96d4c9aaf9886b97440dd202738fa12f4711af81fc3dd76c2629270d2";
            };

            beamDeps  = [ meck_0_8_4 ];

            meta = {
              description = ''Protofy testing library'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/protofy/erl_protofy_test";
            };
          } // packageOverrides)
      ) {};

    protofy_test = protofy_test_1_0_0;

    protox_0_16_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "protox";
            version = "0.16.1";
            src = fetchHex {
              pkg = "protox";
              version = "0.16.1";
              sha256 =
                "41765ff154c15127b01bcdcc34ba711a993d0b4fc45451cae32c1cbc5727a607";
            };

            meta = {
              description = ''A library for Protocol Buffers'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/EasyMile/protox";
            };
          } // packageOverrides)
      ) {};

    protox = protox_0_16_1;

    provider_asn1_0_2_2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "provider_asn1";
            version = "0.2.2";
            src = fetchHex {
              pkg = "provider_asn1";
              version = "0.2.2";
              sha256 =
                "44cc1053c8e9353a0ebafdbceb5f95117c738b337c84d5ac5c22e3a3f220020f";
            };

            meta = {
              description = ''Compile ASN.1 with Rebar3'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/knusbaum/provider_asn1";
            };
          } // packageOverrides)
      ) {};

    provider_asn1 = provider_asn1_0_2_2;

    providers_1_6_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, getopt_0_8_2 }:
          buildRebar3 ({
            name = "providers";
            version = "1.6.0";
            src = fetchHex {
              pkg = "providers";
              version = "1.6.0";
              sha256 =
                "0f6876529a613d34224de8c61d3660388eb981142360f2699486d8536050ce2f";
            };

            beamDeps  = [ getopt_0_8_2 ];

            meta = {
              description = ''Providers provider.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tsloughter/providers";
            };
          } // packageOverrides)
      ) {};

    providers = providers_1_6_0;

    prowl_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ex_doc_0_16_1,
          floki_0_9_0,
          httpoison_0_8_3
        }:
          buildMix ({
            name = "prowl";
            version = "0.0.1";
            src = fetchHex {
              pkg = "prowl";
              version = "0.0.1";
              sha256 =
                "6953a733a99fbe704f3222c1ac6a82f57f7f7f80b77b296051be6c6dd53ecf8a";
            };
            beamDeps  = [ ex_doc_0_16_1 floki_0_9_0 httpoison_0_8_3 ];

            meta = {
              longDescription = ''Elixir application for sending notifications
                                to Prowl (https://www.prowlapp.com/)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zanderxyz/elixir-prowl";
            };
          } // packageOverrides)
      ) {};

    prowl = prowl_0_0_1;

    proxy_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_0_4,
          httpoison_0_8_3,
          plug_1_3_5
        }:
          buildMix ({
            name = "proxy";
            version = "0.0.1";
            src = fetchHex {
              pkg = "proxy";
              version = "0.0.1";
              sha256 =
                "74691b18a0918d6e14df1f254ee9f342a547bc280151a4d88a540839ae75bbae";
            };
            beamDeps  = [ cowboy_1_0_4 httpoison_0_8_3 plug_1_3_5 ];

            meta = {
              description = ''Proxy plug for upstream servers'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/chadwpry/elixir-proxy";
            };
          } // packageOverrides)
      ) {};

    proxy = proxy_0_0_1;

    pryin_1_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_4,
          exprotobuf_1_2_7,
          httpoison_0_11_2,
          phoenix_1_3_0_rc_2,
          plug_1_3_5,
          recon_2_3_2
        }:
          buildMix ({
            name = "pryin";
            version = "1.0.0";
            src = fetchHex {
              pkg = "pryin";
              version = "1.0.0";
              sha256 =
                "6330de1c8577d66720d80cbffb9b968e846a9ebe3899ce8b5afde18085eca8c8";
            };
            beamDeps  = [
                          ecto_2_1_4
                          exprotobuf_1_2_7
                          httpoison_0_11_2
                          phoenix_1_3_0_rc_2
                          plug_1_3_5
                          recon_2_3_2
                        ];

            meta = {
              longDescription = ''PryIn is an Application Performance
                                Monitoring platform for your Phoenix
                                application.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pryin-io/pryin";
            };
          } // packageOverrides)
      ) {};

    pryin = pryin_1_0_0;

    psq_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "psq";
            version = "0.1.0";
            src = fetchHex {
              pkg = "psq";
              version = "0.1.0";
              sha256 =
                "56c8ab450e26ce20d4cd819022658c66302795b2217aa3f3550942a3ab9d226a";
            };

            meta = {
              description = ''A priority search queue implementation for
                            Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/shosti/psq";
            };
          } // packageOverrides)
      ) {};

    psq = psq_0_1_0;

    public_suffex_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "public_suffex";
            version = "0.0.1";
            src = fetchHex {
              pkg = "public_suffex";
              version = "0.0.1";
              sha256 =
                "f74f9440940e5c4249241b43a57c6e9cb99a9ed50f86a25c2cfde017a8410ce4";
            };

            meta = {
              longDescription = ''A module for determining the TLD given a
                                valid URL. A special thank you to @elbow-jason
                                for all his mentorship and code expertise.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/captainhurst/public_suffex";
            };
          } // packageOverrides)
      ) {};

    public_suffex = public_suffex_0_0_1;

    public_suffix_0_5_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, idna_5_0_2 }:
          buildMix ({
            name = "public_suffix";
            version = "0.5.0";
            src = fetchHex {
              pkg = "public_suffix";
              version = "0.5.0";
              sha256 =
                "51fab1eb1db9defa150faa873f29b7c980127b4f01a9b1cf791f9cf5cca9240d";
            };
            beamDeps  = [ idna_5_0_2 ];

            meta = {
              longDescription = ''Operate on domain names using the public
                                suffix rules provided by
                                https://publicsuffix.org/.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/seomoz/publicsuffix-elixir";
            };
          } // packageOverrides)
      ) {};

    public_suffix = public_suffix_0_5_0;

    publicsuffix_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "publicsuffix";
            version = "0.0.1";
            src = fetchHex {
              pkg = "publicsuffix";
              version = "0.0.1";
              sha256 =
                "c20351c883ab00a424c6eace4adb23726fbf242240bc63f583f4c07cbe0a824b";
            };

            meta = {
              description = ''Domain name parser for Elixir based on the Public
                            Suffix List.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/weppos/publicsuffix-elixir";
            };
          } // packageOverrides)
      ) {};

    publicsuffix = publicsuffix_0_0_1;

    pubnub_ex_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exjsx_3_2_1,
          httpoison_0_8_3
        }:
          buildMix ({
            name = "pubnub_ex";
            version = "0.0.2";
            src = fetchHex {
              pkg = "pubnub_ex";
              version = "0.0.2";
              sha256 =
                "83d270cfe2be6728fb96d9145371a87ddc876a97f91cdca2584cc82c2a0b91cb";
            };
            beamDeps  = [ exjsx_3_2_1 httpoison_0_8_3 ];

            meta = {
              description = ''A pubsub tool for pubnub.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ryuone/pubnub_ex";
            };
          } // packageOverrides)
      ) {};

    pubnub_ex = pubnub_ex_0_0_2;

    pubnux_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_9_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "pubnux";
            version = "0.0.1";
            src = fetchHex {
              pkg = "pubnux";
              version = "0.0.1";
              sha256 =
                "1d5f9373e174cf581f5ad247aa90fcbe53e09cc9cff6020cbe1d8a2d1f83192e";
            };
            beamDeps  = [ httpoison_0_9_2 poison_2_2_0 ];

            meta = {
              description = ''A wrapper for PubNub`s API'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/liftitapp/pubnux";
            };
          } // packageOverrides)
      ) {};

    pubnux = pubnux_0_0_1;

    pubsub_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pubsub";
            version = "0.0.2";
            src = fetchHex {
              pkg = "pubsub";
              version = "0.0.2";
              sha256 =
                "2072bf67d5d4b6d41c81f0e89697d72ca323c5640e883b0d0cec7d43cf6c8ae8";
            };

            meta = {
              description = ''Publish-Subscribe utility'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/simonewebdesign/elixir_pubsub";
            };
          } // packageOverrides)
      ) {};

    pubsub = pubsub_0_0_2;

    pubsub_plus_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, pubsub_0_0_2 }:
          buildMix ({
            name = "pubsub_plus";
            version = "0.0.1";
            src = fetchHex {
              pkg = "pubsub_plus";
              version = "0.0.1";
              sha256 =
                "1f0669631b6efebc581ef599c62d9e822162a93ba56daeb63414bec60af5e72d";
            };
            beamDeps  = [ pubsub_0_0_2 ];

            meta = {
              description = ''Pubsub library with nested topic support'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/marconi/elixir_pubsub_plus";
            };
          } // packageOverrides)
      ) {};

    pubsub_plus = pubsub_plus_0_0_1;

    pulse_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, sonic_0_1_3 }:
          buildMix ({
            name = "pulse";
            version = "0.1.3";
            src = fetchHex {
              pkg = "pulse";
              version = "0.1.3";
              sha256 =
                "8d9ab6b8f5b3e8da2feedb32062b97243bfc8c250ad5bab09fd61944e51e6aa0";
            };
            beamDeps  = [ sonic_0_1_3 ];

            meta = {
              longDescription = ''Service registration and discovery library
                                for Elixir. Relies on etcd as an external
                                service registry.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/heroiclabs/pulse";
            };
          } // packageOverrides)
      ) {};

    pulse = pulse_0_1_3;

    pulse_libs_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "pulse_libs";
            version = "1.0.0";
            src = fetchHex {
              pkg = "pulse_libs";
              version = "1.0.0";
              sha256 =
                "fda2aee58af502bb58752f6a6fcc3f97b2d6eed1a63d39ab91937e5811dbb2fc";
            };

            meta = {
              description = ''Elixir standard libraries instrumented with
                            PULSE.'';
              license = stdenv.lib.licenses.asl20;
            };
          } // packageOverrides)
      ) {};

    pulse_libs = pulse_libs_1_0_0;

    push_hub_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_9_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "push_hub";
            version = "0.1.0";
            src = fetchHex {
              pkg = "push_hub";
              version = "0.1.0";
              sha256 =
                "2dea79a43a795c6c49f2afaae14d7835cc80de3787fec8b4324a12802171ee93";
            };
            beamDeps  = [ httpoison_0_9_2 poison_2_2_0 ];

            meta = {
              description = ''Push Service Http Client for Elixir (Aliyun
                            Push)'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/reteq/push-hub";
            };
          } // packageOverrides)
      ) {};

    push_hub = push_hub_0_1_0;

    pusher_0_1_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exjsx_3_2_1,
          httpoison_0_11_2,
          signaturex_1_1_0
        }:
          buildMix ({
            name = "pusher";
            version = "0.1.3";
            src = fetchHex {
              pkg = "pusher";
              version = "0.1.3";
              sha256 =
                "1443c9652d3a3d03fcfef0e8dca817affa80d1c4e0eb582282af0d9c69a087f3";
            };
            beamDeps  = [ exjsx_3_2_1 httpoison_0_11_2 signaturex_1_1_0 ];

            meta = {
              description = ''Pusher HTTP client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/edgurgel/pusher";
            };
          } // packageOverrides)
      ) {};

    pusher = pusher_0_1_3;

    pushex_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          apns_0_9_4,
          httpoison_0_11_2,
          poison_1_0_2,
          poolboy_1_5_1,
          vex_0_6_0
        }:
          buildMix ({
            name = "pushex";
            version = "0.2.0";
            src = fetchHex {
              pkg = "pushex";
              version = "0.2.0";
              sha256 =
                "951d91478f17f59a3a4759a74c5b548c47f0821175c72eb3cdc810bfd4e1642e";
            };
            beamDeps  = [
                          apns_0_9_4
                          httpoison_0_11_2
                          poison_1_0_2
                          poolboy_1_5_1
                          vex_0_6_0
                        ];

            meta = {
              description = ''Mobile push notification library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tuvistavie/pushex";
            };
          } // packageOverrides)
      ) {};

    pushex = pushex_0_2_0;

    pushito_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          chatterbox_0_4_2,
          joken_1_5_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "pushito";
            version = "0.1.0";
            src = fetchHex {
              pkg = "pushito";
              version = "0.1.0";
              sha256 =
                "8d74d6a43b0838949137880a59f830dafbb58770ac2662ef32d192c56da3e7e0";
            };
            beamDeps  = [ chatterbox_0_4_2 joken_1_5_0 poison_3_1_0 ];

            meta = {
              longDescription = ''APNs provider for Apple Push Notification
                                services (APNs) in Elixir. It supports the HTTP2
                                API.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/inaka/pushito";
            };
          } // packageOverrides)
      ) {};

    pushito = pushito_0_1_0;

    pynchon_0_5_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "pynchon";
            version = "0.5.0";
            src = fetchHex {
              pkg = "pynchon";
              version = "0.5.0";
              sha256 =
                "5c5398ae667aaecf0acb8b15ea2b286f7525411bdebf079b0aae168198b51a7f";
            };

            meta = {
              description = ''A collection of arrow macros.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/quasiquoting/pynchon";
            };
          } // packageOverrides)
      ) {};

    pynchon = pynchon_0_5_0;

    qdate_0_4_3 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          erlang_localtime_1_0_0,
          erlware_commons_0_20_0
        }:
          buildRebar3 ({
            name = "qdate";
            version = "0.4.3";
            src = fetchHex {
              pkg = "qdate";
              version = "0.4.3";
              sha256 =
                "0bbad4929a7cf2432c832fe45310080776c64973037c5b1aa21bbe05dbc61401";
            };

            beamDeps  = [ erlang_localtime_1_0_0 erlware_commons_0_20_0 ];

            meta = {
              description = ''Simple Date and Timezone handling for Erlang'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/choptastic/qdate";
            };
          } // packageOverrides)
      ) {};

    qdate = qdate_0_4_3;

    qdate_localtime_1_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "qdate_localtime";
            version = "1.1.0";
            src = fetchHex {
              pkg = "qdate_localtime";
              version = "1.1.0";
              sha256 =
                "91928e066da6bcc745ff18b7c368347457caf9250ad00950e9da18e129d49ec5";
            };

            meta = {
              longDescription = ''Erlang library for conversion from one local
                                time to another (forked specifically for qdate
                                compatibility)'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/choptastic/qdate_localtime";
            };
          } // packageOverrides)
      ) {};

    qdate_localtime = qdate_localtime_1_1_0;

    qex_0_3_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "qex";
            version = "0.3.3";
            src = fetchHex {
              pkg = "qex";
              version = "0.3.3";
              sha256 =
                "64090647a5ef5d95ba377f39ec9ed9c2347fe407cf5ae13ee21685fa681942b7";
            };

            meta = {
              longDescription = ''A `:queue` wrapper with improvements in API
                                and addition of Protocol implementations'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/princemaple/elixir-queue";
            };
          } // packageOverrides)
      ) {};

    qex = qex_0_3_3;

    qiita_ex_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exjsx_3_2_1,
          httpoison_0_11_2
        }:
          buildMix ({
            name = "qiita_ex";
            version = "0.0.2";
            src = fetchHex {
              pkg = "qiita_ex";
              version = "0.0.2";
              sha256 =
                "0bb9a5535c0915c426ff13350b907cbd2b455bb99d8bcb8324ffadb6c9bcf1eb";
            };
            beamDeps  = [ exjsx_3_2_1 httpoison_0_11_2 ];

            meta = {
              description = ''Qiita API v2 Interface for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ma2gedev/qiita_ex";
            };
          } // packageOverrides)
      ) {};

    qiita_ex = qiita_ex_0_0_2;

    qiniu_0_3_6 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "qiniu";
            version = "0.3.6";
            src = fetchHex {
              pkg = "qiniu";
              version = "0.3.6";
              sha256 =
                "f4bd1cce8bb1365e4082bc8382900f6f314cd2b2a5edfd0990b57b395586666d";
            };
            beamDeps  = [ httpoison_0_11_2 poison_2_2_0 ];

            meta = {
              description = ''Qiniu Resource (Cloud) Storage SDK for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tony612/qiniu";
            };
          } // packageOverrides)
      ) {};

    qiniu = qiniu_0_3_6;

    qlc_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "qlc";
            version = "1.0.1";
            src = fetchHex {
              pkg = "qlc";
              version = "1.0.1";
              sha256 =
                "575f2697f2fe13a0e978c903155aa2bc4818c5ac5a1c514e4066ceace2d891d1";
            };

            meta = {
              description = ''QLC interface for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/k1complete/qlc";
            };
          } // packageOverrides)
      ) {};

    qlc = qlc_1_0_1;

    qsp_0_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, cowlib_1_3_0 }:
          buildRebar3 ({
            name = "qsp";
            version = "0.1.0";
            src = fetchHex {
              pkg = "qsp";
              version = "0.1.0";
              sha256 =
                "dc5591cd35101d682b17aa91b65fb46b94bba8eb307a2db06bfd71f8188f765d";
            };

            beamDeps  = [ cowlib_1_3_0 ];

            meta = {
              description = ''Enhanced query string parser'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/artemeff/qsp";
            };
          } // packageOverrides)
      ) {};

    qsp = qsp_0_1_0;

    quadratic_equation_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "quadratic_equation";
            version = "0.1.0";
            src = fetchHex {
              pkg = "quadratic_equation";
              version = "0.1.0";
              sha256 =
                "47e0658d9bd274e7e020e600d15758a500f5da21453900b3d12c816b6d89d894";
            };

            meta = {
              description = ''Example of creating a Mix-application - from
                            initialization to publication.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/folklore/quadratic_equation";
            };
          } // packageOverrides)
      ) {};

    quadratic_equation = quadratic_equation_0_1_0;

    quantum_1_8_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, calendar_0_17_2 }:
          buildMix ({
            name = "quantum";
            version = "1.8.1";
            src = fetchHex {
              pkg = "quantum";
              version = "1.8.1";
              sha256 =
                "de6af2942d3a49444f050c18a6013e3b39c1e1824fadb7e53dffe09376a9f91c";
            };
            beamDeps  = [ calendar_0_17_2 ];

            meta = {
              description = ''Cron-like job scheduler for Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/c-rack/quantum-elixir";
            };
          } // packageOverrides)
      ) {};

    quantum_2_0_0_beta_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          calendar_0_17_2,
          crontab_1_1_0,
          timex_3_1_15
        }:
          buildMix ({
            name = "quantum";
            version = "2.0.0-beta.1";
            src = fetchHex {
              pkg = "quantum";
              version = "2.0.0-beta.1";
              sha256 =
                "6c42d3787575b82e0dda182aa423a42a07a3622fadfbfde370e08795c733e633";
            };
            beamDeps  = [ calendar_0_17_2 crontab_1_1_0 timex_3_1_15 ];

            meta = {
              description = ''Cron-like job scheduler for Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/c-rack/quantum-elixir";
            };
          } // packageOverrides)
      ) {};

    quantum = quantum_2_0_0_beta_1;

    quark_2_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "quark";
            version = "2.2.0";
            src = fetchHex {
              pkg = "quark";
              version = "2.2.0";
              sha256 =
                "cc35b7e375a4c229228c4e6de3b0f8a82e83ac190990b5c29f85aedb883c8b73";
            };

            meta = {
              description = ''Common combinators for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/expede/quark";
            };
          } // packageOverrides)
      ) {};

    quark = quark_2_2_0;

    que_0_3_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          amnesia_0_2_7,
          ex_utils_0_1_6
        }:
          buildMix ({
            name = "que";
            version = "0.3.2";
            src = fetchHex {
              pkg = "que";
              version = "0.3.2";
              sha256 =
                "64fdaa92c41ace516afa4e7efa42068b17d39c1a9e924fc7c0e9a2d096b88ae0";
            };
            beamDeps  = [ amnesia_0_2_7 ex_utils_0_1_6 ];

            meta = {
              description = ''Simple Background Job Processing with Mnesia'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sheharyarn/que";
            };
          } // packageOverrides)
      ) {};

    que = que_0_3_2;

    quetelet_0_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          earmark_1_2_2,
          ex_doc_0_16_1
        }:
          buildMix ({
            name = "quetelet";
            version = "0.1.2";
            src = fetchHex {
              pkg = "quetelet";
              version = "0.1.2";
              sha256 =
                "90cf48a8cf38cf8670118e50e7564660501f01f41dc199f498f658f75e6ca0be";
            };
            beamDeps  = [ earmark_1_2_2 ex_doc_0_16_1 ];

            meta = {
              description = ''Statistics modules in Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/kenju/elixir_quetelet";
            };
          } // packageOverrides)
      ) {};

    quetelet = quetelet_0_1_2;

    queue_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "queue";
            version = "0.0.1";
            src = fetchHex {
              pkg = "queue";
              version = "0.0.1";
              sha256 =
                "a383d4b4a64e7639e66f314ae9e38e387453bcce6c96173e3d90b497c82bed9b";
            };

            meta = {
              description = ''Elixir wrapper for erlang double sided FIFO
                            queue'';

            };
          } // packageOverrides)
      ) {};

    queue = queue_0_0_1;

    queuex_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "queuex";
            version = "0.2.0";
            src = fetchHex {
              pkg = "queuex";
              version = "0.2.0";
              sha256 =
                "e40b25befc34ecff962c92536e6a520967dd2d6031cb70a58be62269a6aec623";
            };

            meta = {
              description = ''Priority Queue'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/falood/queuex";
            };
          } // packageOverrides)
      ) {};

    queuex = queuex_0_2_0;

    quick_alias_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "quick_alias";
            version = "0.1.0";
            src = fetchHex {
              pkg = "quick_alias";
              version = "0.1.0";
              sha256 =
                "04ec05426722c1f3d810ebf246ecdf8fa33b6ef56a0ffdff1bca7a8fce844086";
            };

            meta = {
              description = ''Quick aliases for .iex.exs'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/thoughtbot/quick_alias";
            };
          } // packageOverrides)
      ) {};

    quick_alias = quick_alias_0_1_0;

    quick_chex_0_4_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "quick_chex";
            version = "0.4.1";
            src = fetchHex {
              pkg = "quick_chex";
              version = "0.4.1";
              sha256 =
                "be71cd4b4019bbd1aee993184465d8ef367f6e5c3e46f2a15eb23f9e29c853e8";
            };

            meta = {
              description = ''property based testing for elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/matteosister/quick_chex";
            };
          } // packageOverrides)
      ) {};

    quick_chex = quick_chex_0_4_1;

    quickbooks_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_10_0,
          oauther_1_1_0,
          poison_2_2_0
        }:
          buildMix ({
            name = "quickbooks";
            version = "0.1.1";
            src = fetchHex {
              pkg = "quickbooks";
              version = "0.1.1";
              sha256 =
                "3efc2cfb9178ad92db610c713808a2399262898929289049c7ca1e0e414c12fa";
            };
            beamDeps  = [ httpoison_0_10_0 oauther_1_1_0 poison_2_2_0 ];

            meta = {
              description = ''Quickbooks Online REST API V3 for Elixir IN
                            PROGRESS(Not for production yet)'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/alexvko/quickbooks-elixir";
            };
          } // packageOverrides)
      ) {};

    quickbooks = quickbooks_0_1_1;

    quickrand_1_5_4 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "quickrand";
            version = "1.5.4";
            src = fetchHex {
              pkg = "quickrand";
              version = "1.5.4";
              sha256 =
                "2657dca4544bf98ec44328f95f2c94a07accece452195c599e43799a760b28b0";
            };

            meta = {
              longDescription = ''Quick Random Number Generation: Provides a
                                simple interface to call efficient random number
                                generation functions based on the context.
                                Proper random number seeding is enforced.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/okeuday/quickrand";
            };
          } // packageOverrides)
      ) {};

    quickrand_1_6_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "quickrand";
            version = "1.6.0";
            src = fetchHex {
              pkg = "quickrand";
              version = "1.6.0";
              sha256 =
                "f47160c4c7c0b53cb03d85442360216c40842df6e0b65eebc43d746bb6e2dde2";
            };

            meta = {
              longDescription = ''Quick Random Number Generation: Provides a
                                simple interface to call efficient random number
                                generation functions based on the context.
                                Proper random number seeding is enforced.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/okeuday/quickrand";
            };
          } // packageOverrides)
      ) {};

    quickrand_1_7_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "quickrand";
            version = "1.7.1";
            src = fetchHex {
              pkg = "quickrand";
              version = "1.7.1";
              sha256 =
                "5571fd17281979c437e63e6a19c63448f59057f41934fa27f087505b5d3d8899";
            };

            meta = {
              longDescription = ''Quick Random Number Generation: Provides a
                                simple interface to call efficient random number
                                generation functions based on the context.
                                Proper random number seeding is enforced.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/okeuday/quickrand";
            };
          } // packageOverrides)
      ) {};

    quickrand = quickrand_1_7_1;

    quinn_0_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "quinn";
            version = "0.0.4";
            src = fetchHex {
              pkg = "quinn";
              version = "0.0.4";
              sha256 =
                "6cafeb8e6d9635b3a26caf1768c70751f0bbdc6afb9acd7067a52316b22c8de2";
            };

            meta = {
              description = ''Quinn is a simple XML parser mainly used to parse
                            rss/atom feeds.'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/nhu313/Quinn";
            };
          } // packageOverrides)
      ) {};

    quinn_1_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "quinn";
            version = "1.0.2";
            src = fetchHex {
              pkg = "quinn";
              version = "1.0.2";
              sha256 =
                "d7f1fd1a0f2aed1379abcc2ca95bf35575fcac5f83aa7be6b233a5d262e44d73";
            };

            meta = {
              description = ''Quinn is a simple XML parser mainly used to parse
                            rss/atom feeds.'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/nhu313/Quinn";
            };
          } // packageOverrides)
      ) {};

    quinn = quinn_1_0_2;

    quintana_0_2_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, folsom_0_8_3 }:
          buildRebar3 ({
            name = "quintana";
            version = "0.2.1";
            src = fetchHex {
              pkg = "quintana";
              version = "0.2.1";
              sha256 =
                "d4683eb33c71f6cab3b17b896b4fa9180f17a0a8b086440bfe0c5675182f0194";
            };

            beamDeps  = [ folsom_0_8_3 ];

            meta = {
              description = ''Wrapper around some Folsom functions'';

            };
          } // packageOverrides)
      ) {};

    quintana = quintana_0_2_1;

    quixir_0_9_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, pollution_0_9_1 }:
          buildMix ({
            name = "quixir";
            version = "0.9.2";
            src = fetchHex {
              pkg = "quixir";
              version = "0.9.2";
              sha256 =
                "262faeecff393e7734760a60ce818d90adb5bddfcef9f4d8ce5eccd19aee70b2";
            };
            beamDeps  = [ pollution_0_9_1 ];

            meta = {
              description = ''A simple property-based testing framework written
                            in pure Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/pragdave/quixir";
            };
          } // packageOverrides)
      ) {};

    quixir = quixir_0_9_2;

    ra_0_3_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ra";
            version = "0.3.2";
            src = fetchHex {
              pkg = "ra";
              version = "0.3.2";
              sha256 =
                "696cc4fd2dc1a36c705af7e7a1551bd054ad245841fccbc5d9d210f375c2dcf4";
            };

            meta = {
              description = ''Ra is a framework for building command line
                            applications.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/NobbZ/ra";
            };
          } // packageOverrides)
      ) {};

    ra = ra_0_3_2;

    rabbitElixir_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, exjsx_3_1_0 }:
          buildMix ({
            name = "rabbitElixir";
            version = "1.0.1";
            src = fetchHex {
              pkg = "rabbitElixir";
              version = "1.0.1";
              sha256 =
                "bc0ddae7fa0b869a6688db2e5d909d375ff0692a959aa768eed586bcfd2d0a2f";
            };
            beamDeps  = [ exjsx_3_1_0 ];

            meta = {
              description = ''Another Zawgyi <=> Unicode Converter '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Rabbit-Converter/Rabbit-Elixir";
            };
          } // packageOverrides)
      ) {};

    rabbitElixir = rabbitElixir_1_0_1;

    rabbit_common_3_5_6 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "rabbit_common";
            version = "3.5.6";
            src = fetchHex {
              pkg = "rabbit_common";
              version = "3.5.6";
              sha256 =
                "9335ab3ebc4e8e140d7bc9b1b0e7ee99c0aa87d0a746b704184121ba35c04f1c";
            };

            meta = {
              description = ''Modules shared by rabbitmq-server and
                            rabbitmq-erlang-client'';
              license = stdenv.lib.licenses.mpl11;
              homepage = "http://www.rabbitmq.com/";
            };
          } // packageOverrides)
      ) {};

    rabbit_common_3_6_10 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex }:
          buildErlangMk ({
            name = "rabbit_common";
            version = "3.6.10";
            src = fetchHex {
              pkg = "rabbit_common";
              version = "3.6.10";
              sha256 =
                "ac740d08db33808ec933015ddfa62d325420eebba7b6931d7c8c067500ad2971";
            };

            meta = {
              description = ''Modules shared by rabbitmq-server and
                            rabbitmq-erlang-client'';
              license = stdenv.lib.licenses.mpl11;
              homepage = "http://www.rabbitmq.com/";
            };
          } // packageOverrides)
      ) {};

    rabbit_common = rabbit_common_3_6_10;

    rabbit_common_3_6_8 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex }:
          buildErlangMk ({
            name = "rabbit_common";
            version = "3.6.8";
            src = fetchHex {
              pkg = "rabbit_common";
              version = "3.6.8";
              sha256 =
                "8deb76a2dae896ed06f5c89e3000aef115266107e341c541a53c2748e5731ae6";
            };

            meta = {
              description = ''Modules shared by rabbitmq-server and
                            rabbitmq-erlang-client'';
              license = stdenv.lib.licenses.mpl11;
              homepage = "http://www.rabbitmq.com/";
            };
          } // packageOverrides)
      ) {};

    rabbitmq_fabric_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, amqp_0_2_2 }:
          buildMix ({
            name = "rabbitmq_fabric";
            version = "0.0.1";
            src = fetchHex {
              pkg = "rabbitmq_fabric";
              version = "0.0.1";
              sha256 =
                "88baace02f40b191486f46d20aea1f48eea9bb14fff49f7c07f5aa306cf1d164";
            };
            beamDeps  = [ amqp_0_2_2 ];

            meta = {
              description = ''a DSL and some helpers to build reliable and
                            solid RabbitMQ consumers'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/matteosister/rabbitmq_fabric";
            };
          } // packageOverrides)
      ) {};

    rabbitmq_fabric = rabbitmq_fabric_0_0_1;

    rackla_1_2_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          hackney_1_8_6,
          plug_1_3_5,
          poison_2_2_0
        }:
          buildMix ({
            name = "rackla";
            version = "1.2.1";
            src = fetchHex {
              pkg = "rackla";
              version = "1.2.1";
              sha256 =
                "7f48350df206855efd31543c60b6f7563e44c55ffa6a0985f1746b8ce85edbad";
            };
            beamDeps  = [ cowboy_1_1_2 hackney_1_8_6 plug_1_3_5 poison_2_2_0
                      ];

            meta = {
              description = ''Rackla is library for building API-gateways.'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/AntonFagerberg/rackla";
            };
          } // packageOverrides)
      ) {};

    rackla = rackla_1_2_1;

    radio_thermostat_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "radio_thermostat";
            version = "0.1.1";
            src = fetchHex {
              pkg = "radio_thermostat";
              version = "0.1.1";
              sha256 =
                "223cb4b3795d5ab18ed6e086b8094c978d948cce8d4a2b66d558aed97fe889aa";
            };
            beamDeps  = [ httpoison_0_11_2 poison_2_2_0 ];

            meta = {
              description = ''Communicate with a Radio Thermostat over the
                            LAN'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/NationalAssociationOfRealtors/radio_thermostat";
            };
          } // packageOverrides)
      ) {};

    radio_thermostat = radio_thermostat_0_1_1;

    radius_0_0_13 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex }:
          buildErlangMk ({
            name = "radius";
            version = "0.0.13";
            src = fetchHex {
              pkg = "radius";
              version = "0.0.13";
              sha256 =
                "d6e8427aaa9d23af2a6b6e8b6c0b6dae957701c6314b806e4f2aad4b91bbc3f2";
            };

            meta = {
              description = ''RADIUS'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/ates/radius";
            };
          } // packageOverrides)
      ) {};

    radius = radius_0_0_13;

    radpath_0_0_5 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, excoveralls_0_7_0
        }:
          buildMix ({
            name = "radpath";
            version = "0.0.5";
            src = fetchHex {
              pkg = "radpath";
              version = "0.0.5";
              sha256 =
                "0da59ca494b833988c9e2b64e075a63949adf8716bf4470d738754723de9bdca";
            };
            beamDeps  = [ excoveralls_0_7_0 ];

            meta = {
              description = ''A path library for Elixir inspired by Python path
                            libraries '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lowks/Radpath";
            };
          } // packageOverrides)
      ) {};

    radpath = radpath_0_0_5;

    raft_fleet_0_1_16 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          croma_0_6_2,
          rafted_value_0_2_0
        }:
          buildMix ({
            name = "raft_fleet";
            version = "0.1.16";
            src = fetchHex {
              pkg = "raft_fleet";
              version = "0.1.16";
              sha256 =
                "1a5c8f599bc250b5f0cd5093776e45274a33ddd560fbe0a01432984b11559026";
            };
            beamDeps  = [ croma_0_6_2 rafted_value_0_2_0 ];

            meta = {
              description = ''A fleet of Raft consensus groups'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    raft_fleet = raft_fleet_0_1_16;

    rafted_value_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, croma_0_6_2 }:
          buildMix ({
            name = "rafted_value";
            version = "0.2.0";
            src = fetchHex {
              pkg = "rafted_value";
              version = "0.2.0";
              sha256 =
                "6b0ba3b09ba32d706f81ea68ccad3c92f1700f81a39acc5510c9566817178d47";
            };
            beamDeps  = [ croma_0_6_2 ];

            meta = {
              description = ''Replicated and synchronized values wrapped by
                            processes'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    rafted_value = rafted_value_0_2_0;

    rails_4_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, plug_1_3_5 }:
          buildMix ({
            name = "rails";
            version = "4.2.0";
            src = fetchHex {
              pkg = "rails";
              version = "4.2.0";
              sha256 =
                "731692769aa106a20c87b12dca15336fd1d16a7f02e2615ad76f6ce83a2b0b46";
            };
            beamDeps  = [ plug_1_3_5 ];

            meta = {
              longDescription = ''A plug to get your plug/phoenix applications
                                performance more in line with Rails.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/BlakeWilliams/rails";
            };
          } // packageOverrides)
      ) {};

    rails = rails_4_2_0;

    rails_to_iana_tz_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, csv_1_4_4 }:
          buildMix ({
            name = "rails_to_iana_tz";
            version = "0.1.0";
            src = fetchHex {
              pkg = "rails_to_iana_tz";
              version = "0.1.0";
              sha256 =
                "e06e572999ea96b068b9f976cd120e8841958144d837cfc5f6598fa03fc12c25";
            };
            beamDeps  = [ csv_1_4_4 ];

            meta = {
              description = ''converts rails US timezones to the iana
                            equivalent which is useful for elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/newshipt/rails_to_iana_tz";
            };
          } // packageOverrides)
      ) {};

    rails_to_iana_tz = rails_to_iana_tz_0_1_0;

    rain_0_1_5 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_10_0,
          temp_0_4_3,
          uuid_1_1_7
        }:
          buildMix ({
            name = "rain";
            version = "0.1.5";
            src = fetchHex {
              pkg = "rain";
              version = "0.1.5";
              sha256 =
                "c1ad418dea73a1ee3c3c851ce63e8ebb8ef6e4eb17e5b4ca638fbd40ceca7a88";
            };
            beamDeps  = [ httpoison_0_10_0 temp_0_4_3 uuid_1_1_7 ];

            meta = {
              description = ''Downloader'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/techno-tanoC/rain";
            };
          } // packageOverrides)
      ) {};

    rain = rain_0_1_5;

    ralitobu_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ralitobu";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ralitobu";
              version = "0.1.0";
              sha256 =
                "c131ef38e9f9e438e7479ba34430c7c874d1646670d6636a8cc98db2f113d075";
            };

            meta = {
              description = ''The Rate Limiter with Token Bucket algorithm'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/asaaki/ralitobu";
            };
          } // packageOverrides)
      ) {};

    ralitobu = ralitobu_0_1_0;

    ralitobu_plug_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          plug_1_3_5,
          ralitobu_0_1_0
        }:
          buildMix ({
            name = "ralitobu_plug";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ralitobu_plug";
              version = "0.1.0";
              sha256 =
                "f6c425f0dea74222243ffb3d4aaefd24b5ee0547ec71ac78896f1cfe02821e74";
            };
            beamDeps  = [ plug_1_3_5 ralitobu_0_1_0 ];

            meta = {
              description = ''Elixir Plug for Ralitobu, the Rate Limiter with
                            Token Bucket algorithm'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/asaaki/ralitobu_plug";
            };
          } // packageOverrides)
      ) {};

    ralitobu_plug = ralitobu_plug_0_1_0;

    rampart_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, plug_1_3_5 }:
          buildMix ({
            name = "rampart";
            version = "1.0.1";
            src = fetchHex {
              pkg = "rampart";
              version = "1.0.1";
              sha256 =
                "0dbeab3ee979c90165b36860d84845fecb16403e8abb4d2147d187a3f4c8e738";
            };
            beamDeps  = [ plug_1_3_5 ];

            meta = {
              description = ''A simple yet flexible authorization library for
                            Plug applications.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pareeohnos/rampart";
            };
          } // packageOverrides)
      ) {};

    rampart = rampart_1_0_1;

    ranch_1_1_0 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex }:
          buildErlangMk ({
            name = "ranch";
            version = "1.1.0";
            src = fetchHex {
              pkg = "ranch";
              version = "1.1.0";
              sha256 =
                "98ade939e63e6567da5dec5bc5bd93cbdc53d53f8b1aa998adec60dc4057f048";
            };

            meta = {
              description = ''Socket acceptor pool for TCP protocols.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/ninenines/ranch";
            };
          } // packageOverrides)
      ) {};

    ranch_1_2_1 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex }:
          buildErlangMk ({
            name = "ranch";
            version = "1.2.1";
            src = fetchHex {
              pkg = "ranch";
              version = "1.2.1";
              sha256 =
                "f602d057615ce737945c239e9c8155d3f5300fc5b1255abf81f2a9d0d08e5b04";
            };

            meta = {
              description = ''Socket acceptor pool for TCP protocols.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/ninenines/ranch";
            };
          } // packageOverrides)
      ) {};

    ranch_1_3_1 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex }:
          buildErlangMk ({
            name = "ranch";
            version = "1.3.1";
            src = fetchHex {
              pkg = "ranch";
              version = "1.3.1";
              sha256 =
                "fd3fbb32df91aa12851d3c0c4a190d5fc05cd0712c08984375b884d7642ca3ee";
            };

            meta = {
              description = ''Socket acceptor pool for TCP protocols.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/ninenines/ranch";
            };
          } // packageOverrides)
      ) {};

    ranch_1_3_2 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex }:
          buildErlangMk ({
            name = "ranch";
            version = "1.3.2";
            src = fetchHex {
              pkg = "ranch";
              version = "1.3.2";
              sha256 =
                "6e56493a862433fccc3aca3025c946d6720d8eedf6e3e6fb911952a7071c357f";
            };

            meta = {
              description = ''Socket acceptor pool for TCP protocols.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/ninenines/ranch";
            };
          } // packageOverrides)
      ) {};

    ranch_1_4_0 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex }:
          buildErlangMk ({
            name = "ranch";
            version = "1.4.0";
            src = fetchHex {
              pkg = "ranch";
              version = "1.4.0";
              sha256 =
                "53ad9c80918ea2b6d11e0c225d4396473c288d02c44c9ca5eb0aa2e1c85fecba";
            };

            meta = {
              description = ''Socket acceptor pool for TCP protocols.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/ninenines/ranch";
            };
          } // packageOverrides)
      ) {};

    ranch = ranch_1_4_0;

    rand_compat_0_0_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "rand_compat";
            version = "0.0.1";
            src = fetchHex {
              pkg = "rand_compat";
              version = "0.0.1";
              sha256 =
                "8f3d7fcfeaa7a3b5be4d09ba642726bd05e387ebd022f766d4ca5ad08d6dc646";
            };

            meta = {
              description = ''Erlang 18 random compatibility library.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/lasp-lang/rand_compat";
            };
          } // packageOverrides)
      ) {};

    rand_compat = rand_compat_0_0_1;

    random_0_2_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, tinymt_0_3_1 }:
          buildMix ({
            name = "random";
            version = "0.2.3";
            src = fetchHex {
              pkg = "random";
              version = "0.2.3";
              sha256 =
                "0d8665fc2a59881b00e10a7857a4a9a7197542f5f09cfda9ff3e9c96ee92aa12";
            };
            beamDeps  = [ tinymt_0_3_1 ];

            meta = {
              longDescription = ''This module contains pseudo-random number
                                generators for various distributions ported from
                                Python 3 random module for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/yuce/random";
            };
          } // packageOverrides)
      ) {};

    random = random_0_2_3;

    random_bytes_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "random_bytes";
            version = "1.0.0";
            src = fetchHex {
              pkg = "random_bytes";
              version = "1.0.0";
              sha256 =
                "f7ee489fd5ff040ce1c84090032ef3ce6b7fc295ae056e6028e801731d0ed9b5";
            };

            meta = {
              description = ''Generate random strings in a few different
                            formats.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/duff/random_bytes";
            };
          } // packageOverrides)
      ) {};

    random_bytes = random_bytes_1_0_0;

    random_gib_0_0_8 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "random_gib";
            version = "0.0.8";
            src = fetchHex {
              pkg = "random_gib";
              version = "0.0.8";
              sha256 =
                "7b5279e48994000a96aa26c6a5dc57111721f1532ebb8b4d21414b89e3b58da1";
            };

            meta = {
              longDescription = ''Just a single module for some simple (not
                                crypto strong) random things, e.g.
                                RandomGib.Get.some_letters(5),
                                RandomGib.Get.one_of(src),
                                RandomGib.Get.some_of(src),
                                RandomGib.Get.some_characters(100). Probably not
                                for use in production.'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    random_gib = random_gib_0_0_8;

    random_puppy_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_3_0_2,
          json_0_3_3
        }:
          buildMix ({
            name = "random_puppy";
            version = "0.1.0";
            src = fetchHex {
              pkg = "random_puppy";
              version = "0.1.0";
              sha256 =
                "4b18f2d0efe3753db4f922eae5f4d845c5c467780f8c5c86b92b042cd8069d10";
            };
            beamDeps  = [ httpotion_3_0_2 json_0_3_3 ];

            meta = {
              description = ''Get a URL to a random puppy image.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/melvinsh/random_puppy";
            };
          } // packageOverrides)
      ) {};

    random_puppy = random_puppy_0_1_0;

    random_string_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "random_string";
            version = "0.1.0";
            src = fetchHex {
              pkg = "random_string";
              version = "0.1.0";
              sha256 =
                "3ca2ba936f1f8747bc345f23203c527ef3a54a9d3959c7200db0c3e1f0da0f51";
            };

            meta = {
              description = ''Generates random string (or a stream of
                            characters) of desired character sets.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sylph01/random_string";
            };
          } // packageOverrides)
      ) {};

    random_string = random_string_0_1_0;

    random_user_0_3_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_3_0_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "random_user";
            version = "0.3.3";
            src = fetchHex {
              pkg = "random_user";
              version = "0.3.3";
              sha256 =
                "26d420d4b16e50fe4be4a8f240d2b14628c14934a41c61a53ba0c176a25e7fbb";
            };
            beamDeps  = [ httpotion_3_0_2 poison_3_1_0 ];

            meta = {
              description = ''Random User API client for Elixir
                            applications.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/katgironpe/random_user";
            };
          } // packageOverrides)
      ) {};

    random_user = random_user_0_3_3;

    random_user_api_1_2_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ex_doc_0_15_1,
          httpoison_0_11_2,
          jsx_2_8_2
        }:
          buildMix ({
            name = "random_user_api";
            version = "1.2.1";
            src = fetchHex {
              pkg = "random_user_api";
              version = "1.2.1";
              sha256 =
                "245911fd86da72f56ccfd0a9df0cfe3b499e257f0212373eec28b94f9623fb55";
            };
            beamDeps  = [ ex_doc_0_15_1 httpoison_0_11_2 jsx_2_8_2 ];

            meta = {
              description = ''It`s a simple client of randomuser.me to get
                            random user.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/PatNowak/random_user_api";
            };
          } // packageOverrides)
      ) {};

    random_user_api = random_user_api_1_2_1;

    random_username_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "random_username";
            version = "0.1.0";
            src = fetchHex {
              pkg = "random_username";
              version = "0.1.0";
              sha256 =
                "77df4478b6821990f69fe3de817be18be43b27c6cc5f016b139b5d8c7878ec75";
            };

            meta = {
              description = ''Generates random usernames'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/mynameisrufus/random_username";
            };
          } // packageOverrides)
      ) {};

    random_username = random_username_0_1_0;

    randpass_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "randpass";
            version = "0.0.1";
            src = fetchHex {
              pkg = "randpass";
              version = "0.0.1";
              sha256 =
                "922f993068244c9679863389bdaa0196670d87ff393237145ed0edf0275eac58";
            };

            meta = {
              description = ''A simple password generation lib'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Mechasparrow/elixirpasswordgen";
            };
          } // packageOverrides)
      ) {};

    randpass = randpass_0_0_1;

    range_extras_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "range_extras";
            version = "0.1.0";
            src = fetchHex {
              pkg = "range_extras";
              version = "0.1.0";
              sha256 =
                "edc50d31341e1370d009df8b51d7d0e355a966068520ff38e88b8b542953e15c";
            };

            meta = {
              description = ''Elixir range utilities: constant-time random
                            sampling and set operations.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/lnikkila/elixir-range-extras";
            };
          } // packageOverrides)
      ) {};

    range_extras = range_extras_0_1_0;

    ranjith965_statistics_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ranjith965_statistics";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ranjith965_statistics";
              version = "0.1.0";
              sha256 =
                "4b0d5e592a4f5d99e2dff0f00d5932752321f9e15b97fbd4d4dc31855bec37c7";
            };

            meta = {
              description = ''This is my first project'';
              license = stdenv.lib.licenses.free;
            };
          } // packageOverrides)
      ) {};

    ranjith965_statistics = ranjith965_statistics_0_1_0;

    rankmatcher_0_1_6 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, libsnarlmatch_0_1_8
        }:
          buildRebar3 ({
            name = "rankmatcher";
            version = "0.1.6";
            src = fetchHex {
              pkg = "rankmatcher";
              version = "0.1.6";
              sha256 =
                "7b3a2e1353b7012677ae1ab68a46698529d1c8688a8efce759bde9ec5e5b2355";
            };

            beamDeps  = [ libsnarlmatch_0_1_8 ];

            meta = {
              description = ''Library to rank and match lists'';
              license = stdenv.lib.licenses.cddl;
              homepage = "https://github.com/dalmatinerdb/mstore";
            };
          } // packageOverrides)
      ) {};

    rankmatcher = rankmatcher_0_1_6;

    rapid_api_1_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_10_0,
          phoenix_gen_socket_client_1_1_0,
          poison_3_1_0,
          websocket_client_1_2_1
        }:
          buildMix ({
            name = "rapid_api";
            version = "1.0.2";
            src = fetchHex {
              pkg = "rapid_api";
              version = "1.0.2";
              sha256 =
                "598e2803dd690dd05c7a3a5d7c809250b45d18b87df8968046a0bd0a2b1c8ba8";
            };
            beamDeps  = [
                          httpoison_0_10_0
                          phoenix_gen_socket_client_1_1_0
                          poison_3_1_0
                          websocket_client_1_2_1
                        ];

            meta = {
              description = ''Easily connect to RapidAPI blocks.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Spyes/RapidAPIConnect_Elixir";
            };
          } // packageOverrides)
      ) {};

    rapid_api = rapid_api_1_0_2;

    rapidax_0_0_6 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          httpoison_0_9_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "rapidax";
            version = "0.0.6";
            src = fetchHex {
              pkg = "rapidax";
              version = "0.0.6";
              sha256 =
                "6749200d970f3de93d8b9410650cb056823c08b40b2c96599c5094d882b6e8c6";
            };
            beamDeps  = [ cowboy_1_1_2 httpoison_0_9_2 poison_2_2_0 ];

            meta = {
              description = ''Rapidly develop your API client - based on
                            rapidash gem'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/victorlcampos/rapidax";
            };
          } // packageOverrides)
      ) {};

    rapidax = rapidax_0_0_6;

    rasstaggregator_1_0_0_beta2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          calendar_0_17_2,
          feeder_ex_1_1_0,
          httpoison_0_11_2
        }:
          buildMix ({
            name = "rasstaggregator";
            version = "1.0.0-beta2";
            src = fetchHex {
              pkg = "rasstaggregator";
              version = "1.0.0-beta2";
              sha256 =
                "9aeb0fc323da473201337b2ed444e34ce63ccc4ae86d12f0694d9630754fed76";
            };
            beamDeps  = [ calendar_0_17_2 feeder_ex_1_1_0 httpoison_0_11_2 ];

            meta = {
              description = ''Feed aggregator for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/slashrsm/rasstaggregator";
            };
          } // packageOverrides)
      ) {};

    rasstaggregator = rasstaggregator_1_0_0_beta2;

    ratchet_0_4_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          floki_0_17_2,
          phoenix_html_2_9_3
        }:
          buildMix ({
            name = "ratchet";
            version = "0.4.0";
            src = fetchHex {
              pkg = "ratchet";
              version = "0.4.0";
              sha256 =
                "4b9dd154c6b8841a759282723e755a9b3128daba7e320a5bc270b6b4cb5387c6";
            };
            beamDeps  = [ floki_0_17_2 phoenix_html_2_9_3 ];

            meta = {
              description = ''Transform plain HTML views with data'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/iamvery/ratchet";
            };
          } // packageOverrides)
      ) {};

    ratchet = ratchet_0_4_0;

    ratio_1_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, numbers_3_0_0 }:
          buildMix ({
            name = "ratio";
            version = "1.2.1";
            src = fetchHex {
              pkg = "ratio";
              version = "1.2.1";
              sha256 =
                "7101fdce48cfc821124a74182e6f537dd56a509dc724a2fa8766f90d8e95718a";
            };
            beamDeps  = [ numbers_3_0_0 ];

            meta = {
              longDescription = ''This library allows you to use Rational
                                numbers in Elixir, to enable exact calculations
                                with all numbers big and small.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/qqwy/elixir-rational";
            };
          } // packageOverrides)
      ) {};

    ratio_1_2_9 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, numbers_3_0_0 }:
          buildMix ({
            name = "ratio";
            version = "1.2.9";
            src = fetchHex {
              pkg = "ratio";
              version = "1.2.9";
              sha256 =
                "b8948ef5ff020bd88cb627ad1743f1daeeb4bbc72a1f7c3f9a445218be75402b";
            };
            beamDeps  = [ numbers_3_0_0 ];

            meta = {
              longDescription = ''This library allows you to use Rational
                                numbers in Elixir, to enable exact calculations
                                with all numbers big and small.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/qqwy/elixir-rational";
            };
          } // packageOverrides)
      ) {};

    ratio = ratio_1_2_9;

    rational_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, earmark_1_2_2 }:
          buildMix ({
            name = "rational";
            version = "0.2.0";
            src = fetchHex {
              pkg = "rational";
              version = "0.2.0";
              sha256 =
                "640093486afd882e5283d4269d9ab624369239016fed67e3b8038845322107b7";
            };
            beamDeps  = [ earmark_1_2_2 ];

            meta = {
              longDescription = ''Rational is a module for exact representation
                                and manipulation of rational fractions, that is,
                                those fractions that can be exactly represented
                                by a ratio of integers (e.g., 1/3 or
                                4176/22687).'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/twist-vector/elixir-rational.git";
            };
          } // packageOverrides)
      ) {};

    rational = rational_0_2_0;

    ratx_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ratx";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ratx";
              version = "0.1.0";
              sha256 =
                "fbf933ff32fdc127200880f5b567820bf03504ade1bd697ffbc0535dbafc23d6";
            };

            meta = {
              description = ''Rate limiter and overload protection for erlang
                            and elixir applications. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/liveforeverx/ratx";
            };
          } // packageOverrides)
      ) {};

    ratx = ratx_0_1_0;

    ravel_0_0_6 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ravel";
            version = "0.0.6";
            src = fetchHex {
              pkg = "ravel";
              version = "0.0.6";
              sha256 =
                "a8fc97393216e2c4429982deefb77b48031ca7feca1f81835451af8977d4932e";
            };

            meta = {
              description = ''Extendable validation for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/revati/ravel";
            };
          } // packageOverrides)
      ) {};

    ravel = ravel_0_0_6;

    raven_0_0_5 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_3_0,
          poison_1_2_1,
          uuid_0_1_5
        }:
          buildMix ({
            name = "raven";
            version = "0.0.5";
            src = fetchHex {
              pkg = "raven";
              version = "0.0.5";
              sha256 =
                "dac032f4a14adbd174927508709585bd34f9baa2836ff3987b4d071790cb229a";
            };
            beamDeps  = [ hackney_1_3_0 poison_1_2_1 uuid_0_1_5 ];

            meta = {
              description = ''Raven is an Elixir client for Sentry'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/vishnevskiy/raven-elixir";
            };
          } // packageOverrides)
      ) {};

    raven = raven_0_0_5;

    raven_erlang_0_3_2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, jsone_1_2_3 }:
          buildRebar3 ({
            name = "raven_erlang";
            version = "0.3.2";
            src = fetchHex {
              pkg = "raven_erlang";
              version = "0.3.2";
              sha256 =
                "7899c21b950a7f8b62489ddce9c8f0d15d3be5712cdf71961f9e3b00468c6d61";
            };

            beamDeps  = [ jsone_1_2_3 ];

            meta = {
              description = ''Erlang client for Sentry'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/artemeff/raven-erlang";
            };
          } // packageOverrides)
      ) {};

    raven_erlang = raven_erlang_0_3_2;

    raven_smcd_0_2_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          nerves_uart_0_1_2,
          sweet_xml_0_6_5
        }:
          buildMix ({
            name = "raven_smcd";
            version = "0.2.1";
            src = fetchHex {
              pkg = "raven_smcd";
              version = "0.2.1";
              sha256 =
                "96062818f0bd3f50665e0cd6ad4e69d9e206b24f685ff2ef326ccc1add70a048";
            };
            beamDeps  = [ nerves_uart_0_1_2 sweet_xml_0_6_5 ];

            meta = {
              longDescription = ''A Client for the Rainforest Automation Raven
                                USB SMCD (Smart Meter Connected Device)'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/NationalAssociationOfRealtors/raven";
            };
          } // packageOverrides)
      ) {};

    raven_smcd = raven_smcd_0_2_1;

    ravenex_0_0_7 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_2_2_0,
          uuid_1_1_7
        }:
          buildMix ({
            name = "ravenex";
            version = "0.0.7";
            src = fetchHex {
              pkg = "ravenex";
              version = "0.0.7";
              sha256 =
                "670895c0b8862c5c791d78a718b81bbe75bfcabff2a206ef017b2735595c8159";
            };
            beamDeps  = [ httpoison_0_11_2 poison_2_2_0 uuid_1_1_7 ];

            meta = {
              longDescription = ''Ravenex is an Elixir client for Sentry.
                                Automatically send error notifications to
                                Sentry. Easily connects with Phoenix through
                                adding a logger or Plug.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hayesgm/ravenex";
            };
          } // packageOverrides)
      ) {};

    ravenex = ravenex_0_0_7;

    ravenx_1_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          bamboo_0_7_0,
          bamboo_smtp_1_2_1,
          httpoison_0_10_0,
          poison_1_0_2
        }:
          buildMix ({
            name = "ravenx";
            version = "1.1.0";
            src = fetchHex {
              pkg = "ravenx";
              version = "1.1.0";
              sha256 =
                "8b7f9dec00dcb293a109ee7824465c866b2332dddaa89015eef432eb974ecdb2";
            };
            beamDeps  = [
                          bamboo_0_7_0
                          bamboo_smtp_1_2_1
                          httpoison_0_10_0
                          poison_1_0_2
                        ];

            meta = {
              description = ''Notification dispatch library for Elixir
                            applications.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/acutario/ravenx";
            };
          } // packageOverrides)
      ) {};

    ravenx = ravenx_1_1_0;

    raxx_0_10_5 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          http_status_0_2_1,
          mime_1_1_0,
          plug_1_2_5
        }:
          buildMix ({
            name = "raxx";
            version = "0.10.5";
            src = fetchHex {
              pkg = "raxx";
              version = "0.10.5";
              sha256 =
                "b5bc38c0c5834813be26e5d6f6c90f64ffefd9f6f88e0e654b548a2be67452a7";
            };
            beamDeps  = [ http_status_0_2_1 mime_1_1_0 plug_1_2_5 ];

            meta = {
              longDescription = ''Pure interface for webservers and frameworks.
                                Including a powerful tools library for building
                                refined web applications'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/crowdhailer/raxx";
            };
          } // packageOverrides)
      ) {};

    raxx_0_11_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          http_status_0_2_1,
          mime_1_1_0,
          plug_1_3_5
        }:
          buildMix ({
            name = "raxx";
            version = "0.11.1";
            src = fetchHex {
              pkg = "raxx";
              version = "0.11.1";
              sha256 =
                "747fd83ff172af08e9109cd210b36db6030b38f294156e62c9bb95a40be86a3e";
            };
            beamDeps  = [ http_status_0_2_1 mime_1_1_0 plug_1_3_5 ];

            meta = {
              longDescription = ''Pure interface for webservers and frameworks.
                                Including a powerful tools library for building
                                refined web applications'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/crowdhailer/raxx";
            };
          } // packageOverrides)
      ) {};

    raxx = raxx_0_11_1;

    raxx_0_8_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ace_0_7_0,
          mime_1_1_0,
          plug_1_2_5
        }:
          buildMix ({
            name = "raxx";
            version = "0.8.2";
            src = fetchHex {
              pkg = "raxx";
              version = "0.8.2";
              sha256 =
                "f0312b3c40c75d0d3be6b49894360ae80cffda1564e32b5a2f6b2585899010ff";
            };
            beamDeps  = [ ace_0_7_0 mime_1_1_0 plug_1_2_5 ];

            meta = {
              longDescription = ''Pure interface for webservers and frameworks.
                                Including a powerful tools library for building
                                refined web applications'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/crowdhailer/raxx";
            };
          } // packageOverrides)
      ) {};

    raxx_cookie_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "raxx_cookie";
            version = "0.1.0";
            src = fetchHex {
              pkg = "raxx_cookie";
              version = "0.1.0";
              sha256 =
                "43c14a71c02d712d5cb25e744014433481cccd7d111acc37cdd73e2975ea77ea";
            };

            meta = {
              description = ''Manage cookies in Raxx applications.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/CrowdHailer/raxx/tree/master/raxx_cookie";
            };
          } // packageOverrides)
      ) {};

    raxx_cookie = raxx_cookie_0_1_0;

    raxx_cowboy_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          raxx_0_10_5
        }:
          buildMix ({
            name = "raxx_cowboy";
            version = "0.2.0";
            src = fetchHex {
              pkg = "raxx_cowboy";
              version = "0.2.0";
              sha256 =
                "df1ced86a5a29e60afe41b60de1f5be4aa6a34cafec5094087c9a51ae716b774";
            };
            beamDeps  = [ cowboy_1_1_2 raxx_0_10_5 ];

            meta = {
              description = ''Cowboy adapter for the Raxx webserver
                            interface'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/CrowdHailer/raxx/tree/master/raxx_cowboy";
            };
          } // packageOverrides)
      ) {};

    raxx_cowboy = raxx_cowboy_0_2_0;

    raxx_elli_0_1_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, elli_1_0_5, raxx_0_8_2
        }:
          buildMix ({
            name = "raxx_elli";
            version = "0.1.0";
            src = fetchHex {
              pkg = "raxx_elli";
              version = "0.1.0";
              sha256 =
                "20d48f639b38431c50764a7e7cc69d2a470a1dcdf78b58babb769222c8623fd8";
            };
            beamDeps  = [ elli_1_0_5 raxx_0_8_2 ];

            meta = {
              description = ''Elli adapter for the Raxx webserver interface'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/CrowdHailer/raxx/tree/master/raxx_elli";
            };
          } // packageOverrides)
      ) {};

    raxx_elli = raxx_elli_0_1_0;

    raxx_method_override_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, raxx_0_8_2 }:
          buildMix ({
            name = "raxx_method_override";
            version = "0.1.0";
            src = fetchHex {
              pkg = "raxx_method_override";
              version = "0.1.0";
              sha256 =
                "415cde1520f734aad89d27c05ecf0b9fbd9bf107f15ef863bcc801358a0ca682";
            };
            beamDeps  = [ raxx_0_8_2 ];

            meta = {
              description = ''Override HTTP methods using the request body'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/crowdhailer/raxx";
            };
          } // packageOverrides)
      ) {};

    raxx_method_override = raxx_method_override_0_1_0;

    raxx_static_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, raxx_0_11_1 }:
          buildMix ({
            name = "raxx_static";
            version = "0.3.0";
            src = fetchHex {
              pkg = "raxx_static";
              version = "0.3.0";
              sha256 =
                "b34ab778a6d65951bb238d8509801a2141168575457ffdc53681d77dedde4eea";
            };
            beamDeps  = [ raxx_0_11_1 ];

            meta = {
              description = ''Static file serving in Raxx applications.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/CrowdHailer/raxx/tree/master/raxx_static";
            };
          } // packageOverrides)
      ) {};

    raxx_static = raxx_static_0_3_0;

    raxx_verify_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, httpoison_0_11_2 }:
          buildMix ({
            name = "raxx_verify";
            version = "0.1.0";
            src = fetchHex {
              pkg = "raxx_verify";
              version = "0.1.0";
              sha256 =
                "c83dc9950d9a250ef3e4add329d16e61518aa40e82882a92fc6ad6b3ecf14de9";
            };
            beamDeps  = [ httpoison_0_11_2 ];

            meta = {
              description = ''Cowboy adapter for the Raxx webserver
                            interface'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/CrowdHailer/raxx/tree/master/raxx_cowboy";
            };
          } // packageOverrides)
      ) {};

    raxx_verify = raxx_verify_0_1_0;

    raygun_0_3_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          plug_1_3_5,
          poison_1_0_2
        }:
          buildMix ({
            name = "raygun";
            version = "0.3.2";
            src = fetchHex {
              pkg = "raygun";
              version = "0.3.2";
              sha256 =
                "2fb2d4b6e7fab6ea078ebc17862ee14bdaf376da6612151ff4b351b733463e7c";
            };
            beamDeps  = [ httpoison_0_11_2 plug_1_3_5 poison_1_0_2 ];

            meta = {
              longDescription = ''Send errors in your application to Raygun.
                                Raygun captures all your application errors in
                                one place. It can be used as a Plug, via Logger
                                and/or programmatically.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/cobenian/raygun";
            };
          } // packageOverrides)
      ) {};

    raygun = raygun_0_3_2;

    razorpay_0_5_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_8_6,
          poison_2_2_0
        }:
          buildMix ({
            name = "razorpay";
            version = "0.5.0";
            src = fetchHex {
              pkg = "razorpay";
              version = "0.5.0";
              sha256 =
                "c58e545ef1d4e54523ffff84beb5144b0b5561628dc63c8d32b1d8e5fa24637c";
            };
            beamDeps  = [ hackney_1_8_6 poison_2_2_0 ];

            meta = {
              description = ''Elixir bindings for the Razorpay API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/aarvay/razorpay-elixir";
            };
          } // packageOverrides)
      ) {};

    razorpay = razorpay_0_5_0;

    rbmq_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          amqp_0_1_4,
          gproc_0_6_1,
          poison_2_2_0
        }:
          buildMix ({
            name = "rbmq";
            version = "0.3.0";
            src = fetchHex {
              pkg = "rbmq";
              version = "0.3.0";
              sha256 =
                "6b84834b09b7ee189a52c619fc759ec75bcb3ac397522e0fbeded710595e35fe";
            };
            beamDeps  = [ amqp_0_1_4 gproc_0_6_1 poison_2_2_0 ];

            meta = {
              description = ''Simple API for spawning RabbitMQ Producers and
                            Consumers.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Nebo15/rbmq";
            };
          } // packageOverrides)
      ) {};

    rbmq = rbmq_0_3_0;

    rbmq19_0_3_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          amqp_0_2_2,
          confex_1_5_0,
          poison_2_2_0
        }:
          buildMix ({
            name = "rbmq19";
            version = "0.3.2";
            src = fetchHex {
              pkg = "rbmq19";
              version = "0.3.2";
              sha256 =
                "0cb234e67e6e5a0582d7ec7798d6529277ed729796dc4fe0889c8ed4ddc68152";
            };
            beamDeps  = [ amqp_0_2_2 confex_1_5_0 poison_2_2_0 ];

            meta = {
              description = ''Simple API for spawning RabbitMQ Producers and
                            Consumers.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/audaxion/rbmq";
            };
          } // packageOverrides)
      ) {};

    rbmq19 = rbmq19_0_3_2;

    rbtree_0_1_6 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "rbtree";
            version = "0.1.6";
            src = fetchHex {
              pkg = "rbtree";
              version = "0.1.6";
              sha256 =
                "1505eb0c055dff4c2a5a5b6fbceeddddd19231ee7e410bb252dff7524652f7a1";
            };

            meta = {
              description = ''This implements red black tree in Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/rickyhan/rbtree";
            };
          } // packageOverrides)
      ) {};

    rbtree = rbtree_0_1_6;

    rcon_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "rcon";
            version = "0.1.0";
            src = fetchHex {
              pkg = "rcon";
              version = "0.1.0";
              sha256 =
                "bdf4365dfff0f3b2775315c07a4731644574e8087344e639097d74db6fe36d56";
            };

            meta = {
              description = ''Source compatible RCON implementation.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/avitex/elixir-rcon";
            };
          } // packageOverrides)
      ) {};

    rcon = rcon_0_1_0;

    rdtype_0_5_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, redix_0_6_1 }:
          buildMix ({
            name = "rdtype";
            version = "0.5.1";
            src = fetchHex {
              pkg = "rdtype";
              version = "0.5.1";
              sha256 =
                "24c5e099dc2735787ad5254a244f0e1f95a28b2e7e3800df22559e54728cbe25";
            };
            beamDeps  = [ redix_0_6_1 ];

            meta = {
              description = ''Calling Redis Data Types in easily way'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ikeikeikeike/rdtype";
            };
          } // packageOverrides)
      ) {};

    rdtype = rdtype_0_5_1;

    react_on_elixir_0_0_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          poison_1_5_2,
          poolboy_1_5_1
        }:
          buildMix ({
            name = "react_on_elixir";
            version = "0.0.4";
            src = fetchHex {
              pkg = "react_on_elixir";
              version = "0.0.4";
              sha256 =
                "5747938079acd15a39768a77ab013b199d429d725397fcd1e8313abf6eeb7c3b";
            };
            beamDeps  = [ poison_1_5_2 poolboy_1_5_1 ];

            meta = {
              description = ''Server render react components from Elixir'';
              license = stdenv.lib.licenses.unlicense;
              homepage = "https://github.com/gauravtiwari/react_on_elixir";
            };
          } // packageOverrides)
      ) {};

    react_on_elixir = react_on_elixir_0_0_4;

    react_phoenix_0_4_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          phoenix_html_2_9_3,
          poison_1_0_2,
          std_json_io_2_0_2_0
        }:
          buildMix ({
            name = "react_phoenix";
            version = "0.4.2";
            src = fetchHex {
              pkg = "react_phoenix";
              version = "0.4.2";
              sha256 =
                "9dcdc38be9d5eca83d646f78ecae2f38b983b0c433c47953ec7b356e4e644d55";
            };
            beamDeps  = [ phoenix_html_2_9_3 poison_1_0_2 std_json_io_2_0_2_0
                      ];

            meta = {
              longDescription = ''A helper library for easily rendering React
                                components in Phoenix projects. Built to work
                                out of the box with brunch.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/geolessel/react-phoenix";
            };
          } // packageOverrides)
      ) {};

    react_phoenix = react_phoenix_0_4_2;

    reactive_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "reactive";
            version = "0.0.1";
            src = fetchHex {
              pkg = "reactive";
              version = "0.0.1";
              sha256 =
                "af17deb3beedd24319940000e286a1f8d9f29beb498980475e16cc57857469f9";
            };

            meta = {
              description = ''Reactive Programming for Elixir'';

            };
          } // packageOverrides)
      ) {};

    reactive = reactive_0_0_1;

    read_repos_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "read_repos";
            version = "0.0.1";
            src = fetchHex {
              pkg = "read_repos";
              version = "0.0.1";
              sha256 =
                "f981ea689d21956e1470d947ba24c5480e808fdf1a9da4cd148e5a4e1247e8b4";
            };

            meta = {
              description = ''Simple master-slave library for Ecto.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kenta-aktsk/read_repos";
            };
          } // packageOverrides)
      ) {};

    read_repos = read_repos_0_0_1;

    readability_0_8_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          floki_0_14_0,
          httpoison_0_11_2
        }:
          buildMix ({
            name = "readability";
            version = "0.8.0";
            src = fetchHex {
              pkg = "readability";
              version = "0.8.0";
              sha256 =
                "42037c9f24a1bc950cb0be6145352f8f137df0f57c0b85afbc647040a3d89615";
            };
            beamDeps  = [ floki_0_14_0 httpoison_0_11_2 ];

            meta = {
              description = ''Readability library for extracting and curating
                            articles.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/keepcosmos/readability";
            };
          } // packageOverrides)
      ) {};

    readability = readability_0_8_0;

    readit_0_0_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "readit";
            version = "0.0.4";
            src = fetchHex {
              pkg = "readit";
              version = "0.0.4";
              sha256 =
                "a605307c32e4d4b939a8ffe64f1fba8b88c2e51180e393dd58185c483c7e6aee";
            };
            beamDeps  = [ httpoison_0_11_2 poison_2_2_0 ];

            meta = {
              description = ''A Simple Read-Only Reddit API Client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/adamzaninovich/readit";
            };
          } // packageOverrides)
      ) {};

    readit = readit_0_0_4;

    readly_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "readly";
            version = "0.1.1";
            src = fetchHex {
              pkg = "readly";
              version = "0.1.1";
              sha256 =
                "7cce4c4392ebe1cca07b5dbabb74764b0bcee01e77976e66bdd864d36fa7acd2";
            };

            meta = {
              longDescription = ''Readly is a simple module that allow you to
                                create readonly datasource module easily.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/igrs/readly";
            };
          } // packageOverrides)
      ) {};

    readly = readly_0_1_1;

    readme_md_doc_0_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          argument_parser_0_1_3,
          ex_doc_0_16_1
        }:
          buildMix ({
            name = "readme_md_doc";
            version = "0.1.2";
            src = fetchHex {
              pkg = "readme_md_doc";
              version = "0.1.2";
              sha256 =
                "3353e8598991afbaa8d12344212fdd9c85413d1664b026a7ee1036573c6f536c";
            };
            beamDeps  = [ argument_parser_0_1_3 ex_doc_0_16_1 ];

            meta = {
              description = ''README.md generation tool for small Elixir
                            project'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/jisaacstone/readme_md_docgen";
            };
          } // packageOverrides)
      ) {};

    readme_md_doc = readme_md_doc_0_1_2;

    reagent_0_1_14 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exts_0_3_4,
          socket_0_3_12
        }:
          buildMix ({
            name = "reagent";
            version = "0.1.14";
            src = fetchHex {
              pkg = "reagent";
              version = "0.1.14";
              sha256 =
                "6d40dc48c6068f81aee3f6d461d6139942b22e407cdd854bb4a71972e02b121d";
            };
            beamDeps  = [ exts_0_3_4 socket_0_3_12 ];

            meta = {
              description = ''You need more reagents to conjure this server'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/meh/reagent";
            };
          } // packageOverrides)
      ) {};

    reagent = reagent_0_1_14;

    reap_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, jsex_2_0_0 }:
          buildMix ({
            name = "reap";
            version = "0.1.3";
            src = fetchHex {
              pkg = "reap";
              version = "0.1.3";
              sha256 =
                "e260540500a29ac9945db512a550cd9b56ba4295b4aa3c1b408ad62720e7807b";
            };
            beamDeps  = [ jsex_2_0_0 ];

            meta = {
              description = ''A library for working with the refheap API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Raynes/reap";
            };
          } // packageOverrides)
      ) {};

    reap = reap_0_1_3;

    reaxive_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "reaxive";
            version = "0.1.0";
            src = fetchHex {
              pkg = "reaxive";
              version = "0.1.0";
              sha256 =
                "d185c80da34499999000f6aaab3ab891cdff34cb3a2079835e8e6f5b4e813fa2";
            };

            meta = {
              longDescription = ''Reaxive is a library inspired by Reactive
                                Extensions and ELM to provide functional
                                reactive programming to Elixir. It allows for
                                active sequences of events and a set of
                                stream-reducer like transformations such as map
                                or filter. '';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/alfert/reaxive";
            };
          } // packageOverrides)
      ) {};

    reaxive = reaxive_0_1_0;

    reaxt_1_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_0_4,
          exos_1_0_0,
          plug_1_3_5,
          poison_2_1_0,
          poolboy_1_5_1
        }:
          buildMix ({
            name = "reaxt";
            version = "1.0.1";
            src = fetchHex {
              pkg = "reaxt";
              version = "1.0.1";
              sha256 =
                "4a3cfcb5b0e406358e124b4a8fc405a414a27545bab668267a9fea6e0bcc5f32";
            };
            beamDeps  = [
                          cowboy_1_0_4
                          exos_1_0_0
                          plug_1_3_5
                          poison_2_1_0
                          poolboy_1_5_1
                        ];

            meta = {
              longDescription = ''Use your react components into your elixir
                                application, using webpack compilation.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/awetzel/reaxt";
            };
          } // packageOverrides)
      ) {};

    reaxt = reaxt_1_0_1;

    rebar3_abnfc_plugin_0_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "rebar3_abnfc_plugin";
            version = "0.1.0";
            src = fetchHex {
              pkg = "rebar3_abnfc_plugin";
              version = "0.1.0";
              sha256 =
                "7c9cf5608888c0fe149cfc4d25a5911e604a1e63f7c0c73c3cf8792a33be9a7b";
            };

            meta = {
              description = ''A rebar plugin for abnfc'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/surik/rebar3_abnfc_plugin";
            };
          } // packageOverrides)
      ) {};

    rebar3_abnfc_plugin = rebar3_abnfc_plugin_0_1_0;

    rebar3_appup_plugin_2_2_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "rebar3_appup_plugin";
            version = "2.2.0";
            src = fetchHex {
              pkg = "rebar3_appup_plugin";
              version = "2.2.0";
              sha256 =
                "6c6c565b441bb39e3357b6582010e121258d8e00de739919e840b41408fb090c";
            };

            meta = {
              description = ''A rebar3 plugin for handling .appup files'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lrascao/rebar3_appup_plugin";
            };
          } // packageOverrides)
      ) {};

    rebar3_appup_plugin = rebar3_appup_plugin_2_2_0;

    rebar3_archive_plugin_0_0_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "rebar3_archive_plugin";
            version = "0.0.1";
            src = fetchHex {
              pkg = "rebar3_archive_plugin";
              version = "0.0.1";
              sha256 =
                "9e222ae35bb6cf5b03f523b84f3f549db60652de1e1eeae7f3eb090a8b3e670a";
            };

            buildPlugins  = [ rebar3_elvis_plugin ];


            meta = {
              description = ''Create Erlang Code archives with rebar3.'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/deadtrickster/rebar3_archive_plugin";
            };
          } // packageOverrides)
      ) {};

    rebar3_archive_plugin = rebar3_archive_plugin_0_0_1;

    rebar3_asn1_compiler_1_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "rebar3_asn1_compiler";
            version = "1.0.0";
            src = fetchHex {
              pkg = "rebar3_asn1_compiler";
              version = "1.0.0";
              sha256 =
                "25ec1d5c97393195650ac8c7a06a267a886a1479950ee047c43b5228c07b30b9";
            };

            meta = {
              description = ''Compile ASN.1 modules with Rebar3'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pyykkis/rebar3_asn1_compiler";
            };
          } // packageOverrides)
      ) {};

    rebar3_asn1_compiler = rebar3_asn1_compiler_1_0_0;

    rebar3_auto_0_3_2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, enotify_0_1_0 }:
          buildRebar3 ({
            name = "rebar3_auto";
            version = "0.3.2";
            src = fetchHex {
              pkg = "rebar3_auto";
              version = "0.3.2";
              sha256 =
                "9b12ec1146fe980de98f42bccb5e48c8562c3ae13a4f4269c02450c4824af45a";
            };

            beamDeps  = [ enotify_0_1_0 ];

            meta = {
              description = ''Rebar3 plugin for auto compiling on changes'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tsloughter/rebar3_auto";
            };
          } // packageOverrides)
      ) {};

    rebar3_auto = rebar3_auto_0_3_2;

    rebar3_auto_applications_1_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "rebar3_auto_applications";
            version = "1.0.0";
            src = fetchHex {
              pkg = "rebar3_auto_applications";
              version = "1.0.0";
              sha256 =
                "0d84e126ed5d815921b7b9210032c5a068743d2584f2592c1b969fae0b44ba4d";
            };

            meta = {
              description = ''Provider for automatically solving dependent'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/soranoba/rebar3_auto_applications";
            };
          } // packageOverrides)
      ) {};

    rebar3_auto_applications = rebar3_auto_applications_1_0_0;

    rebar3_autotest_0_1_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, enotify_0_1_0 }:
          buildRebar3 ({
            name = "rebar3_autotest";
            version = "0.1.1";
            src = fetchHex {
              pkg = "rebar3_autotest";
              version = "0.1.1";
              sha256 =
                "7f5856336e772b14a578f0c01ce14b2a195c41d5b595c83662ffd130f7874eac";
            };

            beamDeps  = [ enotify_0_1_0 ];

            meta = {
              description = ''A rebar3 plugin to run tests automatically when
                            there are changes.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/NobbZ/rebar3_autotest";
            };
          } // packageOverrides)
      ) {};

    rebar3_autotest = rebar3_autotest_0_1_1;

    rebar3_cuttlefish_0_15_0 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, cuttlefish_2_0_11
        }:
          buildRebar3 ({
            name = "rebar3_cuttlefish";
            version = "0.15.0";
            src = fetchHex {
              pkg = "rebar3_cuttlefish";
              version = "0.15.0";
              sha256 =
                "0f2506331eee078ce2d05f828d716951d7f0351db126bf6bd32f4285d6cd9849";
            };

            beamDeps  = [ cuttlefish_2_0_11 ];

            meta = {
              description = ''A rebar plugin'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/tsloughter/rebar3_cuttlefish";
            };
          } // packageOverrides)
      ) {};

    rebar3_cuttlefish = rebar3_cuttlefish_0_15_0;

    rebar3_diameter_compiler_0_4_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "rebar3_diameter_compiler";
            version = "0.4.0";
            src = fetchHex {
              pkg = "rebar3_diameter_compiler";
              version = "0.4.0";
              sha256 =
                "5a0ed45fedbe1f7b1a020a9c40624dc02a10377627b46c4dc3be334ba770d122";
            };

            meta = {
              description = ''Compile diameter .dia files'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/carlosedp/rebar3_diameter_compiler";
            };
          } // packageOverrides)
      ) {};

    rebar3_diameter_compiler = rebar3_diameter_compiler_0_4_0;

    rebar3_edata_plugin_0_1_11 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          erlport_0_9_8,
          mochiweb_2_15_0
        }:
          buildRebar3 ({
            name = "rebar3_edata_plugin";
            version = "0.1.11";
            src = fetchHex {
              pkg = "rebar3_edata_plugin";
              version = "0.1.11";
              sha256 =
                "5c68aa9a8b7aad2e5b8547cbaa2b7aae15b5307ec680eb4e97173b4002afa03b";
            };

            beamDeps  = [ erlport_0_9_8 mochiweb_2_15_0 ];

            meta = {
              description = ''A rebar plugin'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/feng19/rebar3_edata_plugin";
            };
          } // packageOverrides)
      ) {};

    rebar3_edata_plugin = rebar3_edata_plugin_0_1_11;

    rebar3_efene_0_1_0 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          rebar3_efene_compile_0_1_8,
          rebar3_efene_ct_0_1_1,
          rebar3_efene_shell_0_1_1
        }:
          buildRebar3 ({
            name = "rebar3_efene";
            version = "0.1.0";
            src = fetchHex {
              pkg = "rebar3_efene";
              version = "0.1.0";
              sha256 =
                "9e573b59a569e7fbf7ec92af6458a6eaa5bcfbf7825c6569424687e84b2807d7";
            };

            beamDeps  = [
                          rebar3_efene_compile_0_1_8
                          rebar3_efene_ct_0_1_1
                          rebar3_efene_shell_0_1_1
                        ];

            meta = {
              description = ''Rebar3 plugin for efene'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/efene/rebar3_efene";
            };
          } // packageOverrides)
      ) {};

    rebar3_efene = rebar3_efene_0_1_0;

    rebar3_efene_compile_0_1_8 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, efene_0_99_1 }:
          buildRebar3 ({
            name = "rebar3_efene_compile";
            version = "0.1.8";
            src = fetchHex {
              pkg = "rebar3_efene_compile";
              version = "0.1.8";
              sha256 =
                "cdcb8359024237cd0d23a95ede12539340f330c3202d270b1123a584a14daa6d";
            };

            beamDeps  = [ efene_0_99_1 ];

            meta = {
              description = ''efene rebar3 plugin'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/efene/rebar3_efene_compile";
            };
          } // packageOverrides)
      ) {};

    rebar3_efene_compile = rebar3_efene_compile_0_1_8;

    rebar3_efene_ct_0_1_1 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          rebar3_efene_compile_0_1_8
        }:
          buildRebar3 ({
            name = "rebar3_efene_ct";
            version = "0.1.1";
            src = fetchHex {
              pkg = "rebar3_efene_ct";
              version = "0.1.1";
              sha256 =
                "34a5d4dd1030fc53a2f703bec5bb22ff36a50c9f2524bc67269d1aef6c97beda";
            };

            beamDeps  = [ rebar3_efene_compile_0_1_8 ];

            meta = {
              description = ''efene rebar3 common test plugin'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/efene/rebar3_efene_compile";
            };
          } // packageOverrides)
      ) {};

    rebar3_efene_ct = rebar3_efene_ct_0_1_1;

    rebar3_efene_shell_0_1_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, efene_0_9_17 }:
          buildRebar3 ({
            name = "rebar3_efene_shell";
            version = "0.1.1";
            src = fetchHex {
              pkg = "rebar3_efene_shell";
              version = "0.1.1";
              sha256 =
                "e9ac64821efc50f23816d5edc152602dbae490ae4d2427fad094135f625b4ade";
            };

            beamDeps  = [ efene_0_9_17 ];

            meta = {
              description = ''rebar3 shell plugin for efene'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/efene/rebar3_efene_shell";
            };
          } // packageOverrides)
      ) {};

    rebar3_efene_shell = rebar3_efene_shell_0_1_1;

    rebar3_elixir_0_1_2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "rebar3_elixir";
            version = "0.1.2";
            src = fetchHex {
              pkg = "rebar3_elixir";
              version = "0.1.2";
              sha256 =
                "6b24ca22149c439550d3da9600d0e66d078ac5794697355df1c640151109183a";
            };

            meta = {
              description = ''A rebar plugin to generate mix.exs and Elixir
                            bindings'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/botsunit/rebar3_elixir";
            };
          } // packageOverrides)
      ) {};

    rebar3_elixir = rebar3_elixir_0_1_2;

    rebar3_elixir_compile_1_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "rebar3_elixir_compile";
            version = "1.0.0";
            src = fetchHex {
              pkg = "rebar3_elixir_compile";
              version = "1.0.0";
              sha256 =
                "a437c0468035861d86f791cf51179da60cb152d81a1d8b61bfe81dc277dae71f";
            };

            meta = {
              description = ''A rebar3 elixir compiler plugin'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/barrel-db/rebar3_elixir";
            };
          } // packageOverrides)
      ) {};

    rebar3_elixir_compile = rebar3_elixir_compile_1_0_0;

    rebar3_elixirc_0_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "rebar3_elixirc";
            version = "0.1.0";
            src = fetchHex {
              pkg = "rebar3_elixirc";
              version = "0.1.0";
              sha256 =
                "1c6ae367737306beefa0891d60cabf0357b85fcf472a2808c3e2295882f6ead8";
            };

            meta = {
              description = ''A rebar plugin'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/tsloughter/rebar3_elixirc";
            };
          } // packageOverrides)
      ) {};

    rebar3_elixirc = rebar3_elixirc_0_1_0;

    rebar3_elvis_plugin_0_0_4 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          katana_code_0_1_0,
          zipper_1_0_1
        }:
          buildRebar3 ({
            name = "rebar3_elvis_plugin";
            version = "0.0.4";
            src = fetchHex {
              pkg = "rebar3_elvis_plugin";
              version = "0.0.4";
              sha256 =
                "95ffe52e6615a47cb09bbc32e09660973e48b8ac06801d5053fba6cff5102282";
            };

            beamDeps  = [ katana_code_0_1_0 zipper_1_0_1 ];

            meta = {
              description = ''Rebar3 Elvis plugin'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/deadtrickster/rebar3_elvis_plugin";
            };
          } // packageOverrides)
      ) {};

    rebar3_elvis_plugin = rebar3_elvis_plugin_0_0_4;

    rebar3_eqc_0_0_10 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, cf_0_1_2 }:
          buildRebar3 ({
            name = "rebar3_eqc";
            version = "0.0.10";
            src = fetchHex {
              pkg = "rebar3_eqc";
              version = "0.0.10";
              sha256 =
                "5f901a542ca237da5106c35ae67224316b4aca7ba16204efc874fd1329414729";
            };

            beamDeps  = [ cf_0_1_2 ];

            meta = {
              description = ''Plugin to run EQC properties'';
              license = stdenv.lib.licenses.apsl20;
              homepage =
                "https://github.com/kellymclaughlin/rebar3-eqc-plugin";
            };
          } // packageOverrides)
      ) {};

    rebar3_eqc = rebar3_eqc_0_0_10;

    rebar3_exunit_0_1_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "rebar3_exunit";
            version = "0.1.1";
            src = fetchHex {
              pkg = "rebar3_exunit";
              version = "0.1.1";
              sha256 =
                "910d2f2038dcf2b32deb40a36082ad5435389106b2dbd6266e0ee3a20a688650";
            };

            meta = {
              description = ''Plugin to run exUnit tests'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/processone/rebar3_exunit_plugin";
            };
          } // packageOverrides)
      ) {};

    rebar3_exunit = rebar3_exunit_0_1_1;

    rebar3_git_vsn_1_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "rebar3_git_vsn";
            version = "1.1.0";
            src = fetchHex {
              pkg = "rebar3_git_vsn";
              version = "1.1.0";
              sha256 =
                "8ca7c2a34f7a3f97ce3dfe62ce71ffc73ab1397953f939284a633369a6c4a10d";
            };

            meta = {
              description = ''Provider for generate the version from git.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/soranoba/rebar3_git_vsn";
            };
          } // packageOverrides)
      ) {};

    rebar3_git_vsn = rebar3_git_vsn_1_1_0;

    rebar3_gpb_plugin_1_11_2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, gpb_3_27_0 }:
          buildRebar3 ({
            name = "rebar3_gpb_plugin";
            version = "1.11.2";
            src = fetchHex {
              pkg = "rebar3_gpb_plugin";
              version = "1.11.2";
              sha256 =
                "f1748094400b7dac21b2bf186d1aefb1987b8fa349ce51e9af86c3e31c4c1065";
            };

            beamDeps  = [ gpb_3_27_0 ];

            meta = {
              description = ''A rebar3 gpb plugin for compiling .proto files'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lrascao/rebar3_gpb_plugin";
            };
          } // packageOverrides)
      ) {};

    rebar3_gpb_plugin = rebar3_gpb_plugin_1_11_2;

    rebar3_gpb_rpc_plugin_0_1_14 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, gpb_3_26_3 }:
          buildRebar3 ({
            name = "rebar3_gpb_rpc_plugin";
            version = "0.1.14";
            src = fetchHex {
              pkg = "rebar3_gpb_rpc_plugin";
              version = "0.1.14";
              sha256 =
                "b23fbf0edf2a3b1a0df24accb36fdd8e8bd05ea7f51bbb112b12a393a5db612e";
            };

            beamDeps  = [ gpb_3_26_3 ];

            meta = {
              description = ''A rebar3 gpb rpc plugin for compiling .proto
                            files'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/feng19/rebar3_gpb_rpc_plugin";
            };
          } // packageOverrides)
      ) {};

    rebar3_gpb_rpc_plugin = rebar3_gpb_rpc_plugin_0_1_14;

    rebar3_hex_4_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "rebar3_hex";
            version = "4.0.0";
            src = fetchHex {
              pkg = "rebar3_hex";
              version = "4.0.0";
              sha256 =
                "5b2043a6f509689a25047efa63242cd9be9eb7ee5fc475db0059984f439f1e4c";
            };

            meta = {
              description = ''Hex.pm plugin for rebar3'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tsloughter/rebar3_hex";
            };
          } // packageOverrides)
      ) {};

    rebar3_hex = rebar3_hex_4_0_0;

    rebar3_idl_compiler_0_5_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "rebar3_idl_compiler";
            version = "0.5.0";
            src = fetchHex {
              pkg = "rebar3_idl_compiler";
              version = "0.5.0";
              sha256 =
                "37d8edc83efbf2cdebd54cded65f856db290a9a18b1fef3690c413ba505c30fe";
            };

            meta = {
              description = ''Rebar3 IDL Compiler'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sebastiw/rebar3_idl_compiler";
            };
          } // packageOverrides)
      ) {};

    rebar3_idl_compiler = rebar3_idl_compiler_0_5_0;

    rebar3_jorel_0_0_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, bucs_1_0_10 }:
          buildRebar3 ({
            name = "rebar3_jorel";
            version = "0.0.1";
            src = fetchHex {
              pkg = "rebar3_jorel";
              version = "0.0.1";
              sha256 =
                "62df99ae8ca7556aafa3737898875aad4ad84bc3198d5942f08ecc45cd5d1ac9";
            };

            beamDeps  = [ bucs_1_0_10 ];

            meta = {
              description = ''jorel plugin for rebar3'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/emedia-project/rebar3_jorel";
            };
          } // packageOverrides)
      ) {};

    rebar3_jorel = rebar3_jorel_0_0_1;

    rebar3_lfe_clean_0_4_0_rc2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "rebar3_lfe_clean";
            version = "0.4.0-rc2";
            src = fetchHex {
              pkg = "rebar3_lfe_clean";
              version = "0.4.0-rc2";
              sha256 =
                "9358664936cf920cd3b066e522009f717c442632f2fb2ffdb9383ece4e9a39f2";
            };

            meta = {
              description = ''The LFE rebar3 clean plugin'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/lfex/clean";
            };
          } // packageOverrides)
      ) {};

    rebar3_lfe_clean = rebar3_lfe_clean_0_4_0_rc2;

    rebar3_lfe_compile_0_8_0_rc3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "rebar3_lfe_compile";
            version = "0.8.0-rc3";
            src = fetchHex {
              pkg = "rebar3_lfe_compile";
              version = "0.8.0-rc3";
              sha256 =
                "2604223fd3366e592fa7a30d7241701062c6986188ba8b4a6ac845abe332d26b";
            };

            meta = {
              description = ''The LFE rebar3 compiler plugin'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/lfe-rebar3/compile";
            };
          } // packageOverrides)
      ) {};

    rebar3_lfe_compile = rebar3_lfe_compile_0_8_0_rc3;

    rebar3_lfe_test_0_4_0_rc4 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "rebar3_lfe_test";
            version = "0.4.0-rc4";
            src = fetchHex {
              pkg = "rebar3_lfe_test";
              version = "0.4.0-rc4";
              sha256 =
                "8ef311ce844cab61eeb765d66a97558df4e1d3c6ba2c6b480011128b470bff9f";
            };

            meta = {
              description = ''The LFE rebar3 test plugin'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/lfe-rebar3/test";
            };
          } // packageOverrides)
      ) {};

    rebar3_lfe_test = rebar3_lfe_test_0_4_0_rc4;

    rebar3_lfe_version_0_5_0_rc2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "rebar3_lfe_version";
            version = "0.5.0-rc2";
            src = fetchHex {
              pkg = "rebar3_lfe_version";
              version = "0.5.0-rc2";
              sha256 =
                "d74c77089def41c8f1bfe4276323a764588901c83284e77163be58a6a3ab5759";
            };

            meta = {
              description = ''The LFE rebar3 version plugin'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/lfe-rebar3/version";
            };
          } // packageOverrides)
      ) {};

    rebar3_lfe_version = rebar3_lfe_version_0_5_0_rc2;

    rebar3_lint_0_1_9 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          elvis_core_0_3_6,
          goldrush_0_1_9
        }:
          buildRebar3 ({
            name = "rebar3_lint";
            version = "0.1.9";
            src = fetchHex {
              pkg = "rebar3_lint";
              version = "0.1.9";
              sha256 =
                "56c85c3412d697e4b91796753df0392547e8e7a46f94ea24f91fe49fb284a12e";
            };

            beamDeps  = [ elvis_core_0_3_6 goldrush_0_1_9 ];

            meta = {
              description = ''A rebar plugin for elvis'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/project-fifo/rebar3_lint";
            };
          } // packageOverrides)
      ) {};

    rebar3_lint = rebar3_lint_0_1_9;

    rebar3_live_0_1_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, enotify_0_1_0 }:
          buildRebar3 ({
            name = "rebar3_live";
            version = "0.1.3";
            src = fetchHex {
              pkg = "rebar3_live";
              version = "0.1.3";
              sha256 =
                "d9ee2ff022fc73ac94f206c13ff8aa7591a536704f49c4cbacabf37d181a4391";
            };

            beamDeps  = [ enotify_0_1_0 ];

            meta = {
              description = ''Rebar3 live plugin'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pvmart/rebar3_live";
            };
          } // packageOverrides)
      ) {};

    rebar3_live = rebar3_live_0_1_3;

    rebar3_neotoma_plugin_0_2_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, neotoma_1_7_3 }:
          buildRebar3 ({
            name = "rebar3_neotoma_plugin";
            version = "0.2.0";
            src = fetchHex {
              pkg = "rebar3_neotoma_plugin";
              version = "0.2.0";
              sha256 =
                "c0ebbdb08c017cac90c7d3310a9bd4a5088a46abd4e2fef9e9a9805a657396b8";
            };

            beamDeps  = [ neotoma_1_7_3 ];

            meta = {
              description = ''Neotoma rebar plugin'';
              license = stdenv.lib.licenses.apsl20;
              homepage =
                "https://github.com/zamotivator/rebar3_neotoma_plugin";
            };
          } // packageOverrides)
      ) {};

    rebar3_neotoma_plugin = rebar3_neotoma_plugin_0_2_0;

    rebar3_proper_0_7_2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, proper_1_2_0 }:
          buildRebar3 ({
            name = "rebar3_proper";
            version = "0.7.2";
            src = fetchHex {
              pkg = "rebar3_proper";
              version = "0.7.2";
              sha256 =
                "0e5b9405a2815e5aadae7561f08514ee839d628071bb08dc67d2abcbeae98220";
            };

            beamDeps  = [ proper_1_2_0 ];

            meta = {
              description = ''Run PropEr test suites'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/ferd/rebar3_proper";
            };
          } // packageOverrides)
      ) {};

    rebar3_proper = rebar3_proper_0_7_2;

    rebar3_proper_plugin_0_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "rebar3_proper_plugin";
            version = "0.1.0";
            src = fetchHex {
              pkg = "rebar3_proper_plugin";
              version = "0.1.0";
              sha256 =
                "7071555afb623e73a2c572de6d4379f9c197b44e68608944eb2835617faed10d";
            };

            meta = {
              description = ''A rebar plugin'';

            };
          } // packageOverrides)
      ) {};

    rebar3_proper_plugin = rebar3_proper_plugin_0_1_0;

    rebar3_protobuffs_0_2_0 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, protobuffs_0_8_2
        }:
          buildRebar3 ({
            name = "rebar3_protobuffs";
            version = "0.2.0";
            src = fetchHex {
              pkg = "rebar3_protobuffs";
              version = "0.2.0";
              sha256 =
                "b5422c5aee1dcea90fa44e4b769c01e8cefe8b1ab09e44b4d2008d465e80c49c";
            };

            beamDeps  = [ protobuffs_0_8_2 ];

            meta = {
              description = ''A rebar plugin'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/benoitc/rebar3_protobuffs";
            };
          } // packageOverrides)
      ) {};

    rebar3_protobuffs = rebar3_protobuffs_0_2_0;

    rebar3_raw_deps_2_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "rebar3_raw_deps";
            version = "2.0.0";
            src = fetchHex {
              pkg = "rebar3_raw_deps";
              version = "2.0.0";
              sha256 =
                "2306e8dc50959caaadf920b2b605dc95f8eade87da5c87ac4c5aac87eaa8f5df";
            };

            meta = {
              description = ''Provider for supporting the raw deps'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/soranoba/rebar3_raw_deps";
            };
          } // packageOverrides)
      ) {};

    rebar3_raw_deps = rebar3_raw_deps_2_0_0;

    rebar3_run_0_2_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "rebar3_run";
            version = "0.2.0";
            src = fetchHex {
              pkg = "rebar3_run";
              version = "0.2.0";
              sha256 =
                "321e0647893957d1bb05a88d940a8a3b9129097d63529e13f815c4857bf29497";
            };
            compilePorts = true;

            meta = {
              description = ''A rebar plugin'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tsloughter/rebar3_run";
            };
          } // packageOverrides)
      ) {};

    rebar3_run = rebar3_run_0_2_0;

    rebar3_shellrpc_0_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "rebar3_shellrpc";
            version = "0.1.0";
            src = fetchHex {
              pkg = "rebar3_shellrpc";
              version = "0.1.0";
              sha256 =
                "a5e358e8523ec99dcd7090efdd52345d847b498daffc4668242644dec0ad80ba";
            };

            meta = {
              description = ''A plugin to send commands to a running rebar3
                            shell'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/ferd/rebar3_shellrpc";
            };
          } // packageOverrides)
      ) {};

    rebar3_shellrpc = rebar3_shellrpc_0_1_0;

    rebar3_tsung_0_1_4 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "rebar3_tsung";
            version = "0.1.4";
            src = fetchHex {
              pkg = "rebar3_tsung";
              version = "0.1.4";
              sha256 =
                "175657fb40619d82091d9710b4d6ba4f6685059a2350ceeb56ef80931e697758";
            };

            meta = {
              description = ''A rebar plugin for helping develop Tsung
                            plugin'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zyuyou/rebar3_tsung";
            };
          } // packageOverrides)
      ) {};

    rebar3_tsung = rebar3_tsung_0_1_4;

    rebar3_vendor_0_3_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "rebar3_vendor";
            version = "0.3.1";
            src = fetchHex {
              pkg = "rebar3_vendor";
              version = "0.3.1";
              sha256 =
                "64c45d00fece3b1f40c7445986e2a5543aad9868c314230a5165e1474f632c3e";
            };

            meta = {
              description = ''Rebar3 plugin for vendoring dependencies.'';
              license = stdenv.lib.licenses.mit;
              homepage = "http://github.com/ostinelli/rebar3_vendor";
            };
          } // packageOverrides)
      ) {};

    rebar3_vendor = rebar3_vendor_0_3_1;

    rebar3_yang_plugin_0_2_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "rebar3_yang_plugin";
            version = "0.2.1";
            src = fetchHex {
              pkg = "rebar3_yang_plugin";
              version = "0.2.1";
              sha256 =
                "8a68890ba67baf25b539acfd20783732a90b57f75f7d868cb62d1f7f061449fa";
            };

            meta = {
              description = ''A rebar plugin for yang'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/surik/rebar3_yang_plugin";
            };
          } // packageOverrides)
      ) {};

    rebar3_yang_plugin = rebar3_yang_plugin_0_2_1;

    rebar_alias_0_2_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "rebar_alias";
            version = "0.2.0";
            src = fetchHex {
              pkg = "rebar_alias";
              version = "0.2.0";
              sha256 =
                "6b6dad39a68981b63edece66ca9d8d95c22e204f77deaaaddd9c0869df8aeae8";
            };

            meta = {
              description = ''Alias rebar3 tasks to one command.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tsloughter/rebar_alias";
            };
          } // packageOverrides)
      ) {};

    rebar_alias = rebar_alias_0_2_0;

    rebar_cmd_0_2_5 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "rebar_cmd";
            version = "0.2.5";
            src = fetchHex {
              pkg = "rebar_cmd";
              version = "0.2.5";
              sha256 =
                "305b1cb9f0bd098196ca1a4775c8c0bc3f43fbdd7dfaeadf00347d6da933aeb3";
            };

            meta = {
              description = ''Run custom shell commands as rebar3 tasks'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/shezarkhani/rebar_cmd";
            };
          } // packageOverrides)
      ) {};

    rebar_cmd = rebar_cmd_0_2_5;

    rebar_covertool_1_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "rebar_covertool";
            version = "1.0.0";
            src = fetchHex {
              pkg = "rebar_covertool";
              version = "1.0.0";
              sha256 =
                "55d0f73d5bd2ca45ca36e5db49a73b62654c7c42fa3bf75a5acf75694a83cd09";
            };

            meta = {
              description = ''Covertool Build Plugin'';
              license = stdenv.lib.licenses.free;
            };
          } // packageOverrides)
      ) {};

    rebar_covertool = rebar_covertool_1_0_0;

    rebar_eqc_0_0_13 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, cf_0_2_2 }:
          buildRebar3 ({
            name = "rebar_eqc";
            version = "0.0.13";
            src = fetchHex {
              pkg = "rebar_eqc";
              version = "0.0.13";
              sha256 =
                "f2720e5e92324926543a0658bbe53acfc1a70d2ac05d858a96ded27e9f4c02df";
            };

            beamDeps  = [ cf_0_2_2 ];

            meta = {
              description = ''Plugin to run EQC properties'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/project-fifo/rebar3-eqc-plugin";
            };
          } // packageOverrides)
      ) {};

    rebar_eqc = rebar_eqc_0_0_13;

    rebar_erl_vsn_0_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "rebar_erl_vsn";
            version = "0.1.0";
            src = fetchHex {
              pkg = "rebar_erl_vsn";
              version = "0.1.0";
              sha256 =
                "7cf1e2e85a80785a4e4e1529a2c837dbd2d540214cf791214e56f931e5e9865d";
            };

            meta = {
              description = ''defines for erlang versions'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    rebar_erl_vsn = rebar_erl_vsn_0_1_0;

    rebar_protobuffs_0_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, gpb_3_18_8 }:
          buildRebar3 ({
            name = "rebar_protobuffs";
            version = "0.1.0";
            src = fetchHex {
              pkg = "rebar_protobuffs";
              version = "0.1.0";
              sha256 =
                "1345b2135aed454855bfc74b760feb420924824c937157098b1f8668deb919b5";
            };

            beamDeps  = [ gpb_3_18_8 ];

            meta = {
              description = ''A rebar plugin'';

            };
          } // packageOverrides)
      ) {};

    rebar_protobuffs = rebar_protobuffs_0_1_0;

    rebar_prv_mlfe_0_3_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "rebar_prv_mlfe";
            version = "0.3.0";
            src = fetchHex {
              pkg = "rebar_prv_mlfe";
              version = "0.3.0";
              sha256 =
                "1f52ad949941a9a9998c2be6abadf5a43923f9bd0c2042828556b6258427425b";
            };

            meta = {
              description = ''A rebar plugin'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/tsloughter/rebar_prv_mlfe";
            };
          } // packageOverrides)
      ) {};

    rebar_prv_mlfe = rebar_prv_mlfe_0_3_0;

    rebind_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "rebind";
            version = "0.1.3";
            src = fetchHex {
              pkg = "rebind";
              version = "0.1.3";
              sha256 =
                "043322759e646ef255e91440d275573b70d9ac6bdf10988ec976ddcf1baf99c3";
            };

            meta = {
              description = ''rebind parse transform for erlang'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/camshaft/rebind";
            };
          } // packageOverrides)
      ) {};

    rebind = rebind_0_1_3;

    recaptcha_2_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_9_2,
          poison_1_0_2
        }:
          buildMix ({
            name = "recaptcha";
            version = "2.1.1";
            src = fetchHex {
              pkg = "recaptcha";
              version = "2.1.1";
              sha256 =
                "bcd5b2bff4813c1fe7bee82c5dc1d0df0efb76f85b31d6187026441cf05471f6";
            };
            beamDeps  = [ httpoison_0_9_2 poison_1_0_2 ];

            meta = {
              longDescription = ''A simple reCaptcha package for Elixir
                                applications, provides verification and
                                templates for rendering forms with the reCaptcha
                                widget'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/samueljseay/recaptcha";
            };
          } // packageOverrides)
      ) {};

    recaptcha = recaptcha_2_1_1;

    receipt_verifier_0_5_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_1_0_2 }:
          buildMix ({
            name = "receipt_verifier";
            version = "0.5.0";
            src = fetchHex {
              pkg = "receipt_verifier";
              version = "0.5.0";
              sha256 =
                "180b226d319656e119dc690b528666e04dcebae4e92467f01735e42c995f3a87";
            };
            beamDeps  = [ poison_1_0_2 ];

            meta = {
              description = ''Verify iTunes receipt with the App Store'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/linjunpop/receipt_verifier";
            };
          } // packageOverrides)
      ) {};

    receipt_verifier = receipt_verifier_0_5_0;

    recon_2_3_2 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex }:
          buildErlangMk ({
            name = "recon";
            version = "2.3.2";
            src = fetchHex {
              pkg = "recon";
              version = "2.3.2";
              sha256 =
                "a6fcfbdabe1aef9119b871304846b1ce282d9a4124bcddafc7616c1a256c7596";
            };

            meta = {
              description = ''Diagnostic tools for production use'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/ferd/recon/";
            };
          } // packageOverrides)
      ) {};

    recon = recon_2_3_2;

    recon_ex_0_9_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, recon_2_3_2 }:
          buildMix ({
            name = "recon_ex";
            version = "0.9.1";
            src = fetchHex {
              pkg = "recon_ex";
              version = "0.9.1";
              sha256 =
                "ca124759162c082adbb29078eadb9ab102425493c94387221d1e11acd0e050f7";
            };
            beamDeps  = [ recon_2_3_2 ];

            meta = {
              description = ''Elixir wrapper for Recon, diagnostic tools for
                            production use'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/tatsuya6502/recon_ex";
            };
          } // packageOverrides)
      ) {};

    recon_ex = recon_ex_0_9_1;

    record_translator_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "record_translator";
            version = "0.0.3";
            src = fetchHex {
              pkg = "record_translator";
              version = "0.0.3";
              sha256 =
                "d6a30b2b23194e58c282c86cc0d3f61a738e1840afcee4007fdbb10e7ad7bf76";
            };

            meta = {
              description = ''Erlang`s file of records to Elixir`s maps'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/massn/record_translator";
            };
          } // packageOverrides)
      ) {};

    record_translator = record_translator_0_0_3;

    recordset_0_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "recordset";
            version = "0.1.0";
            src = fetchHex {
              pkg = "recordset";
              version = "0.1.0";
              sha256 =
                "0bb18c47753e795af9ed66c0924b54443b8eb84bc6d1117413aeeb24be2d2a2d";
            };

            meta = {
              description = ''A fixed-size ordered set of complex terms.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mochi/recordset";
            };
          } // packageOverrides)
      ) {};

    recordset = recordset_0_1_0;

    recurly_0_2_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exml_0_1_1,
          httpoison_0_9_2,
          sweet_xml_0_6_5,
          xml_builder_0_0_9
        }:
          buildMix ({
            name = "recurly";
            version = "0.2.2";
            src = fetchHex {
              pkg = "recurly";
              version = "0.2.2";
              sha256 =
                "9e4dde1bb655dd259f46a3bfc89842fe5ec1fe70289f0fe0db4b1551e3f3c879";
            };
            beamDeps  = [
                          exml_0_1_1
                          httpoison_0_9_2
                          sweet_xml_0_6_5
                          xml_builder_0_0_9
                        ];

            meta = {
              description = ''An elixir client for the Recurly API
                            https://dev.recurly.com/'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bhelx/recurly-client-elixir";
            };
          } // packageOverrides)
      ) {};

    recurly = recurly_0_2_2;

    recurring_events_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "recurring_events";
            version = "0.1.0";
            src = fetchHex {
              pkg = "recurring_events";
              version = "0.1.0";
              sha256 =
                "cb8931a8c5b441aace67c60c9f4aec228c47b885972f78848ed8a505c72b8479";
            };

            meta = {
              description = ''Elixir library providing recurring calendar
                            events support.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pbogut/recurring_events";
            };
          } // packageOverrides)
      ) {};

    recurring_events = recurring_events_0_1_0;

    red_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, redix_0_4_0 }:
          buildMix ({
            name = "red";
            version = "0.1.1";
            src = fetchHex {
              pkg = "red";
              version = "0.1.1";
              sha256 =
                "817426d5417c8b2b326f31423b300758722956777e8ecf507237908a35e80f81";
            };
            beamDeps  = [ redix_0_4_0 ];

            meta = {
              description = ''Persists relations between entities in Redis'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/rodrigues/red";
            };
          } // packageOverrides)
      ) {};

    red = red_0_1_1;

    red_alert_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, timex_3_1_15 }:
          buildMix ({
            name = "red_alert";
            version = "0.2.1";
            src = fetchHex {
              pkg = "red_alert";
              version = "0.2.1";
              sha256 =
                "6804650d8b7d8b9b62dbb0e5041ce1d468f441430c86c59bafa41606eff9b8b0";
            };
            beamDeps  = [ timex_3_1_15 ];

            meta = {
              description = ''Monitor events that do NOT happen in designated
                            schedule.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/raycheung/red_alert";
            };
          } // packageOverrides)
      ) {};

    red_alert = red_alert_0_2_1;

    red_black_tree_1_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "red_black_tree";
            version = "1.2.0";
            src = fetchHex {
              pkg = "red_black_tree";
              version = "1.2.0";
              sha256 =
                "1e8e7b85d075e249f9384ba0fcd2aacbff3697a5cb3cb5c9838c86f762b79725";
            };

            meta = {
              description = ''Red-Black trees: an ordered key-value store with
                            O(log(N)) performance'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/SenecaSystems/red_black_tree";
            };
          } // packageOverrides)
      ) {};

    red_black_tree = red_black_tree_1_2_0;

    redbird_0_4_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exredis_0_2_5,
          plug_1_3_5
        }:
          buildMix ({
            name = "redbird";
            version = "0.4.0";
            src = fetchHex {
              pkg = "redbird";
              version = "0.4.0";
              sha256 =
                "49efc5b8e01cff84cce16d61c7b486129ba6cb739206e6df994717fb6e9537dc";
            };
            beamDeps  = [ exredis_0_2_5 plug_1_3_5 ];

            meta = {
              description = ''A Redis adapter for Plug.Session'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/thoughtbot/redbird";
            };
          } // packageOverrides)
      ) {};

    redbird = redbird_0_4_0;

    redbug_1_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "redbug";
            version = "1.0.0";
            src = fetchHex {
              pkg = "redbug";
              version = "1.0.0";
              sha256 =
                "211ab7610d5a3c73817fa4d204608df2e440b6904e8301874bb4046474f1f701";
            };

            meta = {
              description = ''Erlang Tracing Debugger'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/massemanet/redbug";
            };
          } // packageOverrides)
      ) {};

    redbug = redbug_1_0_0;

    reddhl_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_1_4_0
        }:
          buildMix ({
            name = "reddhl";
            version = "0.0.1";
            src = fetchHex {
              pkg = "reddhl";
              version = "0.0.1";
              sha256 =
                "4b2a5b1e3119b5b44e57c10e395fc817d977bf7fd72464605efff08266336871";
            };
            beamDeps  = [ httpoison_0_11_2 poison_1_4_0 ];

            meta = {
              description = ''An headline and link puller for Reddit and its
                            various subreddits '';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/MonkeyIsNull/reddhl";
            };
          } // packageOverrides)
      ) {};

    reddhl = reddhl_0_0_1;

    redelix_0_0_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_0_4,
          httpotion_3_0_2,
          plug_1_3_5,
          poison_2_2_0
        }:
          buildMix ({
            name = "redelix";
            version = "0.0.4";
            src = fetchHex {
              pkg = "redelix";
              version = "0.0.4";
              sha256 =
                "49217b4502fed784440c9ce0335774241b67bde17adb3f2ebad598e06c8ff843";
            };
            beamDeps  = [
                          cowboy_1_0_4 httpotion_3_0_2 plug_1_3_5 poison_2_2_0
                        ];

            meta = {
              description = ''Redmine REST API client library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/wuatanabe/redelix";
            };
          } // packageOverrides)
      ) {};

    redelix = redelix_0_0_4;

    redis_bloomfilter_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, redix_0_6_1 }:
          buildMix ({
            name = "redis_bloomfilter";
            version = "0.1.2";
            src = fetchHex {
              pkg = "redis_bloomfilter";
              version = "0.1.2";
              sha256 =
                "f312d7fa8a344743c3730f4255fca0e6e2fe5803cf9991ca88ff11396dc68746";
            };
            beamDeps  = [ redix_0_6_1 ];

            meta = {
              longDescription = ''A distributed bloom filter implementation
                                based on Redis. Uses Erik Dubbelboer`s LUA
                                scripts for the bloom filter implementation.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sb8244/elixir_redis_bloomfilter";
            };
          } // packageOverrides)
      ) {};

    redis_bloomfilter = redis_bloomfilter_0_1_2;

    redis_connection_pool_0_1_6 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exredis_0_2_5,
          poolboy_1_5_1
        }:
          buildMix ({
            name = "redis_connection_pool";
            version = "0.1.6";
            src = fetchHex {
              pkg = "redis_connection_pool";
              version = "0.1.6";
              sha256 =
                "1f25e63a6d41628b81dc48a91898ffcbc4342b738dd9bc6ba9340b8a781c1723";
            };
            beamDeps  = [ exredis_0_2_5 poolboy_1_5_1 ];

            meta = {
              description = ''Redis connection pool using Poolboy and
                            Exredis.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nsweeting/redis_pool";
            };
          } // packageOverrides)
      ) {};

    redis_connection_pool = redis_connection_pool_0_1_6;

    redis_logger_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          poison_3_1_0,
          redix_0_6_1
        }:
          buildMix ({
            name = "redis_logger";
            version = "0.1.1";
            src = fetchHex {
              pkg = "redis_logger";
              version = "0.1.1";
              sha256 =
                "ba81417dc087b2cfd632b822bc296e0a92ad46b7f31b14d9998fe784c80b49bc";
            };
            beamDeps  = [ poison_3_1_0 redix_0_6_1 ];

            meta = {
              description = ''A Redis based backend for Logger which pushes to
                            a SortedSet.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/suddenrushofsushi/redis_logger";
            };
          } // packageOverrides)
      ) {};

    redis_logger = redis_logger_0_1_1;

    redis_mutex_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exredis_0_2_5,
          timex_3_1_15,
          uuid_1_1_7
        }:
          buildMix ({
            name = "redis_mutex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "redis_mutex";
              version = "0.1.0";
              sha256 =
                "22400c680b495292f6f0a4fba0aa89b7b9d56a47942dc5481d23577f31d8fb98";
            };
            beamDeps  = [ exredis_0_2_5 timex_3_1_15 uuid_1_1_7 ];

            meta = {
              description = ''RedisMutex is a library for creating a Redis lock
                            for a single Redis instance.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/podium/redis_mutex";
            };
          } // packageOverrides)
      ) {};

    redis_mutex = redis_mutex_0_1_0;

    redis_pool_0_2_5 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          eredis_1_0_8,
          poolboy_1_5_1
        }:
          buildMix ({
            name = "redis_pool";
            version = "0.2.5";
            src = fetchHex {
              pkg = "redis_pool";
              version = "0.2.5";
              sha256 =
                "5631b15a2e5eaa30db3c2279a55192e78e5032b8af4d16f12e695c9475444fdb";
            };
            beamDeps  = [ eredis_1_0_8 poolboy_1_5_1 ];

            meta = {
              description = ''Redis pool for Elixir. Build on top of eredis and
                            poolboy.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/le0pard/redis_pool";
            };
          } // packageOverrides)
      ) {};

    redis_pool = redis_pool_0_2_5;

    redis_poolex_0_0_6 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exredis_0_2_5,
          poolboy_1_5_1
        }:
          buildMix ({
            name = "redis_poolex";
            version = "0.0.6";
            src = fetchHex {
              pkg = "redis_poolex";
              version = "0.0.6";
              sha256 =
                "ce83d9dbdf1095e7608d5500b88f97ec700c0d8a65c04ad9cfe5f6f929321541";
            };
            beamDeps  = [ exredis_0_2_5 poolboy_1_5_1 ];

            meta = {
              description = ''Redis connection pool using poolboy and exredis
                            libraries'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/oivoodoo/redis_poolex";
            };
          } // packageOverrides)
      ) {};

    redis_poolex = redis_poolex_0_0_6;

    redis_queue_reader_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exredis_0_2_5,
          gproc_0_6_1,
          poolboy_1_5_1
        }:
          buildMix ({
            name = "redis_queue_reader";
            version = "0.1.0";
            src = fetchHex {
              pkg = "redis_queue_reader";
              version = "0.1.0";
              sha256 =
                "cd67059e3988f72a220a023fc4322627c4519a93b65a9694c0ce45d09b25ba25";
            };
            beamDeps  = [ exredis_0_2_5 gproc_0_6_1 poolboy_1_5_1 ];

            meta = {
              longDescription = ''This application reads from a redis queue
                                (RPOP) and then executes functions from a list.
                                The first function from the list does not
                                receive parameter and must return true or false.
                                The second function from the list takes a result
                                of reading from the redis queue (:undefined,
                                :no_connection or string that have been read
                                from the redis queue). Every next function from
                                the list gets the result of the calculation of
                                the previous one. While the first function
                                return false the next functions from list not be
                                executed'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/AlexeyAlexey/redis_queue_reader";
            };
          } // packageOverrides)
      ) {};

    redis_queue_reader = redis_queue_reader_0_1_0;

    redis_sessions_0_2_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          poison_1_0_2,
          poolboy_1_5_1,
          redix_0_6_1,
          vex_0_6_0
        }:
          buildMix ({
            name = "redis_sessions";
            version = "0.2.1";
            src = fetchHex {
              pkg = "redis_sessions";
              version = "0.2.1";
              sha256 =
                "eae2de48e6b385353297ae71d311a54b2cc33cadbc0b9b38f11acd18553390ec";
            };
            beamDeps  = [ poison_1_0_2 poolboy_1_5_1 redix_0_6_1 vex_0_6_0 ];

            meta = {
              description = ''An advanced session store for Elixir and NodeJS
                            based on Redis'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mpneuried/ex-redis-sessions";
            };
          } // packageOverrides)
      ) {};

    redis_sessions = redis_sessions_0_2_1;

    redis_unique_queue_0_1_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, redix_0_6_1 }:
          buildMix ({
            name = "redis_unique_queue";
            version = "0.1.4";
            src = fetchHex {
              pkg = "redis_unique_queue";
              version = "0.1.4";
              sha256 =
                "a7f4ac79dddcd01b5277a13e81da32be11d10891eab41784e3dccc86a23d2f31";
            };
            beamDeps  = [ redix_0_6_1 ];

            meta = {
              description = ''A unique FIFO queue with atomic operations built
                            on top of Redis.'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/mvalitov/elixir-redis-unique-queue";
            };
          } // packageOverrides)
      ) {};

    redis_unique_queue = redis_unique_queue_0_1_4;

    redisank_0_1_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          plug_1_1_7,
          rdtype_0_5_1,
          timex_3_1_15
        }:
          buildMix ({
            name = "redisank";
            version = "0.1.3";
            src = fetchHex {
              pkg = "redisank";
              version = "0.1.3";
              sha256 =
                "58662c1c8390959722e4cecee5338eb86c8f99b8d42a81782868c0d03b49e4d4";
            };
            beamDeps  = [ plug_1_1_7 rdtype_0_5_1 timex_3_1_15 ];

            meta = {
              description = ''A common ranking system on Redis with Plug'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ikeikeikeike/redisank";
            };
          } // packageOverrides)
      ) {};

    redisank = redisank_0_1_3;

    redix_0_3_6 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, connection_1_0_4 }:
          buildMix ({
            name = "redix";
            version = "0.3.6";
            src = fetchHex {
              pkg = "redix";
              version = "0.3.6";
              sha256 =
                "6c7e3d6bf904eeff99232d28832d3234e4309179dc11516829dd672c8a98a663";
            };
            beamDeps  = [ connection_1_0_4 ];

            meta = {
              description = ''Superfast, pipelined, resilient Redis driver for
                            Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/whatyouhide/redix";
            };
          } // packageOverrides)
      ) {};

    redix_0_4_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, connection_1_0_4 }:
          buildMix ({
            name = "redix";
            version = "0.4.0";
            src = fetchHex {
              pkg = "redix";
              version = "0.4.0";
              sha256 =
                "c874f7343a7f3212d7745cffd70bd489f8ef8e02daad23257c0c9d327974f366";
            };
            beamDeps  = [ connection_1_0_4 ];

            meta = {
              description = ''Superfast, pipelined, resilient Redis driver for
                            Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/whatyouhide/redix";
            };
          } // packageOverrides)
      ) {};

    redix_0_5_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, connection_1_0_4 }:
          buildMix ({
            name = "redix";
            version = "0.5.2";
            src = fetchHex {
              pkg = "redix";
              version = "0.5.2";
              sha256 =
                "26486675f3519930654d6bb1206fcfda124f056376c668d444578c0bc56fd5f6";
            };
            beamDeps  = [ connection_1_0_4 ];

            meta = {
              description = ''Superfast, pipelined, resilient Redis driver for
                            Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/whatyouhide/redix";
            };
          } // packageOverrides)
      ) {};

    redix_0_6_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, connection_1_0_4 }:
          buildMix ({
            name = "redix";
            version = "0.6.1";
            src = fetchHex {
              pkg = "redix";
              version = "0.6.1";
              sha256 =
                "aa171cc3827c69948269a37449e728cc5b803f6c9f86dcb3bff5a8a7b2274cef";
            };
            beamDeps  = [ connection_1_0_4 ];

            meta = {
              description = ''Superfast, pipelined, resilient Redis driver for
                            Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/whatyouhide/redix";
            };
          } // packageOverrides)
      ) {};

    redix = redix_0_6_1;

    redix_pool_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          poolboy_1_5_1,
          redix_0_6_1
        }:
          buildMix ({
            name = "redix_pool";
            version = "0.1.0";
            src = fetchHex {
              pkg = "redix_pool";
              version = "0.1.0";
              sha256 =
                "5421208bd27b9bdad7ccdc612e8bb8a7ec4e1e519fec5f27320df59a29969b09";
            };
            beamDeps  = [ poolboy_1_5_1 redix_0_6_1 ];

            meta = {
              description = ''Simple Redis pooling built on redix and
                            poolboy'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/opendoor-labs/redix_pool";
            };
          } // packageOverrides)
      ) {};

    redix_pool = redix_pool_0_1_0;

    redix_pubsub_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          connection_1_0_4,
          redix_0_4_0
        }:
          buildMix ({
            name = "redix_pubsub";
            version = "0.1.1";
            src = fetchHex {
              pkg = "redix_pubsub";
              version = "0.1.1";
              sha256 =
                "77d7c1feb46c2b028b29c26059f0d1b26e6c32b302a96b6731fcac3c7fd2ef3e";
            };
            beamDeps  = [ connection_1_0_4 redix_0_4_0 ];

            meta = {
              description = ''Elixir library for using Redis Pub/Sub features
                            (built on top of Redix)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/whatyouhide/redix_pubsub";
            };
          } // packageOverrides)
      ) {};

    redix_pubsub_0_4_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          connection_1_0_4,
          redix_0_6_1
        }:
          buildMix ({
            name = "redix_pubsub";
            version = "0.4.1";
            src = fetchHex {
              pkg = "redix_pubsub";
              version = "0.4.1";
              sha256 =
                "f90cec7296d762d0dfddd471c5f475e8963a8be5a169389e5be39785dd042e58";
            };
            beamDeps  = [ connection_1_0_4 redix_0_6_1 ];

            meta = {
              description = ''Elixir library for using Redis Pub/Sub features
                            (built on top of Redix)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/whatyouhide/redix_pubsub";
            };
          } // packageOverrides)
      ) {};

    redix_pubsub = redix_pubsub_0_4_1;

    redix_pubsub_fastlane_0_1_9 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          poolboy_1_2_1,
          redix_0_4_0,
          redix_pubsub_0_1_1
        }:
          buildMix ({
            name = "redix_pubsub_fastlane";
            version = "0.1.9";
            src = fetchHex {
              pkg = "redix_pubsub_fastlane";
              version = "0.1.9";
              sha256 =
                "5fba8ae9be56b5309385d8890f5734a90d0e0888bdbba3b38baa463f119ec837";
            };
            beamDeps  = [ poolboy_1_2_1 redix_0_4_0 redix_pubsub_0_1_1 ];

            meta = {
              description = ''Fastlane pattern based on Redix.PubSub interface
                            for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cnsa/redix_pubsub_fastlane";
            };
          } // packageOverrides)
      ) {};

    redix_pubsub_fastlane = redix_pubsub_fastlane_0_1_9;

    redix_sharding_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, redix_0_6_1 }:
          buildMix ({
            name = "redix_sharding";
            version = "0.1.1";
            src = fetchHex {
              pkg = "redix_sharding";
              version = "0.1.1";
              sha256 =
                "ae12c9e93413b0e8e07e594d6471625db8e1680f834a9fec871ac95064e96b3a";
            };
            beamDeps  = [ redix_0_6_1 ];

            meta = {
              description = ''A wrapper of Redix with sharding & pooling
                            support'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/xxuejie/redix_sharding";
            };
          } // packageOverrides)
      ) {};

    redix_sharding = redix_sharding_0_1_1;

    redo_2_0_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "redo";
            version = "2.0.1";
            src = fetchHex {
              pkg = "redo";
              version = "2.0.1";
              sha256 =
                "f7b2be8c825ec34413c54d8f302cc935ce4ecac8421ae3914c5dadd816dcb1e6";
            };

            meta = {
              description = ''Pipelined Redis Erlang Driver'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/heroku/redo";
            };
          } // packageOverrides)
      ) {};

    redo = redo_2_0_1;

    redtube_1_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_1_5_2
        }:
          buildMix ({
            name = "redtube";
            version = "1.0.0";
            src = fetchHex {
              pkg = "redtube";
              version = "1.0.0";
              sha256 =
                "f9c5b83c3f860c448328079f1250b54f06749d9c1adb593f7e11e45fe8131a0d";
            };
            beamDeps  = [ httpoison_0_11_2 poison_1_5_2 ];

            meta = {
              description = ''API Wrapper for Redtube'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kkirsche/Redtube_Elixir";
            };
          } // packageOverrides)
      ) {};

    redtube = redtube_1_0_0;

    ref_inspector_0_14_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_8_6,
          poolboy_1_5_1,
          yamerl_0_5_0
        }:
          buildMix ({
            name = "ref_inspector";
            version = "0.14.0";
            src = fetchHex {
              pkg = "ref_inspector";
              version = "0.14.0";
              sha256 =
                "747c7350a3f23cba3bd9f1422c552a6e7e30fc60b9fcaa63a3adaa4c5fcf3d45";
            };
            beamDeps  = [ hackney_1_8_6 poolboy_1_5_1 yamerl_0_5_0 ];

            meta = {
              description = ''Referer parser library'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/elixytics/ref_inspector";
            };
          } // packageOverrides)
      ) {};

    ref_inspector = ref_inspector_0_14_0;

    reg_helper_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "reg_helper";
            version = "0.1.3";
            src = fetchHex {
              pkg = "reg_helper";
              version = "0.1.3";
              sha256 =
                "38e0a606a41c35aef91b27ba4056e46e55df97f4dc2d1fea90c818fe0f6b4e16";
            };

            meta = {
              description = ''Helps with Registry related tasks...'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/RaymondLoranger/reg_helper";
            };
          } // packageOverrides)
      ) {};

    reg_helper = reg_helper_0_1_3;

    regdom_0_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "regdom";
            version = "0.0.4";
            src = fetchHex {
              pkg = "regdom";
              version = "0.0.4";
              sha256 =
                "a14da9429d5e26117962a9484ee982552154437d8aac4466ff99fa105edbdb1b";
            };

            meta = {
              description = ''elixir port of regdom-lib'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/adqio/regdom-lib";
            };
          } // packageOverrides)
      ) {};

    regdom = regdom_0_0_4;

    relation_0_1_7 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          phoenix_1_3_0_rc_2,
          phoenix_ecto_3_2_3
        }:
          buildMix ({
            name = "relation";
            version = "0.1.7";
            src = fetchHex {
              pkg = "relation";
              version = "0.1.7";
              sha256 =
                "ea6afa4a39f84a07fae17bd6f771d9e7e181c577f7859236a13535889d47c31d";
            };
            beamDeps  = [ phoenix_1_3_0_rc_2 phoenix_ecto_3_2_3 ];

            meta = {
              description = ''common relation operations for Relational
                            database'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/linuxr/relation";
            };
          } // packageOverrides)
      ) {};

    relation = relation_0_1_7;

    relax_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          ecto_2_0_0_rc_6,
          ja_serializer_0_12_0,
          plug_1_3_5,
          poison_1_5_2
        }:
          buildMix ({
            name = "relax";
            version = "0.3.0";
            src = fetchHex {
              pkg = "relax";
              version = "0.3.0";
              sha256 =
                "04382f1d8a6d14e3a9b2177a318aa02129665fa3e00fb52d0042e286ea9af392";
            };
            beamDeps  = [
                          cowboy_1_1_2
                          ecto_2_0_0_rc_6
                          ja_serializer_0_12_0
                          plug_1_3_5
                          poison_1_5_2
                        ];

            meta = {
              longDescription = ''A jsonapi.org serializer and optional server
                                implementation in Elixir. Relax can be used as a
                                standalone API with Relax.Router and
                                Relax.Resources, or integrated into Phoenix
                                using Relax.Serializer.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/AgilionApps/relax";
            };
          } // packageOverrides)
      ) {};

    relax = relax_0_3_0;

    relax_lib_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, timex_3_1_15 }:
          buildMix ({
            name = "relax_lib";
            version = "0.1.1";
            src = fetchHex {
              pkg = "relax_lib";
              version = "0.1.1";
              sha256 =
                "4c73c0fd02bb598fb0a1ff75f554dd9af624679ad1b4418f4e6f5745e3aec471";
            };
            beamDeps  = [ timex_3_1_15 ];

            meta = {
              description = ''Relax Lib with some tools'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gialib/relax_lib";
            };
          } // packageOverrides)
      ) {};

    relax_lib = relax_lib_0_1_1;

    relax_site_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "relax_site";
            version = "0.1.0";
            src = fetchHex {
              pkg = "relax_site";
              version = "0.1.0";
              sha256 =
                "b120142de2eabd99bcec60c77e955eababd8ed1eb6a4d900a3d36a4e17fd521d";
            };

            meta = {
              description = ''A elixir website'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/gialib/relax_site";
            };
          } // packageOverrides)
      ) {};

    relax_site = relax_site_0_1_0;

    relax_yaml_0_1_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, yamerl_0_4_0 }:
          buildMix ({
            name = "relax_yaml";
            version = "0.1.4";
            src = fetchHex {
              pkg = "relax_yaml";
              version = "0.1.4";
              sha256 =
                "239cb0e69b8e1d14bb05663449f0d4ee6dd582070064e680be0d096c5cafe894";
            };
            beamDeps  = [ yamerl_0_4_0 ];

            meta = {
              description = ''YAML encode! and decode!'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gialib/relax_yaml";
            };
          } // packageOverrides)
      ) {};

    relax_yaml = relax_yaml_0_1_4;

    relflow_1_0_6 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "relflow";
            version = "1.0.6";
            src = fetchHex {
              pkg = "relflow";
              version = "1.0.6";
              sha256 =
                "16bbd0d96adb1f673911c32f1a801c500d97b8502771c93f0b8c300108892bfb";
            };

            meta = {
              description = ''Rebar3 release workflow plugin'';
              license = stdenv.lib.licenses.apsl20;
            };
          } // packageOverrides)
      ) {};

    relflow = relflow_1_0_6;

    relief_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "relief";
            version = "0.0.1";
            src = fetchHex {
              pkg = "relief";
              version = "0.0.1";
              sha256 =
                "81c51cdf1fbaa7654da74d4ac1831b0d79504affd7b1fbe9d6f16ce701288c50";
            };

            meta = {
              description = ''A collection of Elixir Stream oriented relief
                            mechanisms.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/voidlock/relief";
            };
          } // packageOverrides)
      ) {};

    relief = relief_0_0_1;

    relisa_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, exrm_0_18_8 }:
          buildMix ({
            name = "relisa";
            version = "0.1.0";
            src = fetchHex {
              pkg = "relisa";
              version = "0.1.0";
              sha256 =
                "e771fa9da8363571765374a0cf3f1237da8c1be35ea4109165928ca42895954c";
            };
            beamDeps  = [ exrm_0_18_8 ];

            meta = {
              description = ''Fast, simple, and composable deployment library
                            for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/SenecaSystems/relisa";
            };
          } // packageOverrides)
      ) {};

    relisa = relisa_0_1_0;

    reloader_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "reloader";
            version = "0.1.0";
            src = fetchHex {
              pkg = "reloader";
              version = "0.1.0";
              sha256 =
                "cb76941a8dd7d5a3a4140b551e7ff9957961b5e0694b4596f7bd90c7e29a6a91";
            };

            meta = {
              description = ''auto load the changed beam in development'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/indie21/reloader";
            };
          } // packageOverrides)
      ) {};

    reloader = reloader_0_1_0;

    relocker_0_0_8 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, exredis_0_2_5 }:
          buildMix ({
            name = "relocker";
            version = "0.0.8";
            src = fetchHex {
              pkg = "relocker";
              version = "0.0.8";
              sha256 =
                "e5678d5fe1795384c672a15a80bf91e3007683e5d22bc523eed634635e89bf4b";
            };
            beamDeps  = [ exredis_0_2_5 ];

            meta = {
              description = ''A library for holding a lock in Redis.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/grandCru/relocker";
            };
          } // packageOverrides)
      ) {};

    relocker = relocker_0_0_8;

    reltool_util_1_5_4 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "reltool_util";
            version = "1.5.4";
            src = fetchHex {
              pkg = "reltool_util";
              version = "1.5.4";
              sha256 =
                "82622d155e8d2c7521ded6452ba6355610731e03be42b7fdd55fdb48092315f9";
            };

            meta = {
              description = ''Erlang reltool utility functionality
                            application'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/okeuday/reltool_util";
            };
          } // packageOverrides)
      ) {};

    reltool_util_1_6_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "reltool_util";
            version = "1.6.0";
            src = fetchHex {
              pkg = "reltool_util";
              version = "1.6.0";
              sha256 =
                "84797bd1e4b9111336f2143068841bcf9919641229a573835556682186ef5d06";
            };

            meta = {
              description = ''Erlang reltool utility functionality
                            application'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/okeuday/reltool_util";
            };
          } // packageOverrides)
      ) {};

    reltool_util_1_7_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "reltool_util";
            version = "1.7.1";
            src = fetchHex {
              pkg = "reltool_util";
              version = "1.7.1";
              sha256 =
                "097e0b3d355e478e3c16f1258446287adb7cf6dba115f2a28f3d85a9c0457e25";
            };

            meta = {
              description = ''Erlang reltool utility functionality
                            application'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/okeuday/reltool_util";
            };
          } // packageOverrides)
      ) {};

    reltool_util = reltool_util_1_7_1;

    relx_3_14_0 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          bbmustache_1_0_4,
          cf_0_2_1,
          erlware_commons_0_18_0,
          getopt_0_8_2,
          providers_1_6_0
        }:
          buildRebar3 ({
            name = "relx";
            version = "3.14.0";
            src = fetchHex {
              pkg = "relx";
              version = "3.14.0";
              sha256 =
                "8a4a27e4fcf8958027ede737ad76d394c2b18241b7d9bc255da48c60b8b64d81";
            };

            beamDeps  = [
                          bbmustache_1_0_4
                          cf_0_2_1
                          erlware_commons_0_18_0
                          getopt_0_8_2
                          providers_1_6_0
                        ];

            meta = {
              description = ''Release assembler for Erlang/OTP Releases'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/erlware/relx";
            };
          } // packageOverrides)
      ) {};

    relx_3_23_0 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          bbmustache_1_0_4,
          cf_0_2_2,
          erlware_commons_1_0_0,
          getopt_0_8_2,
          providers_1_6_0
        }:
          buildRebar3 ({
            name = "relx";
            version = "3.23.0";
            src = fetchHex {
              pkg = "relx";
              version = "3.23.0";
              sha256 =
                "65d63f047876518f1784a27ccf16cf1c3f99df857acdf422ca0268674c28f380";
            };

            beamDeps  = [
                          bbmustache_1_0_4
                          cf_0_2_2
                          erlware_commons_1_0_0
                          getopt_0_8_2
                          providers_1_6_0
                        ];

            meta = {
              description = ''Release assembler for Erlang/OTP Releases'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/erlware/relx";
            };
          } // packageOverrides)
      ) {};

    relx = relx_3_23_0;

    remap_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "remap";
            version = "0.1.0";
            src = fetchHex {
              pkg = "remap";
              version = "0.1.0";
              sha256 =
                "e9b63b6e85d69357fd82d27c059dc53523c7ba0f8ca97851d9e28ebc4f56e076";
            };

            meta = {
              description = ''Map maps from maps/lists to another using
                            JSONPath.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/substantial/remap";
            };
          } // packageOverrides)
      ) {};

    remap = remap_0_1_0;

    remix_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "remix";
            version = "0.0.2";
            src = fetchHex {
              pkg = "remix";
              version = "0.0.2";
              sha256 =
                "5f5555646ed4fca83fab8620735150aa0bc408c5a17a70d28cfa7086bc6f497c";
            };

            meta = {
              description = ''Recompiles mix projects on any change to the lib
                            directory.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/AgilionApps/remix";
            };
          } // packageOverrides)
      ) {};

    remix = remix_0_0_2;

    remodel_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "remodel";
            version = "0.0.3";
            src = fetchHex {
              pkg = "remodel";
              version = "0.0.3";
              sha256 =
                "39b4e2cdc928b965b461331f421d67e4b032f34065cbf3b4766154794b22ec3b";
            };

            meta = {
              longDescription = ''Remodel is an Elixir presenter package used
                                to transform data structures. This is especially
                                useful when a desired representation doesn`t
                                match the schema defined within the database.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/stavro/remodel";
            };
          } // packageOverrides)
      ) {};

    remodel = remodel_0_0_3;

    remote_ip_0_1_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          combine_0_9_6,
          inet_cidr_1_0_2,
          plug_1_3_5
        }:
          buildMix ({
            name = "remote_ip";
            version = "0.1.3";
            src = fetchHex {
              pkg = "remote_ip";
              version = "0.1.3";
              sha256 =
                "b5029fe37e36a03fd7cb016c548739350d3748b0f479871604cf612d1107f28f";
            };
            beamDeps  = [ combine_0_9_6 inet_cidr_1_0_2 plug_1_3_5 ];

            meta = {
              longDescription = ''A plug to overwrite the Conn`s remote_ip
                                based on headers such as X-Forwarded-For.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ajvondrak/remote_ip";
            };
          } // packageOverrides)
      ) {};

    remote_ip = remote_ip_0_1_3;

    remote_ip_rewriter_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, plug_1_3_5 }:
          buildMix ({
            name = "remote_ip_rewriter";
            version = "0.0.2";
            src = fetchHex {
              pkg = "remote_ip_rewriter";
              version = "0.0.2";
              sha256 =
                "43aa5bc9c31adaa50594cb88cf48a20e80564e6ec4a2fe36be0ba8beffb387d9";
            };
            beamDeps  = [ plug_1_3_5 ];

            meta = {
              longDescription = ''An Elixir plug to rewrite the value of
                                remote_ip key of Plug.Conn struct if an
                                X-Forwarded-For header is found.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/krzysztofmo/remote-ip-rewriter";
            };
          } // packageOverrides)
      ) {};

    remote_ip_rewriter = remote_ip_rewriter_0_0_2;

    remote_monitor_1_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          bunt_0_2_0,
          sshex_2_1_0
        }:
          buildMix ({
            name = "remote_monitor";
            version = "1.0.0";
            src = fetchHex {
              pkg = "remote_monitor";
              version = "1.0.0";
              sha256 =
                "c4bc0a07d47576b7c198b729ccefe8a666d4a3dd3f5c67fbc7763b14f6c338ae";
            };
            beamDeps  = [ bunt_0_2_0 sshex_2_1_0 ];

            meta = {
              longDescription = ''A Mix task that helps you to observe your
                                remote elixir nodes from your local machine.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/schurig/elixir-remote-monitor";
            };
          } // packageOverrides)
      ) {};

    remote_monitor = remote_monitor_1_0_0;

    rename_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "rename";
            version = "0.1.0";
            src = fetchHex {
              pkg = "rename";
              version = "0.1.0";
              sha256 =
                "9ffc7c3363756c3ae0f60c082e95a1d6b8a352550be826f6220bc04b96e46fce";
            };

            meta = {
              description = ''For thoroughly renaming your Elixir projects'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/MainShayne233/rename";
            };
          } // packageOverrides)
      ) {};

    rename = rename_0_1_0;

    rendezvous_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "rendezvous";
            version = "0.0.1";
            src = fetchHex {
              pkg = "rendezvous";
              version = "0.0.1";
              sha256 =
                "92aa7157aa2d0c1dcfc1dfeddeaef023aca6f5f0790fd8040828c831f3f7f893";
            };

            meta = {
              longDescription = ''Implementation of the Rendezvous or Highest
                                Random Weight (HRW) hashing algorithm'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Puddah/Rendezvous";
            };
          } // packageOverrides)
      ) {};

    rendezvous = rendezvous_0_0_1;

    repg2_0_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "repg2";
            version = "0.0.4";
            src = fetchHex {
              pkg = "repg2";
              version = "0.0.4";
              sha256 =
                "ce7616f5589b9d695d5c72e85c07a9190144aaa385bd0569b7c261ae91bdbd91";
            };

            meta = {
              longDescription = ''A highly-documented translation of the
                                original Erlang pg2 implementation to Elixir for
                                educational purposes.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/antipax/repg2";
            };
          } // packageOverrides)
      ) {};

    repg2 = repg2_0_0_4;

    repo_0_6_2 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          epgpool_1_1_0,
          equery_0_9_1,
          jiffy_0_14_7,
          lager_3_2_1,
          zlist_1_0_3
        }:
          buildRebar3 ({
            name = "repo";
            version = "0.6.2";
            src = fetchHex {
              pkg = "repo";
              version = "0.6.2";
              sha256 =
                "21728d006b88e4b94741febc71039565470dee5a7f069fc9802e246366890a8d";
            };

            beamDeps  = [
                          epgpool_1_1_0
                          equery_0_9_1
                          jiffy_0_14_7
                          lager_3_2_1
                          zlist_1_0_3
                        ];

            meta = {
              longDescription = ''Data mapper and and DSL for writing queries
                                and interacting with PostgreSQL databases in
                                Erlang'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/egobrain/repo";
            };
          } // packageOverrides)
      ) {};

    repo = repo_0_6_2;

    repoquery_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "repoquery";
            version = "0.0.2";
            src = fetchHex {
              pkg = "repoquery";
              version = "0.0.2";
              sha256 =
                "6b379793fae7cf8ff696feaeff9bf06d58ad66a9cbadfc8a769291c54814c922";
            };

            meta = {
              description = ''An Elixir interface for the `repoquery` cli
                            tool.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rentpath/repoquery";
            };
          } // packageOverrides)
      ) {};

    repoquery = repoquery_0_0_2;

    reporter_0_6_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          certifi_0_4_0,
          feeder_ex_1_0_0,
          floki_0_17_2,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "reporter";
            version = "0.6.3";
            src = fetchHex {
              pkg = "reporter";
              version = "0.6.3";
              sha256 =
                "cdfbf6f18deec12eadd34aa95df72c12776c98b0f4fde8826d2b46c83de38ca3";
            };
            beamDeps  = [
                          certifi_0_4_0
                          feeder_ex_1_0_0
                          floki_0_17_2
                          httpoison_0_11_2
                          poison_3_1_0
                        ];

            meta = {
              description = ''Simple getting reviews library from AppStore and
                            GooglePlay'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/KazuCocoa/simple_app_reporter_ex";
            };
          } // packageOverrides)
      ) {};

    reporter = reporter_0_6_3;

    reprise_0_5_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "reprise";
            version = "0.5.1";
            src = fetchHex {
              pkg = "reprise";
              version = "0.5.1";
              sha256 =
                "bc05f6e329b0b9b2cb6f069fd2eab24e4ce7a1fe2d30cbb4080254f4dd88050a";
            };

            meta = {
              longDescription = ''Reprise reloads your modules after they`ve
                                been recompiled. It is thought as a companion to
                                inotify tools. It scans for changes in beam
                                files belonging to youyr project. Doesn`t
                                recompile stuff by itself.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/herenowcoder/reprise";
            };
          } // packageOverrides)
      ) {};

    reprise = reprise_0_5_1;

    reproject_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "reproject";
            version = "0.1.1";
            src = fetchHex {
              pkg = "reproject";
              version = "0.1.1";
              sha256 =
                "2f96b051aa8d46310e45061009a976cb229237a93933d78d3a4057543713d596";
            };

            meta = {
              longDescription = ''NIFs for repojecting points with proj4.
                                Inspiration from greenelephantlabs/proj4erl.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/rozap/reproject";
            };
          } // packageOverrides)
      ) {};

    reproject = reproject_0_1_1;

    requisito_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "requisito";
            version = "0.0.1";
            src = fetchHex {
              pkg = "requisito";
              version = "0.0.1";
              sha256 =
                "2b9e0fecd5b6011d636aa993f73f53df51b34fa38ff9156da4c834773c86df03";
            };

            meta = {
              longDescription = ''Requisito provides data specifications for
                                elixir applications. It is conceptually based on
                                Clojure`s spec but may vary significantly since
                                it is not a port.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jwaterfaucett/requisito";
            };
          } // packageOverrides)
      ) {};

    requisito = requisito_0_0_1;

    resin_0_4_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, plug_1_3_5 }:
          buildMix ({
            name = "resin";
            version = "0.4.1";
            src = fetchHex {
              pkg = "resin";
              version = "0.4.1";
              sha256 =
                "c6bdfd13e91cbc289df91440e216b91aa590a7dafe59958b0197cedd8cfef792";
            };
            beamDeps  = [ plug_1_3_5 ];

            meta = {
              description = ''Pour resin in your plug pipeline to add
                            (configurable) enterpriseyness!'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Frost/resin";
            };
          } // packageOverrides)
      ) {};

    resin = resin_0_4_1;

    resonator_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "resonator";
            version = "0.1.0";
            src = fetchHex {
              pkg = "resonator";
              version = "0.1.0";
              sha256 =
                "0ce3f0e1916ca86d23913c29a6c149e31a515e9a8f1c568c8e264bdb81f4ab39";
            };

            meta = {
              description = ''External API`s change resonator'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rubencaro/resonator";
            };
          } // packageOverrides)
      ) {};

    resonator = resonator_0_1_0;

    rest_1_5_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "rest";
            version = "1.5.0";
            src = fetchHex {
              pkg = "rest";
              version = "1.5.0";
              sha256 =
                "d99f75ef949eae41e28f707f9e1b6ea5fa07cba57c5365b5466ed357e8f78b07";
            };

            meta = {
              description = ''REST erlang interface generator'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/synrc/rest";
            };
          } // packageOverrides)
      ) {};

    rest = rest_1_5_0;

    rest_api_builder_0_6_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          event_queues_1_1_2,
          plug_1_3_5,
          poison_2_2_0
        }:
          buildMix ({
            name = "rest_api_builder";
            version = "0.6.0";
            src = fetchHex {
              pkg = "rest_api_builder";
              version = "0.6.0";
              sha256 =
                "2d478ba7815e54ca4297248f97ed532de018b0af4d848fcaf780461eaa5833fa";
            };
            beamDeps  = [ event_queues_1_1_2 plug_1_3_5 poison_2_2_0 ];

            meta = {
              description = ''Library for Elixir that uses a Provider to
                            generate RESTful web interfaces.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/cenurv/rest_api_builder";
            };
          } // packageOverrides)
      ) {};

    rest_api_builder = rest_api_builder_0_6_0;

    rest_api_builder_essp_0_6_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_schema_store_1_9_1,
          rest_api_builder_0_6_0
        }:
          buildMix ({
            name = "rest_api_builder_essp";
            version = "0.6.1";
            src = fetchHex {
              pkg = "rest_api_builder_essp";
              version = "0.6.1";
              sha256 =
                "3fb204e4fa9214028dcd47c49aaa057ba9dca0ec16d3dd1dce9351f9863999ab";
            };
            beamDeps  = [ ecto_schema_store_1_9_1 rest_api_builder_0_6_0 ];

            meta = {
              longDescription = ''A provider for REST API Builder that uses
                                Ecto Schema Store to provide resources.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/cenurv/rest_api_builder_essp";
            };
          } // packageOverrides)
      ) {};

    rest_api_builder_essp = rest_api_builder_essp_0_6_1;

    rest_client_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_2_2_1,
          inflex_1_4_1,
          mock_0_1_3,
          poison_1_5_2
        }:
          buildMix ({
            name = "rest_client";
            version = "0.0.1";
            src = fetchHex {
              pkg = "rest_client";
              version = "0.0.1";
              sha256 =
                "b537f9bc91fbf09ecb6c5890c0e5a01f20de869bc804f730688f61d6acd96cf8";
            };
            beamDeps  = [
                          httpotion_2_2_1 inflex_1_4_1 mock_0_1_3 poison_1_5_2
                        ];

            meta = {
              longDescription = ''RestClient is a generic REST client library.
                                It generates structs and functions for use with
                                APIs.'';

              homepage = "https://github.com/phikes/elixir-restclient";
            };
          } // packageOverrides)
      ) {};

    rest_client = rest_client_0_0_1;

    restarter_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "restarter";
            version = "0.1.0";
            src = fetchHex {
              pkg = "restarter";
              version = "0.1.0";
              sha256 =
                "730c8d258b3eb618c192f8ea095fba1180148643f7075f9076525e4b6ca06773";
            };

            meta = {
              longDescription = ''The `Restarter` allows you to set a retry
                                interval for restarting a child process. The
                                child will be restarted for indefinitely. Useful
                                for processes that rely on external
                                connections'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/CultivateHQ/restarter";
            };
          } // packageOverrides)
      ) {};

    restarter = restarter_0_1_0;

    restc_0_4_0 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          erlsom_1_4_1,
          hackney_1_6_5,
          jsx_2_8_0,
          mochiweb_util_0_1_0
        }:
          buildRebar3 ({
            name = "restc";
            version = "0.4.0";
            src = fetchHex {
              pkg = "restc";
              version = "0.4.0";
              sha256 =
                "7c974e5a84857d406fa2ff3931fca1fb052976947097c4cc20d0894df39f3222";
            };

            beamDeps  = [
                          erlsom_1_4_1
                          hackney_1_6_5
                          jsx_2_8_0
                          mochiweb_util_0_1_0
                        ];

            meta = {
              description = ''Erlang Rest Client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kivra/restclient";
            };
          } // packageOverrides)
      ) {};

    restc = restc_0_4_0;

    rethinkdb_0_4_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          connection_1_0_4,
          poison_1_0_2
        }:
          buildMix ({
            name = "rethinkdb";
            version = "0.4.0";
            src = fetchHex {
              pkg = "rethinkdb";
              version = "0.4.0";
              sha256 =
                "ca2d13a226987edf6943f7af968510b1836becc3c14b42667f82cd57bbcd4e8f";
            };
            beamDeps  = [ connection_1_0_4 poison_1_0_2 ];

            meta = {
              description = ''RethinkDB driver for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hamiltop/rethinkdb-elixir";
            };
          } // packageOverrides)
      ) {};

    rethinkdb = rethinkdb_0_4_0;

    rethinkdb_changefeed_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          connection_1_0_4,
          rethinkdb_0_4_0
        }:
          buildMix ({
            name = "rethinkdb_changefeed";
            version = "0.0.1";
            src = fetchHex {
              pkg = "rethinkdb_changefeed";
              version = "0.0.1";
              sha256 =
                "c895db0d57d55c7c7ab4aeb6ce167c82de1d0f7a884c93d4ea0cdea16df11b82";
            };
            beamDeps  = [ connection_1_0_4 rethinkdb_0_4_0 ];

            meta = {
              description = ''RethinkDB Supervised Changefeeds'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hamiltop/rethinkdb_changefeed";
            };
          } // packageOverrides)
      ) {};

    rethinkdb_changefeed = rethinkdb_changefeed_0_0_1;

    rethinkdb_ecto_0_7_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_4,
          rethinkdb_0_4_0
        }:
          buildMix ({
            name = "rethinkdb_ecto";
            version = "0.7.0";
            src = fetchHex {
              pkg = "rethinkdb_ecto";
              version = "0.7.0";
              sha256 =
                "77c03ed5325095d3ae04847633282fdc9985345567a3fb4c409fce09f892efa1";
            };
            beamDeps  = [ ecto_2_1_4 rethinkdb_0_4_0 ];

            meta = {
              description = ''RethinkDB adapter for Ecto'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/almightycouch/rethinkdb_ecto";
            };
          } // packageOverrides)
      ) {};

    rethinkdb_ecto = rethinkdb_ecto_0_7_0;

    retim_0_2_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ex_doc_0_16_1 }:
          buildMix ({
            name = "retim";
            version = "0.2.3";
            src = fetchHex {
              pkg = "retim";
              version = "0.2.3";
              sha256 =
                "c0ac46c5ff75c266d9c0a9ca4e4b83def7336c118c66f314a9878e67b7a0eef2";
            };
            beamDeps  = [ ex_doc_0_16_1 ];

            meta = {
              description = ''Estimate the reading time of a text or a text
                            file.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nikkos/retim";
            };
          } // packageOverrides)
      ) {};

    retim = retim_0_2_3;

    retort_2_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          alembic_3_3_0,
          amqp_0_0_6,
          calcinator_3_0_0,
          connection_1_0_4,
          ecto_2_1_4,
          ja_serializer_0_12_0,
          poison_1_0_2,
          uuid_1_1_7
        }:
          buildMix ({
            name = "retort";
            version = "2.1.0";
            src = fetchHex {
              pkg = "retort";
              version = "2.1.0";
              sha256 =
                "b580527ad98551c0eaa1ee83766507920a30b4702bd31dc9a3a7fca811628d48";
            };
            beamDeps  = [
                          alembic_3_3_0
                          amqp_0_0_6
                          calcinator_3_0_0
                          connection_1_0_4
                          ecto_2_1_4
                          ja_serializer_0_12_0
                          poison_1_0_2
                          uuid_1_1_7
                        ];

            meta = {
              description = ''JSONAPI over JSONRPC over RabbitMQ.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/C-S-D/retort";
            };
          } // packageOverrides)
      ) {};

    retort = retort_2_1_0;

    retrieval_0_9_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "retrieval";
            version = "0.9.1";
            src = fetchHex {
              pkg = "retrieval";
              version = "0.9.1";
              sha256 =
                "7351d87068be71b10e430ffb9dc34c73e529dd794b4606698a071de547286caa";
            };

            meta = {
              longDescription = ''Trie implementation in pure Elixir that
                                supports pattern based lookup and other
                                functionality.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Rob-bie/retrieval";
            };
          } // packageOverrides)
      ) {};

    retrieval = retrieval_0_9_1;

    retry_0_6_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "retry";
            version = "0.6.1";
            src = fetchHex {
              pkg = "retry";
              version = "0.6.1";
              sha256 =
                "77450920fafa2f6244f3cf103f8b4d0e15972c477750b1db40d8dd9443769bdb";
            };

            meta = {
              longDescription = ''Simple Elixir macros for linear retry,
                                exponential backoff and wait with composable
                                delays.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/safwank/ElixirRetry";
            };
          } // packageOverrides)
      ) {};

    retry_0_7_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "retry";
            version = "0.7.0";
            src = fetchHex {
              pkg = "retry";
              version = "0.7.0";
              sha256 =
                "27bcde19dd0067d0221b2ccc219c1939e7e5c59b1bb144a97db3709c46edf49a";
            };

            meta = {
              longDescription = ''Simple Elixir macros for linear retry,
                                exponential backoff and wait with composable
                                delays.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/safwank/ElixirRetry";
            };
          } // packageOverrides)
      ) {};

    retry = retry_0_7_0;

    retryable_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "retryable";
            version = "0.1.0";
            src = fetchHex {
              pkg = "retryable";
              version = "0.1.0";
              sha256 =
                "ee803982e44a338ea649385ce064294bd5c6fda7c63ebf055847cdb7d2ad21a3";
            };

            meta = {
              longDescription = ''Allows you to run some code and handle any
                                timeouts or errors, with custom retry logic,
                                while limiting the total number of concurrent
                                things being run via worker pools.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mikebaldry/retryable";
            };
          } // packageOverrides)
      ) {};

    retryable = retryable_0_1_0;

    return_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "return";
            version = "0.0.2";
            src = fetchHex {
              pkg = "return";
              version = "0.0.2";
              sha256 =
                "bdde923596d155a637f7095eb831d92f2e86c4551bbb20a3c84e56c595df9480";
            };

            meta = {
              description = ''Provide the return keyword and the context where
                            return works.'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/aetherus/return/blob/master/lib/return.ex";
            };
          } // packageOverrides)
      ) {};

    return = return_0_0_2;

    reup_0_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "reup";
            version = "0.1.0";
            src = fetchHex {
              pkg = "reup";
              version = "0.1.0";
              sha256 =
                "949a672190119f8b24160167e3685fdd5397474f98dc875ccfd31378ebd68506";
            };

            meta = {
              description = ''dev watcher that auto compiles and reloads
                            modules'';
              license = stdenv.lib.licenses.apsl20;
            };
          } // packageOverrides)
      ) {};

    reup = reup_0_1_0;

    reverse_proxy_0_3_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          httpoison_0_11_2,
          plug_1_3_5
        }:
          buildMix ({
            name = "reverse_proxy";
            version = "0.3.1";
            src = fetchHex {
              pkg = "reverse_proxy";
              version = "0.3.1";
              sha256 =
                "853ac70993e6ce0bcdbb6f64540d600179e395997233e7b4a65ea8ceb1ae0b4b";
            };
            beamDeps  = [ cowboy_1_1_2 httpoison_0_11_2 plug_1_3_5 ];

            meta = {
              description = ''A Plug based reverse proxy server.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/slogsdon/elixir-reverse-proxy";
            };
          } // packageOverrides)
      ) {};

    reverse_proxy = reverse_proxy_0_3_1;

    revision_plate_ex_0_2_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_0_4,
          plug_1_3_5
        }:
          buildMix ({
            name = "revision_plate_ex";
            version = "0.2.1";
            src = fetchHex {
              pkg = "revision_plate_ex";
              version = "0.2.1";
              sha256 =
                "fc6d92a7a028867188a009d1bd6980a79d30cdb1f9a8af95d8a652a7e7a0732a";
            };
            beamDeps  = [ cowboy_1_0_4 plug_1_3_5 ];

            meta = {
              longDescription = ''Plug application and middleware that serves
                                endpoint returns application`s REVISION'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/KazuCocoa/revision_plate_ex";
            };
          } // packageOverrides)
      ) {};

    revision_plate_ex = revision_plate_ex_0_2_1;

    revisionair_0_13_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "revisionair";
            version = "0.13.1";
            src = fetchHex {
              pkg = "revisionair";
              version = "0.13.1";
              sha256 =
                "048b569e781f9d8cfd9ef140a4afd02d4ceecc0a38c0d20c7dfa6a0da5b753e9";
            };

            meta = {
              longDescription = ''Keep track of revisions, versions, changes to
                                your data. Persistence layer agnostic.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Qqwy/elixir_revisionair";
            };
          } // packageOverrides)
      ) {};

    revisionair = revisionair_0_13_1;

    revisionair_ecto_1_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_4,
          poison_3_1_0,
          postgrex_1_0_0_rc_1,
          revisionair_0_13_1
        }:
          buildMix ({
            name = "revisionair_ecto";
            version = "1.0.1";
            src = fetchHex {
              pkg = "revisionair_ecto";
              version = "1.0.1";
              sha256 =
                "98b30f2349a1f041df6e3196cca5dfc76615fe27448a782596e0d3164445bfdc";
            };
            beamDeps  = [
                          ecto_2_1_4
                          poison_3_1_0
                          postgrex_1_0_0_rc_1
                          revisionair_0_13_1
                        ];

            meta = {
              longDescription = ''A Revisionair Storage Adapter based on Ecto.
                                Keeps track of revisions, changes, versions of
                                your data structures.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Qqwy/elixir_revisionair_ecto";
            };
          } // packageOverrides)
      ) {};

    revisionair_ecto = revisionair_ecto_1_0_1;

    revolver_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, plug_1_3_5 }:
          buildMix ({
            name = "revolver";
            version = "0.1.0";
            src = fetchHex {
              pkg = "revolver";
              version = "0.1.0";
              sha256 =
                "2e64af2405a76aa42037568063fef54c30bf15dabadba795b0d408bb4507c90b";
            };
            beamDeps  = [ plug_1_3_5 ];

            meta = {
              description = ''A composable HTTP Client inspired by Plug and
                            Ecto.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/scrogson/revolver";
            };
          } // packageOverrides)
      ) {};

    revolver = revolver_0_1_0;

    rex_0_1_0_alpha4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "rex";
            version = "0.1.0-alpha4";
            src = fetchHex {
              pkg = "rex";
              version = "0.1.0-alpha4";
              sha256 =
                "191a9f9854f25c796f9fa2838ad5645c3c377e89d1d334bc35f1211fac0687c8";
            };

            meta = {
              description = ''Concatenative Elixir macro language.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/vic/rex";
            };
          } // packageOverrides)
      ) {};

    rex = rex_0_1_0_alpha4;

    rfc3339_0_2_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "rfc3339";
            version = "0.2.2";
            src = fetchHex {
              pkg = "rfc3339";
              version = "0.2.2";
              sha256 =
                "986d7f9bac6891aa4d5051690058de4e623245620bbeada7f239f85c4df8f23c";
            };

            meta = {
              description = ''an rfc3339 parser and formatter'';
              license = with stdenv.lib.licenses; [ asl20 mit ];
              homepage = "https://github.com/talentdeficit/rfc3339";
            };
          } // packageOverrides)
      ) {};

    rfc3339_0_9_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "rfc3339";
            version = "0.9.0";
            src = fetchHex {
              pkg = "rfc3339";
              version = "0.9.0";
              sha256 =
                "182314de35c9f4180b22eb5f22916d8d7a799c1109a060c752970273a9332ad6";
            };

            meta = {
              description = ''an rfc3339 parser and formatter'';
              license = with stdenv.lib.licenses; [ asl20 mit ];
              homepage = "https://github.com/talentdeficit/rfc3339";
            };
          } // packageOverrides)
      ) {};

    rfc3339 = rfc3339_0_9_0;

    riak_1_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          linguist_0_1_5,
          pooler_1_5_0,
          riakc_2_5_3
        }:
          buildMix ({
            name = "riak";
            version = "1.1.2";
            src = fetchHex {
              pkg = "riak";
              version = "1.1.2";
              sha256 =
                "b26c19d2092b27d27e1d37c8bf113374ad06155e5ced35c7e14643543e7801a8";
            };
            beamDeps  = [ linguist_0_1_5 pooler_1_5_0 riakc_2_5_3 ];

            meta = {
              description = ''A Riak client written in Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/drewkerrigan/riak-elixir-client";
            };
          } // packageOverrides)
      ) {};

    riak = riak_1_1_2;

    riak_core_ng_3_0_5 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          basho_exometer_core_1_0_2,
          basho_poolboy_0_8_2,
          basho_stats_1_0_3,
          blume_0_1_0,
          chash_0_1_2,
          clique_0_3_9,
          cuttlefish_2_0_11,
          eleveldb_2_2_20,
          folsom_0_8_3,
          goldrush_0_1_9,
          jam_1_0_0,
          lager_3_2_4,
          pbkdf2_2_0_0,
          riak_ensemble_ng_2_4_0,
          riak_sysmon_2_1_5
        }:
          buildRebar3 ({
            name = "riak_core_ng";
            version = "3.0.5";
            src = fetchHex {
              pkg = "riak_core_ng";
              version = "3.0.5";
              sha256 =
                "25529fe74079ff69df6ef4d2d6033074c5f28c943df8511285b0e80ff47cfeef";
            };

            beamDeps  = [
                          basho_exometer_core_1_0_2
                          basho_poolboy_0_8_2
                          basho_stats_1_0_3
                          blume_0_1_0
                          chash_0_1_2
                          clique_0_3_9
                          cuttlefish_2_0_11
                          eleveldb_2_2_20
                          folsom_0_8_3
                          goldrush_0_1_9
                          jam_1_0_0
                          lager_3_2_4
                          pbkdf2_2_0_0
                          riak_ensemble_ng_2_4_0
                          riak_sysmon_2_1_5
                        ];

            meta = {
              description = ''Riak Core'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/project-fifo/riak_core";
            };
          } // packageOverrides)
      ) {};

    riak_core_ng = riak_core_ng_3_0_5;

    riak_core_ng_up_2_2_9 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          basho_exometer_core_1_0_2,
          basho_poolboy_0_8_1_p3,
          basho_stats_1_0_3,
          blume_0_1_0,
          chash_0_1_2,
          clique_0_3_9,
          cuttlefish_2_0_11,
          edown_0_7_0,
          eleveldb_2_2_20,
          folsom_0_8_3,
          goldrush_0_1_9,
          lager_3_2_4,
          pbkdf2_2_0_0,
          riak_ensemble_ng_2_2_0,
          riak_sysmon_2_1_5
        }:
          buildRebar3 ({
            name = "riak_core_ng_up";
            version = "2.2.9";
            src = fetchHex {
              pkg = "riak_core_ng_up";
              version = "2.2.9";
              sha256 =
                "4f57a3826e112b618a2f05295b3527570840a5af03567ae8ae99d6b065f8399b";
            };

            beamDeps  = [
                          basho_exometer_core_1_0_2
                          basho_poolboy_0_8_1_p3
                          basho_stats_1_0_3
                          blume_0_1_0
                          chash_0_1_2
                          clique_0_3_9
                          cuttlefish_2_0_11
                          edown_0_7_0
                          eleveldb_2_2_20
                          folsom_0_8_3
                          goldrush_0_1_9
                          lager_3_2_4
                          pbkdf2_2_0_0
                          riak_ensemble_ng_2_2_0
                          riak_sysmon_2_1_5
                        ];

            meta = {
              description = ''Riak Core'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/cjimison/riak_core";
            };
          } // packageOverrides)
      ) {};

    riak_core_ng_up = riak_core_ng_up_2_2_9;

    riak_dt_2_1_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "riak_dt";
            version = "2.1.1";
            src = fetchHex {
              pkg = "riak_dt";
              version = "2.1.1";
              sha256 =
                "b5ab9e1d579ec3129cbea4b1977261aa2c5ad634321f87ace83bb32b99f65396";
            };

            meta = {
              description = ''riak CTDT datatypes'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/basho/riak_dt";
            };
          } // packageOverrides)
      ) {};

    riak_dt = riak_dt_2_1_1;

    riak_ensemble_2_1_3 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          eleveldb_2_1_3,
          lager_3_0_2
        }:
          buildRebar3 ({
            name = "riak_ensemble";
            version = "2.1.3";
            src = fetchHex {
              pkg = "riak_ensemble";
              version = "2.1.3";
              sha256 =
                "593c68745ce3117c2e0beaa57e36ad2971bd3540645f233df866a19468970ae2";
            };

            beamDeps  = [ eleveldb_2_1_3 lager_3_0_2 ];

            meta = {
              description = ''Multi-Paxos framework in Erlang'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/basho/riak_ensemble";
            };
          } // packageOverrides)
      ) {};

    riak_ensemble = riak_ensemble_2_1_3;

    riak_ensemble_ng_2_2_0 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          eleveldb_2_2_19,
          lager_3_2_1
        }:
          buildRebar3 ({
            name = "riak_ensemble_ng";
            version = "2.2.0";
            src = fetchHex {
              pkg = "riak_ensemble_ng";
              version = "2.2.0";
              sha256 =
                "9e9fedc0a3844955e4d7bd5ee54581d9f47ad68033cb5611ede0edda67bf8603";
            };

            beamDeps  = [ eleveldb_2_2_19 lager_3_2_1 ];

            meta = {
              description = ''Multi-Paxos framework in Erlang'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/basho/riak_ensemble";
            };
          } // packageOverrides)
      ) {};

    riak_ensemble_ng_2_4_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, lager_3_2_4 }:
          buildRebar3 ({
            name = "riak_ensemble_ng";
            version = "2.4.0";
            src = fetchHex {
              pkg = "riak_ensemble_ng";
              version = "2.4.0";
              sha256 =
                "b065877f612134a3b1f3ab7e732da617d5b42bbf197a0c07f86da7272e6e414a";
            };

            beamDeps  = [ lager_3_2_4 ];

            meta = {
              description = ''Multi-Paxos framework in Erlang'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/basho/riak_ensemble";
            };
          } // packageOverrides)
      ) {};

    riak_ensemble_ng = riak_ensemble_ng_2_4_0;

    riak_pb_2.3.0-1-beta1 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, basho_hamcrest_0_4_0
        }:
          buildMix ({
            name = "riak_pb";
            version = "2.3.0-1-beta1";
            src = fetchHex {
              pkg = "riak_pb";
              version = "2.3.0-1-beta1";
              sha256 =
                "16674690a0600ff1729c4d1ba635223a164426bfdabe7d013d68ea7d16eabf60";
            };
            beamDeps  = [ basho_hamcrest_0_4_0 ];

            meta = {
              description = ''Riak Protocol Buffers Messages'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/basho/riak_pb";
            };
          } // packageOverrides)
      ) {};

    riak_pb = riak_pb_2.3.0-1-beta1;

    riak_pb_2_3_2 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, basho_hamcrest_0_4_1
        }:
          buildMix ({
            name = "riak_pb";
            version = "2.3.2";
            src = fetchHex {
              pkg = "riak_pb";
              version = "2.3.2";
              sha256 =
                "7c0644bcba8a423dd9c1ab85b6e7ff4df0712d8a350f9698647cff1996f0348c";
            };
            beamDeps  = [ basho_hamcrest_0_4_1 ];

            meta = {
              description = ''Riak Protocol Buffers Messages'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/basho/riak_pb";
            };
          } // packageOverrides)
      ) {};

    riak_sysmon_2_1_5 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "riak_sysmon";
            version = "2.1.5";
            src = fetchHex {
              pkg = "riak_sysmon";
              version = "2.1.5";
              sha256 =
                "7b3969ddd5c3b7342e51e5e5bd855c46bdc92f0e6b103df749a57471d2453507";
            };

            meta = {
              description = ''Rate-limiting system_monitor event handler'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/basho/riak_sysmon";
            };
          } // packageOverrides)
      ) {};

    riak_sysmon = riak_sysmon_2_1_5;

    riakc_2_5_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, riak_pb_2_3_2 }:
          buildMix ({
            name = "riakc";
            version = "2.5.3";
            src = fetchHex {
              pkg = "riakc";
              version = "2.5.3";
              sha256 =
                "32b3aced7b749bffd917153f68fa73c184b09b70ea6f37867db43dba273127bf";
            };
            beamDeps  = [ riak_pb_2_3_2 ];

            meta = {
              description = ''The Riak client for Erlang'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/basho/riak-erlang-client";
            };
          } // packageOverrides)
      ) {};

    riakc = riakc_2_5_3;

    riboflavin_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_8_3,
          poison_1_5_2
        }:
          buildMix ({
            name = "riboflavin";
            version = "0.0.2";
            src = fetchHex {
              pkg = "riboflavin";
              version = "0.0.2";
              sha256 =
                "cc4ac4c80b6d591deaea136a3d055eba4ead6bbe2fc9b220a4432f160d0ddec6";
            };
            beamDeps  = [ httpoison_0_8_3 poison_1_5_2 ];

            meta = {
              description = ''Backblaze B2 client.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/silentdragonz/riboflavin";
            };
          } // packageOverrides)
      ) {};

    riboflavin = riboflavin_0_0_2;

    riemann_0_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exprotobuf_1_0_2,
          honeydew_0_0_2
        }:
          buildMix ({
            name = "riemann";
            version = "0.1.2";
            src = fetchHex {
              pkg = "riemann";
              version = "0.1.2";
              sha256 =
                "fc71694c71e5b98bb6341bf74cc73e2960e5f1f6be6ec3200e897457c7552b04";
            };
            beamDeps  = [ exprotobuf_1_0_2 honeydew_0_0_2 ];

            meta = {
              description = ''A client for the Riemann event stream
                            processor'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/koudelka/elixir-riemann";
            };
          } // packageOverrides)
      ) {};

    riemann = riemann_0_1_2;

    ringbahn_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          bunt_0_1_6,
          cachex_2_1_0,
          chumak_1_2_0,
          cowboy_1_0_4,
          goldrush_0_1_9,
          gproc_0_6_1,
          lager_3_5_0,
          netstrings_2_0_5,
          plug_1_3_5,
          poison_3_1_0,
          retry_0_6_1,
          uuid_1_1_7
        }:
          buildMix ({
            name = "ringbahn";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ringbahn";
              version = "0.1.0";
              sha256 =
                "c5dbbdc53dde9a420633a1c357920f07fad0caee8d828b08fd3018e4e870b8e7";
            };
            beamDeps  = [
                          bunt_0_1_6
                          cachex_2_1_0
                          chumak_1_2_0
                          cowboy_1_0_4
                          goldrush_0_1_9
                          gproc_0_6_1
                          lager_3_5_0
                          netstrings_2_0_5
                          plug_1_3_5
                          poison_3_1_0
                          retry_0_6_1
                          uuid_1_1_7
                        ];

            meta = {
              description = ''High performance multiple backend web server'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/vertexclique/ringbahn";
            };
          } // packageOverrides)
      ) {};

    ringbahn = ringbahn_0_1_0;

    river_0_0_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          certifi_0_7_0,
          connection_1_0_4,
          gen_stage_0_12_0,
          gen_state_machine_1_0_2,
          hpack_1_0_3,
          ssl_verify_fun_1_1_2
        }:
          buildMix ({
            name = "river";
            version = "0.0.4";
            src = fetchHex {
              pkg = "river";
              version = "0.0.4";
              sha256 =
                "7df33607bbfa7b08f6aa482be43287677d70d63a2a8d85245eb2ad703ee63494";
            };
            beamDeps  = [
                          certifi_0_7_0
                          connection_1_0_4
                          gen_stage_0_12_0
                          gen_state_machine_1_0_2
                          hpack_1_0_3
                          ssl_verify_fun_1_1_2
                        ];

            meta = {
              description = ''River is an http/2 (HTTP2) client for Elixir (a
                            work in progress, though!)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/peburrows/river";
            };
          } // packageOverrides)
      ) {};

    river = river_0_0_4;

    river_place_0_0_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_10_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "river_place";
            version = "0.0.3";
            src = fetchHex {
              pkg = "river_place";
              version = "0.0.3";
              sha256 =
                "510122433b99f79e9e783a217bee03fdc71b705ad95801187e567ccccb337d11";
            };
            beamDeps  = [ httpoison_0_10_0 poison_3_1_0 ];

            meta = {
              description = ''Library for booking tennis courts on
                            riverplace.sg'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/col/river_place";
            };
          } // packageOverrides)
      ) {};

    river_place = river_place_0_0_3;

    river_place_client_0_0_6 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_10_0,
          poison_2_2_0
        }:
          buildMix ({
            name = "river_place_client";
            version = "0.0.6";
            src = fetchHex {
              pkg = "river_place_client";
              version = "0.0.6";
              sha256 =
                "5656302f53e174bdd4ea16c69a7ee33432bf5a3d0cf6d24139612e18793798dd";
            };
            beamDeps  = [ httpoison_0_10_0 poison_2_2_0 ];

            meta = {
              description = ''Library for booking tennis courts on
                            riverplace.sg'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/col/river_place_client";
            };
          } // packageOverrides)
      ) {};

    river_place_client = river_place_client_0_0_6;

    rlist_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "rlist";
            version = "0.0.2";
            src = fetchHex {
              pkg = "rlist";
              version = "0.0.2";
              sha256 =
                "b9a6d1c167bf71a2206d0053d59a6e4831d4c1eab7a0800a6907980626747c28";
            };

            meta = {
              description = ''A wrapper around Elixir`s Lists that makes
                            cheaper pushing items to them.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/aesedepece/elixir-rlist";
            };
          } // packageOverrides)
      ) {};

    rlist = rlist_0_0_2;

    roads_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_2_2_0 }:
          buildMix ({
            name = "roads";
            version = "0.1.2";
            src = fetchHex {
              pkg = "roads";
              version = "0.1.2";
              sha256 =
                "de34edcb8775b4daf25adf9dabad475bac71181f4c7a1f584573dac50c558bfd";
            };
            beamDeps  = [ poison_2_2_0 ];

            meta = {
              description = ''Client route helpers for Phoenix inspired by
                            Rails JSRoutes.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/quangbuule/phoenix-roads";
            };
          } // packageOverrides)
      ) {};

    roads = roads_0_1_2;

    robotex_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exjsx_3_1_0,
          httpoison_0_11_2
        }:
          buildMix ({
            name = "robotex";
            version = "0.0.1";
            src = fetchHex {
              pkg = "robotex";
              version = "0.0.1";
              sha256 =
                "ae1c618b20e3847f4c372350bdda3b0dc577e1491310ef97fd5869c4f750533e";
            };
            beamDeps  = [ exjsx_3_1_0 httpoison_0_11_2 ];

            meta = {
              description = ''Robotex is a client for the Telegram Bot API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/EddyShure/robotex";
            };
          } // packageOverrides)
      ) {};

    robotex = robotex_0_0_1;

    rock_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, uuid_1_1_7 }:
          buildMix ({
            name = "rock";
            version = "0.1.0";
            src = fetchHex {
              pkg = "rock";
              version = "0.1.0";
              sha256 =
                "6505f0665fea3b519b11086935ef0ce5cd0d3f5d46d52089bdaa5b481b4efffe";
            };
            beamDeps  = [ uuid_1_1_7 ];

            meta = {
              description = ''ROCK: A Robust Clustering Algorithm for
                            Categorical Attributes'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ayrat555/rock";
            };
          } // packageOverrides)
      ) {};

    rock = rock_0_1_0;

    rocksdb_0_7_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "rocksdb";
            version = "0.7.1";
            src = fetchHex {
              pkg = "rocksdb";
              version = "0.7.1";
              sha256 =
                "5be040b796943dd871df6f59f7c4d9d938d05f06c21a0ec8b927a5e9cf8dfe2a";
            };
            compilePorts = true;

            meta = {
              description = ''RocksDB for Erlang'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://gitlab.com/barrel-db/erlang-rocksdb";
            };
          } // packageOverrides)
      ) {};

    rocksdb_0_9_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "rocksdb";
            version = "0.9.0";
            src = fetchHex {
              pkg = "rocksdb";
              version = "0.9.0";
              sha256 =
                "0172da01f9cea3630569681cf3baeb6879818bf7a2c9e95c95ba9d0e5557534f";
            };
            compilePorts = true;

            meta = {
              description = ''RocksDB for Erlang'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://gitlab.com/barrel-db/erlang-rocksdb";
            };
          } // packageOverrides)
      ) {};

    rocksdb = rocksdb_0_9_0;

    rodeo_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, cowboy_1_1_2 }:
          buildMix ({
            name = "rodeo";
            version = "0.3.0";
            src = fetchHex {
              pkg = "rodeo";
              version = "0.3.0";
              sha256 =
                "8e87b28008273b1e74a4b47ecfdb75fe6bd1789ebf9707afda491bc14d8a40ed";
            };
            beamDeps  = [ cowboy_1_1_2 ];

            meta = {
              description = ''Test your API consuming Elixir app against a real
                            (one-off) webserver'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/carpodaster/rodeo";
            };
          } // packageOverrides)
      ) {};

    rodeo = rodeo_0_3_0;

    roger_1_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          amqp_0_2_2,
          gproc_0_6_1,
          jsx_2_8_2,
          poison_2_2_0,
          singleton_1_2_0
        }:
          buildMix ({
            name = "roger";
            version = "1.0.0";
            src = fetchHex {
              pkg = "roger";
              version = "1.0.0";
              sha256 =
                "a5b1d87acbbfe24c231bcbd3428e58db491d91d057493d5188fb1248e45f975c";
            };
            beamDeps  = [
                          amqp_0_2_2
                          gproc_0_6_1
                          jsx_2_8_2
                          poison_2_2_0
                          singleton_1_2_0
                        ];

            meta = {
              description = ''RabbitMQ-backed background job processing
                            system'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bettyblocks/roger";
            };
          } // packageOverrides)
      ) {};

    roger = roger_1_0_0;

    rogger_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          amqp_0_1_1,
          timex_3_0_5
        }:
          buildMix ({
            name = "rogger";
            version = "0.1.0";
            src = fetchHex {
              pkg = "rogger";
              version = "0.1.0";
              sha256 =
                "2e68650f9ee8f1047410538163e930567c049d91f883cbc96d9f52aea6052b61";
            };
            beamDeps  = [ amqp_0_1_1 timex_3_0_5 ];

            meta = {
              description = ''Elixir logger to publish log messages in
                            RabbitMQ. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/duartejc/rogger";
            };
          } // packageOverrides)
      ) {};

    rogger = rogger_0_1_0;

    rollbax_0_8_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_8_6,
          poison_1_0_2
        }:
          buildMix ({
            name = "rollbax";
            version = "0.8.2";
            src = fetchHex {
              pkg = "rollbax";
              version = "0.8.2";
              sha256 =
                "6575d11dab446ef8010d7b3815bd476965825964d77cf45632b7f28ba88b9de9";
            };
            beamDeps  = [ hackney_1_8_6 poison_1_0_2 ];

            meta = {
              description = ''Exception tracking and logging from Elixir to
                            Rollbar'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/elixir-addicts/rollbax";
            };
          } // packageOverrides)
      ) {};

    rollbax = rollbax_0_8_2;

    rollbax_toniq_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, stringify_0_1_1 }:
          buildMix ({
            name = "rollbax_toniq";
            version = "0.1.0";
            src = fetchHex {
              pkg = "rollbax_toniq";
              version = "0.1.0";
              sha256 =
                "6f6ab16e260c830334db0e765fef9f7a35420b29d71b2765876c3c70a7fdfcfd";
            };
            beamDeps  = [ stringify_0_1_1 ];

            meta = {
              description = ''Rollbax integration for Toniq.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/MishaConway/rollbax-toniq";
            };
          } // packageOverrides)
      ) {};

    rollbax_toniq = rollbax_toniq_0_1_0;

    rollex_0_4_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, sfmt_0_12_7 }:
          buildMix ({
            name = "rollex";
            version = "0.4.0";
            src = fetchHex {
              pkg = "rollex";
              version = "0.4.0";
              sha256 =
                "53410bbd7687ff751b51b9737965bff1ba9c3d0673af65752f4ae3be0de1b44c";
            };
            beamDeps  = [ sfmt_0_12_7 ];

            meta = {
              description = ''Elixir library using a Pratt Parser algorithm to
                            calculate dice rolls.'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    rollex = rollex_0_4_0;

    roman_numerals_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "roman_numerals";
            version = "1.0.1";
            src = fetchHex {
              pkg = "roman_numerals";
              version = "1.0.1";
              sha256 =
                "5e9dcfcb645c1ca937ddc0170805028596fbf4936d0119131350d7de95b7c6a1";
            };

            meta = {
              description = ''Convert numbers to Roman numerals and back.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lpil/roman-numerals";
            };
          } // packageOverrides)
      ) {};

    roman_numerals = roman_numerals_1_0_1;

    romanex_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "romanex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "romanex";
              version = "0.1.0";
              sha256 =
                "b1f769bbf638d14247c70be8b944cfa76a84a00ef690e9cba26032ae03e33a89";
            };

            meta = {
              description = ''Encode, Decode, and Validate Roman Numerals.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/itsgreggreg/romanex";
            };
          } // packageOverrides)
      ) {};

    romanex = romanex_0_1_0;

    romeo_0_7_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          connection_1_0_4,
          fast_xml_1_1_23
        }:
          buildMix ({
            name = "romeo";
            version = "0.7.0";
            src = fetchHex {
              pkg = "romeo";
              version = "0.7.0";
              sha256 =
                "1ef9572e05c1f967356e1707a0a058abc6328ccdea7a8180981ef52352c83a3a";
            };
            beamDeps  = [ connection_1_0_4 fast_xml_1_1_23 ];

            meta = {
              description = ''An XMPP Client for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/scrogson/romeo";
            };
          } // packageOverrides)
      ) {};

    romeo = romeo_0_7_0;

    rondo_0_1_7 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, ex_json_schema_0_5_5
        }:
          buildMix ({
            name = "rondo";
            version = "0.1.7";
            src = fetchHex {
              pkg = "rondo";
              version = "0.1.7";
              sha256 =
                "e2b3ba93962d0cef6854cb87306fd58733681e6df989e5c282067d91adb706f7";
            };
            beamDeps  = [ ex_json_schema_0_5_5 ];

            meta = {
              description = ''component rendering library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/extruct/rondo";
            };
          } // packageOverrides)
      ) {};

    rondo = rondo_0_1_7;

    rondo_server_0_1_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ex_json_schema_0_5_5,
          msgpax_0_8_2,
          rondo_0_1_7,
          usir_0_2_0
        }:
          buildMix ({
            name = "rondo_server";
            version = "0.1.4";
            src = fetchHex {
              pkg = "rondo_server";
              version = "0.1.4";
              sha256 =
                "ed8e67e0f2d7919888eef37796d77b8c5c80d69a88a162d705777a8759e87555";
            };
            beamDeps  = [
                          ex_json_schema_0_5_5
                          msgpax_0_8_2
                          rondo_0_1_7
                          usir_0_2_0
                        ];

            meta = {
              description = ''Usir server for rondo applications'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/extruct/rondo_server";
            };
          } // packageOverrides)
      ) {};

    rondo_server = rondo_server_0_1_4;

    roombex_0_0_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, serial_0_1_2 }:
          buildMix ({
            name = "roombex";
            version = "0.0.5";
            src = fetchHex {
              pkg = "roombex";
              version = "0.0.5";
              sha256 =
                "be29a954c5c38198adbfcb0d2fd3594a0ff63c13428018fb986f526d93c6645a";
            };
            beamDeps  = [ serial_0_1_2 ];

            meta = {
              longDescription = ''Implements the Roomba binary protocol. Send
                                and receive binary data using elixir data
                                structures and simple functions.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mmmries/roombex";
            };
          } // packageOverrides)
      ) {};

    roombex = roombex_0_0_5;

    rop_0_5_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "rop";
            version = "0.5.3";
            src = fetchHex {
              pkg = "rop";
              version = "0.5.3";
              sha256 =
                "3b8c37802c530eecc7714c175fe36486bb45157519cc7498ac487f6590f396e8";
            };

            meta = {
              description = ''Some convenient macros to enable
                            railsway-oriented programming in Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ruby2elixir/rop";
            };
          } // packageOverrides)
      ) {};

    rop = rop_0_5_3;

    roster_3_4_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "roster";
            version = "3.4.0";
            src = fetchHex {
              pkg = "roster";
              version = "3.4.0";
              sha256 =
                "9ccd81e061d6db93ec10c779d97e16f4714a31362e89726c39151ce184d3c77d";
            };

            meta = {
              description = ''ROSTER Messaging Protocol'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/synrc/roster";
            };
          } // packageOverrides)
      ) {};

    roster = roster_3_4_0;

    rotating_file_writer_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, timex_3_1_15 }:
          buildMix ({
            name = "rotating_file_writer";
            version = "0.1.0";
            src = fetchHex {
              pkg = "rotating_file_writer";
              version = "0.1.0";
              sha256 =
                "32bfd9e9968b113057975c3f0a5d62bce4fbcad959e50fab85ef891199b04656";
            };
            beamDeps  = [ timex_3_1_15 ];

            meta = {
              longDescription = ''Write dispatcher which automatically
                                (re)opens file for writing on the basis of
                                pattern and current time'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/savonarola/rotating_file_writer";
            };
          } // packageOverrides)
      ) {};

    rotating_file_writer = rotating_file_writer_0_1_0;

    rotor_0_2_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "rotor";
            version = "0.2.2";
            src = fetchHex {
              pkg = "rotor";
              version = "0.2.2";
              sha256 =
                "82de479c2cb6d26299916209d2945d1b39cf820f38279485ea5d5a8c494cb281";
            };

            meta = {
              longDescription = ''Rotor is a build system for Elixir projects.
                                Use it to compile things, run commands or do
                                anything when files change. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/HashNuke/rotor";
            };
          } // packageOverrides)
      ) {};

    rotor = rotor_0_2_2;

    rox_1_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, rustler_0_9_0 }:
          buildMix ({
            name = "rox";
            version = "1.0.2";
            src = fetchHex {
              pkg = "rox";
              version = "1.0.2";
              sha256 =
                "27a3d886a7b8a00cc846782ace84e4d5c729722d9a650ca5e43dd5ad61bccb66";
            };
            beamDeps  = [ rustler_0_9_0 ];

            meta = {
              description = ''Rust powered NIF bindings to Facebook`s
                            RocksDB'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/urbint/rox";
            };
          } // packageOverrides)
      ) {};

    rox = rox_1_0_2;

    rprel_1_1_5 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_2_2_0,
          porcelain_2_0_3,
          timex_3_0_5,
          uri_template_1_2_0
        }:
          buildMix ({
            name = "rprel";
            version = "1.1.5";
            src = fetchHex {
              pkg = "rprel";
              version = "1.1.5";
              sha256 =
                "72e0a4a00cb6f8191ae3c268f6d400ff4b4682c4ecca4a248e376ce67fc86b64";
            };
            beamDeps  = [
                          httpoison_0_11_2
                          poison_2_2_0
                          porcelain_2_0_3
                          timex_3_0_5
                          uri_template_1_2_0
                        ];

            meta = {
              longDescription = ''Rprel (arr-pee-rell) is a tool for creating
                                GitHub releases from a build artifact.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rentpath/rprel";
            };
          } // packageOverrides)
      ) {};

    rprel = rprel_1_1_5;

    rquote_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "rquote";
            version = "0.0.1";
            src = fetchHex {
              pkg = "rquote";
              version = "0.0.1";
              sha256 =
                "54e1cba92716a4176d89e20d841dbc3a1227ef2fd9f7ddc5711a900877912354";
            };

            meta = {
              description = ''Library and CLI for generating random price
                            quotes '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/stocks29/rquote";
            };
          } // packageOverrides)
      ) {};

    rquote = rquote_0_0_1;

    rs_compile_0_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, etoml_0_1_0 }:
          buildRebar3 ({
            name = "rs_compile";
            version = "0.1.0";
            src = fetchHex {
              pkg = "rs_compile";
              version = "0.1.0";
              sha256 =
                "22c8fab2c2a15351007758f59a2c5f43a244b87ce36d2b9eed4e8b500f7fbc42";
            };

            beamDeps  = [ etoml_0_1_0 ];

            meta = {
              description = ''A rebar plugin to `cargo build` rust source'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/JoshRagem/rs_compile";
            };
          } // packageOverrides)
      ) {};

    rs_compile = rs_compile_0_1_0;

    rsa_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "rsa";
            version = "0.0.1";
            src = fetchHex {
              pkg = "rsa";
              version = "0.0.1";
              sha256 =
                "6351a45a5a58285c41d611ec32b37ee486d7dacd119d7ef90ada844c44e95596";
            };

            meta = {
              description = ''Erlang public_key cryptography wrapper'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/trapped/elixir-rsa";
            };
          } // packageOverrides)
      ) {};

    rsa = rsa_0_0_1;

    rsa_ex_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "rsa_ex";
            version = "0.2.1";
            src = fetchHex {
              pkg = "rsa_ex";
              version = "0.2.1";
              sha256 =
                "8a3278ae3e635455f72e2bd8369821d7d8bd402a3fe4d109877566b03cc98182";
            };

            meta = {
              description = ''Library for working with RSA keys.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/anoskov/rsa-ex";
            };
          } // packageOverrides)
      ) {};

    rsa_ex = rsa_ex_0_2_1;

    rss_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "rss";
            version = "0.2.1";
            src = fetchHex {
              pkg = "rss";
              version = "0.2.1";
              sha256 =
                "1af49c787fc789740a0fa7e0e197a7cb779a63c4eb703f013fea400126eac1f2";
            };

            meta = {
              description = ''A super simple RSS feed builder '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bennyhallett/elixir-rss";
            };
          } // packageOverrides)
      ) {};

    rss = rss_0_2_1;

    rss_flow_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          xml_builder_0_0_9,
          xml_parser_0_1_1
        }:
          buildMix ({
            name = "rss_flow";
            version = "0.1.1";
            src = fetchHex {
              pkg = "rss_flow";
              version = "0.1.1";
              sha256 =
                "0ea051f5f7487d3a2ab31f1a5654573abf449d8cc580bcb77cf965f83b35433c";
            };
            beamDeps  = [ xml_builder_0_0_9 xml_parser_0_1_1 ];

            meta = {
              description = ''RSS processing library for Elixir language.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/denispeplin/rss_flow";
            };
          } // packageOverrides)
      ) {};

    rss_flow = rss_flow_0_1_1;

    rss_sync_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, httpoison_0_11_2 }:
          buildMix ({
            name = "rss_sync";
            version = "0.2.1";
            src = fetchHex {
              pkg = "rss_sync";
              version = "0.2.1";
              sha256 =
                "c9a2bbb433d6a3cf0dbb121f185d6d7158c35654c58c612c50befbfadacbbe67";
            };
            beamDeps  = [ httpoison_0_11_2 ];

            meta = {
              description = ''An OTP application to keep RSS feeds in sync with
                            the real world.'';
              license = stdenv.lib.licenses.mpl20;
              homepage = "https://github.com/skovsgaard/rss_sync";
            };
          } // packageOverrides)
      ) {};

    rss_sync = rss_sync_0_2_1;

    rstats_1_0_2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "rstats";
            version = "1.0.2";
            src = fetchHex {
              pkg = "rstats";
              version = "1.0.2";
              sha256 =
                "4d5b8d1bf8280614c3ec8cb9a85d6ae3cedde8388b140edd8a263ca733a54033";
            };

            meta = {
              longDescription = ''Fast random sampling of normal, truncated
                                normal, exponential, weighted and poisson
                                distributions'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/hukl/rstats";
            };
          } // packageOverrides)
      ) {};

    rstats = rstats_1_0_2;

    rtpengineclient_0_1_6 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          bento_0_9_2,
          socket_0_3_12
        }:
          buildMix ({
            name = "rtpengineclient";
            version = "0.1.6";
            src = fetchHex {
              pkg = "rtpengineclient";
              version = "0.1.6";
              sha256 =
                "4a2e6fd0fb0ed3ad56a105e394317b81f67db69e35f37f7206a8cbe2a74872cc";
            };
            beamDeps  = [ bento_0_9_2 socket_0_3_12 ];

            meta = {
              description = ''An Elixir client for the Sipwise NGCP RtpEngine
                            proxy.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/balena/elixir-rtpengine";
            };
          } // packageOverrides)
      ) {};

    rtpengineclient = rtpengineclient_0_1_6;

    rubix_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "rubix";
            version = "0.0.2";
            src = fetchHex {
              pkg = "rubix";
              version = "0.0.2";
              sha256 =
                "b9083f7c8981fc162bfda5c8aa9855f79298905eb8e3b4a4089134614b2a8199";
            };

            meta = {
              description = ''A very simple (and barely-functioning) Ruby
                            runner for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/YellowApple/Rubix";
            };
          } // packageOverrides)
      ) {};

    rubix = rubix_0_0_2;

    rulex_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "rulex";
            version = "0.2.0";
            src = fetchHex {
              pkg = "rulex";
              version = "0.2.0";
              sha256 =
                "41429f27164bb05f2fa4c6326b63a8773f61c89ef9ef0bd93937cbc473d03ab5";
            };

            meta = {
              longDescription = ''Rulex contains a very simple macro
                                \"defrule\" allowing you to write a rule system
                                using Elixir pattern matching. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/awetzel/rulex";
            };
          } // packageOverrides)
      ) {};

    rulex = rulex_0_2_0;

    rummage_ecto_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ecto_2_1_4 }:
          buildMix ({
            name = "rummage_ecto";
            version = "1.0.0";
            src = fetchHex {
              pkg = "rummage_ecto";
              version = "1.0.0";
              sha256 =
                "0e3743a134f23f8ebff6465f9349601dff3b692b854437bbf69d4e672153b78f";
            };
            beamDeps  = [ ecto_2_1_4 ];

            meta = {
              description = ''A library that allows us to search, sort and
                            paginate ecto queries'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/aditya7iyengar/rummage_ecto";
            };
          } // packageOverrides)
      ) {};

    rummage_ecto_1_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ecto_2_1_4 }:
          buildMix ({
            name = "rummage_ecto";
            version = "1.1.0";
            src = fetchHex {
              pkg = "rummage_ecto";
              version = "1.1.0";
              sha256 =
                "40a6df76a2bf7fc401c03848254b3b0e97a0b1504a1bfb51885848bfa7fcf530";
            };
            beamDeps  = [ ecto_2_1_4 ];

            meta = {
              description = ''A library that allows us to search, sort and
                            paginate ecto queries'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/aditya7iyengar/rummage_ecto";
            };
          } // packageOverrides)
      ) {};

    rummage_ecto = rummage_ecto_1_1_0;

    rummage_phoenix_1_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          phoenix_1_3_0_rc_2,
          rummage_ecto_1_0_0
        }:
          buildMix ({
            name = "rummage_phoenix";
            version = "1.0.0";
            src = fetchHex {
              pkg = "rummage_phoenix";
              version = "1.0.0";
              sha256 =
                "436f6a7552fd14d73af0680627350f0e96cabc50d25768f76357917f5394a469";
            };
            beamDeps  = [ phoenix_1_3_0_rc_2 rummage_ecto_1_0_0 ];

            meta = {
              longDescription = ''A full support library for phoenix that
                                allows us to search, sort and paginate phoenix
                                ecto models.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/aditya7iyengar/rummage_phoenix";
            };
          } // packageOverrides)
      ) {};

    rummage_phoenix = rummage_phoenix_1_0_0;

    russian_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "russian";
            version = "0.1.0";
            src = fetchHex {
              pkg = "russian";
              version = "0.1.0";
              sha256 =
                "ebacf93bb9f653f749f787d65629ed2bd830dec295fb785f44738c120e9fde9a";
            };

            meta = {
              description = ''Transliterate a string with russian characters'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Kr00lIX/russian_elixir";
            };
          } // packageOverrides)
      ) {};

    russian = russian_0_1_0;

    rustler_0_8_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "rustler";
            version = "0.8.0";
            src = fetchHex {
              pkg = "rustler";
              version = "0.8.0";
              sha256 =
                "6df5262653d062100850f6a87857d183e5610e9dd61c5b4d407cbed292b9a257";
            };

            meta = {
              description = ''Mix compiler and runtime helpers for Rustler.'';
              license = with stdenv.lib.licenses; [ mit asl20 ];
              homepage = "https://github.com/hansihe/Rustler";
            };
          } // packageOverrides)
      ) {};

    rustler_0_9_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "rustler";
            version = "0.9.0";
            src = fetchHex {
              pkg = "rustler";
              version = "0.9.0";
              sha256 =
                "e0dc11d4d528d4bec5eceb395a5a655a4fb9574e0cbfe629750a8035d579939d";
            };

            meta = {
              description = ''Mix compiler and runtime helpers for Rustler.'';
              license = with stdenv.lib.licenses; [ mit asl20 ];
              homepage = "https://github.com/hansihe/Rustler";
            };
          } // packageOverrides)
      ) {};

    rustler = rustler_0_9_0;

    ryal_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ryal_core_0_0_1 }:
          buildMix ({
            name = "ryal";
            version = "0.0.1";
            src = fetchHex {
              pkg = "ryal";
              version = "0.0.1";
              sha256 =
                "ceedad12fc873fc109e2057c566607d64c223844762f1f60eb15fb99cde232df";
            };
            beamDeps  = [ ryal_core_0_0_1 ];

            meta = {
              description = ''The core of Ryal.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ryal/hex";
            };
          } // packageOverrides)
      ) {};

    ryal = ryal_0_0_1;

    ryal_core_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_4,
          ja_serializer_0_12_0,
          phoenix_1_3_0_rc_2,
          phoenix_ecto_3_2_3,
          postgrex_1_0_0_rc_1,
          scrivener_ecto_1_2_2
        }:
          buildMix ({
            name = "ryal_core";
            version = "0.0.1";
            src = fetchHex {
              pkg = "ryal_core";
              version = "0.0.1";
              sha256 =
                "66eeb54e538828db7e91a1ae798dc8eae5eb76c203b7359c7ec592ae32324305";
            };
            beamDeps  = [
                          ecto_2_1_4
                          ja_serializer_0_12_0
                          phoenix_1_3_0_rc_2
                          phoenix_ecto_3_2_3
                          postgrex_1_0_0_rc_1
                          scrivener_ecto_1_2_2
                        ];

            meta = {
              description = ''The core of Ryal.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ryal/ryal";
            };
          } // packageOverrides)
      ) {};

    ryal_core = ryal_core_0_0_1;

    s3_direct_upload_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_2_2_0 }:
          buildMix ({
            name = "s3_direct_upload";
            version = "0.1.2";
            src = fetchHex {
              pkg = "s3_direct_upload";
              version = "0.1.2";
              sha256 =
                "0e4dfe299ea1b4215d2532269d84eddc9cc2f11ff3203a5e93b70eb9d29474dd";
            };
            beamDeps  = [ poison_2_2_0 ];

            meta = {
              description = ''Pre-signed S3 upload helper for client-side
                            multipart POSTs.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/akappen/s3_direct_upload";
            };
          } // packageOverrides)
      ) {};

    s3_direct_upload = s3_direct_upload_0_1_2;

    safetybox_0_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cryptex_0_0_1,
          earmark_0_2_1
        }:
          buildMix ({
            name = "safetybox";
            version = "0.1.2";
            src = fetchHex {
              pkg = "safetybox";
              version = "0.1.2";
              sha256 =
                "7785f6f8f53082af331a3dd44d9a1dd759d7c7981f3b6924482c81370b8cc706";
            };
            beamDeps  = [ cryptex_0_0_1 earmark_0_2_1 ];

            meta = {
              description = ''A set of helper functions for security oriented
                            operations, like encrypt. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/aforward/safetybox";
            };
          } // packageOverrides)
      ) {};

    safetybox = safetybox_0_1_2;

    sagan_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          mongodb_0_4_0,
          poison_3_1_0,
          poolboy_1_5_1,
          timex_3_1_15
        }:
          buildMix ({
            name = "sagan";
            version = "0.1.1";
            src = fetchHex {
              pkg = "sagan";
              version = "0.1.1";
              sha256 =
                "6a8106bc2625f11464b3a5a7ad8e170c3aeefa01e171a54b974de638d9803f2e";
            };
            beamDeps  = [
                          httpoison_0_11_2
                          mongodb_0_4_0
                          poison_3_1_0
                          poolboy_1_5_1
                          timex_3_1_15
                        ];

            meta = {
              description = ''Azure Cosmos DB driver for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zbarnes757/sagan";
            };
          } // packageOverrides)
      ) {};

    sagan = sagan_0_1_1;

    sage_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "sage";
            version = "0.0.1";
            src = fetchHex {
              pkg = "sage";
              version = "0.0.1";
              sha256 =
                "d4c6b18602c01dbefef2a9035da56350c15456e48fa06bb0e377f436dfb72cc0";
            };

            meta = {
              longDescription = ''A library for an inter-connected society of
                                agents, inspired by [Jean-Francois
                                Cloutier](https://github.com/jfcloutier/ev3)`s
                                [EV3
                                project](https://github.com/jfcloutier/ev3).'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/joshforisha/sage";
            };
          } // packageOverrides)
      ) {};

    sage = sage_0_0_1;

    saj_0_1_0_alpha_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "saj";
            version = "0.1.0-alpha.1";
            src = fetchHex {
              pkg = "saj";
              version = "0.1.0-alpha.1";
              sha256 =
                "270bdef011998e3248ef026ba132781b7d82eab6f152077a1c169e5ae3b1039f";
            };

            meta = {
              description = ''SAJ (Simple API for JSON) is a SAX-inspired
                            algorithm for parsing JSON documents'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/QuentinFchx/saj/";
            };
          } // packageOverrides)
      ) {};

    saj = saj_0_1_0_alpha_1;

    salsa20_0_3_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "salsa20";
            version = "0.3.4";
            src = fetchHex {
              pkg = "salsa20";
              version = "0.3.4";
              sha256 =
                "b6bd54042e4fc419d9b7956d2d1c0a730dc3c549d847842c0ac3553be8ebedf0";
            };

            meta = {
              description = ''Salsa20 symmetric stream cipher'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mwmiller/salsa20_ex";
            };
          } // packageOverrides)
      ) {};

    salsa20_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "salsa20";
            version = "1.0.0";
            src = fetchHex {
              pkg = "salsa20";
              version = "1.0.0";
              sha256 =
                "4f305111afd4eed05f7556eb77f5d1ee02bb65b2af5c475fb37a20baa007c529";
            };

            meta = {
              description = ''Salsa20 symmetric stream cipher'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mwmiller/salsa20_ex";
            };
          } // packageOverrides)
      ) {};

    salsa20 = salsa20_1_0_0;

    salt_0_1_2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "salt";
            version = "0.1.2";
            src = fetchHex {
              pkg = "salt";
              version = "0.1.2";
              sha256 =
                "0269a396b9843d950bfc13ad45d413e94c91c414b4ee15fc974ed153d0736740";
            };
            compilePorts = true;

            meta = {
              description = ''libsodium wrapper for erlang.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/yjh0502/salt";
            };
          } // packageOverrides)
      ) {};

    salt = salt_0_1_2;

    saltie_0_3_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "saltie";
            version = "0.3.2";
            src = fetchHex {
              pkg = "saltie";
              version = "0.3.2";
              sha256 =
                "6d1eb4b3d0f3a494990a28af3a5e6f79221f230ed7b24063cdfa2ea34c8794f2";
            };

            meta = {
              description = ''**DEPRECATED**. See hex.pm/packages/hashids'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/alco/saltie";
            };
          } // packageOverrides)
      ) {};

    saltie = saltie_0_3_2;

    saltpack_1_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          basex_1_0_1,
          equivalex_1_0_0,
          kcl_1_0_0,
          msgpax_1_1_0
        }:
          buildMix ({
            name = "saltpack";
            version = "1.1.0";
            src = fetchHex {
              pkg = "saltpack";
              version = "1.1.0";
              sha256 =
                "d4668ae65843e9840b53e4c663896b8b93190d2cbad7ae04b0688c998a81c7bf";
            };
            beamDeps  = [ basex_1_0_1 equivalex_1_0_0 kcl_1_0_0 msgpax_1_1_0
                      ];

            meta = {
              description = ''pure Elixir saltpack library implementation'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mwmiller/saltpack_ex";
            };
          } // packageOverrides)
      ) {};

    saltpack = saltpack_1_1_0;

    samson_secret_puller_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "samson_secret_puller";
            version = "0.1.0";
            src = fetchHex {
              pkg = "samson_secret_puller";
              version = "0.1.0";
              sha256 =
                "dc3c0e9610fbc5beb2bf0ab0123f12b767dd50be166746775972f0771b36bfbd";
            };

            meta = {
              longDescription = ''A simple library to wait for and load secrets
                                that are placed into the secrets sidecar built
                                by Samson.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zendesk/samson_secret_puller";
            };
          } // packageOverrides)
      ) {};

    samson_secret_puller = samson_secret_puller_0_1_0;

    sanitize_file_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, iconv_1_0_5 }:
          buildMix ({
            name = "sanitize_file";
            version = "0.1.0";
            src = fetchHex {
              pkg = "sanitize_file";
              version = "0.1.0";
              sha256 =
                "7b75b467c763582410537ccbd9779ad913280aec6bc039c168618e3745799d9e";
            };
            beamDeps  = [ iconv_1_0_5 ];

            meta = {
              longDescription = ''Sanitization for Elixir. This module helps
                                you to clean up your filename for example.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jpcweb/sanitize_file.ex";
            };
          } // packageOverrides)
      ) {};

    sanitize_file = sanitize_file_0_1_0;

    sanitizer_0_0_2 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex }:
          buildErlangMk ({
            name = "sanitizer";
            version = "0.0.2";
            src = fetchHex {
              pkg = "sanitizer";
              version = "0.0.2";
              sha256 =
                "a616ef9e573d408fc279f241004cbf3db3fadd724809e943b3acf3aa79831db9";
            };

            meta = {
              description = ''An Erlang sanitizer library'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/yjh0502/sanitizer";
            };
          } // packageOverrides)
      ) {};

    sanitizer = sanitizer_0_0_2;

    sans_password_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_4,
          guardian_0_14_4,
          phoenix_1_3_0_rc_2
        }:
          buildMix ({
            name = "sans_password";
            version = "0.1.0";
            src = fetchHex {
              pkg = "sans_password";
              version = "0.1.0";
              sha256 =
                "ec24441206c9e8a5f6dab9d5c8a1bd4f5f80d70a60312d13e6030cd6ebcef993";
            };
            beamDeps  = [ ecto_2_1_4 guardian_0_14_4 phoenix_1_3_0_rc_2 ];

            meta = {
              description = ''A simple, passwordless authentication system
                            based on Guardian.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/promptworks/sans_password";
            };
          } // packageOverrides)
      ) {};

    sans_password = sans_password_0_1_0;

    sap_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          control_0_0_4,
          plug_1_3_5
        }:
          buildMix ({
            name = "sap";
            version = "0.0.2";
            src = fetchHex {
              pkg = "sap";
              version = "0.0.2";
              sha256 =
                "63f2db3cbbb753eac51177783463fb364dd560745bf5e4e8ba10a237e557903c";
            };
            beamDeps  = [ control_0_0_4 plug_1_3_5 ];

            meta = {
              longDescription = ''Sap is a toolkit for Plug applications to
                                accept and respond to HTTP requests by using a
                                decision tree built with combinators.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/slogsdon/sap";
            };
          } // packageOverrides)
      ) {};

    sap = sap_0_0_2;

    sasl_ex_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "sasl_ex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "sasl_ex";
              version = "0.1.0";
              sha256 =
                "ce7f244817f6264738d5432d9b734921b9fdfe4ca2351a890ed678eb6fbaad3e";
            };

            meta = {
              longDescription = ''A lib for decoding bytes in the format of the
                                SASL protocol into an Elixir struct.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/elbow-jason/sasl_ex";
            };
          } // packageOverrides)
      ) {};

    sasl_ex = sasl_ex_0_1_0;

    sass_1_0_17 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, elixir_make_0_3_0
        }:
          buildMix ({
            name = "sass";
            version = "1.0.17";
            src = fetchHex {
              pkg = "sass";
              version = "1.0.17";
              sha256 =
                "50bd1d6abee746f5f45f5b330e1cfe046761df1e6c3040d59873931e4eceedaf";
            };
            beamDeps  = [ elixir_make_0_3_0 ];

            meta = {
              description = ''Sass for elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/scottdavis/sass.ex";
            };
          } // packageOverrides)
      ) {};

    sass = sass_1_0_17;

    sass_elixir_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "sass_elixir";
            version = "0.0.1";
            src = fetchHex {
              pkg = "sass_elixir";
              version = "0.0.1";
              sha256 =
                "565dc1c40057a9a7ae3a3c27151a8dd87a3d672d346fcc5b4829152d22c4a511";
            };

            meta = {
              description = ''A SASS plugin for elixir projects'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zamith/sass_elixir";
            };
          } // packageOverrides)
      ) {};

    sass_elixir = sass_elixir_0_0_1;

    satori_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          poison_3_1_0,
          websocket_client_1_2_1
        }:
          buildMix ({
            name = "satori";
            version = "0.1.0";
            src = fetchHex {
              pkg = "satori";
              version = "0.1.0";
              sha256 =
                "e8787edb3bb3aa724b8b1b78a1a7972a5a5ed168f2214737995953a6f6c57365";
            };
            beamDeps  = [ poison_3_1_0 websocket_client_1_2_1 ];

            meta = {
              description = ''Websocket Client for Satori
                            (https://www.satori.com)'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/NationalAssociationOfRealtors/satori";
            };
          } // packageOverrides)
      ) {};

    satori = satori_0_1_0;

    saul_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "saul";
            version = "0.1.0";
            src = fetchHex {
              pkg = "saul";
              version = "0.1.0";
              sha256 =
                "f16372232cadc9494f780300e5b6b4a33164bcf3da971b24d5b0b8e93c478db4";
            };

            meta = {
              description = ''Data validation and conformation library for
                            Elixir.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/whatyouhide/saul";
            };
          } // packageOverrides)
      ) {};

    saul = saul_0_1_0;

    savory_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "savory";
            version = "0.0.2";
            src = fetchHex {
              pkg = "savory";
              version = "0.0.2";
              sha256 =
                "a45ef32a6f45092e1328bc1eb47bda3c8f992afe863aaa73c455f31b0c8591b9";
            };

            meta = {
              longDescription = ''An Elixir implementation of Freza`s salt_nif
                                which interfaces with libsodium, a wrapper for
                                the cryptographic primitive libary NaCl. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/electricFeel/savory";
            };
          } // packageOverrides)
      ) {};

    savory = savory_0_0_2;

    saxon_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          html_entities_0_3_0,
          plug_1_3_5
        }:
          buildMix ({
            name = "saxon";
            version = "0.1.0";
            src = fetchHex {
              pkg = "saxon";
              version = "0.1.0";
              sha256 =
                "185e5318b982273cc649d26ba8e8fa5376b7a3d46ec006705a1fcff3cc671b97";
            };
            beamDeps  = [ html_entities_0_3_0 plug_1_3_5 ];

            meta = {
              description = ''A plug for hierarchical data submit with
                            arbitrary number of files embedded in.'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/aetherus/return/blob/master/lib/return.ex";
            };
          } // packageOverrides)
      ) {};

    saxon = saxon_0_1_0;

    sbroker_1_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "sbroker";
            version = "1.0.0";
            src = fetchHex {
              pkg = "sbroker";
              version = "1.0.0";
              sha256 =
                "ba952bfa35b374e1e5d84bc5f5efe8360c6f99dc93b3118f714a9a2dff6c9e19";
            };

            meta = {
              description = ''Low level pooling library'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/fishcakez/sbroker";
            };
          } // packageOverrides)
      ) {};

    sbroker = sbroker_1_0_0;

    sbroker_1_0_0_beta_5 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "sbroker";
            version = "1.0.0-beta.5";
            src = fetchHex {
              pkg = "sbroker";
              version = "1.0.0-beta.5";
              sha256 =
                "2217b3d890de4147c0e382d8a015aa288c6bad81b1969c54f29002a978a83929";
            };

            meta = {
              description = ''Low level pooling library'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/fishcakez/sbroker";
            };
          } // packageOverrides)
      ) {};

    scaffold_0_0_5 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          configparser_ex_0_2_1,
          gitex_0_1_0
        }:
          buildMix ({
            name = "scaffold";
            version = "0.0.5";
            src = fetchHex {
              pkg = "scaffold";
              version = "0.0.5";
              sha256 =
                "fad499b712a576bc9d0f4842494baf9ec8d4c388f99c14f74654b1dbd158945c";
            };
            beamDeps  = [ configparser_ex_0_2_1 gitex_0_1_0 ];

            meta = {
              description = ''A mix task for creating new projects based on
                            templates fetched from a Git-repo.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/gausby/scaffold";
            };
          } // packageOverrides)
      ) {};

    scaffold = scaffold_0_0_5;

    scatter_swap_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "scatter_swap";
            version = "0.1.0";
            src = fetchHex {
              pkg = "scatter_swap";
              version = "0.1.0";
              sha256 =
                "c4570b9d3ba1e1a9c4f84bc45d36f1b41a94e0d54dc08179b7bcca34dbf471c3";
            };

            meta = {
              longDescription = ''An integer hash function designed to have
                                zero collisions, achieve avalanche, and be
                                reversible.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dougal/scatter_swap.ex";
            };
          } // packageOverrides)
      ) {};

    scatter_swap = scatter_swap_0_1_0;

    schedule_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "schedule";
            version = "0.1.0";
            src = fetchHex {
              pkg = "schedule";
              version = "0.1.0";
              sha256 =
                "0b9b9440fe5e6d4a0cad34a170d3ec3251e06c42610f1c4106d93949b845db73";
            };

            meta = {
              description = ''Basic operations with intervals for Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/dvele55/schedule";
            };
          } // packageOverrides)
      ) {};

    schedule = schedule_0_1_0;

    schizo_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "schizo";
            version = "0.0.1";
            src = fetchHex {
              pkg = "schizo";
              version = "0.0.1";
              sha256 =
                "278d738fe6d3d1455dd24e0450a95f4191b8ce63b7059a1b74e7bad86c47746d";
            };

            meta = {
              description = ''Transform every other word in a sentence with
                            some transformers.'';
              license = stdenv.lib.licenses.unlicense;
              homepage = "https://github.com/teerawat1992/Schizo";
            };
          } // packageOverrides)
      ) {};

    schizo = schizo_0_0_1;

    scientist_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "scientist";
            version = "0.2.0";
            src = fetchHex {
              pkg = "scientist";
              version = "0.2.0";
              sha256 =
                "595ccac386a150ce83e5cee6e2f3c9a998f0504a06667f9f0be3e6fdd13f4f02";
            };

            meta = {
              description = ''A library for carefully refactoring critical
                            paths in your elixir application.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cwbriones/scientist";
            };
          } // packageOverrides)
      ) {};

    scientist = scientist_0_2_0;

    scientist_ex_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "scientist_ex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "scientist_ex";
              version = "0.1.0";
              sha256 =
                "af9ac363d7edf51e191f7a9535f4811f342f3318f5cc48b349c7b385477ac257";
            };

            meta = {
              description = ''A library for carefully refactoring critical
                            paths in your elixir application.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cwbriones/scientist";
            };
          } // packageOverrides)
      ) {};

    scientist_ex = scientist_ex_0_1_0;

    scope_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "scope";
            version = "1.0.0";
            src = fetchHex {
              pkg = "scope";
              version = "1.0.0";
              sha256 =
                "4b31784e9c959715fdc4975632450d4a4c1ddd6fb366aca03915276397fe61db";
            };

            meta = {
              longDescription = ''Scope is a small module that provides two
                                macros to facilitate function overload and local
                                import/aliases execution.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/xvw/scope";
            };
          } // packageOverrides)
      ) {};

    scope = scope_1_0_0;

    scotty_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "scotty";
            version = "0.0.1";
            src = fetchHex {
              pkg = "scotty";
              version = "0.0.1";
              sha256 =
                "1932aed5d9d8d38f576005b914283d0ca08ce156f7408017cbf87099dcadea5d";
            };

            meta = {
              description = ''Capistrano-like Elixir deployments. Beams your
                            code to production.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bitcrowd/scotty";
            };
          } // packageOverrides)
      ) {};

    scotty = scotty_0_0_1;

    scout_apm_0_3_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          approximate_histogram_0_1_1,
          hackney_1_8_6,
          plug_1_3_5,
          poison_3_1_0
        }:
          buildMix ({
            name = "scout_apm";
            version = "0.3.1";
            src = fetchHex {
              pkg = "scout_apm";
              version = "0.3.1";
              sha256 =
                "85515bb0f0a37a5e4088dab9e002437f034171bcb0f0b74d4c04c42d202a8d1d";
            };
            beamDeps  = [
                          approximate_histogram_0_1_1
                          hackney_1_8_6
                          plug_1_3_5
                          poison_3_1_0
                        ];

            meta = {
              longDescription = ''ScoutAPM agent for Phoenix & Elixir projects.
                                For more information, visit
                                https://apm.scoutapp.com/elixir.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/scoutapp/scout_apm_elixir";
            };
          } // packageOverrides)
      ) {};

    scout_apm = scout_apm_0_3_1;

    scrape_1_2_7 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          codepagex_0_1_4,
          floki_0_17_2,
          httpoison_0_11_2,
          parallel_0_0_3,
          timex_3_0_5
        }:
          buildMix ({
            name = "scrape";
            version = "1.2.7";
            src = fetchHex {
              pkg = "scrape";
              version = "1.2.7";
              sha256 =
                "217b83d554704dfd42539a734046596cd10581b87d15a99dfbd644386a5e78ef";
            };
            beamDeps  = [
                          codepagex_0_1_4
                          floki_0_17_2
                          httpoison_0_11_2
                          parallel_0_0_3
                          timex_3_0_5
                        ];

            meta = {
              description = ''Scrape any website, article or RSS/Atom feed with
                            ease!'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/Anonyfox/elixir-scrape";
            };
          } // packageOverrides)
      ) {};

    scrape_2_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          codepagex_0_1_4,
          floki_0_17_2,
          html5ever_0_1_1,
          httpoison_0_11_2,
          parallel_0_0_3,
          timex_3_1_15
        }:
          buildMix ({
            name = "scrape";
            version = "2.0.0";
            src = fetchHex {
              pkg = "scrape";
              version = "2.0.0";
              sha256 =
                "b6c602bf89492254aea478d2fd8a060179d9d6227bd355c13055868632f49728";
            };
            beamDeps  = [
                          codepagex_0_1_4
                          floki_0_17_2
                          html5ever_0_1_1
                          httpoison_0_11_2
                          parallel_0_0_3
                          timex_3_1_15
                        ];

            meta = {
              description = ''Scrape any website, article or RSS/Atom feed with
                            ease!'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/Anonyfox/elixir-scrape";
            };
          } // packageOverrides)
      ) {};

    scrape = scrape_2_0_0;

    screamer_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "screamer";
            version = "0.1.2";
            src = fetchHex {
              pkg = "screamer";
              version = "0.1.2";
              sha256 =
                "b18595eb541161cea9ff721ab06276f5a515004c0f8603a786a82f9a73fff26a";
            };

            meta = {
              description = ''Screamer-function definitions autogenerator'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/virviil/screamer";
            };
          } // packageOverrides)
      ) {};

    screamer = screamer_0_1_2;

    screenshotter_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ex_aws_1_0_0,
          hackney_1_8_6,
          hound_1_0_3,
          poison_2_2_0
        }:
          buildMix ({
            name = "screenshotter";
            version = "0.1.1";
            src = fetchHex {
              pkg = "screenshotter";
              version = "0.1.1";
              sha256 =
                "462c6bea48b34f4c79ff6a28c4b9095e74038ad74eea3c74ea24237cd51e2fce";
            };
            beamDeps  = [ ex_aws_1_0_0 hackney_1_8_6 hound_1_0_3 poison_2_2_0
                      ];

            meta = {
              description = ''A application that takes a screenshot of a
                            website then uploads it into S3'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/wingyu/screenshotter";
            };
          } // packageOverrides)
      ) {};

    screenshotter = screenshotter_0_1_1;

    scribe_0_5_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, pane_0_1_1 }:
          buildMix ({
            name = "scribe";
            version = "0.5.0";
            src = fetchHex {
              pkg = "scribe";
              version = "0.5.0";
              sha256 =
                "1b306e090ce4bd542532883ab041653d5424d647ce2e18483119eb7559a52716";
            };
            beamDeps  = [ pane_0_1_1 ];

            meta = {
              description = ''Pretty-print tables of structs and maps'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/codedge-llc/scribe";
            };
          } // packageOverrides)
      ) {};

    scribe = scribe_0_5_0;

    scrivener_0_5_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ecto_1_0_1 }:
          buildMix ({
            name = "scrivener";
            version = "0.5.0";
            src = fetchHex {
              pkg = "scrivener";
              version = "0.5.0";
              sha256 =
                "8844ac071964bd8062f27cb97ce74902c710ec09946dbfb56032218dc06ea747";
            };
            beamDeps  = [ ecto_1_0_1 ];

            meta = {
              description = ''Pagination for the Elixir ecosystem'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/drewolson/scrivener";
            };
          } // packageOverrides)
      ) {};

    scrivener_1_1_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_0_0_rc_6,
          postgrex_1_0_0_rc_1
        }:
          buildMix ({
            name = "scrivener";
            version = "1.1.4";
            src = fetchHex {
              pkg = "scrivener";
              version = "1.1.4";
              sha256 =
                "c15ce0f7abcdfc88b7967d045fa187d2b7d59dbf28f20d90495ce6e7e682ce52";
            };
            beamDeps  = [ ecto_2_0_0_rc_6 postgrex_1_0_0_rc_1 ];

            meta = {
              description = ''Pagination for the Elixir ecosystem'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/drewolson/scrivener";
            };
          } // packageOverrides)
      ) {};

    scrivener_2_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "scrivener";
            version = "2.3.0";
            src = fetchHex {
              pkg = "scrivener";
              version = "2.3.0";
              sha256 =
                "55f4e512175dd46c428acecf3306e7d2606cef886c1e4c6293d30b4499db7717";
            };

            meta = {
              description = ''Pagination for the Elixir ecosystem'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/drewolson/scrivener";
            };
          } // packageOverrides)
      ) {};

    scrivener = scrivener_2_3_0;

    scrivener_ecto_1_1_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_4,
          postgrex_0_5_5,
          scrivener_2_3_0
        }:
          buildMix ({
            name = "scrivener_ecto";
            version = "1.1.4";
            src = fetchHex {
              pkg = "scrivener_ecto";
              version = "1.1.4";
              sha256 =
                "6d8facba5716983de8399deb98cbb22e73c830882024708452e0f549f4618137";
            };
            beamDeps  = [ ecto_2_1_4 postgrex_0_5_5 scrivener_2_3_0 ];

            meta = {
              description = ''Paginate your Ecto queries with Scrivener'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/drewolson/scrivener_ecto";
            };
          } // packageOverrides)
      ) {};

    scrivener_ecto_1_2_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_4,
          postgrex_0_5_5,
          scrivener_2_3_0
        }:
          buildMix ({
            name = "scrivener_ecto";
            version = "1.2.2";
            src = fetchHex {
              pkg = "scrivener_ecto";
              version = "1.2.2";
              sha256 =
                "1f6cc3294b0b46f5e4dcf66d0c0b0abd94eca7904ca3a8811ede766265ef6f9a";
            };
            beamDeps  = [ ecto_2_1_4 postgrex_0_5_5 scrivener_2_3_0 ];

            meta = {
              description = ''Paginate your Ecto queries with Scrivener'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/drewolson/scrivener_ecto";
            };
          } // packageOverrides)
      ) {};

    scrivener_ecto = scrivener_ecto_1_2_2;

    scrivener_elastic_1_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          elastic_2_3_5,
          scrivener_2_3_0
        }:
          buildMix ({
            name = "scrivener_elastic";
            version = "1.1.0";
            src = fetchHex {
              pkg = "scrivener_elastic";
              version = "1.1.0";
              sha256 =
                "3d19ebc6dc6b85c843b1ed19fa63767aa09290b6ad4e315afb0d7a153f62c338";
            };
            beamDeps  = [ elastic_2_3_5 scrivener_2_3_0 ];

            meta = {
              description = ''Scrivener integration for Elastic'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/radar/scrivener_elastic";
            };
          } // packageOverrides)
      ) {};

    scrivener_elastic = scrivener_elastic_1_1_0;

    scrivener_esx_0_2_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          esx_0_6_1,
          scrivener_2_3_0
        }:
          buildMix ({
            name = "scrivener_esx";
            version = "0.2.1";
            src = fetchHex {
              pkg = "scrivener_esx";
              version = "0.2.1";
              sha256 =
                "3abb64f91f4c31808a2e4940051180422220400007b65e423af15e1ea30e27ff";
            };
            beamDeps  = [ esx_0_6_1 scrivener_2_3_0 ];

            meta = {
              description = ''Pagination(Scrivener) for ESx'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ikeikeikeike/scrivener_esx";
            };
          } // packageOverrides)
      ) {};

    scrivener_esx = scrivener_esx_0_2_1;

    scrivener_headers_3_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          plug_1_3_5,
          scrivener_2_3_0
        }:
          buildMix ({
            name = "scrivener_headers";
            version = "3.1.0";
            src = fetchHex {
              pkg = "scrivener_headers";
              version = "3.1.0";
              sha256 =
                "f8468b8db5a777382307df734e7e951f720c07e2cfbb24bec9cb0c017c1531f5";
            };
            beamDeps  = [ plug_1_3_5 scrivener_2_3_0 ];

            meta = {
              description = ''Helpers for paginating API responses with
                            Scrivener and HTTP headers'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/doomspork/scrivener_headers";
            };
          } // packageOverrides)
      ) {};

    scrivener_headers = scrivener_headers_3_1_0;

    scrivener_html_1_7_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          phoenix_1_1_9,
          phoenix_html_2_9_3,
          plug_1_3_5,
          scrivener_0_5_0
        }:
          buildMix ({
            name = "scrivener_html";
            version = "1.7.1";
            src = fetchHex {
              pkg = "scrivener_html";
              version = "1.7.1";
              sha256 =
                "053c33cca0fbe05b7fd0533135f1c3ae9e3bc1952af608426f4cde2c0f5e11e8";
            };
            beamDeps  = [
                          phoenix_1_1_9
                          phoenix_html_2_9_3
                          plug_1_3_5
                          scrivener_0_5_0
                        ];

            meta = {
              description = ''HTML helpers for Scrivener'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mgwidmann/scrivener_html";
            };
          } // packageOverrides)
      ) {};

    scrivener_html = scrivener_html_1_7_1;

    scrivener_list_1_0_1 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, scrivener_ecto_1_2_2
        }:
          buildMix ({
            name = "scrivener_list";
            version = "1.0.1";
            src = fetchHex {
              pkg = "scrivener_list";
              version = "1.0.1";
              sha256 =
                "68a4aabf865b7b89ca7d837138e5fa98f1c71025b96201b4cc83cceeafbb26cd";
            };
            beamDeps  = [ scrivener_ecto_1_2_2 ];

            meta = {
              longDescription = ''A scrivener/scrivener_ecto compatible
                                extension that allows pagination of a list.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/stephenmoloney/scrivener_list";
            };
          } // packageOverrides)
      ) {};

    scrivener_list = scrivener_list_1_0_1;

    search_ex_0_0_1_alpha_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "search_ex";
            version = "0.0.1-alpha.1";
            src = fetchHex {
              pkg = "search_ex";
              version = "0.0.1-alpha.1";
              sha256 =
                "d9d122ef7dab76e1f1864e3bfe029c3434a667f62c159732cc12ed5fdad93930";
            };

            meta = {
              description = ''A full-text search engine written in pure
                            Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/andyl/search_ex";
            };
          } // packageOverrides)
      ) {};

    search_ex = search_ex_0_0_1_alpha_1;

    searchex_0_0_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          git_cli_0_2_3,
          lru_cache_0_1_1,
          stem_ex_0_0_2,
          table_rex_0_10_0,
          yaml_elixir_1_3_0
        }:
          buildMix ({
            name = "searchex";
            version = "0.0.4";
            src = fetchHex {
              pkg = "searchex";
              version = "0.0.4";
              sha256 =
                "cb974aa2a5cca658d657aecba2f6febad6597b4f1c14eb0345e63552eb1afc3a";
            };
            beamDeps  = [
                          git_cli_0_2_3
                          lru_cache_0_1_1
                          stem_ex_0_0_2
                          table_rex_0_10_0
                          yaml_elixir_1_3_0
                        ];

            meta = {
              description = ''A full-text search engine written in pure
                            Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/elixir-search/searchex";
            };
          } // packageOverrides)
      ) {};

    searchex = searchex_0_0_4;

    searchql_2_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "searchql";
            version = "2.1.2";
            src = fetchHex {
              pkg = "searchql";
              version = "2.1.2";
              sha256 =
                "ef5e5fda3a16141625d46016da9d87cbc05a48140df16956ccf68e7c828589cb";
            };

            meta = {
              description = ''A natural-ish language query parser'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/usecanvas/searchql";
            };
          } // packageOverrides)
      ) {};

    searchql = searchql_2_1_2;

    seasonal_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          gproc_0_6_1,
          uuid_1_1_7
        }:
          buildMix ({
            name = "seasonal";
            version = "0.3.0";
            src = fetchHex {
              pkg = "seasonal";
              version = "0.3.0";
              sha256 =
                "fb98297323a025069328a9b7f4291d8f93e624cf912787d4112b74197a79de9f";
            };
            beamDeps  = [ gproc_0_6_1 uuid_1_1_7 ];

            meta = {
              description = ''A worker pool written in Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lee-dohm/seasonal";
            };
          } // packageOverrides)
      ) {};

    seasonal = seasonal_0_3_0;

    seat_json_0_0_18 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "seat_json";
            version = "0.0.18";
            src = fetchHex {
              pkg = "seat_json";
              version = "0.0.18";
              sha256 =
                "d0e7339fb24e156e53aa4cc733dda90d1c3bfa5f5fc38b7e293b690e7289c516";
            };

            meta = {
              description = ''Simple Elixir Api Testing lib'';

            };
          } // packageOverrides)
      ) {};

    seat_json = seat_json_0_0_18;

    sec_cik_ticker_mapper_0_0_2 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, sqlite_ecto_1_1_0
        }:
          buildMix ({
            name = "sec_cik_ticker_mapper";
            version = "0.0.2";
            src = fetchHex {
              pkg = "sec_cik_ticker_mapper";
              version = "0.0.2";
              sha256 =
                "218ade27934eac0ff34b4f57636c5dc82ca2a4424bbd4c76df58ff5cd98f4c46";
            };
            beamDeps  = [ sqlite_ecto_1_1_0 ];

            meta = {
              longDescription = ''SEC Cik-Ticker Mapper
                                SecCikTickerMapper.Getter.ticker(CIK) returns a
                                ticker symbol
                                SecCikTickerMapper.Getter.cik(Ticker) returns a
                                cik'';

            };
          } // packageOverrides)
      ) {};

    sec_cik_ticker_mapper = sec_cik_ticker_mapper_0_0_2;

    sec_company_filings_rss_feed_parser_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, floki_0_9_0 }:
          buildMix ({
            name = "sec_company_filings_rss_feed_parser";
            version = "0.0.2";
            src = fetchHex {
              pkg = "sec_company_filings_rss_feed_parser";
              version = "0.0.2";
              sha256 =
                "b9c07c900a0afd5d8b4df68d4673d6fbb30ff50fe93579bab5133b748dde90a2";
            };
            beamDeps  = [ floki_0_9_0 ];

            meta = {
              longDescription = ''XML Parser for a Company`s SEC Filings Feed
                                An example of such a feed can be found here:
                                https://www.sec.gov/cgi-bin/browse-edgar?action=getcompany&CIK=0001418091&CIK=0001418091&type=&dateb=&owner=exclude&start=0&count=40&output=atom'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/vikram7/sec_company_filings_rss_feed_parser";
            };
          } // packageOverrides)
      ) {};

    sec_company_filings_rss_feed_parser =
      sec_company_filings_rss_feed_parser_0_0_2;

    sec_recent_filings_rss_feed_parser_0_0_6 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, floki_0_9_0 }:
          buildMix ({
            name = "sec_recent_filings_rss_feed_parser";
            version = "0.0.6";
            src = fetchHex {
              pkg = "sec_recent_filings_rss_feed_parser";
              version = "0.0.6";
              sha256 =
                "998ecd1cf0157b8edbcafe4342264a4ed9b7a3b14d5cba1f2940d782b9483967";
            };
            beamDeps  = [ floki_0_9_0 ];

            meta = {
              longDescription = ''XML Parser for the SEC`s Latest Filings Feed
                                An example of such a feed can be found here:
                                https://www.sec.gov/cgi-bin/browse-edgar?action=getcurrent&CIK=&type=10-K&company=&dateb=&owner=include&start=0&count=40&output=atom'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/vikram7/sec_latest_filings_rss_feed_parser";
            };
          } // packageOverrides)
      ) {};

    sec_recent_filings_rss_feed_parser =
      sec_recent_filings_rss_feed_parser_0_0_6;

    secure_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, bcrypt_0_5_0_p3 }:
          buildMix ({
            name = "secure";
            version = "0.1.0";
            src = fetchHex {
              pkg = "secure";
              version = "0.1.0";
              sha256 =
                "7e6c6812dad4134d9a77fc9d138927763bf89448627c44a13522055850d8d7ff";
            };
            beamDeps  = [ bcrypt_0_5_0_p3 ];

            meta = {
              description = ''Collection of secure utilities'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/manelli/secure.ex";
            };
          } // packageOverrides)
      ) {};

    secure = secure_0_1_0;

    secure_client_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cloak_0_3_1,
          http_client_0_1_2
        }:
          buildMix ({
            name = "secure_client";
            version = "0.1.0";
            src = fetchHex {
              pkg = "secure_client";
              version = "0.1.0";
              sha256 =
                "bf924002d0f531dbdd65995f87e1cac124fe08c443fee9de25332e18bfc63a4c";
            };
            beamDeps  = [ cloak_0_3_1 http_client_0_1_2 ];

            meta = {
              description = ''A secure encoder and decoder for HTTPClient.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/asonix/secure-client-elixir";
            };
          } // packageOverrides)
      ) {};

    secure_client = secure_client_0_1_0;

    secure_compare_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "secure_compare";
            version = "0.0.2";
            src = fetchHex {
              pkg = "secure_compare";
              version = "0.0.2";
              sha256 =
                "9dbdaf1e5e6b7161299d6fae3a2da2ae904f6539007dc336d33f99b1fe7b51a0";
            };

            meta = {
              description = ''A simple constant-time comparison algorithm for
                            Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/plackemacher/secure_compare";
            };
          } // packageOverrides)
      ) {};

    secure_compare = secure_compare_0_0_2;

    secure_headers_0_0_1 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, pipe_0_0_2, plug_1_3_5
        }:
          buildMix ({
            name = "secure_headers";
            version = "0.0.1";
            src = fetchHex {
              pkg = "secure_headers";
              version = "0.0.1";
              sha256 =
                "df5ffa08c91a270da9a167edac6181c87a8467e7c98d65651bd6b1c928e75cb1";
            };
            beamDeps  = [ pipe_0_0_2 plug_1_3_5 ];

            meta = {
              description = ''HTTP Security Headers for Phoenix or Plug'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/anotherhale/secure_headers";
            };
          } // packageOverrides)
      ) {};

    secure_headers = secure_headers_0_0_1;

    secure_log_formatter_1_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "secure_log_formatter";
            version = "1.1.0";
            src = fetchHex {
              pkg = "secure_log_formatter";
              version = "1.1.0";
              sha256 =
                "7a0517275dc0bf1794da1bf55f47ba81e098430ee550e905ad34e5d8ef793248";
            };

            meta = {
              description = ''Secure inspection and log formatting.'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/localvore-today/secure_log_formatter";
            };
          } // packageOverrides)
      ) {};

    secure_log_formatter = secure_log_formatter_1_1_0;

    secure_password_0_6_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          comeonin_2_6_0,
          ecto_1_0_1
        }:
          buildMix ({
            name = "secure_password";
            version = "0.6.0";
            src = fetchHex {
              pkg = "secure_password";
              version = "0.6.0";
              sha256 =
                "5fbec6c6b714c494aedc8ca1a5d6f0db8fbd700859fc43191629d9d3ca2170b2";
            };
            beamDeps  = [ comeonin_2_6_0 ecto_1_0_1 ];

            meta = {
              description = ''A port of Rails has_secure_password for Ecto
                            models'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tuvistavie/ecto-secure-password";
            };
          } // packageOverrides)
      ) {};

    secure_password = secure_password_0_6_0;

    secure_random_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "secure_random";
            version = "0.1.1";
            src = fetchHex {
              pkg = "secure_random";
              version = "0.1.1";
              sha256 =
                "55fa172d9f606bbf43a775f5b34b0866c8bbf242acf7e1ff1eafec2c07fdcc53";
            };

            meta = {
              description = ''A convienance library based on Ruby`s
                            SecureRandom'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/patricksrobertson/secure_random.ex";
            };
          } // packageOverrides)
      ) {};

    secure_random_0_5_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "secure_random";
            version = "0.5.1";
            src = fetchHex {
              pkg = "secure_random";
              version = "0.5.1";
              sha256 =
                "1b9754f15e3940a143baafd19da12293f100044df69ea12db5d72878312ae6ab";
            };

            meta = {
              description = ''A convienance library based on Ruby`s
                            SecureRandom'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/patricksrobertson/secure_random.ex";
            };
          } // packageOverrides)
      ) {};

    secure_random = secure_random_0_5_1;

    secure_server_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cloak_0_3_1,
          plug_1_3_5,
          poison_2_2_0
        }:
          buildMix ({
            name = "secure_server";
            version = "0.1.0";
            src = fetchHex {
              pkg = "secure_server";
              version = "0.1.0";
              sha256 =
                "e7c3526418aca8a2bc8835955992109eceef81106bc1f43215969fc3656b6efd";
            };
            beamDeps  = [ cloak_0_3_1 plug_1_3_5 poison_2_2_0 ];

            meta = {
              description = ''A plugin for Phoenix and Plug to allow for more
                            secure interaction with clients.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/asonix/secure-server-elixir";
            };
          } // packageOverrides)
      ) {};

    secure_server = secure_server_0_1_0;

    seedex_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ecto_1_0_1 }:
          buildMix ({
            name = "seedex";
            version = "0.1.3";
            src = fetchHex {
              pkg = "seedex";
              version = "0.1.3";
              sha256 =
                "52cd02408002e3cf9a70f59cc5f257ee69efb6d808f98ca33c841bb9fe0d02fb";
            };
            beamDeps  = [ ecto_1_0_1 ];

            meta = {
              description = ''Seed data generation for Ecto'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tuvistavie/seedex";
            };
          } // packageOverrides)
      ) {};

    seedex = seedex_0_1_3;

    seek_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          deep_merge_0_1_1,
          postgrex_0_13_3
        }:
          buildMix ({
            name = "seek";
            version = "0.0.1";
            src = fetchHex {
              pkg = "seek";
              version = "0.0.1";
              sha256 =
                "a28d99746863ee83a223c02f7519c6489b0dbf2e2765ca5b438e09c4ee52ac05";
            };
            beamDeps  = [ deep_merge_0_1_1 postgrex_0_13_3 ];

            meta = {
              description = ''A simple wrapper around Postgrex to simplify
                            writing SQL queries'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/amberbit/seek";
            };
          } // packageOverrides)
      ) {};

    seek = seek_0_0_1;

    seg_seg_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, vector_0_2_2 }:
          buildMix ({
            name = "seg_seg";
            version = "0.0.1";
            src = fetchHex {
              pkg = "seg_seg";
              version = "0.0.1";
              sha256 =
                "3551c5ac60e10d786ff7185f8a1f691d9a579cc997d173dfe28e9c676afe3e65";
            };
            beamDeps  = [ vector_0_2_2 ];

            meta = {
              description = ''Segment-Segment intersection piont and
                            classification'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pkinney/segseg_ex";
            };
          } // packageOverrides)
      ) {};

    seg_seg_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, vector_0_2_2 }:
          buildMix ({
            name = "seg_seg";
            version = "0.1.0";
            src = fetchHex {
              pkg = "seg_seg";
              version = "0.1.0";
              sha256 =
                "a7ff34a7c4e314de2fc2fd1aa456d4434e17866371425111146c49bf28937512";
            };
            beamDeps  = [ vector_0_2_2 ];

            meta = {
              description = ''Segment-Segment intersection piont and
                            classification'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pkinney/segseg_ex";
            };
          } // packageOverrides)
      ) {};

    seg_seg = seg_seg_0_1_0;

    segment_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_1_0_2
        }:
          buildMix ({
            name = "segment";
            version = "0.1.1";
            src = fetchHex {
              pkg = "segment";
              version = "0.1.1";
              sha256 =
                "497954aa0c20958112cfbc2e0d68b789f6b6b5ece9a397a0b8dd5f06d2f55ee3";
            };
            beamDeps  = [ httpoison_0_11_2 poison_1_0_2 ];

            meta = {
              description = ''analytics_elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/stueccles/analytics-elixir";
            };
          } // packageOverrides)
      ) {};

    segment = segment_0_1_1;

    select_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, mochiweb_2_12_2 }:
          buildMix ({
            name = "select";
            version = "0.0.1";
            src = fetchHex {
              pkg = "select";
              version = "0.0.1";
              sha256 =
                "9f579c2f342b51f6e42d414110a889c8b6a4430e49697b724ccdbbf8265853e9";
            };
            beamDeps  = [ mochiweb_2_12_2 ];

            meta = {
              longDescription = ''An Elixir library to extract useful data from
                                HTML documents, suitable for web scraping.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/utkarshkukreti/select.ex";
            };
          } // packageOverrides)
      ) {};

    select = select_0_0_1;

    selenium_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_8_3,
          poison_2_0_1
        }:
          buildMix ({
            name = "selenium";
            version = "0.1.0";
            src = fetchHex {
              pkg = "selenium";
              version = "0.1.0";
              sha256 =
                "5c86b13b7dc7e3d498312cf930b58027196c8b74d2351381b73e7407d8031688";
            };
            beamDeps  = [ httpoison_0_8_3 poison_2_0_1 ];

            meta = {
              description = ''Elixir wrapper for selenium webdriver protocol'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/nathanjohnson320/exselenium";
            };
          } // packageOverrides)
      ) {};

    selenium = selenium_0_1_0;

    semaphore_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "semaphore";
            version = "1.0.0";
            src = fetchHex {
              pkg = "semaphore";
              version = "1.0.0";
              sha256 =
                "97fb14127a3ea31ff11f3b81f9b2af4ff19e457b0e6149f3b3ed64aac5f1cbea";
            };

            meta = {
              description = ''Fast semaphore using ETS.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hammerandchisel/semaphore";
            };
          } // packageOverrides)
      ) {};

    semaphore = semaphore_1_0_0;

    semver_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "semver";
            version = "0.1.2";
            src = fetchHex {
              pkg = "semver";
              version = "0.1.2";
              sha256 =
                "6e8150b94b1d5cbe3c31986a46cdc57c9af6f71f3747900280b2da7c0466a993";
            };

            meta = {
              description = ''Utilities for working with semver.org-compliant
                            version strings'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lee-dohm/semver";
            };
          } // packageOverrides)
      ) {};

    semver = semver_0_1_2;

    sendgrid_1_4_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "sendgrid";
            version = "1.4.0";
            src = fetchHex {
              pkg = "sendgrid";
              version = "1.4.0";
              sha256 =
                "6d5b91b6dcbaf3e37a4949650cfc3e3cc2e0a5b2e9f52bb9a5ac5a40c2400147";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''A wrapper for SendGrid`s API to create composable
                            emails.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/alexgaribay/sendgrid_elixir
";
            };
          } // packageOverrides)
      ) {};

    sendgrid = sendgrid_1_4_0;

    sensor_0_1_7 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "sensor";
            version = "0.1.7";
            src = fetchHex {
              pkg = "sensor";
              version = "0.1.7";
              sha256 =
                "6cda2ae69ee189a6a03fac2d40bcd458e6ef8b8a95777a9c8470a334d80009b7";
            };

            meta = {
              description = ''An OTP application for interacting with hardware
                            sensors'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jmedding/sensor";
            };
          } // packageOverrides)
      ) {};

    sensor = sensor_0_1_7;

    sentient_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_1_5_2 }:
          buildMix ({
            name = "sentient";
            version = "0.0.2";
            src = fetchHex {
              pkg = "sentient";
              version = "0.0.2";
              sha256 =
                "fb752b01c2eb4a729cbe8b8301acca5bcb75a242f12819b6a56f3be3c877c3ec";
            };
            beamDeps  = [ poison_1_5_2 ];

            meta = {
              description = ''Simple sentiment analysis based on the AFINN-111
                            wordlist'';

            };
          } // packageOverrides)
      ) {};

    sentient = sentient_0_0_2;

    sentinel_2_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          bamboo_1_0_0_rc_1,
          comeonin_2_6_0,
          cowboy_1_1_2,
          ecto_2_1_4,
          guardian_0_14_4,
          guardian_db_0_8_0,
          jose_1_8_4,
          phoenix_1_3_0_rc_2,
          phoenix_ecto_3_2_3,
          phoenix_html_2_9_3,
          postgrex_1_0_0_rc_1,
          secure_random_0_5_1,
          ueberauth_0_4_0,
          ueberauth_identity_0_2_3
        }:
          buildMix ({
            name = "sentinel";
            version = "2.0.1";
            src = fetchHex {
              pkg = "sentinel";
              version = "2.0.1";
              sha256 =
                "b0cd1a94ba64b67eba0885fe970d33589235a4d4f44f42485638318a821cd7f7";
            };
            beamDeps  = [
                          bamboo_1_0_0_rc_1
                          comeonin_2_6_0
                          cowboy_1_1_2
                          ecto_2_1_4
                          guardian_0_14_4
                          guardian_db_0_8_0
                          jose_1_8_4
                          phoenix_1_3_0_rc_2
                          phoenix_ecto_3_2_3
                          phoenix_html_2_9_3
                          postgrex_1_0_0_rc_1
                          secure_random_0_5_1
                          ueberauth_0_4_0
                          ueberauth_identity_0_2_3
                        ];

            meta = {
              longDescription = ''Adds helpful extras to Guardian like default
                                mailer support, as well as out of the box
                                controllers and routes'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/britton-jb/sentinel";
            };
          } // packageOverrides)
      ) {};

    sentinel = sentinel_2_0_1;

    sentix_1_0_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cachex_2_1_0,
          erlexec_1_2_2
        }:
          buildMix ({
            name = "sentix";
            version = "1.0.3";
            src = fetchHex {
              pkg = "sentix";
              version = "1.0.3";
              sha256 =
                "b533960fdfb9157bf4c223e052ef719cd176322ec4cb8bdda459fa0e3d44152c";
            };
            beamDeps  = [ cachex_2_1_0 erlexec_1_2_2 ];

            meta = {
              description = ''A cross-platform file watcher for Elixir based on
                            fswatch'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zackehh/sentix";
            };
          } // packageOverrides)
      ) {};

    sentix = sentix_1_0_3;

    sentry_4_0_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_3_0,
          plug_1_3_5,
          poison_1_0_2,
          uuid_1_1_7
        }:
          buildMix ({
            name = "sentry";
            version = "4.0.3";
            src = fetchHex {
              pkg = "sentry";
              version = "4.0.3";
              sha256 =
                "0c9a45ffbe7f4d988dcd2703f0309503a84867157269fc47c227b71164d75a33";
            };
            beamDeps  = [ hackney_1_3_0 plug_1_3_5 poison_1_0_2 uuid_1_1_7 ];

            meta = {
              description = ''The Official Elixir client for Sentry'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/getsentry/sentry-elixir";
            };
          } // packageOverrides)
      ) {};

    sentry = sentry_4_0_3;

    sentry_elixir_0_0_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          fuse_2_4_0,
          hackney_1_6_6,
          plug_1_3_5,
          poison_1_0_2,
          uuid_1_1_7
        }:
          buildMix ({
            name = "sentry_elixir";
            version = "0.0.4";
            src = fetchHex {
              pkg = "sentry_elixir";
              version = "0.0.4";
              sha256 =
                "6fc9666a56cf519a5651a2433ec9251bc1f4bee3109f3f446a121d629c7d1e01";
            };
            beamDeps  = [
                          fuse_2_4_0
                          hackney_1_6_6
                          plug_1_3_5
                          poison_1_0_2
                          uuid_1_1_7
                        ];

            meta = {
              description = ''An Elixir client for Sentry'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/getsentry/sentry_elixir";
            };
          } // packageOverrides)
      ) {};

    sentry_elixir = sentry_elixir_0_0_4;

    sentry_logger_backend_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, sentry_4_0_3 }:
          buildMix ({
            name = "sentry_logger_backend";
            version = "0.1.1";
            src = fetchHex {
              pkg = "sentry_logger_backend";
              version = "0.1.1";
              sha256 =
                "b6db461a58d5e8e005e5e325bd6872f5082bc2c612cf284054ac578269497d9e";
            };
            beamDeps  = [ sentry_4_0_3 ];

            meta = {
              longDescription = ''Provides a `Logger` backend for Sentry, to
                                automatically submit Logger events above a
                                configurable threshold to Sentry'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/simonwoolf/sentry-logger-backend";
            };
          } // packageOverrides)
      ) {};

    sentry_logger_backend = sentry_logger_backend_0_1_1;

    sequences_1_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          math_0_3_0,
          ratio_1_2_9
        }:
          buildMix ({
            name = "sequences";
            version = "1.2.0";
            src = fetchHex {
              pkg = "sequences";
              version = "1.2.0";
              sha256 =
                "a226fdb48242989517dfaa0860bc98dede93ddece3f98157c56d5abbbbd020a4";
            };
            beamDeps  = [ math_0_3_0 ratio_1_2_9 ];

            meta = {
              longDescription = ''The Sequences module defines multiple methods
                                that return a Stream of numbers, usually
                                integers. The different Streams can be tapped in
                                on-demand, by running any `Enum` function on
                                them. For efficiency, these sequences are
                                calculated in a way that re-uses previously
                                calculated results whenever possible. List of
                                included sequences: •
                                Sequences.integers(start, step): a helper
                                function to create any kind of lazy integer
                                sequence with a regular step distance. •
                                Sequences.integers •
                                Sequences.positive_integers •
                                Sequences.odd_integers •
                                Sequences.even_integers • Sequences.zeroes •
                                Sequences.ones • Sequences.factorials •
                                Sequences.fibonacci • Sequences.catalan •
                                Sequences.triangular • Sequences.primes •
                                Sequences.squareroot_tuple(n): Returns a tuple
                                with an integer part (single integer number) and
                                decimal part (digit stream) •
                                Sequences.squareroot_tuple(n, num_of_digits):
                                Returns a tuple with an integer part (single
                                integer number) and decimal part (digit list
                                with given length) •
                                Sequences.squareroot_decimals(n): Returns
                                decimal stream of the decimal expansion of a
                                square root. •
                                Sequences.squareroot_expansion/1: Returns a
                                digit stream of the decimal expansion of a
                                square root, including the digits of the
                                integral part at the front.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Qqwy/elixir-sequences";
            };
          } // packageOverrides)
      ) {};

    sequences = sequences_1_2_0;

    serial_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "serial";
            version = "0.1.2";
            src = fetchHex {
              pkg = "serial";
              version = "0.1.2";
              sha256 =
                "c0aed287f565b7ce1e1091a6a3dd08fd99bf0884c81b53ecf978c502ef652231";
            };

            meta = {
              description = ''Serial communication through Elixir ports'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/bitgamma/elixir_serial";
            };
          } // packageOverrides)
      ) {};

    serial = serial_0_1_2;

    seriex_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "seriex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "seriex";
              version = "0.1.0";
              sha256 =
                "980a3dcc8f73a79619dfdb6575880441ad848484855cd8c4525358427368fd6a";
            };

            meta = {
              description = ''Elixir library for date and time series.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/smart-commut/seriex";
            };
          } // packageOverrides)
      ) {};

    seriex = seriex_0_1_0;

    sersock_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, baud_0_4_1 }:
          buildMix ({
            name = "sersock";
            version = "0.1.0";
            src = fetchHex {
              pkg = "sersock";
              version = "0.1.0";
              sha256 =
                "d06f657873528edbe661cff0db35cd6bc80d347c6da575980b26cbb860e6654c";
            };
            beamDeps  = [ baud_0_4_1 ];

            meta = {
              description = ''Serial port to socket exporter.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/samuelventura/sersock/";
            };
          } // packageOverrides)
      ) {};

    sersock = sersock_0_1_0;

    serve_this_1_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          plug_1_3_5
        }:
          buildMix ({
            name = "serve_this";
            version = "1.0.1";
            src = fetchHex {
              pkg = "serve_this";
              version = "1.0.1";
              sha256 =
                "c5fdfda0fcbdcb33f94538e3c23d4a45361c0b5b00dcd0b5f8d9a76eb58df175";
            };
            beamDeps  = [ cowboy_1_1_2 plug_1_3_5 ];

            meta = {
              description = ''An escript that serves the current directory over
                            HTTP.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/antipax/serve_this";
            };
          } // packageOverrides)
      ) {};

    serve_this = serve_this_1_0_1;

    server_sent_event_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "server_sent_event";
            version = "0.2.0";
            src = fetchHex {
              pkg = "server_sent_event";
              version = "0.2.0";
              sha256 =
                "6a20c2acaf67f758b45d1dab134ee364be251e34b58df4422448ed6765ee327f";
            };

            meta = {
              description = ''Push updates to Web clients over HTTP or using
                            dedicated server-push protocols.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/CrowdHailer/raxx/tree/master/server_sent_event";
            };
          } // packageOverrides)
      ) {};

    server_sent_event = server_sent_event_0_2_0;

    service_1_5_1 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, cloudi_core_1_5_4
        }:
          buildRebar3 ({
            name = "service";
            version = "1.5.1";
            src = fetchHex {
              pkg = "service";
              version = "1.5.1";
              sha256 =
                "283d29bee5e2170a08c1eccb87f89368e9ce831cc52fb0715ed811f43847d2f8";
            };

            beamDeps  = [ cloudi_core_1_5_4 ];

            meta = {
              description = ''Erlang/Elixir Cloud Framework Service Behavior'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "http://cloudi.org";
            };
          } // packageOverrides)
      ) {};

    service = service_1_5_1;

    servito_0_0_10 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_0_4,
          exjsx_3_2_1,
          sweet_xml_0_6_5,
          xml_builder_0_0_9
        }:
          buildMix ({
            name = "servito";
            version = "0.0.10";
            src = fetchHex {
              pkg = "servito";
              version = "0.0.10";
              sha256 =
                "3911b8e358166161415f45f0259608daa2ed92ed22c88b0ef861634c60ece897";
            };
            beamDeps  = [
                          cowboy_1_0_4
                          exjsx_3_2_1
                          sweet_xml_0_6_5
                          xml_builder_0_0_9
                        ];

            meta = {
              description = ''Launches HTTP servers for testing'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/marcelog/servito";
            };
          } // packageOverrides)
      ) {};

    servito = servito_0_0_10;

    sesamex_0_2_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          comeonin_2_6_0,
          ecto_2_1_4,
          inflex_1_7_0,
          loki_1_2_2,
          phoenix_1_3_0_rc_2
        }:
          buildMix ({
            name = "sesamex";
            version = "0.2.1";
            src = fetchHex {
              pkg = "sesamex";
              version = "0.2.1";
              sha256 =
                "89a039844aecb9cc93d768ee11f81e4ee5ebd57001a25ea51a899d790c8a7831";
            };
            beamDeps  = [
                          comeonin_2_6_0
                          ecto_2_1_4
                          inflex_1_7_0
                          loki_1_2_2
                          phoenix_1_3_0_rc_2
                        ];

            meta = {
              description = ''Sesamex is a simple and flexible authentication
                            solution for Elixir / Phoenix.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/khusnetdinov/sesamex";
            };
          } // packageOverrides)
      ) {};

    sesamex = sesamex_0_2_1;

    session_header_plug_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, plug_1_3_5 }:
          buildMix ({
            name = "session_header_plug";
            version = "0.1.0";
            src = fetchHex {
              pkg = "session_header_plug";
              version = "0.1.0";
              sha256 =
                "7719c0de2273e85f9967ff92cf8f93a96f634dbf9a2b75a9460de77808049195";
            };
            beamDeps  = [ plug_1_3_5 ];

            meta = {
              description = ''A plug to handle session headers and session
                            stores'';
              license = stdenv.lib.licenses.free;
              homepage =
                "https://github.com/endersstocker/session-header-plug";
            };
          } // packageOverrides)
      ) {};

    session_header_plug = session_header_plug_0_1_0;

    session_server_store_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "session_server_store";
            version = "0.1.0";
            src = fetchHex {
              pkg = "session_server_store";
              version = "0.1.0";
              sha256 =
                "5011236e77f3724f0ee460bb11e59c6a442164809f66155e157335fcf582fdff";
            };

            meta = {
              description = ''A server-side session store'';
              license = stdenv.lib.licenses.free;
              homepage =
                "https://github.com/endersstocker/session-server-store";
            };
          } // packageOverrides)
      ) {};

    session_server_store = session_server_store_0_1_0;

    set_locale_0_2_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          gettext_0_13_1,
          phoenix_1_1_9
        }:
          buildMix ({
            name = "set_locale";
            version = "0.2.2";
            src = fetchHex {
              pkg = "set_locale";
              version = "0.2.2";
              sha256 =
                "a9755bc8c8e93c5a20474b543d0bb5978f49aeaebcde8a6191823ef19cc682f6";
            };
            beamDeps  = [ gettext_0_13_1 phoenix_1_1_9 ];

            meta = {
              longDescription = ''A Phoenix Plug to help with supporting I18n
                                routes
                                (http://www.example.org/de-at/foo/bar/az). Will
                                also set Gettext to the requested locale used in
                                the url when supported by your Gettext.'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/smeevil/set_locale";
            };
          } // packageOverrides)
      ) {};

    set_locale = set_locale_0_2_2;

    setaria_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, pot_0_9_5 }:
          buildMix ({
            name = "setaria";
            version = "0.2.0";
            src = fetchHex {
              pkg = "setaria";
              version = "0.2.0";
              sha256 =
                "f5e3751903689c992d13804f6ed58281cfefae2861cb657afba71b6310848a9d";
            };
            beamDeps  = [ pot_0_9_5 ];

            meta = {
              description = ''Setaria is OATH One Time Passwords Library for
                            Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ritou/elixir-setaria";
            };
          } // packageOverrides)
      ) {};

    setaria = setaria_0_2_0;

    setup_1_7_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "setup";
            version = "1.7.0";
            src = fetchHex {
              pkg = "setup";
              version = "1.7.0";
              sha256 =
                "50d9cd7862d15812d2fd96a688bd70d6b7df88bbbf42cab9f010bb0fd5c91baa";
            };

            meta = {
              description = ''Generic setup application for Erlang-based
                            systems'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/uwiger/setup";
            };
          } // packageOverrides)
      ) {};

    setup_1_8_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "setup";
            version = "1.8.1";
            src = fetchHex {
              pkg = "setup";
              version = "1.8.1";
              sha256 =
                "003c54f750cb4df445bb28efa89f742f1f7ed0cb1bf37b1430644a4b512529ea";
            };

            meta = {
              description = ''Generic setup application for Erlang-based
                            systems'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/uwiger/setup";
            };
          } // packageOverrides)
      ) {};

    setup = setup_1_8_1;

    setup_tag_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "setup_tag";
            version = "0.1.2";
            src = fetchHex {
              pkg = "setup_tag";
              version = "0.1.2";
              sha256 =
                "48fd7fa0e8d879bfee7d8ee4b5dd4c865478c855a8163ce2aa80242b972bf890";
            };

            meta = {
              description = ''Mix and match reusable test context by using
                            tags'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/vic/setup_tag";
            };
          } // packageOverrides)
      ) {};

    setup_tag = setup_tag_0_1_2;

    sext_1_4_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "sext";
            version = "1.4.0";
            src = fetchHex {
              pkg = "sext";
              version = "1.4.0";
              sha256 =
                "5d4867e6b3922739dc2ba95072ea8551c5be44c85d7138c582da955b5db0449f";
            };

            meta = {
              description = ''Sortable serialization library'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/uwiger/sext";
            };
          } // packageOverrides)
      ) {};

    sext = sext_1_4_0;

    sf_transform_0_3_0 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, parse_trans_3_0_0
        }:
          buildRebar3 ({
            name = "sf_transform";
            version = "0.3.0";
            src = fetchHex {
              pkg = "sf_transform";
              version = "0.3.0";
              sha256 =
                "d75438b1ea53cf9eaa4064fd95eec62adb3afdfec77eec8f4acdaaa05a6d4168";
            };

            beamDeps  = [ parse_trans_3_0_0 ];

            meta = {
              description = ''compile short filename transform'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/feng19/sf_transform";
            };
          } // packageOverrides)
      ) {};

    sf_transform = sf_transform_0_3_0;

    sfmt_0_12_7 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "sfmt";
            version = "0.12.7";
            src = fetchHex {
              pkg = "sfmt";
              version = "0.12.7";
              sha256 =
                "4e295f5053b4a525c00b990cd88b38e492716e7e0c62abf0c626d9fea0ba800e";
            };

            meta = {
              description = ''SIMD-oriented Fast Mersenne Twister (SFMT) for
                            Erlang.'';
              license = stdenv.lib.licenses.bsd2;
              homepage = "https://github.com/jj1bdx/sfmt-erlang/";
            };
          } // packageOverrides)
      ) {};

    sfmt_0_13_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "sfmt";
            version = "0.13.0";
            src = fetchHex {
              pkg = "sfmt";
              version = "0.13.0";
              sha256 =
                "aaacd4824f2b3e439d360bcce6079863da1e7f564014602e9e7815f8740b6358";
            };

            meta = {
              description = ''SIMD-oriented Fast Mersenne Twister (SFMT) for
                            Erlang.'';
              license = stdenv.lib.licenses.bsd2;
              homepage = "https://github.com/jj1bdx/sfmt-erlang/";
            };
          } // packageOverrides)
      ) {};

    sfmt = sfmt_0_13_0;

    sfsobject_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "sfsobject";
            version = "0.0.3";
            src = fetchHex {
              pkg = "sfsobject";
              version = "0.0.3";
              sha256 =
                "fa30bf41d426d7dc899bd038ca44daf32c93e55452cfd0dc141eb6ded6d85f3c";
            };

            meta = {
              description = ''Encode/decode SFSObjects'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/splattael/sfsobject";
            };
          } // packageOverrides)
      ) {};

    sfsobject = sfsobject_0_0_3;

    sftp_ex_0_2_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "sftp_ex";
            version = "0.2.2";
            src = fetchHex {
              pkg = "sftp_ex";
              version = "0.2.2";
              sha256 =
                "9cd76a09f042b47596c485f435bf9e861d6a5a0a89e378135f7bf5c98ef61dfc";
            };

            meta = {
              description = ''A simple SFTP Elixir library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mikejdorm/sftp_ex";
            };
          } // packageOverrides)
      ) {};

    sftp_ex = sftp_ex_0_2_2;

    sgi_0_6_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "sgi";
            version = "0.6.0";
            src = fetchHex {
              pkg = "sgi";
              version = "0.6.0";
              sha256 =
                "781167f55890f4f9979c1b71a6f92ff82264afc6c6cd2d4c41d3980c70295a69";
            };

            meta = {
              description = ''Socket Gateway Interface'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/AstRonin/sgi";
            };
          } // packageOverrides)
      ) {};

    sgi = sgi_0_6_0;

    sh_1_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "sh";
            version = "1.1.2";
            src = fetchHex {
              pkg = "sh";
              version = "1.1.2";
              sha256 =
                "78ec787a58d546ae915073978e9ad21a7b3e6187fb5b9c93922e6435542ae4c5";
            };

            meta = {
              description = ''Run programs as functions in Elixir'';
              license = stdenv.lib.licenses.unlicense;
              homepage = "https://github.com/devinus/sh";
            };
          } // packageOverrides)
      ) {};

    sh = sh_1_1_2;

    sha3_2_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, hex2bin_1_0_0 }:
          buildRebar3 ({
            name = "sha3";
            version = "2.0.0";
            src = fetchHex {
              pkg = "sha3";
              version = "2.0.0";
              sha256 =
                "ce303b54df12629b1f55ce7b2c4a6ed55b503b2e783ec5acba9251c3eab05d6d";
            };
            compilePorts = true;

            beamDeps  = [ hex2bin_1_0_0 ];

            meta = {
              description = ''FIPS-202 compliant SHA-3 hash function NIF'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/aesedepece/sha3";
            };
          } // packageOverrides)
      ) {};

    sha3 = sha3_2_0_0;

    shackle_0_5_0 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          granderl_0_1_5,
          metal_0_1_0
        }:
          buildRebar3 ({
            name = "shackle";
            version = "0.5.0";
            src = fetchHex {
              pkg = "shackle";
              version = "0.5.0";
              sha256 =
                "af2610fc95022a1054266dab5ef683dfcdc3e434d6d043ae7102b0770d60349d";
            };

            beamDeps  = [ granderl_0_1_5 metal_0_1_0 ];

            meta = {
              description = ''High-Performance Erlang Network Client
                            Framework'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lpgauth/shackle";
            };
          } // packageOverrides)
      ) {};

    shackle_0_5_1 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          granderl_0_1_5,
          metal_0_1_0
        }:
          buildRebar3 ({
            name = "shackle";
            version = "0.5.1";
            src = fetchHex {
              pkg = "shackle";
              version = "0.5.1";
              sha256 =
                "78f1a8f6a0683825fc0a03fa1411406b5507569fe8c41382ede9fbe2e7afdae7";
            };

            beamDeps  = [ granderl_0_1_5 metal_0_1_0 ];

            meta = {
              description = ''High-Performance Erlang Network Client
                            Framework'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lpgauth/shackle";
            };
          } // packageOverrides)
      ) {};

    shackle = shackle_0_5_1;

    shameless_plug_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, plug_1_3_5 }:
          buildMix ({
            name = "shameless_plug";
            version = "1.0.0";
            src = fetchHex {
              pkg = "shameless_plug";
              version = "1.0.0";
              sha256 =
                "65c8af34d1853e85c8412d6ca15fd39354668c09c124cbc8e35cffea59d3a617";
            };
            beamDeps  = [ plug_1_3_5 ];

            meta = {
              description = ''A novelty Plug to remove the word \"shame\" from
                            the page body.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/henrik/shameless_plug";
            };
          } // packageOverrides)
      ) {};

    shameless_plug = shameless_plug_1_0_0;

    shape_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "shape";
            version = "0.0.2";
            src = fetchHex {
              pkg = "shape";
              version = "0.0.2";
              sha256 =
                "c2e990b68f3423110109bf7e6bbebe8c10307bb28778ebcf9f7d6e0b8dc854f2";
            };

            meta = {
              description = ''A data validation library for Elixir based on
                            Prismatoc Scheme'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/prio/shape";
            };
          } // packageOverrides)
      ) {};

    shape = shape_0_0_2;

    shards_0_4_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "shards";
            version = "0.4.3";
            src = fetchHex {
              pkg = "shards";
              version = "0.4.3";
              sha256 =
                "a522442d5993294abd8a8cf6419654691e70726c788587e0bd252f3452fa2dd5";
            };

            meta = {
              description = ''ETS with Sharding support.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cabol/shards";
            };
          } // packageOverrides)
      ) {};

    shards = shards_0_4_3;

    sheldon_0_1_3 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          emarkdown_0_1_0,
          worker_pool_2_2_3
        }:
          buildRebar3 ({
            name = "sheldon";
            version = "0.1.3";
            src = fetchHex {
              pkg = "sheldon";
              version = "0.1.3";
              sha256 =
                "e3ccf154a0bd121d861c3f8c23dbb7a5ed69733ba8641878d42646f25374ce8c";
            };

            beamDeps  = [ emarkdown_0_1_0 worker_pool_2_2_3 ];

            meta = {
              description = ''Very Simple Erlang Spell Checker'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/inaka/sheldon";
            };
          } // packageOverrides)
      ) {};

    sheldon = sheldon_0_1_3;

    shell_stream_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "shell_stream";
            version = "0.0.1";
            src = fetchHex {
              pkg = "shell_stream";
              version = "0.0.1";
              sha256 =
                "0811d1b2b1cfca5bbbf09bdf79d4e823bf6b490f5e52f289b8554a9a248a7e30";
            };

            meta = {
              longDescription = ''Library that exposes a single function (and
                                sigil) for running shell commands and returning
                                a stream which generates an element for every
                                line of the command output.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/aleandros/shell_stream";
            };
          } // packageOverrides)
      ) {};

    shell_stream = shell_stream_0_0_1;

    shenu_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          calendar_0_14_2,
          color_utils_0_2_0,
          ex_json_schema_0_5_5,
          geocalc_0_5_4,
          poison_2_1_0,
          the_fuzz_0_3_0,
          yahoo_fx_0_2_0
        }:
          buildMix ({
            name = "shenu";
            version = "0.1.0";
            src = fetchHex {
              pkg = "shenu";
              version = "0.1.0";
              sha256 =
                "c43390f5954fd3b87ab77ede6f0f46296b8d6d6867b99fa8665a0cd23d66e505";
            };
            beamDeps  = [
                          calendar_0_14_2
                          color_utils_0_2_0
                          ex_json_schema_0_5_5
                          geocalc_0_5_4
                          poison_2_1_0
                          the_fuzz_0_3_0
                          yahoo_fx_0_2_0
                        ];

            meta = {
              description = ''set of utilities for parsing, validating, and
                            diffing messages'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/camshaft/shenu";
            };
          } // packageOverrides)
      ) {};

    shenu = shenu_0_1_0;

    sheriff_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, plug_1_2_5 }:
          buildMix ({
            name = "sheriff";
            version = "0.3.0";
            src = fetchHex {
              pkg = "sheriff";
              version = "0.3.0";
              sha256 =
                "07ff8a1868c076c8e9ca74ef5af9c3cb7ee62dce0ac56008d0554dd71291892b";
            };
            beamDeps  = [ plug_1_2_5 ];

            meta = {
              description = ''Build simple and robust authorization systems
                            with Elixir and Plug.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/doomspork/sheriff";
            };
          } // packageOverrides)
      ) {};

    sheriff = sheriff_0_3_0;

    shield_0_6_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          authable_0_8_0,
          cors_plug_1_1_4,
          cowboy_1_0_4,
          gettext_0_13_1,
          phoenix_1_3_0_rc_2,
          phoenix_ecto_3_2_3,
          poison_1_0_2,
          shield_notifier_0_2_0
        }:
          buildMix ({
            name = "shield";
            version = "0.6.0";
            src = fetchHex {
              pkg = "shield";
              version = "0.6.0";
              sha256 =
                "a4d1756e539d78db47b9abca231b88e1f2d396c8630d5b4e8053c7310f72562f";
            };
            beamDeps  = [
                          authable_0_8_0
                          cors_plug_1_1_4
                          cowboy_1_0_4
                          gettext_0_13_1
                          phoenix_1_3_0_rc_2
                          phoenix_ecto_3_2_3
                          poison_1_0_2
                          shield_notifier_0_2_0
                        ];

            meta = {
              longDescription = ''Shield is an OAuth2 Provider hex package and
                                also a standalone microservice build top of the
                                Phoenix Framework and `authable` package.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mustafaturan/shield";
            };
          } // packageOverrides)
      ) {};

    shield = shield_0_6_0;

    shield_notifier_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, bamboo_0_4_2 }:
          buildMix ({
            name = "shield_notifier";
            version = "0.2.0";
            src = fetchHex {
              pkg = "shield_notifier";
              version = "0.2.0";
              sha256 =
                "b37063676303bc97ce4b3ba5e5c78c6507472de7311c79a9baf8220a001522e8";
            };
            beamDeps  = [ bamboo_0_4_2 ];

            meta = {
              description = ''Shield.Notifier is an external package for Shield
                            package notifications.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mustafaturan/shield_notifier";
            };
          } // packageOverrides)
      ) {};

    shield_notifier = shield_notifier_0_2_0;

    shippex_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          decimal_1_3_1,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "shippex";
            version = "0.2.0";
            src = fetchHex {
              pkg = "shippex";
              version = "0.2.0";
              sha256 =
                "cdf2e378a93496858a4b66b80c0747e8af8a6bc5b0ea8153bd877d23d47dc362";
            };
            beamDeps  = [ decimal_1_3_1 httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              longDescription = ''Shippex is an abstraction of commonly used
                                features in shipping with various carriers. It
                                provides a (hopefully) pleasant API to work with
                                carrier- provided web interfaces for fetching
                                rates and printing shipping labels.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/whitepaperclip/shippex";
            };
          } // packageOverrides)
      ) {};

    shippex = shippex_0_2_0;

    shipstation_0_3_7 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_2_2_0,
          timex_3_1_15
        }:
          buildMix ({
            name = "shipstation";
            version = "0.3.7";
            src = fetchHex {
              pkg = "shipstation";
              version = "0.3.7";
              sha256 =
                "484b71cd8cc265be6c8475cd16344e81c246075b9ba877024933fcfdff4284e6";
            };
            beamDeps  = [ httpoison_0_11_2 poison_2_2_0 timex_3_1_15 ];

            meta = {
              description = ''An elixir client library for shipstation'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/johnhamelink/shipstation";
            };
          } // packageOverrides)
      ) {};

    shipstation = shipstation_0_3_7;

    shopify_0_1_6 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_10_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "shopify";
            version = "0.1.6";
            src = fetchHex {
              pkg = "shopify";
              version = "0.1.6";
              sha256 =
                "ae964d1febfee515831f5e31b8d33698d78c967f8756653761fe822c20540bd4";
            };
            beamDeps  = [ httpoison_0_10_0 poison_3_1_0 ];

            meta = {
              description = ''An Elixir Shopify API client. Work in
                            progress.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nsweeting/shopify";
            };
          } // packageOverrides)
      ) {};

    shopify = shopify_0_1_6;

    short_maps_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "short_maps";
            version = "0.1.2";
            src = fetchHex {
              pkg = "short_maps";
              version = "0.1.2";
              sha256 =
                "8147a645e2f518c857178f10361e98c4488bdbaa4d96a280cb13c1d3c0ce7142";
            };

            meta = {
              description = ''Implementation of a ~m sigil for ES6-like maps in
                            Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/whatyouhide/short_maps";
            };
          } // packageOverrides)
      ) {};

    short_maps = short_maps_0_1_2;

    shorter_maps_1_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "shorter_maps";
            version = "1.2.0";
            src = fetchHex {
              pkg = "shorter_maps";
              version = "1.2.0";
              sha256 =
                "ba43e31fd25745c6193ca8af7def203e6daebbc9c489d8399a5e40cc1f44f766";
            };

            meta = {
              description = ''~M sigil for map shorthand. `~M{id, name} ~>
                            %{id: id, name: name}`'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/meyercm/shorter_maps";
            };
          } // packageOverrides)
      ) {};

    shorter_maps_2_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "shorter_maps";
            version = "2.1.0";
            src = fetchHex {
              pkg = "shorter_maps";
              version = "2.1.0";
              sha256 =
                "719f3852d727595fdb339fa34eb067d91e5a5c0f34d54a3fb40ece8e54a70e1e";
            };

            meta = {
              description = ''~M sigil for map shorthand. `~M{id, name} ~>
                            %{id: id, name: name}`'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/meyercm/shorter_maps";
            };
          } // packageOverrides)
      ) {};

    shorter_maps = shorter_maps_2_1_0;

    shotgun_0_3_0 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, gun_1_0_0_pre_1
        }:
          buildRebar3 ({
            name = "shotgun";
            version = "0.3.0";
            src = fetchHex {
              pkg = "shotgun";
              version = "0.3.0";
              sha256 =
                "da00cc1a6359333bc024ce458c76b0bbd16b582d140080536b14c602c7455cfd";
            };

            beamDeps  = [ gun_1_0_0_pre_1 ];

            meta = {
              description = ''better than just a gun'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/inaka/shotgun";
            };
          } // packageOverrides)
      ) {};

    shotgun = shotgun_0_3_0;

    shouldi_0_3_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "shouldi";
            version = "0.3.2";
            src = fetchHex {
              pkg = "shouldi";
              version = "0.3.2";
              sha256 =
                "9fb225db7fd5ce77b457295aec318149e57d30aad83b70ceef4a0c112d22bcc8";
            };

            meta = {
              description = ''Elixir testing libraries with support for nested
                            contexts'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/batate/shouldi";
            };
          } // packageOverrides)
      ) {};

    shouldi = shouldi_0_3_2;

    shove_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          poison_1_5_2,
          poolboy_1_5_1
        }:
          buildMix ({
            name = "shove";
            version = "0.0.1";
            src = fetchHex {
              pkg = "shove";
              version = "0.0.1";
              sha256 =
                "48c7db56f6df92c8cd50ff5cfc73ce12d843e257991af6c3d4762f8af50bd87f";
            };
            beamDeps  = [ poison_1_5_2 poolboy_1_5_1 ];

            meta = {
              description = ''Push notifications for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bratsche/shove";
            };
          } // packageOverrides)
      ) {};

    shove = shove_0_0_1;

    shrivel_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "shrivel";
            version = "0.0.3";
            src = fetchHex {
              pkg = "shrivel";
              version = "0.0.3";
              sha256 =
                "c2a4874eed97044fe2bfa5e871f188a191b4042e72a6156cfd50c7c0d8296dbf";
            };

            meta = {
              description = ''URL shortener'';

              homepage = "https://github.com/Qeaql/shrivel";
            };
          } // packageOverrides)
      ) {};

    shrivel = shrivel_0_0_3;

    sht31gs_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, elixir_ale_0_6_2 }:
          buildMix ({
            name = "sht31gs";
            version = "0.1.1";
            src = fetchHex {
              pkg = "sht31gs";
              version = "0.1.1";
              sha256 =
                "5aa947cc2f8ebf656fb63eb8805b4f4906955379c47be437f8d8a42c41a90acd";
            };
            beamDeps  = [ elixir_ale_0_6_2 ];

            meta = {
              longDescription = ''An application to demonstrate how one might
                                write an OTP-compliant GenServer Application for
                                an IoT device accessed with ElixirALE'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/elixir-luthier/sht31gs";
            };
          } // packageOverrides)
      ) {};

    sht31gs = sht31gs_0_1_1;

    siariwyd_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "siariwyd";
            version = "0.2.0";
            src = fetchHex {
              pkg = "siariwyd";
              version = "0.2.0";
              sha256 =
                "b6e92aa43905acac39ed0385a956c2b5018f3ff621341c7771ed53d12eb27a61";
            };

            meta = {
              longDescription = ''Siariwyd: Sharing and Reusing Functions`
                                Implementations that must be compiled
                                together.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ianrumford/siariwyd";
            };
          } // packageOverrides)
      ) {};

    siariwyd = siariwyd_0_2_0;

    side_effect_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "side_effect";
            version = "0.1.0";
            src = fetchHex {
              pkg = "side_effect";
              version = "0.1.0";
              sha256 =
                "fdf24d093f548cfb85a56bb476a6285a7ffa1e2de421a745bf2c8f43e0d2dde2";
            };

            meta = {
              description = ''simple utils for making side effect calls in
                            pipelines'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/princemaple/elixir-side-effect";
            };
          } // packageOverrides)
      ) {};

    side_effect = side_effect_0_1_0;

    sidejob_2_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "sidejob";
            version = "2.0.0";
            src = fetchHex {
              pkg = "sidejob";
              version = "2.0.0";
              sha256 =
                "19fea24060a1d0d37e78480fbd79d6b95e07f445aad725f7124a23194641c743";
            };

            meta = {
              longDescription = ''sidejob is an Erlang library that implements
                                a parallel, capacity-limited request pool. In
                                sidejob, these pools are called resources. A
                                resource is managed by multiple gen_server like
                                processes which can be sent calls and casts
                                using sidejob:call or sidejob:cast
                                respectively.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/erlangpack/sidejob";
            };
          } // packageOverrides)
      ) {};

    sidejob = sidejob_2_0_0;

    sideshow_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          gen_fsm_0_0_4,
          tachometer_0_1_1
        }:
          buildMix ({
            name = "sideshow";
            version = "0.0.2";
            src = fetchHex {
              pkg = "sideshow";
              version = "0.0.2";
              sha256 =
                "74e2ed7416f8cfeefaf7af6141cae8e48a2d2d27631bd7c97ab9387ae5f54645";
            };
            beamDeps  = [ gen_fsm_0_0_4 tachometer_0_1_1 ];

            meta = {
              description = ''Background jobs OTP style'';
              license = stdenv.lib.licenses.gpl3;
              homepage = "https://github.com/pavlos/sideshow";
            };
          } // packageOverrides)
      ) {};

    sideshow = sideshow_0_0_2;

    sidetask_1_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, sidejob_2_0_0 }:
          buildMix ({
            name = "sidetask";
            version = "1.1.2";
            src = fetchHex {
              pkg = "sidetask";
              version = "1.1.2";
              sha256 =
                "37414514d6e5f25d396d13efa245ed09da6e161582e8b366b30523b407fc3bcf";
            };
            beamDeps  = [ sidejob_2_0_0 ];

            meta = {
              longDescription = ''SideTask is an alternative to Elixir`s
                                Task.Supervisor that uses Basho`s sidejob
                                library for better parallelism and to support
                                capacity limiting of Tasks. All calls that start
                                a new task require a sidejob resource as
                                argument and can return `{:error,
                                :overload}`.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/MSch/sidetask";
            };
          } // packageOverrides)
      ) {};

    sidetask = sidetask_1_1_2;

    sidewalk_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          poison_3_1_0,
          poolboy_1_5_1,
          redix_0_5_2
        }:
          buildMix ({
            name = "sidewalk";
            version = "0.3.0";
            src = fetchHex {
              pkg = "sidewalk";
              version = "0.3.0";
              sha256 =
                "223598886e470d5bc5963ab677b58d4eb037457a487ce66053eb67fb84232cc6";
            };
            beamDeps  = [ poison_3_1_0 poolboy_1_5_1 redix_0_5_2 ];

            meta = {
              longDescription = ''Sidewalk is an Elixir client which is
                                compatible with Sidekiq, the »simple, efficient
                                background processing library for Ruby«.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/railsmechanic/sidewalk";
            };
          } // packageOverrides)
      ) {};

    sidewalk = sidewalk_0_3_0;

    sift_ex_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_9_2,
          poison_1_0_2
        }:
          buildMix ({
            name = "sift_ex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "sift_ex";
              version = "0.1.0";
              sha256 =
                "f7c876522d1acc73d5b401c30c1efa3d0e841f3f2c5dc365e6fb24de818326dd";
            };
            beamDeps  = [ httpoison_0_9_2 poison_1_0_2 ];

            meta = {
              description = ''SiftScience API Library for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/C404/sift_ex";
            };
          } // packageOverrides)
      ) {};

    sift_ex = sift_ex_0_1_0;

    sig_auth_0_1_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          plug_1_3_5,
          shorter_maps_2_1_0
        }:
          buildMix ({
            name = "sig_auth";
            version = "0.1.4";
            src = fetchHex {
              pkg = "sig_auth";
              version = "0.1.4";
              sha256 =
                "f07b4d3e91db31d29f1b24fc2aa59606dcb8d4f35df7fdbf81058e0f83328e94";
            };
            beamDeps  = [ plug_1_3_5 shorter_maps_2_1_0 ];

            meta = {
              description = ''An HTTP API client authentication scheme based on
                            RSA signatures.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/meyercm/sig_auth";
            };
          } // packageOverrides)
      ) {};

    sig_auth = sig_auth_0_1_4;

    sigaws_0_6_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "sigaws";
            version = "0.6.0";
            src = fetchHex {
              pkg = "sigaws";
              version = "0.6.0";
              sha256 =
                "6d4ba0716e6c018da4ce80a91a8c6ddf2736e3cfd0add35a2b208194eb534599";
            };

            meta = {
              description = ''An Elixir library to sign and verify HTTP
                            requests using AWS Signature V4.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/handnot2/sigaws";
            };
          } // packageOverrides)
      ) {};

    sigaws = sigaws_0_6_0;

    sigaws_quickstart_provider_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, sigaws_0_6_0 }:
          buildMix ({
            name = "sigaws_quickstart_provider";
            version = "0.1.1";
            src = fetchHex {
              pkg = "sigaws_quickstart_provider";
              version = "0.1.1";
              sha256 =
                "0893af9fd6b8c914510039dc3fc1b3e627b666d091e69b0f984007af6c04a132";
            };
            beamDeps  = [ sigaws_0_6_0 ];

            meta = {
              longDescription = ''Signature verification provider
                                implementation for Sigaws. This quickstart
                                provider implementation can be used to try out
                                AWS signature verification using `plug_sigaws`
                                Hex package.'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/handnot2/sigaws_quickstart_provider";
            };
          } // packageOverrides)
      ) {};

    sigaws_quickstart_provider = sigaws_quickstart_provider_0_1_1;

    sigma_1_0_6 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          floki_0_9_0,
          httpoison_0_9_2
        }:
          buildMix ({
            name = "sigma";
            version = "1.0.6";
            src = fetchHex {
              pkg = "sigma";
              version = "1.0.6";
              sha256 =
                "8f6ab76363172e9d98246e997481512b02ca72fd3615ba7ecf894b112c38a502";
            };
            beamDeps  = [ floki_0_9_0 httpoison_0_9_2 ];

            meta = {
              longDescription = ''Sigma is an Elixir package that gives you the
                                current status of companies online.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sergiotapia/sigma";
            };
          } // packageOverrides)
      ) {};

    sigma = sigma_1_0_6;

    sign_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ex_doc_0_16_1 }:
          buildMix ({
            name = "sign";
            version = "0.0.1";
            src = fetchHex {
              pkg = "sign";
              version = "0.0.1";
              sha256 =
                "db29344248fc87f9a22b75d793d80a4517685dad5e39ef5f51e9027e8d44c7d3";
            };
            beamDeps  = [ ex_doc_0_16_1 ];

            meta = {
              description = ''Authorization and authentication for Plug backed
                            by Ecto'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    sign = sign_0_0_1;

    signaturex_1_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "signaturex";
            version = "1.1.0";
            src = fetchHex {
              pkg = "signaturex";
              version = "1.1.0";
              sha256 =
                "8184382db52644f9fdf051cc1720328e3a64c9389490a809154c5f787a3e2885";
            };

            meta = {
              description = ''Simple key/secret based authentication for
                            APIs'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/edgurgel/signaturex";
            };
          } // packageOverrides)
      ) {};

    signaturex = signaturex_1_1_0;

    signed_request_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "signed_request";
            version = "0.1.0";
            src = fetchHex {
              pkg = "signed_request";
              version = "0.1.0";
              sha256 =
                "2aa8c666d4e1714c0bb498d5a3f114dc36b7a53ad31d5157d46d055039ddeead";
            };

            meta = {
              description = ''A module for signing request query string with
                            HMAC'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pilu/signed_request";
            };
          } // packageOverrides)
      ) {};

    signed_request = signed_request_0_1_0;

    silent_video_0_2_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ffmpex_0_4_1 }:
          buildMix ({
            name = "silent_video";
            version = "0.2.2";
            src = fetchHex {
              pkg = "silent_video";
              version = "0.2.2";
              sha256 =
                "19ef17b2f38c6cc8fc6cb58b3d443ac2588eb98ba85cc7181ef3be1367af56b1";
            };
            beamDeps  = [ ffmpex_0_4_1 ];

            meta = {
              description = ''Convert GIF and video to silent video.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/talklittle/silent_video";
            };
          } // packageOverrides)
      ) {};

    silent_video = silent_video_0_2_2;

    simetric_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "simetric";
            version = "0.2.0";
            src = fetchHex {
              pkg = "simetric";
              version = "0.2.0";
              sha256 =
                "b43e80abe3d91505bf06d98b1088eb87a0b0281e931c987e35836524be4944fa";
            };

            meta = {
              longDescription = ''This library provides facilities to perform
                                approximate string matching and measurement of
                                string similarity/distance.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/lexmag/simetric";
            };
          } // packageOverrides)
      ) {};

    simetric = simetric_0_2_0;

    simhash_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, siphash_3_1_2 }:
          buildMix ({
            name = "simhash";
            version = "0.1.2";
            src = fetchHex {
              pkg = "simhash";
              version = "0.1.2";
              sha256 =
                "4e37f81b9edc1278a15796283441a4d0e58c5f6813a3d5478ec69c4f487cf2d5";
            };
            beamDeps  = [ siphash_3_1_2 ];

            meta = {
              description = ''Simhash implementation using Siphash and
                            N-grams.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/UniversalAvenue/simhash-ex";
            };
          } // packageOverrides)
      ) {};

    simhash = simhash_0_1_2;

    simplates_0_2_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, mime_1_1_0, plug_1_3_5
        }:
          buildMix ({
            name = "simplates";
            version = "0.2.0";
            src = fetchHex {
              pkg = "simplates";
              version = "0.2.0";
              sha256 =
                "d3cdcd7819b8c097ce54d2dcd43d9e6d8466def38b9926fe0064847131121854";
            };
            beamDeps  = [ mime_1_1_0 plug_1_3_5 ];

            meta = {
              description = ''Simplates are a file format for server-side web
                            programming.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/LawfulGood/simplates";
            };
          } // packageOverrides)
      ) {};

    simplates_0_4_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          floki_0_14_0,
          mime_1_1_0,
          plug_1_3_5,
          sweet_xml_0_6_5
        }:
          buildMix ({
            name = "simplates";
            version = "0.4.1";
            src = fetchHex {
              pkg = "simplates";
              version = "0.4.1";
              sha256 =
                "674c57c360ee552e22f50cca9b1efd31706ff51931836503eeb665e88607254f";
            };
            beamDeps  = [ floki_0_14_0 mime_1_1_0 plug_1_3_5 sweet_xml_0_6_5
                      ];

            meta = {
              description = ''Simplates are a file format for server-side web
                            programming.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/LawfulGood/simplates";
            };
          } // packageOverrides)
      ) {};

    simplates = simplates_0_4_1;

    simple_agent_0_0_7 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "simple_agent";
            version = "0.0.7";
            src = fetchHex {
              pkg = "simple_agent";
              version = "0.0.7";
              sha256 =
                "23532eed173ab8e1a980095c5a1352e41d9f2a149005ed21b9d4f67859603ffe";
            };

            meta = {
              description = ''A simplification/abstraction layer for the Agent
                            module.'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/TheFirstAvenger/elixir-simple_agent.git";
            };
          } // packageOverrides)
      ) {};

    simple_agent = simple_agent_0_0_7;

    simple_bar_0_0_7 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "simple_bar";
            version = "0.0.7";
            src = fetchHex {
              pkg = "simple_bar";
              version = "0.0.7";
              sha256 =
                "68fca76dee6fb1073e613e3498121b6a50739a2786f35d826309c55f55735ae1";
            };

            meta = {
              description = ''The simplest cli progress bar'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jeffreybaird/simple_bar";
            };
          } // packageOverrides)
      ) {};

    simple_bar = simple_bar_0_0_7;

    simple_bayes_0_11_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          decimal_1_3_1,
          math_0_3_0
        }:
          buildMix ({
            name = "simple_bayes";
            version = "0.11.0";
            src = fetchHex {
              pkg = "simple_bayes";
              version = "0.11.0";
              sha256 =
                "3538563e97ba63239e93c1569480f8c16ca3a4b5b4d35213f5d7c97d574b2662";
            };
            beamDeps  = [ decimal_1_3_1 math_0_3_0 ];

            meta = {
              description = ''A Simple Bayes (a.k.a. Naive Bayes)
                            implementation in Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/fredwu/simple_bayes";
            };
          } // packageOverrides)
      ) {};

    simple_bayes = simple_bayes_0_11_0;

    simple_ecto_state_machine_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ecto_2_0_0_rc_6 }:
          buildMix ({
            name = "simple_ecto_state_machine";
            version = "0.2.0";
            src = fetchHex {
              pkg = "simple_ecto_state_machine";
              version = "0.2.0";
              sha256 =
                "1e612354fcf3ffbfea1c0668052585e34f19cbe580a832becf7b3673f6f2a2ec";
            };
            beamDeps  = [ ecto_2_0_0_rc_6 ];

            meta = {
              description = ''A simple state machine compatible with Ecto
                            1.x'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/akiunlocks/simple-ecto-state-machine";
            };
          } // packageOverrides)
      ) {};

    simple_ecto_state_machine = simple_ecto_state_machine_0_2_0;

    simple_format_0_1_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, phoenix_html_2_9_3
        }:
          buildMix ({
            name = "simple_format";
            version = "0.1.0";
            src = fetchHex {
              pkg = "simple_format";
              version = "0.1.0";
              sha256 =
                "747cc74f743f89bcced219282f8639743f679b65183defecc7721f46e31dfcd0";
            };
            beamDeps  = [ phoenix_html_2_9_3 ];

            meta = {
              description = ''Rail`s simple_format helper for Phoenix.HTML'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/michalmuskala/simple_format";
            };
          } // packageOverrides)
      ) {};

    simple_format = simple_format_0_1_0;

    simple_jwt_authentication_0_1_1 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, jose_1_8_4, plug_1_2_5
        }:
          buildMix ({
            name = "simple_jwt_authentication";
            version = "0.1.1";
            src = fetchHex {
              pkg = "simple_jwt_authentication";
              version = "0.1.1";
              sha256 =
                "fa73a245fbd6b6d8e81be9629efac5b84989c03b1a5428e6868f38a8829c402b";
            };
            beamDeps  = [ jose_1_8_4 plug_1_2_5 ];

            meta = {
              description = ''A plug that checks the signature and expiration
                            of a jwt for authentication'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/SRVentures/simple_jwt_authentication";
            };
          } // packageOverrides)
      ) {};

    simple_jwt_authentication = simple_jwt_authentication_0_1_1;

    simple_markdown_0_2_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          html_entities_0_3_0,
          parsey_0_0_2
        }:
          buildMix ({
            name = "simple_markdown";
            version = "0.2.1";
            src = fetchHex {
              pkg = "simple_markdown";
              version = "0.2.1";
              sha256 =
                "961f94ccc199b5b54ad335f4202f066dcd170a332b00eb7a14ae841d4318ba52";
            };
            beamDeps  = [ html_entities_0_3_0 parsey_0_0_2 ];

            meta = {
              description = ''A simple and extendable Markdown converter'';
              license = stdenv.lib.licenses.bsd2;
              homepage = "https://github.com/ScrimpyCat/SimpleMarkdownEx";
            };
          } // packageOverrides)
      ) {};

    simple_markdown_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          html_entities_0_3_0,
          parsey_0_0_2
        }:
          buildMix ({
            name = "simple_markdown";
            version = "0.3.0";
            src = fetchHex {
              pkg = "simple_markdown";
              version = "0.3.0";
              sha256 =
                "0fe683da3b7e6fac5463baaecaa663cc21ff5f16c6ba81569d72d8e5204ecede";
            };
            beamDeps  = [ html_entities_0_3_0 parsey_0_0_2 ];

            meta = {
              description = ''A simple and extendable Markdown converter'';
              license = stdenv.lib.licenses.bsd2;
              homepage = "https://github.com/ScrimpyCat/SimpleMarkdownEx";
            };
          } // packageOverrides)
      ) {};

    simple_markdown = simple_markdown_0_3_0;

    simple_markdown_extension_highlight_js_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          html_entities_0_3_0,
          httpoison_0_11_2,
          simple_markdown_0_2_1
        }:
          buildMix ({
            name = "simple_markdown_extension_highlight_js";
            version = "0.0.1";
            src = fetchHex {
              pkg = "simple_markdown_extension_highlight_js";
              version = "0.0.1";
              sha256 =
                "48a514ed80cc8090c4f5f0815c48261ad5d6cdda45f480e8912bd01dec170c76";
            };
            beamDeps  = [
                          html_entities_0_3_0
                          httpoison_0_11_2
                          simple_markdown_0_2_1
                        ];

            meta = {
              longDescription = ''An extension for SimpleMarkdown to add a
                                renderers for code snippets to add highlighting
                                when using highlight.js.'';
              license = stdenv.lib.licenses.bsd2;
              homepage =
                "https://github.com/ScrimpyCat/SimpleMarkdownExtensionHighlightJS";
            };
          } // packageOverrides)
      ) {};

    simple_markdown_extension_highlight_js =
      simple_markdown_extension_highlight_js_0_0_1;

    simple_markdown_extension_svgbob_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          simple_markdown_0_2_1,
          svgbobex_0_0_1
        }:
          buildMix ({
            name = "simple_markdown_extension_svgbob";
            version = "0.0.1";
            src = fetchHex {
              pkg = "simple_markdown_extension_svgbob";
              version = "0.0.1";
              sha256 =
                "658ae31a8f91541345bbda589924c707bc4addb8d0fd729273c95c33640c77df";
            };
            beamDeps  = [ simple_markdown_0_2_1 svgbobex_0_0_1 ];

            meta = {
              description = ''An extension for SimpleMarkdown to add a renderer
                            for svgbob code snippets.'';
              license = stdenv.lib.licenses.bsd2;
              homepage =
                "https://github.com/ScrimpyCat/SimpleMarkdownExtensionSvgBob";
            };
          } // packageOverrides)
      ) {};

    simple_markdown_extension_svgbob =
      simple_markdown_extension_svgbob_0_0_1;

    simple_mem_cache_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "simple_mem_cache";
            version = "1.0.0";
            src = fetchHex {
              pkg = "simple_mem_cache";
              version = "1.0.0";
              sha256 =
                "6bf33b9855a86e7c18738979a4893fd54ca2d6a7d4e2d7a19fce7c29b24203cc";
            };

            meta = {
              longDescription = ''ETS backed in-memory key-value cache with
                                entry expiration after creation (TTL) or last
                                access (idle-timout) and automatic value
                                loading. Expired entries are automatically
                                purged. Supports time travel. Trade memory for
                                performance.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nico-amsterdam/simple_mem_cache";
            };
          } // packageOverrides)
      ) {};

    simple_mem_cache = simple_mem_cache_1_0_0;

    simple_pool_0_1_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "simple_pool";
            version = "0.1.4";
            src = fetchHex {
              pkg = "simple_pool";
              version = "0.1.4";
              sha256 =
                "ffce23dac27eb8a0190e5386e22cb377d104e6d11574b6bd8d64276667605298";
            };

            meta = {
              description = ''A simple library to make inline worker pools
                            easy'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/andrewcottage/simple_pool";
            };
          } // packageOverrides)
      ) {};

    simple_pool = simple_pool_0_1_4;

    simple_secrets_1_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          msgpax_0_8_2,
          pkcs7_1_0_2
        }:
          buildMix ({
            name = "simple_secrets";
            version = "1.0.0";
            src = fetchHex {
              pkg = "simple_secrets";
              version = "1.0.0";
              sha256 =
                "797c98d49250fb343ed9a98411db641a3e5ae3344433f0a46d22dfec98bce11f";
            };
            beamDeps  = [ msgpax_0_8_2 pkcs7_1_0_2 ];

            meta = {
              description = ''A simple, opinionated library for encrypting
                            small packets of data securely.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/camshaft/simple_secrets_ex";
            };
          } // packageOverrides)
      ) {};

    simple_secrets = simple_secrets_1_0_0;

    simple_server_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          plug_1_3_5
        }:
          buildMix ({
            name = "simple_server";
            version = "0.0.2";
            src = fetchHex {
              pkg = "simple_server";
              version = "0.0.2";
              sha256 =
                "6c4009a38e02623c2b664b1363dbc381814a6a5306c8a726f95d6a8fcc43cc5d";
            };
            beamDeps  = [ cowboy_1_1_2 plug_1_3_5 ];

            meta = {
              description = ''Simple static web server for testing'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/craiglyons/simple_server";
            };
          } // packageOverrides)
      ) {};

    simple_server = simple_server_0_0_2;

    simple_slack_1_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "simple_slack";
            version = "1.0.0";
            src = fetchHex {
              pkg = "simple_slack";
              version = "1.0.0";
              sha256 =
                "94158064fcf4b16d979453bb91c2077be1b20bf91fce77a0d9ceae141179e895";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''Very simple slack client using incoming
                            webhooks.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/aktsk/simple_slack";
            };
          } // packageOverrides)
      ) {};

    simple_slack = simple_slack_1_0_0;

    simple_statistics_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "simple_statistics";
            version = "0.0.1";
            src = fetchHex {
              pkg = "simple_statistics";
              version = "0.0.1";
              sha256 =
                "a54e98fa3aefa570c66ca59cfb3c0eb9729cc162dda704906fc92715b2d0f51c";
            };

            meta = {
              description = ''Statistics toolkit for Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/Leventhan/simple_statistics";
            };
          } // packageOverrides)
      ) {};

    simple_statistics = simple_statistics_0_0_1;

    simple_token_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "simple_token";
            version = "0.1.0";
            src = fetchHex {
              pkg = "simple_token";
              version = "0.1.0";
              sha256 =
                "0310e80a81d9a70571592d917219d2da48f22aa9f1739647b750f1514599b95f";
            };

            meta = {
              description = ''SimpleToken generates random, non-cryptographic
                            alphanumeric string tokens.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/railsmechanic/simple_token";
            };
          } // packageOverrides)
      ) {};

    simple_token = simple_token_0_1_0;

    simple_token_authentication_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, plug_1_3_5 }:
          buildMix ({
            name = "simple_token_authentication";
            version = "0.2.0";
            src = fetchHex {
              pkg = "simple_token_authentication";
              version = "0.2.0";
              sha256 =
                "6212ff5143c7f674679d29a8a6f7ab8af05e2a76209701fe6215d85227e466ad";
            };
            beamDeps  = [ plug_1_3_5 ];

            meta = {
              description = ''A plug that checks for presence of a simple token
                            for authentication'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/SRVentures/simple_token_authentication";
            };
          } // packageOverrides)
      ) {};

    simple_token_authentication = simple_token_authentication_0_2_0;

    simplehttp_0_4_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "simplehttp";
            version = "0.4.1";
            src = fetchHex {
              pkg = "simplehttp";
              version = "0.4.1";
              sha256 =
                "8be03341bdeb2abb5efa2686277524d3e7a2a0ce6cbc523f5bb44d447b3c2ae6";
            };

            meta = {
              description = ''HTTP client for Elixir without dependencies'';
              license = stdenv.lib.licenses.asl20;
              homepage = "http://www.alexandrubagu.info";
            };
          } // packageOverrides)
      ) {};

    simplehttp = simplehttp_0_4_1;

    simpler_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "simpler";
            version = "0.2.0";
            src = fetchHex {
              pkg = "simpler";
              version = "0.2.0";
              sha256 =
                "4042e8d7a83a9c736c15a896cdd687f3d48f5291b3fb6d496127285fb26c164f";
            };

            meta = {
              description = ''Tools for making testing simpler'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/cdegroot/palapa/tree/master/apps/simpler";
            };
          } // packageOverrides)
      ) {};

    simpler = simpler_0_2_0;

    simpler_slack_0_0_6 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_9_2,
          poison_2_2_0,
          websocket_client_1_2_1
        }:
          buildMix ({
            name = "simpler_slack";
            version = "0.0.6";
            src = fetchHex {
              pkg = "simpler_slack";
              version = "0.0.6";
              sha256 =
                "cc1689c03aa7fcabf2727adf322192cfee34cce38846b4eaffcee37a78fc0a8f";
            };
            beamDeps  = [ httpoison_0_9_2 poison_2_2_0 websocket_client_1_2_1
                      ];

            meta = {
              description = ''A way to make simple slack bots that receive
                            message, and respond to them.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gwash3189/simplerslack";
            };
          } // packageOverrides)
      ) {};

    simpler_slack = simpler_slack_0_0_6;

    simplex_0_4_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_2_2_2,
          ibrowse_4_4_0,
          poison_1_5_2,
          sweet_xml_0_6_5,
          timex_3_0_5
        }:
          buildMix ({
            name = "simplex";
            version = "0.4.0";
            src = fetchHex {
              pkg = "simplex";
              version = "0.4.0";
              sha256 =
                "43dfdc62aa2c4919464615b5acc4f03b028b3b9875fa72c128563e7d794ba2a2";
            };
            beamDeps  = [
                          httpotion_2_2_2
                          ibrowse_4_4_0
                          poison_1_5_2
                          sweet_xml_0_6_5
                          timex_3_0_5
                        ];

            meta = {
              description = ''An Elixir library for interacting with the Amazon
                            SimpleDB API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/adamkittelson/simplex";
            };
          } // packageOverrides)
      ) {};

    simplex = simplex_0_4_0;

    simplify_0_2_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          distance_0_2_2,
          geo_1_5_0,
          poison_2_2_0
        }:
          buildMix ({
            name = "simplify";
            version = "0.2.1";
            src = fetchHex {
              pkg = "simplify";
              version = "0.2.1";
              sha256 =
                "82c9d9b138d279f6ffba70d93e46738946c86b8a65b2d9bbd9e1ba0b5867aa4d";
            };
            beamDeps  = [ distance_0_2_2 geo_1_5_0 poison_2_2_0 ];

            meta = {
              longDescription = ''Implementation of the
                                Ramer–Douglas–Peucker algorithm for reducing
                                the number of points used to represent a
                                curve.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pkinney/simplify_ex";
            };
          } // packageOverrides)
      ) {};

    simplify = simplify_0_2_1;

    simpre_0_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "simpre";
            version = "0.1.0";
            src = fetchHex {
              pkg = "simpre";
              version = "0.1.0";
              sha256 =
                "db0a48789360d2a683ea3a8605c2fb0134eb9fb63f07c0069be78906cdf5fb94";
            };

            meta = {
              description = ''Simple Process Registry'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/yuce/simpre.git";
            };
          } // packageOverrides)
      ) {};

    simpre = simpre_0_1_0;

    singleton_1_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "singleton";
            version = "1.2.0";
            src = fetchHex {
              pkg = "singleton";
              version = "1.2.0";
              sha256 =
                "b8236d75de05ba8707ae8a336390fadc17eb4cfb086a6dceb5e2c06556c27e33";
            };

            meta = {
              description = ''Global, supervised singleton processes for
                            Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/arjan/singleton";
            };
          } // packageOverrides)
      ) {};

    singleton = singleton_1_2_0;

    siphash_3_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "siphash";
            version = "3.1.2";
            src = fetchHex {
              pkg = "siphash";
              version = "3.1.2";
              sha256 =
                "4d44934852e020484f563a4944be8238a542b47436be52df770b75f2608ee902";
            };

            meta = {
              description = ''Elixir implementation of the SipHash hash
                            family'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zackehh/siphash-elixir";
            };
          } // packageOverrides)
      ) {};

    siphash = siphash_3_1_2;

    sippet_0_6_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          gen_state_machine_2_0_0,
          poolboy_1_5_1,
          socket_0_3_12
        }:
          buildMix ({
            name = "sippet";
            version = "0.6.0";
            src = fetchHex {
              pkg = "sippet";
              version = "0.6.0";
              sha256 =
                "465ec1c4bd96a9d938a24f3a39938250dd6140ec01b445e5a9e8d989ac56ddbd";
            };
            beamDeps  = [ gen_state_machine_2_0_0 poolboy_1_5_1 socket_0_3_12
                      ];

            meta = {
              description = ''An Elixir library designed to be used as SIP
                            protocol middleware.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/balena/elixir-sippet";
            };
          } // packageOverrides)
      ) {};

    sippet = sippet_0_6_0;

    sippet_proxy_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, sippet_0_6_0 }:
          buildMix ({
            name = "sippet_proxy";
            version = "0.1.1";
            src = fetchHex {
              pkg = "sippet_proxy";
              version = "0.1.1";
              sha256 =
                "daa3c05c6e01d7bc280168c8be7f8895f76fc6f4c80b600be41ac0145005c002";
            };
            beamDeps  = [ sippet_0_6_0 ];

            meta = {
              description = ''A simple SIP proxy in Elixir.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/balena/elixir-sippet-proxy";
            };
          } // packageOverrides)
      ) {};

    sippet_proxy = sippet_proxy_0_1_1;

    sips_downloader_0_2_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          floki_0_17_2,
          html_entities_0_3_0,
          httpoison_0_11_2
        }:
          buildMix ({
            name = "sips_downloader";
            version = "0.2.2";
            src = fetchHex {
              pkg = "sips_downloader";
              version = "0.2.2";
              sha256 =
                "358d10e61f2d8b03e644194d09f1ca6c9c339bb9c80371eba21576571a857f94";
            };
            beamDeps  = [ floki_0_17_2 html_entities_0_3_0 httpoison_0_11_2
                      ];

            meta = {
              description = ''Automatically download new ElixirSips episodes'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/DavsX/SipsDownloader";
            };
          } // packageOverrides)
      ) {};

    sips_downloader = sips_downloader_0_2_2;

    sitemap_0_9_1 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, xml_builder_0_1_1
        }:
          buildMix ({
            name = "sitemap";
            version = "0.9.1";
            src = fetchHex {
              pkg = "sitemap";
              version = "0.9.1";
              sha256 =
                "cd72d28c38097954d393ffc307011494f0689ed61085e28ea77c9cb8f318484a";
            };
            beamDeps  = [ xml_builder_0_1_1 ];

            meta = {
              description = ''Generating sitemap.xml'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ikeikeikeike/sitemap";
            };
          } // packageOverrides)
      ) {};

    sitemap = sitemap_0_9_1;

    sizeable_1_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "sizeable";
            version = "1.0.2";
            src = fetchHex {
              pkg = "sizeable";
              version = "1.0.2";
              sha256 =
                "4bab548e6dfba777b400ca50830a9e3a4128e73df77ab1582540cf5860601762";
            };

            meta = {
              description = ''An Elixir library to make file sizes
                            human-readable.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/arvidkahl/sizeable";
            };
          } // packageOverrides)
      ) {};

    sizeable = sizeable_1_0_2;

    skills_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "skills";
            version = "0.0.1";
            src = fetchHex {
              pkg = "skills";
              version = "0.0.1";
              sha256 =
                "3845188cae5b6f43a8a9488a57831be8259ca83131ac0a1adfd24fbe846eb30f";
            };

            meta = {
              description = ''A skill-based ranking algorithms library for
                            Elixir. Includes Elo and TrueSkill.'';
              license = stdenv.lib.licenses.mpl20;
              homepage = "https://github.com/folz/skills.ex";
            };
          } // packageOverrides)
      ) {};

    skills = skills_0_0_1;

    skogsra_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "skogsra";
            version = "0.1.2";
            src = fetchHex {
              pkg = "skogsra";
              version = "0.1.2";
              sha256 =
                "154a98a22386b61c2d3f6b605bcde018239d19b2499a88de8e77693daa8d83e3";
            };

            meta = {
              longDescription = ''Skogsra is a library to manage OS environment
                                variables and application configuration options
                                with ease.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gmtprime/skogsra";
            };
          } // packageOverrides)
      ) {};

    skogsra = skogsra_0_1_2;

    skroutz_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "skroutz";
            version = "0.1.0";
            src = fetchHex {
              pkg = "skroutz";
              version = "0.1.0";
              sha256 =
                "af54cd490adf503f378f57806b4c12bbd2506fa24f6e4f7c1cbceaf8c86d2b51";
            };
            beamDeps  = [ httpoison_0_11_2 poison_2_2_0 ];

            meta = {
              description = ''Elixir library for accessing the Skroutz API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/skroutz/skroutz.ex";
            };
          } // packageOverrides)
      ) {};

    skroutz = skroutz_0_1_0;

    sky_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "sky";
            version = "0.2.0";
            src = fetchHex {
              pkg = "sky";
              version = "0.2.0";
              sha256 =
                "7a1680ae122dadd60f4491fdfa5173254769aef69cc619a3b89becb9843780a7";
            };

            meta = {
              description = ''Set of functions for manipulating other functions
                            in elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/aleandros/sky";
            };
          } // packageOverrides)
      ) {};

    sky = sky_0_2_0;

    skycluster_1_1_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          confex_2_0_1,
          poison_3_1_0
        }:
          buildMix ({
            name = "skycluster";
            version = "1.1.4";
            src = fetchHex {
              pkg = "skycluster";
              version = "1.1.4";
              sha256 =
                "38544777bbd316de2cb1dd8e9423443d0d30a76a3aa5e6570e5e7f67da97bacc";
            };
            beamDeps  = [ confex_2_0_1 poison_3_1_0 ];

            meta = {
              longDescription = ''Automatic Erlang cluster formation, messaging
                                and management for Elixir/Erlang
                                applications.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/Nebo15/skycluster";
            };
          } // packageOverrides)
      ) {};

    skycluster = skycluster_1_1_4;

    slack_0_11_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exjsx_3_2_1,
          httpoison_0_11_2,
          websocket_client_1_2_1
        }:
          buildMix ({
            name = "slack";
            version = "0.11.0";
            src = fetchHex {
              pkg = "slack";
              version = "0.11.0";
              sha256 =
                "588169be3fe2d1d1baf956e6d8ce7db585045616443629078170e6878fbdbbf1";
            };
            beamDeps  = [ exjsx_3_2_1 httpoison_0_11_2 websocket_client_1_2_1
                      ];

            meta = {
              description = ''A Slack Real Time Messaging API client.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/BlakeWilliams/Elixir-Slack";
            };
          } // packageOverrides)
      ) {};

    slack = slack_0_11_0;

    slack_0_6_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exjsx_3_2_1,
          httpoison_0_8_3
        }:
          buildMix ({
            name = "slack";
            version = "0.6.0";
            src = fetchHex {
              pkg = "slack";
              version = "0.6.0";
              sha256 =
                "012deb59039a092b6f656218c42d5d86b4fb23a4fdc643ada94c2bba6cf22fbf";
            };
            beamDeps  = [ exjsx_3_2_1 httpoison_0_8_3 ];

            meta = {
              description = ''A Slack Real Time Messaging API client.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/BlakeWilliams/Elixir-Slack";
            };
          } // packageOverrides)
      ) {};

    slack_0_7_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exjsx_3_2_1,
          httpoison_0_9_2
        }:
          buildMix ({
            name = "slack";
            version = "0.7.1";
            src = fetchHex {
              pkg = "slack";
              version = "0.7.1";
              sha256 =
                "f82bd7aaf7c5225068384c78e098596ba89dc3f19e9ab3eeb0a6d40dd56d0b4b";
            };
            beamDeps  = [ exjsx_3_2_1 httpoison_0_9_2 ];

            meta = {
              description = ''A Slack Real Time Messaging API client.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/BlakeWilliams/Elixir-Slack";
            };
          } // packageOverrides)
      ) {};

    slack_0_9_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exjsx_3_2_1,
          httpoison_0_9_2,
          websocket_client_1_2_1
        }:
          buildMix ({
            name = "slack";
            version = "0.9.3";
            src = fetchHex {
              pkg = "slack";
              version = "0.9.3";
              sha256 =
                "dbcf053e052fb9ee42287c0a9d0ccfb8a63acfe490a62537c0b3d02a9ccd8939";
            };
            beamDeps  = [ exjsx_3_2_1 httpoison_0_9_2 websocket_client_1_2_1
                      ];

            meta = {
              description = ''A Slack Real Time Messaging API client.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/BlakeWilliams/Elixir-Slack";
            };
          } // packageOverrides)
      ) {};

    slack_ex_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "slack_ex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "slack_ex";
              version = "0.1.0";
              sha256 =
                "e4d7e64d8796f376a0363907128210e5799add85d555d89a7bf941c14101dbd6";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''A client for the Slack API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jclem/slack_ex";
            };
          } // packageOverrides)
      ) {};

    slack_ex = slack_ex_0_1_0;

    slack_interactive_0_1_1 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, phoenix_1_3_0_rc_2
        }:
          buildMix ({
            name = "slack_interactive";
            version = "0.1.1";
            src = fetchHex {
              pkg = "slack_interactive";
              version = "0.1.1";
              sha256 =
                "b506d98985e26f6705246fa665f3ad33afd8a161bb91787b398ac91e1e907422";
            };
            beamDeps  = [ phoenix_1_3_0_rc_2 ];

            meta = {
              description = ''Handle Slack slash command and interactive
                            message HTTP requests in Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Corkle/Slack-Elixir";
            };
          } // packageOverrides)
      ) {};

    slack_interactive = slack_interactive_0_1_1;

    slack_logger_backend_0_1_19 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          gen_stage_0_12_0,
          httpoison_0_11_2,
          poison_1_0_2,
          poolboy_1_5_1
        }:
          buildMix ({
            name = "slack_logger_backend";
            version = "0.1.19";
            src = fetchHex {
              pkg = "slack_logger_backend";
              version = "0.1.19";
              sha256 =
                "b759daa652de787e5f390ed816802a5d292e5d2fdece07382ea636dd74f4f6bb";
            };
            beamDeps  = [
                          gen_stage_0_12_0
                          httpoison_0_11_2
                          poison_1_0_2
                          poolboy_1_5_1
                        ];

            meta = {
              description = ''A logger backend for posting errors to Slack.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/craigp/slack_logger_backend";
            };
          } // packageOverrides)
      ) {};

    slack_logger_backend = slack_logger_backend_0_1_19;

    slack_throttle_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_10_0,
          poison_2_2_0
        }:
          buildMix ({
            name = "slack_throttle";
            version = "0.2.0";
            src = fetchHex {
              pkg = "slack_throttle";
              version = "0.2.0";
              sha256 =
                "e5a051ac2e749a4151b200d6f1235977bdc516bd49ee45243f2b6878311a9f20";
            };
            beamDeps  = [ httpoison_0_10_0 poison_2_2_0 ];

            meta = {
              longDescription = ''Slack Web API wrapper library that
                                automatically throttles all requests according
                                to API rate limits.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jh2/slack_throttle";
            };
          } // packageOverrides)
      ) {};

    slack_throttle = slack_throttle_0_2_0;

    slack_webhook_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, httpoison_0_11_2 }:
          buildMix ({
            name = "slack_webhook";
            version = "0.1.0";
            src = fetchHex {
              pkg = "slack_webhook";
              version = "0.1.0";
              sha256 =
                "e05d591a81dffbcf37731c0cbcd7dfe6119419fa266a961771f44d20dc70c0d2";
            };
            beamDeps  = [ httpoison_0_11_2 ];

            meta = {
              description = ''Sends simple messages to Slack channel using
                            webhook API.'';
              license = stdenv.lib.licenses.cc0;
              homepage = "https://github.com/remiq/slack_webhook";
            };
          } // packageOverrides)
      ) {};

    slack_webhook = slack_webhook_0_1_0;

    slacker_0_0_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          inflex_1_0_0,
          poison_1_5_2
        }:
          buildMix ({
            name = "slacker";
            version = "0.0.3";
            src = fetchHex {
              pkg = "slacker";
              version = "0.0.3";
              sha256 =
                "79b77c92984c636f5dc6250b6a002b4b51643156881a8c608404edd3dac099cb";
            };
            beamDeps  = [ httpoison_0_11_2 inflex_1_0_0 poison_1_5_2 ];

            meta = {
              description = ''A bot library for the Slack chat service.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/koudelka/slacker";
            };
          } // packageOverrides)
      ) {};

    slacker = slacker_0_0_3;

    slackex_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exjsx_3_2_1,
          httpoison_0_11_2
        }:
          buildMix ({
            name = "slackex";
            version = "0.0.1";
            src = fetchHex {
              pkg = "slackex";
              version = "0.0.1";
              sha256 =
                "bdd1d523cd576ff054ed3eee4efe22eee87ded127054332ca5a3bc1d6a997f33";
            };
            beamDeps  = [ exjsx_3_2_1 httpoison_0_11_2 ];

            meta = {
              longDescription = ''A Slack wrapper for Elixir Requires an active
                                account with Slack (http://slack.com).'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/davidstump/slackex";
            };
          } // packageOverrides)
      ) {};

    slackex = slackex_0_0_1;

    slackjack_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          distillery_1_4_0,
          ecto_2_1_4,
          poison_3_1_0,
          postgrex_1_0_0_rc_1,
          slack_0_11_0
        }:
          buildMix ({
            name = "slackjack";
            version = "0.1.0";
            src = fetchHex {
              pkg = "slackjack";
              version = "0.1.0";
              sha256 =
                "db03438a3173f508c74ae9e0796baeec319d6537aac33e11a282f18fff58ee5a";
            };
            beamDeps  = [
                          distillery_1_4_0
                          ecto_2_1_4
                          poison_3_1_0
                          postgrex_1_0_0_rc_1
                          slack_0_11_0
                        ];

            meta = {
              description = ''Slack bot to log non-private team chat
                            channels.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ryanwinchester/slackjack";
            };
          } // packageOverrides)
      ) {};

    slackjack = slackjack_0_1_0;

    slender_channel_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "slender_channel";
            version = "0.1.1";
            src = fetchHex {
              pkg = "slender_channel";
              version = "0.1.1";
              sha256 =
                "542692eda84bd3907d6721c9c7e30a677d5d1d3865df3aae70aa3f7fc0171369";
            };

            meta = {
              description = ''Exposes helpful macros for working with Phoenix
                            Channels'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/vanderhoop/slender_channel";
            };
          } // packageOverrides)
      ) {};

    slender_channel = slender_channel_0_1_1;

    slim_fast_0_10_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "slim_fast";
            version = "0.10.0";
            src = fetchHex {
              pkg = "slim_fast";
              version = "0.10.0";
              sha256 =
                "aae7eb1573c1ee98f5fa11098d758b80b35f4d67e6e5f81135ae4d66cb571c44";
            };

            meta = {
              description = ''An Elixir library for rendering slim
                            templates.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/doomspork/slim_fast";
            };
          } // packageOverrides)
      ) {};

    slim_fast = slim_fast_0_10_0;

    slime_0_16_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "slime";
            version = "0.16.0";
            src = fetchHex {
              pkg = "slime";
              version = "0.16.0";
              sha256 =
                "9a8c51853302df424aea6ce590e5f67ad8ba9581dd62ecb0c685bcf462c4cd79";
            };

            meta = {
              description = ''An Elixir library for rendering Slim-like
                            templates.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/slime-lang/slime";
            };
          } // packageOverrides)
      ) {};

    slime = slime_0_16_0;

    slippers_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          earmark_1_2_2,
          ex_doc_0_16_1,
          httpoison_0_10_0,
          inch_ex_0_5_6,
          poison_3_1_0
        }:
          buildMix ({
            name = "slippers";
            version = "0.1.0";
            src = fetchHex {
              pkg = "slippers";
              version = "0.1.0";
              sha256 =
                "d1a84a307953a0b8c1b5dae84fdd60ecf706019206f5afd75b2d386bace8bd9b";
            };
            beamDeps  = [
                          earmark_1_2_2
                          ex_doc_0_16_1
                          httpoison_0_10_0
                          inch_ex_0_5_6
                          poison_3_1_0
                        ];

            meta = {
              description = ''Simple Elixir wrapper for the 10000ft API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nickcoyne/slippers";
            };
          } // packageOverrides)
      ) {};

    slippers = slippers_0_1_0;

    slogger_0_1_6 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "slogger";
            version = "0.1.6";
            src = fetchHex {
              pkg = "slogger";
              version = "0.1.6";
              sha256 =
                "d00ddabfa703acde5eecce4571a7627b050d5b91abb105b40bc2db5de79fe83b";
            };

            meta = {
              longDescription = ''Slogger is a simple logger that allows
                                flexible, and easily customizable, module-level
                                control of logging.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/elbow-jason/slogger";
            };
          } // packageOverrides)
      ) {};

    slogger = slogger_0_1_6;

    slp_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "slp";
            version = "0.0.2";
            src = fetchHex {
              pkg = "slp";
              version = "0.0.2";
              sha256 =
                "27e5f7330c7ce631f16e3ec5781b31cbb2247d2bcdeab1e979a66dcc4397bd77";
            };

            meta = {
              longDescription = ''An Elixir application for using the Service
                                Location Protocol. SLP is a commonly used
                                service discovery protocol.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/stuart/elixir_slp";
            };
          } // packageOverrides)
      ) {};

    slp = slp_0_0_2;

    slugerl_1_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "slugerl";
            version = "1.0.0";
            src = fetchHex {
              pkg = "slugerl";
              version = "1.0.0";
              sha256 =
                "5a06364270afb773b32a7a4e05cf9cb4ccf904faedb2825d7336f3065e4f791b";
            };

            meta = {
              description = ''slugify'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/thraxil/slugerl";
            };
          } // packageOverrides)
      ) {};

    slugerl = slugerl_1_0_0;

    slugger_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "slugger";
            version = "0.1.0";
            src = fetchHex {
              pkg = "slugger";
              version = "0.1.0";
              sha256 =
                "c74ef1f09acd6952591d89ab6747b337aaec9624e57623ca3a7b9e2cf536a8a3";
            };

            meta = {
              longDescription = ''The library Slugger can generate slugs from
                                given strings that can be used in URLs or file
                                names.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/h4cc/slugger";
            };
          } // packageOverrides)
      ) {};

    slugger_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "slugger";
            version = "0.2.0";
            src = fetchHex {
              pkg = "slugger";
              version = "0.2.0";
              sha256 =
                "57bb83a7d62537495705473c22e5f91341ffb2b61684ab1c54260238e5ddd2ae";
            };

            meta = {
              longDescription = ''The library Slugger can generate slugs from
                                given strings that can be used in URLs or file
                                names.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/h4cc/slugger";
            };
          } // packageOverrides)
      ) {};

    slugger = slugger_0_2_0;

    sma_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "sma";
            version = "0.1.0";
            src = fetchHex {
              pkg = "sma";
              version = "0.1.0";
              sha256 =
                "06f1111473e0ec2c805a6628698d8111b86e7c1c3ed0d6629cd882751baadd23";
            };

            meta = {
              description = ''Simple moving average calculator in elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/techgaun/ex_sma";
            };
          } // packageOverrides)
      ) {};

    sma = sma_0_1_0;

    smart_websocket_client_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          poison_3_1_0,
          poolboy_1_5_1,
          socket_0_3_12
        }:
          buildMix ({
            name = "smart_websocket_client";
            version = "0.1.0";
            src = fetchHex {
              pkg = "smart_websocket_client";
              version = "0.1.0";
              sha256 =
                "e0e7d46ce18a1307c597a5d5c6e5a94c8ab7d19564f728f9256fdcc3750ea8fc";
            };
            beamDeps  = [
                          cowboy_1_1_2 poison_3_1_0 poolboy_1_5_1 socket_0_3_12
                        ];

            meta = {
              description = ''SmartWebsocketClient is a (not-so) smart
                            websocket client with pool support.'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/HackerExperience/SmartWebsocketClient";
            };
          } // packageOverrides)
      ) {};

    smart_websocket_client = smart_websocket_client_0_1_0;

    smerl_0_0_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "smerl";
            version = "0.0.1";
            src = fetchHex {
              pkg = "smerl";
              version = "0.0.1";
              sha256 =
                "57de96b4b81704af30f58488eb21fbbbe59d159aa5288080529e3494f911a0b4";
            };

            buildPlugins  = [ coveralls ];


            meta = {
              description = ''Simple Metaprogramming for Erlang.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/deadtrickster/smerl";
            };
          } // packageOverrides)
      ) {};

    smerl = smerl_0_0_1;

    smex_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          amqp_0_2_2,
          murmur_0_2_1
        }:
          buildMix ({
            name = "smex";
            version = "0.0.1";
            src = fetchHex {
              pkg = "smex";
              version = "0.0.1";
              sha256 =
                "3a84a2b3b3f09965bb0c2d57d04ba435b33c47319ee308feb4a182ddd9e69867";
            };
            beamDeps  = [ amqp_0_2_2 murmur_0_2_1 ];

            meta = {
              description = ''An Elixir library for simplifying the sending of
                            protocol buffers over rabbitmq.'';

            };
          } // packageOverrides)
      ) {};

    smex = smex_0_0_1;

    smile_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "smile";
            version = "0.1.0";
            src = fetchHex {
              pkg = "smile";
              version = "0.1.0";
              sha256 =
                "6032c704a6062a17c7512956620560eebaffcc2ffe9cb5d89cac28cfd7b3f96a";
            };

            meta = {
              longDescription = ''Small lib for converting emoji mappers to
                                emoji characters, like in Slack messages, see
                                GitHub for desc please.'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/danigulyas/smile";
            };
          } // packageOverrides)
      ) {};

    smile = smile_0_1_0;

    smokkfiskur_0_1_4 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "smokkfiskur";
            version = "0.1.4";
            src = fetchHex {
              pkg = "smokkfiskur";
              version = "0.1.4";
              sha256 =
                "4319894e318bfdf3535037a448323fc20e65dcbb10030af851d4c9ea9403ce31";
            };

            meta = {
              description = ''Library for colored output in Erlang'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/lk-geimfari/smokkfiskur";
            };
          } // packageOverrides)
      ) {};

    smokkfiskur = smokkfiskur_0_1_4;

    smoothie_3_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "smoothie";
            version = "3.1.2";
            src = fetchHex {
              pkg = "smoothie";
              version = "3.1.2";
              sha256 =
                "ef6525e4576b257057daf3a8a2b6fc16498e8771387030b275487000e4e62100";
            };

            meta = {
              description = ''Stylesheet inlining and plain text template
                            generation for your email templates.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jfrolich/smoothie";
            };
          } // packageOverrides)
      ) {};

    smoothie = smoothie_3_1_2;

    smppex_0_3_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ranch_1_4_0 }:
          buildMix ({
            name = "smppex";
            version = "0.3.1";
            src = fetchHex {
              pkg = "smppex";
              version = "0.3.1";
              sha256 =
                "4ec169bbf0480b46a700d33def5db31665b178fef3148d5d2dbbff3776b1f206";
            };
            beamDeps  = [ ranch_1_4_0 ];

            meta = {
              description = ''SMPP 3.4 protocol and framework implemented in
                            Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/savonarola/smppex";
            };
          } // packageOverrides)
      ) {};

    smppex = smppex_0_3_1;

    sms_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "sms";
            version = "0.0.2";
            src = fetchHex {
              pkg = "sms";
              version = "0.0.2";
              sha256 =
                "af06739227985926bfda586d70c489662c8923e599729ccae214ba11f08cc574";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''SMS service APIs for Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/reteq/sms-elixir";
            };
          } // packageOverrides)
      ) {};

    sms = sms_0_0_2;

    sms506_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, httpoison_0_7_5 }:
          buildMix ({
            name = "sms506";
            version = "0.2.0";
            src = fetchHex {
              pkg = "sms506";
              version = "0.2.0";
              sha256 =
                "da72e65a2aaab07f25ba27b1157338a206be3543538cbcf6ddcd199c44429fb7";
            };
            beamDeps  = [ httpoison_0_7_5 ];

            meta = {
              description = ''Client for Costa Rican SMS sender provider SMS
                            506.'';
              license = stdenv.lib.licenses.asl20;
            };
          } // packageOverrides)
      ) {};

    sms506 = sms506_0_2_0;

    sms_blitz_0_0_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          dialyxir_0_5_0,
          hackney_1_8_6,
          httpoison_0_11_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "sms_blitz";
            version = "0.0.3";
            src = fetchHex {
              pkg = "sms_blitz";
              version = "0.0.3";
              sha256 =
                "c3d76f41793b191d2c8dcb0a2b38b26604af9c73a300b42b331f5f3f8759fc9b";
            };
            beamDeps  = [
                          dialyxir_0_5_0
                          hackney_1_8_6
                          httpoison_0_11_2
                          poison_2_2_0
                        ];

            meta = {
              description = ''Send SMS messages through various different
                            suppliers'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/johnhamelink/sms_blitz";
            };
          } // packageOverrides)
      ) {};

    sms_blitz = sms_blitz_0_0_3;

    smurf_0_1_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "smurf";
            version = "0.1.3";
            src = fetchHex {
              pkg = "smurf";
              version = "0.1.3";
              sha256 =
                "5ed8e18ec8eea0647e7e938ce15cc76e59497d0a259cea15124520a48f0d6be6";
            };

            meta = {
              description = ''SMF interfacing library for erlang'';
              license = stdenv.lib.licenses.cddl;
              homepage = "https://github.com/project-fifo/smurf";
            };
          } // packageOverrides)
      ) {};

    smurf = smurf_0_1_3;

    snappiest_1_2_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "snappiest";
            version = "1.2.0";
            src = fetchHex {
              pkg = "snappiest";
              version = "1.2.0";
              sha256 =
                "6fff8fb233f9d7b66e2d99da8bde455448854c691256f1fb80b2c66829ac24b3";
            };
            compilePorts = true;
            buildPlugins  = [ pc ];


            meta = {
              description = ''Snappy as nif for Erlang'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/project-fifo/snappiest.git";
            };
          } // packageOverrides)
      ) {};

    snappiest = snappiest_1_2_0;

    snappy_1_1_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "snappy";
            version = "1.1.1";
            src = fetchHex {
              pkg = "snappy";
              version = "1.1.1";
              sha256 =
                "7faed3ec6bcac363c2a6f09b4f000a12c8166b42b3bf70228d532f8afcfbcb6a";
            };
            compilePorts = true;

            meta = {
              description = ''snappy compressor/decompressor Erlang NIF
                            wrapper'';

              homepage = "https://github.com/barrel-db/snappy";
            };
          } // packageOverrides)
      ) {};

    snappy = snappy_1_1_1;

    snappyer_1_2_0 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex }:
          buildErlangMk ({
            name = "snappyer";
            version = "1.2.0";
            src = fetchHex {
              pkg = "snappyer";
              version = "1.2.0";
              sha256 =
                "52f09c1ff9b8ff15b977df2e0847a3f3b9e4fa2bae00cf1f82c85d35124bf6c4";
            };

            meta = {
              description = ''Snappy as nif for Erlang'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/zmstone/snappyer.git";
            };
          } // packageOverrides)
      ) {};

    snappyer_1_2_1 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex }:
          buildErlangMk ({
            name = "snappyer";
            version = "1.2.1";
            src = fetchHex {
              pkg = "snappyer";
              version = "1.2.1";
              sha256 =
                "e09171f1c7106d4082db88a409d5648425b3699d55319c2cd09c4bb8cd1ba8a2";
            };

            meta = {
              description = ''Snappy as nif for Erlang'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/zmstone/snappyer.git";
            };
          } // packageOverrides)
      ) {};

    snappyer = snappyer_1_2_1;

    sneeze_1_0_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, html_entities_0_3_0
        }:
          buildMix ({
            name = "sneeze";
            version = "1.0.0";
            src = fetchHex {
              pkg = "sneeze";
              version = "1.0.0";
              sha256 =
                "d01e3e7c2f3cacf06a82cfd700346ac2b8bbbb1aae3b2b3f4022b2c344304178";
            };
            beamDeps  = [ html_entities_0_3_0 ];

            meta = {
              description = ''Render Elixir data to HTML. Inspired by
                            Hiccup.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ShaneKilkelly/sneeze";
            };
          } // packageOverrides)
      ) {};

    sneeze = sneeze_1_0_0;

    sniff_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "sniff";
            version = "0.1.0";
            src = fetchHex {
              pkg = "sniff";
              version = "0.1.0";
              sha256 =
                "6f5535bd35b145f189d36e1627d3335f527dd3fda8342be13a3710d87249da9a";
            };

            meta = {
              description = ''Elixir Serial Port NIF.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/samuelventura/sniff/";
            };
          } // packageOverrides)
      ) {};

    sniff = sniff_0_1_0;

    snowflake_1_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "snowflake";
            version = "1.0.2";
            src = fetchHex {
              pkg = "snowflake";
              version = "1.0.2";
              sha256 =
                "35891a66d9bcb0324095df174991d6ad8f30aae7b2a42b65feead094a8eb9260";
            };

            meta = {
              description = ''Elixir Snowflake ID Generator'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/blitzstudios/snowflake";
            };
          } // packageOverrides)
      ) {};

    snowflake = snowflake_1_0_2;

    snowflake_client_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, oauth2_0_9_1 }:
          buildMix ({
            name = "snowflake_client";
            version = "0.1.1";
            src = fetchHex {
              pkg = "snowflake_client";
              version = "0.1.1";
              sha256 =
                "94b21c7ad47775ef5853399e22ba2f8a91d8e174ca3a1da4e2fea05dfad12459";
            };
            beamDeps  = [ oauth2_0_9_1 ];

            meta = {
              description = ''A OAuth 2.0 client for Snowflake.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/IoraHealth/snowflake_client";
            };
          } // packageOverrides)
      ) {};

    snowflake_client = snowflake_client_0_1_1;

    snowflakex_1_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "snowflakex";
            version = "1.1.0";
            src = fetchHex {
              pkg = "snowflakex";
              version = "1.1.0";
              sha256 =
                "f0640b0d6d2aedb6844bfe6c8a8e30f7054df15f374cfc91dd4975d4b92fde2a";
            };

            meta = {
              longDescription = ''A service for generating unique ID numbers at
                                high scale with some simple guarantees'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/meetnow/snowflakex";
            };
          } // packageOverrides)
      ) {};

    snowflakex = snowflakex_1_1_0;

    sobelow_0_3_6 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "sobelow";
            version = "0.3.6";
            src = fetchHex {
              pkg = "sobelow";
              version = "0.3.6";
              sha256 =
                "f9fd20d2173e4f78386184614d32cc06b51fdcaf1ef37ce1513ded7484bde84c";
            };

            meta = {
              description = ''Security-focused static analysis for the Phoenix
                            framework'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/nccgroup/sobelow";
            };
          } // packageOverrides)
      ) {};

    sobelow = sobelow_0_3_6;

    social_parser_2_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "social_parser";
            version = "2.0.0";
            src = fetchHex {
              pkg = "social_parser";
              version = "2.0.0";
              sha256 =
                "d896739516978b50d011ef3bd922e86d076491689931f05e14082726cc14b82d";
            };

            meta = {
              longDescription = ''A small library for parsing out common social
                                elements such as hashtags, mentions and urls.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/swelham/social_parser";
            };
          } // packageOverrides)
      ) {};

    social_parser = social_parser_2_0_0;

    socket_0_3_12 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "socket";
            version = "0.3.12";
            src = fetchHex {
              pkg = "socket";
              version = "0.3.12";
              sha256 =
                "cc0a117a0ae025e60d9fbb4198ca73d64698b525fd942acffa0f711b7186f2f8";
            };

            meta = {
              description = ''Socket handling library for Elixir'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/meh/elixir-socket";
            };
          } // packageOverrides)
      ) {};

    socket = socket_0_3_12;

    socket_0_3_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "socket";
            version = "0.3.3";
            src = fetchHex {
              pkg = "socket";
              version = "0.3.3";
              sha256 =
                "a40ec768cb9b78fa7e236bf1ee5847e555f6f22f6eb1b1c3e9bed18cb6f58011";
            };

            meta = {
              description = ''Socket handling library for Elixir'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/meh/elixir-socket";
            };
          } // packageOverrides)
      ) {};

    socket_address_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "socket_address";
            version = "0.2.0";
            src = fetchHex {
              pkg = "socket_address";
              version = "0.2.0";
              sha256 =
                "f67714050d878caf159745deeea4666e4e2a88355de719dd11896868eb64a737";
            };

            meta = {
              description = ''An Elixir convenience library for manipulating
                            Internet socket addresses.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/elasticdog/socket_address";
            };
          } // packageOverrides)
      ) {};

    socket_address = socket_address_0_2_0;

    socket_tcp_bridge_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, erlsh_0_1_0 }:
          buildMix ({
            name = "socket_tcp_bridge";
            version = "0.1.0";
            src = fetchHex {
              pkg = "socket_tcp_bridge";
              version = "0.1.0";
              sha256 =
                "707e27d8dbec268dba170ec008eea37e5f219028643e0cb5e1651e100eb3c248";
            };
            beamDeps  = [ erlsh_0_1_0 ];

            meta = {
              longDescription = ''Bridge between unix socket and tcp port. You
                                can redirect UNIX socket (e.g. Docker API) to
                                TCP port.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mizalewski/elixir-unixbridge";
            };
          } // packageOverrides)
      ) {};

    socket_tcp_bridge = socket_tcp_bridge_0_1_0;

    solage_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, plug_1_2_0_rc_0 }:
          buildMix ({
            name = "solage";
            version = "0.0.1";
            src = fetchHex {
              pkg = "solage";
              version = "0.0.1";
              sha256 =
                "70454a068b733f5e729fa20b048e109f5853f4d96faf06b3653719e777b851d6";
            };
            beamDeps  = [ plug_1_2_0_rc_0 ];

            meta = {
              description = ''Provides basic functionalities to implement a
                            JSON API-compliant API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/simonprev/solage";
            };
          } // packageOverrides)
      ) {};

    solage = solage_0_0_1;

    solar_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          latlong_0_1_0,
          timex_3_1_15
        }:
          buildMix ({
            name = "solar";
            version = "0.1.0";
            src = fetchHex {
              pkg = "solar";
              version = "0.1.0";
              sha256 =
                "16115df05d6bdd10233fcb2cb34bb219fe1f410474fc8d9f7d438111b2f79064";
            };
            beamDeps  = [ latlong_0_1_0 timex_3_1_15 ];

            meta = {
              description = ''Solar Event Calculator'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/bengtson/solar";
            };
          } // packageOverrides)
      ) {};

    solar = solar_0_1_0;

    solextria_0_1_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          floki_0_10_1,
          http_digex_0_0_1,
          httpoison_0_5_0
        }:
          buildMix ({
            name = "solextria";
            version = "0.1.4";
            src = fetchHex {
              pkg = "solextria";
              version = "0.1.4";
              sha256 =
                "ff5fef6ef2087dfc0c9f5895b1e0e53f34153b913aebce54c6b9275a89900544";
            };
            beamDeps  = [ floki_0_10_1 http_digex_0_0_1 httpoison_0_5_0 ];

            meta = {
              description = ''Solectria DataLogger data fetcher and parser'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Brightergy/solextria";
            };
          } // packageOverrides)
      ) {};

    solextria = solextria_0_1_4;

    solid_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, neotoma_1_7_3 }:
          buildMix ({
            name = "solid";
            version = "0.0.2";
            src = fetchHex {
              pkg = "solid";
              version = "0.0.2";
              sha256 =
                "9714ced308f1da23337043159cdc925406a4d9f83870f8ae8c5de39119b078d2";
            };
            beamDeps  = [ neotoma_1_7_3 ];

            meta = {
              description = ''Liquid Template engine'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/edgurgel/solid";
            };
          } // packageOverrides)
      ) {};

    solid = solid_0_0_2;

    sonic_0_1_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_8_6,
          poison_2_2_0
        }:
          buildMix ({
            name = "sonic";
            version = "0.1.3";
            src = fetchHex {
              pkg = "sonic";
              version = "0.1.3";
              sha256 =
                "2bf88f0e86cf04db4b426569153f26fd41f6202aee1e9175e0a242eb5a0a0586";
            };
            beamDeps  = [ hackney_1_8_6 poison_2_2_0 ];

            meta = {
              description = ''etcd library and bindings for Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/heroiclabs/sonic";
            };
          } // packageOverrides)
      ) {};

    sonic = sonic_0_1_3;

    sorted_set_1_1_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, red_black_tree_1_2_0
        }:
          buildMix ({
            name = "sorted_set";
            version = "1.1.0";
            src = fetchHex {
              pkg = "sorted_set";
              version = "1.1.0";
              sha256 =
                "2c2c119554e02d8c813fd9511a8417b20f8efd3c27fa4ab722ba733140fb9a46";
            };
            beamDeps  = [ red_black_tree_1_2_0 ];

            meta = {
              description = ''SortedSet implementation for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/SenecaSystems/sorted_set";
            };
          } // packageOverrides)
      ) {};

    sorted_set = sorted_set_1_1_0;

    sorted_ttl_list_1_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "sorted_ttl_list";
            version = "1.1.1";
            src = fetchHex {
              pkg = "sorted_ttl_list";
              version = "1.1.1";
              sha256 =
                "13ff2b588f8a4543dcb7ecd1e6157e40b855dccd9373d4470e18521904f8b455";
            };

            meta = {
              longDescription = ''A ets based list with an expire feature. So
                                you can push keys to the list that will expire
                                after a gven time.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mpneuried/sorted_ttl_list";
            };
          } // packageOverrides)
      ) {};

    sorted_ttl_list = sorted_ttl_list_1_1_1;

    soundcloud_ex_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_8_3,
          phoenix_ecto_3_0_0_rc_0,
          poison_1_5_2,
          postgrex_1_0_0_rc_1
        }:
          buildMix ({
            name = "soundcloud_ex";
            version = "0.0.1";
            src = fetchHex {
              pkg = "soundcloud_ex";
              version = "0.0.1";
              sha256 =
                "02fa19adbc310f2860442926d79c48e4a6d047223df3326ad9fb76d7d27c605b";
            };
            beamDeps  = [
                          httpoison_0_8_3
                          phoenix_ecto_3_0_0_rc_0
                          poison_1_5_2
                          postgrex_1_0_0_rc_1
                        ];

            meta = {
              description = ''SoundCloud api wrapper for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/desmondhume/soundcloud_ex";
            };
          } // packageOverrides)
      ) {};

    soundcloud_ex = soundcloud_ex_0_0_1;

    spaceapi_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_2_2_0 }:
          buildMix ({
            name = "spaceapi";
            version = "0.1.2";
            src = fetchHex {
              pkg = "spaceapi";
              version = "0.1.2";
              sha256 =
                "2d9f7da251e3d6dfd33248173622166afb6ecb28dc6286191ab178d85117584d";
            };
            beamDeps  = [ poison_2_2_0 ];

            meta = {
              description = ''A small Elixir package for parsing the Space
                            API'';
              license = with stdenv.lib.licenses; [ mit gpl3 ];
              homepage = "https://github.com/geistesk/spaceapi";
            };
          } // packageOverrides)
      ) {};

    spaceapi = spaceapi_0_1_2;

    spaced_repetitions_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, timex_3_0_5 }:
          buildMix ({
            name = "spaced_repetitions";
            version = "0.0.1";
            src = fetchHex {
              pkg = "spaced_repetitions";
              version = "0.0.1";
              sha256 =
                "67e846a7fe32d7ab5b10373dd9f80eccccacc05ad2b9f3e6ca3de09da8b8abc5";
            };
            beamDeps  = [ timex_3_0_5 ];

            meta = {
              description = ''Spaced repetitions library with basic sm2
                            implementation'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mrluc/exreps";
            };
          } // packageOverrides)
      ) {};

    spaced_repetitions = spaced_repetitions_0_0_1;

    spacerace_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_4,
          httpoison_0_10_0,
          plug_1_3_5,
          poison_2_2_0
        }:
          buildMix ({
            name = "spacerace";
            version = "0.1.0";
            src = fetchHex {
              pkg = "spacerace";
              version = "0.1.0";
              sha256 =
                "55c5eb5c3a76b462284f753e6b4666c897c3f520f2107d8d09724ef8538f9bff";
            };
            beamDeps  = [ ecto_2_1_4 httpoison_0_10_0 plug_1_3_5 poison_2_2_0
                      ];

            meta = {
              description = ''The flexible REST API client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/127labs/spacerace";
            };
          } // packageOverrides)
      ) {};

    spacerace = spacerace_0_1_0;

    spacesaving_0_0_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          dialyze_0_2_1,
          earmark_1_2_2
        }:
          buildMix ({
            name = "spacesaving";
            version = "0.0.3";
            src = fetchHex {
              pkg = "spacesaving";
              version = "0.0.3";
              sha256 =
                "e13f6ceb1adaad447f12eab1cfc5668a2ab4784393c67b4c8cde815533cd43f8";
            };
            beamDeps  = [ dialyze_0_2_1 earmark_1_2_2 ];

            meta = {
              description = ''stream count distinct element estimation using
                            the \"space saving\" algorithm.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rozap/spacesaving";
            };
          } // packageOverrides)
      ) {};

    spacesaving = spacesaving_0_0_3;

    spaghetti_pool_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "spaghetti_pool";
            version = "0.1.0";
            src = fetchHex {
              pkg = "spaghetti_pool";
              version = "0.1.0";
              sha256 =
                "d61e82ede3e43e8de45527b8ed4a82510f25fc35d72b82d00594315f72a3871d";
            };

            meta = {
              description = ''A worker pool for concurrently read and written
                            ETS table.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/theemuts/spaghetti_pool";
            };
          } // packageOverrides)
      ) {};

    spaghetti_pool = spaghetti_pool_0_1_0;

    spandex_0_2_8 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          confex_2_0_0,
          decorator_1_2_1,
          ex2ms_1_5_0,
          httpoison_0_11_2,
          msgpax_1_1_0,
          plug_1_3_5,
          poison_3_1_0
        }:
          buildMix ({
            name = "spandex";
            version = "0.2.8";
            src = fetchHex {
              pkg = "spandex";
              version = "0.2.8";
              sha256 =
                "13be090c38c58fcfff1350f3c8b77d4133aa1e1cb64217797a3e3353bd3b737b";
            };
            beamDeps  = [
                          confex_2_0_0
                          decorator_1_2_1
                          ex2ms_1_5_0
                          httpoison_0_11_2
                          msgpax_1_1_0
                          plug_1_3_5
                          poison_3_1_0
                        ];

            meta = {
              description = ''A platform agnostic tracing library. Contributors
                            welcome.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zachdaniel/spandex";
            };
          } // packageOverrides)
      ) {};

    spandex = spandex_0_2_8;

    sparkel_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "sparkel";
            version = "0.1.0";
            src = fetchHex {
              pkg = "sparkel";
              version = "0.1.0";
              sha256 =
                "dc997be588eb2a2a93deccbdd0ba3a51b1061c47b2dc02687c34f29cc7a0d1f6";
            };

            meta = {
              description = ''Sparkel is a port of spark for Elixir and lets
                            you create ASCII sparklines'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mytrile/sparkel";
            };
          } // packageOverrides)
      ) {};

    sparkel = sparkel_0_1_0;

    sparkpost_0_5_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_1_0_2
        }:
          buildMix ({
            name = "sparkpost";
            version = "0.5.1";
            src = fetchHex {
              pkg = "sparkpost";
              version = "0.5.1";
              sha256 =
                "2de2678d47472350723d3c7714612351e837b5bf94da11117f2e20fe6031652c";
            };
            beamDeps  = [ httpoison_0_11_2 poison_1_0_2 ];

            meta = {
              description = ''The official Elixir package for the SparkPost
                            API'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/SparkPost/elixir-sparkpost";
            };
          } // packageOverrides)
      ) {};

    sparkpost = sparkpost_0_5_1;

    spartan_0_0_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "spartan";
            version = "0.0.1";
            src = fetchHex {
              pkg = "spartan";
              version = "0.0.1";
              sha256 =
                "063b09858ddc9ccec09b6aaf187a0a4893288b079c951b048873118b65441476";
            };

            buildPlugins  = [ pc rebar3_auto ];


            meta = {
              description = ''Node-local DNS service for Mesosphere DCOS'';
              license = stdenv.lib.licenses.apsl20;
            };
          } // packageOverrides)
      ) {};

    spartan = spartan_0_0_1;

    spatial_hash_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, envelope_0_3_1 }:
          buildMix ({
            name = "spatial_hash";
            version = "0.1.2";
            src = fetchHex {
              pkg = "spatial_hash";
              version = "0.1.2";
              sha256 =
                "f6c26e5b212366dcced11ebdb0b07596e0ec8511d5b0966f725488aaccfc775d";
            };
            beamDeps  = [ envelope_0_3_1 ];

            meta = {
              description = ''A library for calculating spatial hashes for
                            points and geometries.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pkinney/spatial_hash_ex";
            };
          } // packageOverrides)
      ) {};

    spatial_hash = spatial_hash_0_1_2;

    spawndir_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, exrm_0_14_6 }:
          buildMix ({
            name = "spawndir";
            version = "0.1.1";
            src = fetchHex {
              pkg = "spawndir";
              version = "0.1.1";
              sha256 =
                "c407c9eb1f6f8ebb622df28b2f19a34447add6555f87208446a458b60ea9750c";
            };
            beamDeps  = [ exrm_0_14_6 ];

            meta = {
              longDescription = ''# SpawnDir Spawns commands from the file
                                system. This exists to provide a simple
                                mechanism for spawning and managing processes:
                                simply add an executable, or a symbolic link to
                                one, to a monitored directory. The config allows
                                arguments to be specified by file or directory.
                                While not as flexible as upstart, monit, et al.,
                                SpawnDir`s use of the filesystem provides a
                                simpler UNIX-ish interface. ## Usage To use the
                                escript executable: ./spawndir DIR [ARGS ...]
                                where `DIR` is the directory to be monitored,
                                and each command will be started with the
                                supplied `ARGS` To run using mix: mix run
                                --no-halt You can configure what is watched via
                                the `:spawndir` application environment
                                variables: :default_opts :: [opt] :watch :: [cmd
                                | {cmd, [opt]}] where opt :: string() cmd ::
                                string() ## Future Additions - Check for
                                executable flag - Package installation - Monitor
                                filesystem for commands being added/removed
                                Copyright (c) Thomas Moulia, 2014 '';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/jtmoulia/spawndir";
            };
          } // packageOverrides)
      ) {};

    spawndir = spawndir_0_1_1;

    speak_ex_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ex_ami_0_2_0 }:
          buildMix ({
            name = "speak_ex";
            version = "0.3.0";
            src = fetchHex {
              pkg = "speak_ex";
              version = "0.3.0";
              sha256 =
                "80468977769e48b0a9dfc076f4128dc3445f2c3dcc0d908060c266ac0b3beb4d";
            };
            beamDeps  = [ ex_ami_0_2_0 ];

            meta = {
              longDescription = ''An Elixir framework for building telephony
                                applications, inspired by Ruby`s Adhearsion.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/smpallen99/speak_ex";
            };
          } // packageOverrides)
      ) {};

    speak_ex = speak_ex_0_3_0;

    spec_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "spec";
            version = "0.1.3";
            src = fetchHex {
              pkg = "spec";
              version = "0.1.3";
              sha256 =
                "baae357f404e0f8d8c469b80f8d66916fef7229e02cbd5d063ea45c40ff0aaa5";
            };

            meta = {
              description = ''Data specification conformance and generation for
                            Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/vic/spec";
            };
          } // packageOverrides)
      ) {};

    spec = spec_0_1_3;

    speechmatex_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "speechmatex";
            version = "0.1.1";
            src = fetchHex {
              pkg = "speechmatex";
              version = "0.1.1";
              sha256 =
                "0637bb09c7929dd3d3fe2d779656d00f256ce8907dfc77989077edb04d2c89d8";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''Speechmatics API Client written in Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/findmypast-oss/speechmatex";
            };
          } // packageOverrides)
      ) {};

    speechmatex = speechmatex_0_1_1;

    spell_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          msgpax_0_8_2,
          poison_1_4_0
        }:
          buildMix ({
            name = "spell";
            version = "0.1.0";
            src = fetchHex {
              pkg = "spell";
              version = "0.1.0";
              sha256 =
                "c768ada54d3cbda57d63344b0b9c91520362700dde4b939a825358f01f1dbfa9";
            };
            beamDeps  = [ msgpax_0_8_2 poison_1_4_0 ];

            meta = {
              longDescription = ''Spell is an extensible Elixir WAMP client.
                                Spell supports the client subscriber, publisher,
                                callee, and caller roles.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/MyMedsAndMe/spell";
            };
          } // packageOverrides)
      ) {};

    spell = spell_0_1_0;

    spellbook_2_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          dot_notes_1_0_0,
          poison_3_1_0,
          yamerl_0_5_0,
          yaml_elixir_1_3_0
        }:
          buildMix ({
            name = "spellbook";
            version = "2.0.1";
            src = fetchHex {
              pkg = "spellbook";
              version = "2.0.1";
              sha256 =
                "5843f8282a02b1808ed8d79c9b574cd4e831d4bc2396bb441da1f3331e9e6f69";
            };
            beamDeps  = [
                          dot_notes_1_0_0
                          poison_3_1_0
                          yamerl_0_5_0
                          yaml_elixir_1_3_0
                        ];

            meta = {
              longDescription = ''Provides dynamic hierarchical configurations
                                loading from config files and environment
                                variables.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/alexiob/spellbook";
            };
          } // packageOverrides)
      ) {};

    spellbook = spellbook_2_0_1;

    spex_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "spex";
            version = "0.1.2";
            src = fetchHex {
              pkg = "spex";
              version = "0.1.2";
              sha256 =
                "102a1a74e19cd68c843ba45ac8580f44b5b8e4cc572e206e143cab56f369fb93";
            };

            meta = {
              description = ''Validate your Elixir values against value-based
                            specs'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/codegram/spex";
            };
          } // packageOverrides)
      ) {};

    spex = spex_0_1_2;

    spf_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "spf";
            version = "0.0.1";
            src = fetchHex {
              pkg = "spf";
              version = "0.0.1";
              sha256 =
                "64126066eaac871e08a1ece2721e0fccb36220b28a4c6b03f08f0d4d459909a3";
            };

            meta = {
              description = ''SPF implementation in Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hex-sh/spf";
            };
          } // packageOverrides)
      ) {};

    spf = spf_0_0_1;

    spherical_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "spherical";
            version = "0.0.1";
            src = fetchHex {
              pkg = "spherical";
              version = "0.0.1";
              sha256 =
                "eaa7f1a4d265a0a6d0b8e23b530882dda0e68e35780a5af50ac6a2d9d2ba2fac";
            };

            meta = {
              description = ''An spherical geometry library for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/arpunk/spherical";
            };
          } // packageOverrides)
      ) {};

    spherical = spherical_0_0_1;

    sphinx_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, plug_1_3_5 }:
          buildMix ({
            name = "sphinx";
            version = "0.1.2";
            src = fetchHex {
              pkg = "sphinx";
              version = "0.1.2";
              sha256 =
                "6da62933e4b0d35f22fff32e8b73c25da2cff35f16931e3c4f7b328abf6bb179";
            };
            beamDeps  = [ plug_1_3_5 ];

            meta = {
              description = ''Sphinx is a authorization library for Phoenix
                            apps.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/almassapargali/sphinx";
            };
          } // packageOverrides)
      ) {};

    sphinx = sphinx_0_1_2;

    sphinxsearch_giza_0_0_2 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex }:
          buildErlangMk ({
            name = "sphinxsearch_giza";
            version = "0.0.2";
            src = fetchHex {
              pkg = "sphinxsearch_giza";
              version = "0.0.2";
              sha256 =
                "0ec8c3ffa3b966950394d229b2b0f0513b8bbf4ecf9f6aa182ebbbfdb191f240";
            };

            meta = {
              description = ''Client for the Sphinx search engine'';
              license = stdenv.lib.licenses.free;
            };
          } // packageOverrides)
      ) {};

    sphinxsearch_giza = sphinxsearch_giza_0_0_2;

    spirit_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          plug_1_1_7,
          poison_1_5_2
        }:
          buildMix ({
            name = "spirit";
            version = "0.0.1";
            src = fetchHex {
              pkg = "spirit";
              version = "0.0.1";
              sha256 =
                "ffaa22ccfd4999eacaee60464eb494bb9da597a8dad0dcad575fb506e06ee3b6";
            };
            beamDeps  = [ cowboy_1_1_2 plug_1_1_7 poison_1_5_2 ];

            meta = {
              description = ''Elixir microframework for web development.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/emancu/spirit";
            };
          } // packageOverrides)
      ) {};

    spirit = spirit_0_0_1;

    sponge_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "sponge";
            version = "0.1.0";
            src = fetchHex {
              pkg = "sponge";
              version = "0.1.0";
              sha256 =
                "ddb98a220cc01ea424c7f6aab0d364c0380d57c9d7f8c447185cba6eacb7b037";
            };

            meta = {
              longDescription = ''Sponge is a library for dealing with building
                                SOAP requests and parsing responses.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/leejarvis/sponge";
            };
          } // packageOverrides)
      ) {};

    sponge = sponge_0_1_0;

    sports_radar_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_9_2,
          plug_1_3_5,
          poison_2_2_0,
          uuid_1_1_7
        }:
          buildMix ({
            name = "sports_radar";
            version = "0.1.0";
            src = fetchHex {
              pkg = "sports_radar";
              version = "0.1.0";
              sha256 =
                "6dafe6e5d5a943306ffc2dcb669a9badbb8bbeabde2d7f80e65483f005b09f44";
            };
            beamDeps  = [ httpoison_0_9_2 plug_1_3_5 poison_2_2_0 uuid_1_1_7
                      ];

            meta = {
              description = ''A wrapper for the Sports Radar API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dustinsmith1024/sports_radar";
            };
          } // packageOverrides)
      ) {};

    sports_radar = sports_radar_0_1_0;

    spotifex_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_9_2,
          oauth2_0_9_1,
          poison_2_2_0
        }:
          buildMix ({
            name = "spotifex";
            version = "0.0.2";
            src = fetchHex {
              pkg = "spotifex";
              version = "0.0.2";
              sha256 =
                "1cba91609c332f5ec6626625424ceae936b5a9bf8b1ac8c02d8fc22924dada3b";
            };
            beamDeps  = [ httpoison_0_9_2 oauth2_0_9_1 poison_2_2_0 ];

            meta = {
              description = ''A Spotify API wrapper written in Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://www.github.com/jarroput/spotifex";
            };
          } // packageOverrides)
      ) {};

    spotifex = spotifex_0_0_2;

    spotify_ex_2_0_5 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_9_2,
          plug_1_2_5,
          poison_3_1_0
        }:
          buildMix ({
            name = "spotify_ex";
            version = "2.0.5";
            src = fetchHex {
              pkg = "spotify_ex";
              version = "2.0.5";
              sha256 =
                "ff2b17e58073c94277d8130c4c72a3dc70365b5c3485862633cd99232f114ac9";
            };
            beamDeps  = [ httpoison_0_9_2 plug_1_2_5 poison_3_1_0 ];

            meta = {
              description = ''An Elixir wrapper for the Spotify Web API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://www.github.com/jsncmgs1/spotify_ex";
            };
          } // packageOverrides)
      ) {};

    spotify_ex = spotify_ex_2_0_5;

    spout_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "spout";
            version = "0.0.1";
            src = fetchHex {
              pkg = "spout";
              version = "0.0.1";
              sha256 =
                "5389628219cfa6df18ba366cb668055e44e97eccfea38d385d0581c489f3926a";
            };

            meta = {
              longDescription = ''A TAP producer that integrates with existing
                                ExUnit tests via an ExUnit formatter'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Stratus3D/Spout";
            };
          } // packageOverrides)
      ) {};

    spout = spout_0_0_1;

    spreedly_1_0_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_7_1,
          httpoison_0_11_2,
          poison_1_0_2
        }:
          buildMix ({
            name = "spreedly";
            version = "1.0.4";
            src = fetchHex {
              pkg = "spreedly";
              version = "1.0.4";
              sha256 =
                "cb41bf1834d5ac2269c6ff19e704cc6d1efda0a8d8fdc58c15e7948419b1f79b";
            };
            beamDeps  = [ hackney_1_7_1 httpoison_0_11_2 poison_1_0_2 ];

            meta = {
              description = ''A wrapper for the Spreedly API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/spreedly/spreedly-elixir";
            };
          } // packageOverrides)
      ) {};

    spreedly = spreedly_1_0_4;

    spyanator_0_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "spyanator";
            version = "0.0.4";
            src = fetchHex {
              pkg = "spyanator";
              version = "0.0.4";
              sha256 =
                "10b332fa5ae99b1987f8c6e671bd29ae59d073d0185fe0052ca54d1672b3d362";
            };

            meta = {
              description = ''A Spy library for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Gwash3189/spyanator";
            };
          } // packageOverrides)
      ) {};

    spyanator = spyanator_0_0_4;

    sql_dust_0_3_10 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          benchfella_0_3_4,
          ecto_2_1_4,
          exprof_0_2_0,
          inflex_1_6_0
        }:
          buildMix ({
            name = "sql_dust";
            version = "0.3.10";
            src = fetchHex {
              pkg = "sql_dust";
              version = "0.3.10";
              sha256 =
                "65e9c7b02a564840e4d3e26384182bd0401a69d93c7f138649ff24d7b05362be";
            };
            beamDeps  = [
                          benchfella_0_3_4 ecto_2_1_4 exprof_0_2_0 inflex_1_6_0
                        ];

            meta = {
              longDescription = ''Easy. Simple. Powerful. Generate (complex)
                                SQL queries using magical Elixir SQL dust.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bettyblocks/sql_dust";
            };
          } // packageOverrides)
      ) {};

    sql_dust = sql_dust_0_3_10;

    sqlcx_1_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          decimal_1_3_0,
          esqlcipher_1_0_0
        }:
          buildMix ({
            name = "sqlcx";
            version = "1.1.0";
            src = fetchHex {
              pkg = "sqlcx";
              version = "1.1.0";
              sha256 =
                "203c9b39da2e359322c9d83bb64d2559dd26e0f22a03d493bfc817120c394e8d";
            };
            beamDeps  = [ decimal_1_3_0 esqlcipher_1_0_0 ];

            meta = {
              description = ''A thin Elixir wrapper around esqlcipher'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/FelixKiunke/sqlcx";
            };
          } // packageOverrides)
      ) {};

    sqlcx = sqlcx_1_1_0;

    sqlite3_1_1_5 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "sqlite3";
            version = "1.1.5";
            src = fetchHex {
              pkg = "sqlite3";
              version = "1.1.5";
              sha256 =
                "fc2beb8b09deec6cf68bd6203ecf28bf827d2073915bc7131c9cd56d5ff27260";
            };
            compilePorts = true;

            meta = {
              description = ''SQLite3 Interface'';
              license = stdenv.lib.licenses.epl10;
              homepage = "https://github.com/processone/erlang-sqlite3";
            };
          } // packageOverrides)
      ) {};

    sqlite3 = sqlite3_1_1_5;

    sqlite_ecto_0_5_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_1_0_1,
          poison_1_5_2,
          sqlitex_0_8_3
        }:
          buildMix ({
            name = "sqlite_ecto";
            version = "0.5.0";
            src = fetchHex {
              pkg = "sqlite_ecto";
              version = "0.5.0";
              sha256 =
                "cb26ae002ee444aa9b12d680ec11570204ba128631ccd7d2d6d3aafcd521880e";
            };
            beamDeps  = [ ecto_1_0_1 poison_1_5_2 sqlitex_0_8_3 ];

            meta = {
              description = ''SQLite3 adapter for Ecto'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jazzyb/sqlite_ecto";
            };
          } // packageOverrides)
      ) {};

    sqlite_ecto_1_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_0_0_rc_6,
          poison_1_5_2,
          sqlitex_0_8_3
        }:
          buildMix ({
            name = "sqlite_ecto";
            version = "1.0.2";
            src = fetchHex {
              pkg = "sqlite_ecto";
              version = "1.0.2";
              sha256 =
                "38ce409a13cab69aa2949a4b56c4c8f0c7d814e941088b07751ee85e15a87f33";
            };
            beamDeps  = [ ecto_2_0_0_rc_6 poison_1_5_2 sqlitex_0_8_3 ];

            meta = {
              description = ''SQLite3 adapter for Ecto'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jazzyb/sqlite_ecto";
            };
          } // packageOverrides)
      ) {};

    sqlite_ecto_1_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_0_0_rc_6,
          poison_1_5_2,
          sqlitex_0_8_3
        }:
          buildMix ({
            name = "sqlite_ecto";
            version = "1.1.0";
            src = fetchHex {
              pkg = "sqlite_ecto";
              version = "1.1.0";
              sha256 =
                "88951b424e909d8047f0d03c13418c321df9e94560ac30241d8b1f7e48f49201";
            };
            beamDeps  = [ ecto_2_0_0_rc_6 poison_1_5_2 sqlitex_0_8_3 ];

            meta = {
              description = ''SQLite3 adapter for Ecto'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jazzyb/sqlite_ecto";
            };
          } // packageOverrides)
      ) {};

    sqlite_ecto = sqlite_ecto_1_1_0;

    sqlite_ecto2_2_0_0_dev_8 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          connection_1_0_4,
          db_connection_1_1_2,
          decimal_1_3_1,
          ecto_2_1_4,
          esqlite_0_2_3,
          poison_2_2_0,
          postgrex_0_13_3,
          sbroker_1_0_0,
          sqlitex_0_6_1
        }:
          buildMix ({
            name = "sqlite_ecto2";
            version = "2.0.0-dev.8";
            src = fetchHex {
              pkg = "sqlite_ecto2";
              version = "2.0.0-dev.8";
              sha256 =
                "b40c6e843f93c9efaf83347be87585213efc565fc314a767821b63797c2c82f7";
            };
            beamDeps  = [
                          connection_1_0_4
                          db_connection_1_1_2
                          decimal_1_3_1
                          ecto_2_1_4
                          esqlite_0_2_3
                          poison_2_2_0
                          postgrex_0_13_3
                          sbroker_1_0_0
                          sqlitex_0_6_1
                        ];

            meta = {
              description = ''SQLite3 adapter for Ecto2'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/scouten/sqlite_ecto2";
            };
          } // packageOverrides)
      ) {};

    sqlite_ecto2 = sqlite_ecto2_2_0_0_dev_8;

    sqlitex_0_6_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          decimal_1_3_0,
          esqlite_0_2_3,
          pipe_0_0_2
        }:
          buildMix ({
            name = "sqlitex";
            version = "0.6.1";
            src = fetchHex {
              pkg = "sqlitex";
              version = "0.6.1";
              sha256 =
                "570ada13fad433ce2286344ad052ac5b6c0e409205f3060f0438fd4b21519b56";
            };
            beamDeps  = [ decimal_1_3_0 esqlite_0_2_3 pipe_0_0_2 ];

            meta = {
              description = ''A thin Elixir wrapper around esqlite'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mmmries/sqlitex";
            };
          } // packageOverrides)
      ) {};

    sqlitex_0_8_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          decimal_1_3_0,
          esqlite_0_2_3,
          pipe_0_0_2
        }:
          buildMix ({
            name = "sqlitex";
            version = "0.8.3";
            src = fetchHex {
              pkg = "sqlitex";
              version = "0.8.3";
              sha256 =
                "44daaeb135178165d0a6cd6754e4af05e56e5d2943c0b1108df7df718745ec0f";
            };
            beamDeps  = [ decimal_1_3_0 esqlite_0_2_3 pipe_0_0_2 ];

            meta = {
              description = ''A thin Elixir wrapper around esqlite'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mmmries/sqlitex";
            };
          } // packageOverrides)
      ) {};

    sqlitex_1_3_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          decimal_1_3_1,
          esqlite_0_2_3
        }:
          buildMix ({
            name = "sqlitex";
            version = "1.3.2";
            src = fetchHex {
              pkg = "sqlitex";
              version = "1.3.2";
              sha256 =
                "959bab831e832e0f6e8492822296673ecfb4181e4c52df38b23e8eb4d2aa93ec";
            };
            beamDeps  = [ decimal_1_3_1 esqlite_0_2_3 ];

            meta = {
              description = ''A thin Elixir wrapper around esqlite'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mmmries/sqlitex";
            };
          } // packageOverrides)
      ) {};

    sqlitex = sqlitex_1_3_2;

    sqlmig_0_1_5 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          lager_3_2_4,
          pgapp_0_0_2
        }:
          buildRebar3 ({
            name = "sqlmig";
            version = "0.1.5";
            src = fetchHex {
              pkg = "sqlmig";
              version = "0.1.5";
              sha256 =
                "f8679247fe8b4031edcec41b135c88274e4c6e6357f69d7257b3f3aa132781ac";
            };

            beamDeps  = [ lager_3_2_4 pgapp_0_0_2 ];

            meta = {
              description = ''SQL migration toolkit'';
              license = stdenv.lib.licenses.free;
              homepage =
                "https://github.com/dalmatinerdb/erlang-sql-migrations";
            };
          } // packageOverrides)
      ) {};

    sqlmig = sqlmig_0_1_5;

    ssdb_0_3_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ssdb";
            version = "0.3.1";
            src = fetchHex {
              pkg = "ssdb";
              version = "0.3.1";
              sha256 =
                "aca960b3ec22a8f659558b5d152aa162d1314bc628875f98a4fc87f20d8ecfcc";
            };

            meta = {
              description = ''SSDB client for Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/lidashuang/ssdb-elixir";
            };
          } // packageOverrides)
      ) {};

    ssdb = ssdb_0_3_1;

    ssdb_elixir_0_2_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ssdb_elixir";
            version = "0.2.2";
            src = fetchHex {
              pkg = "ssdb_elixir";
              version = "0.2.2";
              sha256 =
                "3aa4d2b90b4a4c0f73b1fec3e67b90dfee081bce4653f942a05857082b65bc99";
            };

            meta = {
              description = ''SSDB client for Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/lidashuang/ssdb_elixir";
            };
          } // packageOverrides)
      ) {};

    ssdb_elixir = ssdb_elixir_0_2_2;

    ssdp_0_1_6 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0,
          sweet_xml_0_6_5
        }:
          buildMix ({
            name = "ssdp";
            version = "0.1.6";
            src = fetchHex {
              pkg = "ssdp";
              version = "0.1.6";
              sha256 =
                "51ad53d6811f166615f9057912fe58b15559067c4e06f49aad574ad60ae8c146";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 sweet_xml_0_6_5 ];

            meta = {
              longDescription = ''Discover devices on your network that use the
                                SSDP (Simple Service Discovery Protocol)'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/NationalAssociationOfRealtors/ssdp";
            };
          } // packageOverrides)
      ) {};

    ssdp = ssdp_0_1_6;

    ssdp_auto_connect_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          nerves_ssdp_client_0_1_3,
          nerves_ssdp_server_0_2_2
        }:
          buildMix ({
            name = "ssdp_auto_connect";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ssdp_auto_connect";
              version = "0.1.0";
              sha256 =
                "5dcf9e133668656ab843081bee22dd08c45abffe5cca1a283b0f28739d056dee";
            };
            beamDeps  = [ nerves_ssdp_client_0_1_3 nerves_ssdp_server_0_2_2
                      ];

            meta = {
              longDescription = ''A package to automatically discover and
                                connect to other erlang/elixir nodes on the
                                LAN'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mmmries/ssdp_auto_connect";
            };
          } // packageOverrides)
      ) {};

    ssdp_auto_connect = ssdp_auto_connect_0_1_0;

    sshex_1_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "sshex";
            version = "1.1.0";
            src = fetchHex {
              pkg = "sshex";
              version = "1.1.0";
              sha256 =
                "4e4415547e9dde608d08bf7fff094b6705614a584089356ffbdb6f97821f49ff";
            };

            meta = {
              description = ''Simple SSH helpers for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rubencaro/sshex";
            };
          } // packageOverrides)
      ) {};

    sshex_2_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "sshex";
            version = "2.1.0";
            src = fetchHex {
              pkg = "sshex";
              version = "2.1.0";
              sha256 =
                "303bd8fd007bf2d10ddfae83b74acafc747f24908c2590b098ba2e85c570c58b";
            };

            meta = {
              description = ''Simple SSH helpers for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rubencaro/sshex";
            };
          } // packageOverrides)
      ) {};

    sshex_2_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "sshex";
            version = "2.2.0";
            src = fetchHex {
              pkg = "sshex";
              version = "2.2.0";
              sha256 =
                "8abb54c9dc603ab8466f18a5374617534ab8a0240e05745c8773fbbd0cd71ac4";
            };

            meta = {
              description = ''Simple SSH helpers for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rubencaro/sshex";
            };
          } // packageOverrides)
      ) {};

    sshex = sshex_2_2_0;

    sshkit_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "sshkit";
            version = "0.0.1";
            src = fetchHex {
              pkg = "sshkit";
              version = "0.0.1";
              sha256 =
                "57eaab531c00735c7e5746c5610b649ec2d0e221d7b4c814869ed9b74d42a953";
            };

            meta = {
              longDescription = ''A toolkit for performing tasks on one or more
                                servers, built on top of Erlang’s SSH
                                application'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bitcrowd/sshkit.ex";
            };
          } // packageOverrides)
      ) {};

    sshkit = sshkit_0_0_1;

    ssl_verify_fun_1_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "ssl_verify_fun";
            version = "1.1.0";
            src = fetchHex {
              pkg = "ssl_verify_fun";
              version = "1.1.0";
              sha256 =
                "6c0e0d857fdb031ba67b0a791202bee116bea2313db7b649839000847591ba1e";
            };

            meta = {
              description = ''SSL verification functions for Erlang'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/deadtrickster/ssl_verify_fun.erl";
            };
          } // packageOverrides)
      ) {};

    ssl_verify_fun_1_1_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "ssl_verify_fun";
            version = "1.1.1";
            src = fetchHex {
              pkg = "ssl_verify_fun";
              version = "1.1.1";
              sha256 =
                "4f8805eb5c8a939cf2359367cb651a3180b27dfb48444846be2613d79355d65e";
            };

            meta = {
              description = ''SSL verification functions for Erlang'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/deadtrickster/ssl_verify_fun.erl";
            };
          } // packageOverrides)
      ) {};

    ssl_verify_fun_1_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ssl_verify_fun";
            version = "1.1.2";
            src = fetchHex {
              pkg = "ssl_verify_fun";
              version = "1.1.2";
              sha256 =
                "322ba12d3d045683c586527a40bc1546e21ea7952dfccfc96ede25b0c1e9be61";
            };

            meta = {
              description = ''SSL verification functions for Erlang'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/deadtrickster/ssl_verify_fun.erl";
            };
          } // packageOverrides)
      ) {};

    ssl_verify_fun = ssl_verify_fun_1_1_2;

    ssl_verify_hostname_1_0_0 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex }:
          buildErlangMk ({
            name = "ssl_verify_hostname";
            version = "1.0.0";
            src = fetchHex {
              pkg = "ssl_verify_hostname";
              version = "1.0.0";
              sha256 =
                "91adb2956e502da4b13d319c251ef5b598ca54cbf992d9bb3dba50d168a52c1e";
            };

            meta = {
              description = ''Hostname verification library for Erlang'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/deadtrickster/ssl_verify_hostname.erl";
            };
          } // packageOverrides)
      ) {};

    ssl_verify_hostname_1_0_5 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex }:
          buildErlangMk ({
            name = "ssl_verify_hostname";
            version = "1.0.5";
            src = fetchHex {
              pkg = "ssl_verify_hostname";
              version = "1.0.5";
              sha256 =
                "f2cb11e6144e10ab39d1e14bf9fb2437b690979c70bf5428e9dc4bfaf1dfeabf";
            };

            meta = {
              description = ''Hostname verification library for Erlang'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/deadtrickster/ssl_verify_hostname.erl";
            };
          } // packageOverrides)
      ) {};

    ssl_verify_hostname_1_0_6 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex }:
          buildErlangMk ({
            name = "ssl_verify_hostname";
            version = "1.0.6";
            src = fetchHex {
              pkg = "ssl_verify_hostname";
              version = "1.0.6";
              sha256 =
                "72b2fc8a8e23d77eed4441137fefa491bbf4a6dc52e9c0045f3f8e92e66243b5";
            };

            meta = {
              description = ''Hostname verification library for Erlang'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/deadtrickster/ssl_verify_hostname.erl";
            };
          } // packageOverrides)
      ) {};

    ssl_verify_hostname = ssl_verify_hostname_1_0_6;

    st_commons_1_2_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "st_commons";
            version = "1.2.1";
            src = fetchHex {
              pkg = "st_commons";
              version = "1.2.1";
              sha256 =
                "f407764712803b06ecf8b8458cf33de91678b9e9f2046a05663f29620d5d6133";
            };

            meta = {
              longDescription = ''Synlay Technologies Commons is a Synlay
                                project focused on all aspects of reusable
                                Erlang components.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/synlay/st_commons";
            };
          } // packageOverrides)
      ) {};

    st_commons = st_commons_1_2_1;

    stache_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "stache";
            version = "0.2.1";
            src = fetchHex {
              pkg = "stache";
              version = "0.2.1";
              sha256 =
                "475e80a2b6e713a75d0a085b067489e2fc1606751aab47413e12a33cf2ae4712";
            };

            meta = {
              description = ''Mustache templates in Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cwbriones/stache";
            };
          } // packageOverrides)
      ) {};

    stache = stache_0_2_1;

    stackd_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "stackd";
            version = "0.0.1";
            src = fetchHex {
              pkg = "stackd";
              version = "0.0.1";
              sha256 =
                "41749dc834f92af4954988b5e9155d45fcbf63224ecfcabce6f1fc80f3aff8f9";
            };

            meta = {
              description = ''Stackd'';

            };
          } // packageOverrides)
      ) {};

    stackd = stackd_0_0_1;

    stampery_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          amqp_0_2_0_pre_2,
          merkle_0_2_2,
          msgpack_rpc_erlang_0_6_4,
          proper_1_2_0,
          sha3_2_0_0
        }:
          buildMix ({
            name = "stampery";
            version = "0.2.0";
            src = fetchHex {
              pkg = "stampery";
              version = "0.2.0";
              sha256 =
                "5b16152b212aab81e80af3017dfdfb183d9d3dcd83e127138554568ca11d35cf";
            };
            beamDeps  = [
                          amqp_0_2_0_pre_2
                          merkle_0_2_2
                          msgpack_rpc_erlang_0_6_4
                          proper_1_2_0
                          sha3_2_0_0
                        ];

            meta = {
              longDescription = ''Elixir client library for Stampery API: the
                                blockchain-powered, industrial-scale
                                certification platform.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/stampery/elixir";
            };
          } // packageOverrides)
      ) {};

    stampery = stampery_0_2_0;

    stash_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "stash";
            version = "1.0.0";
            src = fetchHex {
              pkg = "stash";
              version = "1.0.0";
              sha256 =
                "ac68a470ed2a292b59c1dbf286a97e8b25ec72adaeeb3734c183dc54b659f7d6";
            };

            meta = {
              description = ''Simple ETS backed key/value store for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zackehh/stash";
            };
          } // packageOverrides)
      ) {};

    stash = stash_1_0_0;

    state_mc_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ecto_2_1_4 }:
          buildMix ({
            name = "state_mc";
            version = "0.1.0";
            src = fetchHex {
              pkg = "state_mc";
              version = "0.1.0";
              sha256 =
                "dbb659d29137fe18bce627dd18524a2c73342556c940032f3c66645babf490b6";
            };
            beamDeps  = [ ecto_2_1_4 ];

            meta = {
              description = ''StateMachine for Ecto'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/leogi/state_mc";
            };
          } // packageOverrides)
      ) {};

    state_mc = state_mc_0_1_0;

    stathat_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "stathat";
            version = "0.0.3";
            src = fetchHex {
              pkg = "stathat";
              version = "0.0.3";
              sha256 =
                "2d3663d1bbbf13fbae688a89656dd53f747e69d23ec73bcfd8835c2ca9d09c35";
            };

            meta = {
              description = ''StatHat client library.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/travisjeffery/stathat";
            };
          } // packageOverrides)
      ) {};

    stathat = stathat_0_0_3;

    stationary_1_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_0_4,
          earmark_1_1_1,
          plug_1_3_5
        }:
          buildMix ({
            name = "stationary";
            version = "1.0.0";
            src = fetchHex {
              pkg = "stationary";
              version = "1.0.0";
              sha256 =
                "5ebc424f719fda5c772613470f0bad7d686c857cd1ffd703185fc2488922508d";
            };
            beamDeps  = [ cowboy_1_0_4 earmark_1_1_1 plug_1_3_5 ];

            meta = {
              description = ''Stationary generates static blogs from EEx
                            templates and Markdown posts.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jarrodtaylor/stationary";
            };
          } // packageOverrides)
      ) {};

    stationary = stationary_1_0_0;

    statistics_0_4_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "statistics";
            version = "0.4.1";
            src = fetchHex {
              pkg = "statistics";
              version = "0.4.1";
              sha256 =
                "726d8791e9bafb08b3ceeb5b08df6664f29a73a0e6ac0db835500b686a153bd5";
            };

            meta = {
              description = ''Functions for descriptive statistics and common
                            distributions'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/msharp/elixir-statistics";
            };
          } // packageOverrides)
      ) {};

    statistics = statistics_0_4_1;

    statix_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "statix";
            version = "1.0.0";
            src = fetchHex {
              pkg = "statix";
              version = "1.0.0";
              sha256 =
                "c4e1d9bfedfdbfc4fc3f9302a6e851f183644617191311a0d6b26652cabb9d54";
            };

            meta = {
              description = ''Fast and reliable Elixir client for
                            StatsD-compatible servers.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/lexmag/statix";
            };
          } // packageOverrides)
      ) {};

    statix = statix_1_0_0;

    statman_0_5_0 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, decorators_0_1_0
        }:
          buildRebar3 ({
            name = "statman";
            version = "0.5.0";
            src = fetchHex {
              pkg = "statman";
              version = "0.5.0";
              sha256 =
                "30d5166e11431b65a493355a4af8b167bfda10c915484b5beb3e814075cf1297";
            };

            beamDeps  = [ decorators_0_1_0 ];

            meta = {
              description = ''Statman to the rescue!'';

              homepage = "https://github.com/knutin/statman";
            };
          } // packageOverrides)
      ) {};

    statman = statman_0_5_0;

    stats_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, instream_0_12_0 }:
          buildMix ({
            name = "stats";
            version = "0.1.1";
            src = fetchHex {
              pkg = "stats";
              version = "0.1.1";
              sha256 =
                "e633242732061adb07ecf5071229422d8796fd6805c319ed5561bf5cb8807af5";
            };
            beamDeps  = [ instream_0_12_0 ];

            meta = {
              description = ''Wrapper for stats libraries'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/artemeff/stats";
            };
          } // packageOverrides)
      ) {};

    stats = stats_0_1_1;

    statsderl_0_5_2 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          granderl_0_1_5,
          parse_trans_3_0_0
        }:
          buildRebar3 ({
            name = "statsderl";
            version = "0.5.2";
            src = fetchHex {
              pkg = "statsderl";
              version = "0.5.2";
              sha256 =
                "6c4e944ff7dae023252e9e263421a4b952ce6fd92376c43ccfe8723dfbba129e";
            };

            beamDeps  = [ granderl_0_1_5 parse_trans_3_0_0 ];

            meta = {
              description = ''High Performance Erlang StatsD Client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lpgauth/statsderl";
            };
          } // packageOverrides)
      ) {};

    statsderl = statsderl_0_5_2;

    status_ku_1_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_10_0,
          poison_3_0_0
        }:
          buildMix ({
            name = "status_ku";
            version = "1.0.1";
            src = fetchHex {
              pkg = "status_ku";
              version = "1.0.1";
              sha256 =
                "e265683d42f8307d6d3723538ff18918c791aa61d77f8d515405e9dd4678688a";
            };
            beamDeps  = [ httpoison_0_10_0 poison_3_0_0 ];

            meta = {
              description = ''Elixir client for the Heroku status API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sticksnleaves/status-ku";
            };
          } // packageOverrides)
      ) {};

    status_ku = status_ku_1_0_1;

    std_json_io_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          fs_3_4_0,
          poison_1_5_2,
          poolboy_1_5_1,
          porcelain_2_0_3
        }:
          buildMix ({
            name = "std_json_io";
            version = "0.1.0";
            src = fetchHex {
              pkg = "std_json_io";
              version = "0.1.0";
              sha256 =
                "14f1c18c31a0b0b3ffb1e654247925335059eec9c800d81dd6379166e7403d1e";
            };
            beamDeps  = [ fs_3_4_0 poison_1_5_2 poolboy_1_5_1 porcelain_2_0_3
                      ];

            meta = {
              description = ''Application for managing and communicating with
                            IO servers via JSON'';

            };
          } // packageOverrides)
      ) {};

    std_json_io = std_json_io_0_1_0;

    std_json_io_2_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          fs_3_4_0,
          poison_3_1_0,
          poolboy_1_5_1,
          porcelain_2_0_3
        }:
          buildMix ({
            name = "std_json_io_2";
            version = "0.2.0";
            src = fetchHex {
              pkg = "std_json_io_2";
              version = "0.2.0";
              sha256 =
                "a59453f785ca4ee9a2a16981da1d5010062a9f7fe944312ce367e1b771e0a0b4";
            };
            beamDeps  = [ fs_3_4_0 poison_3_1_0 poolboy_1_5_1 porcelain_2_0_3
                      ];

            meta = {
              description = ''Application for managing and communicating with
                            IO servers via JSON'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/geolessel/std_json_io_2";
            };
          } // packageOverrides)
      ) {};

    std_json_io_2 = std_json_io_2_0_2_0;

    steamex_0_0_7 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          plug_1_3_5,
          sweet_xml_0_6_5
        }:
          buildMix ({
            name = "steamex";
            version = "0.0.7";
            src = fetchHex {
              pkg = "steamex";
              version = "0.0.7";
              sha256 =
                "c1c17af1a3c1235490c9ad684a3d0ba65c4e9772c4b1ff4800bd912441a2d32c";
            };
            beamDeps  = [ httpoison_0_11_2 plug_1_3_5 sweet_xml_0_6_5 ];

            meta = {
              description = ''Steam API and Auth (with Phoenix/Plug
                            integration) for Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/antipax/steamex";
            };
          } // packageOverrides)
      ) {};

    steamex = steamex_0_0_7;

    steemex_0_11_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          atomic_map_0_9_2,
          gen_stage_0_12_0,
          poison_2_2_0,
          websocket_client_1_2_1
        }:
          buildMix ({
            name = "steemex";
            version = "0.11.0";
            src = fetchHex {
              pkg = "steemex";
              version = "0.11.0";
              sha256 =
                "b1ca7062f1173a2e4a0eeddd49d8007f10074353cda0092a9c1140239842f8eb";
            };
            beamDeps  = [
                          atomic_map_0_9_2
                          gen_stage_0_12_0
                          poison_2_2_0
                          websocket_client_1_2_1
                        ];

            meta = {
              longDescription = ''Elixir websockets library, operation
                                streaming and utilities for Steem blockchain'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cyberpunk-ventures/steemex";
            };
          } // packageOverrides)
      ) {};

    steemex = steemex_0_11_0;

    stem_ex_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "stem_ex";
            version = "0.0.2";
            src = fetchHex {
              pkg = "stem_ex";
              version = "0.0.2";
              sha256 =
                "d8ef8674483250fae76fb30fb88ddf0ee18af71ee5f121d4e6825ffbaa375291";
            };

            meta = {
              description = ''Implementation of the Porter stemming
                            algorithm.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/andyl/stem_ex";
            };
          } // packageOverrides)
      ) {};

    stem_ex = stem_ex_0_0_2;

    stemex_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "stemex";
            version = "0.1.1";
            src = fetchHex {
              pkg = "stemex";
              version = "0.1.1";
              sha256 =
                "219b8e81fedba5a9bb978b8f7eaf230e77f2702d58e409adcca998fde1788521";
            };

            meta = {
              longDescription = ''Stemex is a NIF wrapper above snowball
                                containing stemmers for : danish, dutch,
                                english, finnish, french, german, hungarian,
                                italian, kraaij_pohlmann, lovins, norwegian,
                                portuguese, romanian, russian, spanish, swedish,
                                turkish.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/awetzel/stemex";
            };
          } // packageOverrides)
      ) {};

    stemex = stemex_0_1_1;

    stemmer_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "stemmer";
            version = "1.0.1";
            src = fetchHex {
              pkg = "stemmer";
              version = "1.0.1";
              sha256 =
                "1e31ae042fffadcac53d4fca31cb77d3e9df53d6d19afba85cd89449ed5d5ec6";
            };

            meta = {
              description = ''An English (Porter2) stemming implementation in
                            Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/fredwu/stemmer";
            };
          } // packageOverrides)
      ) {};

    stemmer = stemmer_1_0_1;

    stifle_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "stifle";
            version = "0.1.0";
            src = fetchHex {
              pkg = "stifle";
              version = "0.1.0";
              sha256 =
                "c5885b7501b68b5855782648ed72fdc27b8805c438279f25fe8a335a2003f5b5";
            };

            meta = {
              longDescription = ''Stifle is a library for suppressing
                                side-effects (raises, exits, etc) in Elixir
                                functions, allowing the developer to replay side
                                effects in the current process or inspect the
                                effect/return value safely.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/appcues/stifle";
            };
          } // packageOverrides)
      ) {};

    stifle = stifle_0_1_0;

    stillir_1_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "stillir";
            version = "1.0.0";
            src = fetchHex {
              pkg = "stillir";
              version = "1.0.0";
              sha256 =
                "04afdee2e5123b6da11fcc28c38d581f74db0cbe1faa1c36ed4f364797b588c0";
            };

            meta = {
              description = ''Read Unix env vars into application config'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/heroku/stillir";
            };
          } // packageOverrides)
      ) {};

    stillir = stillir_1_0_0;

    stmd_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          earmark_0_2_1,
          ex_doc_0_16_1
        }:
          buildMix ({
            name = "stmd";
            version = "0.0.2";
            src = fetchHex {
              pkg = "stmd";
              version = "0.0.2";
              sha256 =
                "3b45578da652e881b1974bbe836d9b8e0e8db8d6ef0042aee69340d5eaf2d9b3";
            };
            beamDeps  = [ earmark_0_2_1 ex_doc_0_16_1 ];

            meta = {
              description = ''[DEPRECATED] New package: cmark'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/asaaki/cmark.ex";
            };
          } // packageOverrides)
      ) {};

    stmd = stmd_0_0_2;

    stockastic_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exjsx_3_2_1,
          httpoison_0_11_2
        }:
          buildMix ({
            name = "stockastic";
            version = "0.0.2";
            src = fetchHex {
              pkg = "stockastic";
              version = "0.0.2";
              sha256 =
                "f180915a21d4aa4a64f660696b77c5788334d4bae2639a58814565af0d75ca56";
            };
            beamDeps  = [ exjsx_3_2_1 httpoison_0_11_2 ];

            meta = {
              description = ''Simple Elixir wrapper for the Stockfighter API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/shanewilton/stockastic";
            };
          } // packageOverrides)
      ) {};

    stockastic = stockastic_0_0_2;

    stockfighter_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_8_3,
          poison_1_5_2
        }:
          buildMix ({
            name = "stockfighter";
            version = "0.0.1";
            src = fetchHex {
              pkg = "stockfighter";
              version = "0.0.1";
              sha256 =
                "d72726cf055068e2b62ef9091ec17ab9292b60bc7f4a7306c17cad6d022a3bd7";
            };
            beamDeps  = [ httpoison_0_8_3 poison_1_5_2 ];

            meta = {
              description = ''a simple wrapper of stockfighter http api'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lerencao/stockfighter";
            };
          } // packageOverrides)
      ) {};

    stockfighter = stockfighter_0_0_1;

    stomp_client_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "stomp_client";
            version = "0.1.0";
            src = fetchHex {
              pkg = "stomp_client";
              version = "0.1.0";
              sha256 =
                "f0010083b9c0faf9776543757697a7f727be2bf634d11bc45f8e1daa7de5c935";
            };

            meta = {
              description = ''STOMP client for Elixir with broker specific
                            addons'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/miwee/stomp_client";
            };
          } // packageOverrides)
      ) {};

    stomp_client = stomp_client_0_1_0;

    stone_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "stone";
            version = "0.2.0";
            src = fetchHex {
              pkg = "stone";
              version = "0.2.0";
              sha256 =
                "30e5d141e9f0771dc5737b75ecd9bab5d278dd021954a4ff3b38060e0d42ce52";
            };

            meta = {
              description = ''Metaprogramming utilities for the Elixir
                            language.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/MillionIntegrals/stone";
            };
          } // packageOverrides)
      ) {};

    stone = stone_0_2_0;

    stopwatch_0_0_7 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, timex_3_0_5 }:
          buildMix ({
            name = "stopwatch";
            version = "0.0.7";
            src = fetchHex {
              pkg = "stopwatch";
              version = "0.0.7";
              sha256 =
                "de20ad70ca3b0f70d0a2000858e80c0afd4163101e18d0428ee62a58e7c8360a";
            };
            beamDeps  = [ timex_3_0_5 ];

            meta = {
              description = ''The stopwatch provides an easy api to measure
                            elapsed time and profile code.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/matteosister/stopwatch";
            };
          } // packageOverrides)
      ) {};

    stopwatch = stopwatch_0_0_7;

    storebrand_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_6_1,
          httpoison_0_9_2,
          poison_2_2_0,
          uuid_1_1_7
        }:
          buildMix ({
            name = "storebrand";
            version = "0.1.0";
            src = fetchHex {
              pkg = "storebrand";
              version = "0.1.0";
              sha256 =
                "072dda02ca189a0d20f8bd40c0858eae35267644fc5237425c882d194b977b0e";
            };
            beamDeps  = [
                          hackney_1_6_1 httpoison_0_9_2 poison_2_2_0 uuid_1_1_7
                        ];

            meta = {
              description = ''Wrapper to use Storebrand REST API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/eyrmedical/storebrand";
            };
          } // packageOverrides)
      ) {};

    storebrand = storebrand_0_1_0;

    stout_1_0_0 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          erlang_color_1_0_0,
          lager_3_2_4
        }:
          buildRebar3 ({
            name = "stout";
            version = "1.0.0";
            src = fetchHex {
              pkg = "stout";
              version = "1.0.0";
              sha256 =
                "fdb82f9a1e18d86c8998da0e5884975d6c680430de63b3ecee5f4e647968e98d";
            };

            beamDeps  = [ erlang_color_1_0_0 lager_3_2_4 ];

            meta = {
              description = ''Stylized Output for Lager'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/eproxus/stout";
            };
          } // packageOverrides)
      ) {};

    stout = stout_1_0_0;

    strand_0_5_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "strand";
            version = "0.5.0";
            src = fetchHex {
              pkg = "strand";
              version = "0.5.0";
              sha256 =
                "550f345b9c4d76d97984e5f89fb28fe31065dc98b877e31c6f922241b6e7a500";
            };

            meta = {
              description = ''graphs, like Loom'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/ckampfe/strand";
            };
          } // packageOverrides)
      ) {};

    strand = strand_0_5_0;

    strava_0_3_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          oauth2_0_9_1,
          poison_3_1_0
        }:
          buildMix ({
            name = "strava";
            version = "0.3.3";
            src = fetchHex {
              pkg = "strava";
              version = "0.3.3";
              sha256 =
                "6b6fcb5367f11e6cef2ae1146d21bef2a277e806473e57c2f54189be19485822";
            };
            beamDeps  = [ httpoison_0_11_2 oauth2_0_9_1 poison_3_1_0 ];

            meta = {
              description = ''Elixir wrapper for the Strava API (V3)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/slashdotdash/strava";
            };
          } // packageOverrides)
      ) {};

    strava = strava_0_3_3;

    stream_perlin_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "stream_perlin";
            version = "0.1.1";
            src = fetchHex {
              pkg = "stream_perlin";
              version = "0.1.1";
              sha256 =
                "08fadc403c75775b052ef411a4c9d665e5c6684ea88b237bce3c24d3c6849123";
            };

            meta = {
              longDescription = ''Generate a stream of random-ish floats
                                between -1 and 1 using the Perlin algorithm.
                                When plotted, the points will tend to form a
                                smooth curve. This is useful when generating
                                mock values that are supposed to be
                                \"natural.\"'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/pragdave/stream_perlin";
            };
          } // packageOverrides)
      ) {};

    stream_perlin = stream_perlin_0_1_1;

    stream_runner_1_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "stream_runner";
            version = "1.1.0";
            src = fetchHex {
              pkg = "stream_runner";
              version = "1.1.0";
              sha256 =
                "3c2da3658440ba57224cd484de4b0d8b128e5463413ac05285cdfa4b37e30798";
            };

            meta = {
              description = ''Run a Stream as a process'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/fishcakez/stream_runner";
            };
          } // packageOverrides)
      ) {};

    stream_runner = stream_runner_1_1_0;

    stream_split_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "stream_split";
            version = "0.1.2";
            src = fetchHex {
              pkg = "stream_split";
              version = "0.1.2";
              sha256 =
                "e57e54a39b85f3e4097efcc7dcae66c41a533ab3f7cdc776d17be8fbfec7ff5c";
            };

            meta = {
              description = ''Split a stream into a head and tail, without
                            iterating the tail'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tallakt/stream_split";
            };
          } // packageOverrides)
      ) {};

    stream_split = stream_split_0_1_2;

    stream_weaver_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "stream_weaver";
            version = "0.0.2";
            src = fetchHex {
              pkg = "stream_weaver";
              version = "0.0.2";
              sha256 =
                "6664a585d4afaac63e69f367e79bcc6af886dbebd1f8b66a099f6164973dc168";
            };

            meta = {
              description = ''Library for working with streams'';

            };
          } // packageOverrides)
      ) {};

    stream_weaver = stream_weaver_0_0_2;

    stream_x_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "stream_x";
            version = "0.0.1";
            src = fetchHex {
              pkg = "stream_x";
              version = "0.0.1";
              sha256 =
                "68832e9ac5542ca7763e5ea8493f2f775b84d79995fd63eda608ef6f786d1395";
            };

            meta = {
              description = ''Extra Elixir Stream utilities'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/koyeung/stream_x";
            };
          } // packageOverrides)
      ) {};

    stream_x = stream_x_0_0_1;

    streamex_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_9_2,
          joken_1_5_0,
          poison_2_2_0,
          timex_3_0_5
        }:
          buildMix ({
            name = "streamex";
            version = "0.3.0";
            src = fetchHex {
              pkg = "streamex";
              version = "0.3.0";
              sha256 =
                "e0a3ab384f8bd53a61009568beedfa66d039bb9e9d26b06e2b2fed37e92fae1d";
            };
            beamDeps  = [
                          httpoison_0_9_2 joken_1_5_0 poison_2_2_0 timex_3_0_5
                        ];

            meta = {
              description = ''A GetStream client for the Elixir language'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sixFingers/streamex";
            };
          } // packageOverrides)
      ) {};

    streamex = streamex_0_3_0;

    strftimerl_0_1_2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "strftimerl";
            version = "0.1.2";
            src = fetchHex {
              pkg = "strftimerl";
              version = "0.1.2";
              sha256 =
                "98552c68ce49ed2405768d2ecec0fd81e4d679f940c7f80a4ef16f45abdf9c24";
            };

            meta = {
              description = ''strftime formatting in erlang'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/gmr/strftimerl";
            };
          } // packageOverrides)
      ) {};

    strftimerl = strftimerl_0_1_2;

    strict_comparison_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "strict_comparison";
            version = "0.0.1";
            src = fetchHex {
              pkg = "strict_comparison";
              version = "0.0.1";
              sha256 =
                "c033d7c5befc4971171a20c8fce96ae04fc0ebf0bae790b7ee0e7498f9d7997e";
            };

            meta = {
              description = ''Provides strict number comparison in both regular
                            code and guards.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/antipax/strict_comparison";
            };
          } // packageOverrides)
      ) {};

    strict_comparison = strict_comparison_0_0_1;

    stringify_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "stringify";
            version = "0.1.1";
            src = fetchHex {
              pkg = "stringify";
              version = "0.1.1";
              sha256 =
                "e09b6c44767522b540a34b021ee60bce859390548954837fb9843ccaa5524e0b";
            };

            meta = {
              description = ''Brings Ruby style inspect and Javascript style
                            stringify to elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/MishaConway/elixir-stringify";
            };
          } // packageOverrides)
      ) {};

    stringify = stringify_0_1_1;

    stringprep_1_0_9 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, p1_utils_1_0_9
        }:
          buildRebar3 ({
            name = "stringprep";
            version = "1.0.9";
            src = fetchHex {
              pkg = "stringprep";
              version = "1.0.9";
              sha256 =
                "9f535e3cdf09379a8bae52e4ce63529d50770bce7fd702c299b2f4c98055d2b3";
            };
            compilePorts = true;

            beamDeps  = [ p1_utils_1_0_9 ];

            meta = {
              description = ''Fast Stringprep Erlang / Elixir implementation'';
              license = with stdenv.lib.licenses; [ asl20 free ];
              homepage = "https://github.com/processone/stringprep";
            };
          } // packageOverrides)
      ) {};

    stringprep = stringprep_1_0_9;

    strinx_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "strinx";
            version = "0.2.1";
            src = fetchHex {
              pkg = "strinx";
              version = "0.2.1";
              sha256 =
                "b3a083b3c0f28d35d283cb5e50b03798840e401eb723d44d8e9137735a3798e7";
            };

            meta = {
              longDescription = ''Some string transformation functions for
                                Elixir. Heavily inspired by ActiveSupport`s
                                String extensions (Ruby).'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/asaaki/strinx.ex";
            };
          } // packageOverrides)
      ) {};

    strinx = strinx_0_2_1;

    strip_heredoc_0_8_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "strip_heredoc";
            version = "0.8.0";
            src = fetchHex {
              pkg = "strip_heredoc";
              version = "0.8.0";
              sha256 =
                "e6a94fbb4eab338de2fdad9839c5f8343c4353cbc865f75468ad2507899095c0";
            };

            meta = {
              longDescription = ''This is a one-method utility library for
                                Elixir projects that needs to strips indentation
                                in heredocs.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/wnuqui/strip_heredoc";
            };
          } // packageOverrides)
      ) {};

    strip_heredoc = strip_heredoc_0_8_0;

    stripe_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_2_2_1,
          jazz_0_2_1
        }:
          buildMix ({
            name = "stripe";
            version = "0.0.1";
            src = fetchHex {
              pkg = "stripe";
              version = "0.0.1";
              sha256 =
                "99f9920ce562109abb70a1998a4f6b5bcd07f5063237cf28dd81387163df3f02";
            };
            beamDeps  = [ httpotion_2_2_1 jazz_0_2_1 ];

            meta = {
              longDescription = ''Wrapper around Stripe`s API. Full
                                documentation can be found at
                                https://stripe.com/docs/api '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/SenecaSystems/stripe";
            };
          } // packageOverrides)
      ) {};

    stripe = stripe_0_0_1;

    stripe_callbacks_0_5_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_4,
          poison_3_1_0,
          postgrex_0_13_3,
          stripe_post_0_4_0
        }:
          buildMix ({
            name = "stripe_callbacks";
            version = "0.5.1";
            src = fetchHex {
              pkg = "stripe_callbacks";
              version = "0.5.1";
              sha256 =
                "ec85e38d86fb6b139969f2a89d00acb63d9cf61ac10f187059912b21de3ebe34";
            };
            beamDeps  = [
                          ecto_2_1_4
                          poison_3_1_0
                          postgrex_0_13_3
                          stripe_post_0_4_0
                        ];

            meta = {
              description = ''A mechanism to post and store Stripe
                            callbacks.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/aforward/stripe-callbacks";
            };
          } // packageOverrides)
      ) {};

    stripe_callbacks = stripe_callbacks_0_5_1;

    stripe_client_0_0_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_8_3,
          poison_1_0_2
        }:
          buildMix ({
            name = "stripe_client";
            version = "0.0.3";
            src = fetchHex {
              pkg = "stripe_client";
              version = "0.0.3";
              sha256 =
                "65e0ccb157592718e74a3893aec5b2b1fc4ec0ad823fc3ddb8ae3619369ef832";
            };
            beamDeps  = [ httpoison_0_8_3 poison_1_0_2 ];

            meta = {
              description = ''Yet another Stripe client for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/keichan34/stripe_client";
            };
          } // packageOverrides)
      ) {};

    stripe_client = stripe_client_0_0_3;

    stripe_elixir_0_6_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "stripe_elixir";
            version = "0.6.0";
            src = fetchHex {
              pkg = "stripe_elixir";
              version = "0.6.0";
              sha256 =
                "a47f8598198b394bbe5c11b2ddc1ac369652f0b4e2c5d4744b56d5fb981188f8";
            };
            beamDeps  = [ httpoison_0_11_2 poison_2_2_0 ];

            meta = {
              description = ''Stripe API Client for Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/sikanhe/stripe-elixir";
            };
          } // packageOverrides)
      ) {};

    stripe_elixir = stripe_elixir_0_6_0;

    stripe_eventex_1_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_0_4,
          plug_1_3_5,
          poison_2_2_0
        }:
          buildMix ({
            name = "stripe_eventex";
            version = "1.0.0";
            src = fetchHex {
              pkg = "stripe_eventex";
              version = "1.0.0";
              sha256 =
                "2117888a402c9aececb50c46e8f0746efc1ca6eb39e6a974608384ea8541e83e";
            };
            beamDeps  = [ cowboy_1_0_4 plug_1_3_5 poison_2_2_0 ];

            meta = {
              description = ''Stripe webhook integration for Plug.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gearnode/stripe_eventex";
            };
          } // packageOverrides)
      ) {};

    stripe_eventex = stripe_eventex_1_0_0;

    stripe_post_0_4_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "stripe_post";
            version = "0.4.0";
            src = fetchHex {
              pkg = "stripe_post";
              version = "0.4.0";
              sha256 =
                "dc1acb94ba3ce3b9c63b3efe398fc633b1c5b05cb4a01f697ae790e9f62661d1";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''A minimal library for posting messages to the
                            Stripe API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/aforward/stripe-post";
            };
          } // packageOverrides)
      ) {};

    stripe_post = stripe_post_0_4_0;

    stripex_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, gateway_0_0_6 }:
          buildMix ({
            name = "stripex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "stripex";
              version = "0.1.0";
              sha256 =
                "49959c78e677d3e30edd808cce7a013a7120f337705d0e2fd646c000d9b30853";
            };
            beamDeps  = [ gateway_0_0_6 ];

            meta = {
              longDescription = ''A much more ruby-stripe-like wrapper around
                                Stripe`s API (built with Poison). Full
                                documentation can be found at
                                https://stripe.com/docs/api'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/foxnewsnetwork/stripex";
            };
          } // packageOverrides)
      ) {};

    stripex = stripex_0_1_0;

    stripity_stripe_2_0_0_alpha_8 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_8_6,
          poison_1_0_2,
          uri_query_0_1_2
        }:
          buildMix ({
            name = "stripity_stripe";
            version = "2.0.0-alpha.8";
            src = fetchHex {
              pkg = "stripity_stripe";
              version = "2.0.0-alpha.8";
              sha256 =
                "51991fc25f959e6a7e6dc7d313e3aa76f930d84b881c6834ae88778abe014777";
            };
            beamDeps  = [ hackney_1_8_6 poison_1_0_2 uri_query_0_1_2 ];

            meta = {
              description = ''A Stripe Library for Elixir.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/code-corps/stripity-stripe";
            };
          } // packageOverrides)
      ) {};

    stripity_stripe = stripity_stripe_2_0_0_alpha_8;

    struct_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "struct";
            version = "0.1.3";
            src = fetchHex {
              pkg = "struct";
              version = "0.1.3";
              sha256 =
                "017150c77a0b9ae81b81482a302f45a31db10f8ed02fa9392c7c3bb60d2254e2";
            };

            meta = {
              description = ''Library for dealing with data structures'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/artemeff/struct";
            };
          } // packageOverrides)
      ) {};

    struct = struct_0_1_3;

    struct_fields_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "struct_fields";
            version = "0.3.0";
            src = fetchHex {
              pkg = "struct_fields";
              version = "0.3.0";
              sha256 =
                "d0ec469ccb59d2207a94cb8e3d3ce9b8bf09f239695e33a0e2447e2a1ff2178b";
            };

            meta = {
              description = ''Tiny module to easily get a list of fields for
                            structs.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nTraum/struct_fields";
            };
          } // packageOverrides)
      ) {};

    struct_fields = struct_fields_0_3_0;

    structurez_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "structurez";
            version = "0.0.1";
            src = fetchHex {
              pkg = "structurez";
              version = "0.0.1";
              sha256 =
                "acacce1dfcd92854e75f891468c264689aa8223c21c88064f5c6883e11f3ae12";
            };

            meta = {
              description = ''Additional Data Structures for use in Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hamiltop/structurez";
            };
          } // packageOverrides)
      ) {};

    structurez = structurez_0_0_1;

    stub_alias_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "stub_alias";
            version = "0.1.2";
            src = fetchHex {
              pkg = "stub_alias";
              version = "0.1.2";
              sha256 =
                "556ac1a03776332a131c54305c3cb4bfc2c5b0ef376819f26de681a31f70c32c";
            };

            meta = {
              description = ''Environment specific aliases.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mgwidmann/stub_alias";
            };
          } // packageOverrides)
      ) {};

    stub_alias = stub_alias_0_1_2;

    stubr_1_5_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "stubr";
            version = "1.5.0";
            src = fetchHex {
              pkg = "stubr";
              version = "1.5.0";
              sha256 =
                "5f1c3dd87a266cbd720b3e40e313c74e83753c99769c2f678968cb592e7c3596";
            };

            meta = {
              description = ''Stubr is a set of functions helping people to
                            create stubs and spies in Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/leighshepperson/stubr";
            };
          } // packageOverrides)
      ) {};

    stubr = stubr_1_5_0;

    stun_1_0_11 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          fast_tls_1_0_12,
          p1_utils_1_0_9
        }:
          buildRebar3 ({
            name = "stun";
            version = "1.0.11";
            src = fetchHex {
              pkg = "stun";
              version = "1.0.11";
              sha256 =
                "baef8d626c2aeb640b7db2189c0f208ce74b0e6db1ecaa23ceaa836360555662";
            };

            beamDeps  = [ fast_tls_1_0_12 p1_utils_1_0_9 ];

            meta = {
              description = ''STUN and TURN library for Erlang / Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/processone/stun";
            };
          } // packageOverrides)
      ) {};

    stun = stun_1_0_11;

    styledown_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, execjs_1_1_3 }:
          buildMix ({
            name = "styledown";
            version = "0.0.3";
            src = fetchHex {
              pkg = "styledown";
              version = "0.0.3";
              sha256 =
                "8dc31569257a9d5fe3eb67ca87d0cd29f6d14c4a62191262b41a28fc9bca18fc";
            };
            beamDeps  = [ execjs_1_1_3 ];

            meta = {
              description = ''Elixir integration of Styledown'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/styledown/styledown_ex";
            };
          } // packageOverrides)
      ) {};

    styledown = styledown_0_0_3;

    styledown2_source_2_0_0_pre12 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "styledown2_source";
            version = "2.0.0-pre12";
            src = fetchHex {
              pkg = "styledown2_source";
              version = "2.0.0-pre12";
              sha256 =
                "72ec2ccd9ec7cbfe177e789678d740b9b40ead87057d0fd4dc885a585362e0ee";
            };

            meta = {
              description = ''Write maintainable CSS styleguides using
                            Markdown.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/styledown/styledown2";
            };
          } // packageOverrides)
      ) {};

    styledown2_source = styledown2_source_2_0_0_pre12;

    sub_db_0_1_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_6_6,
          tesla_0_5_2
        }:
          buildMix ({
            name = "sub_db";
            version = "0.1.3";
            src = fetchHex {
              pkg = "sub_db";
              version = "0.1.3";
              sha256 =
                "57416648de135c420874fe1975302c5b902b3071c1b7ce91024ab8b2916fa877";
            };
            beamDeps  = [ hackney_1_6_6 tesla_0_5_2 ];

            meta = {
              description = ''Elixir client for SubDB API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/aradunovic/sub-db";
            };
          } // packageOverrides)
      ) {};

    sub_db = sub_db_0_1_3;

    subscribex_0_7_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, amqp_0_2_0_pre_2 }:
          buildMix ({
            name = "subscribex";
            version = "0.7.0";
            src = fetchHex {
              pkg = "subscribex";
              version = "0.7.0";
              sha256 =
                "4666265df0b7b984f68f261d014c58c5e73fc306e8073e2954eb6df84a717d4c";
            };
            beamDeps  = [ amqp_0_2_0_pre_2 ];

            meta = {
              description = ''A high-level library for making RabbitMQ
                            subscribers'';
              license = stdenv.lib.licenses.free;
              homepage = "http://github.com/cjpoll/subscribex";
            };
          } // packageOverrides)
      ) {};

    subscribex = subscribex_0_7_0;

    sudoku_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "sudoku";
            version = "1.0.1";
            src = fetchHex {
              pkg = "sudoku";
              version = "1.0.1";
              sha256 =
                "9cc0c38bd1098877802f522714646d4b7b47b62ccac49595531f1d3e30a07dbb";
            };

            meta = {
              description = ''Sudoku solver in Elixir, which prefers to use
                            heuristics over guessing'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ewildgoose/elixir-sudoku";
            };
          } // packageOverrides)
      ) {};

    sudoku = sudoku_1_0_1;

    sudokumotron_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "sudokumotron";
            version = "0.1.0";
            src = fetchHex {
              pkg = "sudokumotron";
              version = "0.1.0";
              sha256 =
                "f5ed8a6813e6721188bd96ff6472ae70bbcc96660b0e8425809c7de9f6b30eaf";
            };

            meta = {
              description = ''A very simple package to try and solve sudoku
                            puzzles'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/joelbyler/sudokumotron";
            };
          } // packageOverrides)
      ) {};

    sudokumotron = sudokumotron_0_1_0;

    sugar_0_5_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          http_router_0_10_0,
          plug_1_3_5,
          plugs_0_1_1,
          poison_3_1_0,
          templates_0_0_5
        }:
          buildMix ({
            name = "sugar";
            version = "0.5.0";
            src = fetchHex {
              pkg = "sugar";
              version = "0.5.0";
              sha256 =
                "89703a1537e7b163b420f4e684d998a43752fa9b51e3b25692102ada7f622166";
            };
            beamDeps  = [
                          cowboy_1_1_2
                          http_router_0_10_0
                          plug_1_3_5
                          plugs_0_1_1
                          poison_3_1_0
                          templates_0_0_5
                        ];

            meta = {
              description = ''Modular web framework'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sugar-framework/sugar";
            };
          } // packageOverrides)
      ) {};

    sugar = sugar_0_5_0;

    sumo_db_0_6_1 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          lager_3_2_1,
          uuid_erl_1_5_2_rc1,
          worker_pool_2_0_1
        }:
          buildRebar3 ({
            name = "sumo_db";
            version = "0.6.1";
            src = fetchHex {
              pkg = "sumo_db";
              version = "0.6.1";
              sha256 =
                "052704a8d1af29361f3abe03701b29bebfe7b6b9bea8626a2353ba0b4d4a4791";
            };

            beamDeps  = [ lager_3_2_1 uuid_erl_1_5_2_rc1 worker_pool_2_0_1 ];

            meta = {
              description = ''A simple persistance layer'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/inaka/sumo_db";
            };
          } // packageOverrides)
      ) {};

    sumo_db_0_6_4 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          lager_3_2_1,
          uuid_erl_1_5_2_rc1,
          worker_pool_2_0_1
        }:
          buildRebar3 ({
            name = "sumo_db";
            version = "0.6.4";
            src = fetchHex {
              pkg = "sumo_db";
              version = "0.6.4";
              sha256 =
                "158faa9a26ef139ddbf98a4d463160245d3b95d7b4b7bec84aa51e49cc4a5c32";
            };

            beamDeps  = [ lager_3_2_1 uuid_erl_1_5_2_rc1 worker_pool_2_0_1 ];

            meta = {
              description = ''A simple persistance layer'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/inaka/sumo_db";
            };
          } // packageOverrides)
      ) {};

    sumo_db_0_7_1 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          lager_3_2_1,
          uuid_erl_1_5_2_rc1,
          worker_pool_2_0_1
        }:
          buildRebar3 ({
            name = "sumo_db";
            version = "0.7.1";
            src = fetchHex {
              pkg = "sumo_db";
              version = "0.7.1";
              sha256 =
                "02de4a54d3ce785f4e65d66c6e9be60ea231ba55fa18912be62e10389526d530";
            };

            beamDeps  = [ lager_3_2_1 uuid_erl_1_5_2_rc1 worker_pool_2_0_1 ];

            meta = {
              description = ''A simple persistance layer'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/inaka/sumo_db";
            };
          } // packageOverrides)
      ) {};

    sumo_db_0_7_2 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          iso8601_1_2_3,
          lager_3_2_4,
          uuid_erl_1_5_4,
          worker_pool_2_0_1
        }:
          buildRebar3 ({
            name = "sumo_db";
            version = "0.7.2";
            src = fetchHex {
              pkg = "sumo_db";
              version = "0.7.2";
              sha256 =
                "2e7c4d95778097e1fe078cfe28ecc822d81a4ee833fe416efd4626be41444b58";
            };

            beamDeps  = [
                          iso8601_1_2_3
                          lager_3_2_4
                          uuid_erl_1_5_4
                          worker_pool_2_0_1
                        ];

            meta = {
              description = ''A simple persistance layer'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/inaka/sumo_db";
            };
          } // packageOverrides)
      ) {};

    sumo_db = sumo_db_0_7_2;

    sumo_db_mysql_0_0_2 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          inaka_emysql_0_4_4,
          lager_3_2_1,
          sumo_db_0_6_1
        }:
          buildRebar3 ({
            name = "sumo_db_mysql";
            version = "0.0.2";
            src = fetchHex {
              pkg = "sumo_db_mysql";
              version = "0.0.2";
              sha256 =
                "508857ab77d9dafce62ae2c4617af9d80202e2b4bfac069535105cc2b98ab804";
            };

            beamDeps  = [ inaka_emysql_0_4_4 lager_3_2_1 sumo_db_0_6_1 ];

            meta = {
              description = ''SumoDB MySQL Adapter'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/inaka/sumo_db_mysql";
            };
          } // packageOverrides)
      ) {};

    sumo_db_mysql = sumo_db_mysql_0_0_2;

    sumo_db_pgsql_0_1_2 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          epgsql_3_2_0,
          lager_3_2_1,
          sumo_db_0_7_1
        }:
          buildRebar3 ({
            name = "sumo_db_pgsql";
            version = "0.1.2";
            src = fetchHex {
              pkg = "sumo_db_pgsql";
              version = "0.1.2";
              sha256 =
                "52f0d76268d3c4a010064939616abd654717d346df7c2c0ee0b92091d0c887bf";
            };

            beamDeps  = [ epgsql_3_2_0 lager_3_2_1 sumo_db_0_7_1 ];

            meta = {
              description = ''SumoDB PGSQL Adapter'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/inaka/sumo_db_pgsql";
            };
          } // packageOverrides)
      ) {};

    sumo_db_pgsql = sumo_db_pgsql_0_1_2;

    sumo_db_riak_0_1_0 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          inaka_iso8601_1_1_2,
          riakc_2_5_3,
          sumo_db_0_7_2
        }:
          buildRebar3 ({
            name = "sumo_db_riak";
            version = "0.1.0";
            src = fetchHex {
              pkg = "sumo_db_riak";
              version = "0.1.0";
              sha256 =
                "e62df37a166127be8671c4336671eac1a255ae8989bd9023afb193c5b9a482d3";
            };

            beamDeps  = [ inaka_iso8601_1_1_2 riakc_2_5_3 sumo_db_0_7_2 ];

            meta = {
              description = ''SumoDB Riak Adapter.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/inaka/sumo_db_riak";
            };
          } // packageOverrides)
      ) {};

    sumo_db_riak = sumo_db_riak_0_1_0;

    sumo_rest_0_3_4 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_0_4,
          cowboy_swagger_1_1_0,
          inaka_iso8601_1_1_2,
          inaka_mixer_0_1_5,
          jiffy_0_14_7,
          sumo_db_0_6_4,
          trails_0_2_0
        }:
          buildRebar3 ({
            name = "sumo_rest";
            version = "0.3.4";
            src = fetchHex {
              pkg = "sumo_rest";
              version = "0.3.4";
              sha256 =
                "af4a2970a55622a26a37dbca68757f9f3e0506590107f5ba453266880ea4f42e";
            };

            beamDeps  = [
                          cowboy_1_0_4
                          cowboy_swagger_1_1_0
                          inaka_iso8601_1_1_2
                          inaka_mixer_0_1_5
                          jiffy_0_14_7
                          sumo_db_0_6_4
                          trails_0_2_0
                        ];

            meta = {
              description = ''Generic cowboy handlers to work with Sumo'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/inaka/sumo_rest";
            };
          } // packageOverrides)
      ) {};

    sumo_rest = sumo_rest_0_3_4;

    sunta_1_0_0_alpha_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "sunta";
            version = "1.0.0-alpha.1";
            src = fetchHex {
              pkg = "sunta";
              version = "1.0.0-alpha.1";
              sha256 =
                "de62d245815fb23b9be0082bb723fe4d6e7493b00f9dde8d5f468b3019c07b71";
            };

            meta = {
              description = ''Web API Framework'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/su-mi-lab/sunta";
            };
          } // packageOverrides)
      ) {};

    sunta = sunta_1_0_0_alpha_1;

    supermemo_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, timex_3_0_5 }:
          buildMix ({
            name = "supermemo";
            version = "1.0.0";
            src = fetchHex {
              pkg = "supermemo";
              version = "1.0.0";
              sha256 =
                "d8afa9ed4f8d18d835eb60b68c36ef4ee8489d0abed5051fde20dc433ea8a076";
            };
            beamDeps  = [ timex_3_0_5 ];

            meta = {
              longDescription = ''An Elixir implementation of the Supermemo 2
                                Algorithm as described here:
                                http://www.supermemo.com/english/ol/sm2.htm. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/edubkendo/supermemo";
            };
          } // packageOverrides)
      ) {};

    supermemo = supermemo_1_0_0;

    superscrape_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          scrape_1_2_7,
          wayback_0_1_0
        }:
          buildMix ({
            name = "superscrape";
            version = "0.1.0";
            src = fetchHex {
              pkg = "superscrape";
              version = "0.1.0";
              sha256 =
                "05b809134049409e74822bd8c3200f25d8856e8bb8824a947a8b4aa955133a00";
            };
            beamDeps  = [ scrape_1_2_7 wayback_0_1_0 ];

            meta = {
              longDescription = ''Read an Atom/RSS feed and concatenate it with
                                deduplicated historical items from past versions
                                saved in the Wayback Machine.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lukeed/elixir-superscrape";
            };
          } // packageOverrides)
      ) {};

    superscrape = superscrape_0_1_0;

    supervisor3_1_1_5 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex }:
          buildErlangMk ({
            name = "supervisor3";
            version = "1.1.5";
            src = fetchHex {
              pkg = "supervisor3";
              version = "1.1.5";
              sha256 =
                "e6f489d6b819df4d8f202eb00a77515a949bf87dae4d0a060f534722a63d8977";
            };

            meta = {
              description = ''A copy of supervisor.erl from the R16B Erlang/OTP
                            with modifications'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/klarna/supervisor3";
            };
          } // packageOverrides)
      ) {};

    supervisor3 = supervisor3_1_1_5;

    supervisord_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_7_5,
          xmlrpc_0_9_1
        }:
          buildMix ({
            name = "supervisord";
            version = "0.1.0";
            src = fetchHex {
              pkg = "supervisord";
              version = "0.1.0";
              sha256 =
                "628bd1f94bff68048e270fec788250ca4adf888a9b9e20e6963958dec43f8ee0";
            };
            beamDeps  = [ httpoison_0_7_5 xmlrpc_0_9_1 ];

            meta = {
              description = ''Supervisord library for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/pocketberserker/elixir-supervisord";
            };
          } // packageOverrides)
      ) {};

    supervisord = supervisord_0_1_0;

    supool_1_5_4 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "supool";
            version = "1.5.4";
            src = fetchHex {
              pkg = "supool";
              version = "1.5.4";
              sha256 =
                "a3259a09365950616a28c2ae14d2d2fe4179101d77c6c886441611b7c6aa420f";
            };

            meta = {
              description = ''Erlang Process Pool as a Supervisor'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/okeuday/supool";
            };
          } // packageOverrides)
      ) {};

    supool_1_6_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "supool";
            version = "1.6.0";
            src = fetchHex {
              pkg = "supool";
              version = "1.6.0";
              sha256 =
                "ecb7adef4c12d2549909d4863f6525380163ae4fc66a9a4ed35bc103691989e9";
            };

            meta = {
              description = ''Erlang Process Pool as a Supervisor'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/okeuday/supool";
            };
          } // packageOverrides)
      ) {};

    supool_1_7_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "supool";
            version = "1.7.1";
            src = fetchHex {
              pkg = "supool";
              version = "1.7.1";
              sha256 =
                "b7d4ea7aff12f54c1ea5a20c806de5fbc1a7063ee455411a487986d578ec0031";
            };

            meta = {
              description = ''Erlang Process Pool as a Supervisor'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/okeuday/supool";
            };
          } // packageOverrides)
      ) {};

    supool = supool_1_7_1;

    surge_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "surge";
            version = "0.0.1";
            src = fetchHex {
              pkg = "surge";
              version = "0.0.1";
              sha256 =
                "345f9104701126b7fac216b57526eb9af6a98c1486fccdcbef357a4142cb4aa4";
            };

            meta = {
              description = ''Amazon DynamoDB for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hirocaster/surge";
            };
          } // packageOverrides)
      ) {};

    surge = surge_0_0_1;

    surgex_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, jabbax_0_1_0 }:
          buildMix ({
            name = "surgex";
            version = "0.2.0";
            src = fetchHex {
              pkg = "surgex";
              version = "0.2.0";
              sha256 =
                "ec8537be00173bef7558cc575de20e8766da3be8c69b621e274b264b2e7ab38b";
            };
            beamDeps  = [ jabbax_0_1_0 ];

            meta = {
              description = ''All Things Elixir @ Surge Ventures Inc, the
                            creators of Shedul'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/surgeventures/surgex";
            };
          } // packageOverrides)
      ) {};

    surgex = surgex_0_2_0;

    svgbobex_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, porcelain_2_0_3 }:
          buildMix ({
            name = "svgbobex";
            version = "0.0.1";
            src = fetchHex {
              pkg = "svgbobex";
              version = "0.0.1";
              sha256 =
                "da04e12b68e2cdfb2501a5e24c2be0c46ab301481ca559c74447dee3d45d9940";
            };
            beamDeps  = [ porcelain_2_0_3 ];

            meta = {
              description = ''A simple interface to the svgbob tool.'';
              license = stdenv.lib.licenses.bsd2;
              homepage = "https://github.com/ScrimpyCat/SvgBobEx";
            };
          } // packageOverrides)
      ) {};

    svgbobex = svgbobex_0_0_1;

    swaggerdoc_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_1_0_7,
          phoenix_1_1_9,
          poison_1_5_2
        }:
          buildMix ({
            name = "swaggerdoc";
            version = "0.0.1";
            src = fetchHex {
              pkg = "swaggerdoc";
              version = "0.0.1";
              sha256 =
                "8131fc20821e2dc4f9dd3322dc2e0b8ff1cd25c36338c3eb7d725440edd01405";
            };
            beamDeps  = [ ecto_1_0_7 phoenix_1_1_9 poison_1_5_2 ];

            meta = {
              longDescription = ''The SwaggerDoc module provides a convenience
                                task for generating Swagger API documentation
                                for Phoenix and Ecto-based projects.'';
              license = stdenv.lib.licenses.mpl20;
              homepage = "https://github.com/OpenAperture/swaggerdoc.git";
            };
          } // packageOverrides)
      ) {};

    swaggerdoc = swaggerdoc_0_0_1;

    swapi_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, httpoison_0_8_3 }:
          buildMix ({
            name = "swapi";
            version = "1.0.0";
            src = fetchHex {
              pkg = "swapi";
              version = "1.0.0";
              sha256 =
                "55b40ddd97d632b027463aefccb8d6fa9ffa77f224a25af5565bbaecff5c7a3c";
            };
            beamDeps  = [ httpoison_0_8_3 ];

            meta = {
              description = ''An Elixir wrapper for the Star Wars API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/twhitacre/swapi.ex";
            };
          } // packageOverrides)
      ) {};

    swapi = swapi_1_0_0;

    swappy_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "swappy";
            version = "0.0.2";
            src = fetchHex {
              pkg = "swappy";
              version = "0.0.2";
              sha256 =
                "fec36b526f795e5bd1ebf6d79908e1700f175954e7a20903f6ca52faadff203e";
            };

            meta = {
              description = ''Fast, customizable anagram generator'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nathanl/swappy";
            };
          } // packageOverrides)
      ) {};

    swappy = swappy_0_0_2;

    swarm_3_0_5 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          gen_state_machine_2_0_0,
          libring_1_0_2
        }:
          buildMix ({
            name = "swarm";
            version = "3.0.5";
            src = fetchHex {
              pkg = "swarm";
              version = "3.0.5";
              sha256 =
                "c7aa46a63321a2cd535801447d4bd5f2cf541842cb35b04b395a3f4bda2a6942";
            };
            beamDeps  = [ gen_state_machine_2_0_0 libring_1_0_2 ];

            meta = {
              longDescription = ''A fast, multi-master, distributed global
                                process registry, with automatic distribution of
                                worker processes.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bitwalker/swarm";
            };
          } // packageOverrides)
      ) {};

    swarm = swarm_3_0_5;

    swarm_game_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "swarm_game";
            version = "0.1.0";
            src = fetchHex {
              pkg = "swarm_game";
              version = "0.1.0";
              sha256 =
                "f8f5aeff6b8c347e95de6f1ea76b486fb653938bd18a69019e9020733ca20f9e";
            };

            meta = {
              description = ''In-progress swarm game api.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/holyxiaoxin/elixir-swarm";
            };
          } // packageOverrides)
      ) {};

    swarm_game = swarm_game_0_1_0;

    sweet_xml_0_6_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "sweet_xml";
            version = "0.6.4";
            src = fetchHex {
              pkg = "sweet_xml";
              version = "0.6.4";
              sha256 =
                "527cdae6ebe0f886ece7ca851bdca59b10d460abee3d70fa24351d683724c6fe";
            };

            meta = {
              description = ''An sweet wrapper of :xmerl to help query xml
                            docs'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/awetzel/sweet_xml";
            };
          } // packageOverrides)
      ) {};

    sweet_xml_0_6_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "sweet_xml";
            version = "0.6.5";
            src = fetchHex {
              pkg = "sweet_xml";
              version = "0.6.5";
              sha256 =
                "f79c597e7c511178028811061df8782740f1c7e176eb7807fcfdf42ce3d6eff7";
            };

            meta = {
              description = ''An sweet wrapper of :xmerl to help query xml
                            docs'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/awetzel/sweet_xml";
            };
          } // packageOverrides)
      ) {};

    sweet_xml = sweet_xml_0_6_5;

    switchboard_0_3_2 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_0_4,
          gproc_0_5_0,
          jsx_2_8_0,
          lager_3_0_2
        }:
          buildRebar3 ({
            name = "switchboard";
            version = "0.3.2";
            src = fetchHex {
              pkg = "switchboard";
              version = "0.3.2";
              sha256 =
                "0b1debb284cd63e5220dc56462dafebd1418579bb40a5b8e51dfdf1f50bfbeb3";
            };

            beamDeps  = [ cowboy_1_0_4 gproc_0_5_0 jsx_2_8_0 lager_3_0_2 ];

            meta = {
              description = ''Conduct monitoring and operations across email
                            accounts'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/thusfresh/switchboard";
            };
          } // packageOverrides)
      ) {};

    switchboard = switchboard_0_3_2;

    swoosh_0_8_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          gen_smtp_0_12_0,
          hackney_1_8_6,
          mime_1_1_0,
          plug_1_3_5,
          poison_1_0_2
        }:
          buildMix ({
            name = "swoosh";
            version = "0.8.1";
            src = fetchHex {
              pkg = "swoosh";
              version = "0.8.1";
              sha256 =
                "0d0e9e533ba73b5a819c4d266e3bb60efd256f132adc307104733ede45d00339";
            };
            beamDeps  = [
                          cowboy_1_1_2
                          gen_smtp_0_12_0
                          hackney_1_8_6
                          mime_1_1_0
                          plug_1_3_5
                          poison_1_0_2
                        ];

            meta = {
              longDescription = ''Compose, deliver and test your emails easily
                                in Elixir. Supports SMTP, Sendgrid, Mandrill,
                                Postmark and Mailgun out of the box. Preview
                                your mails in the browser. Great integration
                                with Phoenix.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/swoosh/swoosh";
            };
          } // packageOverrides)
      ) {};

    swoosh = swoosh_0_8_1;

    syn_1_6_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "syn";
            version = "1.6.1";
            src = fetchHex {
              pkg = "syn";
              version = "1.6.1";
              sha256 =
                "9f78986997eb71b8da773b2512355983d17d33ed8c55b24ccbbb77c3b10dcda9";
            };

            meta = {
              description = ''A global Process Registry and Process Group
                            manager.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ostinelli/syn";
            };
          } // packageOverrides)
      ) {};

    syn = syn_1_6_1;

    syn_osc_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, osc_0_1_2 }:
          buildMix ({
            name = "syn_osc";
            version = "0.1.0";
            src = fetchHex {
              pkg = "syn_osc";
              version = "0.1.0";
              sha256 =
                "7cdb75d8e9a64f3e2baf77bce83d06e0da4361d34a82c3ddda68a6efb3d21df9";
            };
            beamDeps  = [ osc_0_1_2 ];

            meta = {
              description = ''SynOSC encoder/decoder for elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/camshaft/syn_osc_ex";
            };
          } // packageOverrides)
      ) {};

    syn_osc = syn_osc_0_1_0;

    sync_0_1_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "sync";
            version = "0.1.3";
            src = fetchHex {
              pkg = "sync";
              version = "0.1.3";
              sha256 =
                "8711534a0f7a12b9fcf1c725c12137e2300584ba9fe5cb1a565e7d4aaa94b92c";
            };

            meta = {
              description = ''Sync - Automatic Code Reloader'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rustyio/sync";
            };
          } // packageOverrides)
      ) {};

    sync = sync_0_1_3;

    synex_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "synex";
            version = "1.0.0";
            src = fetchHex {
              pkg = "synex";
              version = "1.0.0";
              sha256 =
                "e36b72b002b8dca0456f7351ff537d5c025339f8ae84d0624b3aa557764bbe3c";
            };

            meta = {
              longDescription = ''Collection of syntactic sugars for elixir
                                including keys, params, pipe, and shorthand
                                lambda macro `f`'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/hzamani/synex";
            };
          } // packageOverrides)
      ) {};

    synex = synex_1_0_0;

    synq_elixir_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_8_3,
          poison_1_5_2
        }:
          buildMix ({
            name = "synq_elixir";
            version = "0.0.1";
            src = fetchHex {
              pkg = "synq_elixir";
              version = "0.0.1";
              sha256 =
                "09cd56f1e4715abe3f57cd5bbeeeb03bf190f7c5e22ed2bf8c9fc8abc13836fd";
            };
            beamDeps  = [ httpoison_0_8_3 poison_1_5_2 ];

            meta = {
              description = ''A simple synq.fm api implementation'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/SYNQfm/SYNQ-Elixir";
            };
          } // packageOverrides)
      ) {};

    synq_elixir = synq_elixir_0_0_1;

    syntactic_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "syntactic";
            version = "0.0.2";
            src = fetchHex {
              pkg = "syntactic";
              version = "0.0.2";
              sha256 =
                "20adf1f265ebb17ab79d53355b7854c751cee68c73f8a66baca7035da06f65db";
            };

            meta = {
              description = ''A collection of Elixir syntactic sugars.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hzamani/elixir-syntactic";
            };
          } // packageOverrides)
      ) {};

    syntactic = syntactic_0_0_2;

    synthex_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "synthex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "synthex";
              version = "0.1.0";
              sha256 =
                "111932916800698a032b9cf7e883146613acc788d165066210e1e09b00e476bc";
            };

            meta = {
              description = ''A signal synthesis library'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/bitgamma/synthex";
            };
          } // packageOverrides)
      ) {};

    synthex = synthex_0_1_0;

    syringe_0_10_8 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "syringe";
            version = "0.10.8";
            src = fetchHex {
              pkg = "syringe";
              version = "0.10.8";
              sha256 =
                "5d8bd5acb55464781c2e19fb6d080ee3c4911787274255693027f213e1deb425";
            };

            meta = {
              longDescription = ''A full library to help inject implementations
                                at build time. With this power we can have a
                                strong mocking framework that can also be
                                asynchronous in test.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/skylerparr/syringe";
            };
          } // packageOverrides)
      ) {};

    syringe = syringe_0_10_8;

    syslog_1_0_2 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex }:
          buildErlangMk ({
            name = "syslog";
            version = "1.0.2";
            src = fetchHex {
              pkg = "syslog";
              version = "1.0.2";
              sha256 =
                "ca158a84afe482f77cb4668383a6108f1e9190fcdf3035858f426b91b2021bf6";
            };

            meta = {
              description = ''Erlang port driver for interacting with syslog
                            via syslog'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/Vagabond/erlang-syslog";
            };
          } // packageOverrides)
      ) {};

    syslog = syslog_1_0_2;

    syslog_app_3_2_0 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex }:
          buildErlangMk ({
            name = "syslog_app";
            version = "3.2.0";
            src = fetchHex {
              pkg = "syslog_app";
              version = "3.2.0";
              sha256 =
                "84b72ca3be43711a687d7492b2d60042a6c623b4b5daabafdf7b739beb6b7143";
            };

            meta = {
              description = ''A Syslog-based logging framework.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/schlagert/syslog";
            };
          } // packageOverrides)
      ) {};

    syslog_app = syslog_app_3_2_0;

    syslog_socket_1_6_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "syslog_socket";
            version = "1.6.0";
            src = fetchHex {
              pkg = "syslog_socket";
              version = "1.6.0";
              sha256 =
                "4febd7bf027d014949ffebfb067070fddca923f5895c6bff84d5cfa659fd7c4b";
            };

            meta = {
              description = ''Erlang syslog Client Interface'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/okeuday/syslog_socket";
            };
          } // packageOverrides)
      ) {};

    syslog_socket_1_7_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "syslog_socket";
            version = "1.7.1";
            src = fetchHex {
              pkg = "syslog_socket";
              version = "1.7.1";
              sha256 =
                "6440caf27984fd67927f514a933bf42c397c174416942934802cd52ceed52e27";
            };

            meta = {
              description = ''Erlang syslog Client Interface'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/okeuday/syslog_socket";
            };
          } // packageOverrides)
      ) {};

    syslog_socket = syslog_socket_1_7_1;

    system_env_loader_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "system_env_loader";
            version = "0.1.0";
            src = fetchHex {
              pkg = "system_env_loader";
              version = "0.1.0";
              sha256 =
                "b271e8dcc857d7e36159554c343ed0af950e9dc8adf0f4cee399228142f68ec6";
            };

            meta = {
              longDescription = ''A little package to load (bashlike) files
                                with exported ENV variables into Elixir
                                runtime'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ruby2elixir/system_env_loader";
            };
          } // packageOverrides)
      ) {};

    system_env_loader = system_env_loader_0_1_0;

    system_registry_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "system_registry";
            version = "0.2.0";
            src = fetchHex {
              pkg = "system_registry";
              version = "0.2.0";
              sha256 =
                "8490ef76e4a52aca950e11f1a0ce249979d4f9492794a09889ef69da0b77345c";
            };

            meta = {
              description = ''Atomic nested term storage and dispatch
                            registry'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/mobileoverlord/system_registry";
            };
          } // packageOverrides)
      ) {};

    system_registry = system_registry_0_2_0;

    t_digest_0_1_1 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, shorter_maps_1_2_0
        }:
          buildMix ({
            name = "t_digest";
            version = "0.1.1";
            src = fetchHex {
              pkg = "t_digest";
              version = "0.1.1";
              sha256 =
                "2f57ade419cec604f58dd8fab9ca195bad1ed65f985867c6ceab41b0c0a267b2";
            };
            beamDeps  = [ shorter_maps_1_2_0 ];

            meta = {
              description = ''Elixir native implementation of Dunning`s
                            t-digests.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/meyercm/elixir-t_digest";
            };
          } // packageOverrides)
      ) {};

    t_digest = t_digest_0_1_1;

    table_0_0_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "table";
            version = "0.0.5";
            src = fetchHex {
              pkg = "table";
              version = "0.0.5";
              sha256 =
                "8d1f3ac55512f92eeba1345842278ee6f89d2a4f19be0e272a5f32a958f066d5";
            };

            meta = {
              description = ''ascii tables for cli'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zweifisch/table";
            };
          } // packageOverrides)
      ) {};

    table = table_0_0_5;

    table_rex_0_10_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "table_rex";
            version = "0.10.0";
            src = fetchHex {
              pkg = "table_rex";
              version = "0.10.0";
              sha256 =
                "215efe8db18b5dab45698aa16bf03b418e50bc0437f8654430560af3e1095a4f";
            };

            meta = {
              description = ''Generate configurable text-based tables for
                            display (ASCII & more)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/djm/table_rex";
            };
          } // packageOverrides)
      ) {};

    table_rex = table_rex_0_10_0;

    table_rex_0_8_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "table_rex";
            version = "0.8.2";
            src = fetchHex {
              pkg = "table_rex";
              version = "0.8.2";
              sha256 =
                "e71d5ddb7f54a005c676a946b3bf5d4c17e1eff3613c73bd6a936082ad0a3f63";
            };

            meta = {
              description = ''Generate configurable text-based tables for
                            display (ASCII & more)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/djm/table_rex";
            };
          } // packageOverrides)
      ) {};

    table_rex_0_8_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "table_rex";
            version = "0.8.3";
            src = fetchHex {
              pkg = "table_rex";
              version = "0.8.3";
              sha256 =
                "77cbe2a76a7c35682fe6982603edfee9d56006157232dc936eac4a0287a2e638";
            };

            meta = {
              description = ''Generate configurable text-based tables for
                            display (ASCII & more)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/djm/table_rex";
            };
          } // packageOverrides)
      ) {};

    tabula_2_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "tabula";
            version = "2.2.1";
            src = fetchHex {
              pkg = "tabula";
              version = "2.2.1";
              sha256 =
                "9575d6b05d7c27d67607c8e9f7f49df4b8d4c7b1f1cc87eb3a4176d2e88fea91";
            };

            meta = {
              description = ''Pretty printer for maps/structs collections'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/aerosol/Tabula";
            };
          } // packageOverrides)
      ) {};

    tabula = tabula_2_2_1;

    tachometer_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "tachometer";
            version = "0.1.1";
            src = fetchHex {
              pkg = "tachometer";
              version = "0.1.1";
              sha256 =
                "ead8f6a964b79df0b2948a59c72ec0e2b319bb7684079e7170fa191c78481a42";
            };

            meta = {
              description = ''Scheduler instrumentation for BEAM in Elixir'';
              license = stdenv.lib.licenses.gpl3;
              homepage = "https://github.com/pavlos/tachometer";
            };
          } // packageOverrides)
      ) {};

    tachometer_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, watcher_1_0_0 }:
          buildMix ({
            name = "tachometer";
            version = "0.2.0";
            src = fetchHex {
              pkg = "tachometer";
              version = "0.2.0";
              sha256 =
                "de5e0bda346e31130f33ca118cdd4afccd0ba6728c571ccae35f65d3020074aa";
            };
            beamDeps  = [ watcher_1_0_0 ];

            meta = {
              description = ''Scheduler instrumentation for BEAM in Elixir'';
              license = stdenv.lib.licenses.gpl3;
              homepage = "https://github.com/pavlos/tachometer";
            };
          } // packageOverrides)
      ) {};

    tachometer = tachometer_0_2_0;

    taglet_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_4,
          inflex_1_8_1,
          postgrex_0_13_3
        }:
          buildMix ({
            name = "taglet";
            version = "0.1.0";
            src = fetchHex {
              pkg = "taglet";
              version = "0.1.0";
              sha256 =
                "cf17d9216230e1637d5286123647943eec3423b4b24e6418a2982c9172bc9c48";
            };
            beamDeps  = [ ecto_2_1_4 inflex_1_8_1 postgrex_0_13_3 ];

            meta = {
              longDescription = ''Taglet allows you to manage tags associated
                                to your records. It also allows you to specify
                                various contexts'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/bizneo/taglet";
            };
          } // packageOverrides)
      ) {};

    taglet = taglet_0_1_0;

    taglib_0_2_1 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, elixir_make_0_4_0
        }:
          buildMix ({
            name = "taglib";
            version = "0.2.1";
            src = fetchHex {
              pkg = "taglib";
              version = "0.2.1";
              sha256 =
                "85d306108f07fedee089ae57680b62fc5e471e1ce56131c8f2a6b926e8d1a890";
            };
            beamDeps  = [ elixir_make_0_4_0 ];

            meta = {
              description = ''Taglib bindings for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/almightycouch/taglib";
            };
          } // packageOverrides)
      ) {};

    taglib = taglib_0_2_1;

    tagplay_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exjsx_3_1_0,
          httpoison_0_5_0
        }:
          buildMix ({
            name = "tagplay";
            version = "0.1.0";
            src = fetchHex {
              pkg = "tagplay";
              version = "0.1.0";
              sha256 =
                "620561f030ad83fc9e9bafec7efb03ded24d9ed81ac32a9ef1bc56c0ab87d61f";
            };
            beamDeps  = [ exjsx_3_1_0 httpoison_0_5_0 ];

            meta = {
              description = ''Tagplay.co API client. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Tagplay/elixir-tagplay";
            };
          } // packageOverrides)
      ) {};

    tagplay = tagplay_0_1_0;

    tail_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "tail";
            version = "1.0.1";
            src = fetchHex {
              pkg = "tail";
              version = "1.0.1";
              sha256 =
                "8cec5c708be02aab6094f9c6fdf5b6b0e68c0c3d4f2f9ae341e743d119e9c07f";
            };

            meta = {
              longDescription = ''A simple file tail functionality. Calls a
                                callback function whenever new lines are
                                detected on a file.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/TheFirstAvenger/elixir-tail.git";
            };
          } // packageOverrides)
      ) {};

    tail = tail_1_0_1;

    takeoff_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, toolbelt_0_3_0 }:
          buildMix ({
            name = "takeoff";
            version = "0.2.1";
            src = fetchHex {
              pkg = "takeoff";
              version = "0.2.1";
              sha256 =
                "f6b5d8409b9cf0b298c7b76bbf5c595dd110f04d191413d1819ece79a5c7a304";
            };
            beamDeps  = [ toolbelt_0_3_0 ];

            meta = {
              description = ''Transform your Elixir services to configurable
                            CLI applications'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/samvv/elixir-takeoff";
            };
          } // packageOverrides)
      ) {};

    takeoff = takeoff_0_2_1;

    tally_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "tally";
            version = "0.0.1";
            src = fetchHex {
              pkg = "tally";
              version = "0.0.1";
              sha256 =
                "cd9e07c47f5ce6f01a33a98552aa028e4f9a4c0ec35a2cb16178a9bf37117a36";
            };

            meta = {
              description = ''A reporting library for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/boudra/tally";
            };
          } // packageOverrides)
      ) {};

    tally = tally_0_0_1;

    tane_0_3_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "tane";
            version = "0.3.1";
            src = fetchHex {
              pkg = "tane";
              version = "0.3.1";
              sha256 =
                "8154bcc365b7f21d7ab6ff6d122f6dc110dda05bbfcd7f331a7f514512913e0a";
            };

            meta = {
              description = ''Library for Seeding Databases'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Joe-noh/tane";
            };
          } // packageOverrides)
      ) {};

    tane = tane_0_3_1;

    tanegashima_0_0_11 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          dialyze_0_2_1,
          earmark_1_2_2,
          ex_doc_0_15_1,
          gun_1_0_0_pre_2,
          httpoison_0_8_3,
          poison_2_2_0
        }:
          buildMix ({
            name = "tanegashima";
            version = "0.0.11";
            src = fetchHex {
              pkg = "tanegashima";
              version = "0.0.11";
              sha256 =
                "765756622635a310f8642d08b77aa772c8cd5ba50628da49324bf82e06d2155a";
            };
            beamDeps  = [
                          dialyze_0_2_1
                          earmark_1_2_2
                          ex_doc_0_15_1
                          gun_1_0_0_pre_2
                          httpoison_0_8_3
                          poison_2_2_0
                        ];

            meta = {
              description = ''Elixir wrapper for Pushbullet-API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/massn/Tanegashima";
            };
          } // packageOverrides)
      ) {};

    tanegashima = tanegashima_0_0_11;

    tanuki_0_2_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "tanuki";
            version = "0.2.1";
            src = fetchHex {
              pkg = "tanuki";
              version = "0.2.1";
              sha256 =
                "a344152e9d68fb8614de36adc01e74f558d905183d2c1a7eff6db87194792470";
            };
            beamDeps  = [ httpoison_0_11_2 poison_2_2_0 ];

            meta = {
              description = ''GitLab API wrapper in Elixir, named after GitLabs
                            mascot'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ZJvandeWeg/Tanuki";
            };
          } // packageOverrides)
      ) {};

    tanuki = tanuki_0_2_1;

    tap_0_1_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "tap";
            version = "0.1.4";
            src = fetchHex {
              pkg = "tap";
              version = "0.1.4";
              sha256 =
                "573cba12e7152f6e577fd485e9f0d834bdf1ea60229123bbfbaefcfd91879218";
            };

            meta = {
              description = ''Elixir tracing'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/eproxus/tap";
            };
          } // packageOverrides)
      ) {};

    tap = tap_0_1_4;

    tapex_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "tapex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "tapex";
              version = "0.1.0";
              sha256 =
                "a594d5fb538e67ef7f7d2ae169b53848f3886b62d8ebd0bd8529d888df5bc25b";
            };

            meta = {
              description = ''Tapex is a TAP (Test Anything Protocol) formatter
                            for ExUnit.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/joshwlewis/tapex";
            };
          } // packageOverrides)
      ) {};

    tapex = tapex_0_1_0;

    tapper_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "tapper";
            version = "0.2.0";
            src = fetchHex {
              pkg = "tapper";
              version = "0.2.0";
              sha256 =
                "bfc4ab6fb7566752167b5ad9626216593ec6c7d2ec88c583a40ba2996169cc7b";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              longDescription = ''Implements an interface for recording traces
                                and sending them to a Zipkin server.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Financial-Times/tapper";
            };
          } // packageOverrides)
      ) {};

    tapper = tapper_0_2_0;

    tapper_absinthe_plug_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          absinthe_1_3_1,
          plug_1_3_5,
          tapper_0_2_0
        }:
          buildMix ({
            name = "tapper_absinthe_plug";
            version = "0.2.0";
            src = fetchHex {
              pkg = "tapper_absinthe_plug";
              version = "0.2.0";
              sha256 =
                "5621247ab777de02a0ae7708192c82566415f6536328cf32c526c9fdaca1d89d";
            };
            beamDeps  = [ absinthe_1_3_1 plug_1_3_5 tapper_0_2_0 ];

            meta = {
              longDescription = ''Works in concert with Tapper.Plug to
                                propagate the Tapper Id into the Absinthe
                                context.'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/Financial-Times/tapper_absinthe_plug";
            };
          } // packageOverrides)
      ) {};

    tapper_absinthe_plug = tapper_absinthe_plug_0_2_0;

    tapper_plug_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          plug_1_3_5,
          tapper_0_2_0
        }:
          buildMix ({
            name = "tapper_plug";
            version = "0.2.0";
            src = fetchHex {
              pkg = "tapper_plug";
              version = "0.2.0";
              sha256 =
                "e14024baeac8eff1695b686307de15d0c10498101dee0b80c3fc3e52d8e392b9";
            };
            beamDeps  = [ plug_1_3_5 tapper_0_2_0 ];

            meta = {
              description = ''Plug integration for Tapper.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Financial-Times/tapper_plug";
            };
          } // packageOverrides)
      ) {};

    tapper_plug = tapper_plug_0_2_0;

    tarantool_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          connection_1_0_4,
          message_pack_0_2_0
        }:
          buildMix ({
            name = "tarantool";
            version = "0.0.2";
            src = fetchHex {
              pkg = "tarantool";
              version = "0.0.2";
              sha256 =
                "7f77285bbece82bcfd1575569ba58e670e031ee3a744c76a110658f6341006bc";
            };
            beamDeps  = [ connection_1_0_4 message_pack_0_2_0 ];

            meta = {
              description = ''Tarantool client for Elixir language'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/progress-engine/tarantool.ex";
            };
          } // packageOverrides)
      ) {};

    tarantool = tarantool_0_0_2;

    task_after_1_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "task_after";
            version = "1.1.0";
            src = fetchHex {
              pkg = "task_after";
              version = "1.1.0";
              sha256 =
                "537c96d08039d81f0d18f9da7786dae59ba1dab2e7a44791aac57f42f52112b4";
            };

            meta = {
              longDescription = ''This is a library to call a function after a
                                set delay. Usage is as simple as:
                                `TaskAfter.task_after(500, fn ->
                                do_something_after_500_ms() end)`'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/OvermindDL1/task_after";
            };
          } // packageOverrides)
      ) {};

    task_after = task_after_1_1_0;

    task_bunny_0_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          amqp_0_2_2,
          poison_1_0_2
        }:
          buildMix ({
            name = "task_bunny";
            version = "0.1.2";
            src = fetchHex {
              pkg = "task_bunny";
              version = "0.1.2";
              sha256 =
                "e32a3d6723dc6c8e59cc8b5ef55ea3c06cf399c97265e2db57b0e85f3bb8392f";
            };
            beamDeps  = [ amqp_0_2_2 poison_1_0_2 ];

            meta = {
              longDescription = ''Background processing application/library
                                written in Elixir that uses RabbitMQ as a
                                messaging backend'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/shinyscorpion/task_bunny";
            };
          } // packageOverrides)
      ) {};

    task_bunny = task_bunny_0_1_2;

    taskforce_1_2_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "taskforce";
            version = "1.2.1";
            src = fetchHex {
              pkg = "taskforce";
              version = "1.2.1";
              sha256 =
                "ebe35837229b0b572597dac3149634145c8ee96b7fe49b7f14333643b89d18c0";
            };

            meta = {
              description = ''On-demand worker pools for parallelizable
                            tasks'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/g-andrade/taskforce";
            };
          } // packageOverrides)
      ) {};

    taskforce = taskforce_1_2_1;

    tau_0_0_6 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "tau";
            version = "0.0.6";
            src = fetchHex {
              pkg = "tau";
              version = "0.0.6";
              sha256 =
                "6469f53ae39221f045b6dbd8199eaa95ed5f6c1252b063bc6edd1f21ae2ad0e7";
            };

            meta = {
              description = ''The mathematical constant tau'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/FranklinChen/tau";
            };
          } // packageOverrides)
      ) {};

    tau = tau_0_0_6;

    taxon_search_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_2_2_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "taxon_search";
            version = "0.0.1";
            src = fetchHex {
              pkg = "taxon_search";
              version = "0.0.1";
              sha256 =
                "eb185015a4f238e8a540f60d187edb28b19e643526e595f4cb0e4b553bdf1a6f";
            };
            beamDeps  = [ httpotion_2_2_2 poison_2_2_0 ];

            meta = {
              description = ''TaxonSearch is a tool for looking up species
                            names in Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/annejohnson/taxon_search";
            };
          } // packageOverrides)
      ) {};

    taxon_search = taxon_search_0_0_1;

    tcs34725_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, elixir_ale_0_5_7 }:
          buildMix ({
            name = "tcs34725";
            version = "0.0.1";
            src = fetchHex {
              pkg = "tcs34725";
              version = "0.0.1";
              sha256 =
                "2c167c2f1b1ba479fb4bec17e628e11cb7f2acf83c2cf8f5d1bcaa75268bcecf";
            };
            beamDeps  = [ elixir_ale_0_5_7 ];

            meta = {
              description = ''Read CRGB data from TCS34725 sensors over I2c!'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sschneider1207/tcs34725";
            };
          } // packageOverrides)
      ) {};

    tcs34725 = tcs34725_0_0_1;

    tdata_0_1_5 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          bbmustache_1_4_0,
          erlport_0_9_8,
          erlydtl_0_12_1
        }:
          buildRebar3 ({
            name = "tdata";
            version = "0.1.5";
            src = fetchHex {
              pkg = "tdata";
              version = "0.1.5";
              sha256 =
                "64ef25f35c097fe5020704e68f268718bc05be2ed09c50cad3445c4c1da7711f";
            };

            beamDeps  = [ bbmustache_1_4_0 erlport_0_9_8 erlydtl_0_12_1 ];

            meta = {
              description = ''transform excel files to erl files'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/feng19/tdata";
            };
          } // packageOverrides)
      ) {};

    tdata = tdata_0_1_5;

    tds_0_5_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, decimal_1_3_1 }:
          buildMix ({
            name = "tds";
            version = "0.5.4";
            src = fetchHex {
              pkg = "tds";
              version = "0.5.4";
              sha256 =
                "110eb8d8a58d0d5fe629bfe75dacb56fa14bde441d2baffbfa2bb0c65ee66cba";
            };
            beamDeps  = [ decimal_1_3_1 ];

            meta = {
              description = ''MSSQL / TDS Driver for Ecto.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/livehelpnow/tds";
            };
          } // packageOverrides)
      ) {};

    tds = tds_0_5_4;

    tds_ecto_1_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_0_0_rc_6,
          poison_1_5_2,
          tds_0_5_4
        }:
          buildMix ({
            name = "tds_ecto";
            version = "1.0.2";
            src = fetchHex {
              pkg = "tds_ecto";
              version = "1.0.2";
              sha256 =
                "c592061c97b923fd3f2a7b212eefdd7a35ddb0dac94886b8995ed03b2b9dfd53";
            };
            beamDeps  = [ ecto_2_0_0_rc_6 poison_1_5_2 tds_0_5_4 ];

            meta = {
              description = ''MSSQL / TDS Adapter for Ecto.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/livehelpnow/tds_ecto";
            };
          } // packageOverrides)
      ) {};

    tds_ecto = tds_ecto_1_0_2;

    tea_crypto_1_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "tea_crypto";
            version = "1.0.0";
            src = fetchHex {
              pkg = "tea_crypto";
              version = "1.0.0";
              sha256 =
                "0e7e60d0afe79f0624faa8a358a3a00c912cfa548f3632383927abca4db29cc6";
            };

            meta = {
              description = ''A TEA implementation in Erlang. '';

              homepage = "https://github.com/keichan34/tea_crypto";
            };
          } // packageOverrides)
      ) {};

    tea_crypto = tea_crypto_1_0_0;

    teacup_0_3_4 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "teacup";
            version = "0.3.4";
            src = fetchHex {
              pkg = "teacup";
              version = "0.3.4";
              sha256 =
                "59495d566e810f481ec22b263e8bf0ed90efea9c9272e4980e36d921cd6ab5f9";
            };

            meta = {
              description = ''Simple TCP client library for Erlang'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    teacup = teacup_0_3_4;

    teacup_nats_0_4_1 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          jsx_2_8_0,
          nats_msg_0_4_1,
          teacup_0_3_4
        }:
          buildRebar3 ({
            name = "teacup_nats";
            version = "0.4.1";
            src = fetchHex {
              pkg = "teacup_nats";
              version = "0.4.1";
              sha256 =
                "a872486799e1cd8f7a95b88a3daea100253b514f866b2dd0abb2728481eb0c93";
            };

            beamDeps  = [ jsx_2_8_0 nats_msg_0_4_1 teacup_0_3_4 ];

            meta = {
              description = ''Teacup based NATS Client for Erlang'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/yuce/teacup_nats.git";
            };
          } // packageOverrides)
      ) {};

    teacup_nats = teacup_nats_0_4_1;

    teamcity_exunit_formatter_0_4_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "teamcity_exunit_formatter";
            version = "0.4.0";
            src = fetchHex {
              pkg = "teamcity_exunit_formatter";
              version = "0.4.0";
              sha256 =
                "3d0bf1ac03c85993a5ce4ea287fafc7ed1c4e9b3e80fb3fe1386070ab757e9c3";
            };

            meta = {
              longDescription = ''A formatter for Elixirs ExUnit that formats
                                as TeamCity Service Messages. Will let you track
                                test results in TeamCitys UI'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lixhq/teamcity-exunit-formatter";
            };
          } // packageOverrides)
      ) {};

    teamcity_exunit_formatter = teamcity_exunit_formatter_0_4_0;

    telebot_0_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_7_5,
          poison_1_5_2
        }:
          buildMix ({
            name = "telebot";
            version = "0.1.2";
            src = fetchHex {
              pkg = "telebot";
              version = "0.1.2";
              sha256 =
                "cb1f3058dcf182357f1620f58ac289d685b277fb31082c1644bd5f3892ccaf78";
            };
            beamDeps  = [ httpoison_0_7_5 poison_1_5_2 ];

            meta = {
              description = ''A Telegram bot plugin system for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ottolin/telebot";
            };
          } // packageOverrides)
      ) {};

    telebot = telebot_0_1_2;

    telegram_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_2_2_0 }:
          buildMix ({
            name = "telegram";
            version = "0.0.3";
            src = fetchHex {
              pkg = "telegram";
              version = "0.0.3";
              sha256 =
                "ad7b74cec90ade9090a9056aa69c055398fd3f60352b50c732849f06c503287d";
            };
            beamDeps  = [ poison_2_2_0 ];

            meta = {
              description = ''Simple module for parsing Telegram bot updates'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/col/telegram";
            };
          } // packageOverrides)
      ) {};

    telegram = telegram_0_0_3;

    telegram_mt_0_0_2_alpha = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          telegram_tl_0_0_7_alpha
        }:
          buildMix ({
            name = "telegram_mt";
            version = "0.0.2-alpha";
            src = fetchHex {
              pkg = "telegram_mt";
              version = "0.0.2-alpha";
              sha256 =
                "f5ba60bd663ce419cee90a15001b8f41d660db7360800cab89c311126b6df5b8";
            };
            beamDeps  = [ telegram_tl_0_0_7_alpha ];

            meta = {
              description = ''MTProto (Telegram) implementation for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Fnux/telegram-mt-elixir";
            };
          } // packageOverrides)
      ) {};

    telegram_mt = telegram_mt_0_0_2_alpha;

    telegram_tl_0_0_7_alpha = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_3_1_0 }:
          buildMix ({
            name = "telegram_tl";
            version = "0.0.7-alpha";
            src = fetchHex {
              pkg = "telegram_tl";
              version = "0.0.7-alpha";
              sha256 =
                "6248a2233ea0096def760ce22cf24c04de56f4547b4885db7a49327ea05884dd";
            };
            beamDeps  = [ poison_3_1_0 ];

            meta = {
              description = ''Serialize and deserialize elements of the TL
                            language.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Fnux/telegram-tl-elixir";
            };
          } // packageOverrides)
      ) {};

    telegram_tl_0_0_9_alpha = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_3_1_0 }:
          buildMix ({
            name = "telegram_tl";
            version = "0.0.9-alpha";
            src = fetchHex {
              pkg = "telegram_tl";
              version = "0.0.9-alpha";
              sha256 =
                "314f3b1eb98d0444c65af3a76e688e081b28fde1b4f1a04ae8d69f15a89111db";
            };
            beamDeps  = [ poison_3_1_0 ];

            meta = {
              description = ''Serialize and deserialize elements of the TL
                            language.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Fnux/telegram-tl-elixir";
            };
          } // packageOverrides)
      ) {};

    telegram_tl = telegram_tl_0_0_9_alpha;

    telehashname_0_0_6 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "telehashname";
            version = "0.0.6";
            src = fetchHex {
              pkg = "telehashname";
              version = "0.0.6";
              sha256 =
                "fdcb3c33ac1110e601af6fa81665c68e4d539f19d069e6e617ce1080dd68cee4";
            };

            meta = {
              description = ''Telehash hashname implementation'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mwmiller/telehashname_ex";
            };
          } // packageOverrides)
      ) {};

    telehashname = telehashname_0_0_6;

    telephonist_0_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ex_twiml_2_1_2,
          immortal_0_2_2
        }:
          buildMix ({
            name = "telephonist";
            version = "0.1.2";
            src = fetchHex {
              pkg = "telephonist";
              version = "0.1.2";
              sha256 =
                "c89922cfc4137dace4fd6458a6ff32f624dd9775b2e90efffbd864cdaa537a3e";
            };
            beamDeps  = [ ex_twiml_2_1_2 immortal_0_2_2 ];

            meta = {
               license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/danielberkompas/telephonist";
            };
          } // packageOverrides)
      ) {};

    telephonist = telephonist_0_1_2;

    teleport_0_6_2 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          lager_3_2_1,
          ranch_1_2_1
        }:
          buildRebar3 ({
            name = "teleport";
            version = "0.6.2";
            src = fetchHex {
              pkg = "teleport";
              version = "0.6.2";
              sha256 =
                "ebe299067ed169f9223d6ecca978592cf9a58273082218010d4cef6300fcdcd8";
            };

            beamDeps  = [ lager_3_2_1 ranch_1_2_1 ];

            meta = {
              description = ''application to call remote functions'';
              license = stdenv.lib.licenses.free;
            };
          } // packageOverrides)
      ) {};

    teleport = teleport_0_6_2;

    temp_0_4_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "temp";
            version = "0.4.3";
            src = fetchHex {
              pkg = "temp";
              version = "0.4.3";
              sha256 =
                "d7535439aeb967da5c37c96215fc204d77ec578b5cfc1c7948667052bf075ab9";
            };

            meta = {
              description = ''An Elixir module to easily create and use
                            temporary files and directories.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tuvistavie/elixir-temp";
            };
          } // packageOverrides)
      ) {};

    temp = temp_0_4_3;

    tempdir_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "tempdir";
            version = "0.0.1";
            src = fetchHex {
              pkg = "tempdir";
              version = "0.0.1";
              sha256 =
                "fa658ebbdbddfa729b8276652949d20ac2fbb4eff0261a61fb5f9c96fc943ffd";
            };

            meta = {
              description = ''Simple Elixir Library for creating self-cleaning
                            tmp directories'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/andrewvy/tempdir";
            };
          } // packageOverrides)
      ) {};

    tempdir = tempdir_0_0_1;

    tempfile_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "tempfile";
            version = "0.1.0";
            src = fetchHex {
              pkg = "tempfile";
              version = "0.1.0";
              sha256 =
                "e6e505207616d1bb77e85ac4b4d9a11437ed1eb58eb06e99c582498602a9a45b";
            };

            meta = {
              description = ''Auto cleaning and randomly named temporary
                            files'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sorentwo/tempfile";
            };
          } // packageOverrides)
      ) {};

    tempfile = tempfile_0_1_0;

    templaterl_0_2_4 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "templaterl";
            version = "0.2.4";
            src = fetchHex {
              pkg = "templaterl";
              version = "0.2.4";
              sha256 =
                "22475efc55a7b3ee638ecc7a3827ee44a4e41ddc5d9db06e2d9a100c5c906aeb";
            };

            buildPlugins  = [ rebar_cmd ];


            meta = {
              description = ''An extremly fast and simple templating library in
                            Erlang'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/shezarkhani/templaterl";
            };
          } // packageOverrides)
      ) {};

    templaterl = templaterl_0_2_4;

    templates_0_0_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, calliope_0_3_0 }:
          buildMix ({
            name = "templates";
            version = "0.0.5";
            src = fetchHex {
              pkg = "templates";
              version = "0.0.5";
              sha256 =
                "b06a865acfb39fe17cb589ac64696127351015c9ff5d27bae0e223e770b27269";
            };
            beamDeps  = [ calliope_0_3_0 ];

            meta = {
              description = ''A helper library for adding templating to web
                            applications '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sugar-framework/templates";
            };
          } // packageOverrides)
      ) {};

    templates = templates_0_0_5;

    temporal_0_1_5 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "temporal";
            version = "0.1.5";
            src = fetchHex {
              pkg = "temporal";
              version = "0.1.5";
              sha256 =
                "7ac2f2e9165dd35400cbed0dace84187947f731cad244ee5d20f530ce32efc39";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''A library to download documents from the
                            interwebs.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/aforward/temporal";
            };
          } // packageOverrides)
      ) {};

    temporal = temporal_0_1_5;

    temporary_env_2_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "temporary_env";
            version = "2.0.1";
            src = fetchHex {
              pkg = "temporary_env";
              version = "2.0.1";
              sha256 =
                "f9420044742b5f0479a7f8243e86b048b6a2d4878bce026a3615065b11199c27";
            };

            meta = {
              description = ''A tool for managing application env state within
                            tests.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lpil/temporary-env";
            };
          } // packageOverrides)
      ) {};

    temporary_env = temporary_env_2_0_1;

    tensor_1_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, numbers_3_0_0 }:
          buildMix ({
            name = "tensor";
            version = "1.2.0";
            src = fetchHex {
              pkg = "tensor";
              version = "1.2.0";
              sha256 =
                "37aed4a1d11cf73ad2e0d777af8c5ec9501fc9a0a0a2f4d68c1e7a4d1889c4a9";
            };
            beamDeps  = [ numbers_3_0_0 ];

            meta = {
              longDescription = ''Tensor adds Vectors, Matrices and Tensors to
                                your application. These are a lot faster than a
                                list (of lists).'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/qqwy/tensor";
            };
          } // packageOverrides)
      ) {};

    tensor = tensor_1_2_0;

    tensortastic_0_0_3 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, elixir_make_0_4_0
        }:
          buildMix ({
            name = "tensortastic";
            version = "0.0.3";
            src = fetchHex {
              pkg = "tensortastic";
              version = "0.0.3";
              sha256 =
                "f44119ee73deacb8a95b58908c6524818715437d044c5f3890142094e18cc657";
            };
            beamDeps  = [ elixir_make_0_4_0 ];

            meta = {
              description = ''Experimental Tensorflow bindings for Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/jamilbk/tensortastic";
            };
          } // packageOverrides)
      ) {};

    tensortastic = tensortastic_0_0_3;

    tentabucket_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exjsx_3_2_1,
          httpoison_0_11_2
        }:
          buildMix ({
            name = "tentabucket";
            version = "0.0.1";
            src = fetchHex {
              pkg = "tentabucket";
              version = "0.0.1";
              sha256 =
                "5784dad17f973efcc3c4ea7672927095864d58af1f830614e4c8f06c63d4822d";
            };
            beamDeps  = [ exjsx_3_2_1 httpoison_0_11_2 ];

            meta = {
              description = ''Simple Bitbucket API client library for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/duksis/tentabucket";
            };
          } // packageOverrides)
      ) {};

    tentabucket = tentabucket_0_0_1;

    tentacat_0_6_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exjsx_3_2_1,
          httpoison_0_11_2
        }:
          buildMix ({
            name = "tentacat";
            version = "0.6.2";
            src = fetchHex {
              pkg = "tentacat";
              version = "0.6.2";
              sha256 =
                "bff76c540da6af84410b46de5f8b48f882600087c72b33a55c4e993e7097de1f";
            };
            beamDeps  = [ exjsx_3_2_1 httpoison_0_11_2 ];

            meta = {
              description = ''Simple Elixir wrapper for the GitHub API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/edgurgel/tentacat";
            };
          } // packageOverrides)
      ) {};

    tentacat = tentacat_0_6_2;

    tentahook_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_0_4,
          plug_1_3_5,
          poison_2_2_0
        }:
          buildMix ({
            name = "tentahook";
            version = "0.1.1";
            src = fetchHex {
              pkg = "tentahook";
              version = "0.1.1";
              sha256 =
                "e1f66e34578f0b1bae2491d8eaa80d4176cbbf2ad99f81a40ad0711d55dd624e";
            };
            beamDeps  = [ cowboy_1_0_4 plug_1_3_5 poison_2_2_0 ];

            meta = {
              description = ''Elixir handler for GitHub Webhooks.'';
              license = stdenv.lib.licenses.zlib;
              homepage = "https://github.com/Marqin/tentahook";
            };
          } // packageOverrides)
      ) {};

    tentahook = tentahook_0_1_1;

    term_table_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "term_table";
            version = "0.0.2";
            src = fetchHex {
              pkg = "term_table";
              version = "0.0.2";
              sha256 =
                "e0a39ef8fa4343ded18bf53b381c12ae557ca2982e24351788db457b38bd7924";
            };

            meta = {
              description = ''Pretty terminal table for Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ske77/term_table";
            };
          } // packageOverrides)
      ) {};

    term_table = term_table_0_0_2;

    termcap_0_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "termcap";
            version = "0.1.0";
            src = fetchHex {
              pkg = "termcap";
              version = "0.1.0";
              sha256 =
                "8c5167d68759bd1cd020eeaf5fd94153430fd19fa5a5fdeeb0b3129f0aba2a21";
            };

            meta = {
              description = ''Pure erlang termcap library'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    termcap = termcap_0_1_0;

    termsize_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, porcelain_2_0_3 }:
          buildMix ({
            name = "termsize";
            version = "1.0.1";
            src = fetchHex {
              pkg = "termsize";
              version = "1.0.1";
              sha256 =
                "db41863ab386ae996bada9390a6f33fa8a9208b662e1f3d581b37ddc07bced9a";
            };
            beamDeps  = [ porcelain_2_0_3 ];

            meta = {
              description = ''Reliably get the terminal window size'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sotojuan/termsize";
            };
          } // packageOverrides)
      ) {};

    termsize = termsize_1_0_1;

    terraform_1_0_1 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, phoenix_1_3_0_rc_2
        }:
          buildMix ({
            name = "terraform";
            version = "1.0.1";
            src = fetchHex {
              pkg = "terraform";
              version = "1.0.1";
              sha256 =
                "07e72353e5c6c9f449a2a6059f2fff94c58004c7c96e0e416c917f7f67ac046b";
            };
            beamDeps  = [ phoenix_1_3_0_rc_2 ];

            meta = {
              description = ''Incrementally replace an old API with Phoenix.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/poteto/terraform";
            };
          } // packageOverrides)
      ) {};

    terraform = terraform_1_0_1;

    tesla_0_5_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exjsx_4_0_0,
          hackney_1_6_6,
          ibrowse_4_4_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "tesla";
            version = "0.5.2";
            src = fetchHex {
              pkg = "tesla";
              version = "0.5.2";
              sha256 =
                "48e1aee195853937847871226c92e370aad23230da8e26b1feaf1df210fe7de4";
            };
            beamDeps  = [
                          exjsx_4_0_0 hackney_1_6_6 ibrowse_4_4_0 poison_3_1_0
                        ];

            meta = {
              description = ''HTTP client library, with support for middleware
                            and multiple adapters.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/teamon/tesla";
            };
          } // packageOverrides)
      ) {};

    tesla_0_6_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exjsx_4_0_0,
          fuse_2_4_0,
          hackney_1_6_6,
          ibrowse_4_4_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "tesla";
            version = "0.6.0";
            src = fetchHex {
              pkg = "tesla";
              version = "0.6.0";
              sha256 =
                "a225197387e1b769f6934c6631f6730ce709e51eb9ddf5878484bee2e185756e";
            };
            beamDeps  = [
                          exjsx_4_0_0
                          fuse_2_4_0
                          hackney_1_6_6
                          ibrowse_4_4_0
                          poison_3_1_0
                        ];

            meta = {
              description = ''HTTP client library, with support for middleware
                            and multiple adapters.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/teamon/tesla";
            };
          } // packageOverrides)
      ) {};

    tesla_0_7_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exjsx_4_0_0,
          fuse_2_4_0,
          hackney_1_8_6,
          ibrowse_4_4_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "tesla";
            version = "0.7.1";
            src = fetchHex {
              pkg = "tesla";
              version = "0.7.1";
              sha256 =
                "dd26eb8406bbfb61efa9014fd72df0c750b7248a2c78c45a98b0e1d2293bc6d2";
            };
            beamDeps  = [
                          exjsx_4_0_0
                          fuse_2_4_0
                          hackney_1_8_6
                          ibrowse_4_4_0
                          poison_3_1_0
                        ];

            meta = {
              description = ''HTTP client library, with support for middleware
                            and multiple adapters.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/teamon/tesla";
            };
          } // packageOverrides)
      ) {};

    tesla = tesla_0_7_1;

    tesourex_0_5_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          floki_0_14_0,
          httpoison_0_11_2
        }:
          buildMix ({
            name = "tesourex";
            version = "0.5.0";
            src = fetchHex {
              pkg = "tesourex";
              version = "0.5.0";
              sha256 =
                "34d5b34e9bb76afa63ffcb42ebda4784ba194f12a6073cd9fdee7e2a62a9be25";
            };
            beamDeps  = [ floki_0_14_0 httpoison_0_11_2 ];

            meta = {
              description = ''A utility belt for dealing with Tesouro Direto
                            csv files'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/buccolo/tesourex";
            };
          } // packageOverrides)
      ) {};

    tesourex = tesourex_0_5_0;

    test_async_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "test_async";
            version = "0.1.2";
            src = fetchHex {
              pkg = "test_async";
              version = "0.1.2";
              sha256 =
                "4ce33ede8949837a2eaa84e39582dc0d4a7e68bac5d9a9f313aa13a0409236b8";
            };

            meta = {
              description = ''Make tests inside your ExUnit case to run
                            async.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/vic/test_async";
            };
          } // packageOverrides)
      ) {};

    test_async = test_async_0_1_2;

    test_that_json_0_5_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, exjsx_3_2_1 }:
          buildMix ({
            name = "test_that_json";
            version = "0.5.0";
            src = fetchHex {
              pkg = "test_that_json";
              version = "0.5.0";
              sha256 =
                "5a62935962db227417e17c31abae05eb6cd7606e4ce7ea11f328fa957b113a75";
            };
            beamDeps  = [ exjsx_3_2_1 ];

            meta = {
              description = ''JSON-related helpers for your Elixir testing
                            needs'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/facto/test_that_json";
            };
          } // packageOverrides)
      ) {};

    test_that_json = test_that_json_0_5_0;

    test_that_json_espec_0_6_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          espec_1_4_0,
          test_that_json_0_5_0
        }:
          buildMix ({
            name = "test_that_json_espec";
            version = "0.6.0";
            src = fetchHex {
              pkg = "test_that_json_espec";
              version = "0.6.0";
              sha256 =
                "e1dc13bb3c85d6147017145ba2a20f2c084dd6139f7a37ca0845570d777226ca";
            };
            beamDeps  = [ espec_1_4_0 test_that_json_0_5_0 ];

            meta = {
              description = ''Test That JSON! assertions for ESpec'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/facto/test_that_json_espec";
            };
          } // packageOverrides)
      ) {};

    test_that_json_espec = test_that_json_espec_0_6_0;

    test_times_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "test_times";
            version = "1.0.0";
            src = fetchHex {
              pkg = "test_times";
              version = "1.0.0";
              sha256 =
                "be468ea6002d247f743bd005c4ed71b5f86ae0e9b112ab52fea8c4f5db71cced";
            };

            meta = {
              description = ''Report individual test times in ascending
                            order'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/pinfieldharm/test_times";
            };
          } // packageOverrides)
      ) {};

    test_times = test_times_1_0_0;

    texas_0_1_3 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, phoenix_ratchet_0_3_1
        }:
          buildMix ({
            name = "texas";
            version = "0.1.3";
            src = fetchHex {
              pkg = "texas";
              version = "0.1.3";
              sha256 =
                "c4a0f57caa3af95e9f580ad9c5d4ddd03b6ae54e8d8ccf1d6c2e4c9a10681aa4";
            };
            beamDeps  = [ phoenix_ratchet_0_3_1 ];

            meta = {
              longDescription = ''This is the core library for texas. A backend
                                driven, realtime, view layer for webdev.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dgmcguire/texas";
            };
          } // packageOverrides)
      ) {};

    texas = texas_0_1_3;

    text_2_sign_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          floki_0_11_0,
          httpoison_0_9_2
        }:
          buildMix ({
            name = "text_2_sign";
            version = "0.1.0";
            src = fetchHex {
              pkg = "text_2_sign";
              version = "0.1.0";
              sha256 =
                "993189aebb335201cab1276a350b45512a88afde36b96a228e2ba419a0c46b93";
            };
            beamDeps  = [ floki_0_11_0 httpoison_0_9_2 ];

            meta = {
              longDescription = ''Text to Sign Language Translator Elixir
                                Library. It uses the resources in
                                https://www.signingsavvy.com/ to translate a
                                list of words to sign language.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Waasi/text_2_sign";
            };
          } // packageOverrides)
      ) {};

    text_2_sign = text_2_sign_0_1_0;

    text_delta_1_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "text_delta";
            version = "1.2.0";
            src = fetchHex {
              pkg = "text_delta";
              version = "1.2.0";
              sha256 =
                "3437bfb63cf626176baf80040a621f17ff568d17ae46540bf55bbb7cfa6b2438";
            };

            meta = {
              longDescription = ''Elixir counter-part for the Quill.js Delta
                                library. It provides a baseline for Operational
                                Transformation of rich text.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/deltadoc/text_delta";
            };
          } // packageOverrides)
      ) {};

    text_delta = text_delta_1_2_0;

    textex_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, httpoison_0_9_2 }:
          buildMix ({
            name = "textex";
            version = "0.2.0";
            src = fetchHex {
              pkg = "textex";
              version = "0.2.0";
              sha256 =
                "8d8b5155b066e1f10cb1923a67516e385cb61d23fe75a1ddc603ad711b8d6815";
            };
            beamDeps  = [ httpoison_0_9_2 ];

            meta = {
              description = ''Elixir wrapper around the EZ Texting API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/facto/textex";
            };
          } // packageOverrides)
      ) {};

    textex = textex_0_2_0;

    textgain_0_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_10_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "textgain";
            version = "0.1.2";
            src = fetchHex {
              pkg = "textgain";
              version = "0.1.2";
              sha256 =
                "7cf267e5b14e8ca441a3b929c9d24ec02e88d361417ef4824e4a3c6d8f138989";
            };
            beamDeps  = [ httpoison_0_10_0 poison_3_1_0 ];

            meta = {
              longDescription = ''This module provides access to the various
                                natural language processing (NLP) text analytics
                                services provided by Textgain.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/arpieb/textgain";
            };
          } // packageOverrides)
      ) {};

    textgain = textgain_0_1_2;

    tfidf_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "tfidf";
            version = "0.1.2";
            src = fetchHex {
              pkg = "tfidf";
              version = "0.1.2";
              sha256 =
                "9dc3b778a31998671a3a3e91d5abcf1c7e9794e39d97d4eba4ce4150d80e2b36";
            };

            meta = {
              description = ''Elixir implementation of tf-idf (Term
                            frequency-inverse document frequency)'';
              license = stdenv.lib.licenses.unlicense;
              homepage = "https://github.com/OCannings/tf-idf";
            };
          } // packageOverrides)
      ) {};

    tfidf = tfidf_0_1_2;

    tg_client_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          gproc_0_6_1,
          poison_2_2_0,
          poolboy_1_5_1,
          porcelain_2_0_3
        }:
          buildMix ({
            name = "tg_client";
            version = "0.3.0";
            src = fetchHex {
              pkg = "tg_client";
              version = "0.3.0";
              sha256 =
                "45d7841cdcd9cb257d1f3722cfa22203dfe53e184e26698ce56628d3c9009356";
            };
            beamDeps  = [
                          gproc_0_6_1 poison_2_2_0 poolboy_1_5_1 porcelain_2_0_3
                        ];

            meta = {
              description = ''A Elixir wrapper that communicates with the
                            Telegram-CLI.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ccsteam/ex-telegram-client";
            };
          } // packageOverrides)
      ) {};

    tg_client = tg_client_0_3_0;

    the_fuzz_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "the_fuzz";
            version = "0.3.0";
            src = fetchHex {
              pkg = "the_fuzz";
              version = "0.3.0";
              sha256 =
                "f959818716b25f2c535648e9dc6dc8558c6b9fce5f337e1fcf11f913178087b8";
            };

            meta = {
              longDescription = ''String metrics and phonetic algorithms for
                                Elixir (e.g. Dice/Sorensen, Hamming, Jaccard,
                                Jaro, Jaro-Winkler, Levenshtein, Metaphone,
                                N-Gram, NYSIIS, Overlap, Ratcliff/Obershelp,
                                Refined NYSIIS, Refined Soundex, Soundex,
                                Tversky, Tanimoto, Weighted Levenshtein). Based
                                Heavily on StringMetrics for Scala written by
                                Rocky Madden.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/smashedtoatoms/the_fuzz";
            };
          } // packageOverrides)
      ) {};

    the_fuzz = the_fuzz_0_3_0;

    theriac_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, fitex_0_0_1 }:
          buildMix ({
            name = "theriac";
            version = "0.0.1";
            src = fetchHex {
              pkg = "theriac";
              version = "0.0.1";
              sha256 =
                "c67162d0bb02629cf3502adba2680c59c058ecbc3dda821384ee00e903d6484f";
            };
            beamDeps  = [ fitex_0_0_1 ];

            meta = {
              description = ''Implementation of clojure style transducers in
                            elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/timdeputter/theriac";
            };
          } // packageOverrides)
      ) {};

    theriac = theriac_0_0_1;

    thermex_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "thermex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "thermex";
              version = "0.1.0";
              sha256 =
                "0fd2767f5fd6a73ab57d65f5797a84675341d923b5a4c10652223c4969846656";
            };

            meta = {
              description = ''An OTP application for watching temperature
                            sensors'';

            };
          } // packageOverrides)
      ) {};

    thermex = thermex_0_1_0;

    thesis_0_0_30 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_4,
          html_sanitize_ex_1_3_0,
          httpoison_0_11_2,
          phoenix_1_3_0_rc_2,
          phoenix_html_2_9_3,
          plug_1_3_5,
          poison_3_1_0
        }:
          buildMix ({
            name = "thesis";
            version = "0.0.30";
            src = fetchHex {
              pkg = "thesis";
              version = "0.0.30";
              sha256 =
                "05cdbc642af039bca11705ddce2a02465a4a788a0084d2fddff158087cc10db0";
            };
            beamDeps  = [
                          ecto_2_1_4
                          html_sanitize_ex_1_3_0
                          httpoison_0_11_2
                          phoenix_1_3_0_rc_2
                          phoenix_html_2_9_3
                          plug_1_3_5
                          poison_3_1_0
                        ];

            meta = {
              description = ''Thesis is a lightweight bolt-on content editing
                            system for Phoenix websites.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/infinitered/thesis-phoenix";
            };
          } // packageOverrides)
      ) {};

    thesis = thesis_0_0_30;

    thetvdb_1_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0,
          timex_3_1_15
        }:
          buildMix ({
            name = "thetvdb";
            version = "1.1.0";
            src = fetchHex {
              pkg = "thetvdb";
              version = "1.1.0";
              sha256 =
                "bdc79130a35e189e337f217b25581a0c81e1afb1838c80f78a07dcc7144ed045";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 timex_3_1_15 ];

            meta = {
              description = ''An Elixir library for TheTVDB API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cjlucas/TheTVDBEx";
            };
          } // packageOverrides)
      ) {};

    thetvdb = thetvdb_1_1_0;

    thing_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_0_rc_5,
          poison_2_2_0,
          postgrex_1_0_0_rc_1
        }:
          buildMix ({
            name = "thing";
            version = "0.0.1";
            src = fetchHex {
              pkg = "thing";
              version = "0.0.1";
              sha256 =
                "1828ed89c549b55e6fb1a5bd0c7b96fd15bcede65204e6d546b7a85de5a983eb";
            };
            beamDeps  = [ ecto_2_1_0_rc_5 poison_2_2_0 postgrex_1_0_0_rc_1 ];

            meta = {
              description = ''Universal product information API'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/slurmulon/thing";
            };
          } // packageOverrides)
      ) {};

    thing = thing_0_0_1;

    thoth_0_0_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "thoth";
            version = "0.0.5";
            src = fetchHex {
              pkg = "thoth";
              version = "0.0.5";
              sha256 =
                "2712b42e23e730ec8e9a226e1d9f86fb003d60e7b44b0674c9d44132a0fc3a83";
            };

            meta = {
              description = ''An Elixir digraph inspired local Graph DB'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/oakfang/thoth";
            };
          } // packageOverrides)
      ) {};

    thoth = thoth_0_0_5;

    thrash_0_3_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "thrash";
            version = "0.3.2";
            src = fetchHex {
              pkg = "thrash";
              version = "0.3.2";
              sha256 =
                "f8cb8dffb9ab02930bde95751f9fd5641b6d0f3e350885b8055fa24403b4ebb8";
            };

            meta = {
              description = ''Fast serializer/deserializer for Apache Thrift`s
                            binary protocol.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dantswain/thrash";
            };
          } // packageOverrides)
      ) {};

    thrash = thrash_0_3_2;

    thrift_1_3_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "thrift";
            version = "1.3.2";
            src = fetchHex {
              pkg = "thrift";
              version = "1.3.2";
              sha256 =
                "4acf0551c916a658c65f062cb6e695f9968a7dbef45f9b7427f86705c1f1fb10";
            };

            meta = {
              longDescription = ''A collection of utilities for working with
                                Thrift in Elixir. Provides a copy of the Apache
                                Thrift Erlang runtime.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/pinterest/elixir-thrift";
            };
          } // packageOverrides)
      ) {};

    thrift = thrift_1_3_2;

    throttle_0_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          plug_1_3_5,
          redis_connection_pool_0_1_6
        }:
          buildMix ({
            name = "throttle";
            version = "0.1.2";
            src = fetchHex {
              pkg = "throttle";
              version = "0.1.2";
              sha256 =
                "8582b599dbb923a00adea671913264c396a6094c674f302df412bef9b3b915ae";
            };
            beamDeps  = [ plug_1_3_5 redis_connection_pool_0_1_6 ];

            meta = {
              longDescription = ''A general throttle utility. Mainly used to
                                throttle inbound or outbound requests.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nsweeting/throttle";
            };
          } // packageOverrides)
      ) {};

    throttle = throttle_0_1_2;

    throttlex_0_0_6 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "throttlex";
            version = "0.0.6";
            src = fetchHex {
              pkg = "throttlex";
              version = "0.0.6";
              sha256 =
                "d65df379ad2aaf44a479126d2177957f087a6da71b662e2698cfba496d26ce2e";
            };

            meta = {
              description = ''Throttlex is a rate limiter based on leaky bucket
                            algorithms.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/2nd/throttlex";
            };
          } // packageOverrides)
      ) {};

    throttlex = throttlex_0_0_6;

    thumbnex_0_2_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ffmpex_0_4_1,
          mogrify_0_5_4
        }:
          buildMix ({
            name = "thumbnex";
            version = "0.2.3";
            src = fetchHex {
              pkg = "thumbnex";
              version = "0.2.3";
              sha256 =
                "11adbb66992ad7d56e5e52128019dcaa625ad1cfd97f231337abd7ca8a7c88d2";
            };
            beamDeps  = [ ffmpex_0_4_1 mogrify_0_5_4 ];

            meta = {
              description = ''Create thumbnails from images and video
                            screenshots.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/talklittle/thumbnex";
            };
          } // packageOverrides)
      ) {};

    thumbnex = thumbnex_0_2_3;

    ticker_0_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ticker";
            version = "0.0.4";
            src = fetchHex {
              pkg = "ticker";
              version = "0.0.4";
              sha256 =
                "fffce1bc145685806a28132122365a00b0a6448cb04f03aef61fb1ee5c8ee757";
            };

            meta = {
              description = ''Timer to schedule jobs in small intervals.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/onboardingsystems/ticker";
            };
          } // packageOverrides)
      ) {};

    ticker = ticker_0_0_4;

    tiled_map_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_2_2_0 }:
          buildMix ({
            name = "tiled_map";
            version = "0.0.1";
            src = fetchHex {
              pkg = "tiled_map";
              version = "0.0.1";
              sha256 =
                "c285c5293bb97d0e526c1cab14cdcf4b17dd12a76e2a0d707f1b71a4fcf9501e";
            };
            beamDeps  = [ poison_2_2_0 ];

            meta = {
              description = ''Basic parsing of JSON Map Format from Tiled map
                            editor'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kentdahl/tiled_map";
            };
          } // packageOverrides)
      ) {};

    tiled_map = tiled_map_0_0_1;

    timber_logfmt_1_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "timber_logfmt";
            version = "1.1.0";
            src = fetchHex {
              pkg = "timber_logfmt";
              version = "1.1.0";
              sha256 =
                "a9aaee03cdaf04bfe8efba9f020c444c7926db45ab6977efc43b9c8c48f2f5f2";
            };

            meta = {
              description = ''A simple logfmt decoder'';
              license = stdenv.lib.licenses.unlicense;
              homepage = "https://github.com/timberio/logfmt-elixir";
            };
          } // packageOverrides)
      ) {};

    timber_logfmt = timber_logfmt_1_1_0;

    time_ago_words_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, timex_3_0_5 }:
          buildMix ({
            name = "time_ago_words";
            version = "0.0.2";
            src = fetchHex {
              pkg = "time_ago_words";
              version = "0.0.2";
              sha256 =
                "8cf37434618123ce09ebbba90f9b86eca0fdfdce6cd2887b2a03e5d171515f50";
            };
            beamDeps  = [ timex_3_0_5 ];

            meta = {
              longDescription = ''A simple function to return the approximate
                                difference between two times using words.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/midwire/time_ago_words";
            };
          } // packageOverrides)
      ) {};

    time_ago_words = time_ago_words_0_0_2;

    time_compat_0_0_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "time_compat";
            version = "0.0.1";
            src = fetchHex {
              pkg = "time_compat";
              version = "0.0.1";
              sha256 =
                "161d6b38ac9ee5ae508c76428a55b10ce44dd27fb43ab9722f702867086829e8";
            };

            meta = {
              description = ''Erlang 18 time compatibility library.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/lasp-lang/time_compat";
            };
          } // packageOverrides)
      ) {};

    time_compat = time_compat_0_0_1;

    time_distance_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, timex_3_0_5 }:
          buildMix ({
            name = "time_distance";
            version = "0.0.1";
            src = fetchHex {
              pkg = "time_distance";
              version = "0.0.1";
              sha256 =
                "41ebe658882f2defd2cd472960e5a31b18d7ea2a4520c06907f7f2093d030e58";
            };
            beamDeps  = [ timex_3_0_5 ];

            meta = {
              longDescription = ''Show the difference between two specified
                                times, or between a specified time and now in
                                words (eg. 1 week ago)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/aussiegeek/time_distance";
            };
          } // packageOverrides)
      ) {};

    time_distance = time_distance_0_0_1;

    time_seer_0_0_6 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "time_seer";
            version = "0.0.6";
            src = fetchHex {
              pkg = "time_seer";
              version = "0.0.6";
              sha256 =
                "b5cfe4b5126deef913a91463c735c214efdde1cfb57e9303444d1a687fde53f5";
            };

            meta = {
              longDescription = ''TimeSeer is an Elixir library for parsing
                                dates and times and returning Erlang style date
                                and time tuples. Eg. \"15:12:07\" \"2:42pm\"
                                \"24/12/2014\" will become {15,12,7}, {14,42,0},
                                and {2014,12,24} respectively.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lau/time_seer";
            };
          } // packageOverrides)
      ) {};

    time_seer = time_seer_0_0_6;

    timeanator_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_0_rc_5,
          timex_3_1_15
        }:
          buildMix ({
            name = "timeanator";
            version = "0.0.1";
            src = fetchHex {
              pkg = "timeanator";
              version = "0.0.1";
              sha256 =
                "19e28cab134dbbb63ca8b28a3345dcb1976948b8dd71761e21672d7c0f0eacef";
            };
            beamDeps  = [ ecto_2_1_0_rc_5 timex_3_1_15 ];

            meta = {
              description = ''A friendly api for erlang date tuples and ecto
                            datetimes.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Gwash3189/timeanator";
            };
          } // packageOverrides)
      ) {};

    timeanator = timeanator_0_0_1;

    timelier_0_9_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "timelier";
            version = "0.9.2";
            src = fetchHex {
              pkg = "timelier";
              version = "0.9.2";
              sha256 =
                "29406cee11f1e8c3165aed2cb133da9c235f6942b4560c703a778c90128898f9";
            };

            meta = {
              description = ''A cron-style scheduler for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ausimian/timelier";
            };
          } // packageOverrides)
      ) {};

    timelier = timelier_0_9_2;

    timex_3_0_5 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          combine_0_9_6,
          gettext_0_13_1,
          tzdata_0_5_3
        }:
          buildMix ({
            name = "timex";
            version = "3.0.5";
            src = fetchHex {
              pkg = "timex";
              version = "3.0.5";
              sha256 =
                "a13eada449e9d099d617fbaea77997942434a589dca3a2f057f7147cf57d46b4";
            };
            beamDeps  = [ combine_0_9_6 gettext_0_13_1 tzdata_0_5_3 ];

            meta = {
              longDescription = ''Timex is a rich, comprehensive Date/Time
                                library for Elixir projects, with full timezone
                                support via the :tzdata package. If you need to
                                manipulate dates, times, datetimes, timestamps,
                                etc., then Timex is for you!'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bitwalker/timex";
            };
          } // packageOverrides)
      ) {};

    timex_3_0_8 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          combine_0_9_6,
          gettext_0_13_1,
          tzdata_0_5_3
        }:
          buildMix ({
            name = "timex";
            version = "3.0.8";
            src = fetchHex {
              pkg = "timex";
              version = "3.0.8";
              sha256 =
                "8b9f5efb3f3bfbc5d22b9f9f4965e1d1c38bae2158dc5149a0310129e431ae0d";
            };
            beamDeps  = [ combine_0_9_6 gettext_0_13_1 tzdata_0_5_3 ];

            meta = {
              longDescription = ''Timex is a rich, comprehensive Date/Time
                                library for Elixir projects, with full timezone
                                support via the :tzdata package. If you need to
                                manipulate dates, times, datetimes, timestamps,
                                etc., then Timex is for you!'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bitwalker/timex";
            };
          } // packageOverrides)
      ) {};

    timex_3_1_15 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          combine_0_9_6,
          gettext_0_13_1,
          tzdata_0_5_3
        }:
          buildMix ({
            name = "timex";
            version = "3.1.15";
            src = fetchHex {
              pkg = "timex";
              version = "3.1.15";
              sha256 =
                "e984733bf48b7d927ad44045c25a89835e9aec9b89524dd06c7aec067a48c6fb";
            };
            beamDeps  = [ combine_0_9_6 gettext_0_13_1 tzdata_0_5_3 ];

            meta = {
              longDescription = ''Timex is a rich, comprehensive Date/Time
                                library for Elixir projects, with full timezone
                                support via the :tzdata package. If you need to
                                manipulate dates, times, datetimes, timestamps,
                                etc., then Timex is for you!'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bitwalker/timex";
            };
          } // packageOverrides)
      ) {};

    timex = timex_3_1_15;

    timex_ecto_3_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_4,
          timex_3_1_15
        }:
          buildMix ({
            name = "timex_ecto";
            version = "3.0.0";
            src = fetchHex {
              pkg = "timex_ecto";
              version = "3.0.0";
              sha256 =
                "bef8362466055e2a9b421471a161409e1d263e885ce28aa628c0faefc2ebbdc2";
            };
            beamDeps  = [ ecto_2_1_4 timex_3_1_15 ];

            meta = {
              description = ''A plugin for Ecto and Timex which allows use of
                            Timex types with Ecto'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bitwalker/timex_ecto";
            };
          } // packageOverrides)
      ) {};

    timex_ecto_3_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_4,
          timex_3_1_15
        }:
          buildMix ({
            name = "timex_ecto";
            version = "3.1.1";
            src = fetchHex {
              pkg = "timex_ecto";
              version = "3.1.1";
              sha256 =
                "503e3cc043c0e26c6bc87cae5f283ccc6735da3db370feedc42e0464b028594e";
            };
            beamDeps  = [ ecto_2_1_4 timex_3_1_15 ];

            meta = {
              description = ''A plugin for Ecto and Timex which allows use of
                            Timex types with Ecto'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bitwalker/timex_ecto";
            };
          } // packageOverrides)
      ) {};

    timex_ecto = timex_ecto_3_1_1;

    timex_interval_0_6_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, timex_3_0_5 }:
          buildMix ({
            name = "timex_interval";
            version = "0.6.0";
            src = fetchHex {
              pkg = "timex_interval";
              version = "0.6.0";
              sha256 =
                "c2d932e892cb15dacabafdc456040208c285c6d00087f688282d6693a6bbb04e";
            };
            beamDeps  = [ timex_3_0_5 ];

            meta = {
              description = ''A date/time interval library for Elixir projects,
                            based on Timex.'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/atabary/timex-interval";
            };
          } // packageOverrides)
      ) {};

    timex_interval = timex_interval_0_6_0;

    timex_poison_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          poison_1_0_2,
          timex_3_0_5
        }:
          buildMix ({
            name = "timex_poison";
            version = "0.1.1";
            src = fetchHex {
              pkg = "timex_poison";
              version = "0.1.1";
              sha256 =
                "e635ac822fb4096a648ffeed8763b302b832ceba162e73984b63d5630ecf7ea8";
            };
            beamDeps  = [ poison_1_0_2 timex_3_0_5 ];

            meta = {
              description = ''Easily parse timestamps using Timex as they are
                            decoded from json by Poison.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/zovafit/timex_poison";
            };
          } // packageOverrides)
      ) {};

    timex_poison = timex_poison_0_1_1;

    tiny_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "tiny";
            version = "1.0.1";
            src = fetchHex {
              pkg = "tiny";
              version = "1.0.1";
              sha256 =
                "1278a457deb8d99135c378b71f66f21e283d8adea426252a3f8f5e003c536a7b";
            };

            meta = {
              description = ''Tiny JSON parser for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zackehh/tiny";
            };
          } // packageOverrides)
      ) {};

    tiny = tiny_1_0_1;

    tinymt_0_3_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "tinymt";
            version = "0.3.1";
            src = fetchHex {
              pkg = "tinymt";
              version = "0.3.1";
              sha256 =
                "9de8fcedf254661bc4aa550aac317e28be35d4a5d91adf3fa3689dfad6cc1e5a";
            };

            meta = {
              description = ''Tiny Mersenne Twister (TinyMT) for Erlang'';
              license = stdenv.lib.licenses.bsd2;
              homepage = "https://github.com/jj1bdx/tinymt-erlang/";
            };
          } // packageOverrides)
      ) {};

    tinymt = tinymt_0_3_1;

    tipo_0_0_6 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "tipo";
            version = "0.0.6";
            src = fetchHex {
              pkg = "tipo";
              version = "0.0.6";
              sha256 =
                "257bcffbd4c223dbf1b7c2ebe86df7125b44462b36fa8f9fa1afee3de8a0b8d8";
            };

            meta = {
              description = ''Type checking for primitive elixir data types'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jwaterfaucett/tipo";
            };
          } // packageOverrides)
      ) {};

    tipo = tipo_0_0_6;

    tirerl_1_0_2 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          eper_0_94_0,
          jsx_2_8_2,
          shotgun_0_3_0,
          worker_pool_2_2_3
        }:
          buildRebar3 ({
            name = "tirerl";
            version = "1.0.2";
            src = fetchHex {
              pkg = "tirerl";
              version = "1.0.2";
              sha256 =
                "10a99875ab4fd09c8f8c6cd18a1e2530e230fd832e443a53a324ef28aca2210e";
            };

            beamDeps  = [
                          eper_0_94_0 jsx_2_8_2 shotgun_0_3_0 worker_pool_2_2_3
                        ];

            meta = {
              description = ''Erlang interface to Elastic Search'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/inaka/tirerl";
            };
          } // packageOverrides)
      ) {};

    tirerl = tirerl_1_0_2;

    tirexs_0_8_15 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, exjsx_3_2_1 }:
          buildMix ({
            name = "tirexs";
            version = "0.8.15";
            src = fetchHex {
              pkg = "tirexs";
              version = "0.8.15";
              sha256 =
                "b69c89107d7db663ee29f5b28cefb1312d0ad48848e98d368d7ecb10b7893f10";
            };
            beamDeps  = [ exjsx_3_2_1 ];

            meta = {
              description = ''An Elixir flavored DSL for building JSON based
                            queries to Elasticsearch engine'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/Zatvobor/tirexs";
            };
          } // packageOverrides)
      ) {};

    tirexs = tirexs_0_8_15;

    tirexs_0_8_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, exjsx_3_2_1 }:
          buildMix ({
            name = "tirexs";
            version = "0.8.2";
            src = fetchHex {
              pkg = "tirexs";
              version = "0.8.2";
              sha256 =
                "0412e42030723f179579987bb9f6281cb0dc0db95134296058e2e95554a5b198";
            };
            beamDeps  = [ exjsx_3_2_1 ];

            meta = {
              description = ''An Elixir flavored DSL for building JSON based
                            queries to Elasticsearch engine'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/Zatvobor/tirexs";
            };
          } // packageOverrides)
      ) {};

    tjson_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "tjson";
            version = "0.1.0";
            src = fetchHex {
              pkg = "tjson";
              version = "0.1.0";
              sha256 =
                "48619de3b78c3a1acb6a5f492655f8b39adb1157bd85f931885a8c9e6ffe28d9";
            };

            meta = {
              description = ''Implementation of the TJSON Spec from
                            www.tjson.org.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/h4cc/tjson";
            };
          } // packageOverrides)
      ) {};

    tjson = tjson_0_1_0;

    tl_57_1_0_rc = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "tl";
            version = "57.1.0-rc";
            src = fetchHex {
              pkg = "tl";
              version = "57.1.0-rc";
              sha256 =
                "5042463a5309d082a00118407089b955175c2266bdc411ae0c71d385dfff54f3";
            };

            meta = {
              description = ''TL language parser for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ccsteam/tl";
            };
          } // packageOverrides)
      ) {};

    tl_57_2_0_rc = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "tl";
            version = "57.2.0-rc";
            src = fetchHex {
              pkg = "tl";
              version = "57.2.0-rc";
              sha256 =
                "9d09577dc7f868dab9e71bbf184abec34a93f4ca348912e125a54d2a9faf7d00";
            };

            meta = {
              description = ''TL language parser for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ccsteam/tl";
            };
          } // packageOverrides)
      ) {};

    tl = tl_57_2_0_rc;

    tlv_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "tlv";
            version = "0.1.0";
            src = fetchHex {
              pkg = "tlv";
              version = "0.1.0";
              sha256 =
                "bc040b662594ad6c83f1d931ee2e74f8d00697afa215087297f64546a0c500e9";
            };

            meta = {
              description = ''Encodes/Decodes BER-TLVs structures'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bitgamma/elixir_tlv";
            };
          } // packageOverrides)
      ) {};

    tlv = tlv_0_1_0;

    tm_mercury_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          connection_1_0_4,
          nerves_uart_0_1_2
        }:
          buildMix ({
            name = "tm_mercury";
            version = "0.3.0";
            src = fetchHex {
              pkg = "tm_mercury";
              version = "0.3.0";
              sha256 =
                "d426ab84cf34690f8fd3b21fccf2eda9250cea9a31a249f7ee910d5ba5837a70";
            };
            beamDeps  = [ connection_1_0_4 nerves_uart_0_1_2 ];

            meta = {
              description = ''A pure Elixir implementation of the ThingMagic
                            Mercury SDK'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/letoteteam/tm_mercury";
            };
          } // packageOverrides)
      ) {};

    tm_mercury = tm_mercury_0_3_0;

    tmdb_0_0_6 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exjsx_3_1_0,
          httpoison_0_11_2,
          poison_1_4_0
        }:
          buildMix ({
            name = "tmdb";
            version = "0.0.6";
            src = fetchHex {
              pkg = "tmdb";
              version = "0.0.6";
              sha256 =
                "4cbad6ffa556a0eeecb22c3960d47451e918313e5651808439f039403dd38d3a";
            };
            beamDeps  = [ exjsx_3_1_0 httpoison_0_11_2 poison_1_4_0 ];

            meta = {    };
          } // packageOverrides)
      ) {};

    tmdb = tmdb_0_0_6;

    todo_1_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "todo";
            version = "1.2.0";
            src = fetchHex {
              pkg = "todo";
              version = "1.2.0";
              sha256 =
                "92b0da31ee335a4caff5bb91950688fc3195c2eb78cc70be80e3b616f2be88bc";
            };

            meta = {
              description = ''A small TODO comments utility.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/niahoo/elixir-todo";
            };
          } // packageOverrides)
      ) {};

    todo = todo_1_2_0;

    todoist_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_2_2_2,
          poison_2_2_0,
          uuid_1_1_7
        }:
          buildMix ({
            name = "todoist";
            version = "0.1.0";
            src = fetchHex {
              pkg = "todoist";
              version = "0.1.0";
              sha256 =
                "9d55c8e3ee5b6ac79899905e81815d254afcd3f1d80ede238a770a46f2c1bb07";
            };
            beamDeps  = [ httpotion_2_2_2 poison_2_2_0 uuid_1_1_7 ];

            meta = {
              description = ''A simple Todoist Elixir wrapper'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nandosousafr/todoist";
            };
          } // packageOverrides)
      ) {};

    todoist = todoist_0_1_0;

    together_0_5_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ex_shards_0_2_0 }:
          buildMix ({
            name = "together";
            version = "0.5.1";
            src = fetchHex {
              pkg = "together";
              version = "0.5.1";
              sha256 =
                "8cc9c430e07bf4e7157814968d753ae640ceb334acb622c242b9fb5e7c7446b3";
            };
            beamDeps  = [ ex_shards_0_2_0 ];

            meta = {
              description = ''Group actions that need to be performed later
                            together'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/princemaple/together";
            };
          } // packageOverrides)
      ) {};

    together = together_0_5_1;

    togglex_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_8_3,
          poison_2_1_0
        }:
          buildMix ({
            name = "togglex";
            version = "0.2.0";
            src = fetchHex {
              pkg = "togglex";
              version = "0.2.0";
              sha256 =
                "725b4299c5aad1c87900e667d6a01c88ba18f8e545283f31d2f726745c174e30";
            };
            beamDeps  = [ httpoison_0_8_3 poison_2_1_0 ];

            meta = {
              description = ''Simple Elixir wrapper for the Toggl API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/diacode/togglex";
            };
          } // packageOverrides)
      ) {};

    togglex = togglex_0_2_0;

    toglx_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          argument_parser_0_1_3,
          configparser_ex_0_2_1,
          togglex_0_2_0
        }:
          buildMix ({
            name = "toglx";
            version = "0.0.2";
            src = fetchHex {
              pkg = "toglx";
              version = "0.0.2";
              sha256 =
                "2bfd90b8ee7908303311bf4b80ffd62939708244af89d56e32612ac36899c07b";
            };
            beamDeps  = [
                          argument_parser_0_1_3
                          configparser_ex_0_2_1
                          togglex_0_2_0
                        ];

            meta = {
              description = ''Toggl(ex) time tracking client'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/kennyballou/toglx";
            };
          } // packageOverrides)
      ) {};

    toglx = toglx_0_0_2;

    toki_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "toki";
            version = "0.1.0";
            src = fetchHex {
              pkg = "toki";
              version = "0.1.0";
              sha256 =
                "a000aa745a4bcaa99c8b02deac2b4ee3c959b236a994ebb984bde3856277d902";
            };

            meta = {
              description = ''Date time parsing and formatting library inspired
                            by Moment.js'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tommy351/toki";
            };
          } // packageOverrides)
      ) {};

    toki = toki_0_1_0;

    tokoonline_0_1_0 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex }:
          buildErlangMk ({
            name = "tokoonline";
            version = "0.1.0";
            src = fetchHex {
              pkg = "tokoonline";
              version = "0.1.0";
              sha256 =
                "a18bdbc64d65261d0aa98ed8c60aa9ebfac8dac9f4a879ee8664a5c6fac82cce";
            };

            meta = {
              description = ''hello'';
              license = stdenv.lib.licenses.free;
            };
          } // packageOverrides)
      ) {};

    tokoonline = tokoonline_0_1_0;

    tokumei_0_7_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ace_http_0_4_5,
          cookie_0_1_0,
          raxx_0_11_1,
          raxx_static_0_3_0
        }:
          buildMix ({
            name = "tokumei";
            version = "0.7.0";
            src = fetchHex {
              pkg = "tokumei";
              version = "0.7.0";
              sha256 =
                "b2855c6c03cbf9e71638faca2de38b50ff2b670c58b36677f8605e1877f57f38";
            };
            beamDeps  = [
                          ace_http_0_4_5
                          cookie_0_1_0
                          raxx_0_11_1
                          raxx_static_0_3_0
                        ];

            meta = {
              description = ''Tiny but MIGHTY Elixir webframework.'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/CrowdHailer/Tokumei/tree/master/app";
            };
          } // packageOverrides)
      ) {};

    tokumei = tokumei_0_7_0;

    tokumei_router_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, raxx_0_10_5 }:
          buildMix ({
            name = "tokumei_router";
            version = "0.3.0";
            src = fetchHex {
              pkg = "tokumei_router";
              version = "0.3.0";
              sha256 =
                "583adef022588e7016c96631e1e2d0e3f3cf476bf5f57dc285411a44d4ee3c22";
            };
            beamDeps  = [ raxx_0_10_5 ];

            meta = {
              description = ''Tiny but might Elixir web framework'';
              license = stdenv.lib.licenses.asl20;
              homepage =
                "https://github.com/CrowdHailer/Tokumei/tree/master/router";
            };
          } // packageOverrides)
      ) {};

    tokumei_router = tokumei_router_0_3_0;

    toml_elixir_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "toml_elixir";
            version = "1.0.0";
            src = fetchHex {
              pkg = "toml_elixir";
              version = "1.0.0";
              sha256 =
                "ae7f7b73de86e57dad00a52fed0cfce909edadb318b7514f1211363c38001973";
            };

            meta = {
              description = ''TOML parser for elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nikolauska/toml_elixir";
            };
          } // packageOverrides)
      ) {};

    toml_elixir = toml_elixir_1_0_0;

    tomlex_0_0_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "tomlex";
            version = "0.0.5";
            src = fetchHex {
              pkg = "tomlex";
              version = "0.0.5";
              sha256 =
                "00b88d26e6b7547d807550c5028bd75ee3f1ced15bbcc47768995d19b95c732b";
            };

            meta = {
              description = ''A TOML parser for elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zamith/tomlex";
            };
          } // packageOverrides)
      ) {};

    tomlex = tomlex_0_0_5;

    tonic_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "tonic";
            version = "0.0.2";
            src = fetchHex {
              pkg = "tonic";
              version = "0.0.2";
              sha256 =
                "22b818b9db43de49f5e0da9c0a95fd85267135d401ddf6ae8429b7fdff174284";
            };

            meta = {
              description = ''A DSL for conveniently loading binary
                            data/files.'';
              license = stdenv.lib.licenses.bsd2;
              homepage = "https://github.com/ScrimpyCat/Tonic";
            };
          } // packageOverrides)
      ) {};

    tonic = tonic_0_0_2;

    toniq_1_2_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exredis_0_2_5,
          uuid_1_1_7
        }:
          buildMix ({
            name = "toniq";
            version = "1.2.2";
            src = fetchHex {
              pkg = "toniq";
              version = "1.2.2";
              sha256 =
                "24d528c05775f065871e9803f227ea1f2ae071ca8276e199e7e3cda577c25680";
            };
            beamDeps  = [ exredis_0_2_5 uuid_1_1_7 ];

            meta = {
              longDescription = ''Simple and reliable background job processing
                                library for Elixir. Has persistence, retries,
                                delayed jobs, concurrency limiting, error
                                handling and is heroku friendly.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/joakimk/toniq";
            };
          } // packageOverrides)
      ) {};

    toniq = toniq_1_2_2;

    toolbelt_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "toolbelt";
            version = "0.3.0";
            src = fetchHex {
              pkg = "toolbelt";
              version = "0.3.0";
              sha256 =
                "031f26fd03a27da3850ab3267355a85b42a84ff19ae1d57a07364d05fcdebfc4";
            };

            meta = {
              longDescription = ''A library for some common and less common
                                Elixir routines not found in the standard
                                library.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/samvv/elixir-toolbelt";
            };
          } // packageOverrides)
      ) {};

    toolbelt = toolbelt_0_3_0;

    toolbox_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "toolbox";
            version = "0.1.0";
            src = fetchHex {
              pkg = "toolbox";
              version = "0.1.0";
              sha256 =
                "badbef8e5ce4516270307bdda8bf6e4475f8413bb1b7bfe67df54c9689954f0b";
            };

            meta = {
              longDescription = ''A library for some common and less common
                                Elixir routines not found in the standard
                                library.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/samvv/elixir-toolbox";
            };
          } // packageOverrides)
      ) {};

    toolbox = toolbox_0_1_0;

    topo_0_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          geo_1_5_0,
          seg_seg_0_0_1,
          vector_0_2_2
        }:
          buildMix ({
            name = "topo";
            version = "0.1.2";
            src = fetchHex {
              pkg = "topo";
              version = "0.1.2";
              sha256 =
                "f8851f355f0c798d5d0a218d3ead92979603ca0ca04eaca521a3b19822091e28";
            };
            beamDeps  = [ geo_1_5_0 seg_seg_0_0_1 vector_0_2_2 ];

            meta = {
              description = ''Geometry library for determining spatial
                            relationships between geometries'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pkinney/topo";
            };
          } // packageOverrides)
      ) {};

    topo = topo_0_1_2;

    torch_1_0_0_rc_5 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_4,
          filtrex_0_3_0,
          phoenix_1_3_0_rc_2,
          phoenix_html_2_9_3,
          scrivener_ecto_1_2_2
        }:
          buildMix ({
            name = "torch";
            version = "1.0.0-rc.5";
            src = fetchHex {
              pkg = "torch";
              version = "1.0.0-rc.5";
              sha256 =
                "b316330bd8a3094958d7f222ce184017f8caf12466600ecea505814555512822";
            };
            beamDeps  = [
                          ecto_2_1_4
                          filtrex_0_3_0
                          phoenix_1_3_0_rc_2
                          phoenix_html_2_9_3
                          scrivener_ecto_1_2_2
                        ];

            meta = {
              description = ''Rapid admin generator for Phoenix'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/infinitered/torch";
            };
          } // packageOverrides)
      ) {};

    torch = torch_1_0_0_rc_5;

    torrex_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, benx_0_1_2 }:
          buildMix ({
            name = "torrex";
            version = "0.1.2";
            src = fetchHex {
              pkg = "torrex";
              version = "0.1.2";
              sha256 =
                "e164a16a6850be8dcc25fcf103f2ce1867561474fffb5f71c8de9472036ba087";
            };
            beamDeps  = [ benx_0_1_2 ];

            meta = {
              description = ''Create torrent files from single or multiple
                            files.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sschneider1207/torrex";
            };
          } // packageOverrides)
      ) {};

    torrex = torrex_0_1_2;

    towel_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "towel";
            version = "0.2.1";
            src = fetchHex {
              pkg = "towel";
              version = "0.2.1";
              sha256 =
                "e7b7c5e7e6d8df9e781e130d1defccc9a27f888f7b95c132d8ccd1d6957d3b7a";
            };

            meta = {
              description = ''A delightfully simple monad library that`s
                            written for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/knrz/towel";
            };
          } // packageOverrides)
      ) {};

    towel = towel_0_2_1;

    toxiproxy_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          poison_3_1_0,
          tesla_0_6_0
        }:
          buildMix ({
            name = "toxiproxy";
            version = "0.3.0";
            src = fetchHex {
              pkg = "toxiproxy";
              version = "0.3.0";
              sha256 =
                "632e58e9de8c94a7ff72c97cf9f99236cca4b7e230d9b029b2987a1d8d63338c";
            };
            beamDeps  = [ poison_3_1_0 tesla_0_6_0 ];

            meta = {
              description = ''Toxiproxy client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ananthakumaran/toxiproxy-elixir";
            };
          } // packageOverrides)
      ) {};

    toxiproxy = toxiproxy_0_3_0;

    tqdm_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "tqdm";
            version = "0.0.2";
            src = fetchHex {
              pkg = "tqdm";
              version = "0.0.2";
              sha256 =
                "2791905b98c0d3371ebf98fd7185d0af58ca8d2911182d908b970afab0b8801d";
            };

            meta = {
              longDescription = ''Add a progress bar to your enumerables
                                (Lists, Maps, Streams, Ranges, etc.) in a
                                second.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/antipax/tqdm_elixir";
            };
          } // packageOverrides)
      ) {};

    tqdm = tqdm_0_0_2;

    tracing_helper_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "tracing_helper";
            version = "0.0.3";
            src = fetchHex {
              pkg = "tracing_helper";
              version = "0.0.3";
              sha256 =
                "a1d22c5901ed688acab63c0195aba2826f774a8d7e7f1b882878b715cd4688fb";
            };

            meta = {
              description = ''TracingHelper is a helper module with predefined
                            tracing functions'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/andrzejsliwa/tracing_helper";
            };
          } // packageOverrides)
      ) {};

    tracing_helper = tracing_helper_0_0_3;

    tracker_client_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          benx_0_1_2,
          gen_stage_0_11_0
        }:
          buildMix ({
            name = "tracker_client";
            version = "0.1.1";
            src = fetchHex {
              pkg = "tracker_client";
              version = "0.1.1";
              sha256 =
                "f4c227b00e70e7c094f079e1b6ca28d6780a27332be3c6ef981f47f22d9e21f6";
            };
            beamDeps  = [ benx_0_1_2 gen_stage_0_11_0 ];

            meta = {
              description = ''Make announcements to torrent trackers via HTTP
                            or UDP.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sschneider1207/tracker_client";
            };
          } // packageOverrides)
      ) {};

    tracker_client = tracker_client_0_1_1;

    tracker_request_0_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, bencoder_0_0_7 }:
          buildMix ({
            name = "tracker_request";
            version = "0.0.4";
            src = fetchHex {
              pkg = "tracker_request";
              version = "0.0.4";
              sha256 =
                "5a4b20ed43589e9a7bd66ae1a72e5df983489b2d07ae990b32758e3353281584";
            };
            beamDeps  = [ bencoder_0_0_7 ];

            meta = {
              description = ''Deal with bittorrent tracker requests and
                            responses'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/alehander42/tracker_request";
            };
          } // packageOverrides)
      ) {};

    tracker_request = tracker_request_0_0_4;

    trackline_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          apex_0_3_7,
          erlsom_1_4_1,
          exmerl_0_1_1,
          exml_0_1_1,
          timex_3_0_5
        }:
          buildMix ({
            name = "trackline";
            version = "0.0.1";
            src = fetchHex {
              pkg = "trackline";
              version = "0.0.1";
              sha256 =
                "42ee5d56b2ec0c55715e7f03a9aacd6d7ce8543519e9ec696335348eb1a24f7c";
            };
            beamDeps  = [
                          apex_0_3_7
                          erlsom_1_4_1
                          exmerl_0_1_1
                          exml_0_1_1
                          timex_3_0_5
                        ];

            meta = {
              description = ''A GPX parser for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/andrewhao/trackline";
            };
          } // packageOverrides)
      ) {};

    trackline = trackline_0_0_1;

    trackstar_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          erlsom_1_4_1,
          poison_2_2_0
        }:
          buildMix ({
            name = "trackstar";
            version = "0.0.1";
            src = fetchHex {
              pkg = "trackstar";
              version = "0.0.1";
              sha256 =
                "04a7634755da273b640737c8bef015f5ef4360524940fa763c3100e13db47cd4";
            };
            beamDeps  = [ erlsom_1_4_1 poison_2_2_0 ];

            meta = {
              longDescription = ''Trackstar is a GPX parser. Specify the path
                                to a GPX file and it will output a GeoJSON of
                                the track as a LineString. It currently works
                                with Strava-exported GPX files.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/andydangerous/trackstar";
            };
          } // packageOverrides)
      ) {};

    trackstar = trackstar_0_0_1;

    tractor_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          gettext_0_13_1,
          phoenix_1_2_0_rc_1,
          phoenix_ecto_3_0_0_rc_0,
          postgrex_1_0_0_rc_1
        }:
          buildMix ({
            name = "tractor";
            version = "0.1.0";
            src = fetchHex {
              pkg = "tractor";
              version = "0.1.0";
              sha256 =
                "f88e92d512b9c696bb250c0caa1bd85f60893bbf855eb34d622e0aae156f3063";
            };
            beamDeps  = [
                          cowboy_1_1_2
                          gettext_0_13_1
                          phoenix_1_2_0_rc_1
                          phoenix_ecto_3_0_0_rc_0
                          postgrex_1_0_0_rc_1
                        ];

            meta = {
              description = ''A fast and scalable pure Elixir BitTorrent
                            tracker.'';
              license = stdenv.lib.licenses.mpl20;
              homepage = "https://github.com/folz/tractor";
            };
          } // packageOverrides)
      ) {};

    tractor = tractor_0_1_0;

    tradie_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "tradie";
            version = "0.0.1";
            src = fetchHex {
              pkg = "tradie";
              version = "0.0.1";
              sha256 =
                "d317c61c9bd9ab46184df8036057855e676d8598905c6708b9a9e26af3b7fd04";
            };

            meta = {
              longDescription = ''Execute multiple tasks in parallel, allowing
                                retry for each task, and a global timeout. Based
                                loosely on
                                http://theerlangelist.com/article/beyond_taskasync.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/madlep/tradie";
            };
          } // packageOverrides)
      ) {};

    tradie = tradie_0_0_1;

    trailing_format_plug_0_0_7 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, plug_1_3_5 }:
          buildMix ({
            name = "trailing_format_plug";
            version = "0.0.7";
            src = fetchHex {
              pkg = "trailing_format_plug";
              version = "0.0.7";
              sha256 =
                "bd4fde4c15f3e993a999e019d64347489b91b7a9096af68b2bdadd192afa693f";
            };
            beamDeps  = [ plug_1_3_5 ];

            meta = {
              longDescription = ''An elixir plug to support legacy APIs that
                                use a rails-like trailing format:
                                http://api.dev/resources.format'';
              license = stdenv.lib.licenses.asl20;
              homepage = "http://github.com/mschae/trailing_format_plug";
            };
          } // packageOverrides)
      ) {};

    trailing_format_plug = trailing_format_plug_0_0_7;

    trails_0_2_0 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_0_4,
          ranch_1_2_1
        }:
          buildRebar3 ({
            name = "trails";
            version = "0.2.0";
            src = fetchHex {
              pkg = "trails";
              version = "0.2.0";
              sha256 =
                "aecf4d517267913a8f5ec965b968455d33d1390c72e4889f2c7e7e23329d6a24";
            };

            beamDeps  = [ cowboy_1_0_4 ranch_1_2_1 ];

            meta = {
              description = ''A couple of improvements over Cowboy Routes'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/inaka/cowboy-trails";
            };
          } // packageOverrides)
      ) {};

    trails_0_2_1 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_0_4,
          ranch_1_2_1
        }:
          buildRebar3 ({
            name = "trails";
            version = "0.2.1";
            src = fetchHex {
              pkg = "trails";
              version = "0.2.1";
              sha256 =
                "02d22dcedd1a96e5d24276e07f3689ac36a1c2d22f5f9ced80385745f8135427";
            };

            beamDeps  = [ cowboy_1_0_4 ranch_1_2_1 ];

            meta = {
              description = ''A couple of improvements over Cowboy Routes'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/inaka/cowboy-trails";
            };
          } // packageOverrides)
      ) {};

    trails = trails_0_2_1;

    traitify_elixir_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ex_conf_0_1_3,
          exvcr_0_3_9,
          hackney_1_3_0,
          httpoison_0_5_0,
          poison_1_1_1
        }:
          buildMix ({
            name = "traitify_elixir";
            version = "0.1.1";
            src = fetchHex {
              pkg = "traitify_elixir";
              version = "0.1.1";
              sha256 =
                "ff8568415b70f2fe6548add244cb06c9a9d8c03f0e3d9568730b926f6a9cdd95";
            };
            beamDeps  = [
                          ex_conf_0_1_3
                          exvcr_0_3_9
                          hackney_1_3_0
                          httpoison_0_5_0
                          poison_1_1_1
                        ];

            meta = {
              description = ''An Elixir client library for the Traitify API '';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/traitify/traitify_elixir";
            };
          } // packageOverrides)
      ) {};

    traitify_elixir = traitify_elixir_0_1_1;

    trans_2_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_4,
          poison_2_2_0,
          postgrex_1_0_0_rc_1
        }:
          buildMix ({
            name = "trans";
            version = "2.0.0";
            src = fetchHex {
              pkg = "trans";
              version = "2.0.0";
              sha256 =
                "58bf6c4c23971a88830f5c0b8df8b8b1d33a7568a3e52b3b66186082ae167896";
            };
            beamDeps  = [ ecto_2_1_4 poison_2_2_0 postgrex_1_0_0_rc_1 ];

            meta = {
              description = ''Embedded translations for Elixir schemas'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/belaustegui/trans";
            };
          } // packageOverrides)
      ) {};

    trans = trans_2_0_0;

    transducer_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "transducer";
            version = "0.1.0";
            src = fetchHex {
              pkg = "transducer";
              version = "0.1.0";
              sha256 =
                "89533238e42bace715485c5113bb5c39beecb333c00f4624ae85d5c0f6e96db4";
            };

            meta = {
              longDescription = ''Composable algorithmic transformations.
                                Transducers let you combine reduction operations
                                like `map`, `filter`, `take_while`, `take`, and
                                so on into a single reducing function. As with
                                Stream, but in contrast to Enum, all operations
                                are performed for each item before the next item
                                in the enumerable is processed. One difference
                                with the Stream module is that the transducers`
                                reducing functions don`t have to produce an
                                enumerable, while Stream module transformations
                                always do.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/garyposter/elixir-transducer";
            };
          } // packageOverrides)
      ) {};

    transducer = transducer_0_1_0;

    translator_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ecto_2_1_0_rc_5 }:
          buildMix ({
            name = "translator";
            version = "0.0.1";
            src = fetchHex {
              pkg = "translator";
              version = "0.0.1";
              sha256 =
                "bfd80261b44a17acd0fa92c72cd283eed7e137ea272266c40328b3170dd226ac";
            };
            beamDeps  = [ ecto_2_1_0_rc_5 ];

            meta = {
              longDescription = ''Very simple model
                                translation/globalization/localization library
                                for Elixir inspired by globalize.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kenta-aktsk/translator";
            };
          } // packageOverrides)
      ) {};

    translator = translator_0_0_1;

    translecto_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ecto_2_1_4 }:
          buildMix ({
            name = "translecto";
            version = "0.2.0";
            src = fetchHex {
              pkg = "translecto";
              version = "0.2.0";
              sha256 =
                "402818eb2a0a3dcdb0fb1f8f5269a382f010b4c1a4a24e400ea2d68fb0a3a001";
            };
            beamDeps  = [ ecto_2_1_4 ];

            meta = {
              description = ''A minimal translation library for Ecto'';
              license = stdenv.lib.licenses.bsd2;
              homepage = "https://github.com/ScrimpyCat/Translecto";
            };
          } // packageOverrides)
      ) {};

    translecto = translecto_0_2_0;

    transmap_0_4_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "transmap";
            version = "0.4.0";
            src = fetchHex {
              pkg = "transmap";
              version = "0.4.0";
              sha256 =
                "1cf48a6b0744b20d93a77840721ac00f7405c1002958859e1b76bfd5cf1417d5";
            };

            meta = {
              description = ''Transforms a map.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ryo33/transmap";
            };
          } // packageOverrides)
      ) {};

    transmap = transmap_0_4_0;

    traverse_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "traverse";
            version = "0.1.2";
            src = fetchHex {
              pkg = "traverse";
              version = "0.1.2";
              sha256 =
                "75bb4d721640a142d7223404dadcefbcffa05967ea6f1e4b8cb694c37c473546";
            };

            meta = {
              longDescription = ''Traverse is a toolset to walk arbitrary
                                Elixir Datastructures in a functional way.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/RobertDober/traverse";
            };
          } // packageOverrides)
      ) {};

    traverse = traverse_0_1_2;

    travis_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exjsx_3_2_1,
          httpoison_0_11_2
        }:
          buildMix ({
            name = "travis";
            version = "0.0.1";
            src = fetchHex {
              pkg = "travis";
              version = "0.0.1";
              sha256 =
                "b34143bbd3454f49b818e2c16cc5d89f852e27c6774303a5892bdc9640935c91";
            };
            beamDeps  = [ exjsx_3_2_1 httpoison_0_11_2 ];

            meta = {
              description = ''Simple Elixir wrapper for the Travis API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/localytics/travis.ex";
            };
          } // packageOverrides)
      ) {};

    travis = travis_0_0_1;

    travis_ex_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_1_5_2
        }:
          buildMix ({
            name = "travis_ex";
            version = "0.0.2";
            src = fetchHex {
              pkg = "travis_ex";
              version = "0.0.2";
              sha256 =
                "80589ec01596dfc1e02cef61ce0adc3c9b73977b56a528e214c37af079efa10a";
            };
            beamDeps  = [ httpoison_0_11_2 poison_1_5_2 ];

            meta = {
              description = ''Travis-ci API client library for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/duksis/travis_ex";
            };
          } // packageOverrides)
      ) {};

    travis_ex = travis_ex_0_0_2;

    trello_1_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "trello";
            version = "1.3.0";
            src = fetchHex {
              pkg = "trello";
              version = "1.3.0";
              sha256 =
                "776d6514b766a9290b102bf8682dd13d1b63b1cab68fd73880a6da3b81014cd6";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''Trello wrapper for elixir api'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mikaak/trello-elixir";
            };
          } // packageOverrides)
      ) {};

    trello = trello_1_3_0;

    trex_0_5_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exrm_1_0_8,
          ranch_1_3_1
        }:
          buildMix ({
            name = "trex";
            version = "0.5.1";
            src = fetchHex {
              pkg = "trex";
              version = "0.5.1";
              sha256 =
                "5be75058546b50b75ed24795f73296c2fb5c2bbb152783d755beb4170ebd98ba";
            };
            beamDeps  = [ exrm_1_0_8 ranch_1_3_1 ];

            meta = {
              longDescription = ''Trex is a key value store implementing a
                                subset of Redis protocol, designed to be
                                suitable as a Rails I18n backend.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ignacy/trex";
            };
          } // packageOverrides)
      ) {};

    trex = trex_0_5_1;

    tributary_0_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ecto_2_1_4 }:
          buildMix ({
            name = "tributary";
            version = "0.2.1";
            src = fetchHex {
              pkg = "tributary";
              version = "0.2.1";
              sha256 =
                "c4dca041b71a17fb7b4af654d04569446bdb7a7bc1e7308fb21764f4cfc7b79b";
            };
            beamDeps  = [ ecto_2_1_4 ];

            meta = {
              longDescription = ''A simple stream generation library for Ecto
                                queries that facilitates more efficient paging
                                of queries both in the database and in your
                                Ecto-reliant applicaton.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/davidantaramian/tributary";
            };
          } // packageOverrides)
      ) {};

    tributary = tributary_0_2_1;

    trie_1_5_4 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "trie";
            version = "1.5.4";
            src = fetchHex {
              pkg = "trie";
              version = "1.5.4";
              sha256 =
                "c670fe695912f4457eed58e1b33fa81f1987c08a1ca3876eb0bf6239caea44d3";
            };

            meta = {
              description = ''Erlang Trie Implementation'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/okeuday/trie";
            };
          } // packageOverrides)
      ) {};

    trie_1_6_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "trie";
            version = "1.6.0";
            src = fetchHex {
              pkg = "trie";
              version = "1.6.0";
              sha256 =
                "4531bae0c92d8c942e4ac3fb0fd190a380e8421d5bb8e9e05020d9c9561955c4";
            };

            meta = {
              description = ''Erlang Trie Implementation'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/okeuday/trie";
            };
          } // packageOverrides)
      ) {};

    trie_1_7_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "trie";
            version = "1.7.1";
            src = fetchHex {
              pkg = "trie";
              version = "1.7.1";
              sha256 =
                "35ce867517fcf0a9015ec0894e797a2c630c97db1fddb20fa05435c8a3bd8569";
            };

            meta = {
              description = ''Erlang Trie Implementation'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/okeuday/trie";
            };
          } // packageOverrides)
      ) {};

    trie = trie_1_7_1;

    trimet_web_services_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "trimet_web_services";
            version = "0.1.0";
            src = fetchHex {
              pkg = "trimet_web_services";
              version = "0.1.0";
              sha256 =
                "33c82c847bb65a7f0f682748dfdc0d7f08221d2e67002e87575a1e122276d1ca";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''A thin wrapper for Trimet Web Services'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/digitalcake/TrimetWebService";
            };
          } // packageOverrides)
      ) {};

    trimet_web_services = trimet_web_services_0_1_0;

    triple_des_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "triple_des";
            version = "1.0.0";
            src = fetchHex {
              pkg = "triple_des";
              version = "1.0.0";
              sha256 =
                "a76dec602308d18523bb56a665f57b8e2184ff11b3b50ecf93dd5118be91501b";
            };

            meta = {
              description = ''TripleDES crypto'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/diepvuongthang/triple_des.git";
            };
          } // packageOverrides)
      ) {};

    triple_des = triple_des_1_0_0;

    trot_0_5_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          calliope_0_3_0,
          cowboy_1_1_2,
          plug_1_1_7,
          plug_heartbeat_0_2_0,
          poison_1_5_2
        }:
          buildMix ({
            name = "trot";
            version = "0.5.3";
            src = fetchHex {
              pkg = "trot";
              version = "0.5.3";
              sha256 =
                "982a4ff3a0fffe1e9cc752313fd4c45487fdd484dde7265728da4579c29354e1";
            };
            beamDeps  = [
                          calliope_0_3_0
                          cowboy_1_1_2
                          plug_1_1_7
                          plug_heartbeat_0_2_0
                          poison_1_5_2
                        ];

            meta = {
              description = ''A web micro-framework based on Plug and
                            Cowboy.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/hexedpackets/trot";
            };
          } // packageOverrides)
      ) {};

    trot = trot_0_5_3;

    true_story_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "true_story";
            version = "0.1.0";
            src = fetchHex {
              pkg = "true_story";
              version = "0.1.0";
              sha256 =
                "6617c82519235c6a6e238e8ba40e1032f48a7806d3ea37b2aa32b1ef66df5d5d";
            };

            meta = {
              description = ''Make your tests tell a story'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ericmj/true_story";
            };
          } // packageOverrides)
      ) {};

    true_story = true_story_0_1_0;

    trusted_proxy_rewriter_0_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, plug_1_3_5 }:
          buildMix ({
            name = "trusted_proxy_rewriter";
            version = "0.0.4";
            src = fetchHex {
              pkg = "trusted_proxy_rewriter";
              version = "0.0.4";
              sha256 =
                "bed071830d60c5f33dae9be7bdcf2bf0d34a184834ce93ff41820283a42f6033";
            };
            beamDeps  = [ plug_1_3_5 ];

            meta = {
              longDescription = ''An Elixir plug to rewrite the value of
                                remote_ip key of Plug.Conn struct if the request
                                comes from a trusted proxy.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kabturek/trusted-proxy-rewriter";
            };
          } // packageOverrides)
      ) {};

    trusted_proxy_rewriter = trusted_proxy_rewriter_0_0_4;

    tsuru_1_4_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "tsuru";
            version = "1.4.1";
            src = fetchHex {
              pkg = "tsuru";
              version = "1.4.1";
              sha256 =
                "b79857a03b27ba8817fa987b7167d75a7ff99055adcca1d22d7facb408396e3f";
            };

            meta = {
              description = ''A collection of useful tools for Erlang
                            applications'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    tsuru = tsuru_1_4_1;

    tub_ex_0_2_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_8_3,
          poison_3_1_0
        }:
          buildMix ({
            name = "tub_ex";
            version = "0.2.2";
            src = fetchHex {
              pkg = "tub_ex";
              version = "0.2.2";
              sha256 =
                "c195b2b8d3bc712ed3abaa047f676112bd45551859268022647b42387e298832";
            };
            beamDeps  = [ httpoison_0_8_3 poison_3_1_0 ];

            meta = {
              description = ''Elixir wrapper of YouTube Data API v3'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rastopyr/tub_ex";
            };
          } // packageOverrides)
      ) {};

    tub_ex = tub_ex_0_2_2;

    tube_0_1_1 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex }:
          buildErlangMk ({
            name = "tube";
            version = "0.1.1";
            src = fetchHex {
              pkg = "tube";
              version = "0.1.1";
              sha256 =
                "f1d448a8453c261678f0f1741f6c5896fe0b9ad0bcb4afc7b334627546a22e87";
            };

            meta = {
              description = ''WebSocket client library in pure elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/narrowtux/Tube";
            };
          } // packageOverrides)
      ) {};

    tube = tube_0_1_1;

    tubex_0_0_7 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_8_3,
          poison_2_2_0
        }:
          buildMix ({
            name = "tubex";
            version = "0.0.7";
            src = fetchHex {
              pkg = "tubex";
              version = "0.0.7";
              sha256 =
                "8b34ade3d0484ee5ebb1155c16454d545284d0c215bf999a206cbcc198acea83";
            };
            beamDeps  = [ httpoison_0_8_3 poison_2_2_0 ];

            meta = {
              description = ''Elixir wrapper of YouTube Data API v3'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/yoavlt/tubex";
            };
          } // packageOverrides)
      ) {};

    tubex = tubex_0_0_7;

    tubo_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "tubo";
            version = "0.1.0";
            src = fetchHex {
              pkg = "tubo";
              version = "0.1.0";
              sha256 =
                "eab699c2abb702283bc39b863f5cf56fe43948fd8c0d743b899316f75b14a407";
            };

            meta = {
              description = ''**The tiny wrapper for functions to use them in
                            pipelines.**'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/am-kantox/tubo";
            };
          } // packageOverrides)
      ) {};

    tubo = tubo_0_1_0;

    tuco_tuco_0_8_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, webdriver_0_8_1 }:
          buildMix ({
            name = "tuco_tuco";
            version = "0.8.1";
            src = fetchHex {
              pkg = "tuco_tuco";
              version = "0.8.1";
              sha256 =
                "9c61ae99070047928940100e4bc4808583eae656cfaae03e7d6b7a3b3cc23c74";
            };
            beamDeps  = [ webdriver_0_8_1 ];

            meta = {
              description = ''Testing tool for web applications'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/stuart/tuco-tuco";
            };
          } // packageOverrides)
      ) {};

    tuco_tuco = tuco_tuco_0_8_1;

    tunnerl_0_2_2 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          lager_3_0_2,
          ranch_1_2_1
        }:
          buildRebar3 ({
            name = "tunnerl";
            version = "0.2.2";
            src = fetchHex {
              pkg = "tunnerl";
              version = "0.2.2";
              sha256 =
                "8b630b43d77f5c92901d6a1909be7ce3c8cd5668fa05263e2fcdf73b00d63bd0";
            };

            beamDeps  = [ lager_3_0_2 ranch_1_2_1 ];

            meta = {
              description = ''SOCKS4 and SOCKS5 proxy server'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/surik/tunnerl";
            };
          } // packageOverrides)
      ) {};

    tunnerl = tunnerl_0_2_2;

    turbolinks_0_3_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          phoenix_1_1_9,
          plug_1_3_5
        }:
          buildMix ({
            name = "turbolinks";
            version = "0.3.1";
            src = fetchHex {
              pkg = "turbolinks";
              version = "0.3.1";
              sha256 =
                "3ab44b8643119e40990762fa94a45b88c7dab768d5318e2ba23b9145e64c9bea";
            };
            beamDeps  = [ phoenix_1_1_9 plug_1_3_5 ];

            meta = {
              description = ''A plug and play package for using Turbolinks with
                            Elixir web frameworks'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/imranismail/turbolinks";
            };
          } // packageOverrides)
      ) {};

    turbolinks = turbolinks_0_3_1;

    turbolinks_plug_1_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ex_doc_0_16_1,
          plug_1_3_5
        }:
          buildMix ({
            name = "turbolinks_plug";
            version = "1.0.0";
            src = fetchHex {
              pkg = "turbolinks_plug";
              version = "1.0.0";
              sha256 =
                "f1909e6aa368c7c6bbb4a3baab2f476e6d9b2242294519f455d07889c1cd47a2";
            };
            beamDeps  = [ ex_doc_0_16_1 plug_1_3_5 ];

            meta = {
              description = ''An elixir plug that adds headers on redirects to
                            hint turbolinks correct URL'';
              license = stdenv.lib.licenses.mit;
              homepage = "http://github.com/kagux/turbolinks_plug";
            };
          } // packageOverrides)
      ) {};

    turbolinks_plug = turbolinks_plug_1_0_0;

    tvdb_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "tvdb";
            version = "0.0.1";
            src = fetchHex {
              pkg = "tvdb";
              version = "0.0.1";
              sha256 =
                "627d0ce97938039748960550abe9bebe1f55be39701f85e85ff9f2b6e4af9f00";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''Wrapper for TVDb API'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/markman123/tvdb";
            };
          } // packageOverrides)
      ) {};

    tvdb = tvdb_0_0_1;

    twilex_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_8_3,
          poison_2_2_0
        }:
          buildMix ({
            name = "twilex";
            version = "0.0.2";
            src = fetchHex {
              pkg = "twilex";
              version = "0.0.2";
              sha256 =
                "b032ee0327c90a9a0545756d771778129d6ded10dfade86b2c8dd1eb80fb56de";
            };
            beamDeps  = [ httpoison_0_8_3 poison_2_2_0 ];

            meta = {
              description = ''A Twilio client for elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hisea/twilex";
            };
          } // packageOverrides)
      ) {};

    twilex = twilex_0_0_2;

    twilio_auth_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, plug_1_3_5 }:
          buildMix ({
            name = "twilio_auth";
            version = "0.3.0";
            src = fetchHex {
              pkg = "twilio_auth";
              version = "0.3.0";
              sha256 =
                "5bd7ed89d3eea07b76d577601948d631cf68c9a2860577a00f933a1af3f7844c";
            };
            beamDeps  = [ plug_1_3_5 ];

            meta = {
              description = ''Library providing authentication for https
                            requests from twilio.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/avvo/twilio-auth";
            };
          } // packageOverrides)
      ) {};

    twilio_auth = twilio_auth_0_3_0;

    twittertex_0_2_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, phoenix_html_2_9_3
        }:
          buildMix ({
            name = "twittertex";
            version = "0.2.0";
            src = fetchHex {
              pkg = "twittertex";
              version = "0.2.0";
              sha256 =
                "057622f31c9b46d6e246e20f1ee405eb5a3ef953ce67ac03b0cde932dad676c1";
            };
            beamDeps  = [ phoenix_html_2_9_3 ];

            meta = {
              description = ''Formats a tweet as HTML, using the entities from
                            its JSON structure.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tomtaylor/twittertex";
            };
          } // packageOverrides)
      ) {};

    twittertex = twittertex_0_2_0;

    twittex_0_3_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          gen_stage_0_12_0,
          httpoison_0_11_2,
          oauth2_0_9_1,
          oauther_1_1_0,
          poison_3_1_0,
          poolboy_1_5_1
        }:
          buildMix ({
            name = "twittex";
            version = "0.3.3";
            src = fetchHex {
              pkg = "twittex";
              version = "0.3.3";
              sha256 =
                "2e68a89a2b7939a002128977dbfafd75adbfbab56a416f46014d23e213771bfe";
            };
            beamDeps  = [
                          gen_stage_0_12_0
                          httpoison_0_11_2
                          oauth2_0_9_1
                          oauther_1_1_0
                          poison_3_1_0
                          poolboy_1_5_1
                        ];

            meta = {
              description = ''Twitter client library for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/almightycouch/twittex";
            };
          } // packageOverrides)
      ) {};

    twittex = twittex_0_3_3;

    type_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "type";
            version = "0.0.2";
            src = fetchHex {
              pkg = "type";
              version = "0.0.2";
              sha256 =
                "1553ec18df7781cc1144477e075ac3c907aa7900db308d9d43cf7cfbeeb7a8ac";
            };

            meta = {
              description = ''A module for checking the type of an argument'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jeffreybaird/type";
            };
          } // packageOverrides)
      ) {};

    type = type_0_0_2;

    type_class_1_0_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, exceptional_2_1_0
        }:
          buildMix ({
            name = "type_class";
            version = "1.0.0";
            src = fetchHex {
              pkg = "type_class";
              version = "1.0.0";
              sha256 =
                "3cb5c076450a8746585419c3aba7af281bd8414ce3f6ba5001dbdbacbb5df94b";
            };
            beamDeps  = [ exceptional_2_1_0 ];

            meta = {
              description = ''(Semi-)principled type classes for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/expede/type_class";
            };
          } // packageOverrides)
      ) {};

    type_class = type_class_1_0_0;

    type_struct_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "type_struct";
            version = "0.1.0";
            src = fetchHex {
              pkg = "type_struct";
              version = "0.1.0";
              sha256 =
                "fb236e562e80d9426fb1b9fe4173ed27efe1101ea6e24fcf9591de8ca6eaf3b2";
            };

            meta = {
              description = ''A better way to define structs and their
                            types.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/net/type_struct";
            };
          } // packageOverrides)
      ) {};

    type_struct = type_struct_0_1_0;

    typeformx_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_8_3,
          poison_1_5_2
        }:
          buildMix ({
            name = "typeformx";
            version = "0.0.1";
            src = fetchHex {
              pkg = "typeformx";
              version = "0.0.1";
              sha256 =
                "8f6f1613f53f8c5012eb6d05276f5d305bdb9d4b0e94926680b536d0e1d94a62";
            };
            beamDeps  = [ httpoison_0_8_3 poison_1_5_2 ];

            meta = {
              description = ''An Elixir client library for the Typeform API
                            (typeform.io)'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/netflakes/TypeformX";
            };
          } // packageOverrides)
      ) {};

    typeformx = typeformx_0_0_1;

    typeracer_0_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_10_0,
          poison_3_1_0
        }:
          buildMix ({
            name = "typeracer";
            version = "0.1.2";
            src = fetchHex {
              pkg = "typeracer";
              version = "0.1.2";
              sha256 =
                "dc62724091df209fa7c577d4850ce3c47f22fb9d9d09e81ee6cd253b47eab078";
            };
            beamDeps  = [ httpoison_0_10_0 poison_3_1_0 ];

            meta = {
              description = ''Typeracer.com statistics api wrapper'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/tsubery/typeracer";
            };
          } // packageOverrides)
      ) {};

    typeracer = typeracer_0_1_2;

    types_0_1_6 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "types";
            version = "0.1.6";
            src = fetchHex {
              pkg = "types";
              version = "0.1.6";
              sha256 =
                "9ec262dd986e80eacb7e49d61f33d672bf0afa57fa33c653fcc858fa2df9fce7";
            };

            buildPlugins  = [ rebar3_proper ];


            meta = {
              description = ''Conflict-free Replicated Data Types'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/lasp-lang/types";
            };
          } // packageOverrides)
      ) {};

    types = types_0_1_6;

    typetalk_0_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0,
          socket_0_3_12
        }:
          buildMix ({
            name = "typetalk";
            version = "0.1.2";
            src = fetchHex {
              pkg = "typetalk";
              version = "0.1.2";
              sha256 =
                "91b7ac036356ac2e5d3df324e8d39fd7b8739635ae760a4c8809b45735535710";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 socket_0_3_12 ];

            meta = {
              description = ''Typetalk API client for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/takuji/typetalk-elixir";
            };
          } // packageOverrides)
      ) {};

    typetalk = typetalk_0_1_2;

    typex_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "typex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "typex";
              version = "0.1.0";
              sha256 =
                "69b84ca649bc5f4d12ccabd09a4ebccdc49997b84dd96edf729f58ef1675dc76";
            };

            meta = {
              description = ''A module for checking the type and values of an
                            argument'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/blackode/typex";
            };
          } // packageOverrides)
      ) {};

    typex = typex_0_1_0;

    tzdata_0_5_12 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, hackney_1_8_6 }:
          buildMix ({
            name = "tzdata";
            version = "0.5.12";
            src = fetchHex {
              pkg = "tzdata";
              version = "0.5.12";
              sha256 =
                "2b1f46940a61331fc01e4b33384bfa4d43195a2122816dcd8817345d294e7a27";
            };
            beamDeps  = [ hackney_1_8_6 ];

            meta = {
              description = ''Tzdata is a parser and library for the tz
                            database.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lau/tzdata";
            };
          } // packageOverrides)
      ) {};

    tzdata = tzdata_0_5_12;

    tzdata_0_5_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, hackney_1_8_6 }:
          buildMix ({
            name = "tzdata";
            version = "0.5.3";
            src = fetchHex {
              pkg = "tzdata";
              version = "0.5.3";
              sha256 =
                "cac080f5b92350728d3301c107c8080e47f38ab31e335dc41899f5a607a4bbc3";
            };
            beamDeps  = [ hackney_1_8_6 ];

            meta = {
              description = ''Tzdata is a parser and library for the tz
                            database.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lau/tzdata";
            };
          } // packageOverrides)
      ) {};

    u2f_0_1_5 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          base64url_0_0_1,
          jiffy_0_14_7
        }:
          buildRebar3 ({
            name = "u2f";
            version = "0.1.5";
            src = fetchHex {
              pkg = "u2f";
              version = "0.1.5";
              sha256 =
                "6a874db5cc14f1e16bef2cf8f2f8115c654cef022f13e65c98d8b93dc910ebf4";
            };

            beamDeps  = [ base64url_0_0_1 jiffy_0_14_7 ];

            meta = {
              description = ''Server-side U2F library'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/sharpfin/u2f-erl";
            };
          } // packageOverrides)
      ) {};

    u2f = u2f_0_1_5;

    u_token_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ex_doc_0_15_1 }:
          buildMix ({
            name = "u_token";
            version = "0.0.2";
            src = fetchHex {
              pkg = "u_token";
              version = "0.0.2";
              sha256 =
                "123ddb66755d590980b8ffa62b8cacff9a47623f6312c9efe4d18c63c25eb75e";
            };
            beamDeps  = [ ex_doc_0_15_1 ];

            meta = {
              description = ''Generates random tokens from arbitrary character
                            sets.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jamesotron/u_token";
            };
          } // packageOverrides)
      ) {};

    u_token = u_token_0_0_2;

    ua_classifier_1_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "ua_classifier";
            version = "1.0.0";
            src = fetchHex {
              pkg = "ua_classifier";
              version = "1.0.0";
              sha256 =
                "59c3b3ed96a10fe05e91202a3ca983b40215c41dde0733fe6dd8a6841b6e315d";
            };
            compilePorts = true;
            buildPlugins  = [ pc ];


            meta = {
              description = ''Erlang User Agent Classifier - NIF for
                            WeatherChannel dClass'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/zotonic/ua_classifier";
            };
          } // packageOverrides)
      ) {};

    ua_classifier = ua_classifier_1_0_0;

    ua_inspector_0_14_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_8_6,
          poolboy_1_5_1,
          yamerl_0_5_0
        }:
          buildMix ({
            name = "ua_inspector";
            version = "0.14.0";
            src = fetchHex {
              pkg = "ua_inspector";
              version = "0.14.0";
              sha256 =
                "48cb76b2dd838bc75b031523a90028c045399d5f0349ea4e56f410430ab83c53";
            };
            beamDeps  = [ hackney_1_8_6 poolboy_1_5_1 yamerl_0_5_0 ];

            meta = {
              description = ''User agent parser library'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/elixytics/ua_inspector";
            };
          } // packageOverrides)
      ) {};

    ua_inspector = ua_inspector_0_14_0;

    ua_parser_1_2_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, yamerl_0_4_0 }:
          buildMix ({
            name = "ua_parser";
            version = "1.2.1";
            src = fetchHex {
              pkg = "ua_parser";
              version = "1.2.1";
              sha256 =
                "6fc9819430167692805f6a31effb27326b2dd628a9d465332f2fc1340dc3fa9e";
            };
            beamDeps  = [ yamerl_0_4_0 ];

            meta = {
              description = ''Parse user-agent strings with BrowserScope
                            patterns'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/doomspork/ua_parser";
            };
          } // packageOverrides)
      ) {};

    ua_parser = ua_parser_1_2_1;

    ua_parser2_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          poolboy_1_5_1,
          yaml_elixir_1_2_0
        }:
          buildMix ({
            name = "ua_parser2";
            version = "0.0.2";
            src = fetchHex {
              pkg = "ua_parser2";
              version = "0.0.2";
              sha256 =
                "d2effc9c4b8e11bf268a6d76a32b5d5312ccae9fa553f79215aba951f81a869c";
            };
            beamDeps  = [ poolboy_1_5_1 yaml_elixir_1_2_0 ];

            meta = {
              description = ''A port of ua-parser2 to Elixir. User agent parser
                            library.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/nazipov/ua_parser2-elixir";
            };
          } // packageOverrides)
      ) {};

    ua_parser2 = ua_parser2_0_0_2;

    uap_elixir_0_1_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, yaml_elixir_1_3_0
        }:
          buildMix ({
            name = "uap_elixir";
            version = "0.1.0";
            src = fetchHex {
              pkg = "uap_elixir";
              version = "0.1.0";
              sha256 =
                "6c2edd61600b603718718cb42ae1bbf534dc9ff03aa4bbff6111e8ebf3f5f509";
            };
            beamDeps  = [ yaml_elixir_1_3_0 ];

            meta = {
              longDescription = ''Elixir package to parse User Agent strings
                                using BrowserScope`s collection of regexes'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/KingNoosh/uap-elixir";
            };
          } // packageOverrides)
      ) {};

    uap_elixir = uap_elixir_0_1_0;

    uber_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "uber";
            version = "0.1.0";
            src = fetchHex {
              pkg = "uber";
              version = "0.1.0";
              sha256 =
                "bf3dde22ad6207577ea1093649394d968ef94725fdc56d5ea6afd22d12886d9a";
            };

            meta = {
              description = ''Utilities for working with the UBER hypermedia
                            format'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/gamache/uber.ex";
            };
          } // packageOverrides)
      ) {};

    uber = uber_0_1_0;

    uberauth_twitch_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          oauth2_0_8_3,
          ueberauth_0_4_0
        }:
          buildMix ({
            name = "uberauth_twitch";
            version = "0.1.1";
            src = fetchHex {
              pkg = "uberauth_twitch";
              version = "0.1.1";
              sha256 =
                "d08750daeca9dc2c5be3869ef0a9001fcaaef1ebe5ec996c01cc32a0f2e5f9a4";
            };
            beamDeps  = [ oauth2_0_8_3 ueberauth_0_4_0 ];

            meta = {
              description = ''An Ueberauth strategy for using Twitch to
                            authenticate your users.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/imfrant/ueberauth_twitch";
            };
          } // packageOverrides)
      ) {};

    uberauth_twitch = uberauth_twitch_0_1_1;

    ucol_2_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "ucol";
            version = "2.0.0";
            src = fetchHex {
              pkg = "ucol";
              version = "2.0.0";
              sha256 =
                "b544b88ce034d1d1ab58e093744cbded9a1e8b05006870b4d3865d6cd5066a21";
            };
            compilePorts = true;

            meta = {
              description = ''ICU based collation module'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/refuge/ucol_nif";
            };
          } // packageOverrides)
      ) {};

    ucol = ucol_2_0_0;

    ucol_nif_1_1_5 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "ucol_nif";
            version = "1.1.5";
            src = fetchHex {
              pkg = "ucol_nif";
              version = "1.1.5";
              sha256 =
                "a6fad2b92dfe84a2654a085163de39cae88762d14c414cdeaeb66ac41d5c156e";
            };
            compilePorts = true;

            meta = {
              description = ''ICU based collation module'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/refuge/ucol_nif";
            };
          } // packageOverrides)
      ) {};

    ucol_nif = ucol_nif_1_1_5;

    udia_0_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          comeonin_3_0_2,
          cowboy_1_1_2,
          gettext_0_13_1,
          phoenix_1_1_9,
          phoenix_ecto_3_2_3,
          phoenix_html_2_9_3,
          phoenix_pubsub_1_0_1,
          postgrex_1_0_0_rc_1
        }:
          buildMix ({
            name = "udia";
            version = "0.1.2";
            src = fetchHex {
              pkg = "udia";
              version = "0.1.2";
              sha256 =
                "d535e8b46c1ce8c73d4375187fc55abbb7821f9cec9b36b7594277754bc5bee9";
            };
            beamDeps  = [
                          comeonin_3_0_2
                          cowboy_1_1_2
                          gettext_0_13_1
                          phoenix_1_1_9
                          phoenix_ecto_3_2_3
                          phoenix_html_2_9_3
                          phoenix_pubsub_1_0_1
                          postgrex_1_0_0_rc_1
                        ];

            meta = {
              description = ''A web application in pursuit of meaning in
                            life.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/udia-software/udia";
            };
          } // packageOverrides)
      ) {};

    udia = udia_0_1_2;

    udpflux_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "udpflux";
            version = "0.0.2";
            src = fetchHex {
              pkg = "udpflux";
              version = "0.0.2";
              sha256 =
                "0a6d0003b818364bad9ed8bc55b8789b8fc129d055799cd517a551445fe0649e";
            };

            meta = {
              description = ''An opinionated UDP-only InfluxDB client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/timbuchwaldt/udpflux";
            };
          } // packageOverrides)
      ) {};

    udpflux = udpflux_0_0_2;

    ueberauth_0_4_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, plug_1_3_5 }:
          buildMix ({
            name = "ueberauth";
            version = "0.4.0";
            src = fetchHex {
              pkg = "ueberauth";
              version = "0.4.0";
              sha256 =
                "d3bcb678a8fdcd0add619eacb3e45e51003f50aa434ea732746ea25c37f6c92b";
            };
            beamDeps  = [ plug_1_3_5 ];

            meta = {
              description = ''An Elixir Authentication System for Plug-based
                            Web Applications'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ueberauth/ueberauth";
            };
          } // packageOverrides)
      ) {};

    ueberauth = ueberauth_0_4_0;

    ueberauth_active_directory_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exldap_0_4_1,
          plug_1_3_5,
          ueberauth_0_4_0
        }:
          buildMix ({
            name = "ueberauth_active_directory";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ueberauth_active_directory";
              version = "0.1.0";
              sha256 =
                "651a5e190457b0171da09399bfd0cfe7cfeef291f53ac3231e521b6bdbf21359";
            };
            beamDeps  = [ exldap_0_4_1 plug_1_3_5 ueberauth_0_4_0 ];

            meta = {
              description = ''Ueberauth strategy for Active Directory
                            authentication'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/torrick/ueberauth_active_directory";
            };
          } // packageOverrides)
      ) {};

    ueberauth_active_directory = ueberauth_active_directory_0_1_0;

    ueberauth_auth0_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          oauth2_0_9_1,
          ueberauth_0_4_0
        }:
          buildMix ({
            name = "ueberauth_auth0";
            version = "0.2.0";
            src = fetchHex {
              pkg = "ueberauth_auth0";
              version = "0.2.0";
              sha256 =
                "852dd8c8e9a7151b75d991e60fe01b213864bdff96dd199f9d82b581980e8ea9";
            };
            beamDeps  = [ oauth2_0_9_1 ueberauth_0_4_0 ];

            meta = {
              description = ''An Ueberauth strategy for using Auth0 to
                            authenticate your users.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sntran/ueberauth_auth0";
            };
          } // packageOverrides)
      ) {};

    ueberauth_auth0 = ueberauth_auth0_0_2_0;

    ueberauth_bitbucket_1_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          oauth2_0_9_1,
          ueberauth_0_4_0
        }:
          buildMix ({
            name = "ueberauth_bitbucket";
            version = "1.0.0";
            src = fetchHex {
              pkg = "ueberauth_bitbucket";
              version = "1.0.0";
              sha256 =
                "0d1c394b34d367494a9930465d4e89ced9ef0a864ac6223b34af077375e5caf4";
            };
            beamDeps  = [ oauth2_0_9_1 ueberauth_0_4_0 ];

            meta = {
              description = ''An Ueberauth strategy for using Bitbucket to
                            authenticate your users.'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    ueberauth_bitbucket = ueberauth_bitbucket_1_0_0;

    ueberauth_cas_1_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          floki_0_17_2,
          httpoison_0_11_2,
          ueberauth_0_4_0
        }:
          buildMix ({
            name = "ueberauth_cas";
            version = "1.1.0";
            src = fetchHex {
              pkg = "ueberauth_cas";
              version = "1.1.0";
              sha256 =
                "ab9522635c2c1374b02279436a78a334042b9dfee95ba4d52c22034ad00efc4a";
            };
            beamDeps  = [ floki_0_17_2 httpoison_0_11_2 ueberauth_0_4_0 ];

            meta = {
              description = ''An Ueberauth strategy for CAS authentication.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/marceldegraaf/ueberauth_cas";
            };
          } // packageOverrides)
      ) {};

    ueberauth_cas = ueberauth_cas_1_1_0;

    ueberauth_coding_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          oauth2_0_9_1,
          ueberauth_0_4_0
        }:
          buildMix ({
            name = "ueberauth_coding";
            version = "0.1.1";
            src = fetchHex {
              pkg = "ueberauth_coding";
              version = "0.1.1";
              sha256 =
                "09da1094ca7229d6dee0179e6fdc45c8efad5e771523795c1e094a5c8c5ad5c8";
            };
            beamDeps  = [ oauth2_0_9_1 ueberauth_0_4_0 ];

            meta = {
              description = ''An Ueberauth strategy for using Coding to
                            authenticate your users.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lixu19941116/ueberauth_coding";
            };
          } // packageOverrides)
      ) {};

    ueberauth_coding = ueberauth_coding_0_1_1;

    ueberauth_discord_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          oauth2_0_9_1,
          ueberauth_0_4_0
        }:
          buildMix ({
            name = "ueberauth_discord";
            version = "0.3.0";
            src = fetchHex {
              pkg = "ueberauth_discord";
              version = "0.3.0";
              sha256 =
                "41d3158b951f2e4ac916408e3505a0885244277f4b8062ceb8b33566ae518e10";
            };
            beamDeps  = [ oauth2_0_9_1 ueberauth_0_4_0 ];

            meta = {
              description = ''An Uberauth strategy for Discord
                            authentication.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/schwarz/ueberauth_discord";
            };
          } // packageOverrides)
      ) {};

    ueberauth_discord = ueberauth_discord_0_3_0;

    ueberauth_dropbox_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          oauth2_0_9_1,
          ueberauth_0_4_0
        }:
          buildMix ({
            name = "ueberauth_dropbox";
            version = "0.1.1";
            src = fetchHex {
              pkg = "ueberauth_dropbox";
              version = "0.1.1";
              sha256 =
                "9288f28e9414265d0b0186f47575e1ac299c3578cdbcce65f85526270cfb4898";
            };
            beamDeps  = [ oauth2_0_9_1 ueberauth_0_4_0 ];

            meta = {
              description = ''An Ueberauth strategy for using Dropbox'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ryotsu/ueberauth_dropbox";
            };
          } // packageOverrides)
      ) {};

    ueberauth_dropbox = ueberauth_dropbox_0_1_1;

    ueberauth_facebook_0_3_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          oauth2_0_9_1,
          ueberauth_0_4_0
        }:
          buildMix ({
            name = "ueberauth_facebook";
            version = "0.3.2";
            src = fetchHex {
              pkg = "ueberauth_facebook";
              version = "0.3.2";
              sha256 =
                "d766a41a0b26bccfc1371b776bfcfb760f09639ac3de9aa8885023af9e5641c5";
            };
            beamDeps  = [ oauth2_0_9_1 ueberauth_0_4_0 ];

            meta = {
              description = ''An Uberauth strategy for Facebook
                            authentication.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ueberauth/ueberauth_facebook";
            };
          } // packageOverrides)
      ) {};

    ueberauth_facebook_0_6_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          oauth2_0_8_3,
          ueberauth_0_4_0
        }:
          buildMix ({
            name = "ueberauth_facebook";
            version = "0.6.0";
            src = fetchHex {
              pkg = "ueberauth_facebook";
              version = "0.6.0";
              sha256 =
                "6dd407dc96cc15b4ca8e194e1311dbd5a03ac1c73d60a63684e40d2bc9116dac";
            };
            beamDeps  = [ oauth2_0_8_3 ueberauth_0_4_0 ];

            meta = {
              description = ''An Uberauth strategy for Facebook
                            authentication.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ueberauth/ueberauth_facebook";
            };
          } // packageOverrides)
      ) {};

    ueberauth_facebook = ueberauth_facebook_0_6_0;

    ueberauth_fitbit_0_2_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          oauth2_0_9_1,
          ueberauth_0_4_0
        }:
          buildMix ({
            name = "ueberauth_fitbit";
            version = "0.2.3";
            src = fetchHex {
              pkg = "ueberauth_fitbit";
              version = "0.2.3";
              sha256 =
                "e946dd83267aa7b7e9af25ddfdd9112b86078f806d1be4420857b12bdb45c232";
            };
            beamDeps  = [ oauth2_0_9_1 ueberauth_0_4_0 ];

            meta = {
              description = ''An Ueberauth strategy for Fitbit OAuth2
                            authentication'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/vinniefranco/ueberauth_fitbit";
            };
          } // packageOverrides)
      ) {};

    ueberauth_fitbit = ueberauth_fitbit_0_2_3;

    ueberauth_flickr_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          flickrex_0_3_0,
          ueberauth_0_4_0
        }:
          buildMix ({
            name = "ueberauth_flickr";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ueberauth_flickr";
              version = "0.1.0";
              sha256 =
                "ec05a6c168e0dc3f7280ede19371ea29b8c005f08370ec7bb8b49e671e7919a5";
            };
            beamDeps  = [ flickrex_0_3_0 ueberauth_0_4_0 ];

            meta = {
              description = ''Flickr strategy for Überauth'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/christopheradams/ueberauth_flickr";
            };
          } // packageOverrides)
      ) {};

    ueberauth_flickr = ueberauth_flickr_0_1_0;

    ueberauth_foursquare_0_1_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          oauth2_0_9_1,
          ueberauth_0_4_0
        }:
          buildMix ({
            name = "ueberauth_foursquare";
            version = "0.1.3";
            src = fetchHex {
              pkg = "ueberauth_foursquare";
              version = "0.1.3";
              sha256 =
                "602ea4295663ac368077585959be2ae8d695569ca2d89711f593c92342475ded";
            };
            beamDeps  = [ oauth2_0_9_1 ueberauth_0_4_0 ];

            meta = {
              description = ''An Überauth strategy for using Foursquare to
                            authenticate users'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/borodiychuk/ueberauth_foursquare";
            };
          } // packageOverrides)
      ) {};

    ueberauth_foursquare = ueberauth_foursquare_0_1_3;

    ueberauth_freeagent_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          oauth2_0_9_1,
          ueberauth_0_4_0
        }:
          buildMix ({
            name = "ueberauth_freeagent";
            version = "0.1.1";
            src = fetchHex {
              pkg = "ueberauth_freeagent";
              version = "0.1.1";
              sha256 =
                "2ab8f087be9d85bfcf4fa4f96fdc5b4af87db3eedf25d4b0638a97f4aa70f52f";
            };
            beamDeps  = [ oauth2_0_9_1 ueberauth_0_4_0 ];

            meta = {
              description = ''An Ueberauth strategy to use FreeAgent for
                            authentication.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bruce/ueberauth_freeagent";
            };
          } // packageOverrides)
      ) {};

    ueberauth_freeagent = ueberauth_freeagent_0_1_1;

    ueberauth_github_0_4_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          oauth2_0_9_1,
          ueberauth_0_4_0
        }:
          buildMix ({
            name = "ueberauth_github";
            version = "0.4.1";
            src = fetchHex {
              pkg = "ueberauth_github";
              version = "0.4.1";
              sha256 =
                "b37ca214102a7ca73e460ea705ca20b8422a0478a762ead4db61be1ad2c41c24";
            };
            beamDeps  = [ oauth2_0_9_1 ueberauth_0_4_0 ];

            meta = {
              description = ''An Ueberauth strategy for using Github to
                            authenticate your users.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ueberauth/ueberauth_github";
            };
          } // packageOverrides)
      ) {};

    ueberauth_github = ueberauth_github_0_4_1;

    ueberauth_gitlab_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          oauth2_0_8_3,
          ueberauth_0_4_0
        }:
          buildMix ({
            name = "ueberauth_gitlab";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ueberauth_gitlab";
              version = "0.1.0";
              sha256 =
                "e260e61a9da8d67af9f66fe22675d25c64f574325cfef0d91163fdc26f266e9f";
            };
            beamDeps  = [ oauth2_0_8_3 ueberauth_0_4_0 ];

            meta = {
              description = ''An Ueberauth strategy for gitlab'';
              license = stdenv.lib.licenses.unlicense;
              homepage = "https://github.com/gballet/ueberauth_gitlab";
            };
          } // packageOverrides)
      ) {};

    ueberauth_gitlab = ueberauth_gitlab_0_1_0;

    ueberauth_goodreads_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_1_0_2,
          sweet_xml_0_6_5,
          ueberauth_0_4_0
        }:
          buildMix ({
            name = "ueberauth_goodreads";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ueberauth_goodreads";
              version = "0.1.0";
              sha256 =
                "3227b7bf44c28d4fcd8b1e610b6776ae071686bf4cb28836bfb2f7c772854d25";
            };
            beamDeps  = [
                          httpoison_0_11_2
                          poison_1_0_2
                          sweet_xml_0_6_5
                          ueberauth_0_4_0
                        ];

            meta = {
              description = ''An Uberauth strategy for Goodreads
                            authentication.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tielur/ueberauth_goodreads";
            };
          } // packageOverrides)
      ) {};

    ueberauth_goodreads = ueberauth_goodreads_0_1_0;

    ueberauth_google_0_5_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          oauth2_0_9_1,
          ueberauth_0_4_0
        }:
          buildMix ({
            name = "ueberauth_google";
            version = "0.5.0";
            src = fetchHex {
              pkg = "ueberauth_google";
              version = "0.5.0";
              sha256 =
                "e1b992c6f24f230518e7e9a30aab2ff1e0cf23a68cec46b5d889c1e826447118";
            };
            beamDeps  = [ oauth2_0_9_1 ueberauth_0_4_0 ];

            meta = {
              description = ''An Uberauth strategy for Google
                            authentication.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ueberauth/ueberauth_google";
            };
          } // packageOverrides)
      ) {};

    ueberauth_google = ueberauth_google_0_5_0;

    ueberauth_heroku_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          oauth2_0_6_0,
          ueberauth_0_4_0
        }:
          buildMix ({
            name = "ueberauth_heroku";
            version = "0.1.1";
            src = fetchHex {
              pkg = "ueberauth_heroku";
              version = "0.1.1";
              sha256 =
                "dd53e007dd2e27b80b29973eeb0df9556e41631e2a9117023a5b741281bbc435";
            };
            beamDeps  = [ oauth2_0_6_0 ueberauth_0_4_0 ];

            meta = {
              description = ''An Ueberauth strategy for using Heroku to
                            authenticate your users.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/maxbeizer/ueberauth_heroku";
            };
          } // packageOverrides)
      ) {};

    ueberauth_heroku = ueberauth_heroku_0_1_1;

    ueberauth_identity_0_2_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          plug_1_3_5,
          ueberauth_0_4_0
        }:
          buildMix ({
            name = "ueberauth_identity";
            version = "0.2.3";
            src = fetchHex {
              pkg = "ueberauth_identity";
              version = "0.2.3";
              sha256 =
                "ebbb4d7fe6c94053486a32794ab2a561f004f01fd1099c7e0a69901dc32c51ca";
            };
            beamDeps  = [ plug_1_3_5 ueberauth_0_4_0 ];

            meta = {
              description = ''An Ueberauth strategy for basic
                            username/password'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ueberauth/ueberauth_identity";
            };
          } // packageOverrides)
      ) {};

    ueberauth_identity = ueberauth_identity_0_2_3;

    ueberauth_instagram_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          oauth2_0_9_1,
          ueberauth_0_4_0
        }:
          buildMix ({
            name = "ueberauth_instagram";
            version = "0.2.0";
            src = fetchHex {
              pkg = "ueberauth_instagram";
              version = "0.2.0";
              sha256 =
                "c2716999f8ef3323dc30f6158643ac1aad6f7cb06c570171536edfaa258f3b46";
            };
            beamDeps  = [ oauth2_0_9_1 ueberauth_0_4_0 ];

            meta = {
              description = ''An Uberauth strategy for Instagram
                            authentication.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jasontruluck/ueberauth_instagram";
            };
          } // packageOverrides)
      ) {};

    ueberauth_instagram = ueberauth_instagram_0_2_0;

    ueberauth_jawbone_1_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          oauth2_0_9_1,
          ueberauth_0_4_0
        }:
          buildMix ({
            name = "ueberauth_jawbone";
            version = "1.0.2";
            src = fetchHex {
              pkg = "ueberauth_jawbone";
              version = "1.0.2";
              sha256 =
                "aabb2e1ac46219cc34ea600b0d85f6c5b13a9b0752a9546899619a3ef4452cdb";
            };
            beamDeps  = [ oauth2_0_9_1 ueberauth_0_4_0 ];

            meta = {
              description = ''An Uberauth strategy for Jawbone
                            authentication.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/tsubery/ueberauth_jawbone";
            };
          } // packageOverrides)
      ) {};

    ueberauth_jawbone = ueberauth_jawbone_1_0_2;

    ueberauth_line_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, oauth2_0_9_1 }:
          buildMix ({
            name = "ueberauth_line";
            version = "0.1.1";
            src = fetchHex {
              pkg = "ueberauth_line";
              version = "0.1.1";
              sha256 =
                "523dc890374f366bdadcfe7073e2f9ff8a33bcfb320e44c441fe2f670c1d46a2";
            };
            beamDeps  = [ oauth2_0_9_1 ];

            meta = {
              description = ''An Uberauth strategy for LINE authentication.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/alexfilatov/ueberauth_line";
            };
          } // packageOverrides)
      ) {};

    ueberauth_line = ueberauth_line_0_1_1;

    ueberauth_linkedin_0_3_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          oauth2_0_9_1,
          ueberauth_0_4_0
        }:
          buildMix ({
            name = "ueberauth_linkedin";
            version = "0.3.2";
            src = fetchHex {
              pkg = "ueberauth_linkedin";
              version = "0.3.2";
              sha256 =
                "65d9c7ee2bc460887e04ab73e80e51816a35070ba7ff15b0810e097a64eca738";
            };
            beamDeps  = [ oauth2_0_9_1 ueberauth_0_4_0 ];

            meta = {
              description = ''An Ueberauth strategy for LinkedIn
                            authentication'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/fajarmf/ueberauth_linkedin";
            };
          } // packageOverrides)
      ) {};

    ueberauth_linkedin = ueberauth_linkedin_0_3_2;

    ueberauth_microsoft_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          oauth2_0_6_0,
          ueberauth_0_4_0
        }:
          buildMix ({
            name = "ueberauth_microsoft";
            version = "0.2.0";
            src = fetchHex {
              pkg = "ueberauth_microsoft";
              version = "0.2.0";
              sha256 =
                "2d47f3718ccd3bf76a7a0c728d126db4e7903b00e4bfba742b81079e2863d615";
            };
            beamDeps  = [ oauth2_0_6_0 ueberauth_0_4_0 ];

            meta = {
              description = ''Microsoft Strategy for Überauth'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/swelham/ueberauth_microsoft";
            };
          } // packageOverrides)
      ) {};

    ueberauth_microsoft = ueberauth_microsoft_0_2_0;

    ueberauth_ok_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          oauth2_0_8_3,
          ueberauth_0_4_0
        }:
          buildMix ({
            name = "ueberauth_ok";
            version = "0.1.1";
            src = fetchHex {
              pkg = "ueberauth_ok";
              version = "0.1.1";
              sha256 =
                "bcfd029204302f57caf383f08d718c757f3d06511ca4032c8a03315b47ce4af2";
            };
            beamDeps  = [ oauth2_0_8_3 ueberauth_0_4_0 ];

            meta = {
              description = ''An Uberauth strategy for Ok.ru authentication.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/KosyanMedia/ueberauth_ok";
            };
          } // packageOverrides)
      ) {};

    ueberauth_ok = ueberauth_ok_0_1_1;

    ueberauth_paypal_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          oauth2_0_9_1,
          ueberauth_0_4_0
        }:
          buildMix ({
            name = "ueberauth_paypal";
            version = "0.2.0";
            src = fetchHex {
              pkg = "ueberauth_paypal";
              version = "0.2.0";
              sha256 =
                "ff3ebf574aaeb3412453401f48536f2e266e668e71b610df1f505ec8a589f9a3";
            };
            beamDeps  = [ oauth2_0_9_1 ueberauth_0_4_0 ];

            meta = {
              description = ''An Uberauth strategy for Paypal
                            authentication.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/smeevil/ueberauth_paypal";
            };
          } // packageOverrides)
      ) {};

    ueberauth_paypal = ueberauth_paypal_0_2_0;

    ueberauth_pinterest_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ueberauth_pinterest";
            version = "0.0.1";
            src = fetchHex {
              pkg = "ueberauth_pinterest";
              version = "0.0.1";
              sha256 =
                "e2551c08cb0db05ee4492cc9d6565d2b4dcdd713e5a18709ce1967cfc6ec12b2";
            };

            meta = {
              description = ''An Ueberauth strategy for Pinterest
                            authentication.'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/matthewlehner/ueberauth_pinterest";
            };
          } // packageOverrides)
      ) {};

    ueberauth_pinterest = ueberauth_pinterest_0_0_1;

    ueberauth_pocket_1_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_10_0,
          poison_3_0_0,
          ueberauth_0_4_0
        }:
          buildMix ({
            name = "ueberauth_pocket";
            version = "1.0.1";
            src = fetchHex {
              pkg = "ueberauth_pocket";
              version = "1.0.1";
              sha256 =
                "2f948c515667fb0892ddc34ba2719d2844221a870430cd27bf63542c778e2eac";
            };
            beamDeps  = [ httpoison_0_10_0 poison_3_0_0 ueberauth_0_4_0 ];

            meta = {
              description = ''An Ueberauth strategy for using Pocket to
                            authenticate your users.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/tsubery/ueberauth_pocket";
            };
          } // packageOverrides)
      ) {};

    ueberauth_pocket = ueberauth_pocket_1_0_1;

    ueberauth_procore_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          oauth2_0_6_0,
          ueberauth_0_4_0
        }:
          buildMix ({
            name = "ueberauth_procore";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ueberauth_procore";
              version = "0.1.0";
              sha256 =
                "0fd7a393063ae0e8cf9f9a964c454c666aee31e0ad0c08f9f69013be7dc0a0ab";
            };
            beamDeps  = [ oauth2_0_6_0 ueberauth_0_4_0 ];

            meta = {
              description = ''An Ueberauth strategy for using Procore (OAuth)
                            authentication.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/voicelayer/ueberauth_procore";
            };
          } // packageOverrides)
      ) {};

    ueberauth_procore = ueberauth_procore_0_1_0;

    ueberauth_qiita_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          oauth2_0_6_0,
          ueberauth_0_4_0
        }:
          buildMix ({
            name = "ueberauth_qiita";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ueberauth_qiita";
              version = "0.1.0";
              sha256 =
                "7ed6b22f3d3bce33c9ce664b40d1de54c50931d505dd045870abce32342970f7";
            };
            beamDeps  = [ oauth2_0_6_0 ueberauth_0_4_0 ];

            meta = {
              description = ''An Uberauth strategy for Qiita authentication.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pocketberserker/ueberauth_qiita";
            };
          } // packageOverrides)
      ) {};

    ueberauth_qiita = ueberauth_qiita_0_1_0;

    ueberauth_runkeeper_1_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          oauth2_0_9_1,
          poison_3_1_0,
          ueberauth_0_4_0
        }:
          buildMix ({
            name = "ueberauth_runkeeper";
            version = "1.0.0";
            src = fetchHex {
              pkg = "ueberauth_runkeeper";
              version = "1.0.0";
              sha256 =
                "3ba5269e9ab8c1c9113edea3afe196d8fb8c286b642aa92ddcb683d891fd800e";
            };
            beamDeps  = [ oauth2_0_9_1 poison_3_1_0 ueberauth_0_4_0 ];

            meta = {
              description = ''An Uberauth strategy for Runkeeper
                            authentication.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/tsubery/ueberauth_runkeeper";
            };
          } // packageOverrides)
      ) {};

    ueberauth_runkeeper = ueberauth_runkeeper_1_0_0;

    ueberauth_shopify_0_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          oauth2_0_8_3,
          ueberauth_0_4_0
        }:
          buildMix ({
            name = "ueberauth_shopify";
            version = "0.1.2";
            src = fetchHex {
              pkg = "ueberauth_shopify";
              version = "0.1.2";
              sha256 =
                "863ba2040f1e00ec1e35d60c4389818667579471c5deebc4605d0747d115e168";
            };
            beamDeps  = [ oauth2_0_8_3 ueberauth_0_4_0 ];

            meta = {
              description = ''An Ueberauth strategy for authenticating your
                            application with Shopify.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/alistairstead/ueberauth_shopify";
            };
          } // packageOverrides)
      ) {};

    ueberauth_shopify = ueberauth_shopify_0_1_2;

    ueberauth_slack_0_4_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          oauth2_0_6_0,
          ueberauth_0_4_0
        }:
          buildMix ({
            name = "ueberauth_slack";
            version = "0.4.1";
            src = fetchHex {
              pkg = "ueberauth_slack";
              version = "0.4.1";
              sha256 =
                "55f505bd9d48ac524672712e6a6596c31b33c4f52a3eb580b61f8fd1f359bf85";
            };
            beamDeps  = [ oauth2_0_6_0 ueberauth_0_4_0 ];

            meta = {
              description = ''An Ueberauth strategy for using Slack to
                            authenticate your users'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    ueberauth_slack = ueberauth_slack_0_4_1;

    ueberauth_spotify_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          oauth2_0_9_1,
          ueberauth_0_4_0
        }:
          buildMix ({
            name = "ueberauth_spotify";
            version = "0.0.2";
            src = fetchHex {
              pkg = "ueberauth_spotify";
              version = "0.0.2";
              sha256 =
                "cfdaaa6cbed043dc75e71296e2997b2634a84f40041e9683a47e87e9d056b250";
            };
            beamDeps  = [ oauth2_0_9_1 ueberauth_0_4_0 ];

            meta = {
              description = ''An Uberauth strategy for Spotify
                            authentication.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/markusherzog/ueberauth_spotify";
            };
          } // packageOverrides)
      ) {};

    ueberauth_spotify = ueberauth_spotify_0_0_2;

    ueberauth_steam_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0,
          ueberauth_0_4_0
        }:
          buildMix ({
            name = "ueberauth_steam";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ueberauth_steam";
              version = "0.1.0";
              sha256 =
                "3d1c0ae36c051a573122a6b7acf797deef25f1d3b0bbab7e9d8620aec942d4ad";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ueberauth_0_4_0 ];

            meta = {
              description = ''Steam OpenID Strategy for Überauth.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/shinyscorpion/ueberauth_steam";
            };
          } // packageOverrides)
      ) {};

    ueberauth_steam = ueberauth_steam_0_1_0;

    ueberauth_strava_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          oauth2_0_9_1,
          ueberauth_0_4_0
        }:
          buildMix ({
            name = "ueberauth_strava";
            version = "0.1.1";
            src = fetchHex {
              pkg = "ueberauth_strava";
              version = "0.1.1";
              sha256 =
                "7b4ff04b25b2ab1c8cf043837d965a3d9dcc9fbe70ef37dfbcad26f1221ad17d";
            };
            beamDeps  = [ oauth2_0_9_1 ueberauth_0_4_0 ];

            meta = {
              description = ''An Uberauth strategy for Strava
                            authentication.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/andrewhao/ueberauth_strava";
            };
          } // packageOverrides)
      ) {};

    ueberauth_strava = ueberauth_strava_0_1_1;

    ueberauth_twitch_tv_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          oauth2_0_6_0,
          ueberauth_0_4_0
        }:
          buildMix ({
            name = "ueberauth_twitch_tv";
            version = "0.3.0";
            src = fetchHex {
              pkg = "ueberauth_twitch_tv";
              version = "0.3.0";
              sha256 =
                "1348caea55a231b221c702af84e84cae2c963e21141951afc71016e2f87c85d8";
            };
            beamDeps  = [ oauth2_0_6_0 ueberauth_0_4_0 ];

            meta = {
              description = ''An Ueberauth strategy for using Twitch.tv to
                            authenticate your users.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tim-machine/ueberauth_twitch_tv";
            };
          } // packageOverrides)
      ) {};

    ueberauth_twitch_tv = ueberauth_twitch_tv_0_3_0;

    ueberauth_twitter_0_2_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          oauther_1_1_0,
          poison_1_0_2,
          ueberauth_0_4_0
        }:
          buildMix ({
            name = "ueberauth_twitter";
            version = "0.2.4";
            src = fetchHex {
              pkg = "ueberauth_twitter";
              version = "0.2.4";
              sha256 =
                "8016a48d7dcf320c52891de76e5c671a5cee70e0e0ceec6474987e0738c8acf5";
            };
            beamDeps  = [
                          httpoison_0_11_2
                          oauther_1_1_0
                          poison_1_0_2
                          ueberauth_0_4_0
                        ];

            meta = {
              description = ''An Uberauth strategy for Twitter
                            authentication.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ueberauth/ueberauth_twitter";
            };
          } // packageOverrides)
      ) {};

    ueberauth_twitter = ueberauth_twitter_0_2_4;

    ueberauth_vk_0_2_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          oauth2_0_8_3,
          ueberauth_0_4_0
        }:
          buildMix ({
            name = "ueberauth_vk";
            version = "0.2.2";
            src = fetchHex {
              pkg = "ueberauth_vk";
              version = "0.2.2";
              sha256 =
                "83624e075dd9ab4136218ebd1c6d07826ffea612aeb7605d989fa17553418e99";
            };
            beamDeps  = [ oauth2_0_8_3 ueberauth_0_4_0 ];

            meta = {
              description = ''An Uberauth strategy for VK authentication.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sobolevn/ueberauth_vk";
            };
          } // packageOverrides)
      ) {};

    ueberauth_vk = ueberauth_vk_0_2_2;

    ueberauth_vkontakte_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          oauth2_0_9_1,
          ueberauth_0_4_0
        }:
          buildMix ({
            name = "ueberauth_vkontakte";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ueberauth_vkontakte";
              version = "0.1.0";
              sha256 =
                "14f493464a190f90f599362fc1583ff6938ab1329e283a173514b6a174eace60";
            };
            beamDeps  = [ oauth2_0_9_1 ueberauth_0_4_0 ];

            meta = {
              description = ''An Uberauth strategy for Vkontakte
                            authentication.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/meduza-corp/ueberauth_vkontakte";
            };
          } // packageOverrides)
      ) {};

    ueberauth_vkontakte = ueberauth_vkontakte_0_1_0;

    ueberauth_weibo_0_0_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          oauth2_0_9_1,
          ueberauth_0_4_0
        }:
          buildMix ({
            name = "ueberauth_weibo";
            version = "0.0.3";
            src = fetchHex {
              pkg = "ueberauth_weibo";
              version = "0.0.3";
              sha256 =
                "2f0f566a60a047fcfffbdeff23f5b16b4604e11b2ed1f3f69495be62609e8863";
            };
            beamDeps  = [ oauth2_0_9_1 ueberauth_0_4_0 ];

            meta = {
              description = ''An Ueberauth strategy for using Weibo to
                            authenticate your users.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/he9qi/ueberauth_weibo";
            };
          } // packageOverrides)
      ) {};

    ueberauth_weibo = ueberauth_weibo_0_0_3;

    ueberauth_withings_1_0_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          oauther_1_1_0,
          ueberauth_0_4_0
        }:
          buildMix ({
            name = "ueberauth_withings";
            version = "1.0.4";
            src = fetchHex {
              pkg = "ueberauth_withings";
              version = "1.0.4";
              sha256 =
                "ffd89494e7c9417a1796b102321c58c881ab22921b37dbdb203177b854ec4024";
            };
            beamDeps  = [ httpoison_0_11_2 oauther_1_1_0 ueberauth_0_4_0 ];

            meta = {
              description = ''An Ueberauth strategy for Withings OAuth2
                            authentication'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/tsubery/ueberauth_withings";
            };
          } // packageOverrides)
      ) {};

    ueberauth_withings = ueberauth_withings_1_0_4;

    ui_0_1_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "ui";
            version = "0.1.1";
            src = fetchHex {
              pkg = "ui";
              version = "0.1.1";
              sha256 =
                "492da59ca39055c0dfc794a2ebd564adb9ed635402c7b46659981f32aa9d94c1";
            };

            meta = {
              description = ''An OTP application'';

            };
          } // packageOverrides)
      ) {};

    ui = ui_0_1_1;

    ui_faces_0_1_7 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_3_0_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "ui_faces";
            version = "0.1.7";
            src = fetchHex {
              pkg = "ui_faces";
              version = "0.1.7";
              sha256 =
                "101d0c650a652b44e40d9308157c13e9b2165bde82d58c03c63d283c7c77dacf";
            };
            beamDeps  = [ httpotion_3_0_2 poison_3_1_0 ];

            meta = {
              description = ''UIFaces API client for Elixir applications.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/katgironpe/ui_faces";
            };
          } // packageOverrides)
      ) {};

    ui_faces = ui_faces_0_1_7;

    uk_postcode_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "uk_postcode";
            version = "0.3.0";
            src = fetchHex {
              pkg = "uk_postcode";
              version = "0.3.0";
              sha256 =
                "a03250f6896bef8851f243856d36952e7776a8d2fa654aa4d3336d841cbb59f8";
            };

            meta = {
              longDescription = ''UK postcode parsing and validation library.
                                Validate full postcodes or parts of a postcode,
                                and can extract parts of a full postcode. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/KushalP/uk_postcode";
            };
          } // packageOverrides)
      ) {};

    uk_postcode = uk_postcode_0_3_0;

    ulid_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ulid";
            version = "0.1.0";
            src = fetchHex {
              pkg = "ulid";
              version = "0.1.0";
              sha256 =
                "8c9b3537324216c0b8d9d367f2a7a86b5a125a059d85f84940c5cee91d0c525f";
            };

            meta = {
              description = ''Universally Unique Lexicographically Sortable
                            Identifier'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/merongivian/ulid";
            };
          } // packageOverrides)
      ) {};

    ulid = ulid_0_1_0;

    ulitos_0_3_0 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex }:
          buildErlangMk ({
            name = "ulitos";
            version = "0.3.0";
            src = fetchHex {
              pkg = "ulitos";
              version = "0.3.0";
              sha256 =
                "385f5fdc4cb2ea9f2ae3abcdec3f8dcbb120095f9d50acfd4ee58ecef18429d3";
            };

            meta = {
              description = ''Erlang common utils'';

              homepage = "https://github.com/palkan/ulitos";
            };
          } // packageOverrides)
      ) {};

    ulitos = ulitos_0_3_0;

    unicode_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, earmark_1_2_2 }:
          buildMix ({
            name = "unicode";
            version = "1.0.0";
            src = fetchHex {
              pkg = "unicode";
              version = "1.0.0";
              sha256 =
                "4d6bfd271aed2af61913574cf5292a0320b63664a491f5f3c4c92c7668baf823";
            };
            beamDeps  = [ earmark_1_2_2 ];

            meta = {
              description = ''Check properties of unicode codepoints, graphemes
                            and strings.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/Qqwy/elixir-unicode";
            };
          } // packageOverrides)
      ) {};

    unicode = unicode_1_0_0;

    unicode_char_0_6_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "unicode_char";
            version = "0.6.0";
            src = fetchHex {
              pkg = "unicode_char";
              version = "0.6.0";
              sha256 =
                "dec7c58ead30e6c487f1bbb91b0fdd24be6549f07198b28faaf5587afdca1ce8";
            };

            meta = {
              longDescription = ''In this library are implemented functions
                                (Char.lower?, Char.digit?, etc) to work with
                                Unicode characters, which are is missing in the
                                stdlib.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/Chicker/unicode_char";
            };
          } // packageOverrides)
      ) {};

    unicode_char = unicode_char_0_6_0;

    unicode_util_compat_0_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "unicode_util_compat";
            version = "0.1.0";
            src = fetchHex {
              pkg = "unicode_util_compat";
              version = "0.1.0";
              sha256 =
                "ff7a07ca2a4de1cdc340a1cf3b6e377f9ded9fbb064ac5f0886e0ca8749dc6e5";
            };

            meta = {
              description = ''unicode_util compatibility library for Erlang <
                            20'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/benoitc/unicode_util_compat";
            };
          } // packageOverrides)
      ) {};

    unicode_util_compat_0_2_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "unicode_util_compat";
            version = "0.2.0";
            src = fetchHex {
              pkg = "unicode_util_compat";
              version = "0.2.0";
              sha256 =
                "1582b67d11eab7c57228449a422a401d2295f53edc21ce69edfd16d10d59d2ba";
            };

            meta = {
              description = ''unicode_util compatibility library for Erlang <
                            20'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/benoitc/unicode_util_compat";
            };
          } // packageOverrides)
      ) {};

    unicode_util_compat = unicode_util_compat_0_2_0;

    unidecode_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, con_cache_0_12_0 }:
          buildMix ({
            name = "unidecode";
            version = "0.0.1";
            src = fetchHex {
              pkg = "unidecode";
              version = "0.0.1";
              sha256 =
                "0b930f0a46b152e6465a3836cc953142d355217bb1c945cc0fcadad8433ab0ee";
            };
            beamDeps  = [ con_cache_0_12_0 ];

            meta = {
              description = ''Transliterate from Unicode to ASCII. Based on
                            Text::Unidecode.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/fcevado/unidecode";
            };
          } // packageOverrides)
      ) {};

    unidecode = unidecode_0_0_1;

    unit_fun_0_5_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "unit_fun";
            version = "0.5.4";
            src = fetchHex {
              pkg = "unit_fun";
              version = "0.5.4";
              sha256 =
                "7e560af084bdcc495de0544b4d7820daef22a326b2269330a1e82e4b4f98358f";
            };

            meta = {
              description = ''Library for adding units/dimensions to numeric
                            types.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/meadsteve/unit_fun";
            };
          } // packageOverrides)
      ) {};

    unit_fun = unit_fun_0_5_4;

    units_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "units";
            version = "1.0.0";
            src = fetchHex {
              pkg = "units";
              version = "1.0.0";
              sha256 =
                "edac76cb036b993ef35781701fc561b4a6c95e4d7c89dba0d6f96ae3077b8ffe";
            };

            meta = {
              description = ''Common unit conversions for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/solatis/units";
            };
          } // packageOverrides)
      ) {};

    units = units_1_0_0;

    unittest_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "unittest";
            version = "0.1.0";
            src = fetchHex {
              pkg = "unittest";
              version = "0.1.0";
              sha256 =
                "deb7504d8b8778efb6a1e78c91865cc924badd14d36011760ce668d60072122b";
            };

            meta = {
              longDescription = ''Unittest is a unit testing library for Elixir
                                was originally inspired by Python standard
                                testing framework.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lk-geimfari/unittest";
            };
          } // packageOverrides)
      ) {};

    unittest = unittest_0_1_0;

    unsplash_1_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          oauth2_0_9_1,
          poison_3_1_0
        }:
          buildMix ({
            name = "unsplash";
            version = "1.0.0";
            src = fetchHex {
              pkg = "unsplash";
              version = "1.0.0";
              sha256 =
                "a0feaff10701998046d8831789ace475adbeb8a74e5c4ecc39d89fe115af21f7";
            };
            beamDeps  = [ httpoison_0_11_2 oauth2_0_9_1 poison_3_1_0 ];

            meta = {
              description = ''Unsplash API in Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/waynehoover/unsplash-elixir";
            };
          } // packageOverrides)
      ) {};

    unsplash = unsplash_1_0_0;

    untappd_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          exjsx_3_2_1,
          httpoison_0_8_3
        }:
          buildMix ({
            name = "untappd";
            version = "0.0.1";
            src = fetchHex {
              pkg = "untappd";
              version = "0.0.1";
              sha256 =
                "f4560612cd78002202234660cf248f004c91ade8c10dc87ad136eb5d8f49d66a";
            };
            beamDeps  = [ exjsx_3_2_1 httpoison_0_8_3 ];

            meta = {
              description = ''Elixir wrapper for the Untappd API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/nimi/untappd";
            };
          } // packageOverrides)
      ) {};

    untappd = untappd_0_0_1;

    until_then_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, calendar_0_14_2 }:
          buildMix ({
            name = "until_then";
            version = "0.0.1";
            src = fetchHex {
              pkg = "until_then";
              version = "0.0.1";
              sha256 =
                "9bc5c61346d18a770efc25e5f3cb55c9cb68fe2d7ff179964ac8b314d779c111";
            };
            beamDeps  = [ calendar_0_14_2 ];

            meta = {
              longDescription = ''This library tells you how many milliseconds
                                to the next occurrence of a scheduled event.
                                This is very convenient to combine with
                                `:timer.sleep/1` or `Process.send_after/3` as a
                                means of repeatedly invoking some code on a
                                schedule and not having those invocations
                                drift.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/NoRedInk/until_then";
            };
          } // packageOverrides)
      ) {};

    until_then = until_then_0_0_1;

    updown_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_3_0_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "updown";
            version = "0.1.1";
            src = fetchHex {
              pkg = "updown";
              version = "0.1.1";
              sha256 =
                "3eafa6c8770f62356edeaca93eb6b69707a5684a10d8d50173a488ae82c46008";
            };
            beamDeps  = [ httpotion_3_0_2 poison_2_2_0 ];

            meta = {
              longDescription = ''A library that interacts with the updown.io
                                API. The library supports a few basic fetch
                                functions that retrieves site checks and data
                                about each of them, it also has a few edit
                                functions that changes site checks to suit your
                                needs.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/milok7/updown-elixir";
            };
          } // packageOverrides)
      ) {};

    updown = updown_0_1_1;

    upyun_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "upyun";
            version = "0.0.1";
            src = fetchHex {
              pkg = "upyun";
              version = "0.0.1";
              sha256 =
                "a5276f371b667efb1da6e48828279963b23d6eb4b5a5225e6f3e19c77c4e4851";
            };

            meta = {
              description = ''UPYun sdk for Elixir. '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Hor/upyun-elixir";
            };
          } // packageOverrides)
      ) {};

    upyun = upyun_0_0_1;

    urania_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, pinky_0_2_0 }:
          buildMix ({
            name = "urania";
            version = "0.1.0";
            src = fetchHex {
              pkg = "urania";
              version = "0.1.0";
              sha256 =
                "a2698f3f1b1dc5061c2a4f93c338e69b6f9656eb26fca1158d65247aba2305b8";
            };
            beamDeps  = [ pinky_0_2_0 ];

            meta = {
              longDescription = ''Efficient and elegant data access inspired by
                                Haxl. Port of funcool`s Urania for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/codegram/urania.ex";
            };
          } // packageOverrides)
      ) {};

    urania = urania_0_1_0;

    uri_0_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "uri";
            version = "0.1.0";
            src = fetchHex {
              pkg = "uri";
              version = "0.1.0";
              sha256 =
                "3833c3b5745fc0822df86c3a3591219048026fea8a535223b440d26029218996";
            };

            meta = {
              description = ''URI Parsing/Encoding Library'';

            };
          } // packageOverrides)
      ) {};

    uri = uri_0_1_0;

    uri_query_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "uri_query";
            version = "0.1.2";
            src = fetchHex {
              pkg = "uri_query";
              version = "0.1.2";
              sha256 =
                "e3bc81816c98502c36498b9b2f239b89c71ce5eadfff7ceb2d6c0a2e6ae2ea0c";
            };

            meta = {
              description = ''URI encode nested GET parameters and array values
                            in Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/shhavel/uri_query";
            };
          } // packageOverrides)
      ) {};

    uri_query = uri_query_0_1_2;

    uri_template_1_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "uri_template";
            version = "1.2.0";
            src = fetchHex {
              pkg = "uri_template";
              version = "1.2.0";
              sha256 =
                "c1c97235b8571703926e77449cb272f8ae3a0710b6c91099ec6f66f44425a8c0";
            };

            meta = {
              description = ''RFC 6570 complient URI template processor'';
              license = stdenv.lib.licenses.free;
            };
          } // packageOverrides)
      ) {};

    uri_template = uri_template_1_2_0;

    urilib_0_3_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "urilib";
            version = "0.3.0";
            src = fetchHex {
              pkg = "urilib";
              version = "0.3.0";
              sha256 =
                "0d8b73ad1d7682fd307672cd26a3af11a17099ea23ad10346abd13382b1baa84";
            };

            meta = {
              description = ''A RFC-3986 URI Library for parsing and building
                            URIs'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/gmr/urilib";
            };
          } // packageOverrides)
      ) {};

    urilib = urilib_0_3_0;

    url_parser_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "url_parser";
            version = "0.1.0";
            src = fetchHex {
              pkg = "url_parser";
              version = "0.1.0";
              sha256 =
                "5079538a7e203ad431af2dafb2b785755e33b1fc1012b584a01716d81182026b";
            };

            meta = {
              description = ''A small service that parses urls agains a given
                            set of rules'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/wizardone/parser.git";
            };
          } // packageOverrides)
      ) {};

    url_parser = url_parser_0_1_0;

    url_tincture_1_0_10 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_3_1_0 }:
          buildMix ({
            name = "url_tincture";
            version = "1.0.10";
            src = fetchHex {
              pkg = "url_tincture";
              version = "1.0.10";
              sha256 =
                "99587fb88998bcdada9f9d7ecbeee8f167c73df1cfa2bebd88ca2cc812221095";
            };
            beamDeps  = [ poison_3_1_0 ];

            meta = {
              description = ''A package to reduce extended forms of URLs to a
                            canonical reference'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/suddenrushofsushi/url_tincture";
            };
          } // packageOverrides)
      ) {};

    url_tincture = url_tincture_1_0_10;

    url_unroller_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, httpoison_0_8_3 }:
          buildMix ({
            name = "url_unroller";
            version = "0.0.3";
            src = fetchHex {
              pkg = "url_unroller";
              version = "0.0.3";
              sha256 =
                "65a46b7335060111bdc5ad164548361f3c7ff5a39ff9493a9109dd20b98498b9";
            };
            beamDeps  = [ httpoison_0_8_3 ];

            meta = {
              description = ''A simple url unroller/unshortener'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/semanticart/url_unroller";
            };
          } // packageOverrides)
      ) {};

    url_unroller = url_unroller_0_0_3;

    urlixurl_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "urlixurl";
            version = "0.1.0";
            src = fetchHex {
              pkg = "urlixurl";
              version = "0.1.0";
              sha256 =
                "c3beb88393db7efaf3259d0c3d8afefe8ec9db82a760e9d4f72dad33f836ab18";
            };

            meta = {
              description = ''Splits a url into semantically useful
                            representations of itself.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/spartansystems/urlixurl";
            };
          } // packageOverrides)
      ) {};

    urlixurl = urlixurl_0_1_0;

    urlpreview_0_0_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          floki_0_17_2,
          fuzzyurl_0_9_0,
          httpotion_3_0_2
        }:
          buildMix ({
            name = "urlpreview";
            version = "0.0.3";
            src = fetchHex {
              pkg = "urlpreview";
              version = "0.0.3";
              sha256 =
                "a45f30ffab23940f32120a743ae906e8796d006a7ba625867072f1dd45c70623";
            };
            beamDeps  = [ floki_0_17_2 fuzzyurl_0_9_0 httpotion_3_0_2 ];

            meta = {
              longDescription = ''Fetches meta data from websites and returns
                                information useful for things such as URL
                                previews.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/cameeob2003/url-preview";
            };
          } // packageOverrides)
      ) {};

    urlpreview = urlpreview_0_0_3;

    urn_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "urn";
            version = "0.1.0";
            src = fetchHex {
              pkg = "urn";
              version = "0.1.0";
              sha256 =
                "6da4bfebbd215dd30703bbd1b3a40a4d468db6aea4985807e7b700999870c65d";
            };

            meta = {
              description = ''Uniform Resource Name (URN) parsing and
                            validation in Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/stevelacy/elixir-urn";
            };
          } // packageOverrides)
      ) {};

    urn = urn_0_1_0;

    urna_0_2_5 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cauldron_0_1_10,
          poison_3_1_0
        }:
          buildMix ({
            name = "urna";
            version = "0.2.5";
            src = fetchHex {
              pkg = "urna";
              version = "0.2.5";
              sha256 =
                "b25d2e3ed586caa570805def83bb0b4edd12ff18b8aabe8d411b48e913d49860";
            };
            beamDeps  = [ cauldron_0_1_10 poison_3_1_0 ];

            meta = {
              description = ''REST in peace'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/meh/urna";
            };
          } // packageOverrides)
      ) {};

    urna = urna_0_2_5;

    usefulness_0_0_7 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "usefulness";
            version = "0.0.7";
            src = fetchHex {
              pkg = "usefulness";
              version = "0.0.7";
              sha256 =
                "1297b8fc52f40c3707eae71c72a6f52d73496d29a6deb06e590f2dbe790b408b";
            };

            meta = {
              description = ''Useful things'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    usefulness = usefulness_0_0_7;

    user_agent_parser_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "user_agent_parser";
            version = "1.0.1";
            src = fetchHex {
              pkg = "user_agent_parser";
              version = "1.0.1";
              sha256 =
                "ba049dfe5d9c611a0ba3ac13c9ef0d17ea49e8bdfab68c54e7415423f32aa74f";
            };

            meta = {
              longDescription = ''A simple Elixir package for parsing user
                                agent strings with the help of BrowserScope`s UA
                                database'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/romul/uap-elixir";
            };
          } // packageOverrides)
      ) {};

    user_agent_parser = user_agent_parser_1_0_1;

    user_manager_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cipher_1_3_1,
          comeonin_3_0_2,
          ecto_2_1_4,
          exprof_0_2_0,
          facebook_0_9_0,
          faker_0_8_0,
          flow_0_12_0,
          gen_stage_0_12_0,
          guardian_0_14_4,
          guardian_db_0_8_0,
          httpoison_0_10_0,
          postgrex_1_0_0_rc_1
        }:
          buildMix ({
            name = "user_manager";
            version = "0.2.0";
            src = fetchHex {
              pkg = "user_manager";
              version = "0.2.0";
              sha256 =
                "28e22bf5743c06d6b366303f36caf59632f4289bb4db43ea2d214cae87d1bf07";
            };
            beamDeps  = [
                          cipher_1_3_1
                          comeonin_3_0_2
                          ecto_2_1_4
                          exprof_0_2_0
                          facebook_0_9_0
                          faker_0_8_0
                          flow_0_12_0
                          gen_stage_0_12_0
                          guardian_0_14_4
                          guardian_db_0_8_0
                          httpoison_0_10_0
                          postgrex_1_0_0_rc_1
                        ];

            meta = {
              description = ''A User Management system for Elixir Projects'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Alezrik/user_manager";
            };
          } // packageOverrides)
      ) {};

    user_manager = user_manager_0_2_0;

    usir_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          msgpax_0_8_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "usir";
            version = "0.2.0";
            src = fetchHex {
              pkg = "usir";
              version = "0.2.0";
              sha256 =
                "954682cf8ec5e79b4af088b170803fa8a3d6937c077af1a536cd33e8bb268467";
            };
            beamDeps  = [ msgpax_0_8_2 poison_2_2_0 ];

            meta = {
              description = ''Elixir implementation of the usir protocol'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/usir/usir_ex";
            };
          } // packageOverrides)
      ) {};

    usir = usir_0_2_0;

    utils_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "utils";
            version = "0.1.0";
            src = fetchHex {
              pkg = "utils";
              version = "0.1.0";
              sha256 =
                "86827a54a9bb50c11cd534f78f24a10e24dc2d6c5ee0c9076f17eafc31ce1385";
            };

            meta = {
              description = ''Handy utility functions for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/romul/utils";
            };
          } // packageOverrides)
      ) {};

    utils = utils_0_1_0;

    uuid_0_1_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "uuid";
            version = "0.1.5";
            src = fetchHex {
              pkg = "uuid";
              version = "0.1.5";
              sha256 =
                "5cfb91972f5cacb0bcb2f00414d5747dd575d84b864c96f668ab3b729cc08422";
            };

            meta = {
              description = ''UUID generator and utilities for Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/zyro/elixir-uuid";
            };
          } // packageOverrides)
      ) {};

    uuid_1_1_7 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "uuid";
            version = "1.1.7";
            src = fetchHex {
              pkg = "uuid";
              version = "1.1.7";
              sha256 =
                "5c4eba9164d3567732280e6bc4edb115a82d5809c33f862098938b608a82caff";
            };

            meta = {
              description = ''UUID generator and utilities for Elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/zyro/elixir-uuid";
            };
          } // packageOverrides)
      ) {};

    uuid = uuid_1_1_7;

    uuid5_1_1_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, ecto_2_1_4, uuid_1_1_7
        }:
          buildMix ({
            name = "uuid5";
            version = "1.1.0";
            src = fetchHex {
              pkg = "uuid5";
              version = "1.1.0";
              sha256 =
                "029ef9474f273cf85aad6f84aafa5022e1da010c59943eaff2d6243f0aef8972";
            };
            beamDeps  = [ ecto_2_1_4 uuid_1_1_7 ];

            meta = {
              description = ''UUID v5 type for Ecto.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/anoskov/uuid5_ecto_type";
            };
          } // packageOverrides)
      ) {};

    uuid5 = uuid5_1_1_0;

    uuid_erl_1_5_1 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, quickrand_1_5_4
        }:
          buildRebar3 ({
            name = "uuid_erl";
            version = "1.5.1";
            src = fetchHex {
              pkg = "uuid_erl";
              version = "1.5.1";
              sha256 =
                "fd2a8d90693631455073d4ae2b34fdb9d58da30c0ee0e63149fbf320c71b74fa";
            };

            beamDeps  = [ quickrand_1_5_4 ];

            meta = {
              description = ''Erlang UUID Implementation'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/okeuday/uuid";
            };
          } // packageOverrides)
      ) {};

    uuid_erl_1_5_2 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, quickrand_1_5_4
        }:
          buildRebar3 ({
            name = "uuid_erl";
            version = "1.5.2";
            src = fetchHex {
              pkg = "uuid_erl";
              version = "1.5.2";
              sha256 =
                "ba3bd0bc4c159ddc05a1b4b380a8c5bf664981e5df6214a0e33b71eb9dd5708b";
            };

            beamDeps  = [ quickrand_1_5_4 ];

            meta = {
              description = ''Erlang UUID Implementation'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/okeuday/uuid";
            };
          } // packageOverrides)
      ) {};

    uuid_erl_1_5_2_rc1 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, quickrand_1_5_4
        }:
          buildRebar3 ({
            name = "uuid_erl";
            version = "1.5.2-rc1";
            src = fetchHex {
              pkg = "uuid_erl";
              version = "1.5.2-rc1";
              sha256 =
                "4297348d9d52a38e2446185f979cb8786fe8784ac053abe6724c2af7d7930e38";
            };

            beamDeps  = [ quickrand_1_5_4 ];

            meta = {
              description = ''Erlang UUID Implementation'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/okeuday/uuid";
            };
          } // packageOverrides)
      ) {};

    uuid_erl_1_5_4 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, quickrand_1_5_4
        }:
          buildRebar3 ({
            name = "uuid_erl";
            version = "1.5.4";
            src = fetchHex {
              pkg = "uuid_erl";
              version = "1.5.4";
              sha256 =
                "3dfbd0bdde98a9bfb2ff8680a0de919bcb7bd0df4ec6dea603a96762a067c7ca";
            };

            beamDeps  = [ quickrand_1_5_4 ];

            meta = {
              description = ''Erlang UUID Implementation'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/okeuday/uuid";
            };
          } // packageOverrides)
      ) {};

    uuid_erl_1_6_0 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, quickrand_1_6_0
        }:
          buildRebar3 ({
            name = "uuid_erl";
            version = "1.6.0";
            src = fetchHex {
              pkg = "uuid_erl";
              version = "1.6.0";
              sha256 =
                "f3d75d9c7df9c7807600869ab03af8115afc5e8bf002a9f77bbe88aae8b8080f";
            };

            beamDeps  = [ quickrand_1_6_0 ];

            meta = {
              description = ''Erlang UUID Implementation'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/okeuday/uuid";
            };
          } // packageOverrides)
      ) {};

    uuid_erl_1_7_1 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, quickrand_1_7_1
        }:
          buildRebar3 ({
            name = "uuid_erl";
            version = "1.7.1";
            src = fetchHex {
              pkg = "uuid_erl";
              version = "1.7.1";
              sha256 =
                "fd965c66d45833a3483678d0cf94ce77668253cab05f5e892b8f7cc7203333a6";
            };

            beamDeps  = [ quickrand_1_7_1 ];

            meta = {
              description = ''Erlang UUID Implementation'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/okeuday/uuid";
            };
          } // packageOverrides)
      ) {};

    uuid_erl = uuid_erl_1_7_1;

    uule_grabber_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "uule_grabber";
            version = "0.1.0";
            src = fetchHex {
              pkg = "uule_grabber";
              version = "0.1.0";
              sha256 =
                "4f31416aefa25bd2817b6c04b3fc6c8a1ec21ccc297cc0739a187d6310eebf1c";
            };

            meta = {
              description = ''Generates uule codes for google to allow
                            localized searches.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dkarter/uule_grabber";
            };
          } // packageOverrides)
      ) {};

    uule_grabber = uule_grabber_0_1_0;

    vagrant_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "vagrant";
            version = "0.0.1";
            src = fetchHex {
              pkg = "vagrant";
              version = "0.0.1";
              sha256 =
                "805a78a9ee586546d0716ddc9afc3417630c48faab4606cf54c863b10a05ce52";
            };

            meta = {
              description = ''Vagrant CLI Wrapper'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/mobileoverlord/vagrant";
            };
          } // packageOverrides)
      ) {};

    vagrant = vagrant_0_0_1;

    valid_field_0_4_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ecto_1_1_9 }:
          buildMix ({
            name = "valid_field";
            version = "0.4.0";
            src = fetchHex {
              pkg = "valid_field";
              version = "0.4.0";
              sha256 =
                "a0000e65475ac24f35ddc27179a8f940cee7e1442495a1e830f0b9daa76cbacf";
            };
            beamDeps  = [ ecto_1_1_9 ];

            meta = {
              description = ''ValidField aids unit testing a changeset for
                            valid (and invalid) fields'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/DockYard/valid_field";
            };
          } // packageOverrides)
      ) {};

    valid_field = valid_field_0_4_0;

    valid_url_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "valid_url";
            version = "0.1.1";
            src = fetchHex {
              pkg = "valid_url";
              version = "0.1.1";
              sha256 =
                "c1957216ff42397918ff359c11b5d36792c158cd08ec67387c9619aaa5c4031b";
            };

            meta = {
              description = ''Validate URL'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/spence/valid_url";
            };
          } // packageOverrides)
      ) {};

    valid_url = valid_url_0_1_1;

    validator_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ecto_2_1_4 }:
          buildMix ({
            name = "validator";
            version = "0.3.0";
            src = fetchHex {
              pkg = "validator";
              version = "0.3.0";
              sha256 =
                "dfd78c2a8f6951b463d0308bbed0c1872680db4f9bd02f2bfe0f57ccc4cb25da";
            };
            beamDeps  = [ ecto_2_1_4 ];

            meta = {
              longDescription = ''A set of changeset validators to confirm that
                                a changeset value is the proper format. Heavily
                                inspired by
                                https://github.com/chriso/validator.js'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/fourkio/validator";
            };
          } // packageOverrides)
      ) {};

    validator = validator_0_3_0;

    validerl_2_0_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "validerl";
            version = "2.0.1";
            src = fetchHex {
              pkg = "validerl";
              version = "2.0.1";
              sha256 =
                "5e1892d7e9dd3df9177be4f4976347962f2a6388a2d86920157af9baca78b6ff";
            };

            meta = {
              description = ''Erlang input validation and normalization
                            utilities'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/inaka/validerl";
            };
          } // packageOverrides)
      ) {};

    validerl = validerl_2_0_1;

    validex_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "validex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "validex";
              version = "0.1.0";
              sha256 =
                "045b56372c8c2b1b724a788824b5b944fad15efac1f342c666a52d5e7fa8b607";
            };

            meta = {
              description = ''Use ValidEx for all your elixir data validation
                            needs'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lixhq/validex";
            };
          } // packageOverrides)
      ) {};

    validex = validex_0_1_0;

    valvex_0_3_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ex_rated_1_3_1,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "valvex";
            version = "0.3.1";
            src = fetchHex {
              pkg = "valvex";
              version = "0.3.1";
              sha256 =
                "4f2a8a5d4cca3702b3a93a7decc4d51eb56b744af0a01d77c1aed70705f8c9ba";
            };
            beamDeps  = [ ex_rated_1_3_1 httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''Simple wrapper around Steam`s ReST API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/aguxez/Valvex";
            };
          } // packageOverrides)
      ) {};

    valvex = valvex_0_3_1;

    varint_1_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "varint";
            version = "1.1.0";
            src = fetchHex {
              pkg = "varint";
              version = "1.1.0";
              sha256 =
                "f86f9f49c4a765c69dee2cb67a4e02d8f451dbe0de9c51535efb0956e1fb64b9";
            };

            meta = {
              description = ''A library to compress integers using LEB128.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ahamez/varint";
            };
          } // packageOverrides)
      ) {};

    varint = varint_1_1_0;

    varpool_1_5_4 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, reltool_util_1_5_4
        }:
          buildRebar3 ({
            name = "varpool";
            version = "1.5.4";
            src = fetchHex {
              pkg = "varpool";
              version = "1.5.4";
              sha256 =
                "b16fe0b24a4c4d0ef7538961b974b0207c525a094b2908fcf2b2d4ee16ae707c";
            };

            beamDeps  = [ reltool_util_1_5_4 ];

            meta = {
              description = ''Erlang Process Pools as a Local Variable'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/okeuday/varpool";
            };
          } // packageOverrides)
      ) {};

    varpool_1_6_0 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, reltool_util_1_6_0
        }:
          buildRebar3 ({
            name = "varpool";
            version = "1.6.0";
            src = fetchHex {
              pkg = "varpool";
              version = "1.6.0";
              sha256 =
                "45955a52f549e78e14e1d7968795c2be4f1c55d92311a5abae0f7aba0212a87c";
            };

            beamDeps  = [ reltool_util_1_6_0 ];

            meta = {
              description = ''Erlang Process Pools as a Local Variable'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/okeuday/varpool";
            };
          } // packageOverrides)
      ) {};

    varpool_1_7_1 = callPackage
      (
        {
          buildRebar3, packageOverrides ? {}, fetchHex, reltool_util_1_7_1
        }:
          buildRebar3 ({
            name = "varpool";
            version = "1.7.1";
            src = fetchHex {
              pkg = "varpool";
              version = "1.7.1";
              sha256 =
                "01567bff23d63acd45596f343a9211c84f3da1352c92b33e8c2ef950c0b9b330";
            };

            beamDeps  = [ reltool_util_1_7_1 ];

            meta = {
              description = ''Erlang Process Pools as a Local Variable'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/okeuday/varpool";
            };
          } // packageOverrides)
      ) {};

    varpool = varpool_1_7_1;

    vaultex_0_3_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "vaultex";
            version = "0.3.0";
            src = fetchHex {
              pkg = "vaultex";
              version = "0.3.0";
              sha256 =
                "216e159bc472649bc0cd0cae42a000759bc97a45ff29a1b280b3c8af652d2875";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              longDescription = ''A very simple read only client that
                                authenticates and reads secrets from HashiCorp`s
                                Vault.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/findmypast/vaultex";
            };
          } // packageOverrides)
      ) {};

    vaultex = vaultex_0_3_0;

    vector_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "vector";
            version = "0.1.0";
            src = fetchHex {
              pkg = "vector";
              version = "0.1.0";
              sha256 =
                "2399175b7daa136a15ddbaeeb007de0b903fd21979aec1afa2ead92d37033870";
            };

            meta = {
              longDescription = ''Library of common vector functions for use in
                                geometric or graphical calculations.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pkinney/vector_ex";
            };
          } // packageOverrides)
      ) {};

    vector_0_2_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "vector";
            version = "0.2.2";
            src = fetchHex {
              pkg = "vector";
              version = "0.2.2";
              sha256 =
                "636af15f15bd9a5393979b4cba4fc09b7d13fb440fc594d9a447192acc7e85f9";
            };

            meta = {
              longDescription = ''Library of common vector functions for use in
                                geometric or graphical calculations.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pkinney/vector_ex";
            };
          } // packageOverrides)
      ) {};

    vector_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "vector";
            version = "0.3.0";
            src = fetchHex {
              pkg = "vector";
              version = "0.3.0";
              sha256 =
                "e1f7645d090d58c9efc63046be1ade8b7a431c6428460c3290d6eb6da85cba45";
            };

            meta = {
              longDescription = ''Library of common vector functions for use in
                                geometric or graphical calculations.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pkinney/vector_ex";
            };
          } // packageOverrides)
      ) {};

    vector = vector_0_3_0;

    vector_clock_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "vector_clock";
            version = "0.1.0";
            src = fetchHex {
              pkg = "vector_clock";
              version = "0.1.0";
              sha256 =
                "7084c7caf6ab0a31cfe365351fa282033beedf0b8a591bd16b43fe408d5c3525";
            };

            meta = {
              description = ''Vector clocks for distributed systems.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sschneider1207/vector_clock";
            };
          } // packageOverrides)
      ) {};

    vector_clock = vector_clock_0_1_0;

    vegrandis_3_1_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "vegrandis";
            version = "3.1.1";
            src = fetchHex {
              pkg = "vegrandis";
              version = "3.1.1";
              sha256 =
                "724e3be95e24ea4232be9414398e05215f0b9811161f30bb44b5181b35501b03";
            };

            meta = {
              description = ''Atomic shared variables'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/g-andrade/vegrandis";
            };
          } // packageOverrides)
      ) {};

    vegrandis = vegrandis_3_1_1;

    velixir_0_0_7 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          elixir_make_0_2_0,
          msgpax_0_8_2
        }:
          buildMix ({
            name = "velixir";
            version = "0.0.7";
            src = fetchHex {
              pkg = "velixir";
              version = "0.0.7";
              sha256 =
                "84bc023aede9a66cbb628744da3ce7c8d01a43c4501dc2d3d5f5f4da996dba1c";
            };
            beamDeps  = [ elixir_make_0_2_0 msgpax_0_8_2 ];

            meta = {
              longDescription = ''VElixir is a simple to use primitive 3D
                                graphics library. It offers great performance,
                                and ease of use. VElixir was inspired by
                                VPython, which makes basic 3D graphics in python
                                trivial. Now it`s just as easy to make 3D
                                graphical visualizations in Elixir.'';
              license = stdenv.lib.licenses.asl20;
            };
          } // packageOverrides)
      ) {};

    velixir = velixir_0_0_7;

    velkoz_1_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ex_rated_1_2_2,
          httpoison_0_8_3,
          poison_1_5_2
        }:
          buildMix ({
            name = "velkoz";
            version = "1.2.0";
            src = fetchHex {
              pkg = "velkoz";
              version = "1.2.0";
              sha256 =
                "e5cfc2bdf06a64bb1ca27bc0c157d00efc4ead03d0c303178184a8a5c19af42d";
            };
            beamDeps  = [ ex_rated_1_2_2 httpoison_0_8_3 poison_1_5_2 ];

            meta = {
              longDescription = ''Velkoz is an api wrapper for the game leauge
                                of legends. You can find the api documentation
                                :: https://developer.riotgames.com/api'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/tesseract-tech/velkoz";
            };
          } // packageOverrides)
      ) {};

    velkoz = velkoz_1_2_0;

    velocy_pack_0_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "velocy_pack";
            version = "0.0.4";
            src = fetchHex {
              pkg = "velocy_pack";
              version = "0.0.4";
              sha256 =
                "d94ede9643ce8e977b68ffb90b8cd79a67408e4ebf62c34a197e35e6e3cb638c";
            };

            meta = {
              description = ''An Elixir implementation for VelocyPack.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/austinsmorris/velocy_pack";
            };
          } // packageOverrides)
      ) {};

    velocy_pack = velocy_pack_0_0_4;

    velocy_stream_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "velocy_stream";
            version = "0.0.1";
            src = fetchHex {
              pkg = "velocy_stream";
              version = "0.0.1";
              sha256 =
                "d326dab52613110a2dd7e47994f8a5a78d4b28bed850db274be99834d8795aa0";
            };

            meta = {
              description = ''An Elixir implementation for VelocyStream.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/austinsmorris/velocy_stream";
            };
          } // packageOverrides)
      ) {};

    velocy_stream = velocy_stream_0_0_1;

    vent_0_4_1 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          amqp_client_3_6_8,
          backoff_1_1_3,
          folsom_0_8_3,
          jsone_1_4_3,
          lager_3_2_4,
          poolboy_1_5_1
        }:
          buildRebar3 ({
            name = "vent";
            version = "0.4.1";
            src = fetchHex {
              pkg = "vent";
              version = "0.4.1";
              sha256 =
                "1c9d8a5baa9e5b5ee6b252ac00b5c4b6461350a3597930b0c3736930fe994e5b";
            };

            beamDeps  = [
                          amqp_client_3_6_8
                          backoff_1_1_3
                          folsom_0_8_3
                          jsone_1_4_3
                          lager_3_2_4
                          poolboy_1_5_1
                        ];

            meta = {
              description = ''PubSub event bus over AMQP for Erlang'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dataloop/erl-vent";
            };
          } // packageOverrides)
      ) {};

    vent = vent_0_4_1;

    verbnet_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, erlsom_1_4_1 }:
          buildMix ({
            name = "verbnet";
            version = "0.3.0";
            src = fetchHex {
              pkg = "verbnet";
              version = "0.3.0";
              sha256 =
                "54f22fc53317502fee16895822b95d65dacb85aa50032243096b3643aeef4537";
            };
            beamDeps  = [ erlsom_1_4_1 ];

            meta = {
              longDescription = ''This module provides a lookup interface into
                                the VerbNet semantic mapping dataset for natural
                                language processing (NLP) solutions.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/arpieb/verbnet";
            };
          } // packageOverrides)
      ) {};

    verbnet = verbnet_0_3_0;

    verex_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ecto_2_1_4 }:
          buildMix ({
            name = "verex";
            version = "0.1.1";
            src = fetchHex {
              pkg = "verex";
              version = "0.1.1";
              sha256 =
                "e9756a7d2c488abf7fe8d9966b791ec575ce19153126bbad0e0e9a5e55b621a8";
            };
            beamDeps  = [ ecto_2_1_4 ];

            meta = {
              description = ''This is a simple versioning library for Phoenix.
                            Keeps a modules entire history.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/EdevMosaic/verex";
            };
          } // packageOverrides)
      ) {};

    verex = verex_0_1_1;

    verhoeff_0_1_2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "verhoeff";
            version = "0.1.2";
            src = fetchHex {
              pkg = "verhoeff";
              version = "0.1.2";
              sha256 =
                "1110f266fb3e2b69c7ba29cdae13e583f32af99e6a24843cefa04690c529e8f9";
            };

            meta = {
              description = ''The Verhoeff algorithm implementation'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mururu/verhoeff";
            };
          } // packageOverrides)
      ) {};

    verhoeff = verhoeff_0_1_2;

    verify_origin_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, plug_1_3_5 }:
          buildMix ({
            name = "verify_origin";
            version = "0.1.0";
            src = fetchHex {
              pkg = "verify_origin";
              version = "0.1.0";
              sha256 =
                "90834033676cb0ca632f208f489f6eb92ae94323fe7243efba577e1deb031167";
            };
            beamDeps  = [ plug_1_3_5 ];

            meta = {
              description = ''A library for using Origin header checking to
                            prevent CSRF'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/danmcclain/verify_origin";
            };
          } // packageOverrides)
      ) {};

    verify_origin = verify_origin_0_1_0;

    veritaserum_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_3_1_0 }:
          buildMix ({
            name = "veritaserum";
            version = "0.1.2";
            src = fetchHex {
              pkg = "veritaserum";
              version = "0.1.2";
              sha256 =
                "e58c710fd45a2188d5f045c5855290a3a616b4a3486353eac932bd9fd6cff6d5";
            };
            beamDeps  = [ poison_3_1_0 ];

            meta = {
              description = ''Sentiment analysis based on afinn-165, emojis and
                            some enhancements.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/uesteibar/veritaserum";
            };
          } // packageOverrides)
      ) {};

    veritaserum = veritaserum_0_1_2;

    verk_0_14_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          confex_1_5_0,
          gen_stage_0_11_0,
          poison_2_2_0,
          poolboy_1_5_1,
          redix_0_6_1
        }:
          buildMix ({
            name = "verk";
            version = "0.14.0";
            src = fetchHex {
              pkg = "verk";
              version = "0.14.0";
              sha256 =
                "7dc5c7f6e82c87c0e515bb86e11e5e22b3b0414a8394c976feec5ca9e4979cec";
            };
            beamDeps  = [
                          confex_1_5_0
                          gen_stage_0_11_0
                          poison_2_2_0
                          poolboy_1_5_1
                          redix_0_6_1
                        ];

            meta = {
              description = ''Verk is a job processing system backed by
                            Redis.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/edgurgel/verk";
            };
          } // packageOverrides)
      ) {};

    verk = verk_0_14_0;

    verk_web_0_14_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          basic_auth_2_1_3,
          cowboy_1_1_2,
          gettext_0_13_1,
          phoenix_1_3_0_rc_2,
          phoenix_html_2_9_3,
          phoenix_pubsub_1_0_1,
          timex_3_1_15,
          verk_0_14_0
        }:
          buildMix ({
            name = "verk_web";
            version = "0.14.0";
            src = fetchHex {
              pkg = "verk_web";
              version = "0.14.0";
              sha256 =
                "c00a72c995e8ffb9b8a232d7755c1fefcc372df15e60d32de919a213622f90d0";
            };
            beamDeps  = [
                          basic_auth_2_1_3
                          cowboy_1_1_2
                          gettext_0_13_1
                          phoenix_1_3_0_rc_2
                          phoenix_html_2_9_3
                          phoenix_pubsub_1_0_1
                          timex_3_1_15
                          verk_0_14_0
                        ];

            meta = {
              description = ''A Verk dashboard'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/edgurgel/verk_web";
            };
          } // packageOverrides)
      ) {};

    verk_web = verk_web_0_14_0;

    version_check_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "version_check";
            version = "0.1.2";
            src = fetchHex {
              pkg = "version_check";
              version = "0.1.2";
              sha256 =
                "dc293d0699bd9a0b2cd92041562e093df2aba0a5a139224d0065cf356e1de065";
            };

            meta = {
              description = ''Alerts about new versions of Elixir applications
                            according to Hex.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gmtprime/version_check";
            };
          } // packageOverrides)
      ) {};

    version_check = version_check_0_1_2;

    versionary_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, plug_1_3_5 }:
          buildMix ({
            name = "versionary";
            version = "0.2.0";
            src = fetchHex {
              pkg = "versionary";
              version = "0.2.0";
              sha256 =
                "cf59609007a8c75757394d125d43a3822a25ce71d93a0acc7d2346f31574ae49";
            };
            beamDeps  = [ plug_1_3_5 ];

            meta = {
              description = ''Elixir plug for handling API versioning'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sticksnleaves/versionary";
            };
          } // packageOverrides)
      ) {};

    versionary = versionary_0_2_0;

    vessel_0_8_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, exscript_0_1_0 }:
          buildMix ({
            name = "vessel";
            version = "0.8.0";
            src = fetchHex {
              pkg = "vessel";
              version = "0.8.0";
              sha256 =
                "b0c2961878ccf94e4e59065137fe727fdb0ff0f2071882050fc7aa9ec748dba5";
            };
            beamDeps  = [ exscript_0_1_0 ];

            meta = {
              description = ''Elixir MapReduce interfaces with Hadoop Streaming
                            integration'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zackehh/vessel";
            };
          } // packageOverrides)
      ) {};

    vessel = vessel_0_8_0;

    vex_0_5_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "vex";
            version = "0.5.5";
            src = fetchHex {
              pkg = "vex";
              version = "0.5.5";
              sha256 =
                "fade5440a742304214d1cb53d5ce6bd39dafb6e2ae87e5ce36041a7aa4c365f9";
            };

            meta = {
              description = ''An extensible data validation library for
                            Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/CargoSense/vex";
            };
          } // packageOverrides)
      ) {};

    vex_0_6_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "vex";
            version = "0.6.0";
            src = fetchHex {
              pkg = "vex";
              version = "0.6.0";
              sha256 =
                "7e4d9b50dd72cf931b52aba3470513686007f2ad54832de37cdb659cc85ba73e";
            };

            meta = {
              description = ''An extensible data validation library for
                            Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/CargoSense/vex";
            };
          } // packageOverrides)
      ) {};

    vex = vex_0_6_0;

    viacepex_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "viacepex";
            version = "0.0.2";
            src = fetchHex {
              pkg = "viacepex";
              version = "0.0.2";
              sha256 =
                "2d79dcb50252ba6bd3d4239760dca0854f50ed7ad2efd120e7b3cf33ce80528f";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''A library to access ViaCEP api'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/migore/viacepex";
            };
          } // packageOverrides)
      ) {};

    viacepex = viacepex_0_0_2;

    viex_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          floki_0_17_2,
          httpoison_0_11_2
        }:
          buildMix ({
            name = "viex";
            version = "0.1.0";
            src = fetchHex {
              pkg = "viex";
              version = "0.1.0";
              sha256 =
                "579292d1e51d9b84628ef279ffced308f340991befd48b70c26a5ea5d61f2c1a";
            };
            beamDeps  = [ floki_0_17_2 httpoison_0_11_2 ];

            meta = {
              description = ''Elixir package to validate European VAT numbers
                            with the VIES service.'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/marceldegraaf/viex";
            };
          } // packageOverrides)
      ) {};

    viex = viex_0_1_0;

    viktor_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_9_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "viktor";
            version = "0.2.0";
            src = fetchHex {
              pkg = "viktor";
              version = "0.2.0";
              sha256 =
                "dd845d35e5d9ae51f3a96c1261666b0dcd84282f83268bdd0f91b10aaeb86851";
            };
            beamDeps  = [ httpoison_0_9_2 poison_2_2_0 ];

            meta = {
              description = ''Client API wrapper for League of Legends API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/josephyi/viktor";
            };
          } // packageOverrides)
      ) {};

    viktor = viktor_0_2_0;

    vimeo_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_7_5,
          poison_1_5_2
        }:
          buildMix ({
            name = "vimeo";
            version = "0.0.2";
            src = fetchHex {
              pkg = "vimeo";
              version = "0.0.2";
              sha256 =
                "62adf724e67b6fefa2ecc2fcc770e320f4133676cf67cd68a39e5ca45ddd3377";
            };
            beamDeps  = [ httpoison_0_7_5 poison_1_5_2 ];

            meta = {
              description = ''Vimeo API v3 client library for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lilfaf/vimeo.ex";
            };
          } // packageOverrides)
      ) {};

    vimeo = vimeo_0_0_2;

    vips_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "vips";
            version = "0.1.0";
            src = fetchHex {
              pkg = "vips";
              version = "0.1.0";
              sha256 =
                "6d5e4ca08b1769a71d87bbbd67108671ce5335e4c3194aac53cf001bcd6be72d";
            };

            meta = {
              description = ''VIPS command line wrapper.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/schultzer/vips";
            };
          } // packageOverrides)
      ) {};

    vips = vips_0_1_0;

    virus_total_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_9_2,
          jsx_2_8_2
        }:
          buildMix ({
            name = "virus_total";
            version = "0.0.2";
            src = fetchHex {
              pkg = "virus_total";
              version = "0.0.2";
              sha256 =
                "ee40eff9ae8a3016ca47abea1725a203514a56e2cfbbe5629ac0e7bb917eaeab";
            };
            beamDeps  = [ httpoison_0_9_2 jsx_2_8_2 ];

            meta = {
              description = ''Elixir OTP application for the VirusTotal Public
                            API v2.0'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dtykocki/virus_total";
            };
          } // packageOverrides)
      ) {};

    virus_total = virus_total_0_0_2;

    vivid_0_4_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "vivid";
            version = "0.4.1";
            src = fetchHex {
              pkg = "vivid";
              version = "0.4.1";
              sha256 =
                "3808790eaaefd1a976500d772ac6fb0e134c9ba5144cfa23562cd9ec9bf54d06";
            };

            meta = {
              description = ''Simple 2D rendering graphics rendering
                            library.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jamesotron/vivid.ex";
            };
          } // packageOverrides)
      ) {};

    vivid = vivid_0_4_1;

    vivid_png_0_1_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, png_0_1_1, vivid_0_4_1
        }:
          buildMix ({
            name = "vivid_png";
            version = "0.1.0";
            src = fetchHex {
              pkg = "vivid_png";
              version = "0.1.0";
              sha256 =
                "f8075600f08239b5e9097054dc75c42cc3fc18fee7c2079a9d8f6aaaa7f525ad";
            };
            beamDeps  = [ png_0_1_1 vivid_0_4_1 ];

            meta = {
              description = ''Generate PNG files with Vivid.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jamesotron/vivid_png.ex";
            };
          } // packageOverrides)
      ) {};

    vivid_png = vivid_png_0_1_0;

    vkreq_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, plug_1_3_5 }:
          buildMix ({
            name = "vkreq";
            version = "0.0.1";
            src = fetchHex {
              pkg = "vkreq";
              version = "0.0.1";
              sha256 =
                "cbbefd68476a93218669246ba50a874113a2476fed20054059faee1d08983600";
            };
            beamDeps  = [ plug_1_3_5 ];

            meta = {
              description = ''VKontakte request validation plug'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/chvanikoff/vkreq";
            };
          } // packageOverrides)
      ) {};

    vkreq = vkreq_0_0_1;

    vmq_commons_1_0_0 = callPackage
      (
        {  buildErlangMk, packageOverrides ? {}, fetchHex }:
          buildErlangMk ({
            name = "vmq_commons";
            version = "1.0.0";
            src = fetchHex {
              pkg = "vmq_commons";
              version = "1.0.0";
              sha256 =
                "912283983a5301aa26cf5453af608b236970baa6e409ee88ab639a3fe01f0231";
            };

            meta = {
              description = ''Common Functionality for the VerneMQ MQTT
                            broker'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/erlio/vmq_commons";
            };
          } // packageOverrides)
      ) {};

    vmq_commons = vmq_commons_1_0_0;

    vmstats_2_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "vmstats";
            version = "2.1.0";
            src = fetchHex {
              pkg = "vmstats";
              version = "2.1.0";
              sha256 =
                "2b9d0d1abf219b9aec45b8202a3a7486a7844ec4f8df7e75236efe22ff10497f";
            };

            meta = {
              description = ''Tiny application to gather VM statistics'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/ferd/vmstats";
            };
          } // packageOverrides)
      ) {};

    vmstats = vmstats_2_1_0;

    volt_gen_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "volt_gen";
            version = "0.1.0";
            src = fetchHex {
              pkg = "volt_gen";
              version = "0.1.0";
              sha256 =
                "81ee1ee953c26003cae7dd95b5be68cb47de3a3cf8888115b270040792238972";
            };

            meta = {
              description = ''Generator for auth/auth & volt'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/sunkay/volt_gen";
            };
          } // packageOverrides)
      ) {};

    volt_gen = volt_gen_0_1_0;

    volter_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          gettext_0_13_1,
          phoenix_1_3_0_rc_2,
          phoenix_ecto_3_2_3,
          phoenix_html_2_9_3,
          phoenix_pubsub_1_0_1,
          postgrex_1_0_0_rc_1
        }:
          buildMix ({
            name = "volter";
            version = "0.0.2";
            src = fetchHex {
              pkg = "volter";
              version = "0.0.2";
              sha256 =
                "3bdf50de4edde23af0df771747bfe44d9d4b84dbdc0eb4730f8e4bc3ac4de02e";
            };
            beamDeps  = [
                          cowboy_1_1_2
                          gettext_0_13_1
                          phoenix_1_3_0_rc_2
                          phoenix_ecto_3_2_3
                          phoenix_html_2_9_3
                          phoenix_pubsub_1_0_1
                          postgrex_1_0_0_rc_1
                        ];

            meta = {
              description = ''auth/auth package volter'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/sunkay/volt_gen";
            };
          } // packageOverrides)
      ) {};

    volter = volter_0_0_2;

    voodoo_mfg_1_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_9_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "voodoo_mfg";
            version = "1.0.0";
            src = fetchHex {
              pkg = "voodoo_mfg";
              version = "1.0.0";
              sha256 =
                "b2d5b551921e2549a64615202a7b53bfe836a0b16d4a3c3966621cb641063a38";
            };
            beamDeps  = [ httpoison_0_9_2 poison_2_2_0 ];

            meta = {
              description = ''An HTTP client for Voodoo Manufacturing'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Sightline-Maps/voodoo-mfg";
            };
          } // packageOverrides)
      ) {};

    voodoo_mfg = voodoo_mfg_1_0_0;

    voorhees_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ex_doc_0_16_1,
          poison_3_1_0
        }:
          buildMix ({
            name = "voorhees";
            version = "0.1.1";
            src = fetchHex {
              pkg = "voorhees";
              version = "0.1.1";
              sha256 =
                "0cacff8371280ede205633691a60604f1c3d771508f9b7ffa83d523526326112";
            };
            beamDeps  = [ ex_doc_0_16_1 poison_3_1_0 ];

            meta = {
              description = ''A library for validating JSON responses'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/danmcclain/voorhees";
            };
          } // packageOverrides)
      ) {};

    voorhees = voorhees_0_1_1;

    voxpop_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "voxpop";
            version = "0.0.3";
            src = fetchHex {
              pkg = "voxpop";
              version = "0.0.3";
              sha256 =
                "b0b09c48ac47097a6b24758bd6cf93a113cc3ff46302fc5973a9d86ea468433a";
            };

            meta = {
              description = ''Voxpop generates text from declarative
                            grammars.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zovafit/voxpop";
            };
          } // packageOverrides)
      ) {};

    voxpop = voxpop_0_0_3;

    vsn_1_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "vsn";
            version = "1.1.0";
            src = fetchHex {
              pkg = "vsn";
              version = "1.1.0";
              sha256 =
                "d83874b2c291e00ffa5b508ded1dfcf155e0e2099ea1d4accfa260ccfc12e9ca";
            };

            meta = {
              description = ''Module for parsing and matching versions'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/emedia-project/vsn";
            };
          } // packageOverrides)
      ) {};

    vsn = vsn_1_1_0;

    wakaway_0_5_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "wakaway";
            version = "0.5.0";
            src = fetchHex {
              pkg = "wakaway";
              version = "0.5.0";
              sha256 =
                "d4aeb8d41d1c959b9b071fc974fe8653637f15b0c7d864f2f44ed251d3943140";
            };

            meta = {
              longDescription = ''There`re Walker`s Alias Method and Weighted
                                Choice that providing weighted random choice
                                algorism in two ways.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ikeikeikeike/wakaway";
            };
          } // packageOverrides)
      ) {};

    wakaway = wakaway_0_5_0;

    wakeonlan_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, socket_0_3_12 }:
          buildMix ({
            name = "wakeonlan";
            version = "0.1.0";
            src = fetchHex {
              pkg = "wakeonlan";
              version = "0.1.0";
              sha256 =
                "20909cc7ac5119ad7af75dbdc1e442af00b5084d707f900d3eb8d7b9fa81676c";
            };
            beamDeps  = [ socket_0_3_12 ];

            meta = {
              description = ''An Elixir module for sending Wake-on-LAN
                            packets'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/martinp/wakeonlan";
            };
          } // packageOverrides)
      ) {};

    wakeonlan = wakeonlan_0_1_0;

    wallaby_0_17_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0,
          poolboy_1_5_1
        }:
          buildMix ({
            name = "wallaby";
            version = "0.17.0";
            src = fetchHex {
              pkg = "wallaby";
              version = "0.17.0";
              sha256 =
                "eaea8ca90395b08174e6fd05c8839a1d8775f19dc367f9622263aa1f1fa469e8";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 poolboy_1_5_1 ];

            meta = {
              description = ''Concurrent feature tests for elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/keathley/wallaby";
            };
          } // packageOverrides)
      ) {};

    wallaby = wallaby_0_17_0;

    warp_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "warp";
            version = "0.0.1";
            src = fetchHex {
              pkg = "warp";
              version = "0.0.1";
              sha256 =
                "00499c458ec126766155a37dd768766ed8eb03d7785850c9a70d131435a23cde";
            };

            meta = {
              description = ''Capistrano-like Elixir deployments'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bitcrowd/warp";
            };
          } // packageOverrides)
      ) {};

    warp = warp_0_0_1;

    watch_0_2_2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "watch";
            version = "0.2.2";
            src = fetchHex {
              pkg = "watch";
              version = "0.2.2";
              sha256 =
                "2fd8ae203b0542160eca555b9f61348fdd1524e9f5fed84fbae71069a3ef2b64";
            };

            meta = {
              description = ''Live reloading with watchman'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/yjh0502/watch";
            };
          } // packageOverrides)
      ) {};

    watch = watch_0_2_2;

    watchdog_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, sentix_1_0_3 }:
          buildMix ({
            name = "watchdog";
            version = "0.1.2";
            src = fetchHex {
              pkg = "watchdog";
              version = "0.1.2";
              sha256 =
                "113c82ed749b06161d182e633c9678bfe775a4803fa109845fa4726364d9e160";
            };
            beamDeps  = [ sentix_1_0_3 ];

            meta = {
              longDescription = ''Watchdog is a library that handles file
                                system events. It`s like Guard, but for
                                Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/uberous/watchdog";
            };
          } // packageOverrides)
      ) {};

    watchdog = watchdog_0_1_2;

    watcher_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "watcher";
            version = "1.0.0";
            src = fetchHex {
              pkg = "watcher";
              version = "1.0.0";
              sha256 =
                "53620951438e857d24f1ef324f94f42b90e8d6069dd6553ec4e6331370418b2b";
            };

            meta = {
              description = ''Watcher for GenEvent'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/edgurgel/watcher";
            };
          } // packageOverrides)
      ) {};

    watcher = watcher_1_0_0;

    water_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "water";
            version = "0.1.1";
            src = fetchHex {
              pkg = "water";
              version = "0.1.1";
              sha256 =
                "9443deacfc132e67fa802cac3016ff070a4a02e7d7021f59aa3e60c6230cebaf";
            };

            meta = {
              description = ''Utility functions for elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/minhajuddin/water";
            };
          } // packageOverrides)
      ) {};

    water = water_0_1_1;

    wayback_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, httpoison_0_9_2 }:
          buildMix ({
            name = "wayback";
            version = "0.1.0";
            src = fetchHex {
              pkg = "wayback";
              version = "0.1.0";
              sha256 =
                "f823ef3beabf88ceecae942e0a7d3fe1c01307745a829670309dbbe8ae2da922";
            };
            beamDeps  = [ httpoison_0_9_2 ];

            meta = {
              description = ''Request moments in history for a web address with
                            the Wayback Machine.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lukeed/elixir-wayback";
            };
          } // packageOverrides)
      ) {};

    wayback = wayback_0_1_0;

    wayback_archiver_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          floki_0_17_2,
          httpotion_2_2_1
        }:
          buildMix ({
            name = "wayback_archiver";
            version = "0.0.1";
            src = fetchHex {
              pkg = "wayback_archiver";
              version = "0.0.1";
              sha256 =
                "9f8bea06d6dcac6c017a3a41859373c10a1b46fb133db47300c2ae7c9fada590";
            };
            beamDeps  = [ floki_0_17_2 httpotion_2_2_1 ];

            meta = {
              description = ''Send URLs to Wayback Machine'';
              license = stdenv.lib.licenses.free;
            };
          } // packageOverrides)
      ) {};

    wayback_archiver = wayback_archiver_0_0_1;

    we_whisper_0_1_3 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, secure_random_0_5_1
        }:
          buildMix ({
            name = "we_whisper";
            version = "0.1.3";
            src = fetchHex {
              pkg = "we_whisper";
              version = "0.1.3";
              sha256 =
                "c9b117c9ae1214c9f9fe09b8bd93d1382705844b83498daebdf1aaefd756d464";
            };
            beamDeps  = [ secure_random_0_5_1 ];

            meta = {
              description = ''An Elixir Wrapper for Wechat Message
                            Encryption.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/he9qi/we_whisper_elixir";
            };
          } // packageOverrides)
      ) {};

    we_whisper = we_whisper_0_1_3;

    weasel_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "weasel";
            version = "0.1.1";
            src = fetchHex {
              pkg = "weasel";
              version = "0.1.1";
              sha256 =
                "a2b3df70bd4fa59069837cfa63be321631f6400b51420c27647f235b3388ad59";
            };

            meta = {
              description = ''Heroku like Fake name generator.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/abdulsattar/weasel";
            };
          } // packageOverrides)
      ) {};

    weasel = weasel_0_1_1;

    weather_report_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          feeder_2_0_2,
          httpoison_0_8_3,
          sweet_xml_0_6_5,
          trie_1_7_1
        }:
          buildMix ({
            name = "weather_report";
            version = "0.2.0";
            src = fetchHex {
              pkg = "weather_report";
              version = "0.2.0";
              sha256 =
                "d052a6b7d2a6c5a7e2c310f8a0be2fe70ee1a62ef2b0b89e1a804016c6fbeed5";
            };
            beamDeps  = [
                          feeder_2_0_2
                          httpoison_0_8_3
                          sweet_xml_0_6_5
                          trie_1_7_1
                        ];

            meta = {
              longDescription = ''Get weather forecasts from the National
                                Oceanic and Atmospheric Administration! As the
                                NOAA is a United States government agency, only
                                forecasts in the US are supported.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sschneider1207/weather_report";
            };
          } // packageOverrides)
      ) {};

    weather_report = weather_report_0_2_0;

    weave_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "weave";
            version = "1.0.0";
            src = fetchHex {
              pkg = "weave";
              version = "1.0.0";
              sha256 =
                "f9875bd5eb7c131b1f6a5e0c6d93aa9121d3971ecd12de012ab36acaf81d58c0";
            };

            meta = {
              description = ''A just-in-time configuration loader for Elixir
                            projects.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/GT8Online/weave";
            };
          } // packageOverrides)
      ) {};

    weave = weave_1_0_0;

    weaver_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "weaver";
            version = "0.1.0";
            src = fetchHex {
              pkg = "weaver";
              version = "0.1.0";
              sha256 =
                "bd17e480eb749068f1d1a20b06c044b8df76047ee26997c009c5b399cf397a29";
            };

            meta = {
              description = ''Weave objects together by their external ids'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/secretworry/weaver";
            };
          } // packageOverrides)
      ) {};

    weaver = weaver_0_1_0;

    web_push_encryption_0_1_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, httpoison_0_11_2 }:
          buildMix ({
            name = "web_push_encryption";
            version = "0.1.3";
            src = fetchHex {
              pkg = "web_push_encryption";
              version = "0.1.3";
              sha256 =
                "4bac43c7be260ab7da76c892136f3cd29b2b80694fd6e7a58b51744cd0af894e";
            };
            beamDeps  = [ httpoison_0_11_2 ];

            meta = {
              description = ''Web push encryption lilbrary'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/tuvistavie/elixir-web-push-encryption";
            };
          } // packageOverrides)
      ) {};

    web_push_encryption = web_push_encryption_0_1_3;

    web_socket_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          plug_1_3_5,
          poison_3_1_0
        }:
          buildMix ({
            name = "web_socket";
            version = "0.1.0";
            src = fetchHex {
              pkg = "web_socket";
              version = "0.1.0";
              sha256 =
                "1fa474eff688c9be8af367b3f041a1535bd493615c7879731a2b0febdfae7314";
            };
            beamDeps  = [ cowboy_1_1_2 plug_1_3_5 poison_3_1_0 ];

            meta = {
              description = ''A quick start for using WebSockets in Plug
                            applications.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/slogsdon/plug-web-socket";
            };
          } // packageOverrides)
      ) {};

    web_socket = web_socket_0_1_0;

    webassembly_0_6_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "webassembly";
            version = "0.6.1";
            src = fetchHex {
              pkg = "webassembly";
              version = "0.6.1";
              sha256 =
                "687cc567c6c58e154ca5f5bd45986c6fda530c42702ab7c6007f6cb663db4137";
            };

            meta = {
              longDescription = ''WebAssembly is a web DSL for Elixir. You
                                create html structure straight using do blocks.
                                Means, you can intermix html-building blocks
                                with full Elixir syntax. DSL output is an
                                iolist, which you can flatten to string, but
                                better use is to just feed it to the socket (via
                                Plug & Cowboy). WebAssembly aims to have 100%
                                test coverage.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/herenowcoder/webassembly";
            };
          } // packageOverrides)
      ) {};

    webassembly = webassembly_0_6_1;

    webdriver_0_8_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_2_2_2,
          jazz_0_2_1
        }:
          buildMix ({
            name = "webdriver";
            version = "0.8.1";
            src = fetchHex {
              pkg = "webdriver";
              version = "0.8.1";
              sha256 =
                "fe2009920fb210cd50df3a7d2bb40cd6f2844a538d52a48952f18008e1c5f3d3";
            };
            beamDeps  = [ httpotion_2_2_2 jazz_0_2_1 ];

            meta = {
              description = ''Webdriver protocol for driving web browsers.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/stuart/elixir-webdriver";
            };
          } // packageOverrides)
      ) {};

    webdriver = webdriver_0_8_1;

    weber_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "weber";
            version = "0.1.0";
            src = fetchHex {
              pkg = "weber";
              version = "0.1.0";
              sha256 =
                "742c45b3c99e207dd0aeccb818edd2ace4af10699c96fbcee0ce2f692dc5fe12";
            };

            meta = {
              description = ''weber - is Elixir MVC web framework.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/elixir-web/weber";
            };
          } // packageOverrides)
      ) {};

    weber = weber_0_1_0;

    webfinger_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_3_0_2,
          poison_3_1_0,
          sweet_xml_0_6_5
        }:
          buildMix ({
            name = "webfinger";
            version = "0.1.0";
            src = fetchHex {
              pkg = "webfinger";
              version = "0.1.0";
              sha256 =
                "0ef6e967b713d90d617a4e060eee79b2c69f144c0d91585b35d3420995c0db7a";
            };
            beamDeps  = [ httpotion_3_0_2 poison_3_1_0 sweet_xml_0_6_5 ];

            meta = {
              description = ''A simple webfinger client for querying user
                            information'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rossjones/webfinger";
            };
          } // packageOverrides)
      ) {};

    webfinger = webfinger_0_1_0;

    webmentions_0_3_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          floki_0_17_2,
          httpoison_0_11_2
        }:
          buildMix ({
            name = "webmentions";
            version = "0.3.3";
            src = fetchHex {
              pkg = "webmentions";
              version = "0.3.3";
              sha256 =
                "8e27d68b60d6df551f398e82e9569c9c772f63f09bb69a9a78e3ccec234bfea4";
            };
            beamDeps  = [ floki_0_17_2 httpoison_0_11_2 ];

            meta = {
              description = ''A Webmentions
                            (https://indiewebcamp.com/Webmention) module for
                            Elixir'';
              license = stdenv.lib.licenses.agpl3;
              homepage = "https://github.com/ckruse/webmentions-elixir";
            };
          } // packageOverrides)
      ) {};

    webmentions = webmentions_0_3_3;

    webpage_1_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "webpage";
            version = "1.0.0";
            src = fetchHex {
              pkg = "webpage";
              version = "1.0.0";
              sha256 =
                "65c7a680d45d3bd90b32a20bc03df0b2a5f5636a0eb9c203de88128d1cb490bd";
            };

            meta = {
              description = ''Yet another web framework for Erlang'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/cthulhuology/webpage";
            };
          } // packageOverrides)
      ) {};

    webpage = webpage_1_0_0;

    webpay_0_0_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_8_3,
          poison_1_5_2
        }:
          buildMix ({
            name = "webpay";
            version = "0.0.4";
            src = fetchHex {
              pkg = "webpay";
              version = "0.0.4";
              sha256 =
                "abab40fc7fda25a55d3a3dce4327d3f322df378432a9ed5e7c43e553989f467e";
            };
            beamDeps  = [ httpoison_0_8_3 poison_1_5_2 ];

            meta = {
              description = ''Elixir Webpay API wrapper'';

            };
          } // packageOverrides)
      ) {};

    webpay = webpay_0_0_4;

    websocket_client_1_2_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "websocket_client";
            version = "1.2.1";
            src = fetchHex {
              pkg = "websocket_client";
              version = "1.2.1";
              sha256 =
                "195f448716da2b678a4b93e0d7d4b69d5419cafa71fdad198e4adefab7964534";
            };

            meta = {
              description = ''Erlang websocket client'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    websocket_client = websocket_client_1_2_1;

    websockex_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "websockex";
            version = "0.2.0";
            src = fetchHex {
              pkg = "websockex";
              version = "0.2.0";
              sha256 =
                "247eb959e5fb174d745d217ca7206e6458517c00ab3780e7e5ed6dd98a7c5d21";
            };

            meta = {
              description = ''An Elixir WebSocket client'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Azolo/websockex";
            };
          } // packageOverrides)
      ) {};

    websockex = websockex_0_2_0;

    wechat_0_1_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          floki_0_9_0,
          httpoison_0_9_2,
          plug_1_3_5,
          poison_2_2_0
        }:
          buildMix ({
            name = "wechat";
            version = "0.1.3";
            src = fetchHex {
              pkg = "wechat";
              version = "0.1.3";
              sha256 =
                "980f06c6d09eb60318f011b10c91071110335262d0b2501e715037878c2d5c3c";
            };
            beamDeps  = [ floki_0_9_0 httpoison_0_9_2 plug_1_3_5 poison_2_2_0
                      ];

            meta = {
              description = ''Wechat API wrapper in Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/goofansu/wechat-elixir";
            };
          } // packageOverrides)
      ) {};

    wechat = wechat_0_1_3;

    wechat_applet_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_1_0_2 }:
          buildMix ({
            name = "wechat_applet";
            version = "0.1.0";
            src = fetchHex {
              pkg = "wechat_applet";
              version = "0.1.0";
              sha256 =
                "4dcc5a0b6161cb42d1d5210e2e28348347e2cf1c418823a8a1f1a983b63022aa";
            };
            beamDeps  = [ poison_1_0_2 ];

            meta = {
              description = ''This package provides basic functions for Wechat
                            applet.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/LcpMarvel/wechat_applet";
            };
          } // packageOverrides)
      ) {};

    wechat_applet = wechat_applet_0_1_0;

    wechat_check_signature_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, plug_1_3_5 }:
          buildMix ({
            name = "wechat_check_signature";
            version = "0.0.1";
            src = fetchHex {
              pkg = "wechat_check_signature";
              version = "0.0.1";
              sha256 =
                "5c5bb053c15082e12ad6da485fc4f711efa9198107368a42456aeafcf870caec";
            };
            beamDeps  = [ plug_1_3_5 ];

            meta = {
              description = ''An Elixir Plug for checking wechat signature.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/octocandy/wechat_check_signature";
            };
          } // packageOverrides)
      ) {};

    wechat_check_signature = wechat_check_signature_0_0_1;

    wechat_mp_auth_0_0_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_8_3,
          mimetype_parser_0_1_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "wechat_mp_auth";
            version = "0.0.3";
            src = fetchHex {
              pkg = "wechat_mp_auth";
              version = "0.0.3";
              sha256 =
                "d00787f98db188bb4f23460b2181bedc3dae48a7556b581a1e1dea4646077e70";
            };
            beamDeps  = [ httpoison_0_8_3 mimetype_parser_0_1_2 poison_2_2_0
                      ];

            meta = {
              description = ''An Elixir WeChat Media Platform Authentication
                            Client Library.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/he9qi/wechat_mp_auth";
            };
          } // packageOverrides)
      ) {};

    wechat_mp_auth = wechat_mp_auth_0_0_3;

    wechat_pay_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          plug_1_3_5,
          poison_1_0_2,
          sweet_xml_0_6_5
        }:
          buildMix ({
            name = "wechat_pay";
            version = "0.1.1";
            src = fetchHex {
              pkg = "wechat_pay";
              version = "0.1.1";
              sha256 =
                "57ea07dcde52d3c19dd8aaca97e3e5ebfe81a576ed735f128a0ef370beed6877";
            };
            beamDeps  = [
                          httpoison_0_11_2
                          plug_1_3_5
                          poison_1_0_2
                          sweet_xml_0_6_5
                        ];

            meta = {
              description = ''WechatPay API wrapper in Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/linjunpop/wechat_pay";
            };
          } // packageOverrides)
      ) {};

    wechat_pay = wechat_pay_0_1_1;

    wechatex_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, plug_1_3_5 }:
          buildMix ({
            name = "wechatex";
            version = "0.0.1";
            src = fetchHex {
              pkg = "wechatex";
              version = "0.0.1";
              sha256 =
                "211971a79d38326dbf5e603ee00165708eb17670f2a84e54df929191c6fef81c";
            };
            beamDeps  = [ plug_1_3_5 ];

            meta = {
              description = ''Wechat plugins for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/octocandy/wechatex";
            };
          } // packageOverrides)
      ) {};

    wechatex = wechatex_0_0_1;

    wedeploy_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "wedeploy";
            version = "0.1.0";
            src = fetchHex {
              pkg = "wedeploy";
              version = "0.1.0";
              sha256 =
                "18aa0c71a514f88cfbf1502bcfc946292a41956b2ec56fd669fc0e22a3cb5ba6";
            };

            meta = {
              description = ''Elixir Wedeploy API Client'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/wedeploy/api-elixir";
            };
          } // packageOverrides)
      ) {};

    wedeploy = wedeploy_0_1_0;

    weebo_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "weebo";
            version = "0.1.2";
            src = fetchHex {
              pkg = "weebo";
              version = "0.1.2";
              sha256 =
                "335367353f5675f3ce0ced41512b554da0f986efc4064479d403726c0a169231";
            };

            meta = {
              description = ''An XML-RPC parser/formatter for Elixir, with full
                            support for datatype mapping!'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/stevenschobert/weebo";
            };
          } // packageOverrides)
      ) {};

    weebo = weebo_0_1_2;

    what3words_2_0_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_8_3,
          poison_2_1_0
        }:
          buildMix ({
            name = "what3words";
            version = "2.0.0";
            src = fetchHex {
              pkg = "what3words";
              version = "2.0.0";
              sha256 =
                "32021c6430f32daf43c7f189ecafcbd24994ee3e67dc6baaf2d1161442cf24f1";
            };
            beamDeps  = [ httpoison_0_8_3 poison_2_1_0 ];

            meta = {
              description = ''Wrapper for the What3Words API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lucidstack/w3w-elixir-wrapper";
            };
          } // packageOverrides)
      ) {};

    what3words = what3words_2_0_0;

    whatwasit_0_2_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          ecto_2_1_4,
          phoenix_1_3_0_rc_2
        }:
          buildMix ({
            name = "whatwasit";
            version = "0.2.1";
            src = fetchHex {
              pkg = "whatwasit";
              version = "0.2.1";
              sha256 =
                "55d430eaab93a69d74911b68ef2f6151ee59f37df46e9ae0e890f14cc8e1137c";
            };
            beamDeps  = [ ecto_2_1_4 phoenix_1_3_0_rc_2 ];

            meta = {
              description = ''Track changes to your Ecto models.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/smpallen99/whatwasit";
            };
          } // packageOverrides)
      ) {};

    whatwasit = whatwasit_0_2_1;

    whippet_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          beagle_0_1_0,
          hound_1_0_3
        }:
          buildMix ({
            name = "whippet";
            version = "0.1.0";
            src = fetchHex {
              pkg = "whippet";
              version = "0.1.0";
              sha256 =
                "054b3cb7e2b8ca80511aaa3f9037b07199a12fc5871c00f5decd23993bfbde2c";
            };
            beamDeps  = [ beagle_0_1_0 hound_1_0_3 ];

            meta = {
              description = ''Hound bindings for integration testing MapD dc.js
                            charts'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/mrblueblue/whippet";
            };
          } // packageOverrides)
      ) {};

    whippet = whippet_0_1_0;

    white_bread_3_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, gherkin_1_4_0 }:
          buildMix ({
            name = "white_bread";
            version = "3.1.0";
            src = fetchHex {
              pkg = "white_bread";
              version = "3.1.0";
              sha256 =
                "125d0e2e6efe56ed7c575831db98fccdf4e3c8cfec3d6a22481e2235ff3f9acb";
            };
            beamDeps  = [ gherkin_1_4_0 ];

            meta = {
              longDescription = ''Story BDD tool based on cucumber. Parses
                                Gherkin formatted feature files and executes
                                them as tests.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/meadsteve/white-bread";
            };
          } // packageOverrides)
      ) {};

    white_bread = white_bread_3_1_0;

    whois_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "whois";
            version = "0.0.1";
            src = fetchHex {
              pkg = "whois";
              version = "0.0.1";
              sha256 =
                "71c21201c0bcf9934503a21e693e380fcf0e91d29728492dce182b15ff686636";
            };

            meta = {
              description = ''Pure Elixir WHOIS client and parser.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/utkarshkukreti/whois.ex";
            };
          } // packageOverrides)
      ) {};

    whois = whois_0_0_1;

    wideact_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "wideact";
            version = "0.0.3";
            src = fetchHex {
              pkg = "wideact";
              version = "0.0.3";
              sha256 =
                "91b1727104f21add141e69ace91fc400d4bddf82c57b1c7aa89e14ca6f99d210";
            };

            meta = {
              longDescription = ''Wideact is an inter-lingual actor system,
                                enabling different languages to communicate
                                seamlessly over the network. It implements a
                                very primitive protocol, capable of only
                                transmiting messages to named actors. It also
                                serves with semi-persistence, and will save
                                messages for an actor until they arrive.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gavrilovmiroslav/wideact";
            };
          } // packageOverrides)
      ) {};

    wideact = wideact_0_0_3;

    wifi_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_1_4_0
        }:
          buildMix ({
            name = "wifi";
            version = "0.2.0";
            src = fetchHex {
              pkg = "wifi";
              version = "0.2.0";
              sha256 =
                "0060d0dda9308e9dc652e83f7646485d932188a11e17fb814125ccd7449effc5";
            };
            beamDeps  = [ httpoison_0_11_2 poison_1_4_0 ];

            meta = {
              longDescription = ''Various utility functions for working with
                                the local Wifi network in Elixir. These
                                functions are mostly useful in scripts that
                                could benefit from knowing the current location
                                of the computer or the Wifi surroundings.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gausby/wifi";
            };
          } // packageOverrides)
      ) {};

    wifi = wifi_0_2_0;

    wiki_search_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_9_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "wiki_search";
            version = "0.1.0";
            src = fetchHex {
              pkg = "wiki_search";
              version = "0.1.0";
              sha256 =
                "ee43ac25382f833a75b1ef989f19426030548ac9eeda9ff761f57e6a8991663b";
            };
            beamDeps  = [ httpoison_0_9_2 poison_2_2_0 ];

            meta = {
              description = ''Retrives Wikipedia articles as a string'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/Devalo/wiki_search_escript";
            };
          } // packageOverrides)
      ) {};

    wiki_search = wiki_search_0_1_0;

    win_notify_0_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ex_sharp_0_0_6 }:
          buildMix ({
            name = "win_notify";
            version = "0.0.4";
            src = fetchHex {
              pkg = "win_notify";
              version = "0.0.4";
              sha256 =
                "25bd18c577b465c1831a04805dae777b9862da632b5887ed9395167207e344a3";
            };
            beamDeps  = [ ex_sharp_0_0_6 ];

            meta = {
              description = ''Manage Windows taskbar notification icons and
                            send alerts.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sschneider1207/win_notify";
            };
          } // packageOverrides)
      ) {};

    win_notify = win_notify_0_0_4;

    wire_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, bencoder_0_0_7 }:
          buildMix ({
            name = "wire";
            version = "0.2.0";
            src = fetchHex {
              pkg = "wire";
              version = "0.2.0";
              sha256 =
                "0a2ce1329c321bd675a79152e3ed2e99cc59b3747112498e62b14bf686ca7fba";
            };
            beamDeps  = [ bencoder_0_0_7 ];

            meta = {
              description = ''Encode and decode bittorrent peer wire protocol
                            messages'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/alehander42/wire";
            };
          } // packageOverrides)
      ) {};

    wire = wire_0_2_0;

    wit_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_9_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "wit";
            version = "0.0.1";
            src = fetchHex {
              pkg = "wit";
              version = "0.0.1";
              sha256 =
                "968773e4ad1c1557c8a0ce89b1c7d1bad47c46eb65c44e5be190c9678e6286f0";
            };
            beamDeps  = [ httpoison_0_9_2 poison_2_2_0 ];

            meta = {
              description = ''wit-elixir is the Elixir SDK for Wit.ai'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/igor-drozdov/wit-elixir";
            };
          } // packageOverrides)
      ) {};

    wit = wit_0_0_1;

    witchcraft_0_5_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, quark_2_2_0 }:
          buildMix ({
            name = "witchcraft";
            version = "0.5.0";
            src = fetchHex {
              pkg = "witchcraft";
              version = "0.5.0";
              sha256 =
                "ae57eee24d01afc157bcc25862b199e368cca049a4ae4465650aa931c9fa7788";
            };
            beamDeps  = [ quark_2_2_0 ];

            meta = {
              description = ''Monads and other dark magic (monoids, functors,
                            traversables, &c)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/expede/witchcraft";
            };
          } // packageOverrides)
      ) {};

    witchcraft = witchcraft_0_5_0;

    wizard_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "wizard";
            version = "0.1.0";
            src = fetchHex {
              pkg = "wizard";
              version = "0.1.0";
              sha256 =
                "cc22faf9e76f50592906b816027fef4ee1942a59005cf8c831c7f76e48b9193e";
            };

            meta = {
              description = ''Wizard is a math and statistics library for
                            Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/raywan/wizard";
            };
          } // packageOverrides)
      ) {};

    wizard = wizard_0_1_0;

    wizardry_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          comeonin_2_6_0,
          plug_1_3_5
        }:
          buildMix ({
            name = "wizardry";
            version = "0.0.2";
            src = fetchHex {
              pkg = "wizardry";
              version = "0.0.2";
              sha256 =
                "c3c5dd071102356c2614710e8c764f226b759a38773856dfab86122a4c5742a3";
            };
            beamDeps  = [ comeonin_2_6_0 plug_1_3_5 ];

            meta = {
              description = ''Simple, low-level user account framework for
                            Phoenix Framework'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/knrz/wizardry";
            };
          } // packageOverrides)
      ) {};

    wizardry = wizardry_0_0_2;

    wobserver_0_1_7 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          httpoison_0_11_2,
          plug_1_3_5,
          poison_1_0_2,
          websocket_client_1_2_1
        }:
          buildMix ({
            name = "wobserver";
            version = "0.1.7";
            src = fetchHex {
              pkg = "wobserver";
              version = "0.1.7";
              sha256 =
                "c222ffca421dcd980c01f6b5f9967a447e64f349a01789a2b1b285990f3c9e63";
            };
            beamDeps  = [
                          cowboy_1_1_2
                          httpoison_0_11_2
                          plug_1_3_5
                          poison_1_0_2
                          websocket_client_1_2_1
                        ];

            meta = {
              description = ''Web based metrics, monitoring, and observer.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/shinyscorpion/wobserver";
            };
          } // packageOverrides)
      ) {};

    wobserver = wobserver_0_1_7;

    woolly_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "woolly";
            version = "0.1.2";
            src = fetchHex {
              pkg = "woolly";
              version = "0.1.2";
              sha256 =
                "34677dae0bcca0c66fd611d6528e1d0532247e0ad9478a4b469476058308b40d";
            };

            meta = {
              longDescription = ''Woolly is the text mining and natural
                                language toolkit for the Elixir programming
                                language.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pjhampton/Woolly";
            };
          } // packageOverrides)
      ) {};

    woolly = woolly_0_1_2;

    word_finder_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "word_finder";
            version = "0.1.0";
            src = fetchHex {
              pkg = "word_finder";
              version = "0.1.0";
              sha256 =
                "7823f1747e7c9967317cf2ed3cb0a8d1d4675845f67610a7da29fc6f2cb7ec48";
            };

            meta = {
              longDescription = ''A simple library for searching through a
                                wordlist for words matching certain patterns.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/davty/word_finder";
            };
          } // packageOverrides)
      ) {};

    word_finder = word_finder_0_1_0;

    word_smith_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "word_smith";
            version = "0.1.2";
            src = fetchHex {
              pkg = "word_smith";
              version = "0.1.2";
              sha256 =
                "481e643c5d26f113235ee577ea9b11c2c639228e0573670329c4385ee6d4cb32";
            };

            meta = {
              longDescription = ''General text utility library to help with
                                string manipulation not found in the standard
                                Elixir library.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/benfalk/word_smith";
            };
          } // packageOverrides)
      ) {};

    word_smith = word_smith_0_1_2;

    work_queue_0_0_3 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, pipe_while_ok_0_0_2
        }:
          buildMix ({
            name = "work_queue";
            version = "0.0.3";
            src = fetchHex {
              pkg = "work_queue";
              version = "0.0.3";
              sha256 =
                "31b000cf454ee0a8f90408ea10c33ee6cdd062256a7dd3aac7fe67c48fcbb424";
            };
            beamDeps  = [ pipe_while_ok_0_0_2 ];

            meta = {
              description = ''A simple implement of the Hungry Consumer model
                            of concurrent servers. '';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/pragdave/work_queue";
            };
          } // packageOverrides)
      ) {};

    work_queue = work_queue_0_0_3;

    worker_pool_2_0_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "worker_pool";
            version = "2.0.1";
            src = fetchHex {
              pkg = "worker_pool";
              version = "2.0.1";
              sha256 =
                "0a905ec0ac0fc46f698c742fce4018970025deb6d9b73a9d1d4862fbf7b4c3a2";
            };

            meta = {
              description = ''Erlang Worker Pool'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/inaka/worker_pool";
            };
          } // packageOverrides)
      ) {};

    worker_pool_2_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "worker_pool";
            version = "2.1.0";
            src = fetchHex {
              pkg = "worker_pool";
              version = "2.1.0";
              sha256 =
                "c2409f6ca5f9d8addd32c199239b08a1ff5eb56caaaaac0c9d26b4193659d502";
            };

            meta = {
              description = ''Erlang Worker Pool'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/inaka/worker_pool";
            };
          } // packageOverrides)
      ) {};

    worker_pool_2_2_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "worker_pool";
            version = "2.2.1";
            src = fetchHex {
              pkg = "worker_pool";
              version = "2.2.1";
              sha256 =
                "9b3c39dcd61254c5c97057a168d9c12730c7552fa6b72dc385a3d94c2b7d010d";
            };

            meta = {
              description = ''Erlang Worker Pool'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/inaka/worker_pool";
            };
          } // packageOverrides)
      ) {};

    worker_pool_2_2_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "worker_pool";
            version = "2.2.3";
            src = fetchHex {
              pkg = "worker_pool";
              version = "2.2.3";
              sha256 =
                "47497a5fd2610f9bf355e3e18cb120835556e3d48df1bda685d18ee2bf3a0f94";
            };

            meta = {
              description = ''Erlang Worker Pool'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/inaka/worker_pool";
            };
          } // packageOverrides)
      ) {};

    worker_pool = worker_pool_2_2_3;

    workex_0_10_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, exactor_2_2_3 }:
          buildMix ({
            name = "workex";
            version = "0.10.0";
            src = fetchHex {
              pkg = "workex";
              version = "0.10.0";
              sha256 =
                "9bb48e3ff0294021ecc78d86d4a7521dbe46e129ae9e51a46c9f2a67a63e9cbd";
            };
            beamDeps  = [ exactor_2_2_3 ];

            meta = {
              description = ''A behaviour for simple flow control and
                            backpressure.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sasa1977/workex";
            };
          } // packageOverrides)
      ) {};

    workex = workex_0_10_0;

    workflow_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          extreme_0_7_1,
          logger_file_backend_0_0_9,
          uuid_1_1_7
        }:
          buildMix ({
            name = "workflow";
            version = "0.2.0";
            src = fetchHex {
              pkg = "workflow";
              version = "0.2.0";
              sha256 =
                "40578ff96d3d25686e6dff17da917c2651f88a302a2635c8e961e9aaa5c25cd2";
            };
            beamDeps  = [ extreme_0_7_1 logger_file_backend_0_0_9 uuid_1_1_7
                      ];

            meta = {
              description = ''Building Blocks to write CQRS Event Sourcing apps
                            in Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/work-capital/workflow";
            };
          } // packageOverrides)
      ) {};

    workflow = workflow_0_2_0;

    workshop_0_5_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "workshop";
            version = "0.5.1";
            src = fetchHex {
              pkg = "workshop";
              version = "0.5.1";
              sha256 =
                "f6eaab9360764e83cca6892d939357e505fe163412b22acca7ea4fe307c8bed2";
            };

            meta = {
              longDescription = ''Mix tasks for creating and running
                                interactive workshops for teaching people how to
                                program in Elixir, and other things.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/gausby/workshop";
            };
          } // packageOverrides)
      ) {};

    workshop = workshop_0_5_1;

    world_json_0_1_6 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_1_3_1 }:
          buildMix ({
            name = "world_json";
            version = "0.1.6";
            src = fetchHex {
              pkg = "world_json";
              version = "0.1.6";
              sha256 =
                "f91493355bc522e6ee58eed6d21fca41c32f246052c1324cb5f08b2eb1eb5e83";
            };
            beamDeps  = [ poison_1_3_1 ];

            meta = {
              description = ''topojson country and state/province collections
                            for elixir/erlang'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/camshaft/world_json_ex";
            };
          } // packageOverrides)
      ) {};

    world_json = world_json_0_1_6;

    worldly_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "worldly";
            version = "0.1.2";
            src = fetchHex {
              pkg = "worldly";
              version = "0.1.2";
              sha256 =
                "aaadd0b115daa88cfc67565bf684d7ac3d65ebafa08448ea7edc89f2a65fd2d5";
            };

            meta = {
              description = ''Includes Country and Region data from the Debian
                            iso-data project and helpers'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/vinsol/worldly";
            };
          } // packageOverrides)
      ) {};

    worldly = worldly_0_1_2;

    wpa_supplicant_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "wpa_supplicant";
            version = "0.2.0";
            src = fetchHex {
              pkg = "wpa_supplicant";
              version = "0.2.0";
              sha256 =
                "40c86728b254dd9a9a96d862049a85ccf8b8ce9d1fe27985fe5d7c7a32c56bb6";
            };

            meta = {
              longDescription = ''Elixir interface to the wpa_supplicant
                                daemon. The wpa_supplicant provides application
                                support for scanning for access points, managing
                                Wi-Fi connections, and handling all of the
                                security and other parameters associated with
                                Wi-Fi.'';
              license = with stdenv.lib.licenses; [ asl20 free ];
              homepage = "https://github.com/fhunleth/wpa_supplicant.ex";
            };
          } // packageOverrides)
      ) {};

    wpa_supplicant = wpa_supplicant_0_2_0;

    ws_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "ws";
            version = "0.0.1";
            src = fetchHex {
              pkg = "ws";
              version = "0.0.1";
              sha256 =
                "31185c57989f16c4d337974cf1896bb8da452b4f08258a48583cce211fbcf316";
            };

            meta = {
              description = ''An RFC 6455 WebSocket implementation.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/";
            };
          } // packageOverrides)
      ) {};

    ws = ws_0_0_1;

    wx_utils_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "wx_utils";
            version = "0.0.2";
            src = fetchHex {
              pkg = "wx_utils";
              version = "0.0.2";
              sha256 =
                "78bb6d423327e7cf41446a35741fe079fb138a4671d0a01e70223f6219afc3d4";
            };

            meta = {
              description = ''All of the erlang wx macros exposed as normal
                            functions.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/sschneider1207/wx_utils";
            };
          } // packageOverrides)
      ) {};

    wx_utils = wx_utils_0_0_2;

    wykop_api_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "wykop_api";
            version = "0.1.1";
            src = fetchHex {
              pkg = "wykop_api";
              version = "0.1.1";
              sha256 =
                "e1322ba8ecee3e00403bd477c49324d999c3ac8c0ad7e44aa5d070b42ae4e7ac";
            };
            beamDeps  = [ httpoison_0_11_2 poison_2_2_0 ];

            meta = {
              description = ''Library for Wykop API.'';
              license = stdenv.lib.licenses.cc0;
              homepage = "https://github.com/remiq/wykop_api_elixir";
            };
          } // packageOverrides)
      ) {};

    wykop_api = wykop_api_0_1_1;

    xain_0_6_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "xain";
            version = "0.6.0";
            src = fetchHex {
              pkg = "xain";
              version = "0.6.0";
              sha256 =
                "f6496f6681cf98c2ce3f1e8b1dac3a537f96d057720004299c7a5704d35a14af";
            };

            meta = {
              description = ''An html DSL package.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/smpallen99/xain";
            };
          } // packageOverrides)
      ) {};

    xain = xain_0_6_0;

    xandra_0_6_1 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, db_connection_1_1_2
        }:
          buildMix ({
            name = "xandra";
            version = "0.6.1";
            src = fetchHex {
              pkg = "xandra";
              version = "0.6.1";
              sha256 =
                "fa27a774e5481c8d95504452fe7b74aedc9bb6b3e2ad7541825f1e04725ebfc9";
            };
            beamDeps  = [ db_connection_1_1_2 ];

            meta = {
              description = ''Fast, simple, and robust Cassandra driver for
                            Elixir.'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/lexhide/xandra";
            };
          } // packageOverrides)
      ) {};

    xandra = xandra_0_6_1;

    xarango_0_5_6 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "xarango";
            version = "0.5.6";
            src = fetchHex {
              pkg = "xarango";
              version = "0.5.6";
              sha256 =
                "4dfb0e14cad54b2a9837355a3e8ce03fa1c9d9c655ef2a2a9ae87ca14129cf75";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''Client library for ArangoDB.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/beno/xarango";
            };
          } // packageOverrides)
      ) {};

    xarango = xarango_0_5_6;

    xbacon_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ecto_2_1_4 }:
          buildMix ({
            name = "xbacon";
            version = "0.1.0";
            src = fetchHex {
              pkg = "xbacon";
              version = "0.1.0";
              sha256 =
                "03a04e4651eb5f0a2911290f6a5b62af444bc0b4be9cd0e3c1574866fd000f2e";
            };
            beamDeps  = [ ecto_2_1_4 ];

            meta = {
              description = ''A set of validators and matchers, focusing on
                            Brazilian needs, but general too!'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/joaoevangelista/xbacon";
            };
          } // packageOverrides)
      ) {};

    xbacon = xbacon_0_1_0;

    xbank_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_10_0,
          poison_2_2_0
        }:
          buildMix ({
            name = "xbank";
            version = "0.1.1";
            src = fetchHex {
              pkg = "xbank";
              version = "0.1.1";
              sha256 =
                "d1ce5fdd875c26891e1de386d354c62bdc8df1122f8cbdde7841d454a3045cdc";
            };
            beamDeps  = [ httpoison_0_10_0 poison_2_2_0 ];

            meta = {
              description = ''Xbank is a hub for working with different bank
                            APIs'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/michalhorcic/xbank";
            };
          } // packageOverrides)
      ) {};

    xbank = xbank_0_1_1;

    xe_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          floki_0_17_2,
          httpoison_0_8_3
        }:
          buildMix ({
            name = "xe";
            version = "0.0.1";
            src = fetchHex {
              pkg = "xe";
              version = "0.0.1";
              sha256 =
                "53d693612db1343c36a7bbe6286c23f7ccfdbd44500c2a38970743238d230a77";
            };
            beamDeps  = [ floki_0_17_2 httpoison_0_8_3 ];

            meta = {
              description = ''Real time conversion for currencies'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/paulodiniz/xe";
            };
          } // packageOverrides)
      ) {};

    xe = xe_0_0_1;

    xeethemescript_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "xeethemescript";
            version = "0.3.0";
            src = fetchHex {
              pkg = "xeethemescript";
              version = "0.3.0";
              sha256 =
                "88c0e1b8d0dca78d7a4562a46957099674230a55db819cba6ec991fde33022de";
            };

            meta = {
              description = ''A Behaviour Module to define a Xee theme.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/xeejp/xee-theme-script";
            };
          } // packageOverrides)
      ) {};

    xeethemescript = xeethemescript_0_3_0;

    xend_0_6_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "xend";
            version = "0.6.2";
            src = fetchHex {
              pkg = "xend";
              version = "0.6.2";
              sha256 =
                "3e633c70e242cc98e435c4c235f41e2661b02b3a92cb157c872ac3822cde2dd1";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''Simple Elixir wrapper for Facebook`s Send API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/saulecabrera/xend";
            };
          } // packageOverrides)
      ) {};

    xend = xend_0_6_2;

    xepcache_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, depcache_1_3_0 }:
          buildMix ({
            name = "xepcache";
            version = "1.0.1";
            src = fetchHex {
              pkg = "xepcache";
              version = "1.0.1";
              sha256 =
                "b163b26145c2ab3f37ec004dc24ca49c53c1c7b50529c068e94cfcfd78ec62dd";
            };
            beamDeps  = [ depcache_1_3_0 ];

            meta = {
              longDescription = ''A wrapper around Erlang`s depcache, an
                                in-memory caching server. depcache bases its
                                caching around ETS but can also switch to using
                                the in-process dictionary for maintaining a
                                process-local cache. Convenient functions are
                                provided for getting/setting cache values, with
                                ttl and cache key dependencies, as well as a
                                memo function for caching the result of function
                                executions.'';
              license = stdenv.lib.licenses.apsl20;
              homepage = "https://github.com/arjan/xepcache";
            };
          } // packageOverrides)
      ) {};

    xepcache = xepcache_1_0_1;

    xfighter_0_2_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_8_3,
          poison_1_5_2
        }:
          buildMix ({
            name = "xfighter";
            version = "0.2.1";
            src = fetchHex {
              pkg = "xfighter";
              version = "0.2.1";
              sha256 =
                "67bb43379cd89b4b95f65f02ad5421719723d262fdbe7e399fb82ac7f3b490a8";
            };
            beamDeps  = [ httpoison_0_8_3 poison_1_5_2 ];

            meta = {
              description = ''An API wrapper for the programming game
                            Stockfighter.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bitchef/xfighter";
            };
          } // packageOverrides)
      ) {};

    xfighter = xfighter_0_2_1;

    xgps_0_4_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          gen_stage_0_11_0,
          mix_test_watch_0_2_6,
          nerves_uart_0_1_2
        }:
          buildMix ({
            name = "xgps";
            version = "0.4.1";
            src = fetchHex {
              pkg = "xgps";
              version = "0.4.1";
              sha256 =
                "6b3aa7ebee26f9b308761814b50bd4552605711d4724c67f4a9d4cf0ec5c8b1a";
            };
            beamDeps  = [
                          gen_stage_0_11_0
                          mix_test_watch_0_2_6
                          nerves_uart_0_1_2
                        ];

            meta = {
              longDescription = ''An OTP application for reading and parsing
                                GPS data written in Elixir. Will attach to an
                                serial port, and provide positions to
                                subscribers. Distributes positions using
                                GenStage.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/royveshovda/xgps";
            };
          } // packageOverrides)
      ) {};

    xgps = xgps_0_4_1;

    xjs_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_2_2_0 }:
          buildMix ({
            name = "xjs";
            version = "0.1.1";
            src = fetchHex {
              pkg = "xjs";
              version = "0.1.1";
              sha256 =
                "51f93b5008fb73ad6d9320bc97892cd861171852a59408b02823b03fe8c1b751";
            };
            beamDeps  = [ poison_2_2_0 ];

            meta = {
              description = ''elixir syntax, javascript semantics'';
              license = stdenv.lib.licenses.isc;
              homepage = "https://github.com/aaron-lebo/xjs";
            };
          } // packageOverrides)
      ) {};

    xjs = xjs_0_1_1;

    xkcd_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_8_3,
          poison_2_2_0
        }:
          buildMix ({
            name = "xkcd";
            version = "0.0.2";
            src = fetchHex {
              pkg = "xkcd";
              version = "0.0.2";
              sha256 =
                "715af8c09acba40504a41fbb16c4ce13099f36cc0b8c2cc0a473359c3ab720f4";
            };
            beamDeps  = [ httpoison_0_8_3 poison_2_2_0 ];

            meta = {
              longDescription = ''Uses the XKCD JSON API to retrieve the
                                random, specific and the latest XKCD comic.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/notdevinclark/xkcd";
            };
          } // packageOverrides)
      ) {};

    xkcd = xkcd_0_0_2;

    xlsx_parser_0_0_10 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          simple_agent_0_0_7,
          sweet_xml_0_6_5
        }:
          buildMix ({
            name = "xlsx_parser";
            version = "0.0.10";
            src = fetchHex {
              pkg = "xlsx_parser";
              version = "0.0.10";
              sha256 =
                "ceff3d2a524b744925c2fdf74985aabee68dd1291e784eb7d5b5b0d86e39a69b";
            };
            beamDeps  = [ simple_agent_0_0_7 sweet_xml_0_6_5 ];

            meta = {
              longDescription = ''Simple parsing of xlsx spreadsheet data. Data
                                can be retrieved or written to csv.'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/TheFirstAvenger/elixir-xlsx_parser.git";
            };
          } // packageOverrides)
      ) {};

    xlsx_parser = xlsx_parser_0_0_10;

    xlsxir_1_5_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, erlsom_1_4_1 }:
          buildMix ({
            name = "xlsxir";
            version = "1.5.1";
            src = fetchHex {
              pkg = "xlsxir";
              version = "1.5.1";
              sha256 =
                "75b83032c56519346bca0b3cbb1c09dc4c0d04a1505f273555662706d58f6dd8";
            };
            beamDeps  = [ erlsom_1_4_1 ];

            meta = {
              description = ''Xlsx file parser'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/kennellroxco/xlsxir";
            };
          } // packageOverrides)
      ) {};

    xlsxir = xlsxir_1_5_1;

    xmap_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "xmap";
            version = "0.2.0";
            src = fetchHex {
              pkg = "xmap";
              version = "0.2.0";
              sha256 =
                "35bd74ef0594f9ee27e261f6fda53c1af07cbd75c8f473fd13b7e440b2d48f92";
            };

            meta = {
              description = ''XML to Map converter.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/fertapric/xmap";
            };
          } // packageOverrides)
      ) {};

    xmap = xmap_0_2_0;

    xmart_things_0_1_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          oauth2_0_8_3,
          poison_1_0_2
        }:
          buildMix ({
            name = "xmart_things";
            version = "0.1.1";
            src = fetchHex {
              pkg = "xmart_things";
              version = "0.1.1";
              sha256 =
                "91755e9628fd4a286940bfa5c194aa29070410c0fb063a760afd2c25536e5944";
            };
            beamDeps  = [ oauth2_0_8_3 poison_1_0_2 ];

            meta = {
              description = ''SmartThings OAuth2 Strategy and Client for
                            Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/techgaun/xmart-things";
            };
          } // packageOverrides)
      ) {};

    xmart_things = xmart_things_0_1_1;

    xml_builder_0_0_9 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "xml_builder";
            version = "0.0.9";
            src = fetchHex {
              pkg = "xml_builder";
              version = "0.0.9";
              sha256 =
                "7b834f5a757a9feab9d423c7cc2eb304c3a6112ae6993fd87d3443cec3db4802";
            };

            meta = {
              description = ''XML builder for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/joshnuss/xml_builder";
            };
          } // packageOverrides)
      ) {};

    xml_builder_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "xml_builder";
            version = "0.1.1";
            src = fetchHex {
              pkg = "xml_builder";
              version = "0.1.1";
              sha256 =
                "f7b908fcd174e91096bd054de9261e2f56850b9efbb3e3350e877cc1300ea90e";
            };

            meta = {
              description = ''XML builder for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/joshnuss/xml_builder";
            };
          } // packageOverrides)
      ) {};

    xml_builder = xml_builder_0_1_1;

    xml_builder_plus_0_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "xml_builder_plus";
            version = "0.0.4";
            src = fetchHex {
              pkg = "xml_builder_plus";
              version = "0.0.4";
              sha256 =
                "7409a1fd1c39c51726d04ebf32f2a145e35382412da19ba89c310c92abd25823";
            };

            meta = {
              description = ''XML builder for Elixir (with namespaces
                            support)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/AirGateway/xml_builder_plus";
            };
          } // packageOverrides)
      ) {};

    xml_builder_plus = xml_builder_plus_0_0_4;

    xml_mapper_1_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, erlsom_1_4_1 }:
          buildMix ({
            name = "xml_mapper";
            version = "1.1.0";
            src = fetchHex {
              pkg = "xml_mapper";
              version = "1.1.0";
              sha256 =
                "40d90feba02a88a74f98a87ef940ebab622328dc46e28d29f5372d225dde6cd0";
            };
            beamDeps  = [ erlsom_1_4_1 ];

            meta = {
              description = ''A simple XML mapper for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/belloq/xml_mapper";
            };
          } // packageOverrides)
      ) {};

    xml_mapper = xml_mapper_1_1_0;

    xml_parser_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, quinn_1_0_2 }:
          buildMix ({
            name = "xml_parser";
            version = "0.1.1";
            src = fetchHex {
              pkg = "xml_parser";
              version = "0.1.1";
              sha256 =
                "ad35854dfadda57eafc2a83ce0cb06d8dc83a06d98766737a54b3af00a3656ec";
            };
            beamDeps  = [ quinn_1_0_2 ];

            meta = {
              description = ''Transforming XML into format that can be consumed
                            by XmlBuider'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/denispeplin/xml_parser";
            };
          } // packageOverrides)
      ) {};

    xml_parser = xml_parser_0_1_1;

    xml_to_keyword_0_0_3 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "xml_to_keyword";
            version = "0.0.3";
            src = fetchHex {
              pkg = "xml_to_keyword";
              version = "0.0.3";
              sha256 =
                "58680a674911b0424c460932d2c80d4698e921aae59600a8987fba7d7bcbf032";
            };

            meta = {
              longDescription = ''This is an Elixir package that can convert
                                xml into Elixir`s Keyword List, which is
                                compilable with XmlBuilder
                                (joshnuss/xml_builder) package'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/programisti/xml_to_keyword";
            };
          } // packageOverrides)
      ) {};

    xml_to_keyword = xml_to_keyword_0_0_3;

    xmlixer_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "xmlixer";
            version = "0.1.1";
            src = fetchHex {
              pkg = "xmlixer";
              version = "0.1.1";
              sha256 =
                "da876ca3fbcf40dd26838475eec267a872b1f9bfba5aa86e2779d10c16353b82";
            };

            meta = {
              description = ''A simple wrapper around erlang`s xmerl to
                            generate XML in elixir.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/lemnisk8/xmlixer";
            };
          } // packageOverrides)
      ) {};

    xmlixer = xmlixer_0_1_1;

    xmlrpc_0_9_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "xmlrpc";
            version = "0.9.1";
            src = fetchHex {
              pkg = "xmlrpc";
              version = "0.9.1";
              sha256 =
                "b2f6941248fa2e55e89dcb69304f58a7cc4203ce68b986260836933be8fac879";
            };

            meta = {
              longDescription = ''XML-RPC encoder/decder for Elixir. Supports
                                all valid datatypes. Input (ie untrusted) is
                                parsed with erlsom against an xml-schema for
                                security.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ewildgoose/elixir-xml_rpc";
            };
          } // packageOverrides)
      ) {};

    xmlrpc_1_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, erlsom_1_4_1 }:
          buildMix ({
            name = "xmlrpc";
            version = "1.1.0";
            src = fetchHex {
              pkg = "xmlrpc";
              version = "1.1.0";
              sha256 =
                "221e6284d730fec95e2d38e0c332644c3cd5847d872cece4f222fca6034d5773";
            };
            beamDeps  = [ erlsom_1_4_1 ];

            meta = {
              longDescription = ''XML-RPC encoder/decder for Elixir. Supports
                                all valid datatypes. Input (ie untrusted) is
                                parsed with erlsom against an xml-schema for
                                security.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/ewildgoose/elixir-xml_rpc";
            };
          } // packageOverrides)
      ) {};

    xmlrpc = xmlrpc_1_1_0;

    xmlx_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "xmlx";
            version = "0.1.0";
            src = fetchHex {
              pkg = "xmlx";
              version = "0.1.0";
              sha256 =
                "66e98f96491895507c63e5a39dca4f83405a1e38341816ea1505b81647f37fb1";
            };

            meta = {
              description = ''Elixir native XML parser that enables search
                            using attribute or element names'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rodrigozc/xmlx";
            };
          } // packageOverrides)
      ) {};

    xmlx = xmlx_0_1_0;

    xmpp_1_1_11 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          fast_xml_1_1_23,
          p1_utils_1_0_9,
          stringprep_1_0_9
        }:
          buildRebar3 ({
            name = "xmpp";
            version = "1.1.11";
            src = fetchHex {
              pkg = "xmpp";
              version = "1.1.11";
              sha256 =
                "b0e5f0a0f5a95ca0a3bbca37a07910d944564e4364a09ec5c7dca0a7dbcf5aeb";
            };

            beamDeps  = [ fast_xml_1_1_23 p1_utils_1_0_9 stringprep_1_0_9 ];

            meta = {
              description = ''Erlang/Elixir XMPP parsing and serialization
                            library'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/processone/xmpp";
            };
          } // packageOverrides)
      ) {};

    xmpp = xmpp_1_1_11;

    xoauth2_0_0_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          mock_0_2_1,
          poison_1_5_2
        }:
          buildMix ({
            name = "xoauth2";
            version = "0.0.3";
            src = fetchHex {
              pkg = "xoauth2";
              version = "0.0.3";
              sha256 =
                "4a43a0bca1707b579c6a141524666006dd25ed2efdc19aee5d6eeedf6efc3418";
            };
            beamDeps  = [ httpoison_0_11_2 mock_0_2_1 poison_1_5_2 ];

            meta = {
              description = ''A simple XOAuth2 module for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/craigp/elixir_xoauth2";
            };
          } // packageOverrides)
      ) {};

    xoauth2 = xoauth2_0_0_3;

    xpath_1_0_2 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "xpath";
            version = "1.0.2";
            src = fetchHex {
              pkg = "xpath";
              version = "1.0.2";
              sha256 =
                "396d8e1c0c738579d2bf15f7cb4f8bceb01aef4ac029f4ea222120697a279652";
            };

            meta = {
              description = ''Erlang XPath support'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/hiend/xpath";
            };
          } // packageOverrides)
      ) {};

    xpath = xpath_1_0_2;

    xprof_1_2_1 = callPackage
      (
        {
          buildRebar3,
          packageOverrides ? {},
          fetchHex,
          cowboy_1_1_2,
          customized_hdr_histogram_0_3_2,
          jsone_1_3_1,
          lager_3_2_4
        }:
          buildRebar3 ({
            name = "xprof";
            version = "1.2.1";
            src = fetchHex {
              pkg = "xprof";
              version = "1.2.1";
              sha256 =
                "37e38c4019a6f1d73b79ac671e57ccc170cc273e53e5e6b26094cf3c27d71b52";
            };

            buildPlugins  = [ coveralls ];

            beamDeps  = [
                          cowboy_1_1_2
                          customized_hdr_histogram_0_3_2
                          jsone_1_3_1
                          lager_3_2_4
                        ];

            meta = {
              description = ''Visual BEAM profiler'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/appliscale/xprof";
            };
          } // packageOverrides)
      ) {};

    xprof = xprof_1_2_1;

    xref_runner_1_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, getopt_0_8_2 }:
          buildRebar3 ({
            name = "xref_runner";
            version = "1.0.0";
            src = fetchHex {
              pkg = "xref_runner";
              version = "1.0.0";
              sha256 =
                "8f29bd2a51c6501396024ed467e6b97e2eafc7343fa4a3e1563275226fc29442";
            };

            beamDeps  = [ getopt_0_8_2 ];

            meta = {
              description = ''Xref Runner'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/inaka/xref_runner";
            };
          } // packageOverrides)
      ) {};

    xref_runner_1_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex, getopt_0_8_2 }:
          buildRebar3 ({
            name = "xref_runner";
            version = "1.1.0";
            src = fetchHex {
              pkg = "xref_runner";
              version = "1.1.0";
              sha256 =
                "f2fee85db448b1d944ecfa7aa5c72414d966d095412bdfa58f1e186f73f5111f";
            };

            beamDeps  = [ getopt_0_8_2 ];

            meta = {
              description = ''Xref Runner'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/inaka/xref_runner";
            };
          } // packageOverrides)
      ) {};

    xref_runner = xref_runner_1_1_0;

    xslt_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, porcelain_2_0_3 }:
          buildMix ({
            name = "xslt";
            version = "0.1.0";
            src = fetchHex {
              pkg = "xslt";
              version = "0.1.0";
              sha256 =
                "e6118b5d64fa6e6d00555aa67a2fa1f9e68a8a07a08c8827e5ef0190c765504f";
            };
            beamDeps  = [ porcelain_2_0_3 ];

            meta = {
              description = ''A lightweight wrapper around xsltproc'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/johnhamelink/xslt";
            };
          } // packageOverrides)
      ) {};

    xslt = xslt_0_1_0;

    xtea_0_1_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "xtea";
            version = "0.1.1";
            src = fetchHex {
              pkg = "xtea";
              version = "0.1.1";
              sha256 =
                "bc4b821d082f97960c4308fc25e3d4426677dd919392db2b5506b697fcc12ada";
            };
            compilePorts = true;

            meta = {
              description = ''XTEA encryption written in erlang with NIFs'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/rymdolle/xtea";
            };
          } // packageOverrides)
      ) {};

    xtea = xtea_0_1_1;

    xxhash_0_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "xxhash";
            version = "0.2.0";
            src = fetchHex {
              pkg = "xxhash";
              version = "0.2.0";
              sha256 =
                "ed57fd84e2c4fc440c28fa6a59d2c2ec0d3957b58dfd05cf06da8824ee6494d8";
            };

            meta = {
              description = ''Native Elixir xxHash port.'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/ttvd/elixir-xxhash";
            };
          } // packageOverrides)
      ) {};

    xxhash = xxhash_0_2_0;

    y_process_0_2_2 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, phoenix_pubsub_1_0_1
        }:
          buildMix ({
            name = "y_process";
            version = "0.2.2";
            src = fetchHex {
              pkg = "y_process";
              version = "0.2.2";
              sha256 =
                "e1a62e5406893868255eea6481534d0bc19a36d66fd2bc42e843597f2ca7a22f";
            };
            beamDeps  = [ phoenix_pubsub_1_0_1 ];

            meta = {
              longDescription = ''GenServer wrapper behaviour for pubsub
                                between processes using pg2 and Phoenix PubSub
                                (with any adapter) and a behaviour to create
                                custom pubsub backends.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gmtprime/y_process";
            };
          } // packageOverrides)
      ) {};

    y_process = y_process_0_2_2;

    yahoo_finanza_0_2_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          csv_1_4_4,
          httpoison_0_9_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "yahoo_finanza";
            version = "0.2.3";
            src = fetchHex {
              pkg = "yahoo_finanza";
              version = "0.2.3";
              sha256 =
                "9476f2490e9042cc7db5493b2e0c38643cca06b3027bf2ca2dabfe41ec5bfe8f";
            };
            beamDeps  = [ csv_1_4_4 httpoison_0_9_2 poison_2_2_0 ];

            meta = {
              longDescription = ''This is a simple Yahoo Finance module capable
                                of getting current data for several symbols in
                                bulk as well as individually. Additional
                                features include getting stock symbols filtered
                                by stock market.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Waasi/yahoo_finanza";
            };
          } // packageOverrides)
      ) {};

    yahoo_finanza = yahoo_finanza_0_2_3;

    yahoo_fx_0_2_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          time_seer_0_0_6
        }:
          buildMix ({
            name = "yahoo_fx";
            version = "0.2.0";
            src = fetchHex {
              pkg = "yahoo_fx";
              version = "0.2.0";
              sha256 =
                "e06b6986c483cad62081e19fba3089f3eab4a4f1e1cc06cd17aa45d34dd14913";
            };
            beamDeps  = [ httpoison_0_11_2 time_seer_0_0_6 ];

            meta = {
              longDescription = ''YahooFx is an Elixir library for getting
                                currency exchange rates from Yahoo Finance'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/lau/yahoo_fx";
            };
          } // packageOverrides)
      ) {};

    yahoo_fx = yahoo_fx_0_2_0;

    yajwt_1_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, poison_1_0_2 }:
          buildMix ({
            name = "yajwt";
            version = "1.0.1";
            src = fetchHex {
              pkg = "yajwt";
              version = "1.0.1";
              sha256 =
                "0398c56d3016321fd6f840ddb743d32c39a89341acdc5dc48d8b2761a6a1f987";
            };
            beamDeps  = [ poison_1_0_2 ];

            meta = {
              description = ''Yet another JWT lib'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/princemaple/elixir-jwt";
            };
          } // packageOverrides)
      ) {};

    yajwt = yajwt_1_0_1;

    yamerl_0_4_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "yamerl";
            version = "0.4.0";
            src = fetchHex {
              pkg = "yamerl";
              version = "0.4.0";
              sha256 =
                "dc366040a046736578f5e89f069fba4c545ad672e463a83e74e1d9d5a599fd4c";
            };

            meta = {
              description = ''YAML 1.2 and JSON parser in pure Erlang'';
              license = stdenv.lib.licenses.bsd2;
              homepage = "https://github.com/yakaz/yamerl";
            };
          } // packageOverrides)
      ) {};

    yamerl_0_5_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "yamerl";
            version = "0.5.0";
            src = fetchHex {
              pkg = "yamerl";
              version = "0.5.0";
              sha256 =
                "b6594862248f8c32728ff73ca9498cedd3f1118ccfb92e57ede9edc34181581a";
            };

            buildPlugins  = [ coveralls ];


            meta = {
              description = ''YAML 1.2 and JSON parser in pure Erlang'';
              license = stdenv.lib.licenses.bsd2;
              homepage = "https://github.com/yakaz/yamerl";
            };
          } // packageOverrides)
      ) {};

    yamerl = yamerl_0_5_0;

    yamerl_the_fork_0_3_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "yamerl_the_fork";
            version = "0.3.3";
            src = fetchHex {
              pkg = "yamerl_the_fork";
              version = "0.3.3";
              sha256 =
                "66d7f29703cbadc7c9e3f1f4539b4e80aa55864eb62bc9833fb2db5e9234c104";
            };

            meta = {
              description = ''A stripped down fork of yamerl, a YAML parser in
                            pure Erlang'';
              license = stdenv.lib.licenses.free;
              homepage = "https://github.com/amorphid/yamerl_the_fork";
            };
          } // packageOverrides)
      ) {};

    yamerl_the_fork = yamerl_the_fork_0_3_3;

    yaml_elixir_1_2_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "yaml_elixir";
            version = "1.2.0";
            src = fetchHex {
              pkg = "yaml_elixir";
              version = "1.2.0";
              sha256 =
                "7827069a57fc1d830c3025acbb9611f4cd51ee139e8e75de85d0c4e835df4c16";
            };

            meta = {
              description = ''Yaml parser for Elixir based on native Erlang
                            implementation.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/KamilLelonek/yaml-elixir";
            };
          } // packageOverrides)
      ) {};

    yaml_elixir_1_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, yamerl_0_4_0 }:
          buildMix ({
            name = "yaml_elixir";
            version = "1.3.0";
            src = fetchHex {
              pkg = "yaml_elixir";
              version = "1.3.0";
              sha256 =
                "004b4dd4a8392c307b3f28824881bac746a04ce37b338c1859f4ce28b23c2596";
            };
            beamDeps  = [ yamerl_0_4_0 ];

            meta = {
              description = ''Yaml parser for Elixir based on native Erlang
                            implementation.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/KamilLelonek/yaml-elixir";
            };
          } // packageOverrides)
      ) {};

    yaml_elixir = yaml_elixir_1_3_0;

    yaml_encoder_0_0_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "yaml_encoder";
            version = "0.0.2";
            src = fetchHex {
              pkg = "yaml_encoder";
              version = "0.0.2";
              sha256 =
                "ff3713e793daed297bca7252651deafd15c5f2f353a4ab03bf3f13a71fcb60a6";
            };

            meta = {
              description = ''Simple module to encode data to YAML. Not ready
                            for production, still WIP.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pilu/yaml_encoder";
            };
          } // packageOverrides)
      ) {};

    yaml_encoder = yaml_encoder_0_0_2;

    yaml_front_matter_0_2_0 = callPackage
      (
        {
          buildMix, packageOverrides ? {}, fetchHex, yaml_elixir_1_3_0
        }:
          buildMix ({
            name = "yaml_front_matter";
            version = "0.2.0";
            src = fetchHex {
              pkg = "yaml_front_matter";
              version = "0.2.0";
              sha256 =
                "9023b85ba8a3874c3ad4281182591f56080d7c461e8a1466788c334dd83f6291";
            };
            beamDeps  = [ yaml_elixir_1_3_0 ];

            meta = {
              description = ''A YAML front matter parser for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/sebastiandedeyne/yaml_front_matter";
            };
          } // packageOverrides)
      ) {};

    yaml_front_matter = yaml_front_matter_0_2_0;

    yams_0_2_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          eleveldb_2_2_20,
          statistics_0_4_1,
          uuid_1_1_7
        }:
          buildMix ({
            name = "yams";
            version = "0.2.2";
            src = fetchHex {
              pkg = "yams";
              version = "0.2.2";
              sha256 =
                "d14631cf812d37fd4288b606b6569b20752fbff6ef62176e714638d198966174";
            };
            beamDeps  = [ eleveldb_2_2_20 statistics_0_4_1 uuid_1_1_7 ];

            meta = {
              description = ''A tiny wrapper around leveldb for timeseries
                            data'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rozap/yams";
            };
          } // packageOverrides)
      ) {};

    yams = yams_0_2_2;

    yar_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, socket_0_3_12 }:
          buildMix ({
            name = "yar";
            version = "0.1.0";
            src = fetchHex {
              pkg = "yar";
              version = "0.1.0";
              sha256 =
                "23cdbe07714deee32a3d4be77e7c392ef57ab8ad28d10e053edf1cb0a136c2e6";
            };
            beamDeps  = [ socket_0_3_12 ];

            meta = {
              description = ''Yet Another Redis client (implemented in pure
                            elixir)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/dantswain/yar";
            };
          } // packageOverrides)
      ) {};

    yar = yar_0_1_0;

    yelp_ex_0_1_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_10_0,
          oauth2_0_9_1,
          poison_3_1_0
        }:
          buildMix ({
            name = "yelp_ex";
            version = "0.1.2";
            src = fetchHex {
              pkg = "yelp_ex";
              version = "0.1.2";
              sha256 =
                "1c696e07d04d4e4c198888303182df47caba3ab182455c373d51c54b578e6455";
            };
            beamDeps  = [ httpoison_0_10_0 oauth2_0_9_1 poison_3_1_0 ];

            meta = {
              description = ''An Elixir client for the Yelp Fusion API (Yelp
                            API v3)'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/jdesilvio/yelp_ex";
            };
          } // packageOverrides)
      ) {};

    yelp_ex = yelp_ex_0_1_2;

    yes_msg_0_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "yes_msg";
            version = "0.1.0";
            src = fetchHex {
              pkg = "yes_msg";
              version = "0.1.0";
              sha256 =
                "45e0a13d87cf84fa50001b27f898b470c610207947e4ddb1b1160804b4e62e0e";
            };

            meta = {
              description = ''Yet another simple message (YES) parser for
                            Erlang.'';
              license = stdenv.lib.licenses.mit;
            };
          } // packageOverrides)
      ) {};

    yes_msg = yes_msg_0_1_0;

    yggdrasil_3_2_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          amqp_0_2_2,
          connection_1_0_4,
          exreg_0_0_3,
          phoenix_pubsub_1_0_1,
          poolboy_1_5_1,
          postgrex_1_0_0_rc_1,
          redix_pubsub_0_4_1,
          skogsra_0_1_2,
          version_check_0_1_2
        }:
          buildMix ({
            name = "yggdrasil";
            version = "3.2.2";
            src = fetchHex {
              pkg = "yggdrasil";
              version = "3.2.2";
              sha256 =
                "dbe807f96a6788c41806827a21d6cbfa4f92db8b4ad6147579f12145d4500a19";
            };
            beamDeps  = [
                          amqp_0_2_2
                          connection_1_0_4
                          exreg_0_0_3
                          phoenix_pubsub_1_0_1
                          poolboy_1_5_1
                          postgrex_1_0_0_rc_1
                          redix_pubsub_0_4_1
                          skogsra_0_1_2
                          version_check_0_1_2
                        ];

            meta = {
              longDescription = ''Yggdrasil is a pubsub connection manager that
                                works for Redis, RabbitMQ and PostgreSQL by
                                default, but with the possibilty to extend
                                functionality to other brokers.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/gmtprime/yggdrasil";
            };
          } // packageOverrides)
      ) {};

    yggdrasil = yggdrasil_3_2_2;

    yocingo_0_0_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          earmark_1_2_2,
          exjsx_3_2_1,
          httpoison_0_11_2
        }:
          buildMix ({
            name = "yocingo";
            version = "0.0.3";
            src = fetchHex {
              pkg = "yocingo";
              version = "0.0.3";
              sha256 =
                "e222ea0050a5678568d463f8ae7cf7ccd8efba4dfee1637eb0e52c1a1c7809f1";
            };
            beamDeps  = [ earmark_1_2_2 exjsx_3_2_1 httpoison_0_11_2 ];

            meta = {
              longDescription = ''This is a full Telegram Bot API. With this
                                module you can create your own Telegram Bot.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Yawolf/yocingo";
            };
          } // packageOverrides)
      ) {};

    yocingo = yocingo_0_0_3;

    yodlee_0_1_4 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_4_10,
          httpoison_0_8_3,
          poison_1_5_2
        }:
          buildMix ({
            name = "yodlee";
            version = "0.1.4";
            src = fetchHex {
              pkg = "yodlee";
              version = "0.1.4";
              sha256 =
                "a5ecf2c7ec42611f7f6cdaf0980da6028f5881e23484b2bf001d75fb6f0525df";
            };
            beamDeps  = [ hackney_1_4_10 httpoison_0_8_3 poison_1_5_2 ];

            meta = {
              description = ''Yodlee API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/levanto-financial/yodlee-elixir";
            };
          } // packageOverrides)
      ) {};

    yodlee = yodlee_0_1_4;

    yomel_0_5_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "yomel";
            version = "0.5.0";
            src = fetchHex {
              pkg = "yomel";
              version = "0.5.0";
              sha256 =
                "737be278c9ae9ed40b24a45a461ea47b4979429e1d51b28961d43ee3a6426827";
            };

            meta = {
              description = ''Decodes yaml into elixir terms'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/Joe-noh/yomel";
            };
          } // packageOverrides)
      ) {};

    yomel = yomel_0_5_0;

    yt_potion_0_1_3 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_10_0,
          json_1_0_2
        }:
          buildMix ({
            name = "yt_potion";
            version = "0.1.3";
            src = fetchHex {
              pkg = "yt_potion";
              version = "0.1.3";
              sha256 =
                "1a3b7123e0f2cd3915e5ead85f1fc745b134b1cb22ce8ae53463d2a6a754da8e";
            };
            beamDeps  = [ httpoison_0_10_0 json_1_0_2 ];

            meta = {
              description = ''YouTube v3 Data API Wrapper'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/treble37/yt_potion";
            };
          } // packageOverrides)
      ) {};

    yt_potion = yt_potion_0_1_3;

    ytx_0_0_5 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, rapidax_0_0_6 }:
          buildMix ({
            name = "ytx";
            version = "0.0.5";
            src = fetchHex {
              pkg = "ytx";
              version = "0.0.5";
              sha256 =
                "a30877517201e1c964627782345273fa7ae2157591d1ae6f5663333f370db6f6";
            };
            beamDeps  = [ rapidax_0_0_6 ];

            meta = {
              description = ''Youtube API Client for Elixir'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/victorlcampos/ytx";
            };
          } // packageOverrides)
      ) {};

    ytx = ytx_0_0_5;

    yubico_0_1_5 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "yubico";
            version = "0.1.5";
            src = fetchHex {
              pkg = "yubico";
              version = "0.1.5";
              sha256 =
                "314f121954c47e1fc812dc7252420bd5f9ace87bf0815e80c164175bb9f25323";
            };

            meta = {
              description = ''Client implementing the Yubico Validation
                            Protocol Version 2.0.'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/project-fifo/erlang-yubico";
            };
          } // packageOverrides)
      ) {};

    yubico = yubico_0_1_5;

    yuri_1_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "yuri";
            version = "1.0.0";
            src = fetchHex {
              pkg = "yuri";
              version = "1.0.0";
              sha256 =
                "4a4c851f7ea20141201a9b69eaefb300b420e6c94a1513519aaef39f63d939c5";
            };

            meta = {
              description = ''Simple struct for representing URIs.'';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/kemonomachi/yuri";
            };
          } // packageOverrides)
      ) {};

    yuri = yuri_1_0_0;

    yyid_0_1_2 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "yyid";
            version = "0.1.2";
            src = fetchHex {
              pkg = "yyid";
              version = "0.1.2";
              sha256 =
                "37fb0acf8e7f30e66fbba18326b357aeaeb19b671b59d4beb8c8bd943370eeab";
            };

            meta = {
              longDescription = ''Generates random tokens that look like type 4
                                UUIDs: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx '';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/janlelis/yyid.ex";
            };
          } // packageOverrides)
      ) {};

    yyid = yyid_0_1_2;

    zanox_0_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_8_0,
          poison_1_5_0
        }:
          buildMix ({
            name = "zanox";
            version = "0.0.1";
            src = fetchHex {
              pkg = "zanox";
              version = "0.0.1";
              sha256 =
                "30af29400aaa0ff207ca4f24849d563c1691185faf86fc2c7f534b550175dee2";
            };
            beamDeps  = [ httpoison_0_8_0 poison_1_5_0 ];

            meta = {
              description = ''Zanox API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/rafaelss/zanox";
            };
          } // packageOverrides)
      ) {};

    zanox = zanox_0_0_1;

    zarex_0_3_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "zarex";
            version = "0.3.0";
            src = fetchHex {
              pkg = "zarex";
              version = "0.3.0";
              sha256 =
                "b4c59af6ccc9c0ffea797920a7f66cdaaa498cda83e4bc4c077ff09cb3b21961";
            };

            meta = {
              description = ''Filename sanitization for Elixir'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/ricn/zarex";
            };
          } // packageOverrides)
      ) {};

    zarex = zarex_0_3_0;

    zbase32_2_0_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "zbase32";
            version = "2.0.0";
            src = fetchHex {
              pkg = "zbase32";
              version = "2.0.0";
              sha256 =
                "798f81895658f9773e1dcf30ba3c118547f482502c5e1e19e72752f9a6f23e44";
            };

            meta = {
              longDescription = ''Efficient implementation of z-base-32, Phil
                                Zimmermann`s human-oriented base-32 encoding.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/pspdfkit-labs/zbase32";
            };
          } // packageOverrides)
      ) {};

    zbase32 = zbase32_2_0_0;

    zen_ex_0_2_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_3_0_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "zen_ex";
            version = "0.2.1";
            src = fetchHex {
              pkg = "zen_ex";
              version = "0.2.1";
              sha256 =
                "681375bc639a9c66ef1b0c10dd71fbcbf290c6748e8188710bfbf2170514b4de";
            };
            beamDeps  = [ httpotion_3_0_2 poison_3_1_0 ];

            meta = {
              description = ''Zendesk REST API client for Elixir'';
              license = stdenv.lib.licenses.cc0;
              homepage = "https://github.com/otoyo/zen_ex";
            };
          } // packageOverrides)
      ) {};

    zen_ex = zen_ex_0_2_1;

    zencoder_1_0_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_2_2_1,
          poison_1_4_0
        }:
          buildMix ({
            name = "zencoder";
            version = "1.0.1";
            src = fetchHex {
              pkg = "zencoder";
              version = "1.0.1";
              sha256 =
                "b2220575aa2ee1da5101774c82e1d68f2e5f86d6cefd6f04811c882fc05473bc";
            };
            beamDeps  = [ httpotion_2_2_1 poison_1_4_0 ];

            meta = {
              description = ''Elixir API wrapper for the Zencoder video
                            transcoding API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/zencoder/zencoder-ex";
            };
          } // packageOverrides)
      ) {};

    zencoder = zencoder_1_0_1;

    zendex_0_8_1 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_2_2_0
        }:
          buildMix ({
            name = "zendex";
            version = "0.8.1";
            src = fetchHex {
              pkg = "zendex";
              version = "0.8.1";
              sha256 =
                "b638edcbb63501391b5c9205f0254d10e7681c3d681ddaa6d73117090b3a6d28";
            };
            beamDeps  = [ httpoison_0_11_2 poison_2_2_0 ];

            meta = {
              description = ''An Elixir wrapper for the Zendesk API.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/shdblowers/zendex";
            };
          } // packageOverrides)
      ) {};

    zendex = zendex_0_8_1;

    zigzag_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "zigzag";
            version = "0.0.1";
            src = fetchHex {
              pkg = "zigzag";
              version = "0.0.1";
              sha256 =
                "27a151e219cf0dcabda9977aad3fbae7b8c366c88a88846e830bc4364f31ed95";
            };

            meta = {
              description = ''Zigzag is a fast and flexible parallel processing
                            library for Elixir.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/utkarshkukreti/zigzag.ex";
            };
          } // packageOverrides)
      ) {};

    zigzag = zigzag_0_0_1;

    zip_stream_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "zip_stream";
            version = "0.1.0";
            src = fetchHex {
              pkg = "zip_stream";
              version = "0.1.0";
              sha256 =
                "a712e24d5fe74e3761c74f3e05cb03df0aa9440f3edee957445f9c9be73c9a4e";
            };

            meta = {
              longDescription = ''Library to read zip file in a stream. Zip
                                file binary stream -> stream of {:new_file,name}
                                or uncompressed_bin Erlang zlib library only
                                allows deflate decompress stream. But Erlang zip
                                library does not allow content streaming.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/awetzel/zip_stream";
            };
          } // packageOverrides)
      ) {};

    zip_stream = zip_stream_0_1_0;

    zipcloudx_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_8_3,
          poison_1_5_2
        }:
          buildMix ({
            name = "zipcloudx";
            version = "0.0.2";
            src = fetchHex {
              pkg = "zipcloudx";
              version = "0.0.2";
              sha256 =
                "1e474ec0229b6dd1404c34fbd2a851d136d9549d5ecccbd01d017baac64b264e";
            };
            beamDeps  = [ httpoison_0_8_3 poison_1_5_2 ];

            meta = {
              description = ''Elixir zipcloud API wrapper'';

            };
          } // packageOverrides)
      ) {};

    zipcloudx = zipcloudx_0_0_2;

    zipcode_to_timezone_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "zipcode_to_timezone";
            version = "0.1.0";
            src = fetchHex {
              pkg = "zipcode_to_timezone";
              version = "0.1.0";
              sha256 =
                "01bcace063c620ebd15c0143ceab971690783dbfd85e01d132bf0fd925618af2";
            };

            meta = {
              description = ''Timezone lookup by US zip code'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/opendoor-labs/zipcode_to_timezone";
            };
          } // packageOverrides)
      ) {};

    zipcode_to_timezone = zipcode_to_timezone_0_1_0;

    zipflow_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "zipflow";
            version = "0.0.1";
            src = fetchHex {
              pkg = "zipflow";
              version = "0.0.1";
              sha256 =
                "1b6e43e3a40529e41fbbb47d27470a3842834be066b676b68f5b0bfed68c8f39";
            };

            meta = {
              description = ''stream zip archives while building them'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "http://github.com/dgvncsz0f/zipflow";
            };
          } // packageOverrides)
      ) {};

    zipflow = zipflow_0_0_1;

    zipper_1_0_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "zipper";
            version = "1.0.0";
            src = fetchHex {
              pkg = "zipper";
              version = "1.0.0";
              sha256 =
                "00cb372fd826289557e0db8f817a29f1878f902468ff6c859174e3cd78b7e6ac";
            };

            meta = {
              description = ''Generic Zipper Implementation for Erlang'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/inaka/zipper";
            };
          } // packageOverrides)
      ) {};

    zipper_1_0_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "zipper";
            version = "1.0.1";
            src = fetchHex {
              pkg = "zipper";
              version = "1.0.1";
              sha256 =
                "6a1fd3e1f0cc1d1df5642c9a0ce2178036411b0a5c9642851d1da276bd737c2d";
            };

            meta = {
              description = ''Generic Zipper Implementation for Erlang'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/inaka/zipper";
            };
          } // packageOverrides)
      ) {};

    zipper = zipper_1_0_1;

    zipper_list_1_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "zipper_list";
            version = "1.1.1";
            src = fetchHex {
              pkg = "zipper_list";
              version = "1.1.1";
              sha256 =
                "f22b7b084efec3a41ed392dee99823e479824d4a542df096ca72b94e1a610343";
            };

            meta = {
              description = ''Elixir implementation of a zipper for List.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/bbugh/zipper_list";
            };
          } // packageOverrides)
      ) {};

    zipper_list = zipper_list_1_1_1;

    zipper_tree_0_1_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "zipper_tree";
            version = "0.1.1";
            src = fetchHex {
              pkg = "zipper_tree";
              version = "0.1.1";
              sha256 =
                "df6e81d6be9c9ac582bcde541e263d1379485f5cbb5b7cd1b55cd031fe7741ea";
            };

            meta = {
              description = ''Methods for travelsal and modification of Trees
                            using a zipper. '';
              license = stdenv.lib.licenses.wtfpl;
              homepage = "https://github.com/Dkendal/zipper_tree";
            };
          } // packageOverrides)
      ) {};

    zipper_tree = zipper_tree_0_1_1;

    zippy_0_0_1 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, ex_doc_0_16_1 }:
          buildMix ({
            name = "zippy";
            version = "0.0.1";
            src = fetchHex {
              pkg = "zippy";
              version = "0.0.1";
              sha256 =
                "88b983d79a38769a5c5a7a1e3c9377732dae949208dc0b8fbd0462283c942da1";
            };
            beamDeps  = [ ex_doc_0_16_1 ];

            meta = {
              description = ''An Elixir implementation of Zipper lists, binary
                            trees and forests.'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/tchoutri/zippy";
            };
          } // packageOverrides)
      ) {};

    zippy = zippy_0_0_1;

    zlist_1_0_3 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "zlist";
            version = "1.0.3";
            src = fetchHex {
              pkg = "zlist";
              version = "1.0.3";
              sha256 =
                "c5ed3928628cfc9041afb6b1ee3d73d5c85473e6d3ce0f4cb6b1fcb20a207b89";
            };

            meta = {
              description = ''Erlang lazy list library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/egobrain/zlist";
            };
          } // packageOverrides)
      ) {};

    zlist_1_1_1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "zlist";
            version = "1.1.1";
            src = fetchHex {
              pkg = "zlist";
              version = "1.1.1";
              sha256 =
                "1ba37dd5cf29ef6bdbcbb84507f43c4153eeb33274e2a9e205e466196c781862";
            };

            meta = {
              description = ''Erlang lazy list library'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/egobrain/zlist";
            };
          } // packageOverrides)
      ) {};

    zlist = zlist_1_1_1;

    zlists_0_0_4 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex }:
          buildMix ({
            name = "zlists";
            version = "0.0.4";
            src = fetchHex {
              pkg = "zlists";
              version = "0.0.4";
              sha256 =
                "babc8b78984e4988dafeb9e07a77f04d3f8ea208d49e60b6669da43b0d2c2c4b";
            };

            meta = {
              description = ''Z-Lists -- an erlang lazy lists.'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/elixir-lang/mydep.git";
            };
          } // packageOverrides)
      ) {};

    zlists = zlists_0_0_4;

    zoho_0_0_2 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_3_0_2,
          ibrowse_4_4_0,
          jazz_0_2_1
        }:
          buildMix ({
            name = "zoho";
            version = "0.0.2";
            src = fetchHex {
              pkg = "zoho";
              version = "0.0.2";
              sha256 =
                "00993972172f92d4c0453ca92a5fd00c47053c380333532517b673f9111c2a0a";
            };
            beamDeps  = [ httpotion_3_0_2 ibrowse_4_4_0 jazz_0_2_1 ];

            meta = {
              longDescription = ''Elixir wrapper for Zoho CRM API. Full
                                documentation can be found at
                                https://www.zoho.com/crm/help/api/'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/wyattbenno777/zoho-elixir";
            };
          } // packageOverrides)
      ) {};

    zoho = zoho_0_0_2;

    zotonic_mod_acl_user_groups_1_0_0_dev = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "zotonic_mod_acl_user_groups";
            version = "1.0.0-dev";
            src = fetchHex {
              pkg = "zotonic_mod_acl_user_groups";
              version = "1.0.0-dev";
              sha256 =
                "563e0a4784f34b38dde4de757c1f253f4880b21636de0d88e61a646b6665b0e7";
            };

            meta = {
              description = ''Zotonic module for organizing users into
                            hierarchical groups'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/zotonic/zotonic";
            };
          } // packageOverrides)
      ) {};

    zotonic_mod_acl_user_groups =
      zotonic_mod_acl_user_groups_1_0_0_dev;

    zotonic_stdlib_1_0_0_alpha1 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "zotonic_stdlib";
            version = "1.0.0-alpha1";
            src = fetchHex {
              pkg = "zotonic_stdlib";
              version = "1.0.0-alpha1";
              sha256 =
                "1b7aaafb9f1329446c42c7091b58c5c98e293ebdf2af7ad678e0dc6d70d520a8";
            };

            meta = {
              description = ''Zotonic standard library'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/zotonic/z_stdlib";
            };
          } // packageOverrides)
      ) {};

    zotonic_stdlib = zotonic_stdlib_1_0_0_alpha1;

    zset_0_1_0 = callPackage
      (
        {  buildMix, packageOverrides ? {}, fetchHex, rbtree_0_1_6 }:
          buildMix ({
            name = "zset";
            version = "0.1.0";
            src = fetchHex {
              pkg = "zset";
              version = "0.1.0";
              sha256 =
                "02683543adc3cd4fa1ae15caab10dc8784a06b2ae53fd4db43e5d6a61fb03f53";
            };
            beamDeps  = [ rbtree_0_1_6 ];

            meta = {
              description = ''sorted set with redis api'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/rickyhan/zset";
            };
          } // packageOverrides)
      ) {};

    zset = zset_0_1_0;

    zstd_0_1_0 = callPackage
      (
        {  buildRebar3, packageOverrides ? {}, fetchHex }:
          buildRebar3 ({
            name = "zstd";
            version = "0.1.0";
            src = fetchHex {
              pkg = "zstd";
              version = "0.1.0";
              sha256 =
                "42cc81422687f1a257384b61b778f871f96bfe6b3cc136fc3b25d60a483071c0";
            };
            compilePorts = true;

            meta = {
              description = ''Zstd binding for Erlang/Elixir'';
              license = stdenv.lib.licenses.bsd3;
              homepage = "https://github.com/mururu/zstd-erlang";
            };
          } // packageOverrides)
      ) {};

    zstd = zstd_0_1_0;

    zuck_0_1_0 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          hackney_1_8_6,
          poison_3_1_0
        }:
          buildMix ({
            name = "zuck";
            version = "0.1.0";
            src = fetchHex {
              pkg = "zuck";
              version = "0.1.0";
              sha256 =
                "194dac2cdc17b46fa8792c1174f56730d5e9627f27eeb8c2215dec9e95ce0d56";
            };
            beamDeps  = [ hackney_1_8_6 poison_3_1_0 ];

            meta = {
              description = ''Tiny library for the Facebook Graph API'';
              license = stdenv.lib.licenses.mit;
              homepage = "https://github.com/boudra/zuck";
            };
          } // packageOverrides)
      ) {};

    zuck = zuck_0_1_0;

    zuppler_elixir_0_0_13 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpoison_0_11_2,
          poison_3_1_0
        }:
          buildMix ({
            name = "zuppler_elixir";
            version = "0.0.13";
            src = fetchHex {
              pkg = "zuppler_elixir";
              version = "0.0.13";
              sha256 =
                "325f72b5f09e52aac02a9d4ade12a29540a476b0d7b8346b2e735edd510c58cd";
            };
            beamDeps  = [ httpoison_0_11_2 poison_3_1_0 ];

            meta = {
              description = ''Elixir Client to access Zuppler endpoints from
                            Elixir projects'';
              license = stdenv.lib.licenses.asl20;
              homepage = "https://github.com/zuppler/zuppler-elixir.git";
            };
          } // packageOverrides)
      ) {};

    zuppler_elixir = zuppler_elixir_0_0_13;

    zuppler_users_client_0_0_5 = callPackage
      (
        {
          buildMix,
          packageOverrides ? {},
          fetchHex,
          httpotion_2_2_2,
          lru_cache_0_1_1,
          oauth2_0_9_1,
          phoenix_1_2_0_rc_1,
          poolboy_1_5_1
        }:
          buildMix ({
            name = "zuppler_users_client";
            version = "0.0.5";
            src = fetchHex {
              pkg = "zuppler_users_client";
              version = "0.0.5";
              sha256 =
                "519d87847b792db04bf97b6c6d56b26724b65f83b0f5ee17b83e82c5fb371557";
            };
            beamDeps  = [
                          httpotion_2_2_2
                          lru_cache_0_1_1
                          oauth2_0_9_1
                          phoenix_1_2_0_rc_1
                          poolboy_1_5_1
                        ];

            meta = {
              description = ''An Elixir OAuth 2.0 Client Library to protect
                            Zuppler API'';
              license = stdenv.lib.licenses.mit;
              homepage =
                "https://github.com/zuppler/zuppler-users-client-elixir.git";
            };
          } // packageOverrides)
      ) {};

    zuppler_users_client = zuppler_users_client_0_0_5;

  };
in stdenv.lib.fix' (stdenv.lib.extends overrides packages)